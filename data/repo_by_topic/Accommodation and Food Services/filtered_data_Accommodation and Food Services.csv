repo,user,organization,url (HTML),url (API),description,readme,stargazer count,watcher count,subscriber count,open issue count,topic (search),topics,NAICS Code
openfoodfacts,smooth-app,openfoodfacts,https://github.com/openfoodfacts/smooth-app,https://api.github.com/repos/smooth-app/openfoodfacts,"The new Open Food Facts mobile application for Android and iOS, crafted with Flutter and Dart","<picture>
  <source media=""(prefers-color-scheme: dark)"" srcset=""https://static.openfoodfacts.org/images/logos/off-logo-horizontal-dark.png?refresh_github_cache=1"">
  <source media=""(prefers-color-scheme: light)"" srcset=""https://static.openfoodfacts.org/images/logos/off-logo-horizontal-light.png?refresh_github_cache=1"">
  <img height=""48"" src=""https://static.openfoodfacts.org/images/logos/off-logo-horizontal-light.svg"">
</picture>
<br>

## Smooth App: The new Open Food Facts mobile app for Android and iPhone

[![SmoothApp Post-Submit Tests](https://github.com/openfoodfacts/smooth-app/actions/workflows/postsubmit.yml/badge.svg)](https://github.com/openfoodfacts/smooth-app/actions/workflows/postsubmit.yml)
[![Create internal releases](https://github.com/openfoodfacts/smooth-app/actions/workflows/internal-release.yml/badge.svg)](https://github.com/openfoodfacts/smooth-app/actions/workflows/internal-release.yml)

## Weekly meetings

- We e-meet Thursdays at 17:30 Paris Time (16:30 London Time, 22:00 IST, 08:30 AM PT)
- ![Google Meet](https://img.shields.io/badge/Google%20Meet-00897B?logo=google-meet&logoColor=white) Video call link: <https://meet.google.com/gnp-frks-esc>
- Join by phone: <https://tel.meet/gnp-frks-esc?pin=1110549945262>
- Add the Event to your Calendar by [adding the Open Food Facts community calendar to your calendar](https://wiki.openfoodfacts.org/Events)
- [Weekly Agenda](https://docs.google.com/document/d/1MGQqMV7M4JTjFcRsiRvMZ8bnmd9vJWdSyRR3wJHUBMk/edit): please add the Agenda items as early as you can. Make sure to check the Agenda items in advance of the meeting, so that we have the most informed discussions possible, leading to argumented decisions.
- The meeting will handle Agenda items first, and if time permits, collaborative bug triage.
- We strive to timebox the core of the meeting (decision making) to 30 minutes, with an optional free discussion/live debugging afterwards.
- We take comprehensive notes in the Weekly Agenda of agenda item discussions and of decisions taken.

## üÜï The future of the app

Starting this April, we invite all users and contributors to build a vision for the app. All information are detailed on this [blog post](https://blog.openfoodfacts.org/en/news/towards-1-million-users-and-beyond-for-open-food-facts-mobile-app).

## User interface

- [![Figma](https://img.shields.io/badge/figma-%23F24E1E.svg?logo=figma&logoColor=white) Mockups on the current app and future plans to discuss](https://www.figma.com/file/nFMjewFAOa8c4ahtob7CAB/Mobile-App-Design-(Quentin)?node-id=0%3A1&t=SrBuT7gBdhapUerx-0)

## Feature Sprint

- We use feature-based sprints, [tracked here](https://github.com/orgs/openfoodfacts/projects/83)

## Code documentation

[Code documentation on GitHub pages](https://openfoodfacts.github.io/smooth-app/).

## Current Release

- Latest commit deployed to Apple App Store: Released on Nov 29th as Build 835
- Latest commit deployed to PlayStore: 792 from Nov 6th 11AM

## Presentation

- This new mobile application aims to showcase Open Food Facts's power to a broad range of users through a smooth user experience and sleek user interface. It is a <b> Flutter application </b> by [Open Food Facts](https://github.com/openfoodfacts).
- We pioneered the collaborative scanning app in 2012. With this experimental app, we‚Äôre reinventing it from the ground up.
- Install it on **Android** ([Google Play](https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner), [F-Droid](https://f-droid.org/fr/packages/openfoodfacts.github.scrachx.openfood/) or [Amazon App Store](https://www.amazon.com/Open-Food-Facts-food-Nutriscore/dp/B00U49IVIU)) or [iPhone/iPad](https://apps.apple.com/app/open-food-facts/id588797948). Note that a internal development build ([Android](https://play.google.com/apps/internaltest/4699092342921529278) or **iPhone/iPad** ([App Store](https://testflight.apple.com/join/c2tiBHgd)) if you'd like to use the results of your PRs quicker.

<img alt=""app showcase"" height='175' src=""https://user-images.githubusercontent.com/1689815/168430524-3adc923a-1ce3-4233-9af5-02e9d49a76ca.png"" align=""left"" hspace=""1"" vspace=""1"">

- Smooth-app is developed in parallel to the [openfoodfacts-dart](https://github.com/openfoodfacts/openfoodfacts-dart) plugin, which provides a high level interface with the Open Food Facts API and [openfoodfacts_flutter_lints](https://github.com/openfoodfacts/openfoodfacts_flutter_lints) which provides specific linting
- Every new interaction with the API should be implemented in the plugin in order to provide these new features to other developers.
- We support desktop platforms (Linux, macOS and Windows), but **only for development**

<br>

<details><summary><h2>Features of the app</h2></summary>

## Features

- a scan that truly matches who you are (Green: the product matches your criteria, Red: there is a problem, Gray: Help us answer you by photographing the products)
- a product page that's knowledgeable, building on the vast amount of food facts we collect collaboratively, and other sources of knowledge, to help you make better food decisions

## You can

- scan and compare in 15 seconds the 3 brands of tomato sauces left on the shelf, on your terms.
- get a tailored comparison of any food category
- set your preferences without ruining your privacy

## Criteria you can pick

- Environment: Eco-Score
- Health: Additives & Ultra processed foods, Salt, Allergens, Nutri-Score

</details>

<br>
 
## About this Repository

![GitHub language count](https://img.shields.io/github/languages/count/openfoodfacts/smooth-app)
![GitHub top language](https://img.shields.io/github/languages/top/openfoodfacts/smooth-app)
![GitHub last commit](https://img.shields.io/github/last-commit/openfoodfacts/smooth-app)
![Github Repo Size](https://img.shields.io/github/repo-size/openfoodfacts/smooth-app)

<br>

## How to run the project

- Make sure you have installed flutter and all the requirements
  - [Official flutter installation guide](https://docs.flutter.dev/get-started/install)
- Currently, the app uses the latest stable version of Flutter (3.13).


We have predefined run configurations for Android Studio and Visual Studio Code

In order to run the application, make sure you are in the `packages/smooth_app` directory and run these commands:

- `flutter pub get .`

- On Android ü§ñ: `flutter run -t lib/entrypoints/android/main_google_play.dart`

- On iOS/macOS üçé: `flutter run -t lib/entrypoints/ios/main_ios.dart`

- TroubleshootingüöÄ: If you get an error like `App depends on scanner shared from path which depends on camera_platform_interface from git, version solving failed.`  then run
  - `flutter pub cache clean` or manually delete  the  
  - `C:\Users\~\AppData\Local\Pub\Cache`  file.
 Then redo the above procedure to run the app.

- [Contributing Guidelines](https://github.com/openfoodfacts/smooth-app/blob/develop/CONTRIBUTING.md)

<br>

<details><summary><h3>Thanks</h3></summary>
The app was initially created by Primael. The new Open Food Facts app (smooth_app) was then made possible thanks to an initial grant by the Mozilla Foundation in February 2020, after Pierre pitched them the idea at FOSDEM. A HUGE THANKS üß°
In addition to the core role of the community, we also had the support from several Google.org fellows and a ShareIt fellow that helped us eventually release the app in June 2022.
</details>
<br>

## Contributors

<a href=""https://github.com/openfoodfacts/smooth-app/graphs/contributors"">
  <img alt=""List of contributors to this repository"" src=""https://contrib.rocks/image?repo=openfoodfacts/smooth-app"" />
</a>
",538,538,17,439,food,"[android, dart, dartlang, flutter, flutter-app, food, hacktoberfest, ios, mobile, mobile-app, nutrition, openfoodfacts]",72
hmontazeri,is-vegan,,https://github.com/hmontazeri/is-vegan,https://api.github.com/repos/is-vegan/hmontazeri,Is-Vegan helps you to find out which food ingredients are vegan / non-vegan,"[![Build Status](https://travis-ci.org/hmontazeri/is-vegan.svg?branch=master)](https://travis-ci.org/hmontazeri/is-vegan) [![npm version](https://badge.fury.io/js/is-vegan.svg)](https://badge.fury.io/js/is-vegan) [![codecov](https://codecov.io/gh/hmontazeri/is-vegan/branch/master/graph/badge.svg)](https://codecov.io/gh/hmontazeri/is-vegan)

# is-vegan

Is-Vegan helps you to find out which food ingredients are vegan / non-vegan. It can answer that on 1 ingredient or on a list of ingredients. It uses a 850+ entries list of non-vegan ingredients.

[Wanna buy me a Coffee?](https://ko-fi.com/hmontazeri)

[How to use?](#usage)

[Free API Service?](https://is-vegan.netlify.com/)

## Why?

We are aware that 'veganism' and the definition of it can be a hot topic. We created the non-vegan list keeping in mind that veganism in dietary terms, it denotes the practice of dispensing with all products derived wholly or partly from animals.

Our first step is the approach to help people understand, which products, and where applicable its ingredients, do not involve, or have involved, the use of any animal product, by-product or derivative. It is not driven about any vegan lifestyle choice or stereotype.
We welcome and appreciate any help and concerence regarding the nonvegan/canbevegan list.

Currently we are unfortunatly not adressing any other forms of exploitation of, and cruelty to, animals for clothing, cosmetics or any other purpose.

**Thank you all for your comments, we appreciate the discussion, as we grow and learn from your input.**

[All comments on Hacker News](https://news.ycombinator.com/item?id=16316140)

## Sources

We want to make sure that you understand how is-vegan is implemented. We analyzed as many good information websites for vegan / non-vegan ingredients as we found to get a very accurate list of ingredients. **However, feel free to send a pull request with an updated version of the list.**

Websites we parsed:

- [veganpeace](http://www.veganpeace.com/ingredients/ingredients.htm)
- [peta](https://www.peta.org/living/food/animal-ingredients-list/)
- [veganwolf](http://www.veganwolf.com/animal_ingredients.htm)

**and we added also a few ourselves...**

## Usage

### Add

```bash
yarn add is-vegan
```

or

```bash
npm install is-vegan --save
```

### example

```javascript
const isVegan = require('is-vegan');

// or

import * as isVegan from 'is-vegan';

// example for single ingredient
isVegan.isVeganIngredient('soy'); // true
isVegan.isVeganIngredient('milk'); // false

// example for list of ingredients
isVegan.isVeganIngredientList(['aspic', 'albumin']); // false
isVegan.isVeganIngredientList(['soy', 'cacao butter']); // true

// example for list of ingredients
isVegan.containsNonVeganIngredients(['aspic', 'albumin', 'soy']); // ['aspic', 'albumin']
isVegan.containsNonVeganIngredients(['soy', 'cacao butter']); // []

// example for list of ingredients wich contain flagged and non-vegan ingredients
isVegan.checkIngredients(['soy', 'cacao butter', 'pork', 'beef', 'glycine']);
// returns
// {
//   nonvegan: ['pork', 'beef'],
//   flagged: ['glycine']
// }

// example for list of ingredients in Italian language
isVegan.setIngredientsLanguage('it'); // 'it' is the two-letter ISO 639-1 code for the Italian language
isVegan.checkIngredients([
  'manzo',
  'maiale',
  'glicina',
  'biotina',
  'soia',
  'aglio',
]);
// returns
// {
//   nonvegan: ['manzo', 'maiale'],
//   flagged: ['glicina', 'biotina']
// }

// or

import { checkIngredients } from 'is-vegan';

// example for list of ingredients wich contain flagged and non-vegan ingredients
checkIngredients(['soy', 'cacao butter', 'pork', 'beef', 'glycine']);

// returns
// {
//   nonvegan: ['pork', 'beef'],
//   flagged: ['glycine']
// }
```

### real world example

[Products searched on USDA Food Composition Databases](https://ndb.nal.usda.gov/ndb/search/list)

```javascript
const isVegan = require('is-vegan');

// MOSER ROTH, DARK CHOCOLATE
isVegan.isVeganIngredientList([
  'COCOA LIQUOR',
  'SUGAR',
  'COCOA BUTTER',
  'ALKALIZED REDUCED FAT COCOA POWDER',
  'SOY LECITHIN EMULSIFIER',
  'GROUND VANILLA',
]); // returns true
```

Checkout: [RunKit ""is-vegan-playground"" for more examples](https://runkit.com/hmontazeri/is-vegan-playground)

## Free API

[https://is-vegan.netlify.com/](https://is-vegan.netlify.com/)

## Test

```bash
yarn test
```

## Thanks for translating the lists to italian

[gianantoniopini](https://github.com/gianantoniopini)

## Alfred Workflow by Kyle Brumm (kjbrum)

[alfred-is-vegan](https://github.com/kjbrum/alfred-is-vegan)

## TODO

- extend list

## Authors

- Hamed Montazeri
- Meike Rittmeier
",463,463,11,26,food,"[food, ingredients, npm, vegan]",72
freeCodeCamp,pantry-for-good,freeCodeCamp,https://github.com/freeCodeCamp/pantry-for-good,https://api.github.com/repos/pantry-for-good/freeCodeCamp,An open source food bank logistics and inventory management tool,"[![Build Status](https://travis-ci.org/freeCodeCamp/pantry-for-good.svg?branch=staging)](https://travis-ci.org/freeCodeCamp/pantry-for-good)
[![Docker Repository on Quay](https://quay.io/repository/painejs/pantry-for-good/status ""Docker Repository on Quay"")](https://quay.io/repository/painejs/pantry-for-good)
[![Join the chat at https://gitter.im/FreeCodeCamp/pantry-for-good](https://badges.gitter.im/FreeCodeCamp/pantry-for-good.svg)](https://gitter.im/FreeCodeCamp/pantry-for-good?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

This repository is for the Pantry-for-Good application designed by Open Source for Good Contributors at [freeCodeCamp](http://www.freecodecamp.com). For deployment instructions see the [deployment guide](DEPLOYMENT.md).

If you'd like to contribute, the [contributing guide](CONTRIBUTING.md) explains the git workflow and the [developers guide](https://github.com/freeCodeCamp/pantry-for-good/wiki/developer's-guide) gives an overview of how the app works. The [open issues](https://github.com/freeCodeCamp/pantry-for-good/issues) are a good place to start, or you can try the app and add your own issues. If you get stuck or need help with something, feel free to leave a comment.

Some issues are quite large, don't feel like you have to finish them, it's ok. Little bits help too! Start slow! 

There's a demo app hosted at https://pantry-for-good.herokuapp.com, though it might be a bit behind the current version.

## Installation

------------
### Local installation summary:
1. Install [Node.js](http://nodejs.org) and [MongoDB](https://docs.mongodb.com/manual/installation/#mongodb-community-edition)
2. Start MongoDB
3. `git clone https://github.com/freeCodeCamp/Pantry-for-Good.git`
4. `cd Pantry-for-Good`
5. Make sure you're on the 'staging' branch (`git branch`), otherwise run `git checkout staging`
6. `npm install`
7. `npm run dev`
8. Open <http://localhost:8080> in your web browser
9. Login with username `admin@example.com` password `password`


------------
### Detailed local development installation steps

You'll need to have a **Node.js** version >= 6 installed. Either use your OS's package manager or follow the installation instructions on the [official website](http://nodejs.org).

This app uses **MongoDB** as its database engine. Follow [these instructions](https://docs.mongodb.com/manual/installation/#mongodb-community-edition) to install it locally and start the MongoDB server on your machine.

Install [git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) if it is not already installed. To clone this repository to your local machine, open a command line interface and navigate to the directory where you would like to install the app. Then run
`git clone https://github.com/freeCodeCamp/Pantry-for-Good.git`

Move to the `Pantry-for-Good` directory and run the `npm install` command to install the application dependencies.

Type `npm run dev` to start the application in development mode. If all goes well, it will be available at `http://localhost:8080`.  The application is pre-populated with an administrator account with `admin@example.com` as username  and `password` as password.


------------
### Installing API keys

To use all the features of this application you will need to obtain API keys and install them in the application. After following the instructions below to obtain API Keys, put your keys in the file `server/config/env/secrets.js`.

#### 1. [gmapsApiKey](https://developers.google.com/maps/documentation/javascript/get-api-key)
Google Maps API key for the deliveries feature. Currently, this key needs to be entered in the general settings page of your local instance of the application.
#### 2. [oauth](https://developers.google.com/identity/sign-in/web/devconsole-project)
Google+ API for allowing users to register/login with google.
#### 3. [sendgrid](https://sendgrid.com)
Sendgrid email API for sending emails.
- Register for a trial account or deploy the app and get the username/password from the heroku config vars
- Go to [Settings > API Keys](https://app.sendgrid.com/settings/api_keys) and create a key
- Paste the key in `secrets.js` or the `SENDGRID_API_KEY` config var of your deployed app.
",383,383,52,29,food,"[charity, food, food-banks, inventory-management, nonprofit, nonprofit-organizations, nonprofits, opensourceforgood]",72
gabrielilharco,snap-n-eat,,https://github.com/gabrielilharco/snap-n-eat,https://api.github.com/repos/snap-n-eat/gabrielilharco,Food detection and recommendation with deep learning,"# Snap & Eat (formerly deep139)
Deep Learning Hackathon 48h - Cotidiano (**First place Project =D** )

We believe nutrition tracking should be as simple as taking a picture.

Snap & Eat is a web application that tracks the user's food intake by pictures. We use state-of-the-art deep learning techniques to recognize dishes, making instant nutrition estimates from the user's meals.

The app also suggests meals based on the user's income, and is capable of showing places nearby that serve those dishes.

The system is implemented in Pytorch using [fastai lib](https://github.com/fastai/fastai), relying on Jupyter Notebooks for prototyping purposes. For the web app, we use Flask and Node.js.

## Demo

![test](data/readme-imgs/app_homescreen.jpg)
![Alt Text](data/readme-imgs/snap_n_eat.gif)

## Our model

We use an [Aggregated Residual Convolutional Neural Network](https://arxiv.org/abs/1611.05431) - ResNeXt-101 with 101 layers, pretrained on [ImageNet](http://www.image-net.org/) dataset. We finetune the model on [Food-101 dataset](https://www.vision.ee.ethz.ch/datasets_extra/food-101/), with more than 100 thousand images of 101 types of dishes. We achieve a significant improvement on accuracy (71% in our work compared to 50.1% in [Bossard et al., 2014](http://www.vision.ee.ethz.ch/~lbossard/bossard_eccv14_food-101.pdf)).

![test](data/readme-imgs/food101dataset.png) 

For recomending new dishes, we use minimum distance in an n-dimensional space of nutritional information that describes each dish.

## Installation and usage

### AWS AMI (Amazon Machine Images)

We provide a ready-to-go AMI of a p2 instance on AWS with all libraries and dependencies installed. 

| | | |
|-|-|-|
|__AMI ID__| ami-99442ee3 |
|__AMI Name__| snap-n-eat-ami |
||||

To launch an instance based on an AMI, see the [AWS Reference](https://aws.amazon.com/premiumsupport/knowledge-center/launch-instance-custom-ami/). Don't forget to git pull to get the the latest version of the code!

```sh
cd snapandeat
git pull origin master
```
 
To run all the services, the following four comands need to be run in the AWS instance, once in the ```snapandeat``` directory. We recommend using [tmux](https://github.com/tmux/tmux/wiki) to organize the terminals.

```sh
python src/services/food_predictor.py
```

```sh
python src/services/food_descriptor.py
```

```sh
python src/services/top_food.py
```

```sh
node src/webapp/server.js
```

To view and edit the Jupyter Notebooks, execute:

```sh
cd /home/ubuntu/snapandeat/src/notebooks
jupyter-notebook --no-browser --ip='*'
```

The default password for the notebooks is ```snapneat```. Don't forget to change it!

## About the idea

According to the [World Health Organization](http://www.who.int/en/), worldwide obesity has nearly tripled since 1975. In the United States, almost 75% of the population is overweight and more than half of the population is obese ([OECD](http://www.oecd.org/)). Today, many diseases that were preivously thought as hereditary are now shown to be seen conected to biological disfunction related to nutrition.

Although being healty and eating better is something the vast majority of the population want, doing so usually requires great effort and organization. The lack of an easy and simple way to track nutrition information about the food you eat can easily lead to low engagement. By providing a very easy and fun way to keep track of what the user eat, we can largely improve engagement, and directly atack on of the largest health problems in the world.
",265,265,19,10,food,"[deep-learning, deep-neural-networks, fastai, flask, food, food-classification, food-recommendation, knn, nodejs, pytorch, resnext]",72
haxxorsid,food-ordering-system,,https://github.com/haxxorsid/food-ordering-system,https://api.github.com/repos/food-ordering-system/haxxorsid,Food or Item Order Management System,"# Food Ordering System

## Screenshots
### Login
![Login](https://image.prntscr.com/image/aY4ghnqETTWc8w6RRqcSOw.jpg)
### Register
![Register](https://image.prntscr.com/image/B67umVCPSae_38Gfenxlbw.jpg)
### Modify Food Menu (Admin)
![Modify Menu](https://image.prntscr.com/image/bAoF4lB7THOSZ-9zI5eXzg.jpg)
### Food Menu (Customer)
![View tickets](https://image.prntscr.com/image/dEVkeAVhRxWbxCu_uNB5ew.jpg)
### Placing Order
![Records](https://image.prntscr.com/image/QSWkwRmNSkOnL9TrrfkpJA.jpg)
### View all Orders(Admin)
![Records](https://image.prntscr.com/image/QsUxzm5nTRatVyt5PY-xNg.jpg)
### List Tickets
![View All Tickets(Admin)](https://image.prntscr.com/image/8cr_-H4wRQC3HxOVBQseFA.jpg)
### Place & View Tickets(Customer)
![Tickets(User)](https://image.prntscr.com/image/M_VIy9bRQCe9eYFsn4AWUA.jpg)
### Communicating on Support Ticket
![Support Ticket](https://image.prntscr.com/image/aR7kQo5AQpSa_Y3kU3SDcA.jpg)
### Modify Details(Customer)
![Modifying Records](https://image.prntscr.com/image/sXogBp55SMahRleBIv7Plg.jpg)
### User Management(Admin)
![Modifying Records](https://image.prntscr.com/image/St11KReLQVOXHctcmsHY-g.jpg)


How To Install -
---------

1. Create Database food.
2. Run food.sql script provided in sql folder.
3. Go to login.php and try out our application. Sample user credentials can be found in users & wallet_details table.

Note -
---------
1. This is not ready for PRODUCTION.
2. The username and password of sample users are stored in table `users`.
3. Only Customers with ""Verified"" status can place orders using ""Cash on Delivery"" option.
4. By default a new customer gets 2000 coins in Wallet on signing up, and a fake Credit card number & CVV number is generated and stored in SQL Table ""wallet_details"" with corresponding new customer's ID.
5. Use that Card Number & CVV while placing an order, else order won't be successful or use ""Cash on delivery"" option.
6. What's lacking? Dynamic payment(real payment system) and error reporting lacks in this project. And also one might wish for showing corresponding food item's photo and all that stuff.
",262,262,24,9,food,"[css, food, hotel-food, html, management, management-system, order-food, order-management, ordering, php, restaurant, restaurant-management, restaurant-menu, restaurant-order, system, university-course, university-project]",72
mr-karan,swiggy-analytics,,https://github.com/mr-karan/swiggy-analytics,https://api.github.com/repos/swiggy-analytics/mr-karan,Analyse your swiggy orders üçî,"# swiggy-analytics

[![version](https://img.shields.io/pypi/v/swiggy-analytics.svg)](https://pypi.org/project/swiggy-analytics/)
[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/mr-karan/fate/master/LICENSE)

![Overview image](images/overview.png)

`swiggy-analytics` is CLI for fetching past orders from Swiggy and storing them in a local `SQLLite` DB. It also displays basic stats on your order history in the terminal, such as your most frequently order dish, your monthly expenditure, weekday wise distribution of orders and much more. For more advanced users, who wish to perform their own analysis, can do so by using the `sqlite3` db file which is generated.

_NOTE_: **Only** supported by Python3. Seriously, if you're still using Python2, _please_ [STOP](https://pythonclock.org/). I've tested it on Python3.5+ on OSX and Ubuntu 18.04 Vagrant machine.

## Important Disclaimer

This tool needs to login to your Swiggy account and fetch the order history. The account username lives on your local file system. If you don't feel comfortable entering these details, you can audit the code yourself to be sure that this information is not used in any evil way. There's an OTP which is sent to your registered mobile number, which is required everytime you fetch orders. Cheers!

## Getting Started

### Installation

`pip install swiggy-analytics`

### Setting up account

If you run `swiggy-analytics` for the first time, it will prompt you for your registered mobile number. An OTP will be sent to your phone and after the session is authenticated, a file `.swiggy-analytics-config.ini` is created in your home directory. The file contains your username to your Swiggy account, so you don't have to re-enter this detail everytime you run the tool.

![](images/configure-otp.png)

You can also regenrate your config file by explictly passing the flag with the command executable, such as: `swiggy-analytics --configure`

**NOTE**: Username is your phone number which you have registered with your Swiggy account.

### Quickstart

```sh
swiggy-analytics --save
```

![fetch](images/swiggy-analytics-fetch.gif)

-   If you want to persist the orders data to a local database, you should use the `--save` flag. This option would generate a `swiggy.db` file in your current working directory.
-   In case you just want to run it once and see basic stats, you can skip
    this flag and the tool will hold the data in an in memory DB which would last only till the program is running.

## Advanced

You can write your own SQL queries by importing `swiggy.db` in your DB tool. I personally used Metabase and setup a dashboard with interesting charts presenting patterns on my ordering behaviour.

![metabase-1](images/metabase-1.png)
![metabase-2](images/metabase-2.png)

## Credits

-   [@knadh](https://github.com/knadh) for the [`print_bars`](https://github.com/knadh/git-bars/blob/master/gitbars/gitbars.py#L24) function which is used to draw simple bar graph on the terminal.
-   [Python Prompt Toolkit](https://python-prompt-toolkit.readthedocs.io/en/master/) for helping me flesh out a good looking CLI so easily! <3 this library.

## Contribution

PRs on Feature Requests, Bug fixes are welcome. Feel free to open an issue and have a discussion first.

## License

[MIT](license)

### Disclaimer

This tool is only intended for personal use and is a simple demonstration. It is in open domain and I am not responsible if you use it and violate any TnC. Or as they say,
it's **for science**.
",248,248,4,5,food,"[analytics, cli, expense-tracker, food, prompt-toolkit, swiggy]",72
Singh-Shivani,Food_Lab,,https://github.com/Singh-Shivani/Food_Lab,https://api.github.com/repos/Food_Lab/Singh-Shivani,A Food App using Flutter & Firebase to post and view food blogs along with their recipes.,"<p align=""center"">
  <a href=""https://github.com/Singh-Shivani/Food_Lab"">
    <img src=""AppScreensAndPoster/FoodLab_App_Poster.png"" alt=""Logo""> 
  </a>
</p>

<p align =""center""> 
<i>A Food App using <a href=""https://flutter.dev/"">Flutter üíï</a> & <a href=""https://firebase.google.com/"">Firebase üî•</a>  </i>
<br><br>
  
## About the App ü•ò

  - FoodLab is a App to post and view food blogs along with their recipes if you want ü§§!
  
  - Login or SignUp using any account (P.S. Your credentials are safe!) ü§© and this will lead you to the feed page.
  
  - You can also build your own profile üòé and you'll see other people's blogs in your feed, you can also see the detail steps to make a dish if the owner has         written it's recipe üòç.
  
  - All the data is stored in Firebase üî•. Because of real-time database you'll get the latest and yummy food blogs üçî. Also, app uses Provider package üòé for state     management.
  
  - And the delicious ü•≥ part comes here, post your amazing mouth watering dishes ü§§ with cool pictures üòç and make sure you write detail steps of the recipe üìù so     that I and others can also try and enjoy ü§ó.
  
## Screens üòç
<p align=""center"">
<img src=""AppScreensAndPoster/landing.png"" height=""400""/><img src=""AppScreensAndPoster/login.png"" height=""400"" hspace=""20""/><img src=""AppScreensAndPoster/signup.png"" height=""400"" /><br><br>
<img src=""AppScreensAndPoster/home.png"" height=""400""/><img src=""AppScreensAndPoster/post.png"" height=""400""hspace=""20""/><img src=""AppScreensAndPoster/profile.png"" height=""400"" />
</p>

## In Action üëÄ
<p align=""center"">
  <a href=""https://github.com/Singh-Shivani/Food_Lab"">
    <img src=""AppScreensAndPoster/FoodLab_App_gif.gif"" alt=""Logo"" height=""540""> 
  </a>
</p>


  
",205,205,4,2,food,"[firebase-authentication, firebase-realtime-database, flutter, flutter-apps, flutter-firebase-auth, flutter-firebase-image-upload, flutter-food-app, flutter-provider, food, food-app, mockups, provider-architecture, ui-design]",72
Akshay0701,food_delivery_app,,https://github.com/Akshay0701/food_delivery_app,https://api.github.com/repos/food_delivery_app/Akshay0701,A Food App using Flutter & Firebase.,"# Food Delivery App
![](banner.png)
 

This is a food ordering & delivery application built with a flutter framework and firebase real-time database. 
Anyone can use this code for their own purpose. If you are interested please make your contribution to the code.

<a href=""https://github.com/Akshay0701/food_delivery_app/releases""><img src=""https://img.shields.io/github/v/release/Akshay0701/food_delivery_app"" alt=""release""/></a>
<a href=""https://github.com/Akshay0701/food_delivery_app/issues""><img src=""https://img.shields.io/github/commit-activity/m/Akshay0701/food_delivery_app"" alt=""commit-activity""/></a>
<a href=""https://github.com/Akshay0701/food_delivery_app/network/members""><img src=""https://img.shields.io/github/forks/Akshay0701/food_delivery_app"" alt=""forks""/></a>
<a href=""https://github.com/Akshay0701/food_delivery_app/stargazers""><img src=""https://img.shields.io/github/stars/Akshay0701/food_delivery_app"" alt=""stars""/></a>
<a href=""https://github.com/Akshay0701/food_delivery_app/graphs/contributors""><img src=""https://img.shields.io/github/contributors/Akshay0701/food_delivery_app"" alt=""contributors""/></a>
<a href=""https://github.com/Akshay0701/food_delivery_app/actions""><img src=""https://img.shields.io/github/checks-status/Akshay0701/food_delivery_app/master?label=build"" alt=""build""/></a>
<a href=""https://github.com/Akshay0701/food_delivery_app/blob/master/COPYING""><img src=""https://img.shields.io/github/license/Akshay0701/food_delivery_app"" alt=""license""/></a>
</p>

## Application features 

- Simple UI for food delivery app's

- Use SQLite to store order data in a local database 

- Used firebase real-time database for syncing data to server-side 

- Can add one or more food in the cart section 

- Automatically total bill will generate.

- Search different food/types

- View previous ordered food's from your account

- Google/mail auth login integrated 

### Home Screen & Loading Screen
<img src=""https://i.ibb.co/d29mMgn/homepage.jpg"" height=""400"" width=""200"">---<img src=""https://i.ibb.co/TkyLSdD/homepage2.jpg"" height=""400"" width=""200"">---<img src=""https://i.ibb.co/gSrJ7bz/category.jpg"" height=""400"" width=""200"">

### Profile Screen
<img src=""https://i.ibb.co/cyZ0K85/myorder.jpg"" height=""400"" width=""200"">---<img src=""https://i.ibb.co/h2ztgrK/fooddetails.jpg"" height=""400"" width=""200"">---<img src=""https://i.ibb.co/jJBKVZb/orderss.jpg"" height=""400"" width=""200"">

# Firebase Database 

<img src=""https://cdn-media-1.freecodecamp.org/images/0*CPTNvq87xG-sUGdx.png"" height=""300"" width=""400"">

## Built With üéØ
**A lot of love and Flutter**

## Contributing 

Make Pull requests which improve the functionality of the application in any sorts. It should conform with the following conditions. 
* Clear , short , crisp description of the PR. 
* Should add on to the value of the application.


## Acknowledgments üíñ

* To my familyüë™  and friends üë´ who always kept me motivated.
* To the community of computer science üíª.

",104,104,1,3,food,"[android-application, app, dart, delivery, firebase, firebase-auth, flutter, food, food-delivery-application, hacktoberfest, hacktoberfest2021, mockups]",72
openfoodfacts,openfoodfacts-nodejs,openfoodfacts,https://github.com/openfoodfacts/openfoodfacts-nodejs,https://api.github.com/repos/openfoodfacts-nodejs/openfoodfacts,Official Node package for Open Food Facts,"# Open Food Facts - JS SDK

This is the official JS/TS SDK for the Open Food Facts API.

## Installation

```shell
npm install openfoodfacts-nodejs
# or
yarn add openfoodfacts-nodejs
# or
pnpm add openfoodfacts-nodejs
```

#### Example code snippet:

```ts
import OFF from ""openfoodfacts-nodejs"";
const client = new OFF();

client.getProduct(""5000112546415"").then(console.log);
```

## Development

The project uses [openapi-typescript](https://github.com/drwpow/openapi-typescript) to generate the API bindings automatically from the OpenAPI specification.

The folder `server` is a submodule of the [Open Food Facts Server](https://github.com/openfoodfacts/openfoodfacts-server) repository.

### Prerequisites

- Node.js 14+
- Yarn v2

### Building

- Clone the repository and run `yarn install` in the directory.
- Run `yarn build` to generate the OpenAPI bindings and build the project.
- Run `yarn test` to run the tests.

## Contribute

We accept contributions of any kind: new features, bug fixes, documentation improvements, etc.

You can also help us by reporting bugs, suggesting improvements or testing new features.

When submitting a PR, please use the [angular commit guideline](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits).

## Third party applications

If you use this SDK, feel free to open a PR to add your application in this list.
",91,91,12,26,food,"[food, hacktoberfest, nodejs, openfoodfacts]",72
navassherif98,Recipe-Generation-from-Food-Image,,https://github.com/navassherif98/Recipe-Generation-from-Food-Image,https://api.github.com/repos/Recipe-Generation-from-Food-Image/navassherif98,"An Application for Generating a cooking recipe consist of title, ingredients and instructions from an food image using Deep Learning.","![ViewCount](https://views.whatilearened.today/views/github/navassherif98/Recipe-Generation-from-Food-Image.svg?cache=remove)

# Recipe-Generation-from-Food-Image

### Demo:
![Recipe_Generation gif](https://user-images.githubusercontent.com/55757415/124395585-8d0d0780-dd22-11eb-86fe-3a23d921b608.gif)

Are you ever in the situation where you have a mouthwatering picture of a delicious dish but no idea how to recreate it? Look no further! Our ""Recipe Generation from Food Images"" project harnesses the power of deep learning to provide you with a solution.

### Overview:

This innovative application uses state-of-the-art deep learning techniques to analyze food images and generate comprehensive cooking recipes. From a simple snapshot of your favorite dish, our system can extract essential information including:

**Recipe Title**: A catchy and descriptive title for the dish.

**Ingredients**: A detailed list of all the ingredients needed.

**Instructions**: Step-by-step cooking instructions to help you recreate the dish flawlessly.

### Key Features:

**Deep Learning Magic**: Our model employs cutting-edge computer vision algorithms to identify ingredients and cooking processes within food images.

**Natural Language Generation**: It utilizes advanced natural language processing to create coherent and easy-to-follow cooking instructions.

**User-Friendly Interface**: A user-friendly web or mobile interface for hassle-free recipe generation.

**Endless Culinary Exploration**: Discover new recipes and cuisines by simply snapping a picture of any dish.

---

### Prerequisite :
Download these files and replace it with the files in this folder ""Foodimg2Ing/data/""

1. Model (Modelbest.ckpt) : [Download Modelbest.ckpt](https://dl.fbaipublicfiles.com/inversecooking/modelbest.ckpt)

2. Ingredients (ingr_vocab.pkl) : [Download ingr_vocab.pkl](https://dl.fbaipublicfiles.com/inversecooking/ingr_vocab.pkl)

3. Instruction (instr_vocab.pkl) : [Download instr_vocab.pkl](https://dl.fbaipublicfiles.com/inversecooking/instr_vocab.pkl)

### To run the Code :

1. Open Terminal (cmd)
2. Install all the required libraries using ""pip install -r requirements.txt""
3. run ""python run.py""

You will be getting a localhost link and open that link in your browser 


",89,89,1,4,food,"[application, cooking, css, deep-learning, development, dishes, facebook, final-project, final-year-project, flask, flask-application, food, food-images, html, ingredients, inverse-cooking, machine-learning, project, recipe-generation, recipes]",72
mayaculpa,hapi,mayaculpa,https://github.com/mayaculpa/hapi,https://api.github.com/repos/hapi/mayaculpa,Hydro¬≠ponic Automa¬≠tion Plat¬≠form Ini¬≠tia¬≠tive (HAPI),"[![Build Status](https://travis-ci.org/mayaculpa/hapi.svg?master)](https://travis-ci.org/mayaculpa/hapi)

![HAPI Project](/docs/img/hapi.png?raw=true ""HAPI Project"")

# Zero-footprint Autonomous Food Production

## Our purpose
We have a plan to transform conventional agriculture from one of the top polluting activities on Earth to zero-footprint, autonomous food production. Imagine friendly robots growing and raising organic, non-gmo food for you, your family and community.
The first step towards that vision is an integrated suite of sensors and controls. We call it an automation platform.

Once this first stage of the vision is complete, we‚Äôll begin adding ‚Äúsustainable appliances‚Äù; equipment that integrates with the automation platform and fulfills key aspects of food production from generating heat from sunlight, to cleaning recycled water, to dehydrating produce. The design of these appliances is focused on minimizing the energy, water and labor inputs for food production.

With a constant stream of data flowing from indoor farms and a diverse array of sustainable appliances, we‚Äôll unleash true food system transformation by developing the intelligent algorithms that will maximize production while minimizing cost

# Under heavy development
We're currently under heavy development.
We would love to have you participate! Drop us a note and we'll add you into our product development Slack server so you can keep up with the latest.

# Requirements
The default developing platform is Raspbian, a GNU/Linux Distribution for Raspberry Pi.
We can't provide any further information about other distributions, but we strongly believe it won't be a problem to run as long as you have all the requirements.
Note: we can say that Linux Mint and Arch Linux were used to run some tests, though.

## *Development Requirements*
### **Smart Module**
See src/smart-module/README.rst for details about smart module.

### Node (HAPInode)
**Soon.**

## HAPI
http://hapihq.com/

## Wiki Page
Don't forget to check our Read The Docs.
Note: we're currently redefining a few things. You might want to check it again later.

[HAPI Read The Docs](http://hapi.readthedocs.io)

## Open Source
HAPI is an open project, meaning anyone and everyone can participate to the best of their ability.
While many aspects of the project are highly technical, there are also areas where non-technical expertise is needed.

If you would like to see what‚Äôs going on and what cool stuff we‚Äôll be working on next, contact us.

## Contact
If you have any question or sugestion, you can contact us through the link below.
http://hapihq.com/contact-us-2/

However if you have found any problem or just want to make a suggestion, please check the Issue page.

## System Overview
![System Overview of the HAPI Project](/docs/img/system-overview.png?raw=true ""HAPI Project System Overview"")

Please note: we're currently working on the system design. Some changes on this image will probably be necessary in the near future.
",67,67,27,11,food,"[arduino, automation, esp32, esp8266, food, hydroponics, mqtt, python, raspberrypi]",72
TheBusyBiscuit,ExoticGarden,,https://github.com/TheBusyBiscuit/ExoticGarden,https://api.github.com/repos/ExoticGarden/TheBusyBiscuit,A Slimefun 4 Addon that adds new plants and various new food items,"# ExoticGarden

ExoticGarden is a big addon to [Slimefun 4](https://github.com/TheBusyBiscuit/Slimefun4) which brings various new Plants, fruits, vegetables and food items to the game.

You can find more Information on the **outdated** BukkitDev page:
https://dev.bukkit.org/projects/exotic-garden

ExoticGarden is licensed under 
[GNU General Public License v3.0](https://github.com/TheBusyBiscuit/ExoticGarden/blob/master/LICENSE)

## Download ExoticGarden
Click on the badge below to go to our ""development"" build page, where you can download the latest versions before they are released to the public. 
But keep in mind: These builds are still in development and not guaranteed to work or to be stable.

<p align=""center"">
  <a href=""https://thebusybiscuit.github.io/builds/TheBusyBiscuit/ExoticGarden/master/"">
    <img src=""https://thebusybiscuit.github.io/builds/TheBusyBiscuit/ExoticGarden/master/badge.svg"" alt=""Build Server""/>
  </a>
</p>

## Contributions

You are allowed, even encouraged, to contribute to ExoticGarden by making Pull Requests.
These Pull Requests can be Fixes, Changes or even Additions, it is your choice.

Check the license for more Info on redistributing and modifying ExoticGarden.
",53,53,5,44,food,"[addon, bukkit, exotic, food, garden, hacktoberfest, minecraft, plants, plugin, slimefun]",72
fuzzymannerz,Kitchen-Inventory,,https://github.com/fuzzymannerz/Kitchen-Inventory,https://api.github.com/repos/Kitchen-Inventory/fuzzymannerz,A stock system for food and such.,"# Kitchen Inventory

**A stock system for food and such. Currently a work in progress.**  


![](https://i.imgur.com/4YBlx2e.png)

## Requirements
- MySQL / MariaDB
- Python 3 with...
- Flask, flask-mysql, flask-basicauth, requests, configparser
- Gunicorn (or similar)

## Setup
1. Create a MySQL database and user and grant it full access to said database.
2. Import the `sqlSetup.sql` file to get it ready for the inventory.
3. Fill in the DB details in `config.ini`.  
4. If you wish to password protect the site fill in some login details in `config.ini` also:

5. You can test the app by setting `active = True` under the `[testMode]` section of the `config.ini` file and then running `python3 inventory.py`.  
You can then access the site at http://localhost:5000.  
If you are running it on another machine change `127.0.0.1` to `0.0.0.0`.  
_(Depending on your setup, you may also need to forward port 5000 if running it from another machine.)_

If you are to leave it running then it is recommended to use something like [Gunicorn](https://gunicorn.org/) to serve the files instead.  
For example: `gunicorn -b 0.0.0.0:5000 inventory:app --daemon`.

## Removing Basic Auth Login
If you don't wish to have an auth login for the site you can remove it as follows:  
1. Remove or comment out the following lines in `inventory.py`:  
```
app.config['BASIC_AUTH_USERNAME'] = config['basicAuth']['username']
app.config['BASIC_AUTH_PASSWORD'] = config['basicAuth']['password']
app.config['BASIC_AUTH_FORCE'] = config['basicAuth']['forceAuth']
basic_auth = BasicAuth(app)
```  
as well as all instances of `@basic_auth.required` in the same file.

## Settings
There is a settings page accessible from `/settings` or by clicking the settings menu link.  
Here you can change the title of the site as well as activate and deactivate a dark mode and disable manual barcode usage.  

_More options will be here as the project develops._

---

## Contributions
If you feel you have something to add or make better or whatever feel free to contribute to the project by forking and submitting pull requests. There is also the [development branch](https://github.com/fuzzymannerz/Kitchen-Inventory/tree/development) which contains the latest ideas being worked on.  
Don't use it though in production as it's most likely broken. ;)

## Credits
This project utilises the following projects and technologies:
- flask - http://flask.pocoo.org/
- MaterializeCSS - http://materializecss.com/
- Pixeden Foood Icons - http://themes-pixeden.com/font-demos/the-icons-set/food/
- jQuery - https://code.jquery.com
- Some other things that I've probably fogotten to list. :(
",51,51,7,0,food,"[food, inventory, kitchen, stock]",72
logicguy1,The-Cookbook,,https://github.com/logicguy1/The-Cookbook,https://api.github.com/repos/The-Cookbook/logicguy1,The open source Cook Book,"<p align=""center"">
<img src=https://img.shields.io/github/issues/logicguy1/The-Cookbook?style=flat-square&logo=appveyor&color=informational />
<img src=https://img.shields.io/github/license/logicguy1/The-Cookbook?style=flat-square&logo=appveyor&color=informational />
<img src=https://img.shields.io/github/stars/logicguy1/The-Cookbook?style=flat-square&logo=appveyor&color=blue />
<img src=https://img.shields.io/github/forks/logicguy1/The-Cookbook?style=flat-square&logo=appveyor&color=blue />
</p>

# The-Cookbook
<p align=""center"">
<img src=""assets\the_cookbook.png"" width=800 height=auto>
</p>
The open source cook book<br/>
Also take a look at our discord community
<a href=""https://discord.gg/ZBpscUpNF4"">here</a>

## Table of Contents
* Bread
  * [The best bread in the word ](https://github.com/logicguy1/The-Cookbook/tree/main/Bread/The%20best%20bread%20in%20the%20world)
* Starters
  * [Shrimp Cocktail üåΩ](https://github.com/logicguy1/The-Cookbook/tree/main/Starters/Shrimp%20Cocktail)
  * [Tomato Soup](https://github.com/logicguy1/The-Cookbook/blob/main/Starters/Tomato%20Soup/README.md)
* Main courses
  * [Lasagna ](https://github.com/logicguy1/The-Cookbook/tree/main/Main_courses/Lasagna)
  * [Veggie Lasanga üå±](https://github.com/logicguy1/The-Cookbook/blob/main/Main_courses/veggie_lasanga)
  * [Pariserb√∏f ( Parisian Steak ) ](https://github.com/logicguy1/The-Cookbook/tree/main/Main_courses/Pariser%20b%C3%B8f%20(%20Parisian%20steak%20))
  * [Pita Bread with Fallafel üå± ](https://github.com/logicguy1/The-Cookbook/tree/main/Main_courses/Pita%20bread%20with%20falafel)
  * [Tuna Quiche](https://github.com/logicguy1/The-Cookbook/tree/main/Main_courses/Tuna%20Quiche)
  * [Omurice](https://github.com/logicguy1/The-Cookbook/tree/main/Main_courses/Omurice)
  * [Egg Fried Rice](https://github.com/logicguy1/The-Cookbook/tree/main/Main_courses/Egg%20Fried%20Rice)
  * [Pasta Meatsauce](https://github.com/logicguy1/The-Cookbook/tree/main/Main_courses/Pasta%20Meatsauce)
* Drinks
  * [Pi√±a Colada](https://github.com/logicguy1/The-Cookbook/tree/main/Drinks/Pina_Colada)
  * [Virgin Sunrise](https://github.com/logicguy1/The-Cookbook/tree/main/Drinks/Virgin_Sunrise)
  * [Ginger Shots](https://github.com/logicguy1/The-Cookbook/tree/main/Drinks/Ginger_Shots)
  * [Mojito](https://github.com/logicguy1/The-Cookbook/tree/main/Drinks/Mojito)
* Desserts
  * [Chocolate Bread](https://github.com/logicguy1/The-Cookbook/tree/main/Desserts/Chokolade%20bread)
  * [Cr√™pes](https://github.com/logicguy1/The-Cookbook/tree/main/Desserts/Cr%C3%AApes)
  * [Cookies](https://github.com/logicguy1/The-Cookbook/tree/main/Desserts/Cookies)
  * [Tiramisu](https://github.com/logicguy1/The-Cookbook/tree/main/Desserts/Tiramisu)
  * [Barlel](https://github.com/logicguy1/The-Cookbook/tree/main/Desserts/Barlel)
  * [Rasberry slices](https://github.com/logicguy1/The-Cookbook/blob/main/Desserts/Rasberry%20slices/README.md)
  * [Chocolate Cake üåΩ](https://github.com/logicguy1/The-Cookbook/tree/main/Desserts/Chocolate%20Cake)
* Snacks
  * [Popcorn in a pot](https://github.com/logicguy1/The-Cookbook/tree/main/Snacks/Popcorn%20in%20a%20pot)

## Tags
* üå± - Vegetarian
* üåΩ - Gluten Free

## Template
Feel free to put a PR just follow the template below for your recipe

```md
# [Name of recipe]
<p align=""center"">
<img src=""example.png"" />
</p>

Preparation: [Time]  
Author:  
<a href=""https://discord.com""><img src=""https://img.shields.io/badge/Discord-{username}%23{id}-25?style=for-the-badge&logo=discord"" /> </a>  
<!-- (Replace the '{}' with the responding username or id)-->


## Ingredients

## Materials

## Method

## Conclusion

## Discussion
```
",48,48,4,2,food,"[cooking, cooking-recipes, food]",72
wbrenna,inventory,,https://github.com/wbrenna/inventory,https://api.github.com/repos/inventory/wbrenna,Use a barcode reader to scan the foods in your house and add them to a database. See legacy for zbarcam integration. Master integrates with a USB barcode laser scanner.,"Inventory
=========

This set of Python scripts will allow you to interface a barcode reader such as [zbarcam](http://zbar.sourceforge.net/) with a UPC database to keep track of foods as you buy them.


Install
=======

Download the set of scripts, ensure you have a working Python installation (I use Python>=2.6), and run 

```bash
python inventory --help
```

for information. 


Run
======

There are a number of features and options. Most of them are self-described. You can run

```bash
python inventory add
```

to begin adding items to your database. It is important to note that some of the commands require
input prefixed by the barcode type (only EAN-13 is fully supported at the moment), while others require
just the barcode iteself. This is because some commands are designed to receive input piped from zbarcam,
while others are designed to receive manual input. For example

	./inventory add

requires input such as

	0068100084245

The ""modifyexpiry"" allows you to enter a specific product EAN-13 manually and customize its expiry date.
The expiry dates persist through deletion of stock, so you will never need to enter expiry lengths for that particular product again.
The ""remove"" option allows you to scan barcodes on the way out, removing that product from your inventory.
The ""printout"" option will print the database out for you, neatly.
Finally, the ""daily"" option allows for cron or some other scheduling tool to check daily for products nearing expiry.
This is best used with a line in crontab that runs inventory with the daily option.
You will need to enter your email in inventory_daily.py in order for this to properly work,
as well as ensure that your system is a working mailserver.


Interfacing with Cronometer
--------------------------

Inventory also checks your [Cronometer](http://sourceforge.net/projects/cronometer/) database for UPC codes.
First, ensure you have the Cronometer foods folder specified in inventory_grabcronometer.py (it is a global variable).
Then, when you add custom items into Cronometer, just put the UPC in the Comments section. Inventory will automatically scan for Cronometer UPCs before turning to the web.


TODO
=========

Integrate with webserver to display printout status
",38,38,9,0,food,"[barcode, database, expiry, food, inventory, upc, zbarcam]",72
namanvashistha,foodly,,https://github.com/namanvashistha/foodly,https://api.github.com/repos/foodly/namanvashistha,website built to order food online and also for business,"# foodly

#### website built to order food online and also for business in php and ajax

## [foodly.ml](http://foodly.ml/)

### Prerequisites
- install [xampp](https://www.apachefriends.org/download.html)
- clone this repository into xampp/htdocs
- import [setup.sql](https://github.com/namanvashistha/foodly/blob/master/setup.sql) file to setup the database

## Contributing

Please read [CONTRIBUTING.md](https://github.com/namanvashistha/foodly/blob/master/CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.

## Authors

- [@namanvashistha](https://github.com/namanvashistha) - **Naman Vashistha** - Maintainer and Developer

## License

This project is licensed under the MIT License - see the [LICENSE.md](https://github.com/namanvashistha/foodly/blob/master/LICENSE) file for details
",32,32,8,3,food,"[ajax, css, food, food-ordering, food-recommendation, hacktoberfest, html, php, web, website, xampp]",72
saileshbro,nutri.gram,,https://github.com/saileshbro/nutri.gram,https://api.github.com/repos/nutri.gram/saileshbro,"Nutrition is the main source of life and although it has been our secondary instinct to check for nutritional value in the food we eat, the effect any diet has on our body and health is consequential. From the fact which connotes the value of nutrition in our diet, springs the idea of nutri.gram. nutri.gram is a mobile application that scans the food label present in the packaged food items and draws a significant conclusion from that data regarding its edibleness for a person, the nutritional worth it adds to our diet, how much calorific value it provides per serving and much more. This application is targeted to anyone who wants to get insight into what they are feeding into their body and how understanding the nutritional value will be of tremendous aid to their overall health.","# nutri.gram

Nutrition is the main source of life and although it has been our secondary instinct to check for nutritional value in the food we eat, the effect any diet has in our body and health is consequential. From the fact which connotes the value of nutrition in our diet, springs the idea of nutri.gram. nutri.gram is a mobile application that scans the food label present in the packaged food items and draws a significant conclusion from that data regarding its edibleness for a person, the nutritional worth it adds to our diet, how much calorific value it provides per serving and much more. This application is targeted to anyone who wants to get insight into what they are feeding into their body and how understanding the nutritional value will be of tremendous aid to their overall health.

## Download OpenCV libraries

- Download OpenCV library for Android and iOS from [here](https://opencv.org/releases)
- Copy the files to the respective folders

```bash
For Android
cp -R sdk/native/jni/include nutri.gram
cp sdk/native/libs/* nutri.gram/android/src/main/jniLibs/*

For iOS
cp -R opencv2.framework nutri.gram/ios
```

## Flask server

- Download [this](https://github.com/tesseract-ocr/tessdata_best/blob/master/eng.traineddata) and put it in directory `ml/tessdata/`
- Download [this](https://github.com/oyyd/frozen_east_text_detection.pb/blob/master/frozen_east_text_detection.pb) and put it in directory `ml/models/`
- `cd ml`
- Run `pip install requirements.txt`
- Download following files and put in respective path
- Execute `flask run`

## Node Server

- `cp .env.sample .env`
- add credentials in `.env`
- cd `api`
- `npm install` to get packages
- `npm run dev` to start dev server

## Flutter

- cd `nutrigram_app`
- `flutter packages get` to get the packages
- Connect your device with USB debugging on or start an emulator
- `flutter run` to start debugging
- `flutter run --release` to build release build

> You may need to configure connection between api and flutter app make sure you are using your machine's ip address in `constants.dart`

## Screenshots

|                                      |                                      |                                    |                                    |
| :----------------------------------: | :----------------------------------: | :--------------------------------: | :--------------------------------: |
|   ![Screen 1](./screenshots/1.png)   |   ![Screen 2](./screenshots/2.png)   |  ![Screen 3](./screenshots/3.png)  |  ![Screen 4](./screenshots/4.png)  |
|   ![Screen 5](./screenshots/5.png)   |   ![Screen 7](./screenshots/7.png)   |  ![Screen 9](./screenshots/9.png)  | ![Screen 10](./screenshots/10.jpg) |
| ![Screen 10a](./screenshots/10a.jpg) | ![Screen 10b](./screenshots/10b.jpg) | ![Screen 12](./screenshots/12.png) | ![Screen 13](./screenshots/13.png) |
|  ![Screen 14](./screenshots/14.png)  |  ![Screen 15](./screenshots/15.png)  | ![Screen 16](./screenshots/16.png) | ![Screen 17](./screenshots/17.png) |
|  ![Screen 18](./screenshots/18.png)  |  ![Screen 19](./screenshots/19.png)  | ![Screen 20](./screenshots/20.png) | ![Screen 21](./screenshots/21.png) |
|  ![Screen 23](./screenshots/23.png)  |  ![Screen 24](./screenshots/24.png)  | ![Screen 25](./screenshots/25.png) | ![Screen 26](./screenshots/26.png) |
|  ![Screen 27](./screenshots/27.png)  |  ![Screen 28](./screenshots/28.png)  | ![Screen 29](./screenshots/29.png) | ![Screen 30](./screenshots/30.png) |
|  ![Screen 31](./screenshots/31.png)  |  ![Screen 32](./screenshots/32.png)  | ![Screen 33](./screenshots/33.png) |

This project uses [this](https://github.com/flutter-clutter/flutter-simple-edge-detection) repo as a reference for building edge detection in Flutter.
",31,31,3,0,food,"[dart, diet, flutter, flutter-apps, food, gram, health, mongo, mongodb, mongoose, nodejs, nutri, opencv]",72
openfoodfacts,openfoodfacts-ruby,openfoodfacts,https://github.com/openfoodfacts/openfoodfacts-ruby,https://api.github.com/repos/openfoodfacts-ruby/openfoodfacts,Open Food Facts API Wrapper,"# Open Food Facts

[![Gem Version](https://badge.fury.io/rb/openfoodfacts.svg)](https://badge.fury.io/rb/openfoodfacts)
[![Build Status](https://github.com/openfoodfacts/openfoodfacts-ruby/actions/workflows/ruby.yml/badge.svg)](https://github.com/openfoodfacts/openfoodfacts-ruby/actions/workflows/ruby.yml)
[![RuboCop](https://github.com/openfoodfacts/openfoodfacts-ruby/actions/workflows/rubocop-analysis.yml/badge.svg)](https://github.com/openfoodfacts/openfoodfacts-ruby/actions/workflows/rubocop-analysis.yml)
[![Documentation](https://inch-ci.org/github/openfoodfacts/openfoodfacts-ruby.svg?branch=master)](https://inch-ci.org/github/openfoodfacts/openfoodfacts-ruby)

API Wrapper for [Open Food Facts](https://openfoodfacts.org/), the open database about food.

## Installation

Add this line to your application's Gemfile:

```ruby
gem 'openfoodfacts'
```

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install openfoodfacts

## Models

All data is available for World, French, UK and US version for now. You should update the gem page URLs mapping for others.

- Additive
- Brand
- Category
- City
- Contributor
- Country
- EntryDate
- Faq
- IngredientThatMayBeFromPalmOil
- Label
- LastEditDate
- Language
- Locale
- ManufacturingPlace
- Mission
- NumberOfIngredients
- NutritionGrade
- Origin
- PackagerCode
- Packaging
- Press
- Product
- ProductState
- PurchasePlace
- Store
- Trace
- User

## Usage

```ruby
require 'openfoodfacts'

# Browse a product

code = ""3029330003533""
product = Openfoodfacts::Product.get(code, locale: 'fr')

product.product_name
# => ""Crousti Moelleux Complet""

product.nutriments.to_hash
# => {""sodium""=>""0.44"", ""sugars""=>6.5, ""fat_unit""=>""g"", ""carbohydrates_unit""=>""g"", ""proteins_unit""=>""g"", ""nutrition-score-fr_100g""=>-2, ""fat""=>2.5, ""proteins_serving""=>12.8, ""sodium_serving""=>0.535, ""salt""=>1.1176, ""proteins""=>10.5, ""nutrition-score-uk_serving""=>-2, ""nutrition-score-fr""=>-2, ""fat_serving""=>3.04, ""sugars_unit""=>""g"", ""sugars_100g""=>""6.5"", ""sodium_unit""=>""g"", ""saturated-fat_unit""=>""g"", ""saturated-fat_serving""=>0.608, ""sodium_100g""=>0.44, ""fiber_unit""=>""g"", ""energy""=>1067, ""energy_unit""=>""kJ"", ""sugars_serving""=>7.9, ""carbohydrates_100g""=>44, ""nutrition-score-uk""=>-2, ""proteins_100g""=>10.5, ""fiber_serving""=>7.29, ""carbohydrates_serving""=>53.5, ""nutrition-score-fr_serving""=>-2, ""energy_serving""=>1300, ""fat_100g""=>""2.5"", ""saturated-fat_100g""=>""0.5"", ""nutrition-score-uk_100g""=>-2, ""fiber""=>6, ""salt_serving""=>1.36, ""salt_100g""=>""1.1176"", ""carbohydrates""=>44, ""fiber_100g""=>6, ""energy_100g""=>1067, ""saturated-fat""=>0.5}

# Update product

user = Openfoodfacts::User.login(""USERNAME"", ""PASSWORD"")
if user
    product.brands = ""Jacquet""
    product.update
    # true
end

# Search products

products = Openfoodfacts::Product.search(""Chocolate"", locale: 'world', page_size: 3)
# => [#<Openfoodfacts::Product _id=""3045140105502"" code=""3045140105502"" id=""3045140105502"" image_small_url=""https://en.openfoodfacts.org/images/products/304/514/010/5502/front.7.100.jpg"" lc=""en"" product_name=""Milka au lait du Pays Alpin"">, #<Openfoodfacts::Product _id=""3046920028363"" code=""3046920028363"" id=""3046920028363"" image_small_url=""https://en.openfoodfacts.org/images/products/304/692/002/8363/front.5.100.jpg"" lc=""en"" product_name=""Tableta de chocolate negro \""Lindt Excellence\"" 85% cacao"">, #<Openfoodfacts::Product _id=""3046920029759"" code=""3046920029759"" id=""3046920029759"" image_small_url=""https://en.openfoodfacts.org/images/products/304/692/002/9759/front.9.100.jpg"" lc=""en"" product_name=""Tableta de chocolate negro \""Lindt Excellence\"" 90% cacao"">]

# You might need to fetch full product data from results

products.first.fetch

# By product state

product_states = Openfoodfacts::ProductState.all
product_states.last.products

# Config

Openfoodfacts::Locale.all
# => [""ad"", ""ad-es"", ""ad-fr"", ""ad-pt"", ""ae"", ""al"", ""am"", ""ar"", ""at"", ""au"", ""ax"", ""az"", ""bd"", ""be"", ""be-de"", ""be-fr"", ""bf"", ""bg"", ""bi"", ""bi-rn"", ""bn"", ""br"", ""by"", ""by-be"", ""bz"", ""ca"", ""ca-fr"", ""cg"", ""ch"", ""ch-fr"", ""ch-it"", ""ci"", ""cl"", ""cn"", ""co"", ""cr"", ""cu"", ""cy"", ""cy-tr"", ""cz"", ""de"", ""dk"", ""do"", ""dz"", ""dz-fr"", ""ec"", ""eg"", ""es"", ""es-ca"", ""es-eu"", ""es-gl"", ""fi"", ""fi-sv"", ""fr"", ""ga"", ""gf"", ""gn"", ""gp"", ""gr"", ""hk"", ""hr"", ""hu"", ""id"", ""ie"", ""ie-ga"", ""il"", ""il-ar"", ""il-ru"", ""in"", ""iq"", ""iq-ku"", ""ir"", ""is"", ""it"", ""jp"", ""ke"", ""ke-sw"", ""kh"", ""kr"", ""kw"", ""kz"", ""kz-kk"", ""lb"", ""lk"", ""lk-ta"", ""lu"", ""lu-de"", ""lu-lb"", ""lv"", ""ma"", ""ma-es"", ""ma-fr"", ""mc"", ""md"", ""mf"", ""ml"", ""mn"", ""mo"", ""mo-zh"", ""mq"", ""mr"", ""mt"", ""mt-mt"", ""mu"", ""mx"", ""my"", ""nc"", ""nl"", ""no"", ""nz"", ""nz-mi"", ""pa"", ""pe"", ""pf"", ""ph"", ""ph-tl"", ""pl"", ""pm"", ""pt"", ""qa"", ""re"", ""ro"", ""rs"", ""ru"", ""sa"", ""se"", ""sg"", ""sg-ms"", ""sg-ta"", ""sg-zh"", ""si"", ""sk"", ""sn"", ""sy"", ""th"", ""tn"", ""tr"", ""tw"", ""tz"", ""tz-sw"", ""ua"", ""uk"", ""us"", ""ve"", ""vn"", ""vu"", ""vu-bi"", ""world"", ""ye"", ""yt"", ""za"", ""za-af"", ""za-nr"", ""za-ss"", ""za-st"", ""za-tn"", ""za-ts"", ""za-ve"", ""za-xh"", ""za-zu""]
```

## Development

After checking out the repo, run `bin/setup` to install dependencies. Then, run `bin/console` for an interactive prompt that will allow you to experiment.

To install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release` to create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).

## Contributing

1. Fork it ( https://github.com/openfoodfacts/openfoodfacts-ruby/fork )
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create a new Pull Request



## Third party applications
If you use this SDK, feel free to open a PR to add your application in this list.

## Authors

",31,31,10,2,food,"[api-wrapper, food, hacktoberfest, openfoodfacts, ruby]",72
openfoodfacts,openfoodfacts-react-native,openfoodfacts,https://github.com/openfoodfacts/openfoodfacts-react-native,https://api.github.com/repos/openfoodfacts-react-native/openfoodfacts,Code to send product data and photos to Open Food Facts,"# React native code to contribute products to Open Food Facts

Example code to add to a React native mobile application to contribute products to Open Food Facts.

Join the [Open Food Facts slack](https://openfoodfacts.slack.com) if you'd like to contribute or just reuse the code and need help.

## Contributors

- [EthicAdvisor](https://www.ethicadvisor.org) team

## Doc

See Open Food Facts wiki:

- https://en.wiki.openfoodfacts.org/API

## License

- The code is release under the APACHE 2.0 license (see LICENSE file).

## Credits

- Some icons are taken from [FlatIcon](www.flaticon.com)

## Third party applications
Feel free to open a PR to add your application in this list.

## Authors
",30,30,4,4,food,"[food, hacktoberfest, openfoodfacts, react-native]",72
viniciusmeneses,food-search,,https://github.com/viniciusmeneses/food-search,https://api.github.com/repos/food-search/viniciusmeneses,":strawberry: Discover the nutritional information of 700,000+ foods","# food-search

> Discover the nutritional information of 700,000+ foods!

**food-search** is a *open-source* project which uses [Edaman API](https://developer.edamam.com/) to browse and retrieve the nutritional information and brand of any food or meal searched. The API contains a [Food Database](https://developer.edamam.com/food-database-api) with over 700,000 foods, restaurant items, fast foods and package foods.

[**Demo available here!**](http://food-search.surge.sh)

<p align=""center"">
  <img src=""preview.jpg"">
</p>

## Using

First of all, you need to clone or download this repository.

```
git clone https://github.com/viniciusmeneses/food-search
```

Go to the **food-search** folder and install the dependencies

```
npm install
```

Run one of the following commands to start use **food-search**:

```
// Build and starts front-end and back-end servers
npm run dev

// Builds the application only
npm run build
```

<p align=""center"">
  <a href=""https://developer.edamam.com/""><img src=""https://imgur.com/xUqNOOo.png""></a>
</p>
",26,26,1,1,food,"[edamam-api, food, food-database, nutrition-information, nutritional, search]",72
fzserver,FoodiFi,,https://github.com/fzserver/FoodiFi,https://api.github.com/repos/FoodiFi/fzserver,FoodiFi App in flutter,"# FoodiFi

![GitHub repo size](https://img.shields.io/github/repo-size/FrazileDevelopers/FoodiFi) ![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/FrazileDevelopers/FoodiFi) ![GitHub language count](https://img.shields.io/github/languages/count/FrazileDevelopers/FoodiFi) ![GitHub top language](https://img.shields.io/github/languages/top/FrazileDevelopers/FoodiFi)

FoodiFi a Food delivery app.

# Flutter Packages used by the app

```yaml
cupertino_icons:
dio:
sqflite:
connectivity:
rxdart:
flutter_spinkit:
shared_preferences:
cached_network_image:
package_info:
splashscreen:
introduction_screen:
flutter_custom_clippers:
polygon_clipper:
quick_actions:
wave:
firebase_performance:
cloud_firestore:
firebase_auth:
firebase_analytics:
firebase_crashlytics:
google_sign_in:
provider:
# Encrypt libs
args:
asn1lib:
clock:
collection:
crypto:
pointycastle:
```

# Executables

```yaml
executables:
  secure-random:
```

# Dart version

```yaml
sdk: "">=2.2.0 <3.0.0""
```

# App Version & Build Version for Android & iOS

```yaml
version: 1.0.0+1
```

# Running a project

```console
git clone https://github.com/FrazileDevelopers/FoodiFi
flutter run
```

# Build a release apk

```console
git clone https://github.com/FrazileDevelopers/FoodiFi
flutter build apk --release
```

# Screenshots

## Login Screen

<img src=""assets/screenshots/login.png"" width=""200px"" />

## Welcome Screen

<img src=""assets/screenshots/welcome.png"" width=""200px"" />

## Phone OTP Screen

<img src=""assets/screenshots/otp.png"" width=""200px"" />

## Home Page Screen

<img src=""assets/screenshots/home1.png"" width=""200px"" />
<img src=""assets/screenshots/home2.png"" width=""200px"" />

<!-- # ‚òïÔ∏è Donate
<a href=""https://www.buymeacoffee.com/Frazile"" target=""_blank""><img src=""https://bmc-cdn.nyc3.digitaloceanspaces.com/BMC-button-images/custom_images/orange_img.png"" alt=""Buy Me A Coffee"" style=""height: auto !important;width: auto !important;"" ></a> -->

# Copyright Claim

Copyright ¬© 2020, [FoodiFi](https://github.com/FrazileDevelopers/FoodiFi).
Released under the [MIT License](LICENSE).
",25,25,3,0,food,"[dart, delivery, firebase, flutter, food, food-ordering]",72
PLNech,MenuGen,,https://github.com/PLNech/MenuGen,https://api.github.com/repos/MenuGen/PLNech,An intelligent generator of well-balanced meals.,,25,25,3,0,food,"[balanced-meals, cooking, food, generator, genetic-algorithm, machine-learning, meals, morphology, nutritional, scraping, taste]",72
LasmGratel,FoodCraft-Reloaded,,https://github.com/LasmGratel/FoodCraft-Reloaded,https://api.github.com/repos/FoodCraft-Reloaded/LasmGratel,Reloaded version of FoodCraft.Original repository:https://github.com/InfinityStudio/FoodCraft,"# Archived

New version please go to https://github.com/ProjectUranus/FoodCraft-Reloaded
",25,25,2,9,food,"[food, java, minecraft]",72
zayedibnibrahim,foodstore-mern,,https://github.com/zayedibnibrahim/foodstore-mern,https://api.github.com/repos/foodstore-mern/zayedibnibrahim,Restaurant Food Order app,"## Food Store -[Live Site ](https://food-store-add09.web.app/)

## Food Store -[Admin Demo ](https://drive.google.com/file/d/1_B83hs6dFpj5oTm1OOq2mYwM517-1pJR/view?usp=sharing)

## Complete online food delivery webapp

## Features

- Full featured shopping cart
- Category carousel
- Get products by category
- Google Authentication
- Google sign in
- Wishlist Product
- Product Modal
- Product pagination (Admin)
- Quick Product search feature
- User profile with Order Details
- Admin product management
- Admin Category, Addon, Variable, Attribute management
- Addon Multi-select
- Admin Order details page
- Mark orders as delivered option
- Mark orders as Paid option
- Cash on delivery
- Download Invoice
- Checkout process (shipping, payment method, etc)
- Stripe / credit card integration
- Almost all Device responsive
",25,25,2,1,food,"[ecommerce, food, food-addon, food-delivery, food-delivery-application, food-order, mongoose, node, product-variants, react, single-product]",72
GINK03,keras-resnet-food-reverse-engineering,,https://github.com/GINK03/keras-resnet-food-reverse-engineering,https://api.github.com/repos/keras-resnet-food-reverse-engineering/GINK03,resnet„ÅåÊñôÁêÜ„ÅÆÊùêÊñô„Çí„ÅÇ„Å¶„Åæ„Åô,"# Resnet„ÅßÊñôÁêÜ„ÅÆÊùêÊñô„Çí„ÅÇ„Å¶„Å¶„ÅÑ„Åè:food2stuff

## „É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥
- ResNet„Çí‰Ωø„Å£„Å¶„Åø„Åü„ÅÑ
- Âº∑„ÅÑËª¢ÁßªÂ≠¶ÁøíÊñπÊ≥ï„ÇíÊïô„Çè„Å£„Åü„ÅÆ„Åß„ÇÑ„Å£„Å¶„Åø„Åü„ÅÑ
- ÊñôÁêÜ„Åã„Çâ‰Ωï„ÅÆÊùêÊñô„Åß„Åß„Åç„Å¶„ÅÑ„Çã„Åã„Çè„Åã„Çå„Å∞„ÄÅimg2cal(ÁîªÂÉè„Åã„Çâ„Ç´„É≠„É™„Éº„ÇíÂΩì„Å¶„Çã„Çø„Çπ„ÇØ)„Å™„Å©„Å´Ëª¢Áî®„Åß„Åç„Çã„Åã„ÇÇ„Å®ÊÄù„Å£„Åü

## food2stuff„Å£„Å¶Ôºü
- stuff„Å£„Å¶ÊùêÊñô„Å£„Å¶ÊÑèÂë≥„Çâ„Åó„ÅÑ„Åß„Åô
- ÁîªÂÉè„Åã„Çâ„Å™„Çì„ÅÆÊßãÊàêÂìÅÁõÆ„Åß„Åß„Åç„Å¶„Åä„Çä„ÄÅ„Å™„Çì„ÅÆÈ£üÊùê„Åß„Åß„Åç„Å¶„ÅÑ„Çã„Åã„Éô„ÇØ„Éà„É´Ë°®Áèæ„ÅßÂá∫Âäõ„Åó„Åæ„Åô
- 2048Ê¨°ÂÖÉ„ÅÆÂá∫Âäõ„Å´ÂØæÂøú„Åó„Å¶„Åä„Çä„É°„Ç∏„É£„Éº„Å©„Åì„Çç„ÅÆÈ£üÊùê„ÅØ„Å†„ÅÑ„Åü„ÅÑÊäë„Åà„Å¶„ÅÑ„Åæ„Åô
- Â∞ÜÊù•ÁöÑ„Å´„ÅØËá™ÂàÜ„ÅåÈ£ü„Åπ„Åü„ÇÇ„ÅÆ„Çíinstagram„Å™„Å©„ÅßÂÜôÁúü„ÇíÂèñ„Çã„Å†„Åë„ÅßÊ†ÑÈ§äÁ¥†„ÅÆÁÆ°ÁêÜ„Å®„Åã„Åß„Åç„Åü„Çâ„ÅÑ„ÅÑ„Çà„Å≠

## Â≠¶ÁøíÁî®„ÅÆ„Éá„Éº„Çø„Éª„Çª„ÉÉ„ÉàÈõÜ„ÇÅ
- Cookpad„Åï„Çì„ÅÆ„Çµ„Ç§„Éà„Åã„Çâ95‰∏á‰ª∂„ÅÆ„É¨„Ç∑„Éî„Å®ÊäïÁ®øÂÜôÁúü„Çí„ÅÇ„Å§„ÇÅ„Åï„Åõ„Å¶„ÅÑ„Åü„Å†„Åç„Åæ„Åó„Åü  
 „É¨„Ç∑„Éî„ÅØÂÄã‰∫∫„ÅÆËá™Áî±„Å™Êõ∏„ÅçÊñπ„ÅåË®±„Åï„Å¶„Åä„Çä„ÄÅÊûóÊ™é„Å®„ÅÑ„ÅÜË°®Áèæ‰∏Ä„Å§„Å®„Å£„Å¶„ÇÇ„É™„É≥„Ç¥„ÄÅ„Çä„Çì„Åî„ÄÅÊûóÊ™é„Å®3„Å§„Åê„Çâ„ÅÑÊøÄ„Åó„ÅèÊè∫„Çâ„Åê„ÅÆ„Åß„Åô„Åå„ÄÅ„Åì„Åì„ÅßÂ∞èÁ¥∞Â∑•„ÇíÂÖ•„Çå„Çã„Å®„ÅÑ„ÅÜ„Åì„Å®„ÇíÊòî„ÅØ„Åó„Å¶„ÅÑ„Åæ„Åó„Åü„Åå„ÄÅ‰∏ÄÂøú„ÅÆÁéãÈÅì„ÅØ„Éá„Éº„ÇøÈáè„ÅßÊäº„ÅóÂàá„Çã„Åì„Å®„Åß„Åô  
 ¬†„Åù„Çå„Åß„Å©„ÅÜ„Å´„ÇÇ„Åì„ÅÜ„Å´„ÇÇË°å„Åã„Å™„Åè„Å™„Å£„Åü„Çâ„ÄÅ„ÅÑ„Çç„ÅÑ„Çç„Å™‰ªïÁµÑ„Åø„ÅÆÂ∞éÂÖ•„ÇíÊ§úË®é„Åô„Åπ„Åç„Å®„ÅÑ„ÅÜ„ÅÆ„ÅåÊúÄËøë„ÅÆÁßÅ„ÅÆ„ÇÑ„ÇäÊñπ„Åß„Åô  
 ¬†„Çπ„ÇØ„É¨„Ç§„Éë„Éº„ÅØ[Ëá™‰Ωú„ÅÆ„ÇÇ„ÅÆ](https://github.com/GINK03/kotlin-phantomjs-selenium-jsoup-parser)„ÇíÁî®„ÅÑ„Åæ„Åó„Åü„ÄÇ
- È†ªÂá∫„Åô„Çã„É¨„Ç∑„Éî„ÅÆÂçòË™û„Çí‰∏ä‰Ωç2048ÂÄã‰ª•Â§ñÂâä„Çã ¬†
 Âá∫ÂäõÊ¨°ÂÖÉÊï∞„Çí„Å©„Åì„Åæ„Åß„ÇÇÈ´òÊ¨°ÂÖÉ„Å´„Åô„Çã„ÅÆ„ÅØGPU„ÅÆ„É°„É¢„É™„Å´‰πó„Çâ„Å™„Åè„Å™„Çã„Å™„Å©„ÄÅÁèæÂÆüÁöÑ„Åß„Å™„ÅÑ„ÅÆ„Åß„ÄÅ2048ÂÄã„Å´ÈôêÂÆö„Åó„Åæ„Åô ¬†

## Â≠¶Áøí„Åô„Çã„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÅÆÈÅ∏ÂÆö
- „Éá„Ç£„Éº„Éó„Åß„ÅÇ„Çã„ÅÆ„ÅØÊ±∫ÂÆö„Å™„ÅÆ„Åß„Åô„Åå„ÄÅInception, ResNet, VGG16„Å™„Å©„ÅÑ„Çç„ÅÑ„Çç„ÅÇ„Çä„ÄÅResNet„Çí‰ªäÂõû„ÅØ‰Ωø„Åä„ÅÜ„Å®ÊÄù„ÅÑ„Åæ„Åó„Åü„ÄÇ  
 TensorFlow„Å™„Å©„Åß„ÅØinceptionÁ≥ª„ÅÆË≥áÊñô„ÅåË±äÂØå„ÅßÂ≠¶Áøí„ÅÆ„ÇÑ„Çä„Åã„Åü„ÇÇÂπæ„Å§„ÅãÁ¢∫Á´ã„Åï„Çå„Å¶„Åä„Çä„ÄÅ„Éû„Éã„É•„Ç¢„É´„Å´Âæì„ÅÜ„Å†„Åë„Åß„Åã„Çì„Åü„Çì„Å´Â≠¶Áøí„Åß„Åç„Åæ„Åô  
 VGG„Å™„Å©„ÇÇËªΩ„Åè„Å¶„ÅÑ„ÅÑ„ÅÆ„Åß„Åô„Åå„ÄÅÁîªÂÉèË≠òÂà•„ÅßÂº∑„ÅÑÊñπ„ÇíË¶ã„Å¶„ÅÑ„Çã„Å®ResNet„ÅåËâØ„Åï„Åù„ÅÜ„Å†„Å®ÊÄù„ÅÑ„Åæ„Åó„Åü„ÄÇ ¬†
„ÄÄ
 ## ResNetËª¢ÁßªÂ≠¶Áøí„Éè„ÉÉ„ÇØ„ÇíÈÅ©Âøú„Åô„Çã
 - „Åì„ÅÆÂâç„ÅÆCookpad„ÅÆ[ÁîªÂÉèË≠òÂà•„Ç≥„É≥„ÉÜ„Çπ„Éà](https://info.cookpad.com/pr/news/press_2017_0110)„ÅßÂ•ΩÊàêÁ∏æ„ÇíÂèé„ÇÅ„Å¶„ÅÑ„ÅüÊñπ„Åå‰Ωø„Å£„Å¶„ÅÑ„ÅüÊâãÊ≥ï„Åå„ÄÅBatchNormalization„É¨„Ç§„É§„Éº„ÇíÂÜç„Éà„É¨„Éº„Éã„É≥„Ç∞„Åô„Çã„Å®„ÅÑ„ÅÜËª¢ÁßªÂ≠¶Áøí„ÅÆÊñπÊ≥ï„Åß„Åó„Åü  
  „Åì„ÅÆÊñπÊ≥ï„ÇíÊé°Áî®„Åó„Å¶„ÄÅBatchNormalization„É¨„Ç§„É§„ÅÆ„Éï„É™„Éº„Ç∫„ÅØ„Åó„Åæ„Åõ„Çì
 ¬†Python3 + keras2„ÅßË°å„ÅÑ„Åæ„Åó„Åü  ¬†„ÄÄ
 ```python
  model = Model(inputs=resnet_model.input, outputs=result)
  for layer in model.layers[:139]: # default 179
    if 'BatchNormalization' in str(layer):
      ...
    else:
      layer.trainable = False
  model.compile(loss='binary_crossentropy', optimizer='adam')
  return model
 ```
 - StochasticDepth„ÇíÈÅ©Âøú„Åô„Çã  
  StochasticDepth„ÅØ‰ªäÂõû„ÄÅtwitter„ÅßResNet„ÅÆËª¢ÁßªÂ≠¶Áøí„Åß„ÅÑ„ÅÑÊñπÊ≥ï„Å™„ÅÑ„Åã„Å™„Å®ËÅû„ÅÑ„Åü„Å®„Åì„Çç„ÄÅ„Å†„Çì„Åî„Åï„Çì„Åã„Çâ„Ç¢„Éâ„Éê„Ç§„Çπ„ÅÑ„Åü„Å†„ÅÑ„ÅüÊñπÊ≥ï„Åß„Åô  
  ÂÖ∑‰ΩìÁöÑ„Å´„ÅØResNet„ÅØ‰ΩïÂ±§„ÇÇ„ÅÆÁõ¥Âàó„ÅÆ„Ç¢„É≥„Çµ„É≥„Éñ„É´„Å´„Åó„Åü„ÇÇ„ÅÆ„Åß„ÄÅminiBatch„Åî„Å®„Å´Á¢∫ÁéáÁöÑ„Å´Layer„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô  
  „Å™„Åã„Å™„ÅãÂÆâÂÆö„Åó„Å™„Åè„ÄÅÂÆâÂÆö„Åó„ÅüÂÆüË£Ö„Åå„Åß„Åç„Åü„ÇâÂÖ¨Èñã„Åó„Åü„ÅÑ„Å®ÊÄù„ÅÑ„Åæ„Åô  
 <p align=""center"">
   <img src=""https://cloud.githubusercontent.com/assets/4949982/25310735/6f8e8094-2827-11e7-96db-539011d6f717.png"">
 </p>
 <div align=""center""> Âõ≥1. Stochasit Depth </div>
 
 ## ÈõÜ„ÇÅ„ÅüÁîªÂÉè„ÇíResNet„ÅÆÂÖ•ÂäõÂÄ§„Å´„Çµ„Ç§„Ç∫„Å´„É™„Çµ„Ç§„Ç∫
 „ÇÅ„Çì„Å©„Åè„Åï„ÅÑ„Åß„Åô„Åå„ÄÅÊ≠£„Åó„Åè„ÇÑ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
 PIL„ÇíÂà©Áî®„Åó„Å¶„ÄÅÁ∏ÆÂ∞è„Åó„Å¶„ÄÅÂõõËßíÂΩ¢„ÅÆ‰Ωï„ÇÇ„Å™„ÅÑÁîªÂÉè„Å´Ë≤º„Çä‰ªò„Åë„Åæ„Åó„Åü„ÄÇ
 ```python
 def cookpad():
  target_size = (224,224)
  dir_path = ""../kotlin-phantomjs-selenium-jsoup-parser/dataset/*.jpg""
  max_size = len(glob.glob(dir_path))
  for i, name in enumerate(glob.glob(dir_path)):
    if i%10 == 0:
      print(i, max_size, name)
    save_name = name.split(""/"")[-1]
    if Path(""cookpad/imgs/{save_name}.minify"".format(save_name=save_name)).is_file():
      continue
    try:
      img = Image.open(name)
    except OSError as e:
      continue
    w, h = img.size
    if w > h :
      blank = Image.new('RGB', (w, w))
    if w <= h :
      blank = Image.new('RGB', (h, h))
    try:
      blank.paste(img, (0, 0) )
    except OSError as e:
      continue
    blank = blank.resize( target_size )
    blank.save(""cookpad/imgs/{save_name}.mini.jpeg"".format(save_name=save_name), ""jpeg"" )
 ```
 
 ## Â≠¶Áøí
 „ÅÑ„Çà„ÅÑ„ÇàÂ≠¶Áøí„Åß„Åô„ÄÇËá™ÂÆÖ„ÅÆ„Ç≤„Éº„É†Áî®„Å´Ë≤∑„Å£„Åü„Éû„Ç∑„É≥„ÇíLinux„Å®Windows„ÅÆ„Éá„É•„Ç¢„É´„Éñ„Éº„Éà„Å´„Åó„Å¶„ÅÇ„Çã„ÇÇ„ÅÆ„Åå„ÅÇ„Çã„ÅÆ„Åß„Åô„Åå„ÄÅWindows„ÅØ„Åì„ÅìÂçäÂπ¥„Åê„Çâ„ÅÑËµ∑Âãï„Åó„Å¶„Åæ„Åõ„Çì(‰ΩïÊïÖË≤∑„Å£„Åü„Åó) ¬†
 GTX 1070„Åß„Åä„Åì„Å™„ÅÑ„ÄÅ100epochÂõû„Åô„ÅÆ„Å´„ÄÅ20ÊôÇÈñì„Åª„Å©ÂøÖË¶Å„Åß„Åó„Åü„ÄÇ ¬†
 ```
 $ python3 deep_food.py --train
 ```
 
 ## ¬†ÈÅéÂ≠¶Áøí„ÅÆÂèñ„ÇäÊâ±„ÅÑ
 ¬†ÊòéÁ¢∫„Å´Ê≠£Ëß£„ÇíÂÆöÁæ©„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÅÆ„Åß„ÄÅ„Åù„ÅÆÂàÜ„ÅåÂÆüË£ÖÂ§ßÂ§â„Å´„Å™„Çã„ÅÆ„Åß„Åô„Åå„ÄÅepoch„Åî„Å®„ÅÆmodel„Çí„ÉÄ„É≥„Éó„Åó„Å¶„É¢„Éá„É´„Å´Êú™Áü•„ÅÆÁîªÂÉè„ÇíÊäïÂÖ•„Åó„Å¶„ÄÅ‰∏ÄÁï™ËâØ„ÅÑepoch„ÇíÂÆöÊÄßÁöÑ„Å´Ê±∫„ÇÅ„Çã„Å®„ÅÑ„ÅÜ„Åì„Å®„Çí„Åó„Åæ„Åó„Åü„ÄÇ  
 ¬†90epochÂâçÂæå„ÅÆ„É¢„Éá„É´„ÅåËâØ„ÅÑ„Å®Âà§Êñ≠„Åó„Åæ„Åó„Åü„ÄÇ 
 
 ## Â≠¶ÁøíÊ∏à„Åø„É¢„Éá„É´„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
 dropbox„Å´„Åä„ÅÑ„Å¶„ÅÇ„Çä„Åæ„Åô  
 ```
 $ wget https://www.dropbox.com/s/tgeosjt4i5dg79b/model00099.model
 $ mv model00099.model models/
 ```
 
 ## ‰∫àÊÉ≥„Çø„Çπ„ÇØ
 „ÄÄ„Éç„ÉÉ„Éà„ÇíÂæòÂæä„Åó„Å¶Ë®ìÁ∑¥„Å´Áî®„ÅÑ„Åü„Éá„Éº„Çø„Åß„ÅÇ„ÇãCookpad‰ª•Â§ñ„ÅÆ„Çµ„Ç§„Éà„Åã„ÇâÂπæ„Å§„ÅãÈõÜ„ÇÅ„Åæ„Åó„Åü„ÄÇ  
 ¬† „Åù„Åó„Å¶Ë©ï‰æ°„Åó„ÅüÁµêÊûú„Åß„Åô„ÄÇ  
 ```sh
 $ python3 deep_food.py --pred
 ```
 ¬† ÁâπÂæ¥„ÅåÂ∞ë„Å™„Åè„ÄÅÁ™ÅÈ£õ„Åß„Å™„ÅÑÊñôÁêÜ„Å´Èñ¢„Åó„Å¶„ÅØËâØÂ•Ω„Å™ÁµêÊûú„Åß„Åô„ÄÇ  
<p align=""center"">
  <img width=""700px"" src=""https://cloud.githubusercontent.com/assets/4949982/25310624/e60b1218-2823-11e7-8a5b-430628cd05b0.png"">
</p>
<div align=""center""> Âõ≥1. „Éó„É™„É≥ </div>

<p align=""center"">
  <img width=""700px"" src=""https://cloud.githubusercontent.com/assets/4949982/25310628/070214f8-2824-11e7-96e0-a88f75004197.png"">
</p>
<div align=""center""> Âõ≥2. „Éë„Çπ„Çø </div>

<p align=""center"">
  <img width=""700px"" src=""https://cloud.githubusercontent.com/assets/4949982/25310633/241c9dc4-2824-11e7-8405-0ea6bb2fbd43.png"">
</p>
<div align=""center""> Âõ≥3. „ÇØ„ÉÉ„Ç≠„Éº </div>

<p align=""center"">
  <img width=""700px"" src=""https://cloud.githubusercontent.com/assets/4949982/25310639/35bc12c6-2824-11e7-8f3d-d0f6a75d434e.png"">
</p>
<div align=""center""> Âõ≥4. „ÉÅ„É£„Éº„Éè„É≥¬†</div>

<p align=""center"">
  <img width=""700px"" src=""https://cloud.githubusercontent.com/assets/4949982/25310643/474764fa-2824-11e7-9906-a18a09d6866c.png"">
</p>
<div align=""center""> Âõ≥5. „Ç´„É¨„Éº¬†</div>

<p align=""center"">
  <img width=""700px"" src=""https://cloud.githubusercontent.com/assets/4949982/25310645/588e0d2c-2824-11e7-8ab9-6d1fc5b2ec0b.png"">
</p>
<div align=""center""> Âõ≥6. „Çµ„É©„ÉÄ¬†</div>

<p align=""center"">
  <img width=""700px"" src=""https://cloud.githubusercontent.com/assets/4949982/25310648/62c91bc4-2824-11e7-9623-3db3302b1f58.png"">
</p>
<div align=""center""> Âõ≥7. GOGO„Ç´„É¨„ÉºÔºàÂ§±Êïó‰æãÔºöÊèö„ÅíÁâ©„Å®ÂãòÈÅï„ÅÑ„Åó„Å¶„ÅÑ„ÇãÔºâ¬†</div>

## ‰ªäÂõû„ÅÆÂÆüË£Ö
ÈùûÂïÜÁî®„ÉªÁ†îÁ©∂ÁõÆÁöÑ„ÅÆÂ†¥ÂêàËá™Áî±„Å´„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ  
[GitHub](https://github.com/GINK03/keras-resnet-food-reverse-engineering)

 ## ÂèÇËÄÉÊñáÁåÆ
 [1] [Deep Networks with Stochastic Depth](http://www.eccv2016.org/files/posters/S-3A-08.pdf)  
 [2] [Stochastic DepthÂÖÉË´ñÊñá](https://arxiv.org/pdf/1603.09382.pdf)
",23,23,2,1,food,"[cookpad, food, health, keras, resnet-50]",72
panozzaj,recipes,,https://github.com/panozzaj/recipes,https://api.github.com/repos/recipes/panozzaj,Anthony's collection of cooking recipes,,22,22,3,0,food,"[cooking, food]",72
sharingexcess,food_rescue_app,sharingexcess,https://github.com/sharingexcess/food_rescue_app,https://api.github.com/repos/food_rescue_app/sharingexcess,Sharing Excess Food Rescue Web Application,"# Sharing Excess Food Rescue App

Welcome to the Food Rescue App! This project is managed by **[Sharing Excess](https://sharingexcess.com)**, a 501(c)(3) nonprofit organization based in Philadelphia, PA. The FRA is a [Progressive Web App](https://web.dev/progressive-web-apps/), built as a single web codebase to run in any browser, or installed as a ""native"" app on both iOS and Android.

We use this app to coordinate, track and measure food rescue work across the country, picking up surplus food from food businesses and redistributing it to local nonprofits and mutual aid groups. To read more on SE, feel free to visit our [about page](https://sharingexcess.com/about).

The app is hosted at [app.sharingexcess.com](https://app.sharingexcess.com), with a testing environment also live at [app.dev.sharingexcess.com](https://app.dev.sharingexcess.com).

## Tech Stack ü§ñ

The FRA includes two apps within the repo.

**Client**: We use [React.js](https://reactjs.org/) initialized with [Create React App](https://github.com/facebook/create-react-app) in the `frontend` subdirectory for a single page app (SPA) frontend architecture.
**Server**: We use [Node.js](https://nodejs.org/en/) with [Express](https://expressjs.com/) in the `backend` subdirectory for our API, hosted using Firebase Functions as a ""serverless"" backend architecture.
**CI/CD**: We use [Github Actions](https://github.com/features/actions) for automated DEV deployment, and manual PROD deployment - more details below.

### 3rd party resources:

[**Firebase**](https://firebase.com/): Our backend is entirely hosted via Google's Firebase platform, including Auth, Database (Firestore), Serverless Functions (Cloud Functions), Hosting, and Storage (used primarily for data backup). We have 2 firebase projects for our 2 active environments, `sharing-excess-dev` and `sharing-excess-prod`.

[**Chakra UI**](https://chakra-ui.com/): We use Chakra for our frontend design system and UI component structure. Our theme definition can be found at `frontend/src/styles/theme.js`.

[**Github Encrypted Secrets**](https://docs.github.com/en/actions/security-guides/encrypted-secrets): We use Github Secrets to manage our secrets and keys for our automated deployments. These are grouped by `DEV` and `PROD` environments, each containing an `ENV_FRONTEND` and `ENV_BACKEND` secret, which maps directly to the secret files we maintain locally. These are written to local files during the deployment process in Github Actions, and read into the builds with [dotenv](https://www.npmjs.com/package/dotenv).

[**Sentry**](https://sharingexcess.sentry.io/projects/): We use Sentry for error detection and tracking in both our frontend and backend code. For access, reach out to tech@sharingexcess.com.

[**Google APIs**](https://console.cloud.google.com/): We use 3 primary Google APIs: Calendar, Maps, and Directions. Calendar is used for creating events for each individual rescue, which by default send notifications via email to users. Maps and Directions are used to display the route a driver will take for retail rescues.

[**Prettier**](https://prettier.io/): We use Prettier as a code formatter, alongside [ESLint](https://eslint.org/). Strongly recommend installing both plugins to VSCode to take advantage of automatic formatting to maintain stylistic consistency!

## Getting Started üèÅ

We use `yarn` to install dependencies and run the app locally.

**\*Note from a maintainer**: choose whatever versions work for you, but I can tell you I'm running the app currently with Node v16.15.1 and Yarn 1.22.19 :)\*

Before you get started, you'll need to retrieve a git-ignored `environments` directory and add it at the root level. This can be found in a `.zip` in a pinned message in our private slack channel (yeah I know, security is hard, but you don't have em eh? So it's not, not working...)

Reach out to tech@sharingexcess.com to get Slack access.

After cloning the repo, you should simply need to run `yarn install:all` to install dependencies for both the `frontend` React app and `backend` Node/Express app. Then run `yarn dev` or `yarn prod` to run both apps simultaneously using [concurrently](https://www.npmjs.com/package/concurrently) against the Firebase backend environment of your choice. Don't be silly and use `prod` if you don't have a _really_ good reason and know what you're doing, pls.

## Authentication ü•∏

We use [Firebase Auth](https://firebase.google.com/docs/auth), and currently only support Google OAuth as a sign-in method. This is a conscious choice, which means we don't have to handle account merging, and also are protected from phishing, at least so far as someone can mass create Google accounts üòÖ

When a user signs in for the first time, they will be guided through a brief onboarding process, which results in them having a `public_profile` record created. The `Auth` context inside the React app ensures that there's an active Auth user, and a `public_profile` with a matching UID in order to view the inside of the app.

There's a second collection of profile records `private_profiles` which contains sensitive user data such as Driver's License and insurance information. This data is not accessible by any API endpoint, but is checked alongside the public profile, and returned as a boolean whether it is complete or not. A completed `private_profile` is required for some actions within the app, such as claiming a rescue that requires driving.

## Permissions ü¶∏

Currently, we support 3 permission levels, `standard`, `admin`, and `null`. A user's permission is stored as a property of their `public_profile`, and can only be updated by another user with `admin` level permission. User's permission can be updated from inside the app at `people/[user_id]`.

`standard` permission allows a user to claim, start, update and complete rescues assigned to them. They also have `read` level access throughout the majority of the app, including on the People and Organization pages. `admin` permission is required for the majority of `create`, `update`, or `delete` actions, including creating and editing rescues, organizations, and locations.

## Deployment (CI/CD) ‚öôÔ∏è

All of the app's hosting and deployment processes are run through Firebase and Github Actions. We continuously deploy to the development environment any time a Pull Request is merged into the `main` branch. Production deploys must be invoked manually, and require approval from a lead maintainer before they run.

As a best practice, we like to make a commit to the `main` branch bumping the version number in `package.json`, `frontend/package.json`, and `backend/package.json` before deploying to production. The commit message should simply be the new version number, so it's easy to see in the Github Actions history (ex. `git commit -m ""v1.1.1""`).

## More Resources! ü§ì

In general, visit the [Wiki](https://github.com/sharingexcess/food_rescue_app/wiki) to learn more of the nitty-gritty on how the app works. Specifically, we have pages with basic [Terminology](https://github.com/sharingexcess/food_rescue_app/wiki/1.-Terminology) used throughout the app, as well as a more granular [Data Model](https://github.com/sharingexcess/food_rescue_app/wiki/2.-Data-Model) showing the specific DB fields present in each collection.
",22,22,5,1,food,"[firebase, food, food-rescue, nonprofit, open-source, react, scss]",72
Talagozis,Food-Order,,https://github.com/Talagozis/Food-Order,https://api.github.com/repos/Food-Order/Talagozis,"Food ordering template application using Ionic, Angular and Typescript.","# Foor-Order

## Build Status

|             |Build Status|
|-------------|:----------:|
|**Linux/Mac**|![Build status](https://talagozis.visualstudio.com/_apis/public/build/definitions/a066a23a-a1df-4857-adce-3a0d1d9c5892/6/badge)|
|**Windows**  |![Build status](https://talagozis.visualstudio.com/_apis/public/build/definitions/a066a23a-a1df-4857-adce-3a0d1d9c5892/6/badge)|

## Installation

### Install Cordova globally

```bash
npm install -g cordova
```

### Install Ionic globally

```bash
npm install -g ionic
```

### Install Dependencies

```bash
npm install
```

## Run on browser

```bash
ionic serve
```

## Run on browser using lab

```bash
ionic serve --lab
```

## Android

### Add support for Android

```bash
ionic cordova platform add android
```

### Run on Android

```bash
ionic cordova run android (have emulator or device connected)
```

## IOS

### Add support for IOS

```bash
ionic cordova platform add ios
```

### Run on IOS

```bash
ionic cordova run ios (have simulator or device connected)
```


# The Ionic Super Starter üéÆ

<img src=""https://user-images.githubusercontent.com/236501/32385619-bddac0ac-c08c-11e7-9ee4-9c892197191f.png"" width=""400"" />

The Ionic Super Starter is a batteries-included starter project for Ionic apps
complete with pre-built pages, providers, and best practices for Ionic
development.

The goal of the Super Starter is to get you from zero to app store faster than
before, with a set of opinions from the Ionic team around page layout,
data/user management, and project structure.

The way to use this starter is to pick and choose the various page types you
want use, and remove the ones you don't. If you want a blank slate, this
starter isn't for you (use the `blank` type instead).

One of the big advances in Ionic was moving from a rigid route-based navigation
system to a flexible push/pop navigation system modeled off common native SDKs.
We've embraced this pattern to provide a set of reusable pages that can be
navigated to anywhere in the app. Take a look at the [Settings
page](https://github.com/ionic-team/starters/blob/master/ionic-angular/official/super/src/pages/settings/settings.html)
for a cool example of a page navigating to itself to provide a different UI
without duplicating code.

## Table of Contents

1. [Getting Started](#getting-started)
2. [Pages](#pages)
3. [Providers](#providers)
4. [i18n](#i18n) (adding languages)

## <a name=""getting-started""></a>Getting Started

To test this starter out, install the latest version of the Ionic CLI and run:

```bash
ionic start mySuperApp super
```

## Pages

The Super Starter comes with a variety of ready-made pages. These pages help
you assemble common building blocks for your app so you can focus on your
unique features and branding.

The app loads with the `FirstRunPage` set to `TutorialPage` as the default. If
the user has already gone through this page once, it will be skipped the next
time they load the app.

If the tutorial is skipped but the user hasn't logged in yet, the Welcome page
will be displayed which is a ""splash"" prompting the user to log in or create an
account.

Once the user is authenticated, the app will load with the `MainPage` which is
set to be the `TabsPage` as the default.

The entry and main pages can be configured easily by updating the corresponding
variables in
[src/pages/index.ts](https://github.com/ionic-team/starters/blob/master/ionic-angular/official/super/src/pages/index.ts).

Please read the
[Pages](https://github.com/ionic-team/starters/tree/master/ionic-angular/official/super/src/pages)
readme, and the readme for each page in the source for more documentation on
each.

## Providers

The Super Starter comes with some basic implementations of common providers.

### User

The `User` provider is used to authenticate users through its
`login(accountInfo)` and `signup(accountInfo)` methods, which perform `POST`
requests to an API endpoint that you will need to configure.

### Api

The `Api` provider is a simple CRUD frontend to an API. Simply put the root of
your API url in the Api class and call get/post/put/patch/delete 

## i18n

Ionic Super Starter comes with internationalization (i18n) out of the box with
[ngx-translate](https://github.com/ngx-translate/core). This makes it easy to
change the text used in the app by modifying only one file. 

### Adding Languages

To add new languages, add new files to the `src/assets/i18n` directory,
following the pattern of LANGCODE.json where LANGCODE is the language/locale
code (ex: en/gb/de/es/etc.).

### Changing the Language

To change the language of the app, edit `src/app/app.component.ts` and modify
`translate.use('en')` to use the LANGCODE from `src/assets/i18n/`
",21,21,6,16,food,"[angular, food, food-delivery-application, food-order, ionic, order, progressive-web-app, typescript]",72
derekdjia,AI_Generated_Recipes,,https://github.com/derekdjia/AI_Generated_Recipes,https://api.github.com/repos/AI_Generated_Recipes/derekdjia,Capstone Project: AI Generated Recipes,"![header](img/header.jpg)
<p align=""center""><i>A Project Built with a Generative Adversial Network and the ‚ù§Ô∏è of :hamburger: </i></p>


## Motivation for the Project

<img src=""img/molgast3.jpg"" height=22%  width=22%  alt=""<3?"" ALIGN=""right"">
<br><br>

>  ‚ÄúThere is no sincerer love than the love of food.""
>         - George Bernard Shaw


Deep learning has been used in many application to solve real-world problems. In recent years, it has seen tremendous growth in its popularity and usefulness, due to more powerful computers, larger datasets, and developments in the field of neural networks. Modern techniques have been transformative in the various fields: finance, engineers, chemistry, allowing professionals to push the edge of what is possible. But artificial intelligence evolve beyond a mere scientific tool; it is capable of teaching humans creativity, artistic vision, and adaptive preferences.

Let's explore the culinary world!

## Table of Contents
1. [The Data](#1-the-database)
	* [1.1 Simple Data File](#11-simple-data-file)
	* [1.2 Webscrapping and Webcrawling](#12-webscrapping-and-webcrawling)  
2. [Preprocessing](#2-preprocessing)
	* [2.1 Data Cleaning Process](#21-data-cleaning)
	* [2.2 Natural Language Processing](#22-nlp)  
	    * [2.2.1 Ingredients](#22-ingredients)  
	    * [2.2.2 Instructions](#22-instructions)  
3. [General Modeling and Exploratory Data Analysis](#3-modeling-eda)
	* [3.1 Classification](#31-classification)
	* [3.2 Clustering](#32-clustering)
	* [3.3 Other EDA](#33-other-eda)
4. [Feature Transformation and Dimensionality Reduction](#4-feature-transformation)
	* [4.1 Data Transformation](#41-data-transfomation)
5. [Neural Networks](#5-neural-networks)
	* [5.1 Generative Adversial Network Model](#51-gan)
6. [Result](#6-other)	
7. [About the Author](#7-about-the-author)
8. [References](#8-references)

## 1. The Data

#### 1.1 Scrapping and Webcrawling

Let's get some data. Various websites offer a platform for its users to share their recipes. As of 2019, there are over 1 million entries located across several websites, including [*Allrecipes*](https://allrecipes.com/), [*Epicurious*](https://epicurious.com/), and [*Yummly*](https://yummly.com/). For this project we are interest in the quantity of ingredients used as well as the directions to process the ingredients. For data exploration, we also include the user generated rating, scaled to a rating between 1 and 5 stars.

Using a popular recipe scraper package, we are able to automate the process of scraping data from these websites. [2]
> pip install git+git://github.com/hhursev/recipe-scrapers.git

However, we need to conform the rules set forth by these website while scraping. Each website will set its own rules on how frequently it will accept a request from an IP address. Those who are interested can learn more about it [*here.*](https://www.datahen.com/data-scraping-vs-data-crawling/) [3] Allrecipe's webcrawling rules are detailed [*here.*](https://allrecipes.com/robots.txt) [4]

This project is currently in the process of being relocated to Amazon Web Services. The computational processing for this project uses AWS EC2 and the webscraping aspect uses [*AWS Lambda.*](https://medium.com/northcoders/make-a-web-scraper-with-aws-lambda-and-the-serverless-framework-807d0f536d5f) [5]

#### 1.2 Condensed Data File

Due to time and computational constraints, let's use a cleaned dataset. [6] This dataset was procured prior to 2017, totalling 18417 observations. It is saved as a json file and reuploaded in the /data directory.

## 2. Preprocessing

#### 2.1 Data Cleaning Process

###### 2.2.1 Natural Language Processing: Ingredients

	    1 pound baby Yukon Gold potatoes, quartered
	    4 ears corn, husked
	    4 tablespoons olive oil, divided

Here's an example of a partial list of ingredients in a recipe. Each line of ingredient has the follow format:

	    1. Quantity
	    2. Unit (Optional)
	    3. Type (Optional)
	    4. Food
	    5. Method of preparation

First, we need to normalize the unit of measurement. It is straightforward to convert standard units of weight and volume, but what is 4 ears of corns and how does it compare to another recipe that calls for 500g of corn? The imperfect solution here is to manually create a dictionary to map common food units to its corresponding average weight. 

###### 2.2.2 Natural Language Processing: Instructions

<img src=""img/process.jpg"" height=18%  width=18%  alt=""<3?"" ALIGN=""right"">

	    Place potatoes into a large pot and cover with salted water; bring to a boil. 
	    Reduce heat to medium-low and simmer until tender, 10 to 12 minutes. 
	    Add corn and boil for an additional 5 minutes. Drain. Cut corn into thirds.	

Processing instructions is harder. Visually is this the simplified instructions we feed to the machine. We make the assumption that the order of operation does not matter, only the total unit of cooking action matches the corresponding units of ingredients.

Variables that we try to parse in the instructions are:

	    1. Time (Optional)
	    2. Temperature (Optional)
	    3. Action
	    4. Tools (Optional)
	    5. Ingredients

We first remove the stopwords using the **NLTK** library and convert all words to lowercase. Each sentence is an instruction. To find the time, we use the **Regular Expression** library to look for units of time ('minutes','hours','minute','hour','seconds','second') and standardize all units to seconds. To find the temperature we look for the key phrase 'degrees f' or 'degrees c' and standardize all temp to Fahrenheit. To find actions and tools, we import a predefined list of actions and tools and match words in the sentence to words in the actions and tools lists. To find ingredients, we use the list of ingredients previously found. [10][11]

 > **Instructions = Time + Temperature + Action + Tools + Ingredients**

<br></br>

![header](img/exploration.jpg)

## 3. General Modeling and Exploratory Data Analysis

In the process of constructing an Artificial Intelligence model, let's take the time to explore the following question to see if we can discover any pattern in our data.

	* Which ingredients appear most often?
	* Can we predict cuisines based on their recipes?
	* Can we say with certainty if one type of food is more popular than another type?
	* Which recipes are the most similar?
	* Which ingredients go well together or do not go well together?
	* Can we predict how recipes will be rated?
	* For a given dish, which other dishes are the most similar?

#### 3.1 Classfication

##### a. Which ingredients appear most often?

Word cloud of ingredients, weighted by frequency of appearance in recipes:

<p align=""center"">
  <img src =""img/ingredientwordcloud.JPG"">
</p>

##### b. Can we categorize cuisines based on recipes?

Yes, it turns out we categorize cuisines based on recipes. There are 26 types of cuisines, but we are able to predict cuisines with **65% accuracy**. This accuracy score is a weighted average of pairwise accuracy scores. 

Using python's **sklearn** library, we construct a **Linear SVC model, a Multinomial Naive Bayes model, a Random Forest Classification Model, and a Logistic Regression model.** For each model, we randomly split our initial data set into two subset of data. The first dataset is our training data (containing 75% of the original dataset); this set is use to optimize model parameters. The second dataset is our test data (containing 25% of the original dataset); this set is use to evaluate the performance of our models. 

For each model, we run a meshgrid of various model hyperparameters and select the one that returns the highest accuracy score on the training dataset. Given our parameterization, our Random Forest model has returned the best score.

The models are saved in the /model directory as pickle files.

![header](img/confusionmatrix.jpg)

##### c. Can we say with certainty if cuisine is more popular than another?

Using python's **scipy** library, we use the stats.ttest_ind module to compare the relative popularity of cuisines as judged by the allrecipes community. The function *compare.py* takes two types of cuisines as inputs and returns the average rating of each cuisine and the probability that the first cuisine is more popular. 

We can also visualize ratings by cuisine using an error bar graph.

![header](img/cuisinerating.jpg)

Our two cuisines with the highest average ratings are 'American' and 'Southern & Soul Food', both of which we can say with 95% confidence to be more prefered by the community than most other cuisines. This conclusion is a reflection on the preferences of the community rather than a blanket statement on the quality of cuisines.

'English' cuisine has a large error bar since there were 18 observations.

##### d. Which cuisines have the most similar ingredient profile?

Using python's **sklearn** library, we use the metrics.pairwise.cosine_similarity module to construct a cosine similarity matrix of cuisines. A score of 1 indicates that two cuisines share indentical ingredients in their recipes and a score of 0 indicates that two cuisines uses ingredients that have no correlation to each other.

![header](img/ingredientSimilarity.jpg)

##### e. Which ingredients go well together or do not go well together?

For this exercise, we can simply look at the ratio of the count of all pairs of ingredients to the sum of the counts of each of the ingredients. 

##### f. Can we predict how recipes will be rated?

In *predictratingbyingredients.py*, the user is able to enter a list of ingredients into their console and return a predicted rating using the model we designed in part b).

#### 3.2 Clustering

![header](img/clustering.jpg)

Clustering can be using to detect latent pattern within datasets. Considering only the ingredients variable in our dataset, if we reduce this to two dimensions (discussed below), we can plot the two dimension against each other and visualize the results. Clustering indicates existance of patterns in the dataset. 

The K-means clustering method aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean. The silhouette value is a measure of how similar an object is to its own cluster (cohesion) compared to other clusters (separation). The silhouette ranges from ‚àí1 to +1, where a high value indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters.

In our model, we find that the silhouette score indicates 4 clusters, roughly lining up with the 4 different subcontinents.

#### 3.3 Other EDA

![header](img/molgast5.jpg)

## 4. Feature Transformation and Dimensionality Reduction

In part 3, we are visualized the 2-D compression of the ingredient data set, using the t-distributed Stochasitc Neighbor Embedding module in python's **sklearn** library. The ingredient dataset is initially composed of 1013 explanatory variable, each a boolean variable of whether a particular ingredient like tomato exists in that recipe.

More generally, we are using Principle Component Analysis (PCA) to reduce the dimensions of a matrix. PCA uses an orthogonal transformation to convert a set of observations to a set of linearly uncorrelated variables. The first component is a n-dimensional vector, created to minimize the sum of square distances from all observations. Each subsequent component is found as a vector, orthogonal to all previous components, that when taken in conjugation with all previous components, further minimizes the sum of square distances from all observations.

Reminder to the reader that we had previously parsed the following from the instructions text:

	    1. Time (Optional)
	    2. Temperature (Optional)
	    3. Action
	    4. Tools (Optional)
	    5. Ingredients

Let's focus on the two most important non-optional categories for the following analysis: action and ingredients. More simply, recipes are a list of ingredient-action pair. Limiting our actions to a list of 182 and ingredients to 1013 of the most common, we obtain 184366 ingredient-action pairs. Reshaping our data shape as a matrix of booleans, each of these 184366 ingredient-action pairs becomes its own column, with 1 indicates that a particular ingredient-action was used in the recipe. 

Using a dataset of 15,000 observations, a 15,000 x 184366 matrix of boolean is roughly 25GB of data, much too large to process using a single core. Therefore we have to use dimensionality reduction!

Using PCA decomposition is problematic since the meaning of our objective gets lost. How can a cook possibly implement thousands of ingredient-actions per dish? The solution is **embedded encoding.**

Embedded encoding in the context of Machine Learning is a transformation of variables. We have 184366 variables, each of these get map to an unique integer in binary form. Each digit of our new key becomes the new variables. We can encode each ingredient-action in as little as 18 dimensions in binary form! Since by the nature of cooking, our action-ingredient pair tend to be limited, we can impose a maximum number of 25. Consequently, we have reduced our dimensionality by a factor of 400 without losing interpretability!

## 5. Neural Networks

![header](img/gan.jpg)

A neural network, in its basic essence, is model for complex relationships that can find latent pattern. Each observation is broken down as a vector of data and subject to many layers and iterations of transformation.

A generative adversarial network (GAN) is a specific type of machine learning system, where two neural networks (generator and discriminator) compete with each other. The first neural network is a generator which take a random normal variable (noise)  as an input, and optimizes a generation function produces fakes data that closely mirrors the real data, as judged by the the discriminator's discrimating check function. Subsequently, the discriminator alters its discriminating check function to best distinguish between the real and fake data. The process is repeated to improve the performance of both the generator and the discriminator.

Should the reader be interested in learning more about GAN, we would recommend read the follow [article](https://medium.com/@jonathan_hui/gan-why-it-is-so-hard-to-train-generative-advisory-networks-819a86b3750b). [12] An excerpt is included below:

![header](img/gan1.jpg)

![header](img/gan2.jpg)

## 6. Outcome

Generative Adversial Network models are a form of unsupervised learning, which means the data has not been labelled, classified or categorized. Therefore, it is practically difficult to judge the success of the project. The reader is encouraged to try out the recipes and provide feedback. Recipes are also being uploaded across several allrecipes.com accounts without the disclosure being AI Generated. Since the implicit goal of the project is to generate good recipes, we project a rating using the Gradient Boosting model that we created early, and retain only the top 10% of recipes generated by our GAN model.

Here's a sample recipe generated by the model. The title, interpretation of instructions, and graphics were manually designed. We present **Orange Chicken with Garlic.**

![header](img/recipecard.jpg)

## 7. About the Author

**Derek Jia** is a data scientist who loves building intelligent applications and exploring the exciting possibilities using deep learning. He is interested in creating practical and innovative solutions to real-world problems. He holds two degrees in Finance and Math from The University of Pennsylvania. You can reach him on [LinkedIn](https://www.linkedin.com/in/derekdjia).

## 8. References

1. [*""What is Molecular Gastronomy""* Pictures](https://mrcavaliere.com/what-is-molecular-gastronomy/)
2. [*Recipe Scraper* Python Package](https://github.com/hhursev/recipe-scrapers)
3. [*Data Scraping vs Data Crawling* Scraping Etiquette](https://www.datahen.com/data-scraping-vs-data-crawling/)
4. [*Allrecipes Webscraping and Webcrawling rules*](https://allrecipes.com/robots.txt/)
5. [*AWS Lambda* Tutorial](https://medium.com/northcoders/make-a-web-scraper-with-aws-lambda-and-the-serverless-framework-807d0f536d5f)
6. [*Recipe JSON File*](https://github.com/kbrohkahn/recipe-parser/)
7. [*""Andrej Karpathy's Convolutional Neural Networks (CNNs / ConvNets)""*](http://cs231n.github.io/convolutional-networks/) Convolutional Neural Networks for Visual Recognition, Stanford University.
8. [*Canva* Graphic Designs](https://www.canva.com/)
9. [*Wordclouds*](https://www.wordclouds.com/)
10. [Image Credit](https://www.thepioneerwoman.com)
11. [Image Credit](https:/slowcookergourmet.net/slow-cooker-corn-and-potato-chowder/)
12. [GAN Tutorial](https://medium.com/@jonathan_hui/gan-why-it-is-so-hard-to-train-generative-advisory-networks-819a86b3750b)

![footer](img/footer.jpg)
",19,19,2,0,food,"[data-science, food, neural-networks]",72
nickysemenza,gourd,,https://github.com/nickysemenza/gourd,https://api.github.com/repos/gourd/nickysemenza,go universal recipe database üå∂,"# gourd

**Go**(lang) **U**niversal **R**ecipe **D**atabase

> etymology: Before modern technology, people would use hollowed out gourds as food storage containers.

---

Gourd is a recipe database that can be used for meal planning and generating ingredient lists.

## this project is a WIP

[![codecov](https://codecov.io/gh/nickysemenza/gourd/branch/master/graph/badge.svg)](https://codecov.io/gh/nickysemenza/gourd)
[![Go Report Card](https://goreportcard.com/badge/github.com/nickysemenza/gourd)](https://goreportcard.com/report/github.com/nickysemenza/gourd)
[![GoDoc](https://godoc.org/github.com/nickysemenza/gourd?status.svg)](https://pkg.go.dev/github.com/nickysemenza/gourd)

## features

This is comprised mulitple components:

1. **api** OpenAPI 3.0 REST API, defined in `internal/api/openapi.yaml`
1. **ui** in React + Typescript, using generated openapi clients
1. **scraper** for saving recipes from websites (nytimes, seriouseats) for later analysis.
   - This currently works on websites using `json+ld` with [the appropriate schema](https://schema.org/Recipe)
1. **parser** for extracting structured information from freetext ingredient line items.
   - e.g. `1 1/2 cups flour (180g), sifted` will be parsed into `{ingredient: flour, amount: 1.5, unit: cup, modifier: sifted`.
   - This leverages [nickysemenza/ingredient-parser](https://github.com/nickysemenza/ingredient-parser) and is exposed to the UI via WebAssembly.
1. **usda** is used for mapping ingredients to their USDA database equivalent, which has very detailed nutrition information
   - e.g. [plain strawberries](https://fdc.nal.usda.gov/fdc-app.html#/food-details/747448/nutrients) or [C&H brown sugar](https://fdc.nal.usda.gov/fdc-app.html#/food-details/392083/nutrients)
   - This dataset also contains the imperial to metric mappings (e.g. the data from the back of the flour bag that says `1/4 cup = 30 grams`)
1. **cli** for interacting with the api instead using the UI
   - this is used for importing/exporting recipes, as well as loading metadata
",19,19,4,1,food,"[cooking, food, golang, ingredients, react, recipe, recipe-stash, recipes, typescript, usda]",72
Gear61,Food-Diary,,https://github.com/Gear61/Food-Diary,https://api.github.com/repos/Food-Diary/Gear61,Beautiful Android app to journal your culinary adventures,"## Download

<a href=""https://play.google.com/store/apps/details?id=com.randomappsinc.foodjournal"" target=""_blank"">
<img src=""https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png"" alt=""Get it on Google Play"" height=""100""/></a>

License
=======

    Copyright 2017-present Alexander Chiou

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
",17,17,4,28,food,"[android-application, food, foodie, journal-logs, material-design]",72
brunorp,Cooka,,https://github.com/brunorp/Cooka,https://api.github.com/repos/Cooka/brunorp,A React Native mobile app that allows people to search for cooking recipes using ingredients they have at home. The application consumes the Spoonacular API.,"<h2 align=""center"">
  Cooka App
</h2>

<p align=""center"">A React Native mobile app that allows people to search for cooking recipes using ingredients they have at home. The application consumes the Spoonacular API.</p>

<p align=""center"">
  <a href=""https://github.com/brunorp"">
    <img alt=""Made by Bruno Rossetto"" src=""https://img.shields.io/badge/made%20by-Bruno%20Rossetto-blue"">
  </a>

  <img alt=""Last Commit"" src=""https://img.shields.io/github/last-commit/brunorp/Cooka"">

  <img alt=""Contributors"" src=""https://img.shields.io/github/contributors/brunorp/Cooka"">

  <img alt=""License"" src=""https://img.shields.io/badge/license-MIT-orange"">
</p>

![Alt text](https://i.imgur.com/TLEaoIx.jpg ""Menu"")
![Alt text](https://i.imgur.com/sFOS2DM.jpg ""Results"")
![Alt text](https://i.imgur.com/W6OP2eg.jpg ""Instructions"")
---

## Table of Contents

<ul>
  <li><a href=""#-getting-started"">Getting Started</a></li>
  <li><a href=""#-features"">Features</a></li>
  <li><a href=""#-contributing"">Contributing</a></li>
  <li><a href=""#-support"">Support</a></li>
  <li><a href=""#-license"">License</a></li>
</ul>

---

## üöÄ Getting Started

### Prerequisites

- To run any React Native application you need to configure the environment on your machine.

- Setting the environment is a complex process, so it's recommended to follow the Rocketseat guide which is currently the most complete and detailed to make the settings:

#### [**Rocketseat Guide**](https://react-native.rocketseat.dev/)

### Clone

- Clone this repo to your local machine using:

```
git clone https://github.com/brunorp/Cooka
```

### Setup

#### Android

- `$ npm install`

- `$ npx react-native run-android`

#### iOS - _MAC Only_

- `npm install`

- `npx react-native run-ios`

---

### Development Environment Errors Fixes
> Failed to install the app. Make sure you have the Android development environment set up

*cd android && ./gradlew clean* (repeat with *chmod +x gradlew* if permissions error)

---

## üìã Features

### Documentation

- [x] Search for recipes using ingredients

### Build with

- Core
  - [React Native](https://reactnative.dev/) - A framework for building native apps with React.
- Navigation
  - [React Navigation](https://reactnavigation.org/) - Routing and navigation for your React Native apps.
- API
  - [Spoonacular API](https://spoonacular.com/food-api) - The only food API you'll ever need.

---

## ü§î Contributing

Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.
 
Please make sure to update tests as appropriate.

---

## üìå Support

Reach out to me at one of the following places!

- Linkedin at [Bruno Rossetto](https://www.linkedin.com/in/bruno-rossetto/)

---

## üìù License

<img alt=""License"" src=""https://img.shields.io/badge/license-MIT-%2304D361"">

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

## References

Design by: [Chris Iwan](https://dribbble.com/shots/6988643-Cookbook-Recipes-Animation?utm_source=pinterest&utm_campaign=pinterest_shot&utm_content=Cookbook%20Recipes%20Animation&utm_medium=Social_Share)

Photos by Lily Banse and Anna Pelzer on Unsplash

[Cherry](https://icons8.com/icons/set/cherry) icon icon by [Icons8](https://icons8.com)

[Spaghetti](https://icons8.com/icons/set/spaghetti) icon icon by [Icons8](https://icons8.com)

[Hamburger](https://icons8.com/icons/set/hamburger) icon icon by [Icons8](https://icons8.com)

---

Made with ‚ô• Enjoy it!
",16,16,4,16,food,"[cookbook, cookbooks, food, javascript, mobile, react-native, react-router]",72
ramyberrekia,ramys-tedbira,,https://github.com/ramyberrekia/ramys-tedbira,https://api.github.com/repos/ramys-tedbira/ramyberrekia,A website (webapp) to get food recipes by recipes names & ingredients.,"# Ramy's tedbira
A website (aka: webapp) to get food recipes by recipes names &amp; ingredients that you have in your fridge, using Django-framework and Spoonacular-api.

<b>Note:</b> The project isn't 100% Python, It also contains HTML files.

<b>Live website:</b> https://ramy-tedbira.herokuapp.com/

![](website_preview.png)


[Rami Berrekia](https://github.com/ramyberrekia) ‚Äì [ramiberrekia1@gmail.com](mailto:ramiberrekia1@gmail.com)



## Run the project

To run this project you will need to set some environment variables.

1. Create a new file called `.env` inside the `food` folder
2. Copy all of the variables inside `food/.template.env` and assign your own values to them
3. - <b>In macOS:</b> Run `export READ_DOT_ENV_FILE=True` in your terminal so that your environment variables file will be read.
   - <b>In Windows:</b> Run `[System.Environment]::SetEnvironmentVariable('READ_DOT_ENV_FILE','True')` in your terminal so that your environment variables file will be read.
4. In your terminal, Run `python manage.py collectstatic` to collect static files.<br>
<b>Note:</b> make sure you've installed the required packages to run the server by running `pip install -r requirements.txt` in your terminal.




",16,16,1,0,food,"[django, food, recipes, spoonacular-api, website]",72
rugk,crops-parser,,https://github.com/rugk/crops-parser,https://api.github.com/repos/crops-parser/rugk,üå±üçéüçÜ A shell script to parse the data by the Food and Agriculture Organization of the United Nations on crops/fruits.,"# Crops parser

This shell script parses data from the [Food and Agriculture Organization of the United Nations](https://www.fao.org/faostat/en/#data/QCL) about the cultivated/planted plants/fruits on the world into a YAML file, which groups them per country to see the top 15.

It has been created for the OpenStreetMap mapping app [StreetComplete](https://github.com/westnordost/StreetComplete), see [this issue](https://github.com/westnordost/StreetComplete/issues/368) for details.

## How to download data?

Go to the [FAQ website](https://www.fao.org/faostat/en/#data/QCL) and download the FAO data. Things to remember:
1. Select all countries and **make sure to select the FAO** coding system.
2. Either select the area harvested (in ha) or the production quantity (in tonnes) to get useful results.
3. Select all crops in the items list. (The new FAO website merged crops [C] and livestock [L].)
4. Save the data.

![screenshot of the FAO website export with important things to select highlighted as explained above](./fao-website-guide.png)

## How to run it?

The script is mostly POSIX-compliant, so it should work on all systems, but a CLI tool called [csvtool](https://github.com/Chris00/ocaml-csv) has to be installed as it is used as a CSV parser.

If this is done, you can just execute it:
```shell
$ ./parseCrops.sh source/area_harvested_2019+2020.csv result/OsmOnly/mostAreaHarvest_2019+2020.yml    
Prepare CSV‚Ä¶
Adjusting datasets‚Ä¶
Sum up duplicate elements‚Ä¶
Summed up 289 duplicates.
Calculate yearly average‚Ä¶
Sort data‚Ä¶
Evaluate data‚Ä¶
WARNING: No language code for China could be found. Skip.
Finish processing‚Ä¶
```

The language code warning for China is to be expected, see [the contributing guide for details](./CONTRIBUTING.md).

## What does it?

This is an overview of what happens:
* `Prepare CSV‚Ä¶` ‚Äì It strips the table header and extracts the columns of interest.
* `Adjusting datasets‚Ä¶` ‚Äì Adjusts each dataset. E.g. it strips commas for easier processing, applies the blacklist and coverts the crop names to OSM keys (optional).
* `Sum up duplicate elements‚Ä¶` ‚Äì Finds exact duplicates (considering the year too) and sums them up. Afterwards reports the sucess. (Usually items should only be summed up when converting OSM tags.)
* `Calculate yearly average‚Ä¶` ‚Äì Calculates the average tonnes/area in production when multiple years are given.
* `Sort data‚Ä¶` ‚Äì It sorts the whole data according to the tonnes of produced crops, independent of the country.
* `Evaluate data‚Ä¶` ‚Äì It extracts all crops for each country and transforms the first fifteen crops listet into the YAML format. Additionally it replaces the country name with the 2-letter country code (ISO 3166).
* `Finish processing‚Ä¶` ‚Äì It adds the header and default crops and sorts the YAML another time, so the countries are sorted.

## Result

The results can be seen in the directory [result](result). All legacy and more up-to-date data are included.

The script can handle multiple data from multiple years quite well. After summing up equal items per year (and country) it later calculates the average of the production numbers from both years.

## Extras

Additionally, there is a collection of square images of all ""OSM fruits"", which are included in the top-15. You can find it in the directory [`images`](images/).

## Legal stuff

The data taken from the FAO is [licensed under the terms they describe](https://www.fao.org/contact-us/terms/db-terms-of-use/en/), i.e. CC BY-NC-SA 3.0 IGO. This is described [in detail in this document](LICENSE-data.md).

![This work is made available under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 IGO license (CC BY-NC-SA 3.0 IGO; https://creativecommons.org/licenses/by-nc-sa/3.0/igo). In addition to this license, some database specific terms of use are listed in the Terms of Use of Datasets.](https://www.fao.org/faostat/en/src/images/creative_commons.png)

Apart from that, all code part is licensed [under the MIT license](LICENSE.md).
",15,15,3,5,food,"[agriculture, agriculture-research, crop, crops, data-analysis, data-science, food, fruit, fruits, statistics, streetcomplete, tree, vegetables]",72
Faiz-rhm,Flutter-Food-Delivery,,https://github.com/Faiz-rhm/Flutter-Food-Delivery,https://api.github.com/repos/Flutter-Food-Delivery/Faiz-rhm,Food delivery UI design in flutter.,"# Flutter-Food-Delivery-UI

A sample app to showcase food delivery UI demo in flutter.


## Development Setup

Clone the repository and run the following commands:

flutter pub get
flutter run


## Screenshots

<img width=""1080"" alt=""Screen Shot 2022-04-26 at 8 47 04 PM"" src=""https://user-images.githubusercontent.com/14290499/165346394-2c2665d8-693b-4dd3-9713-4f3d2da54676.png"">

<img width=""1080"" alt=""Screen Shot 2022-04-26 at 8 47 15 PM"" src=""https://user-images.githubusercontent.com/14290499/165346414-9015c846-1f4f-4f9e-bffe-344ab4257f6b.png"">

     
## Pull Requests

I welcome and encourage all pull requests. It usually will take me within 24-48 hours to respond to any issue or request.


## Created & Maintained By

- [Instagram](https://www.instagram.com/faiz.rhm)
- [Youtube Channel](https://www.youtube.com/channel/UCM1OzZsZ5FQIg01vdKGAw7g)
- [Twitter](https://twitter.com/faiz_rhm)


## Getting Started

This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://www.instagram.com/faiz.rhm)
- [Cookbook: Useful Flutter samples](https://flutter.dev/docs/cookbook)

For help getting started with Flutter, view our
[online documentation](https://flutter.dev/docs), which offers tutorials,
samples, guidance on mobile development, and a full API reference.
",14,14,1,0,food,"[flutter, flutter-app, flutter-apps, flutter-demo, flutter-examples, flutter-ui, flutter-widget, food, food-app, food-delivery, food-ordering, food-ordering-application, ui, ui-design, ux-design, ux-ui]",72
andrebng,Food-Diary,,https://github.com/andrebng/Food-Diary,https://api.github.com/repos/Food-Diary/andrebng,Uses iOS 11 and Apple's CoreML to add nutrition data to your food diary based on pictures. CoreML is used for the image recognition (Inceptionv3). Alamofire (with CocoaPods) is used for REST requests against the Nutritionix-API for nutrition data.,"# Food-Diary

## Introduction

Uses iOS 11 and Apple's CoreML to add nutrition data to your food diary based on pictures. CoreML is used for the image recognition (Inceptionv3). Alamofire (with CocoaPods) is used for REST requests against the Nutritionix-API for nutrition data.

|![Home](/Screenshots/Screenshot1_Home2.png?raw=true ""Home"")
|![Home Empty](/Screenshots/Screenshot1_Home.png?raw=true ""Home Empty"")
|![Eaten food selection](/Screenshots/Screenshot2_AddToDiary.png?raw=true ""Choose eaten food"")
|![Add to diary](/Screenshots/Screenshot3_MLSelection.png?raw=true ""Add to diary"")

## Requirements

Food-Diary is written with Swift 3 and is compatible with iOS 11

## Installation

Run `pod install` to install Alamofire.

## Roadmap

- Apply MVVM 
- Apply Data Binding
- Persistent storage of diary entries
- Change weight and calories goal

## License

Food-Diary is available under the MIT license. See the LICENSE file for more info.


",13,13,4,0,food,"[alamofire, apple-coreml, cocoapods, coreml, data-binding, food, food-diary, image-recognition, inceptionv3, ios, mit-license, mvvm, nutritionix-api, swift, swift3]",72
nishanthvijayan,zomato-analytics,,https://github.com/nishanthvijayan/zomato-analytics,https://api.github.com/repos/zomato-analytics/nishanthvijayan,This project is no longer functional. Zomato now requires OTP login.,"# zomato-analytics

This project is no longer functional. Logging into Zomato now requires entering an OTP. In a couple of days, I'll change this project to a chrome extension that'll scrape the Order Summary page once you've manually navigated to it.  
",13,13,3,1,food,"[food, food-ordering, personal-informatics, spending-tracker, zomato]",72
nicopierson,hotpotato,,https://github.com/nicopierson/hotpotato,https://api.github.com/repos/hotpotato/nicopierson,"Hotpotato is a space for chefs to display their creations. Follow your favorite chef. Like your favorite recipes. And find the latest gluten-free, vegetarian, and multi-culinary recipes.","<p align='center'>
  <img src='./readme-assets/images/hotpotato.png' >
</p>

# Hotpotato
Hotpotato is a recipe portfolio App that assists users to discover and comment new recipes. It is a fullstack React App made with a Redux state manager and a backend using Python, Flask, SQL-Alchemy, and PostgresSQL. 

* View the <a href='https://hotpotato-app.herokuapp.com/'>Hotpotato</a> App Live
* It is modeled after the <a href='https://www.behance.net/'>Behance</a> App
* Contains recipes for Vegetarians, Vegans, and Gluten-Free diets.

* Reference to the Hotpotato <a href='https://www.github.com/nicopierson/hotpotato/wiki'>Wiki Docs</a>

| Table of Contents |
| ----------------- |
| 1. [Features](#features) |
| 2. [Installation](#installation) |
| 3. [Technical Implementation Details](#technical-implementation-details) |
| 4. [Future Features](#future-features) |
| 5. [Contact](#contact) |
| 6. [Special Thanks](#special-thanks) |


## Technologies
* <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript""><img src=""https://img.shields.io/badge/-JavaScript-F7DF1E?logo=JavaScript&logoColor=333333"" /></a>
* <a href=""https://www.postgresql.org/""><img src=""https://img.shields.io/badge/-PostgreSQL-336791?logo=PostgreSQL&logoColor=white"" /></a>
* <a href=""https://nodejs.org/""><img src=""https://img.shields.io/badge/Node.js-43853D?style=flat&logo=node.js&logoColor=white""></a>
* <a href=""https://reactjs.org/""><img src=""https://img.shields.io/badge/react-%2320232a.svg?style=flat&logo=react&logoColor=%2361DAFB""></a>
* <a href=""https://redux.js.org/""><img src=""https://img.shields.io/badge/redux-%23593d88.svg?style=flat&logo=redux&logoColor=white""></a>
* <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS""><img src=""https://img.shields.io/badge/-CSS3-1572B6?logo=CSS3"" /></a>
* <a href=""https://www.python.org/""><img src=""https://img.shields.io/badge/Python-3776AB?style=flat&logo=python&logoColor=white"" /></a>
* <a href=""https://flask.palletsprojects.com/""><img src=""https://img.shields.io/badge/Flask-000000?style=flat&logo=flask&logoColor=white"" /></a>
* <a href=""https://www.heroku.com/home""><img src=""https://img.shields.io/badge/Heroku-430098?style=flat&logo=heroku&logoColor=white"" /></a>


## Features

### Sign In and Sign Up
![Sign Up](./readme-assets/images/signup.jpg)
![Login](./readme-assets/images/login.jpg)

### Feed Page
Hotpotato feed displays all recipes and chefs
Discover and search for new recipes
![Feed Page](./readme-assets/images/feed.jpg)

### Sort Recipes in Feed
Sort Recipes based on a category
![Feed Sort by Category](./readme-assets/images/feed-sort.jpg)

### View Recipe
Single recipe of name, photos, ingredients, directions, and comments
![Recipe Page](./readme-assets/images/recipe-page.jpg)

### Add Recipe
Add a new recipe to the database
![Add Recipe](./readme-assets/images/recipe-add.jpg)
Cancel adding recipe
![Cancel Add Recipe](./readme-assets/images/recipe-add-cancel.jpg)

### Create, Read, Update, Delete Recipe Preparations
View preparations to make recipe
![Recipe Preparations](./readme-assets/images/preparations.png)
Edit and Add a recipe preparation(s) in the database
![Edit Recipe Preparations](./readme-assets/images/preparations-edit.png)
![Add Recipe Preparations](./readme-assets/images/preparations-add.png)

### Create, Read, Update, Delete Recipe Ingredients
View Ingredients to make recipe
![Recipe Ingredients](./readme-assets/images/ingredients.png)
Edit and Add a recipe preparation(s) in the database
![Edit Recipe Ingredients](./readme-assets/images/ingredients-edit.png)
![Add Recipe Ingredients](./readme-assets/images/ingredients-add.png)

### Comment
Users can add comments for a recipe
![Comments](./readme-assets/images/comments.png)

### Follow
Follow or unfollow a chef

<span>
<img alt=""follow"" src=""./readme-assets/images/follow.png"" height=300/>
<img alt=""unfollow"" src=""./readme-assets/images/following.png"" height=300/>
</span>


## Installation
To build/run project locally, please follow these steps:

1. Clone this repository

```shell
git clone https://github.com/nicopierson/hotpotato.git
```

2. Install Pipfile dependencies and create the virtual environment
```shell
pipenv install
```

2. Install npm dependencies for the `/react-app`

```shell
cd react-app
npm install
```

3. In the `/` root directory, create a `.env` based on the `.env.example` with proper settings

4. Setup your PostgreSQL user, password and database and ensure it matches your `.env` file

5. In the root folder, create the database by running in the terminal:
```shell
flask db create
```

6. In the root folder, migrate tables to the database by running in the terminal:
```shell
flask db migrate
```

7. In the root folder, seed the database by running in the terminal:
```shell
flask seed all
```

8. Start the flask backend in the `/` root directory
```shell
flask run
```

9. Start the frontend in the `/react-app` directory

```javascript
npm start
```


## Technical Implementation Details

### Follow
Follow feature was a key element for our project and we implemented by creating a self-referential table from the Users table. It was also necessary to add class methods to follow and to unfollow a user or chef. It was challenging to integrate the table and append or remove users to the table.

Part of our user model is shown below:

```python
follows = db.Table(
  ""follows"",
  db.Column(""user_id_follow_owner"", db.Integer,
            db.ForeignKey(""users.id"")),
  db.Column(""user_id_follower"", db.Integer, db.ForeignKey(""users.id""))
)
followers = db.relationship(
  ""User"",
  secondary=follows,
  primaryjoin=(follows.c.user_id_follow_owner == id),
  secondaryjoin=(follows.c.user_id_follower == id),
  backref=db.backref(""follows"", lazy=""dynamic""),
  lazy=""dynamic""
)

def follow(self, user):
  if not self.is_following(user):
    self.follows.append(user)
    return user
  return False

def unfollow(self, user):
  if self.is_following(user):
    self.follows.remove(user)
    return user
  return False
```

In order to connect the backend to the frontend, we connected the `follows` api routes to update the following in the redux store. When the Follow component button is clicked, either a removeFollowing or createFollowing dispatch action is called to update the follow and profile slice of state in redux store. As a result the Profile page will re-render because React notices a change in the profile state and updates the followers attribute and the follow button.

```javascript
export const removeFollowing = (id) => async (dispatch) => {
    const response = await fetch(`/api/follows/users/${id}`, {
        method: 'DELETE',
    });

    if (response.ok) {
        await dispatch(deleteFollowing(id));
        await dispatch(getProfile(id));
        return response;
    } else {
        return ['An error occurred. Please try again.']
    }
}

export const createFollowing = (id) => async (dispatch) => {
    const response = await fetch(`/api/follows/users/${id}`, {
        method: 'POST',
    });

    if (response.ok) {
        const { following } = await response.json();
        await dispatch(addFollowing(following));
        await dispatch(getProfile(id));
        return following;
    } else {
        return ['An error occurred. Please try again.']
    }
}
```

### Integrating React Carousel
In order to show more than main thumbnail, we integrated a third-party react component.

Code snippet is shown here:

```javascript
<Carousel 
  className='recipe-carousel' 
  renderArrow={arrows} 
>
  { getPhotos()?.map(recipe => (
    <img 
      src={recipe.img_url} 
      alt={recipe} 
      key={recipe.id} className='recipe-carousel-images'
    />
  ))}

  { getVideos()?.map(video => (
      <ReactPlayer url={video}></ReactPlayer>
    ))
  }

  {addVideo &&
    <ReactPlayer url={videoUrl}></ReactPlayer>
  }
</Carousel>
```


## Future Features

1. __Search__ - search recipes or chefs

2. __Edit Profile__ - users edit profile info and add banner

3. __Add Tags__ - add tags to recipes and profile


## Contact

### Casey Tuer
<a href=""https://www.linkedin.com/in/caseytuer/""><img src=""./readme-assets/logos/linkedin-logo.png"" height=""28"" align=""middle"" /></a>
<a href=""#""><img src=""./readme-assets/logos/angellist-logo.png"" height=""28"" align=""middle"" /></a>
<a href=""https://www.linkedin.com/in/caseytuer/""><img src=""./readme-assets/logos/github-logo.png"" height=""38"" align=""middle"" /></a>

caseytuer@gmail.com

### Leslie Owiti
<a href=""https://www.linkedin.com/in/leslie-owiti-0b447952/""><img src=""./readme-assets/logos/linkedin-logo.png"" height=""28"" align=""middle""/></a>
<a href=""#""><img src=""./readme-assets/logos/angellist-logo.png"" height=""28"" align=""middle"" /></a>
<a href=""https://github.com/leslieowititech""><img src=""./readme-assets/logos/github-logo.png"" height=""38"" align=""middle""/></a>

leslieowiti@yahoo.com

### Nico Pierson
<a href=""https://www.linkedin.com/in/nico-pierson/""><img src=""./readme-assets/logos/linkedin-logo.png"" height=""28"" align=""middle"" /></a>
<a href=""https://angel.co/u/nico-gerard-pierson""><img src=""./readme-assets/logos/angellist-logo.png"" height=""28"" align=""middle"" /></a>
<a href=""https://github.com/nicopierson""><img src=""./readme-assets/logos/github-logo.png"" height=""38"" align=""middle"" /></a>

nicogpt@gmail.com

### Wes Trinh
<a href=""https://www.linkedin.com/in/wes-trinh-28b526220/""><img src=""./readme-assets/logos/linkedin-logo.png"" height=""28"" align=""middle"" /></a>
<a href=""https://angel.co/u/wes-trinh""><img src=""./readme-assets/logos/angellist-logo.png"" height=""28"" align=""middle"" /></a>
<a href=""https://github.com/WesTrinhKL""><img src=""./readme-assets/logos/github-logo.png"" height=""38"" align=""middle"" /></a>

westrinh00@gmail.com


## Special Thanks
* Mentors who have given us their time and effort: [Zach](https://github.com/zdwatts), [Ed](https://github.com/edherm), and [Javier](https://github.com/javiermortiz) 
",13,13,2,22,food,"[flask, food, javascript, portfolio, postgresql, python, react, redux, sqlalchemy]",72
AdamWier,mega-fitness-app,,https://github.com/AdamWier/mega-fitness-app,https://api.github.com/repos/mega-fitness-app/AdamWier,A meal planing and tracking app like I always wanted it to be: super mega!,"# Mega-fitness-app
## The fitness app that's super mega
http://www.mycabinetofcuriosities.com/

## Hacktoberfest tag
Some issues are tagged Hacktoberfest because I thought they would be particularly clear or easy to understand without much explanation. If you feel like taking on an issue but need clarification, don't hesitate to ask. Whether with my project or another, happy hacking this Hacktoberfest! üéÉ

### About the project
The idea for this app came from the dissatisfaction I had with other meal and exercise tracking apps in the past that didn't provide enough flexibility. Notably being able to only input food for the current day and the past but not the future or the inability to copy meals from one day to another. These were some of the first features I worked towards, essentially bringing the idea of it also being not just a meal tracking app but also a meal planning app. It has continued to evolve from there.

### Technologies used
* Node v16
* Typescript
* React Native
* Expo 
* Firestore
* Redux
* Victory (for data visualisation)
* Yarn

### Bootstrap the project
1. Fork the repo
2. [Install yarn if necessary](https://classic.yarnpkg.com/en/docs/install/) (Npm is not recommended)
3. Run ``yarn`` in the root directory (It's optional but recommended to add ``--network-timeout 100000``)
4. Create a file named ``.env`` in the root directory
5. Copy and past the following into the file: 
```
USDA_KEY=DUMMY
FIREBASE_API_KEY=DUMMY
FIREBASE_PROJECT_ID=DUMMY
FIREBASE_AUTH_DOMAIN=<<FIREBASE_PROJECT_ID>>.firebaseapp.com
FIREBASE_DATABASE_URL=https://<<FIREBASE_PROJECT_ID>>.firebaseio.com
FIREBASE_STORAGE_BUCKET=<<FIREBASE_PROJECT_ID>>.appspot.com
```
#### USDA Api Key
6. A key for the USDA's Food Central API can be acquired here: https://fdc.nal.usda.gov/api-key-signup.html
7. Once you receive the key, replace the DUMMY value in the .env project with this key
#### Firebase API keys
8. Go to https://firebase.google.com/ and sign up for a google account or sign in if you already have one
9. Click ""Go to console"" in the top right corner
10. Click the ""Create a project"" button
11. Enter any name you like
12. Use the default settings, accept the conditions, and your project will be created
13. On the project homepage, click the gear icon to the left and go to ""Project settings""
14. Here you will see ""project id"" (FIREBASE_PROJECT_ID) and ""web api key"" (FIREBASE_API_KEY); copy these values into the corresponding variables
15. Make sure to also replace <<FIREBASE_PROJECT_ID>> in the other variables
16. When this is done, you should be able to launch the project by using the commnad ``yarn start`` (You can add ``-c`` if you ever need to clear the cache)
17. To run the app on your physical device or an emulator please see Expo's instructions https://reactnative.dev/docs/0.60/getting-started
(The app no longer runs in their web view due to certain component incompatibilities. It has also not been tested or adapted for iOS because I don't own an iPhone, but if you're interested in doing that, feel free to submit any pull requests to make it happen! I have only tested this app on Android physical devices.)

### Contributing to the project
Feel free to contibute an idea you have by forking the repository and making a pull request. If you want to see features I have in mind, take a look at the current version in development (v1.3 for example) under the Projects tab and feel free to assign yourself to an issue. If possible, please include ""Close #<<Number of issue in this repository or if no issue, the number of the pull request with the angle brackets>>"" in the commit for a minimum of tracability. Thanks and welcome to the project!",13,13,1,37,food,"[calories, calories-tracker, expo, firebase, fitness, fitness-app, food, hacktoberfest, hacktoberfest-tag, hacktoberfest2020, hacktoberfest2021, hacktoberfest2022, hacktoberfest2023, meal-planner, meal-tracker, mobile, react, react-native]",72
aiy-voice-assistant,hungry-student-app,aiy-voice-assistant,https://github.com/aiy-voice-assistant/hungry-student-app,https://api.github.com/repos/hungry-student-app/aiy-voice-assistant,Food management home assistant app for Google Assistant or Cloud Speech-to-Text service ,"# Hungry Student App

<p align=""center"">
  <img alt=""hungry-student-app"" src=""https://raw.githubusercontent.com/aiy-voice-assistant/hungry-student-app/master/logo.png"" height=""240"" />
</p>

Hungry Student APP has been developed in 24h during the ""Like@Home"" hackathon in Turin the 30-31th MArch 2019. It's an home assistant that use natural language processor and it is able to connect to the Google Assistant or Cloud Speech-to-Text service. Check out our [presentation](https://prezi.com/gcdsh_eg6-uu/aiy/?utm_campaign=share&utm_medium=copy).

Thanks to this assistant we got the first place.

The used kit for the hackathon has been for [AIY Voice Kit from Google](https://aiyprojects.withgoogle.com/voice/).

# Main aspect

To develop our assistan we cared about four main aspect of the life of students away from home (topic of the hackathon):
  1. Time: students spend a lot of time in the University, then they have very little time to perfrom home activities
  2. Health: a lot of students lead a sedentary life, moreover due to the booredom of cooking thay eat a lot of junk food
  3. Money: not only students but also all people want the best service at the best price
  4. Comodity: all the services just described offered for maximum comfort
  
After this kind of anlisys we start to develop the assistant.

# Features

Thanks to this assistan you will be able to:
  1. **Cook what you have**:
  
      By listing the ingredients left in your fridge the assistant will provide you a list of receipes that you can do only with that ingredients. Then you can choose the receipes you prefer and start to cooking.
      
      The assistant will report you the preparation time, calories and of course the steps needed to prepare the choosen receipe.
      
  2. **Order what you want**:
  
      If you are too tired uot or you do not want to cook you can order what you want: just say to the assistant what you would like to eat and it will search in the major delivery food (deliveroo, glovo, just eat) and it will say to you which the service with the best price.
      
  3. **Let it take care of you**:
  
      Every time you will use the assistan to cook or to order food, it will keep trace of what you eat with the related calories. In this way it is able to advise you when you should eat something healthy.
      
",12,12,2,0,food,"[aiy, aiy-projects, aiy-voice, aiy-voice-kit, aiy-voice-kit-automation, aiyprojects, food, food-classification, food-products, food-recommendation, google, google-api, google-assistant, google-assistant-api, google-assistant-apps, python3, rasberry-pi, speech-to-text, text-to-speech, text-to-speech-python3]",72
ZeusWPI,Haldis,ZeusWPI,https://github.com/ZeusWPI/Haldis,https://api.github.com/repos/Haldis/ZeusWPI,Haldis is your friendly neighbourhood servant. He exists so lazy fucks like you and me don't need to keep tabs of who is ordering what from where.,"Haldis
=======
[![chat mattermost](https://img.shields.io/badge/chat-mattermost-blue.svg)](https://mattermost.zeus.gent/zeus/channels/haldis)
[![Website](https://img.shields.io/website/https/haldis.zeus.gent.svg)](https://haldis.zeus.gent)
[![Mozilla HTTP Observatory Grade](https://img.shields.io/mozilla-observatory/grade-score/haldis.zeus.gent.svg?publish)](https://observatory.mozilla.org/analyze/haldis.zeus.gent)

![GitHub commit activity](https://img.shields.io/github/commit-activity/y/zeuswpi/haldis.svg)

Haldis is your friendly neighbourhood servant. He exists so lazy fucks like you and me don't need to keep tabs of who is ordering what from where.
Start an order and let people add items with a simple mouse-click!
No more calculating prices and making lists!
Be lazier today!

## Local setup

There is a special script to get started with the project. Just run it in the root of the project.
Note: this script might require you to install a certain python version, you can do this using your favorite tool e.g. [pyenv](https://github.com/pyenv/pyenv#simple-python-version-management-pyenv)

	./first-setup.sh

This will create a virtual environment, install the necessary dependencies and will give you the option to seed the database.

If you are using a database other then sqlite you will first need to configure the correct URI to the database in the generated 'config.py' file.
Afterwards upgrade the database to the latest version using

	cd app
	python3 app.py db upgrade

You can now still seed the database by running, note that you might want to put your name in the `HALDIS_ADMINS` in `app/config.py`

	./populate-db.sh

in the root folder of the project.


Activate the virtual environment using

	source venv/bin/activate

Finally run the webserver with

	python3 app/app.py runserver

Make sure to use localhost instead of 127.0.0.1 if you want to be able to login.

## Development

### Changing the database

1. Update models located in 'app/models.py'
2. Run `python app/app.py db migrate` to create a new migration.
3. Apply the changes to the database using `python app/app.py db upgrade`

### Adding dependencies/libraries

1. Add new dependency to the `requirements.in` file
2. Run `pip-compile` to freeze the dependency into the `requirements.txt` file together with its own deps
3. Run `pip-sync` to download frozen deps

### Updating dependencies
Run `pip-compile --upgrade`

For more information about managing the dependencies see [jazzband/pip-tools: A set of tools to keep your pinned Python dependencies fresh.](https://github.com/jazzband/pip-tools)

## Production
To prepare the application in a production environment, follow the same steps as for *Local setup* up to and including `./populate-db.sh`.

Set DEBUG to False in `app/config.py`.

See [Flask's deployment documentation](https://flask.palletsprojects.com/en/1.1.x/deploying/#self-hosted-options).

Set the server's Python interpreter to `/path/to/haldis/venv/bin/python`. Doing `source venv/bin/activate` is not necessary when that binary is used.
",12,12,7,34,food,"[assistant, flask, food, hacktoberfest, order, python]",72
websages,nashville,websages,https://github.com/websages/nashville,https://api.github.com/repos/nashville/websages,Nashville visitors' guide,"### Nashville, Tennessee, USA, NORTH AMERICA

[![](https://github-images.s3.amazonaws.com/skitch/Nashville%2C_TN_-_Google_Maps-20140324-173707.gif)](https://goo.gl/maps/c9Wc7)


#### Your Hosts

* Rick Bradley ([github](https://github.com/rick) - [twitter](https://twitter.com/rickbradley))
* James Fryman ([github](https://github.com/jfryman) - [twitter](https://twitter.com/jfryman))
* Aziz Shamim ([github](https://github.com/azizshamim) - [twitter](https://twitter.com/azizshamim))
* James White ([github](https://github.com/jameswhite) - [twitter](https://twitter.com/james_s_white))

Our office, [The Bikeshed](http://www.thebikeshed.io/), is located downtown, and central to many things you'd find yourself wanting to do. Come visit anytime. Here you'll find everything you need to get work done, have a central place to meet-up, and interact with some cool new friends.

#### Tips

 * Grab a free copy of the [Nashville Scene][nashvillescene] for more info on this week's haps and other recommendations that I'm totally forgetting.  Gosh, there's also an [Eash Nashvillian][eastnashvillian] you can grab too.
 * Nashville has a largely hub-and-spoke bus system ([fares][busfares]) -- google maps knows the routes.  Most of the Nashville 'hubbers use it extensively.  We also have [b-cycle bikes][bcycle] around town (ask @jameswhite), various short-term car rental services, as well as Lyft and Uber (UberX and black car).  Getting a taxi downtown is pretty easy, especially, Thursday through Sunday, but it can be annoyingly difficult to acquire one from outside the entertainment district.
 * [Nashville is America's new party town...](http://www.mirror.co.uk/lifestyle/travel/usa-long-haul/nashville-americas-new-party-town-5867974), evidently.

#### Don't Miss

 * The [Parthenon][parthenon]
 * Honkey-tonkin' down on Lower Broad -- best on Thursday, Friday, or Saturday nights
 * :fire: :chicken: -- [Hattie B's][hattiebs], [Prince's][princeschicken], or [Bolton's][boltons], etc. -- :warning: there's even a :fire: :chicken: [suicide tour map](https://www.google.com/maps/d/viewer?dg=feature&ll=36.206607,-86.75354&iwloc=0004d66683f555569ac6f&msa=0&spn=1.863756,2.469177&mid=zITadvY3TbF0.kJ4f0YebRASc) if you need it.
 * bluegrass at the [Station Inn][stationinn] - [calendar][stationinncalendar], the Olde Time Jam (Wednesday night, probably at [Charlie Bob's][charliebobs]), and/or ~~the Wooten Brothers Wednesday nights at~~ maybe some awesome music at [Third and Lindsley][3rdlindsley] (haven't seen any permutation of Wootens booked there in a while now.  :cry:)
 * lunch at [Monell's][monells], family-style awesome southern food
 * [Jeni's Ice Cream][jenisicecream] (some of the best in the USA)
 * grabbing a beer at the [Springwater Supper Club](http://www.thespringwater.com/), [Santa's Pub](http://santaspub.com/) (dive bars)
 * the [Opryland Hotel][oprylandhotel].  Shit's cray.
 * If you're into guitars, definitely check out [Gruhn Guitars][gruhns] down on 8th (2120 8th Ave South -- in the old Nashville Scene building)

#### Places to Stay:  AirBNB

 - [4bd bungalow](https://www.airbnb.com/rooms/2687266) - This was a quite awesome stay for the [Puppet 3 Hack House](https://github.com/github/summits/issues/40).  Get on this level.
 - [the tour bus(!)](https://www.airbnb.com/rooms/2410308)
 - [an Apartment in the Cumberland](https://www.airbnb.com/rooms/5846583) - **literally** across the street from the office, you lazy fucker.
 - and tons more.

#### Places to Stay:  Hotels

 - [The Hutton](http://www.huttonhotel.com/) - A nice hip hotel, we hear **great** things from people who've stayed there. Check it out.
 - [The Opryland Hotel](http://www.marriott.com/hotels/travel/bnago-gaylord-opryland-resort-and-convention-center/) - out towards the airport, so not really downtown or anything, but this place is UNREAL.  Worth a visit even if you don't stay there.  It's got a fucking rainforest inside.
 - :tophat: [Hermitage Hotel](http://www.thehermitagehotel.com/southern-living.aspx) - this place is out of hand, also about a block from the Nashville office space.
 - :tophat: [Hotel Indigo](http://www.hotelindigo.com/hotels/us/en/nashville/bnaus/hoteldetail) - I've heard great things about it, it's right downtown, so maybe 3 blocks from the office.
 - :tophat: [Loews Vanderbilt](http://www.loewshotels.com/Vanderbilt-Hotel) - I think the President stays here and shit.
 - [Sheraton Downtown](http://www.sheratonnashvilledowntown.com/) - rotating restaurant on top, a Starwood joint, like the W, for dem rewards.
 - [Hyatt Downtown](http://www.expedia.com/Nashville-Hotels-Hyatt-Place-Nashville-Downtown.h6330958.Hotel-Information?chkin=05%2F13%2F2014&chkout=05%2F17%2F2014&rm1=a2&rm2=a2&rm3=a2&rm4=a2&rm5=a2&hwrqCacheKey=e7c4de3e-51ea-417a-90f4-38067d4e7947HWRQ1397061185769&c=905c0bd0-fce8-4b91-b6f1-00002ae50fac&)
 - [Marriott Vanderbilt](http://www.hotels.com/hotel/details.html?pa=14&pn=1&ps=14&tab=description&destinationId=1489624&searchDestination=Nashville&hotelId=198032&arrivalDate=05-13-14&departureDate=05-17-14&rooms%5B0%5D.numberOfAdults=2&roomno=1&validate=false&previousDateful=false&reviewOrder=date_newest_first)
 - [Holiday Inn Vanderbilt](http://www.hotels.com/hotel/details.html?pa=15&pn=1&ps=15&tab=description&destinationId=1489624&searchDestination=Nashville&hotelId=108301&arrivalDate=05-13-14&departureDate=05-17-14&rooms%5B0%5D.numberOfAdults=2&roomno=1&validate=false&previousDateful=false&reviewOrder=date_newest_first)
 - [Hampton Inn Vanderbilt](http://www.expedia.com/Nashville-Hotels-Hampton-Inn-Suites-Vanderbilt-Elliston-Place.h59729.Hotel-Information?chkin=05%2F13%2F2014&chkout=05%2F17%2F2014&rm1=a2&rm2=a2&rm3=a2&rm4=a2&rm5=a2&hwrqCacheKey=e7c4de3e-51ea-417a-90f4-38067d4e7947HWRQ1397061185769&c=905c0bd0-fce8-4b91-b6f1-00002ae50fac&)


### Eating

### Maps
 - [Hot Chicken Map](https://goo.gl/maps/qeiGcZv8KhQ2)

#### (non-fancy)

 - [Hattie B's][hattiebs] -- Hot Chicken.  You might have to wait, but it's worth it.  Near [J-J's][jjs] & [The Broadway Brewhouse][broadwaybrewhouse].  **update**: There's a second location now on the west si-ide: [map](https://goo.gl/maps/PxBwL) and also a location now off 8th Ave in Melrose [map](https://goo.gl/maps/zXvjM53SxSE2)
 - [Monell's][monells] -- all-you-can-eat family-style Southern food, sitting with strangers at big tables passing food.  Excellent food, pretty cheap, you will not leave hungry.  Great idea for a weekday lunch.  Gets busy for dinner and really busy the weekends
 - [Jeni's Ice Cream][jenisicecream] -- east-side, deemed some of the best ice cream in America by various reckoners; this is the sibling of the original Columbus establishment.  There's a coffee shop ([Ugly Mugs][uglymugs]) right next door, so that's cool.
 - [Mayo's Fried Pies and Mahalia Jackson's Chicken](http://www.southernfoodways.org/interview/mayos-fried-pies-and-mahalia-jacksons-chicken/) -- for real. As I understand it, he actually bought the name rights from the restaurant back when it went under.  It's a little mobile-looking shack down near the interstate on Jefferson Street.  We should probably go if we can discern when it's open.  [yelp](http://www.yelp.com/biz/mayos-mahalia-chicken-outlet-nashville)
 - [the Pharmacy][thepharmacy] -- German style ""wurst-burger"" place, good German beers, great for lunch, on the east-side.
 - [Mas Tacos][mastacos] -- amazing taco-foods, try the tortilla soup (even you fucking SF hipsters will enjoy this jawn, promise).  Cash-only, on the east-side.
 - [Peg Leg Porker][peglegporker] -- some pretty amazing BBQ; including dry ribs, wet ribs, fried pies, etc. Good local craft beers on draught. [yelp][porkeryelp]
 - [the Loveless Cafe][loveless] -- you'll need to drive to get there; southern food; this used to be the best southern food in the whole fucking world; it's still got game and worth a visit, but its powers have diminished over the years; basically impossible to get in on weekends, so if you go, shoot for breakfast/brunch/lunch, maybe dinner on a weekday
 - [Pancake Pantry][pancakepantry] -- good for breakfast; lines around the block on weekends, some weekdays
 - [Woodland's][woodlands] -- really solid South Indian vegetarian food, the lunch buffet is great
 - [Prince's Hot Chicken][princeschicken] -- the original :fire: :chicken:
 - [Bolton's Hot Chicken and Fish][boltons] -- mmmmmmmm.  Don't expect to dine in.
 - [Pepperfire][pepperfire] -- a sweeter variety of :fire: :chicken: Small dining room, up off Gallatin.
 - [Party Fowl][partyfowl] -- looking for :fire: :chicken: on Sunday / late night? Try here: the birds are good, the beers are good, and it's centrally located.
 - [Rotier's][rotiers] -- hole-in-the-wall old-fashioned meat & 3; wood panelling, also has beer.
 - [Pinewood Social][pinewoodsocial] -- eats & drinks, hipsters galore, maybe a coffee shop by now, also a small bowling alley; the comestibles are good
 - [Otaku][otaku] -- **now in the Gulch and pop up in East Nashville** good ramen. Gulch location here to stay, but pop up is back in East Nashville. [Yelp listing][otakuyelp]
 - [Two Ten Jack][twotenjack] -- good izakaya on the eastside. good ramen, even better yakitori. decent cocktails on tap
 - [Jack's BBQ][jacksbbq] -- there's one on lower Broadway that's fine; the one out on Trinity Lane is the mother-ship and deserves respect; a new one on Charlotte Avenue make great bbq too.
 - [Butchertown Hall][butchertown] -- Solid beer selection, nice ambience, good place to hang out and eat meats and drank :beers:.
 - [Hog Heaven][hogheaven] -- solid local bbq next door to the Springwater Supper Club (see Drinking), looks like deserves to be right next door to the Springwater; check the hours
 - ~~both [The Gerst Haus][gerst] and ~~[Vienerfest][vienerfest] (not kidding)~~ have solid German food and beers~~
 - ~~[the Hermitage Cafe][hermitagecafe] -- late night shithole for when you're trying to not go home yet~~
 - [Mary's Open Pit BBQ][marysbbq] -- worth stopping if you're in on Jefferson Street
 - I'm sorry to inform that ""The Crunkest Fish in Town"" (aka Eastside Fish) has apparently closed, ~~though we should double-check, as the rumor mill indicated a non-zero chance of re-opening at some point.~~
 - [Urban Grub][urbangrub] -- good cocktails, slightly better than average food; a nice joint
 - [Burger Up][burgerup] -- (12South) lots of different kinds of burgers and in a nice atmosphere -- now a second location in Five Points (east nashville)
 - [Edly's BBQ][edlysbbq] -- solid 12South-area bbq joint; newer and less gritty than one might expect from good BBQ but the food is solid - Locations now in East Nashville and Sylvan Park
 - *that raspas stand on Gallatin in Madison* -- no, seriously. They've got raspas, [pi√±a loca as big as your kid](http://hdrive.websages.com/rick/as_big_as_yer_kid.jpg), bags full of doritos cut in half with awesome shit down in them, whack ass big cupfuls of mango craziness. You gotta go to Madison, tho. 310 South Gallatin Rd.
 - [Biscuit Love][biscuitlove] -- Gulch joint that serves Bonuts -- fried biscuit dough topped with Lemon Mascarpone Cream, and hot chicken biscuits topped with honey and berry compute.
 - [Rosepepper][rosepepper] has great top-shelf margaritas and burritos. It's on a bus line (Route 4).

#### More fancier eats (heavy on the Germantown tip)

 - Here, to get in the mood, read [this article by a former Noma chef, now running The Catbird Seat](http://www.nashvillescene.com/nashville/talking-tater-tots-and-more-with-trevor-moran-who-just-left-the-worlds-best-restaurant-for-the-catbird-seat/Content?oid=4034246)
 - [the catbird seat][catbird] -- fine dining, they tend to book up a month in advance, though, so plan ahead
 - [Rolf & Daughters][rolf] -- nice and classy-ish dining in Germantown, also great cocktails at the bar.
 - [5th & Taylor][5thandtaylor] -- A little fancier, a little more pricey; Germantown. Evidently good food / drinks.
 - [City House][cityhouse] -- Solid menu and good drinks, pretty nice atmosphere for hanging out and talking at a big table with your peeps.
 - [The Southern][thesouthern] -- Actually pretty good, despite being hype comparably to Husk (see below).
 - [Miel][miel] -- nice and classy dining on the west side. Good :wine_glass: selection.
 - [Silo][silo] -- At the bottom of Germantown, seems legit.
 - [Etch][etch] -- Deb is the chef.  Go for it.
 - [Husk][husk] -- Skip it. Not that great, evidently.  Very hype. Such tourist.
 - [Butcher & Bee][butcherandbee] -- excellent food on the east side
 - [Treehouse][treehousenashville] -- in east nashville, quality farm to table joint that does apps, small plates, and entrees meant for sharing... in a giant treehouse. Great outdoor space, but consider reservations for the limited seating.

#### Coffee / Hacking ( / tea )

 - [Barista Parlor][baristaparlor] -- super super slow ass service. They don't roast, they bring in good coffees from outside Nashville; great ambience, hip-as-fuck, good internet, small but good food menu; no decaf; super fucking expensive too.
 - [High Garden Teas][highgarden] -- actually, a pretty fucking amazing tea shop; you'll find their teas all over town now, too
 - [Steadfast Coffee][steadfast] -- Germantown, a couple of blocks from [Butchertown Hall][butchertown]. The coffee is good, the ambience is good, decent place for a chill hack. On the back side of the Skillery building, but don't hold that against them. Bring your Imogene+Willie jeans and rockabilly haircuts.
 - [Frothy Monkey][frothy] -- long a staple of the 12South area, the newly opened downtown location is a block away from the GitHub coworking space, stays open til 9pm (10pm on friday/saturday), and is easily the best coffee shop downtown. Oh, also decent beers, wine, and cocktails. Also a location off 8th Ave at Grimey's and another location in the Nations :cocktail:
 - [Crema][crema] -- decent coffee, terrible wi-fi. Near [Emma](emma) HQ. You might as well get Crema coffee at [Pinewoodsocial][pinewoodsocial], you can hack there in relative peace.
 - [Cafe Coco's][cafecoco] -- 24x7 coffee, tea, beer (well, during legal hours), food, etc.  Indoors and outdoors, exceedingly diverse clientelle, internet can be shitty; take no pride in / give zero fucks about crafting a latte, but they roast their own coffee.  My personal favorite for getting away and hacking.
 - [J&J's Market & Cafe][jjs] -- Vanderbilt area, decent-ish coffee, good tea selection, quiet, good atmosphere, decent internet, only small snack food (go next door to Noshville to eat).
 - [Ugly Mugs][uglymugs] -- decent internet, decent-ish coffee, nice atmosphere; next to Jeni's ice cream (zomg.)
 - [Portland Brew][portlandbrew] (multiple locations) -- decent coffee; ~~the 12South location is managed by Sra (pronounced ""shraa""), who's a friend and former neighbor of @rick -- tell Sra I sent ya.~~ Sorry, bro, Sra split. :dash:
 - [Red Bicycle][redbicycle] -- If you're over in Germantown this is a coffee shop. ~~Not highly recommended~~ Not terrible, but passable in a tight spot. Go to Steadfast instead.
 - [Dunn Brothers][dunnbros] -- an ok downtown coffee shop, about half a block from the GitHub co-working office; see [Frothy Monkey][frothy] above instead.


#### Music, etc.

 - First, check the [Nashville Scene Music Calendar][scenecal].
 - [The Station Inn][stationinn] -- incredible bluegrass venue; cinderblock building now completely surrounded by the yuppie hell that is The Gulch
 - ""Honkey Tonks"":  [Robert's Western World][roberts] and [Tootsie's Orchid Lounge][tootsies] are my personal favorites, but there's a veritable cornucopia on lower Broadway.  Bring cash for when they pass around the tip bucket.
 - if you're interested in old-time fiddle music, ping @rick and see where the current Old Time Jam is hanging out; usually a Wednesday night thing, probably at [Charlie Bob's][charliebobs]
 - Jack White's record label [Third Man Records][thirdman] has a pretty amazing hq / venue / record store.
 - [Exit/In][exitin] ([calendar][exitincal]), [The End][theend] ([calendar][theendcal]) -- Elliston Place-area rock venues.  Everyone who's anyone has been here
 - [Cannery Ballroom][cannery] ([calendar][cannerycal]) / [Mercy Lounge][mercylounge] ([calendar][mercyloungecal]) -- modern/current music, check [The Scene][nashvillescene] for current shows, etc.
 - [12 South Taproom][taproom] -- it's a bar with good food, but they have really good live music from time to time; [Kenny Vaughan][kennyv] usually plays Monday nights, and he will blow your fucking mind
 - [The Bluebird Cafe][bluebird] -- some people like to go here; @rick thinks it's a singer-songwriter nightmare; stop watching that ""Nashville"" show on television, please
 - [Marathon Music Works][marathon] -- Good place for shows, music is varied, you can catch almost anything there. 


#### Sights

 - [the Parthenon][parthenon] -- 'nuff said? -- grab a beer at the [Springwater Supper Club][springwater]
 - [Music Row][musicrow], [Studio B][studiob], etc.
 - [The Ryman][ryman] -- mother church of Country Music ([calendar][rymancal])
 - [Hatch Show Print][hatch] -- old-school letterpress show posters, largely a working museum, worth a visit; lower Broadway
   - if you'd like to visit another working letterpress shop (with our friend who did all the design / artwork for [Barista Parlor][baristaparlor], [Pinewood Social][pinewoodsocial], etc., let us know and we'll see if we can get you over to meet Bryce at [Isle of Printing][isleofprinting])
 - [Country Music Hall of Fame and Museum][halloffame]
 - something about [Johnny Cash museum][jcmuseum] something
 - the [Frist Center for the Arts][thefrist] -- the museum
 - the [Shelby pedestrian bridge][shelbybridge] is a good way to get a vantage of downtown (also dat [steam boat][steamboat] frequently passes under which can be fun), and an easy way to cross the river if you're on foot.
 - someone always seems to be going to a [Predators][thepreds] (hockey) game, if you're interested I bet we can scrounge up some extra tickets


#### Outdoors

- the [Nashville Greenway][greenways] system is extensive, including paved walking and biking trails for umpteen miles; the Shelby Bottoms greenway might be accessible, depending on where you are.
- [Warner Parks][warnerparks] (headed out towards the [Loveless Cafe][loveless], so you'll need a car) -- one of the nation's largest metro parks, miles of wooded hiking trails, paved biking and walking
- [Bell's Bend][bellsbend] and [Beaman Parks][beamanpark] offer an even more immersive outdoor hiking experience, ~15-20 minutes from downtown.
- the [Natchez Trace Parkway][natcheztrace] -- out just past [Loveless Cafe][loveless] (ditto on the car), this scenic low-speed highway runs all the way to Natchez, Mississippi and includes a number of hiking spots and scenic overlooks near its Nashville terminus

#### Drinking

 - The [Patterson House][pattersonhouse] -- speakeasy-style cocktail bar; hard to find (right next to [the catbird seat][catbird]) but definitely satisfies; eat beforehand
 - ~~[The Holland House][hollandhouse] -- East Nashville less-hard-to-find cocktail bar, with decent food~~
 - [Mickey's Tavern][mickeystavern] -- hole-in-the-wall -ish East Nashville venue
 - ~~[The Stone Fox][stonefox] ([music calendar][stonefoxcal])-- westside drinking and food establishment -- the [March 2014 Drinkup](https://github.com/blog/1798-nashville-training-and-drinkup) venue (ping @rick if you go there -- you can park and/or sleep in his yard)~~. Closed in Feb 2016. 
 - [Betty's][bettys] -- West-side. during the day this is a 70's era truck-driver / burned out West Nashville hag bar; cigarettes hanging off lower lips. At night it's usually punk kids and noise bands. Don't expect craft beers. Has a nice little enclosed outdoor nook; if you need to roll one, pull the plate out from under the back picnic table.
 - [The Broadway Brewhouse][broadwaybrewhouse] - if you hear someone say ""the brewhouse"" or ""BBH"", this is what they mean. There are multiple locations, but we always mean the midtown one, not the downtown one.  Unless there's kind of a long exasperated discussion about it being close to something and we might as well then.  Anyway, the midtown one was the cradle of Nashville tech drinking; the installation of ""The Awning"" was the beginning of its fall from grace. (The awning has its own belligerent twitter account: [@bbhmidtownawnin](https://twitter.com/bbhmidtownawnin))
 - [Corsair distillery][corsair] / tasting room / tap room -- limited hours; the RIMBoy is no longer there; probably dead to us.
 - the [Springwater Supper Club][springwater] -- complete shithole dive bar, near Centennial Park, the [Parthenon][parthenon], and [Rotier's][rotiers]
 - [Santa's Pub][santaspub] -- shithole dive that's definitely worth a visit
 - there are a number of local micro- and otherwise-breweries that have taprooms or brewpubs: [Black Abbey][blackabbey], [Tennessee Brew Works][tnbrew], [blackstone][blackstone], [yazoo][yazoo], ~~[bosco's][boscos]~~ (closed :cry:), [jackalope][jackalope], Fat Bottom, etc. -- probably recommended in my decreasing order of opinion of beer quality there
 - [Brown's Diner][brownsdiner] -- yeah, you could eat there, but mostly it's a dive that exists because of atmosphere, also good live music
 - there are a ton of bars in East Nashville (Nashville's answer to Williamsburg, with numerous transplants therefrom); ping us if you're headed to the east side of the river ([Holland House][hollandhouse], [Family Wash][familywash], [the 5 Spot][5spot] ([calendar][5spotcal]), hell, I don't even know where the cool kids go any more, but some of our crew know...)
 - ~~[East Nashville Beer Works][eastnashbeerworks] -- Nashville's own rimboy brewing at last. Beer mecca, tasty pizza, arepas, and other tasty food.~~ dead to us.

**post-drinking**
 - [Recovery Room][hangover]: To relieve the negative effects of overindulgence.


[rick]: https://team.githubapp.com/rick
[jfryman]: https://team.githubapp.com/jfryman
[azizshamim]: https://team.githubapp.com/azizshamim
[jameswhite]: https://team.githubapp.com/jameswhite
[nashvilleoffice]: https://githubber.com/article/office/coworking/nashville
[nashvillescene]: http://www.nashvillescene.com/
[eastnashvillian]: http://theeastnashvillian.com/
[busfares]: http://www.nashvillemta.org/Nashville-MTA-bus-fares.asp
[bcycle]: https://nashville.bcycle.com/
[parthenon]: http://www.nashville.gov/Parks-and-Recreation/Parthenon.aspx
[hattiebs]: http://www.hattieb.com/
[broadwaybrewhouse]: http://broadwaybrewhouse.net/brewhouse-midtown
[princeschicken]: http://www.yelp.com/biz/princes-hot-chicken-shack-nashville
[boltons]: http://www.yelp.com/biz/boltons-spicy-chicken-and-fish-nashville
[stationinn]: http://stationinn.com/
[stationinncalendar]: http://stationinn.com/index01/calendar/
[monells]: http://monellstn.com/
[jenisicecream]: https://www.jenis.com/scoop-shops/east-nashville/
[springwater]: http://www.thespringwater.com/
[santaspub]: http://santaspub.com/
[jjs]: http://www.yelp.com/biz/j-and-js-market-and-cafe-nashville-2
[noshville]: http://www.noshville.com/
[uglymugs]: http://www.uglymugsnashville.com/
[rotiers]: http://www.rotiersrestaurant.com/
[pinewoodsocial]: http://pinewoodsocial.com/
[pancakepantry]: http://www.thepancakepantry.com/
[jacksbbq]: http://www.jacksbarbque.com/
[hogheaven]: http://www.hogheavenbbq.com/
[loveless]: http://www.lovelesscafe.com/
[woodlands]: http://www.woodlandstennessee.com/
[miel]: http://www.mielrestaurant.com/
[rolf]: http://rolfanddaughters.com/
[husk]: http://www.husknashville.com/
[catbird]: https://thecatbirdseatrestaurant.com/
[hermitagecafe]: http://www.yelp.com/biz/hermitage-cafe-nashville
[marysbbq]: http://www.yelp.com/biz/marys-old-fashioned-pit-bar-b-que-nashville
[urbangrub]: http://urbangrub.net/
[burgerup]: http://www.burger-up.com/
[edlysbbq]: http://edleysbbq.com/
[biscuitlove]: http://biscuitlove.com/menu/
[baristaparlor]: http://www.baristaparlor.com/
[cafecoco]: http://www.cafecoco.com/
[frothy]: http://frothymonkey.com/
[portlandbrew]: http://www.yelp.com/biz/portland-brew-nashville-2
[crema]: http://www.crema-coffee.com/
[dunnbros]: http://nashville.dunnbros.com/
[roberts]: http://robertswesternworld.com/
[tootsies]: http://www.tootsies.net/
[charliebobs]: http://charliebobs.com/
[3rdlindsley]: http://www.3rdandlindsley.com/
[thirdman]: http://thirdmanrecords.com/about/
[exitin]: http://www.exitin.com/
[exitincal]: http://www.exitin.com/calendar/
[theend]: http://endnashville.com/
[theendcal]: http://endnashville.com/calendar/
[cannery]: http://thecanneryballroom.com/
[cannerycal]: http://thecanneryballroom.com/calendar/
[mercylounge]: http://mercylounge.com/
[mercyloungecal]: http://mercylounge.com/calendar/
[kennyv]: http://www.allmusic.com/artist/kenny-vaughan-mn0000083212/credits
[bluebird]: http://www.bluebirdcafe.com/
[ryman]: http://ryman.com/
[rymancal]: http://ryman.com/events/calendar
[hatch]: http://hatchshowprint.com/
[isleofprinting]: http://www.isleofprinting.com/
[halloffame]: http://countrymusichalloffame.org/
[jcmuseum]: http://www.johnnycashmuseum.com/
[thefrist]: http://fristcenter.org/
[shelbybridge]: http://www.yelp.com/biz/shelby-street-pedestrian-bridge-nashville
[thepreds]: http://predators.nhl.com/
[greenways]: http://www.greenwaysfornashville.org/
[steamboat]: http://www.generaljackson.com/
[warnerparks]: http://www.nashville.gov/Parks-and-Recreation/Permits-Rentals-and-Reservations/Warner-Parks.aspx
[bellsbend]: http://www.nashville.gov/Parks-and-Recreation/Nature-Centers-and-Natural-Areas/Bells-Bend-Outdoor-Center/Maps-Trails.aspx
[beamanpark]:  http://www.nashville.gov/Parks-and-Recreation/Nature-Centers-and-Natural-Areas/Beaman-Park-Nature-Center/Maps-Trails.aspx
[natcheztrace]: http://www.scenictrace.com/
[corsair]: http://www.corsairartisan.com/
[pattersonhouse]: http://www.yelp.com/biz/the-patterson-house-nashville
[hollandhouse]: http://www.hollandhousebarandrefuge.com/
[boscos]: http://www.yelp.com/biz/boscos-restaurant-and-brewing-co-nashville
[blackstone]: http://www.yelp.com/biz/blackstone-restaurant-and-brewery-nashville
[blackabbey]: http://www.yelp.com/biz/the-black-abbey-brewing-company-nashville
[yazoo]: http://www.yelp.com/biz/yazoo-brewing-company-nashville
[jackalope]: http://www.yelp.com/biz/jackalope-brewing-company-nashville
[brownsdiner]: http://www.yelp.com/biz/browns-diner-nashville
[familywash]: http://familywash.com/
[5spot]: http://the5spotlive.com/blog/
[5spotcal]: http://the5spotlive.com/blog/index.php/event-calendar
[stonefox]: http://www.yelp.com/biz/the-stone-fox-nashville
[stonefoxcal]: http://thestonefoxnashville.getn2.it/?
[gerst]: http://www.yelp.com/biz/the-gerst-haus-nashville
[vienerfest]: http://www.vienerfest.com/Menu.html
[taproom]: http://www.yelp.com/biz/12-south-taproom-and-grill-nashville
[musicrow]: http://en.wikipedia.org/wiki/Music_Row
[studiob]: http://studiob.org/
[thepharmacy]: http://thepharmacynashville.com/
[scenecal]: http://www.nashvillescene.com/nashville/CalendarHome/Page
[mastacos]: http://www.yelp.com/biz/mas-tacos-nashville
[otaku]: http://otakusouth.com/
[otakuyelp]: http://www.yelp.com/biz/otaku-south-nashville
[peglegporker]: http://peglegporker.com/
[porkeryelp]: http://www.yelp.com/biz/peg-leg-porker-nashville
[5thandtaylor]: http://www.5thandtaylor.com/
[silo]: http://www.silotn.com/
[etch]: http://www.etchrestaurant.com/
[husk]: http://www.husknashville.com/
[thesouthern]: http://thesouthernnashville.com/
[cityhouse]: http://cityhousenashville.com/
[mickeystavern]: http://mickeystavernnashville.com/
[redbicycle]: http://www.redbicyclecoffee.com/
[highgarden]: http://www.highgardentea.com/
[bettys]: https://www.facebook.com/pages/Bettys-Grill/118955581450294
[tnbrew]: http://www.tnbrew.com/
[partyfowl]: http://partyfowlnashville.com/
[butchertown]: http://www.butchertownhall.com/
[gruhns]: http://guitars.com/
[oprylandhotel]: https://www.google.com/search?q=opryland+hotel&es_sm=119&source=lnms&tbm=isch&sa=X&ei=V3SIVa6POojngwSUzoLYAQ&ved=0CAgQ_AUoAg&biw=1164&bih=616
[steadfast]: http://steadfast.coffee/
[hangover]: http://www.recoveryroomnashville.com/hangover/
[emma]: (http://myemma.com/)
[butcherandbee]: (http://butcherandbee.com/)
[eastnashbeerworks]: (http://www.eastnashbeerworks.com/)
[rosepepper]: (http://www.rosepepper.com/)
[treehousenashville]: (https://treehousenashville.com/)
[marathon]: (https://www.marathonmusicworks.com/)
[pepperfire]: (https://www.pepperfirehotchicken.com/)
[twotenjack]: (https://twotenjack.com/)
",12,12,5,1,food,"[bbq, beer, downtown, food, music, nashville, visitor-guide]",72
AzharRivaldi,ResepMakanan,,https://github.com/AzharRivaldi/ResepMakanan,https://api.github.com/repos/ResepMakanan/AzharRivaldi,Aplikasi Resep Makanan - Android Studio,"# ResepMakanan
Aplikasi Resep Makanan - Android Studio

# Tutorial Build with Android Studio
https://youtu.be/PX15pj-aHPU

# Tutorial Build with Step by Step
https://rivaldi48.blogspot.com/2020/06/Tutorial-Membuat-Aplikasi-Resep-Makanan-dengan-Android-Studio.html

<img src=""https://1.bp.blogspot.com/-5E5-fr5w5js/Xu2ZOl-l8sI/AAAAAAAAHZA/lIM9Rby157krFWnI_V0OGwidizTWqW6xQCLcBGAsYHQ/s1600/hihi.png"" data-canonical-src=""https://1.bp.blogspot.com/-5E5-fr5w5js/Xu2ZOl-l8sI/AAAAAAAAHZA/lIM9Rby157krFWnI_V0OGwidizTWqW6xQCLcBGAsYHQ/s1600/hihi.png"" style=""max-width:100%;"">

****If you use the Source Code, please make sure to credit and backlink to [Azhar Rivaldi](https://rivaldi48.blogspot.com/)***

## üëá Click For Support Me :
<a href=""https://sociabuzz.com/azharrvldi_/donate""> 
<img src=""https://github.com/AzharRivaldi/AzharRivaldi/blob/master/Support%20Here.png"" width=""200"" height=""200""></a>

## üìÑ License

```
Copyright (C) Azhar Rivaldi

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

```
",12,12,2,0,food,"[azharrivaldi, fastandroidnetworking, food, food-app, food-ordering, food-products, resep, resepmakanan]",72
Meule-Corporation,raclette,Meule-Corporation,https://github.com/Meule-Corporation/raclette,https://api.github.com/repos/raclette/Meule-Corporation,,"# raclette

## Requirements

Use `nvm use` to have the good Node.js version

## Build Setup

```bash
# install dependencies
$ npm install

# serve with hot reload at localhost:3000
$ npm run dev

# build for production and launch server
$ npm run build
$ npm run start

# generate static project
$ npm run generate
```

For detailed explanation on how things work, check out the [documentation](https://v3.nuxtjs.org/getting-started/bridge).

## Special Directories

You can create the following extra directories, some of which have special behaviors. Only `pages` is required; you can delete them if you don't want to use their functionality.

### `assets`

The assets directory contains your uncompiled assets such as Stylus or Sass files, images, or fonts.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/assets).

### `components`

The components directory contains your Vue.js components. Components make up the different parts of your page and can be reused and imported into your pages, layouts and even other components.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/components).

### `layouts`

Layouts are a great help when you want to change the look and feel of your Nuxt app, whether you want to include a sidebar or have distinct layouts for mobile and desktop.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/layouts).


### `pages`

This directory contains your application views and routes. Nuxt will read all the `*.vue` files inside this directory and setup Vue Router automatically.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/get-started/routing).

### `plugins`

The plugins directory contains JavaScript plugins that you want to run before instantiating the root Vue.js Application. This is the place to add Vue plugins and to inject functions or constants. Every time you need to use `Vue.use()`, you should create a file in `plugins/` and add its path to plugins in `nuxt.config.js`.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/plugins).

### `static`

This directory contains your static files. Each file inside this directory is mapped to `/`.

Example: `/static/robots.txt` is mapped as `/robots.txt`.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/static).

### `store`

This directory contains your Vuex store files. Creating a file in this directory automatically activates Vuex.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/store).
",11,11,3,34,food,"[food, hacktoberfest, nuxt, raclette, vue]",72
ahmeriqbal7aa,food_app,,https://github.com/ahmeriqbal7aa/food_app,https://api.github.com/repos/food_app/ahmeriqbal7aa,Food App with Admin Panel using Provider,"# food_app
```
A new Flutter-Firebase application.
```

## Description
- Place your own ```google-services.json``` file into your app's ```/android/app``` folder.

## Learning
- Google Map
- Google Pay
- Google Auth
- Get Current Location
- State Management using Provider

# Screenshots

<img src=""https://user-images.githubusercontent.com/73339220/153131120-8ef0b038-087f-4ad5-b0a5-ef2586536079.jpg"" width=300 /> <img src=""https://user-images.githubusercontent.com/73339220/153131135-3c7d80f9-19ca-4d5b-bc48-efbf6f573eeb.jpg"" width=300 />
<img src=""https://user-images.githubusercontent.com/73339220/153131446-9278edfb-fd06-40ad-96c6-f5f126479f95.jpg"" width=300 /> <img src=""https://user-images.githubusercontent.com/73339220/153131557-13877e1f-ed60-4f8a-9268-9f05357ef44d.jpg"" width=300 />
<img src=""https://user-images.githubusercontent.com/73339220/153131573-c14c4d4b-9205-4b0b-b3b6-2bc297d0eb76.jpg"" width=300 /> <img src=""https://user-images.githubusercontent.com/73339220/153131683-c220cc57-b1d7-4212-9ddc-8fd990ec5687.jpg"" width=300 />
<img src=""https://user-images.githubusercontent.com/73339220/153131659-936332e6-21e9-40b6-84d7-0dcfbde2c367.jpg"" width=300 /> <img src=""https://user-images.githubusercontent.com/73339220/153131791-f2ec5a98-512f-4082-844d-55ed8a6a298e.jpg"" width=300 />
<img src=""https://user-images.githubusercontent.com/73339220/153131821-4b3a01d3-2e76-4316-873b-ff3eab031a63.jpg"" width=300 /> <img src=""https://user-images.githubusercontent.com/73339220/153131873-24d63b1c-18a7-4114-9aaa-c78e5c4b53c1.jpg"" width=300 />
<img src=""https://user-images.githubusercontent.com/73339220/153131798-2d9d8952-4c4c-4fed-9865-3a1b12ccf6ea.jpg"" width=300 /> <img src=""https://user-images.githubusercontent.com/73339220/153131864-d7659efe-cd2e-4cd5-952f-76448ac5f2ef.jpg"" width=300 />

## Getting Started
For help getting started with Flutter, view our
[online documentation](https://flutter.dev/docs), which offers tutorials,
samples, guidance on mobile development, and a full API reference.",11,11,1,0,food,"[admin, app, authentication, dart, firebase, flutter, flutter-app, flutter-example, flutter-firebase, food, food-app, google, panel, provider]",72
Tkd-Alex,Garcon-Restaurant-Manager,,https://github.com/Tkd-Alex/Garcon-Restaurant-Manager,https://api.github.com/repos/Garcon-Restaurant-Manager/Tkd-Alex,Gar√ßon - Manager application for restaurant,"![GarconLogo](/garcon-documentation/logoGarcon_small.png) ![QRCode](/garcon-documentation/expoqrcode.png)

### Gar√ßon-Restaurant-Manager - Manager application for restaurant. <br />
**Autore**: [Alessandro Maggio](https://www.linkedin.com/in/aalessandromaggio/) // *Mat: X81000134* // [@Tkd-Alex](https://github.com/Tkd-Alex)

L'applicazione permette di facilitare le prenotazioni all'interno di un ristorante. Fornendo un'interfaccia semplice e intutiva, offrendo una visione a 360¬∞ degli ordini in corso a tutti gli enti presenti, Gar√ßon si dimostra un'ottimo sostituto a carta e penna.

## Frontend (ReactNative):
La documentazione relativa al lavoro svolto su react native √® presente nel [README.md](/garcon-react-native/README.md) posto nella cartella *garcon-react-native*.

## Backend (nodeJS):
La documentazione relativa al lavoro svolto su nodeJS e mongoDB √® presente nel [README.md](/garcon-backend/README.md) posto nella cartella *garcon-backend*.

## Test e demo:
L'applicazione √® raggiungibile tramite [Expo](https://expo.io/@tkd-alex/garcon-react-native) e contiene gi√† un preset di dati.

### Utenti demo:

| Mail | Password | Admin | Ristorante | Ruolo |
| :-------- | :-------- | :-------- | :-------- | :-------- |
| mariorossi@gmail.com | mariorossi | Y | Delizie del Palato | Proprietario |
| bianchi@gmail.com | bianchi | Y | RistoranteVeneto | Proprietario |
| mariafloramo@gmail.com | maria | N | RistoranteVeneto | Cameriere |
| francesco@gmail.com | ciccio | N | Delizie del Palato | Cameriere |
| gabriele@gmail.com | gabriele | N | Delizie del Palato, RistoranteVeneto | Cameriere |

### Test effettuati:
| Device | Sistema Operativo | Problemi riscontrati |
| :-------- | :-------- | :-------- |
| Meizu U20 | Android 6.0.1 | Lentezza in alcune operazioni |
| iPhone 5S | iOS 10.2.1 | |
| Nexus 7 (Genymotion) | Android 6.0.1 | |
| Samsung Galaxy S6 | Android 7.0.0  | |
| Wiko Ridge 4G | Android 5.0.2 | Il logo non viene caricato. Lentezza in alcune operazioni |
| Moto G 3th | Android 6.0.1 | Il logo non viene caricato. Lentezza in alcune operazioni |

L'applicazione √® disponibile per qualunque test, qualora si volesse utilizzare qualche funzionalit√† non ancora implementata √® possibile utilizzare direttamente le api raggiungibili all'indirizzo [http://188.213.170.165:3000/api](http://188.213.170.165:3000/api)
",11,11,2,0,food,"[backend, cross, drink, food, javscript, manager, native, node, nodejs, order, platform, react, restaurant]",72
IBPA,LOVE,IBPA,https://github.com/IBPA/LOVE,https://api.github.com/repos/LOVE/IBPA,Learning Ontologies Via Embeddings,"# LOVE: Learning Ontologies Via Embeddings

Food ontologies require significant effort to create and maintain, as it involves manual and time-consuming tasks. In this project, we propose a semi-supervised framework for automated ontology learning from an existing ontology scaffold by using word embeddings.

![Figure 1](/../images/Figure%201.jpg?raw=true)

## 1. Directories

Following is a short description of each directory under the root folder.

* <code>[config](./config)</code>: Contains all configurations files.
* <code>[data](./data)</code>: Contains all data files.
* <code>[hpc_scripts](./hpc_scripts)</code>: Scripts for running the code on HPC.
* <code>[managers](./managers)</code>: Contains all python modules.
* <code>[output](./output)</code>: All output files go here.
* <code>[utils](./utils)</code>: Other utility files used in the project go here.

## 2. Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.

### 2a. Prerequisites

In addition to Python 3.6+, you can run the following command to install the required Python libraries.

```
pip install -r requirements.txt
```

Python package ```pattern``` depends on ```libmysqlclient-dev```. For Debian / Ubuntu, install like following.

```
sudo apt-get install libmysqlclient-dev
```

### 2b. Downloading Data
You need to download the GloVe 6B pre-trained weights. Following command downloads the word embeddings in GloVe format and converts them to Word2Vec compatible format.
```
cd root/data/pretrain
./download_convert_glove.sh
```

### 2c. Running

Configuration files use a general path `/path/to/project/root/directory` for compatibility. Please update these general paths to match your local computer. You can run the following script to do so.

```
# Update to local path.
./update_paths.sh

# You can optionally revert to the original path by running the following command.
./update_paths.sh revert
```

You can run all the code by running the following script. Please refer to the in-line comments of the script for details.

```
cd managers
python parse_foodon.py
cd ..
./run.sh
```

## 3. Authors

* **Jason Youn** @ [https://github.com/jasonyoun](https://github.com/jasonyoun)
* **Tarini Naravane** @ [https://github.com/nytarini](https://github.com/nytarini)

## 4. Contact

For any questions, please contact us at tagkopouloslab@ucdavis.edu.

## 5.Citation

Paper is under review. This section will be updated once paper is published.

## 6. License

This project is licensed under the GNU GPLv3 License. Please see the <code>[LICENSE](./LICENSE)</code> file for details.

## 7. Acknowledgments

* We would like to thank the members of the Tagkopoulos lab for their suggestions.
",10,10,3,3,food,"[artificial-intelligence, food, machine-learning, ontology, word-embedding, word2vec]",72
Stormwind99,FoodFunk,,https://github.com/Stormwind99/FoodFunk,https://api.github.com/repos/FoodFunk/Stormwind99,"Minecraft mod: What is that funky smell in my backpack? Food spoils over time unless preserved. Configure any item to rot, any container to preserve items.","# Food Funk

Minecraft mod: What is that funky smell in my backpack? Food spoils over time unless preserved. Configure any item to rot, any container to preserve items.

* Food [rots](https://github.com/Stormwind99/FoodFunk/wiki/Food-Spoiling-(Rot)) over time.  Make any item [rot](https://github.com/Stormwind99/FoodFunk/wiki/Food-Spoiling-(Rot)) into any other item (or none at all) over a specified time (via [configuration](https://github.com/Stormwind99/FoodFunk/wiki/Configuration)).
* Preserving containers (the [Esky](https://github.com/Stormwind99/FoodFunk/wiki/Esky) and [Freezer](https://github.com/Stormwind99/FoodFunk/wiki/Freezer)) slow or stop rot a specified amount.  Add more via [configuration](https://github.com/Stormwind99/FoodFunk/wiki/Configuration).
* Default [configuration](https://github.com/Stormwind99/FoodFunk/wiki/Configuration) entries support vanilla Minecraft and [other food mods](https://github.com/Stormwind99/FoodFunk/wiki/Compatibility). 
* Any item from any mod can be [specified](https://github.com/Stormwind99/FoodFunk/wiki/Configuration), and specifiers include support for metadata and ore dictionary names.

Requires [Wumple Util Library](https://github.com/Stormwind99/WumpleUtil).

## Screenshots

![Rot tooltip](https://raw.githubusercontent.com/Stormwind99/FoodFunk/master/other/screenshots/tooltip.png)
![Freezer and Esky](https://raw.githubusercontent.com/Stormwind99/FoodFunk/master/other/screenshots/coldchests.png)

## Credits

* [Stormwind99](https://github.com/Stormwind99) - author
* [Choonster](https://github.com/Choonster) - for CapabilityContainerListener, etc
* [DYColdWind](https://github.com/DYColdWind) and others for translations
* [Funwayguy](https://github.com/Funwayguy), [GenDeathrow](https://github.com/GenDeathrow), [thislooksfun](https://github.com/thislooksfun), [TimbuckTato](https://github.com/TimbuckTato) - authors of discontinued [EnviroMine](https://minecraft.curseforge.com/projects/enviromine) mod
   * Inspired by the food rot feature - thanks to the authors!
   * Some item and block textures, text, and code snippets 
   * If you want food rot for 1.7.10 or earlier, consider [EnviroMine](https://minecraft.curseforge.com/projects/enviromine) - it's lots of fun!
",10,10,4,47,food,"[food, minecraft, minecraft-forge, minecraft-mod]",72
harlexkhal,Foodipy,,https://github.com/harlexkhal/Foodipy,https://api.github.com/repos/Foodipy/harlexkhal,"Search for food, recepies, and full detailed information on how to prepare them. ","# Foodipy | JavaScript Capstone

> This is a group project built in our second module of our curriculum at microverse. its a web application for listing all of the food sources and how to prepare them, using a video and an instruction guide
![screenshot](branding/demo.png)

Our goal here is to Build an application that calls from a large data set of food from an API and also integrate some user involvement where you can like and comment on your favorite meal. click [here](https://harlexkhal.github.io/Foodipy/) to see deployed live version

### Features implemented so far are:

- Responsive HTML page
- Integrated webpack
- Integrated [MealDB API](https://www.themealdb.com/api.php)
- Integrated [Involvement API](https://www.notion.so/Involvement-API-869e60b5ad104603aa6db59e08150270)
- Addition of unit test using Jest.

## Built With

- Lighthouse (An open-source, automated tool for improving the quality of web pages. It has audits for performance, accessibility, progressive web apps, SEO and more).
- Webhint (A customizable linting tool that helps you improve your site's accessibility, speed, cross-browser compatibility, and more by checking your code for best practices and common errors).
- Stylelint (A mighty, modern linter that helps you avoid errors and enforce conventions in your styles).
- ESlint (A mighty, modern linter that helps you avoid errors and enforce conventions in JavaScript codes)
- Webpack (Used for bundling JavaScript files for usage in a browser)
- Jest (A JavaScript testing framework designed to ensure correctness of any JavaScript codebase. It allows you to write tests with an approachable, familiar and feature-rich API that gives you results quickly.)

To get a local copy up and running follow these simple example steps.

### Prerequisites

The basic requirements for building the executable are:

- A working browser application (Google chrome, Mozilla Fire fox, Microsoft edge ...)
- VSCode or any other equivalent code editor
- Node Package Manager (For installing packages like Lighthous, webhint & stylelint used for checking for debugging bad codes before deployment)

# Getting Started

#### Cloning the project

```
git clone  https://github.com/harlexkhal/Foodipy <Your-Build-Directory>
```

## Getting packages and dependencies
To get all package modules required to build the project run:
```
npm install
```
every package module required to build the project is listed in the package.json file. this is used as a reference to get all dependencies.

## Building 

To build the project run:
```
npm run build
```
after you run this sucessfully you'd locate the build from in the ```dist``` folder located from the parent directory of the project. two files are being built which are, ```core.js and index.html```

## Running

To run the program on a browser through a server run this command in your cli
```
npm start
```
This should open the page in your localhost on port 8080. then you'd be able to view the built page generated using webpack.

## Unit-Testing

You can find each unit test cases in the ```__Testbase__``` folder located in the parent source directory of the project. you can create your own custom unit test and test it by running
```
npm run test
```
This should run all unit test found in the ```unit.test.js``` from the ```__Testbase__``` folder.

## License

All source code files are licensed under the permissive zlib license
(http://opensource.org/licenses/Zlib) unless marked differently in a particular folder/file.

## Author
- **Mnemba Chambuya** -  [github](https://github.com/mnekx), [linkedin](https://linkedin.com/in/mnemba-chambuya), [twitter](https://twitter.com/MnembaChambuya)
- **Alexander Oguzie-Ibeh** - [github](https://github.com/harlexkhal), [linkedin](https://www.linkedin.com/in/alexander-oguzie-ibeh-776814164), [twitter](https://twitter.com/harlexkhal)
",10,10,1,0,food,"[design-patterns, food, foodapp, javascript, spices]",72
AwesomeCities,awesome-kassel,AwesomeCities,https://github.com/AwesomeCities/awesome-kassel,https://api.github.com/repos/awesome-kassel/AwesomeCities,Kassel is :100:% awesome! :beers:üçæü§ò,"# Awesome Kassel

> A curated list of Kassel's awesomeness

## Coffee

- [The Coffee Store](https://goo.gl/maps/fKrwb7CpJjy)
- [Caf√© Lange](https://goo.gl/maps/K9EhjRwYaok)

## Lunch

- [Bar La Bodega](https://goo.gl/maps/obEvM3hech12)
- [Chevy American Diner](https://goo.gl/maps/7w273s8VqR72)
- [Marivos](https://goo.gl/maps/yYMy9bH2is92)
- [Enchilada Kassel](https://goo.gl/maps/NNKQ3u1SUFL2)
- [Pizzeria Boys and Girls](https://goo.gl/maps/HtcopdEs6yG2)
- [Ristorante Pinocchio](https://goo.gl/maps/hQVwVhKMoH32)
- [Tat-Urfa](https://goo.gl/maps/hBZvEDrpV9G2)
- [Take Hallali Burger](https://goo.gl/maps/QY6M6sqqkE12)
- [Tokyo Running Sushi](https://goo.gl/maps/LzymbMvU8qv)
- [Zum Gl√ºcklichen Bergschweinchen](https://goo.gl/maps/Ybx7iKtLy2U2)

## Beverages

- Nothing here yet, you know some cool location? Add it here!

## Restaurants

- [China Restaurant Peking](https://goo.gl/maps/Zm5chQnCoVC2)
- [Kaiser Garden](https://goo.gl/maps/NV2BRXrXaq42)
- [Kom√∂dienstadl - Bavarian Restaurant](https://goo.gl/maps/tEV94NULiyG2)
- [Sabor Flamenco](https://goo.gl/maps/pgwHzWfysqN2)
- [Scenario](https://goo.gl/maps/4uVRZHGnVLq)
- [Abessina](https://goo.gl/maps/dwW4LbJDwuT2)

## Food Markets

- [Markthalle Kassel](https://goo.gl/maps/G6JEffpZKo52)

## Handcrafted Food

- Nothing here yet, you know some cool location? Add it here!

## Bars

- [Bolero](https://goo.gl/maps/Jh8kcuYP6L52)
- [Fiasko](https://goo.gl/maps/vcN99gjn5yt)
- [FES Musikbar](https://goo.gl/maps/GWEWY8439LD2)
- [Lolita Bar](https://goo.gl/maps/Uxi3YX6bLYH2)
- [Maya Coba](https://goo.gl/maps/bav8M1hfMzn)
- [The Shamrock Irish Pub](https://goo.gl/maps/31Zjwf1Bwh42)
- [Yes Bar & Lounge](https://goo.gl/maps/v5kGhcYRtgu)
- [Bar Seibert](https://goo.gl/maps/f227zGYa5rn)
- [Mutter](https://goo.gl/maps/egW5bzYJ2bS2)
- [JWD](https://goo.gl/maps/EUmnTs128uJ2)

## Nightlife

- [A.R.M.](https://goo.gl/maps/xUwkuLCXYe82)
- [Joe's Garage](https://goo.gl/maps/QXkF9jurNPD2)
- [Musikpark A7](https://goo.gl/maps/1n5NdWWpBr92)
- [The Hemingway Club](https://goo.gl/maps/3ZYs7w5RBNJ2)
- [York](https://goo.gl/maps/y8CjwB76qho)

## Shops

- [Wild Wood Gallery & Store](https://goo.gl/maps/5nnjpxm7d7K2)

## Thrills

- [EXITgameKassel](https://goo.gl/maps/wVqZBayR5qF2)
- [Kletterwald Kassel (Climbing Woods)](https://goo.gl/maps/z9qPA8ec8w42)
- [Paintball Action Kassel](https://goo.gl/maps/3o9rQ9xqGdE2)
- [Lasergame Kassel](https://goo.gl/maps/nFVcXLwDZGP2)

## Relaxing

- [Bergpark Wilhelmsh√∂he](https://goo.gl/maps/LPDaaZihJCt)
- [G√∂theanlage](https://goo.gl/maps/Q1Sy2UTgyGz)
- [Kurhessen Therme](https://goo.gl/maps/TiP2iJ94mQ92)
- [Staatspark Karlsaue](https://goo.gl/maps/jiGbxUWTwUx)

## Made in Kassel

- Nothing here yet, you know some cool location? Add it here!

## Locations

- [Bugasee](https://goo.gl/maps/zDQPd6amNKp)
- [Friedrichsplatz](https://goo.gl/maps/L2nqQn82VGq)
- [Herkules Kassel](https://goo.gl/maps/r36yi1u3xCu)
- [Orangerie Kassel](https://goo.gl/maps/fRF8MfMEiBE2)
- [L√∂wenburg Kassel](https://goo.gl/maps/J3GJP8io2MG2)
- [Bismarckturm](https://goo.gl/maps/DX7Eq7w2sFP2)
- [Kleiner Herkules](https://goo.gl/maps/a39SCu1ETwK2)
- [Hirzstein](https://goo.gl/maps/WH3rq2mtz7x)

## Contributing

You're very welcome to participate in this list! Please make sure you read the [contribution guidelines](Contribution.md) and [code of conduct](code-of-conduct.md) before you submit a pull request.

Also be sure that not to add entries that are mediocre or only good. We want awesome!

## Discord Channel

There is a discord chat in case you want to stay connected.
- [AwesomeCities Discord](https://discord.gg/VH9VCXF)

## License

[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)
",10,10,4,2,food,"[awesome, awesome-list, beer, burger, chicken, coffee, events, food, kassel, lunch, party, sushi]",72
b1f6c1c4,c,,https://github.com/b1f6c1c4/c,https://api.github.com/repos/c/b1f6c1c4,c for cook: Ê†πÊçÆÈ£üÊùêÂàóË°®Ëá™Âä®Êé®ËçêËèúË∞±,"# c-for-cook

> Ê†πÊçÆÈ£üÊùêÂàóË°®Ëá™Âä®Êé®ËçêËèúË∞±

- È£üÊùêÊù•Ëá™ https://monday.com/ ÔºàÈúÄÊâãÂ∑•Áª¥Êä§ÂàóË°®Ôºâ
- ËèúË∞±Êù•Ëá™ http://www.recipepuppy.com/
- ÊØèÊ¨°Âà∑Êñ∞È°µÈù¢Ëá™Âä®Êé®Ëçê12ÈÅìÊ≠£È§êÂíå2ÈÅìÊñπ‰æøËèúÂìÅ
- Êó†‰ªª‰ΩïÂπøÂëäÔºåÊó†‰ªª‰ΩïJavaScript
- ‰∏≠Ëã±ÊñáÂØπÁÖßÔºåÂ¢ûÂä†ËØçÊ±áÈáè

## Usage

Note: You may want to leverage the [pre-built docker image](https://hub.docker.com/r/b1f6c1c4/c-for-cook)

1. ÂàõÂª∫`secret.json5`:

    ```json5
    {
      monday: {
        apiKey: ""..."", // Â∑¶‰∏ãËßíÂ§¥ÂÉè->Admin->API
        bId: ..., // ÊâìÂºÄÂØπÂ∫îÁöÑboardÔºå‰ªéURL‰∏≠ÂèØ‰ª•Áõ¥Êé•ÊâæÂà∞
        cIds: { // ËßÅ‰∏ãÊñπËØ¥Êòé
          key: '...',
          category: '...',
          location: '...',
          expire: '...',
          quantity: '...',
          genre: '...',
          tier: '...',
        },
      },
      translate: { // Google Translate API
        apiKey: ""..."",
      },
    }
    ```

    ÂÖ≥‰∫é`cIds`ÔºöÂú® https://monday.com/developers/v2/try-it-yourself ÊâßË°å‰ª•‰∏ãÊü•ËØ¢Ôºö
    ```
    {
        boards(ids: ...) { // Â°´ÂÖ•bId
            columns {
                id
                title
            }
        }
    }
    ```

1. ÊâßË°å`npm i -g nodemon`
1. ÊâßË°å`npm i`
1. ÊâßË°å`npm start`
1. ËÆøÈóÆ`http://localhost:3000`
",10,10,3,0,food,"[cookbook, eating, food, recipes]",72
jctestud,food-reverse-engineering,,https://github.com/jctestud/food-reverse-engineering,https://api.github.com/repos/food-reverse-engineering/jctestud,Experiment to determine a recipe from the nutrition facts label,"# food-reverse-engineering

In this experiment, I tried to find the (missing) ingredient percentages in a recipe by using the nutrition facts label which is required on most packaged foods. My intuition was that this was enough data to try and find the actual recipe.

full story at: https://medium.com/@jctestud/food-ingredient-reverse-engineering-through-gradient-descent-2a8d3880dd81
",10,10,0,0,food,"[data-science, food, pytorch, reverse-engineering]",72
vrublack,TacoShell,,https://github.com/vrublack/TacoShell,https://api.github.com/repos/TacoShell/vrublack,"Calorie counter for the command-line with 8,000 food items (USDA)","# Introduction

This command-line tool written in Java lets you track what you eat during the day. As there are many commercial website that do exactly that, here are some advantages of TacoShell:

* It is extremely quick to use. Instead of clicking through menus, you can just type `add 340g chicken breast`.

* It works offline which is good from a privacy and reliability standpoint. (To have your data on multiple devices, you can put it in your Dropbox, Onedrive etc. folder so it'll automatically sync.)

* You can modify and extend it all you want. For example, I added code to scrape the website of my university dining hall.


# Setup & Getting Started

I will say that there is a bit of a learning curve to using this app, but be assured that it is super simple once you remember a few commands. Here are a few things to get started:

* The app runs in the console. To make things easier, you can use a `.bat` file under Windows (there's a sample file included in the release) or a `.command` file under Mac OS to change into the directory and call `java -jar TacoShell.jar`
* There are several simple commands to add and remove items or to switch to a different day.
  * `add [quantity] [food]`, eg. add `200g chicken breast`). This searches in the current database (USDA by default for [food]). You can use various units like <i>g, kg, oz, ml, cups</i>... and for some foods also just a number (<i>2 tomatoes</i>). It is even possible to use kcal as your quantity in which case that many calories worth of the food is added.
  * `a [quantity] [food]` does the same but automatically chooses the best match without prompting you.
  * You can also use either `add` or `a` to enter micronutrients, macronutrients or calories directly, such as `a 20mg Vitamin C`, or `a 250 kcal`. You can add multiple ones at once, like `a 20g carbs, 30g fat, 15g protein`.
  * It is possible to use a multiplier in the end of the add command, like `add 30g carbs * 2.5`.
* Use the `report` command to see what you've eaten during the day. You can configure the nutrients to show and their respective units in the file `preferences.ini`. In this file, you can also choose to have the report shown after every command that changes it.

You can type `help` for a list of all commands and a detailed explanation of them.

# Data Sources

Currently, you can choose between the USDA Database and FatSecret API.

* The [USDA Database (also called NDB)](http://ndb.nal.usda.gov/)  is a free and comprehensive food database containing more than 8,000 basic food 
items and also branded food items. The version used in NutritionTracker is derived from Release 26, Abbreviated Version, 
but also contains a metric indicating how common this food is which I calculated using data from What We Eat In America (a health study)
in order to improve search results. 

* The FatSecret API lets you have access to the database of [FatSecret.com](https://www.fatsecret.com). It is much larger than the USDA db, and 
the description of the entries tend to be cleaner and less verbose. You have to sign up for your own API key, though.
Unfortunately, the country-specific FatSecret-databases are not supported.

* You can also define your own food items which are stored locally.


# tacoshell.io

I use GWT to compile many classes from this project to javascript for my website [tacoshell.io](http://nutrition-tracker.appspot.com), so it's no surprise that both behave fairly similarly. 

I have decided not to release the website's source for now.
",10,10,2,0,food,"[calories, food, nutrition, tracking, usda]",72
Yutong-Zhou-cv,Bento800_Dataset,,https://github.com/Yutong-Zhou-cv/Bento800_Dataset,https://api.github.com/repos/Bento800_Dataset/Yutong-Zhou-cv,[ACMMM 2022üéà] The first manually annotated synthetic bento dataset for novel aesthetic box lunch presentation design.,"# <p align=center>Bento800üç±</p>

![Figure from paper](Overview.png)

## üéë News
* [23/03/06] **Bento800üç±_Textüìù** is released.
* [22/10/22] [**Paper**](https://dl.acm.org/doi/10.1145/3552485.3554935) and **Bento800üç± (Version1.0)** are released.
* [22/09/13] Add Bento800 creation process.
* [22/08/04] This repo is created.

## üçÄ Overview

**Bento800** is the **first manually annotated** synthetic box lunch presentation dataset for novel **aesthetic box lunch presentation design**.

**Bento800** is composited from **34** single food images in **6** categories: 

<p align=center> Riceüçö(10) ; Fried Chickenüçó(5) ; Salt-grilled Salmonüêü(5) ; Tamagoyakiüßà(6) ; Croquetteüç™(5) ; Fried Shrimpüç§(3) </p>

with **3** different types of food presentations: 

(1) Place fried chicken on rice; 

(2) Place salt-grilled salmon and tamagoyaki on rice; 

(3) Place croquette and fried shrimp on rice, the fried shrimp is on the croquette.

## üå± Dataset Creation Process
### Bento800üç±_Textüìù
* Image Details

| Content | Tools | Details|
|  :----: | :----: | :----------|
| Resize | - | Paste images in Bento800 onto a transparent image.|

* Text Description Details

| Content | Tools | Details|
|  :----: | :----: | :----------|
| Text Paraphrasing | [ChatGPT](https://chat.openai.com/auth/login) | Rephrase the above sentences with the template ‚Äú**Rephrase: [Input] with 25 examples**‚Äù and ‚Äú**Rephrase: [Input]**""+""**Please try again**""&times;24.|

### Bento800üç±
* Image Details

| Content | Tools | Details|
|  :----: | :----: | :----------|
| Image Collection | [Google Image](https://www.google.com/imghp) | These high-resolution images contain **at least one complete food item**.|
| Remove Background | [removebg](https://www.remove.bg/) | Remove the background and unnecessary parts.|
| Image Compositing | - | Manually composite + random data augmentation.|

* Annotation Details

| Content | Tools | Details|
|  :----: | :----: | :----------|
| Modal Segmentation | [Dataloop](https://dataloop.ai/) | Manually marked visible parts and occluded parts.|
| Food Item Labels & Bounding Box & Ordering List | [VGG Image Annotator (VIA)](https://www.robots.ox.ac.uk/~vgg/software/via/via_demo.html) | Manually annotated several food item attributes.|




## üéÅ Download

| Content | Size | Files | Format | Details |
| :---- |  :----:  |  :----: | :----: | :----------|
| **Bento800üç±_Textüìù** [[Google Drive](https://drive.google.com/drive/folders/1_VvAbIzeuVew4fa98CcE11mB9SoAI3q-?usp=sharing)] [[Tencent Cloud](https://share.weiyun.com/dqrudYM8)]| - | 1600 | | Main Folder|
| &boxvr;&nbsp; [Image](https://drive.google.com/drive/folders/1hNPdDelpsuLvx-Ts5dGWjPBKidgRvjNj?usp=sharing) | 216MB | 800 | PNG | Food images from Bento800 of size 600&times;600
| &boxvr;&nbsp; [Text](https://drive.google.com/drive/folders/1I7xcVwWHvc0T8yPw-_2XKlnZRm3tMnW-?usp=sharing) | 793 KB | 800 | TXT | 9 descriptions for each image in Bento800

| Content | Size | Files | Format | Details |
| :---- |  :----:  |  :----: | :----: | :----------|
| **Bento800üç±v1.0** [[Google Drive](https://drive.google.com/drive/folders/11BoD8z5TmhwSfdo9juiGbYsJnGQwrRx0?usp=sharing)] | - | 872 | | Main Folder|
| &boxvr;&nbsp; [S1_collection](https://drive.google.com/drive/folders/1kc7d1BHvLqx2C0zuI6ryrBjePdPtDwm5?usp=sharing) | 3.26 MB | 34 | JPG | 34 food images in 6 categories |
| &boxvr;&nbsp; [S2_removebg](https://drive.google.com/drive/folders/1YW1qGMHdwLeU_HjBREm4VMmVYVaF-8gA?usp=sharing) | 2.81 MB | 34 | PNG | Remove Background |
| &boxvr;&nbsp; [S3_train](https://drive.google.com/drive/folders/1FQ7VbOMQfi-0xFb2wjgsI8PV4VS8C8Jy?usp=sharing) | 410 MB | 766 | PNG | Training images |
| &boxvr;&nbsp; [S3_val](https://drive.google.com/drive/folders/1qda3UC653ACx7mY3DR45LG-HYu2pBl-N?usp=sharing) | 18.8 MB| 34 | PNG | Testing images |
| &boxvr;&nbsp; [S4_segmentation](https://drive.google.com/drive/folders/1k-d7ABYK1FTDLiTUA3XQLa-HqKV64hH6?usp=sharing) | 8.72 MB | 2 | JSON | Semantic Segmentation |
| &boxvr;&nbsp; [S5_annotation](https://drive.google.com/drive/folders/1FtWZWGi533BqWXhojrGfbbBPmdgw63Vh?usp=sharing) | 403 KB | 2 | CSV | Simple text descriptions + Ordering id + Bounding Box + Food item labels|

## üìö Feedback

Please fill out the [Bento800 Dataset Feedback Form](https://forms.gle/jqS1PEKwmrCpqZL76).

I  would greatly value your thoughts, suggestions, concerns or problems.

## ‚≠ê Citation

#### <p align=center>‚ÄúWe eatüç¥ first with our eyesüëÄ~ ‚Äù</p>

If you find this dataset helpful for your research, please cite it as below:

```bibtex

@inproceedings{zhou2022able,
  title={ABLE: Aesthetic Box Lunch Editing},
  author={Zhou, Yutong and Shimada, Nobutaka},
  booktitle={Proceedings of the 1st International Workshop on Multimedia for Cooking, Eating, and related APPlications},
  pages={53--56},
  year={2022}
}

```
",9,9,3,0,food,"[box-lunch-generation, dataset, food, food-ordering]",72
travishorn,diabetes-food-database,,https://github.com/travishorn/diabetes-food-database,https://api.github.com/repos/diabetes-food-database/travishorn,Food information for people with diabetes.,"# Diabetes Food Database

Food information for people with diabetes. Visit the website at
https://dfdb.netlify.com/ and search for a food item.

## Contributing

The infrastructure for this app is there, but the database itself is extremely
lacking. **Pull requests are welcome!** Please look at modifying
`src/assets/database.json`.

When adding a new food, please include the following properties:

- **name** - The name of the food. Will be used for searching. Must be unique,
  singular (smoothie instead smoothies) and all lowercase (carrot instead of
  Carrot).
- **displayName** - A prettier name of the food. If the name is sugar, the
  displayName might be Sugar (with capitalization).
- **alternateNames** - An array of names people might also use when searching
  for this food. Should also be singular and all lowercase.
- **level** - A number from 1 to 5.
  - 1 = Avoid - Diabetic people should stay away from this food.
  - 2 = Caution - This food can be eaten in moderation or under certain
    conditions.
  - 3 = Okay - Neutral. No significant positive or negative health effects.
  - 4 = Good - Food that is good for a diabetic person to eat.
  - 5 = Great - Foods at this level are among the healthiest options.
- **explanation** - A reason why this food is or is not healthy.
- **suggestions** - Actions to take regarding this food. Alternatives to this
  food if it is unhealthy.

## Built with

- [Freepik - Flaticon](https://www.flaticon.com) - Blood drop icon
- [Fuse](http://fusejs.io/) - Fuzzy text search
- [Hero Icons](https://heroicons.com/) - Search icon
- [Netlify](https://netlify.com) - Hosting the client and the database API
- [Pluralize](https://github.com/blakeembrey/pluralize) - Helping normalize
  search queries
- [Tailwind CSS](https://tailwindcss.com/) - Styling
- [Vue, Vue Router, and Pinia](https://vuejs.org) - User interface

## License

MIT License

Copyright (c) 2022 Travis Horn

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
",9,9,3,3,food,"[data, database, diabetes, diabetic, food, food-safety, information, medical]",72
jzarca01,node-ubereats,,https://github.com/jzarca01/node-ubereats,https://api.github.com/repos/node-ubereats/jzarca01,A work in progress API for Uber Eats,"# node-ubereats

A _work in progress_ API for Uber Eats

## Installation

```shell
npm install --save node-ubereats
```

## Usage

```javascript
const UberEats = require('node-ubereats');
const uber = new UberEats({
  latitude: 48.8563148,
  longitude: 2.3227369,
  formattedAddress: '16 Rue de Rochechouart, 75009 Paris'
});
```

## Methods

### Get restaurants

```javascript
uber.getRestaurants();
```

### Search for restaurants

```javascript
uber.searchRestaurants((searchQuery = 'Indian'));
```

### Get store details

```javascript
uber.getStoreDetails(storeUuid);
```
",9,9,2,0,food,"[api-wrapper, food, nodejs, uber-api]",72
EricTheAI,smart-diet-app,,https://github.com/EricTheAI/smart-diet-app,https://api.github.com/repos/smart-diet-app/EricTheAI,A fitness app that tracks your diet easily and give you meal recommendations to get fit & healthy.,"This is a health & fitness app that tracks your diet and give you meal plans which best fit you.


## Server

### Backend API service
We use express, a famous Node.js web framework, as our backend server, hosted on an Azure virtual machine. The backend serves as a middle man between the database and a client. Express is a minimal and flexible web framework that uses middleware to extend it's functionality, hence gives us much space to customize the structure of the application. Usually a web app basically consists of three parts, view, router, and model.
Because we only need a API server, we don't need view here. So all models are in ""server/models"" directory, handling interactions between server and the database. And routers in ""server/routes"", mapping a request from a client to an action in the server. 

### Food detection service
Apart from our web API server, we've decided to use another server to do food detection. The main reason is that the tools we used for machine learning are all written in python, and it's better to seperate the heavy computation process from normal database requests.

### Database
We use Azure's CosmosDB to save our user data, to be specific, it's DocumentDB, a key-value document database but with SQL-like queries. We chose to use a key-value database because it's more flxible in data structures and don't have to worry about changing schemes in the demo stage. We have four types of document, which are user, userprofile, food, and record.

### Storage
Apart from DocumentDB, we also use Storage to save a large block of data like images.
",9,9,4,4,food,"[deep-learning, diet-safety, eating-plan, fitness-app, food, health, machine-learning]",72
Marwan01,food-converter,,https://github.com/Marwan01/food-converter,https://api.github.com/repos/food-converter/Marwan01,Cross Platform Mobile App built in React native on a Hackathon night. It allows the user to take a picture of a food item and get instant feedback on the types/amount of workouts you will need to do to burn the calories generated from that food. Demo:,"# FoodConverter

Cross Platform Mobile App built in React native on a Hackathon night. 
It allows the user to take a picture of a food item and get instant feedback on the types/amount of workouts you will need to do to burn the calories generated from that food. 
Demo: https://expo.io/@marwanest1/FoodConverter


![alt text](https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/773/921/datas/gallery.jpg)

![alt text](https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/773/922/datas/gallery.jpg)


Instructions:
Clone the repo and cd in to the folder then execute these two commands:
```
npm install
npm start
```
Finally, use [Expo](https://github.com/expo/expo) to run the app either on your mobile device or on an emulator.
",9,9,3,8,food,"[expo, expo-cli, food, hackathon-night, mobile-app, mobile-development, react-native, workouts]",72
dhardtke,prandium,,https://github.com/dhardtke/prandium,https://api.github.com/repos/prandium/dhardtke,A single-user content management system for organizing recipes built with Deno.,"[![Workflow badge](https://github.com/dhardtke/prandium/actions/workflows/ci.yml/badge.svg)](https://github.com/dhardtke/prandium/actions/workflows/ci.yml)
[![codecov](https://codecov.io/gh/dhardtke/prandium/branch/main/graph/badge.svg?token=SIR9GFWW4V)](https://codecov.io/gh/dhardtke/prandium)

# Prandium

<!--suppress HtmlDeprecatedAttribute -->
<img align=""left"" src=""assets/favicon.svg"" width=""64"" alt=""Logo"" />

Prandium, latin for [lunch](https://en.wiktionary.org/wiki/prandium), is a single-user content management system for organizing recipes.

*WARNING: This software is not ready for production yet as some important features and tests are still missing (although I am personally using it on a
daily basis).*

<br clear=""left""/>

## Features

- Import recipes by URL from websites that use [schema.org](https://schema.org/) JSON-LD microdata
- Keep track of when and how often you cooked a recipe
- Assign tags to each recipe to easily find them later
- Mobile friendly: Responsive, fast and niche features such as keeping your screen active while you are on a recipe page

## Installation

See [Setup](docs/setup.md)

## Screenshots

<table>
   <tr>
      <th>Light (default)</th>
      <th>Dark</th>
   </tr>
   <tr>
      <th colspan=""2"" style=""text-align: center"">Recipe List</th>
   </tr>
   <tr>
      <td>
         <a href=""docs/readme-images/recipe-list/light.webp"">
            <img src=""docs/readme-images/recipe-list/light.thumb.webp"" alt=""recipe list in light mode"">
         </a>
      </td>
      <td>
         <a href=""docs/readme-images/recipe-list/dark.webp"">
            <img src=""docs/readme-images/recipe-list/dark.thumb.webp"" alt=""the dark version of the recipe list"">
         </a>
      </td>
   </tr>
</table>

## Contributing

Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

Please make sure to update tests as appropriate.

Please see [Development](docs/development.md) for information on how to set up your local development environment.

## License

[MIT](https://choosealicense.com/licenses/mit/)

## Acknowledgements

* [Deno: A secure runtime for JavaScript and TypeScript](https://deno.land/)
* [TypeScript](https://www.typescriptlang.org/)
* [tsyringe](https://github.com/microsoft/tsyringe)
* [ESBuild](https://esbuild.github.io/)
* [Oak](https://oakserver.github.io/oak/)
* [deno-sqlite](https://github.com/dyedgreen/deno-sqlite)
* [Peggy](https://github.com/peggyjs/peggy)
* [IntelliJ](https://www.jetbrains.com/idea/)
* [Nextcloud Cookbook](https://github.com/nextcloud/cookbook)
",8,8,2,18,food,"[cms, deno, food]",72
recipyhq,recipy,recipyhq,https://github.com/recipyhq/recipy,https://api.github.com/repos/recipy/recipyhq,Recipy web application. All of it just works.,"
# Recipy

Recipy is the first application to offer customized recipes by reducing food waste.
Indeed, Recipy offers its users the opportunity to discover new recipes based on their tastes,
by consuming locally. Finally, the application allows the user not to worry about his weekly shopping
list, because it is directly generated and integrated into the tools of today and tomorrow.

You can find us at [www.recipy.fr](https://production-recipy.herokuapp.com/)
## Installation

#### Docker Compose
* Follow the instruction : [Docker compose](https://docs.docker.com/compose/install/#install-compose)
###### Ubuntu :
* `sudo systemctl start docker`
* `sudo systemctl enable docker`

#### Rbenv
* Follow the instruction : [rbenv](https://github.com/rbenv/rbenv)
* `rbenv install`
* `gem install bundler`
* `bundle`
#### nvm
* Follow the instruction : [nvm](https://github.com/nvm-sh/nvm)
* `nvm use` (If this doesn't work, try installing [ruby-build](https://github.com/rbenv/ruby-build), don't forget to add it to your bash/zsh with [this](https://github.com/nvm-sh/nvm#bash))
* `nvm alias default $(cat .nvmrc)`
* `npm i -g yarn@1.13.0`
* `yarn`

After that you need to ask us the master.key by e-mail or on Discord.

#### PosgreSQL

* ##### [Ubuntu](https://doc.ubuntu-fr.org/postgresql) then `sudo systemctl disable postgresql`
* ##### [Mac OS](https://medium.com/@Umesh_Kafle/postgresql-and-postgis-installation-in-mac-os-87fa98a6814d)
* ##### [Windows](https://youtu.be/uK4-nUZiOH4)

## Start the project

First you need to start all dockers with `docker-compose up -d`

Don't forget to reset the database at the first launch and after each time you pull :

`bundle exec rake db:reset`
`rake db:create`
`rake db:migrate`

Then enter each following command in a different terminal (or in background) at the root of the project:

`./bin/webpack-dev-server` is used for JS, learn more about it [here](https://webpack.js.org/configuration/dev-server/)

`bundle exec sidekiq -t 25` is used for the [mailcatcher](https://www.npmjs.com/package/maildev), you can learn more about it [here](https://github.com/mperham/sidekiq)

`rails s` simply start the server

The mailtrap is available at `http://localhost:8084/#/`

## Troubleshooting

### Rake Aborted

**Problem:** ```rake aborted!
NoMethodError: undefined method `[]' for nil:NilClass```

**Solution:** The master.key is missing in `/config` (Ask us by e-mail or on Discord !)

### Error with Minimagick

**Problem:** Minimagick is missing.

**Solution:** You just need to install the missing package.

## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

Please make sure to update tests as appropriate.

## Contact

If you have any question, you can contact us at recipyhq@gmail.com
",8,8,7,2,food,"[cooking, food, health, javascript, rails, ruby]",72
shishir349,Market-Basket-Analysis-on-Food-Items,,https://github.com/shishir349/Market-Basket-Analysis-on-Food-Items,https://api.github.com/repos/Market-Basket-Analysis-on-Food-Items/shishir349,"Frequent Itemsets via Apriori Algorithm Apriori function to extract frequent itemsets for association rule mining We have a dataset of a mall with 7500 transactions of different customers buying different items from the store. We have to find correlations between the different items in the store. so that we can know if a customer is buying apple, banana and mango. what is the next item, The customer would be interested in buying from the store.","# Amazon Fine Foods Analysis 

![image](https://miro.medium.com/max/1024/1*e6q-XsCysAkhsysVXwCqOw.jpeg)

## Context
This dataset consists of reviews of fine foods from amazon. The data span a period of more than 10 years, including all ~500,000 reviews up to October 2012. Reviews include product and user information, ratings, and a plain text review. It also includes reviews from all other Amazon categories.

Contents
Reviews.csv: Pulled from the corresponding SQLite table named Reviews in database.sqlite
database.sqlite: Contains the table 'Reviews'

Data includes:

Reviews from Oct 1999 - Oct 2012
568,454 reviews
256,059 users
74,258 products
260 users with > 50 reviews
wordcloud

Acknowledgements
See this SQLite query for a quick sample of the dataset.

If you publish articles based on this dataset, please cite the following paper:

J. McAuley and J. Leskovec. From amateurs to connoisseurs: modeling the evolution of user expertise through online reviews. WWW, 2013.
",8,8,2,0,food,"[apriori, apriori-algorithm, data-analysis, data-mining, data-science, data-visualization, eclet, food, machine-learning, market-basket-analysis, market-data, matplotlib, pandas, python, recommendations, seaborn]",72
Anupya,pic-my-allergy-android,,https://github.com/Anupya/pic-my-allergy-android,https://api.github.com/repos/pic-my-allergy-android/Anupya,An Android app that will tell you if you are allergic to anything in a picture of your food :camera:,"# pic-my-allergy-android
The Android app that lets you snap a picture of your food and tells you if you might be allergic to the food in the picture.

# Check it out
[<img height=""100"" width=""100"" src=""http://icons.iconarchive.com/icons/dakirby309/simply-styled/256/Google-Play-Store-alt-icon.png"">](https://play.google.com/store/apps/details?id=com.anupya.anupya_pamidimukkala.picmyallergy)

# Idea
I came across Clarifai's public machine learning models and was amazed that the Food model could recognize food down to its ingredient level. This got me thinking about the multitudinous possibilities that this model could be used for.<br />

# Problem that is solved
When you are in a social setting and are offered food and you are not sure who the chef is or whether the food has the thing you are allergic to, most people simply choose not to eat it. Now, you can simply pull out your phone, take a picture of the food in front of you and know definitively whether you can eat it or not in <1 second.

# Last thoughts
I was curious about machine learning and wanted to create something using Clarifai's Machine Learning API. This project was super fun to work on :D

# Screenshots
![Screenshot](https://github.com/Anupya/pic-my-allergy-android/blob/master/screenshot1.PNG)
![Screenshot](https://github.com/Anupya/pic-my-allergy-android/blob/master/screenshot2.PNG)
![Screenshot](https://github.com/Anupya/pic-my-allergy-android/blob/master/screenshot3.PNG)
![Screenshot](https://github.com/Anupya/pic-my-allergy-android/blob/master/screenshot4.PNG)
",8,8,1,3,food,"[allergy, android, api, clarifai, food, health, learning, machine]",72
felixSchober,Deep-Food,,https://github.com/felixSchober/Deep-Food,https://api.github.com/repos/Deep-Food/felixSchober,"Python ML programm to classify food using Deep Learning and feature classifiers like SIFT, SURF with Bag of Words and SVMs","# Deep-Food

This project was done as part of my Bachlor's Thesis at the chair of [Connected Mobility](https://www.cm.in.tum.de/en/home/) (former Applied Informatics) at [Technical University of Munich](https://www.tum.de/en/). 
The goal of this thesis was to develop a program for recognizing food objects.

## Abstract
As obesity becomes more and more of a problem in developed countries, food logging is frequently used to help overweight people to balance their energy intake. Unfortunately, food logging is a tedious and inaccurate process. Computer vision and machine learning can help the user with this process. By taking an image of the meal, algorithms are able to make automated food intake assessments by detecting food items and their size. The goal of this thesis is the evaluation and implementation of a proof of concept application that can be used to facilitate and extend future food logging applications. For the task of food classification seven approaches were evaluated including feature classifiers like SIFT and SURF and convolutional neural networks. To enable the classification, segmentation, training and evaluation of classifiers, an extensive application was implemented using Python. The application supports data preprocessing and is designed so that it can be extended with additional image recognition concepts. 
With the aforementioned algorithms it was shown that algorithms are able to achieve a classification accuracy of 75% on 50 different food item classes if the algorithm suggests five possible candidates.
",8,8,2,0,food,"[classifier, feature-classifiers, food, opencv, opencv-python, python, sift, surf, svm, thesis]",72
afwcole,chop_chop_flutter,,https://github.com/afwcole/chop_chop_flutter,https://api.github.com/repos/chop_chop_flutter/afwcole,A food delivery application designed for university campuses. Built with flutter for IOS and Android.,"# CHOP CHOP
## A KNUST Food Delivery App

This is an attempt at creating a food delivery application for students at KNUST.

This application includes...
- a Sign-Up page
- a Sign In page
- a Homepage
- a Meal Profile Page
- Restaurant Profile Page
amongst and other UI pages and elements.

It also has functioning sign-in and sign-up features which were implemented with Firebase on the back-end.

## Demo of Chop Chop UI
<img src=""images/Chop%20Chop%20Screenshots%20all.jpg"" width=""400""> <img src=""images/chopchop.gif"" width=""250"">




## Requirements
* Any Operating System (ie. MacOS X, Linux, Windows)
* Any IDE with Flutter SDK installed (ie.  Android Studio, VSCode, IntelliJ, etc)
* Knowledge of Dart and Flutter

If this Repo is useful to you kindly give a star. thanks :)

Designed by yours truly with Adobe XD.
Coded by yours truly with Flutter.

NB: This application is not complete.
",8,8,1,0,food,"[android, deliveroo, delivery, flutter, food, food-delivery, food-delivery-application, food-ordering, ios, ubereats]",72
Google-Developer-Student-Club-RAIT,food_delivery_app_Flutter,Google-Developer-Student-Club-RAIT,https://github.com/Google-Developer-Student-Club-RAIT/food_delivery_app_Flutter,https://api.github.com/repos/food_delivery_app_Flutter/Google-Developer-Student-Club-RAIT,A Food App using Flutter & Firebase.,"# Food delivery application
![](banner.png)
[![forthebadge](https://forthebadge.com/images/badges/built-with-love.svg)](https://forthebadge.com)
[![forthebadge](https://forthebadge.com/images/badges/open-source.svg)](https://forthebadge.com)



## Information 
This is a food ordering & delivery application built with a flutter framework and firebase real-time database. Anyone can use this code for their own purpose. If you are interested in contributing to make this project then please follow code-Style and Contribution steps.

## Installation

<details><summary>Steps</summary>
<p>


**Step 1:**

Download or clone this repo by using the link below:

```
https://github.com/Google-Developer-Student-Club-RAIT/food_delivery_app_Flutter.git
```

**Step 2:**

Go to project root and execute the following command in console to get the required dependencies: 

```
flutter pub get 
```

**Step 3:**

execute the following command to run the application:

```
flutter packages pub run
```

or watch command in order to keep the source code synced automatically:

```
flutter packages pub run build_runner watch
```

</p>
</details>

<a id=""contribute""></a>
## Step to Contribute

<details><summary>Click here</summary>
<p>



**1.**  Fork [this](https://github.com/Google-Developer-Student-Club-RAIT/food_delivery_app_Flutter) repository.

**2.**  Clone your forked copy of the project.

```
git clone https://github.com/<your_name>/food_delivery_app_Flutter.git 
```

**3.** Navigate to the project directory :file_folder: .

```
cd food_delivery_app_Flutter
```

**4.** Add a reference(remote) to the original repository.

```
git remote add upstream https://github.com/Google-Developer-Student-Club-RAIT/food_delivery_app_Flutter
```

**5.** Check the remotes for this repository.
```
git remote -v
```

**6.** Always take a pull from the upstream repository to your master branch to keep it at par with the main project(updated repository).

```
git pull upstream main
```

**7.** Create a new branch.

```
git checkout -b <your_branch_name>
```

**8.** Perform your desired changes to the code base.


**9.** Track your changes:heavy_check_mark: .

```
git add . 
```

**10.** Commit your changes .

```
git commit -m ""Relevant message""
```

**11.** Push the committed changes in your feature branch to your remote repo.
```
git push -u origin <your_branch_name>
```

**12.** To create a pull request, click on `compare and pull requests`. Please ensure you compare your feature branch to the desired branch of the repository you are supposed to make a PR to.


**13.** Add appropriate title and description to your pull request explaining your changes and efforts done.


**14.** Click on `Create Pull Request`.


**15** Congratulations! You have made a PR. Sit back patiently and relax while your PR is reviewed.


</p>
</details>

  
### Home Screen & Loading Screen
<img src=""https://i.ibb.co/d29mMgn/homepage.jpg"" height=""400"" width=""200"">---<img src=""https://i.ibb.co/TkyLSdD/homepage2.jpg"" height=""400"" width=""200"">---<img src=""https://i.ibb.co/gSrJ7bz/category.jpg"" height=""400"" width=""200"">

### Profile Screen
<img src=""https://i.ibb.co/cyZ0K85/myorder.jpg"" height=""400"" width=""200"">---<img src=""https://i.ibb.co/h2ztgrK/fooddetails.jpg"" height=""400"" width=""200"">---<img src=""https://i.ibb.co/jJBKVZb/orderss.jpg"" height=""400"" width=""200"">
  
<a id=""codeStyle""></a>
  
  
## Application features 

- Simple UI for food delivery app's

- Use SQLite to store order data in a local database 

- Used firebase real-time database for syncing data to server-side 

- Can add one or more food in the cart section 

- Automatically total bill will generate.

- Search different food/types

- View previous ordered food's from your account

- Google/mail auth login integrated 
  
## Code-Style

// make wiki guide page for dart code-style  

### Contributors

### Contact

Maintainer : harsh.kulkarni.42774@gmail.com
Maintainer : jadhavAkshay0701@gmail.com

## LICENSE
Copyright (c) **GDSC Rait**. All rights reserved. Licensed under the MIT License

[![](https://img.shields.io/github/license/junaidrahim/desiresalesportal?style=for-the-badge)](LICENSE)
",7,7,0,6,food,"[android-application, app, dart, delivery, firebase, firebase-auth, flutter, food, realtime]",72
rohit-gohri,zomato-telegram-bot,,https://github.com/rohit-gohri/zomato-telegram-bot,https://api.github.com/repos/zomato-telegram-bot/rohit-gohri,"A simple inline telegram bot that searches for restaurants nearby, deployed using ZEIT now","# zomato-telegram-bot

## Start

Edit the `config.json` in the root of the folder with your set of keys/token or read the [config](#config) section.

```sh
yarn
yarn start
```

OR

```sh
npm install
npm run start
```

## config

Add a `config.json` to a folder called `private` in the root directory.

The format should be :

```json
{
  ""zomato"": {
      ""token"": ""YOUR_API_TOKEN""
   },
   ""telegram"": {
      ""token"": ""YOUR_BOT_TOKEN""
    }
}
```

Get Zomato API token at: https://developers.zomato.com/api
Generate Telegram bot token with @botfather bot on telegram: https://telegram.me/botfather

## Previews:

Search:
![search preview image](./docs/search_preview.jpg)

Message:
![message preview image](./docs/message_preview.jpg)


### API Documentation

- Zomato: https://developers.zomato.com/documentation
- Telegram: https://core.telegram.org/bots/api
- Telegraf's inline mode docs: https://core.telegram.org/bots/api#inline-mode 
",7,7,2,11,food,"[food, hacktoberfest, inline-bots, restaurant, search, telegram, telegram-bot, ts, typescript, zomato, zomato-api]",72
smaranjitghose,indokhaadyam,,https://github.com/smaranjitghose/indokhaadyam,https://api.github.com/repos/indokhaadyam/smaranjitghose,An open source project to catalogue the diverse set of Indian cuisines available across the subcontinent for thousands of years ,"<p align=""center""><img src=""./assets/logo/Indokhadyaam.png"" width=400></p>


An open source project to catalogue the diverse set of Indian cuisines available across the subcontinent for thousands of years.
We aspire to become the defacto search engine for not only the 1.3B+ people in the nation but also everyone around the world to dive into the univese of Indian food.
Furthermore, we belive that this project can lead to a community where people from all walks of life can share their ancestral or invented recipes without having any obligation to conform to woke trends.


## Tech Stack: [Phase I]

__Frontend__:
 
 - HTML
 - CSS
 - BOOTSTRAP
 - JS
 - REACT
 
 __Backend__:
 
 - Django
 - Mysql
 
 
 
## Project Maintainersüë®üè´:

| <img src = ""https://avatars2.githubusercontent.com/u/46641503?v=4""> | <img src = ""https://avatars2.githubusercontent.com/u/40017559?v=4""> | 
| :----------------------------------------------------------: | :----------------------------------------------------------: | 
|     [Smaranjit Ghose](https://github.com/smaranjitghose) |    [Anush Bhatia](https://github.com/anushbhatia)                     
",7,7,4,10,food,"[css, database, food, html, indian-food, react]",72
roshnideyic365,Culinary-King-e-commerce-website,,https://github.com/roshnideyic365/Culinary-King-e-commerce-website,https://api.github.com/repos/Culinary-King-e-commerce-website/roshnideyic365,"Culinary King is an e-commerce website on some of the most mouth-watering dishes out there (Front-end). This website has a huge collection of delicious items beautifully presented using carousels and parallax scrolling CSS features flavored with Bootstrap with the contact page containing a google map attached to it the embedded API, thereby providing it with a cent percent professional look.","Culinary King is an e-commerce website on some of the most mouth-watering dishes out there (Front-end). This website has a huge collection of delicious items beautifully presented  using carousels and parallax scrolling CSS features flavored with Bootstrap with the contact page containing a google map attached to it the embedded API, thereby providing it with a cent percent professional look. 
",7,7,2,4,food,"[bootstrap, css, e-commerce, e-commerce-project, e-commerce-template, e-commerce-website, food, food-ordering, food-products, food-website, front-end, front-end-development, front-end-web-development, frontend-web, html, web-development, web-development-project]",72
JyothsnaKS,Food-Delivery-Web-App,,https://github.com/JyothsnaKS/Food-Delivery-Web-App,https://api.github.com/repos/Food-Delivery-Web-App/JyothsnaKS,Web Application providing services to order food online or reserve table in restaurants,"# Food-Delivery-Web-App

Foodicted is a web application developed by us to provide online food ordering and delivery and restaurant table reservation services to our customers. Our customers can order food or reserve table at a restaurant online based on the type of the cuisine they like, the location, the price range etc. We communicate with our users through SMS and e-mails.  Our customers are required to create an account on our website to ensure security and a customised experience when further enhancements are done on the website.

## Key Features:
‚Ä¢	Dynamic page for table reservation  with use of filters to allow customers to search for restaurants of their choice and reserve table depending on the number of people and selected time slot and prompts if the restaurant is running full (with a help of a separate table maintaining the current status of seats available).
‚Ä¢	Email service to confirm table reservation
‚Ä¢	Dynamic feedback page to get customer feedback and display the same while allowing  them to like or comment on others feedback.
‚Ä¢	Dynamic page to display the order placed by the user (food order cart), bill summary and  choice of location to deliver the placed order.
‚Ä¢	SMS service to confirm the order for delivery
‚Ä¢	Google Maps to display current location and give the user a choice to deliver the food to his/her current location
‚Ä¢	Designing the complete home page with login & sign up options, navigation menu to direct to other pages and header and footer to be rendered  on each page of our website. 
‚Ä¢	Option for customers to tweet about our organisation  on Twitter
‚Ä¢	Option to view Facebook and LinkedIn pages of the founders 
‚Ä¢	Account creation, registration and validation using java script and data on database

## Dependencies

All the files must be in xampp/htdocs and the href and links needs to be changed depending on the folder structure being used.
",7,7,3,1,food,"[css, food, food-delivery-application, food-ordering, html, javascript, php, sweetalert, table-reservation]",72
andrebellu,MagnaTell,,https://github.com/andrebellu/MagnaTell,https://api.github.com/repos/MagnaTell/andrebellu,"A social media platform where users can discover, share, publish and save recipes.","
# MagnaTell

A social media platform where users can discover, share, publish and save recipes

## Group members

- [Francesco Annunziata](https://github.com/FrancescoAnnunziata)
- [Andrea Bellu](https://github.com/andrebellu)
- [Leonardo Baccalario](https://github.com/LeonardoBaccalario)
- [Fabio Irimie](https://github.com/fabiooo4)
- [Stefano Longhena](https://github.com/StefanoLonghena)

[Mockup](https://www.figma.com/file/vJDmONzahI0twYZeAC0PVZ/Design?node-id=0%3A1&t=PzXMl56ItJxyNltT-0)

# Developement Stack

## Frontend

<img src=""https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Svelte_Logo.svg/1200px-Svelte_Logo.svg.png""  width=""32"" style=""float:left; margin-right: 10px;""> <p>Sveltekit</p> 


<br />


<img src=""https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Tailwind_CSS_Logo.svg/1024px-Tailwind_CSS_Logo.svg.png""  width=""32"" style=""float:left; margin-right: 10px;""> <p>Tailwind CSS + DaisyUI</p>


<br />

## Backend

<img src=""https://assets.stickpng.com/images/5847f40ecef1014c0b5e488a.png""  width=""32"" style=""float:left; margin-right: 10px;""> <p>Firebase</p>

<br />

# User Stories

1. Discover new recipes shared by other users based on various categories such as cuisine, dietary requirements, etc.
2. Search for specific recipes using keywords or filters to narrow down my search results.
3. Save recipes to my personal collection.
4. Publish my own recipes on the social.
5. Follow other users who share similar taste in food or have a good collection of recipes.
6. Comment on recipes and share my thoughts on them.
7. Rate recipes and share my opinion on them.
8. Share recipes on other social media platforms.
9. Get notifications when other users comment on my recipes.",7,7,1,9,food,"[firebase, food, recipe-app, sveltekit]",72
pranav-kale-01,excess-food-locator,,https://github.com/pranav-kale-01/excess-food-locator,https://api.github.com/repos/excess-food-locator/pranav-kale-01,Excess Food Locator helps food providers connect with food distributing NGOs.,"<a name=""readme-top""></a>

<br />
<div align=""center"">
<img src=""https://user-images.githubusercontent.com/78294692/191543806-a09b1360-acb8-4f2a-9ab4-5a9f85778025.jpg"" width=""150"">
  <h1 align=""center"">Excess Food Locator</h1>

  <p align=""center"">
    Excess Food Locator helps people having excess food connect with other resources and distributors. This application is based on a map view to provide users with quicker and easier acess to resources.
    <br />
    <br />
    <a href=""https://youtu.be/3QqH0R92WKA"">View Demo</a>
    ¬∑
    <a href=""https://github.com/pranav-kale-01/excess-food-locator/issues"">Report Bug</a>
    ¬∑
    <a href=""https://github.com/pranav-kale-01/excess-food-locator/issues"">Request Feature</a>
    <br />
    <br />
  </p>
</div>

https://user-images.githubusercontent.com/70502672/191589577-7f018b8b-2cd3-4cb8-a9ca-e9ead65466ce.mp4

## ‚ö† Note:

### *The application is still under development and this is a pre-release version!*

The current version of the application is a pre-release and is intended to use as a proof of conecpt. Developers assume no liability and are not responsible for any misuse or damage caused by the current version of the application.

## App Screenshots:

### Login / Signup:
<img src=""https://user-images.githubusercontent.com/70502672/191471043-02695ba9-fa2a-4dbf-ac0b-fb64e7159a1b.jpeg"" width=""200"">   <img src=""https://user-images.githubusercontent.com/70502672/191471051-4d3095ea-af3e-4fa5-822c-ddfcffc26edf.jpeg"" width=""200"">   

### Account creation:
<img src=""https://user-images.githubusercontent.com/70502672/191471057-397f93c4-ff49-441d-901f-660b0b37e059.jpeg"" width=""200""> <img src=""https://user-images.githubusercontent.com/70502672/191471082-e293482c-edc1-474e-b7ea-694b40103ad2.jpeg"" width=""200"">  <img src=""https://user-images.githubusercontent.com/70502672/191471065-3b973c68-c99d-4321-92b1-bfa9584151f3.jpeg"" width=""200""> 

### Service Type: 
<img src=""https://user-images.githubusercontent.com/70502672/191471072-2391497d-9eb6-494f-a8a3-acc30e7c00ea.jpeg"" width=""200"">  

### Adding / Editing food details:
<img src=""https://user-images.githubusercontent.com/70502672/191471086-0c0b91de-9884-4d5a-8d3d-5c382a1298e0.jpeg"" width=""200"">  <img src=""https://user-images.githubusercontent.com/70502672/191471091-8a28e939-9eca-4d96-b8b4-35f233def876.jpeg"" width=""200"">

### Location and Order details:
<img src=""https://user-images.githubusercontent.com/70502672/191471018-79fea53d-edd8-42ec-82dc-b7f99c0ffad1.jpeg"" width=""200""> <img src=""https://user-images.githubusercontent.com/70502672/191471035-2ff4b4e5-bb57-4efe-971d-c4d7316fb51d.jpeg"" width=""200""> <img src=""https://user-images.githubusercontent.com/70502672/191471098-7205738b-a288-439b-8db2-a213c96f7026.jpeg"" width=""200"">

## Built With

* <a href=""https://flutter.dev"" > <img src=""https://user-images.githubusercontent.com/70502672/191479981-90008429-439c-42e3-b5e0-f9fff37c09aa.png"" height=""50""> </a>

* <a href=""https://developers.google.com/maps"" > <img src=""https://user-images.githubusercontent.com/70502672/191480861-152b58c8-3824-4e5b-ba67-c64ef02413ec.png"" height=""50""> </a>

* <a href=""https://firebase.google.com/"" > <img src=""https://user-images.githubusercontent.com/70502672/191481355-c9c9c148-2d75-4948-85e1-c8a4708d4036.png"" height=""50""> </a>



<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## How to use:

Head over the releases tab for this project and download the (.apk) file for the latest release.


<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## Contributing

Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.

If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"".
Don't forget to give the project a star! Thanks again!

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>


## Contributors 

<a href=""https://github.com/<your-username>/Python/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=pranav-kale-01/excess-food-locator""/>
</a>
",6,6,1,0,food,"[flutter, food, maps-api]",72
zhuoyingcai,LunchIn,,https://github.com/zhuoyingcai/LunchIn,https://api.github.com/repos/LunchIn/zhuoyingcai,LunchIn Automatically Picks a Lunch Option For You,"# LunchIn [![Build Status](https://travis-ci.com/CSC59939/LunchIn.svg?token=sGFpuFDcawyN3EBiLrfw&branch=master)](https://travis-ci.com/CSC59939/LunchIn)

## What is LunchIn?

LunchIn is a web application that helps people pick out a lunch option for the day, that way it will prevent people from wrestling with the idea of having to decide what or where to eat for lunch. 

Users are able input the foods that they like and have one selected at random. The food can also be manually picked by the user if desired. The chosen/randomly generated food will tied to restaurants close to your entered address along with the reviews of those restaurants.

Check out our website: <https://lunchin-csc59939.herokuapp.com>

## Our Team
<table>
  <thead>
    <tr>
      <td><strong>Member</strong></td>
      <td><strong>Role(s)</strong></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Gerry Xu</td>
      <td>Customer</td>
    </tr>
    <tr>
      <td>Zhuoying Cai</td>
      <td>Tracker, Presenter</td>
    </tr>
    <tr>
      <td>Chieh-Huang Chen</td>
      <td>Designer, Unit Tester</td>
    </tr>
    <tr>
      <td>Seng Fung Mun</td>
      <td>Continuous Integrator/ Deployment</td>
    </tr>
    <tr>
      <td>Evan Vasquez</td>
      <td>Code Reviewer</td>
    </tr>
    <tr>
      <td>Luis Bueno</td>
      <td>Documenter</td>
    </tr>
  </tbody>

</table>
",6,6,5,0,food,"[food, lunch, lunch-option, restaurant]",72
robacarp,Recipes,,https://github.com/robacarp/Recipes,https://api.github.com/repos/Recipes/robacarp,I like to make food.,,6,6,3,0,food,"[cooking, food, home-maker]",72
FoodIssues,Lopadotemachoselachogaleokranioleipsanodrimhypotrimmatosilphiokarabomelitokatakechymenokichlepikossy,,https://github.com/FoodIssues/Lopadotemachoselachogaleokranioleipsanodrimhypotrimmatosilphiokarabomelitokatakechymenokichlepikossy,https://api.github.com/repos/Lopadotemachoselachogaleokranioleipsanodrimhypotrimmatosilphiokarabomelitokatakechymenokichlepikossy/FoodIssues,This is Pauls and Samuels (mostly vegan) recipe archive.,"# 
https://en.wikipedia.org/wiki/Lopadotemachoselachogaleokranioleipsanodrimhypotrimmatosilphiokarabomelitokatakechymenokichlepikossyphophattoperisteralektryonoptekephalliokigklopeleiolagoiosiraiobaphetraganopterygon

This is Pauls and Samuels (mostly vegan) recipe archive.
",6,6,2,27,food,"[food, recipes]",72
space-jammers,vegme,space-jammers,https://github.com/space-jammers/vegme,https://api.github.com/repos/vegme/space-jammers,a recipe search engine for vegan and vegetarian meals.,"<!-- Badges -->
[ ![Codeship Status for space-jammers/vegme](https://app.codeship.com/projects/38b27720-3a55-0135-a097-3ea7e05708f3/status?branch=master)](https://app.codeship.com/projects/228577)
[![Coverage Status](https://coveralls.io/repos/github/space-jammers/vegme/badge.svg?branch=master)](https://coveralls.io/github/space-jammers/vegme?branch=master)

# ![vegme logo](https://github.com/space-jammers/vegme/blob/master/app/assets/images/vegme.png)
VegMe is a vegan and vegetarian recipe search engine powered by the Edamam Recipe API. <!-- Heroku URL -->

## Purpose

[VegMe](http://vegme.herokuapp.com/) was created when two veggie-loving graduates of the Firehose Project wanted to exercise their new coding skills and stretch their knowledge.

On the code side, VegMe has been a platform for strengthening our expertise in features like AJAX, third-party API integration, data transfer objects, user authentication, TDD, and more.

On the veggie side, VegMe aims to provide features that are not provided in most meal planning applications that would be especially useful for those who eat a plant-based diet.

## Usage

* Search for recipes based on diet type and maximum calorie count
* Save your favorite recipes
* Thumbs-down disliked recipes to remove them from search results
* See a nutritional analysis for each saved recipe

![Usage gif](https://github.com/space-jammers/vegme/raw/master/app/assets/videos/blueberry_pie.gif)


## Built With
* [Animate.css](https://daneden.github.io/animate.css/) - CSS animations
* [Better Errors](https://github.com/charliesome/better_errors) - enhanced error messages
* [Chart-js](http://www.chartjs.org/) - flexible JavaScript charting
* [Codeship](https://codeship.com/) - continuous integration platform
* [Devise](https://github.com/plataformatec/devise) -  authentication solution
* [Figaro](https://github.com/laserlemon/figaro) - secure Rails configuration
* [Foundation](http://foundation.zurb.com/) - responsive front-end framework
* [HTTParty](https://github.com/jnunemaker/httparty) - web service consumption
* [Rspec](http://rspec.info/) - test suite
* [Rubocop](https://github.com/bbatsov/rubocop) - style guide
* [SimpleCov](https://github.com/colszowka/simplecov) - code coverage analysis
* [Simple Form](https://github.com/plataformatec/simple_form) - form template
* [will_paginate](https://github.com/mislav/will_paginate) - pagination library

## Authors

* **Haley Mnatzaganian** - *Initial work* - [haleymnatz](https://github.com/haleymnatz)
* **Lindsay Dages** - *Initial work* - [lnzd7](https://github.com/lnzd17h)

## Acknowledgments

Thanks [Josh Dages](https://www.linkedin.com/in/joshuadages) for providing our awesome logo.

[Powered by Edamam Recipe API](https://developer.edamam.com/edamam-docs-recipe-api)
",6,6,3,33,food,"[food, recipes, search-engine, vegan, vegetarian]",72
karlicoss,scrapyroo,,https://github.com/karlicoss/scrapyroo,https://api.github.com/repos/scrapyroo/karlicoss,Full text search over deliveroo restaurants,"Cause I got sick of clicking through Deliveroo restaurants. Full text search is a basic human right!

[Slides + speaker notes](https://beepb00p.xyz/scrapyroo.html) from November Rust London [meetup](https://www.meetup.com/Rust-London-User-Group/events/266262531/).

<img src=""https://user-images.githubusercontent.com/291333/69106349-f82e9b00-0a65-11ea-9b9b-1fd45ebf4446.png""/>

# Setup and usage
## Scraper
Install dependencies: `pip3 install --user -r requirements.txt`

Add something like:

    ./scrape --area 'london/canning-town' --postcode 'E164SA' --json /path/to/menus.jsonl
    
to your crontab to run once a day, e.g. in the morning or something. Presumably, menus don't change often so that's enough.

## Indexer

Install [tantivy-py](https://github.com/tantivy-search/tantivy-py), custom branch needed for extra functionality that's not merged yet:

```
cargo install  \
--git https://github.com/karlicoss/tantivy-py \
--branch delete-all-documents
```

    ./index --index /path/to/tantivy-index /path/to/menus.jsonl


## Backend

Install [tantivy-cli](https://github.com/tantivy-search/tantivy-cli), custom branch needed at the moment to expose highlights via the API:

```
cargo install  \
--git https://github.com/karlicoss/tantivy-cli \
--branch serve-snippets
```

Tantivy runs on port 3000 by default

    ./serve --index /path/to/tantivy-index

## Frontend

NOTE: if you're running page locally, you're gonna need to pass by [CORS](https://stackoverflow.com/a/3177718/706389).

You can do it by e.g. using Chromium with no web security:

    chromium-browser --disable-web-security --user-data-dir=/tmp/whatever frontend/index.html
",6,6,3,0,food,"[delivery, food, headless-chrome, scrapy, tantivy]",72
kylemilloy,edamam-php,,https://github.com/kylemilloy/edamam-php,https://api.github.com/repos/edamam-php/kylemilloy,A PHP library for interfacing with the Edamam API,"# Edamam-PHP

[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE)
[![Build Status](https://travis-ci.org/kylemilloy/edamam-php.svg?branch=master)](https://travis-ci.org/kylemilloy/edamam-php)
[![StyleCI](https://github.styleci.io/repos/198011394/shield?branch=master)](https://github.styleci.io/repos/198011394)
[![Total Downloads](https://img.shields.io/packagist/dt/kylemilloy/edamam-php.svg?style=flat-square)](https://packagist.org/packages/kylemilloy/edamam-php)

The Edama-PHP library provides access to the [Edamam API](https://developer.edamam.com/) for the PHP language.

## Installation

Install with composer using `composer require kylemilloy/edamam-php`

## Usage

Simple usage looks like:

```php
\Edamam\Api\FoodDatabase\FoodDatabase::setApiCredentials('app_id', 'app_key');

$results = \Edamam\Api\FoodDatabase\FoodRequest::find(['ingredient' => 'pizza'])->results();
```

For more complex usage view the [FoodDatabase API Docs](docs/FOODDATABASE.md).

## Todo

- Add full support for Food Database API
- Add full support for Nutrition Analysis API
- Add full support for Recipe Search API
",5,5,0,0,food,"[diet, edamam-api, edamam-php, food, php-library]",72
davidmn,recipes,,https://github.com/davidmn/recipes,https://api.github.com/repos/recipes/davidmn,some recipes and python for writing them down,"# recipes

[![Build Status](https://travis-ci.org/davidmn/recipes.svg?branch=master)](https://travis-ci.org/davidmn/recipes)

## organisation
sorted by meal type currently, as more get added things might group better in another way

## usage
make sure that `mk-recipe.py` is executable then do something like this:
```
./mk-recipe.py --name ""Tuna Pasta Puttanesca"" --type ""main"" --serves 4
```
that will create file `main/tuna-pasta-puttanesca.md`

name and type are required arguments while serves is optional

it will not overwrite existing files because
",5,5,4,0,food,"[food, python, recipes, templates]",72
deepampatel,SimNode,,https://github.com/deepampatel/SimNode,https://api.github.com/repos/SimNode/deepampatel,Find similar nodes in graph using jaccard similarity. Use this to recommend similar dishes and restaurants ,"# SimNode: Using Graphs to do find Similar Entities/Nodes.
### Finding similar restaurants on a small graph created from zomato restaurants data. 
#### https://medium.com/coreview-systems/graphs-for-similarity-search-23a23364d08f

## Create Graph

Using the [neo4j-admin](https://neo4j.com/docs/operations-manual/current/tools/import/syntax/) import 
1. Download data from [here](https://www.kaggle.com/himanshupoddar/zomato-bangalore-restaurants) 
2. neo4j-admin import option requires the csv to be in a specific format to create nodes and relationships.
3. The logic of creating these csv's can be found in this [notebook](https://github.com/deepam8155/SimNode/blob/master/Food_graph_logic.ipynb)
4. Run the notebook and create required csv's
5. Copy all the csv's to import folder of neo4j database
6. Run the below command 
```bash
sudo ./bin/neo4j-admin import --database zomato.db  --mode csv --ignore-missing-nodes --multiline-fields=True --ignore-duplicate-nodes --nodes:Location=import/locations.csv --nodes:Restaurant=import/restaurant.csv --nodes:Dish=import/dishes.csv --nodes:Type=import/type.csv --nodes:Cuisine=import/cuisine.csv --relationships:SERVES_CUISINE=import/cuisine_restaurant.csv --relationships:SERVES_DISH=import/restaurant_dish.csv --relationships:FALL_UNDER import/type_restaurant.csv --relationships:FAMOUS_FOR=import/liked_dishes_restaurant.csv --relationships:IN_AREA=import/restaurant_location.csv
```

### TL;DR

Import graph using [cypher-shell](https://neo4j.com/developer/kb/export-sub-graph-to-cypher-and-import/)

```bash
cat zomato_food_graph.cypher | ./bin/cypher-shell -u neo4j -p password
```
",5,5,2,0,food,"[food, food-search, graph, jaccard-similarity, neo4j-admin, restaurants, similarity-search, zomato]",72
lashdid,takaran,,https://github.com/lashdid/takaran,https://api.github.com/repos/takaran/lashdid,Converting the mesurement of Indonesian food ingredients made with Svelte,"# Takaran

Takaran adalah website yang berguna untuk menghitung takaran dalam memasak.

Website : https://takaran.vercel.app/

Jenis takaran :
- Gelas
- Sendok Makan (sdm)
- Sendok Teh (sdt)
- Gram (g)
- mililiter (ml / cc)

Jenis bahan :
- Sirup / Madu
- Susu Encer
- Tepung Terigu
- Tepung Maizena
- Tepung Kanji
- Tepung Sagu
- Tepung Beras
- Tepung Roti
- Gula Pasir
- Gula Halus
- Gula Palem
- Mentega
- Buah Kering (sukade, kismis, dll)
- Bubuk Cokelat",5,5,0,0,food,"[food, measurements, svelte]",72
code-for-syracuse,eatsafecny,code-for-syracuse,https://github.com/code-for-syracuse/eatsafecny,https://api.github.com/repos/eatsafecny/code-for-syracuse,:hamburger: A web application that makes it easy to find restaurant inspection results in CNY,"## Restaurant safety inspection results for CNY

I built this app to demonstrate how to use [open data](http://opendata.guide/) from government to build a useful application. I'd also like to avoid food poisoning if I can.

If you'd like to help build more apps like this using open data, check out the [Upstate Data Project](http://dataupstate.org/).

## Usage

* Install dependencies: ```npm install```
* If desired, You can modify the templates used to display information about a specific establishment. 
* Compile templates: ```npm run compile```
* Launch the app"" ```npm start```

",5,5,2,4,food,"[food, inspections, opendata, restaurant, safety]",72
DrAugus,draugus.github.io,,https://github.com/DrAugus/draugus.github.io,https://api.github.com/repos/draugus.github.io/DrAugus,,"# AUGUS

## All Site ([pilot][pilot])

> cause [netlify][netlify] has been sending emails asking for payment all the time, so I [delete](https://app.netlify.com/user/settings#danger-zone) netlify account. And then, I deprecated [vercel][vercel] because every commit will be automatically built, I can't set trigger conditions.

| site | [github pages][new-repo] | source | tech|
| :--: |:--: |:--: | :--:|
| main site (now only game)|  [online][site0-1] [online2][site0-2] | [game](./game/) | [vitepress][vitepress] [vue3][vue] |
| life | [online][site6-1] | [life](./life/) | [vitepress][vitepress] [vue3][vue] |

## Develop

### Prerequisites

- nodejs (version >= 16)
- npm
- ~~yarn (`npm install -g yarn`)~~ yarn is no longer used, all are upgraded to pnpm
- pnpm (`npm install -g pnpm`)

### Git clone

```git
git clone https://github.com/DrAugus/draugus.github.io.git
```

### Run

2 sites, just run `pnpm i && pnpm dev`

- [game](./game/), powered by [vitepress][vitepress]
- [life](./life/), powered by [vitepress][vitepress]

## Upgrade

You don't have to think about them. Just give them to the robot.

## Thanks

[JetBrains](https://www.jetbrains.com/zh-cn/community/opensource/#support)

## Reference

- [vitepress][vitepress]

[pilot]:https://augusmeow.github.io/
[site0-1]: https://draugus.github.io/
[site0-2]: https://augusmeow.github.io/game/
[site6-1]: https://augusmeow.github.io/life/
[netlify]: https://netlify.com/
[vercel]: https://vercel.com/
[vue]: https://vuejs.org
[vitepress]: https://vitepress.vuejs.org/
[new-repo]: https://github.com/augusmeow/
",5,5,1,1,food,"[blog, code, docus, food, genshin, genshin-impact, notes, nuxt, nuxt-docus, royal-family, star-rail, travel, trip, vitepress, vue, vue3, vuepress, xingqiongtiedao, yuanshen]",72
katreparitosh,Foodify-Android-App,,https://github.com/katreparitosh/Foodify-Android-App,https://api.github.com/repos/Foodify-Android-App/katreparitosh,An app which suggests foods and recipes based on the ingredients you search.,,5,5,1,0,food,"[food, openhelper, sqlite-android, suggestion-engine]",72
punkrockgoth,recipes,,https://github.com/punkrockgoth/recipes,https://api.github.com/repos/recipes/punkrockgoth,This is a collection of recipes created by Sarah LaCroix (@punkrockgoth) and Colin Childs (@phoul).,"# Recipes
This is a collection of recipes created by Sarah LaCroix (@punkrockgoth) and Colin Childs (@phoul).

Want one of our recipes that's not up yet? [Create an issue](https://github.com/punkrockgoth/recipes/issues).

Recipes are broken up into categories: 

* [Appetizers](appetizers/)
* [Desserts](desserts/)
* [Grill](grill/)
* [Instant Pot](instant_pot/)
* [Main Dishes](main_dishes/)
* [Soups](soups/)
* [Sous Vide](sous_vide/)
* [Snacks](snacks/)
* [Spices](spices/)
* [Breads](breads/)

Or you can take a look at some of our curated collections:
* [Collections](collections/)

",5,5,5,13,food,"[cooking, cooking-recipes, food, recipes]",72
eat-this-one,eat-this-one,eat-this-one,https://github.com/eat-this-one/eat-this-one,https://api.github.com/repos/eat-this-one/eat-this-one,Open Source mobile app to share meals with your colleagues at work or at the uni during lunch time.,"# Eat this one! [![Build Status](https://travis-ci.org/eat-this-one/eat-this-one.svg?branch=master)](https://travis-ci.org/eat-this-one/eat-this-one) [![Code Climate](https://codeclimate.com/github/eat-this-one/eat-this-one/badges/gpa.svg)](https://codeclimate.com/github/eat-this-one/eat-this-one)

[Eat this one!](http://www.eat-this-one.com) is a mobile app to share cooking specialties with your colleagues or classmates at lunch time.

This repository includes:

* An NodeJS REST API backed by MongoDB
* An AngularJS frontend compiled to Android and iOS apps using cordova
* Grunt tasks for development, testing and deployment.

# Installation
    git clone git://github.com/eat-this-one/eat-this-one.git
    cd eat-this-one

### System dependencies
    npm install -g grunt-cli
    npm install -g bower
    npm install -g cordova
    npm install -g mocha
    npm install -g ios-deploy

You only need ios-deploy package if you are interested in using the iOS emulator.

### (Android) Android SDK

Follow the normal procedure to install the Android SDK; Android Studio is not required. http://developer.android.com/sdk/index.html

Also http://developer.android.com/google/gcm/gs.html for Google Cloud Messaging.

### (iOS) XCode

Follow the normal procedure http://cordova.apache.org/docs/en/4.0.0/guide_platforms_ios_index.md.html#iOS%20Platform%20Guide

### Install dependencies

    // Install node dependencies including the local grunt.
    npm install

    // Depending on whether you want to test using an android device or an ios device.
    grunt install:android
    grunt install:ios


This will install all dependencies, create the cordova project adding the specified platform and build the current codebase.

Later on you can use **grunt update** to update the project dependencies.

### Tips

* Note that, if you want to run the app in your mobile, you can set your IP or hostname in config/frontend.js.
* (Android) You may need to install previous android sdk APIs as cordova is not always using the latest version
    * If it is the case, run **android sdk** and select the required versions

# Development

    grunt

The default task is an alias of **grunt dev** task which starts the backend server and watches for codebase changes:

* Runs JSHint and restarts the backend server if required
* Runs JSHint, minifies and concatenates frontend JS files
* Runs CSSLint and compiles less to CSS and minifies it
* Compiles Jade templates to HTML files
* Runs tests if you modify them

### Browse the web environment
    http://localhost:8000

### Backend server URL
    http://localhost:3000
As commented above, the hostname or the IP might be better than localhost to test in mobile.

### Install the app on the emulator
    grunt run:android:emulator
    grunt run:ios:emulator

This is basically running **cordova emulate android** and **cordova emulate ios** in dist/app directory.

### Install the app on your mobile

##### Android
    grunt run:android:device

It starts the adb server, installs the current build and outputs the device log.

In case you have problems accessing the backend from the mobile http://developer.android.com/tools/devices/emulator.html#networkaddresses

##### iOS
* Start XCode
* Set up your development team & register your testing device
* For more info: https://cordova.apache.org/docs/en/4.0.0/guide_platforms_ios_index.md.html#iOS%20Platform%20Guide

### Other commands
    grunt --help

# Test

    npm test

This runs all backend tests (mocha).

    grunt build:test

This runs all tests, including frontend unit tests and e2e tests (protractor) they also run automatically when editing test files.

# Project code structure

* **Backend app (JS - Node)**
    * Models
        [models/*.js](https://github.com/eat-this-one/eat-this-one/blob/master/models)
    * Routes
        [routes/*.js](https://github.com/eat-this-one/eat-this-one/blob/master/routes)
    * Other modules
        [lib/*.js](https://github.com/eat-this-one/eat-this-one/blob/master/lib)

* **Frontend app (JS - AngularJS)**
    * Controllers
        [public/javascripts/controllers/*.js](https://github.com/eat-this-one/eat-this-one/blob/master/public/javascripts/controllers)
    * AngularJS directives
        [public/javascripts/directives/*.js](https://github.com/eat-this-one/eat-this-one/blob/master/public/javascripts/directives)
    * AngularJS services
        * If they make use of cordova plugins
            * [public/javascripts/app-services/*.js](https://github.com/eat-this-one/eat-this-one/blob/master/public/javascripts/app-services)
            * [public/javascripts/web-services/*.js](https://github.com/eat-this-one/eat-this-one/blob/master/public/javascripts/web-services)
        * Otherwise
            * [public/javascripts/shared-services/*.js](https://github.com/eat-this-one/eat-this-one/blob/master/public/javascripts/shared-services)

* **Styles (CSS)**
    [public/stylesheet/*.less](https://github.com/eat-this-one/eat-this-one/blob/master/public/stylesheets)

* **Views (HTML)**
    [public/views/*.jade](https://github.com/eat-this-one/eat-this-one/blob/master/public/views)


# Thanks

## Third party code

* Frontend
    * AngularJS - https://angularjs.org/
    * Karma - http://karma-runner.github.io/
    * Grunt - http://gruntjs.com/
    * Cordova - https://cordova.apache.org/
    * Jade - http://jade-lang.com/
    * Less - http://lesscss.org/
    * Bower - http://bower.io/
    * JQuery - https://jquery.com/
    * Bootstrap - http://getbootstrap.com/css/
    * Glyphicons - http://glyphicons.com/
* Backend
    * NodeJS - https://nodejs.org/
    * ExpressJS - http://expressjs.com/
    * MongoDB - https://www.mongodb.org/
    * Mongoose - http://mongoosejs.com/
    * Dokku - https://github.com/progrium/dokku
* And other third party code listed in:
    * https://github.com/eat-this-one/eat-this-one/blob/master/package.json
    * https://github.com/eat-this-one/eat-this-one/blob/master/bower.json
",5,5,2,2,food,"[angularjs, cordova, food, javascript, nodejs]",72
CraigKelly,nndb-import,,https://github.com/CraigKelly/nndb-import,https://api.github.com/repos/nndb-import/CraigKelly,Import USDA National Nutrient Database ASCII files in to a MongoDB collection,"# nndb-import

## Using this data

If a flat file of food and ingredients with the most common nutrients is all
you want, we've made that available at
[data.world](https://data.world/craigkelly/steam-game-data)

If you want a denormalized, integrated MongoDB database of the USDA's National
Nutrient database, then please see below.

## Using this code

Import USDA National Nutrient Database ASCII files in to a MongoDB collection.

We developed this small python against SR27. Those data files are available
from the download link at http://www.ars.usda.gov/Services/docs.htm?docid=8964

Some of the bulk operations we use weren't available until PyMongo version
3.0. Ubuntu packages a different version. As a result, we have supplied a
`setup.sh` script for setting up a virtualenv, and a `run.sh` to use it. If
you're already familiar with using virtualenv's then you can do it all yourself:

```
$ cd nndb-import
$ virtualenv venv
$ . venv/bin/activate
$ pip install -r requirements.txt
$ ./nndb_import.py
```

`./nndb_import.py` requires a specified directory containing the ASCII files
linked above. Run `./nndb_import.py --help` for details.

## Optimization

There is a small attempt at a GA optimization approach for recommended
nutritional intake based on an attempt at a fitness function tailored to my
goals. It's there for historical purposes.

I won't keep you in suspense. The best recommendations generated were either
nonsensical (3 pounds of celery seed?!) *or* a version of Michael Pollan's
[advice](http://www.nytimes.com/2007/01/28/magazine/28nutritionism.t.html):

> Eat food. Not too much. Mostly plants.

## Note

This is a Python 3 app - we're not supporting Python 2.7
",5,5,3,0,food,"[data, food, mongodb, nutrition, python]",72
KabohaJeanMark,yummymeals,,https://github.com/KabohaJeanMark/yummymeals,https://api.github.com/repos/yummymeals/KabohaJeanMark,A react-redux capstone project to consume theMealDB API and display filtered search results based on user category preferences.,"# yummymeals
![](https://img.shields.io/badge/Microverse-blueviolet)

> A React-Redux yummymeals capstone application that comsumes theMealDB APi and returns categorized information that can easily be sorted through and filtered.
It provides a catalogue of a variety of meals; Breakfast, Chicken, Vegan, Dessert.

It uses Redux for a single source of truth while doing state management. The redux store keeps the data retrieved from the API.

All pages have a single route within the SPA.

## Screenshot

![landing](src/assets/landing.png)

## Live Demo
[Netlify link](https://angry-ritchie-381479.netlify.app/)

## Video Demos
YouTube :tv: [Understanding React, Virtual DOM, Redux, State Management & One-way Data Flow](https://www.youtube.com/watch?v=E2rG5Yd_XR0&t=1s&ab_channel=Microverse)

[App Walkthrough](https://www.loom.com/share/b887d0fc8efc4e21ac24e8f93fd5a749)

## Article
Blog :scroll: [How to: React, Redux, Virtual DOM, State Management & One-way Data Flow](https://www.microverse.org/blog/how-to-react-redux-virtual-dom-state-management-one-way-data-flow)

## Responsive Design
### Landing Page

| ![screenshot](/src/assets/mobilescreen.png) |![screenshot](/src/assets/tabletscreen.png) | ![screenshot](/src/assets/lgscreens.png) | 
|:---:|:---:|:---:|
| Mobile view | Tablet view | Laptop view |


### Meal Details Page

| ![screenshot](/src/assets/detailsMobileScreen.png) |![screenshot](/src/assets/detailsTabletScreen.png) | ![screenshot](/src/assets/detailsLaptopScreen.png) | 
|:---:|:---:|:---:|
| Mobile view | Tablet view | Laptop view |

## Built With

- HTML5, CSS3, & JavaScript
- React
- Redux

## Instructions
To get a local copy up and running follow these simple example steps.

### Prerequisites
- Gitbash installed to navigate between the branches.
- A preferred text editor for example VS Code.
- A browser such as Google Chrome

## Install
Clone this [GitHub Repo](https://github.com/KabohaJeanMark/yummymeals/) to your computer on yourFolder by typing these commands in the terminal or download as a Zip file and extract.
```
$ mkdir yourFolder
$ cd yourFolder
$ git clone https://github.com/KabohaJeanMark/yummymeals/

```

## Available Scripts

In the project directory, you can run:

### `npm install`

npm install downloads a package and it's dependencies.\
npm install downloads dependencies defined in a package. json file and generates a node_modules folder with the installed modules.

This helps you to install all of the packages required by this application to help it to run. These packages are stored in a folder that has been ignored by the file .gitignore. That is why you do not see the folder node_modules on your computer after cloning this project.

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\

![wactchtests](src/assets/watchtests.png)

Press a to run all tests

![alltests](src/assets/alltests.png)

## How to Use
You can easily filter meals depending on categories and add click on their recipes to view more of their details.

![categories](src/assets/categories.png)

By clicking on the recipe, you link to a details page with an explanation of how to create that meal.
There is also a link to a YouTube video explaining how to prepare the meal with a demo walkthrough.

![details](src/assets/mealdetails.png)

## Author

üë§ **Kaboha Jean Mark**

- GitHub: [@KabohaJeanMark](https://github.com/KabohaJeanMark)
- Twitter: [@jean_quintus](https://twitter.com/jean_quintus)
- LinkedIn: [Jean Mark Kaboha](https://www.linkedin.com/in/jean-mark-kaboha-software-engineer/)


## ü§ù Contributing

Contributions, issues, and feature requests are welcome!

Feel free to check the [issues page](https://github.com/KabohaJeanMark/yummymeals/issues).

## Show your support

Give a ‚≠êÔ∏è if you like this project!

## Acknowledgments

- Hat tip to Microverse for the README template, instructions and tutoring for this Capstone project.

## üìù License

This project is [MIT](./LICENSE) licensed.
",5,5,1,0,food,"[api-client, food, foodie, react]",72
satyawikananda,yummy,,https://github.com/satyawikananda/yummy,https://api.github.com/repos/yummy/satyawikananda,A simple wrapper themealdb.com API for Deno ü¶ï,,4,4,1,0,food,"[deno, food, typescript, yummy]",72
ZhiaDev,foodgram,,https://github.com/ZhiaDev/foodgram,https://api.github.com/repos/foodgram/ZhiaDev,"‚àû Foodgram, a social media app","# Foodgram

Foodgram, which is a food-sharing social network, has been built using Flutter and is a redesigned version of Instagram.

This new platform allows users to share pictures and videos of their food and connect with other food lovers around the world.

Designed with Flutter's cutting-edge technology, Foodgram provides a seamless user experience that is both visually stunning and intuitive to use.",4,4,1,0,food,"[flutter, flutter-app, food, food-app, instagram, social-media, social-network]",72
iamraufu,rabeya-food-fitness,,https://github.com/iamraufu/rabeya-food-fitness,https://api.github.com/repos/rabeya-food-fitness/iamraufu,Rabeya's Healthy Food and Fitness Center,"# Rabeya's Food and Fitness Center

**Rabeya's Food and Fitness Center** is Country's First ever Complex site where anyone can get nutritionist help along healthy food diet.


## Features:

<ol>
      <li>Homepage (5 sections minimum)
            <ul>
                  <li>Top Banner</li>
                  <li>Products</li>
                  <li>Service Review</li>
                  <li>Recent Projects/ Top Selling Product</li>
                  <li>Review</li>
                  <li>Footer</li>
            </ul>
      </li>
      <br>
      <li>
            If User logged in or click ‚ÄúBuy Now‚Äù it will redirect to product details and later to product/ service detail page and if user not logged in it will take user to log in page, after login, user will be taken to details page. (<b>Firebase Authentication</b>)
      </li>
      <br>
      <li>
            After details user will be able to buy or remove the product. After buy user will give name, address, phone number and product name and price will be saved to MongoDB server. Payment will be received through credit card. (<b>Stripe Payment Gateway</b>)
      </li>
      <br>
      <li>
            After Login -> User and Admin Both will be able to view Dashboard where the dashboard will be different for both user and admin.
            <ul>
                  <li>
                        User will be able to check order
                  </li>
                   <li>
                        User can add review which will be dynamically added to the UI
                  </li>
                   <li>
                        Admin can see all the orders
                  </li>
                   <li>
                        Admin can add new people to the admin database
                  </li>
                   <li>
                        Admin can add new Product which will be added to the UI dynamically
                  </li>
                   <li>
                        Admin can have CRUD operations i.e. Create New Product, remove product from the database if unavailable, also read all the products which will be loaded in the UI.
                  </li>
            </ul>
      </li>
</ol>


### Bonus

<ol>
      <li>If possible, I will add animation to the UI</li>
      <li>Mostly I will make the UI Responsive</li>
</ol>


## Technology

<ul>
      <li><b>Frontend</b>: React JS, Bootstrap or any other framework like Material UI, Tailwind CSS</li>
      <li><b>Backend</b>: Node JS, Express JS</li>
      <li><b>Database</b>: MongoDB</li>
      <li><b>Authentication</b>: Firebase</li>
</ul>

## Live Website Link

https://rabeya-food-fitness.web.app/
",4,4,1,0,food,"[fitness, fitness-center, food, mongodb, nodejs, rabeya-food, react-router-dom, reactjs, socket-io, video-chat]",72
palle-k,SeeFood,,https://github.com/palle-k/SeeFood,https://api.github.com/repos/SeeFood/palle-k,Oculus? I said octopus.,"# SeeFood+TechCrunch

> Oculus? I said octopus.

![img](https://raw.githubusercontent.com/palle-k/SeeFood/master/Screenshot.jpg)

SeeFood and TechCrunch combine your senses to give you the experience of eating food while having zero calories! (If you don't bite too hard)

### SeeFood

SeeFood gives you the visual experience of eating food through virtual reality. You can see and touch your food virtually and move it to your mouth to eat it.

### TechCrunch

TechCrunch gives you the gustatory experience of eating food through thermal and electrical stimulation of the tongue. 
By heating or cooling your tongue or by providing weak high frequency currents at the tip of your tongue, you will be able to taste your food.
",4,4,4,0,food,"[food, htc-vive, taste, unity, unity-3d, unity-vr, vive]",72
gokulkrh,Food-Image-to-Recipe-Converter,,https://github.com/gokulkrh/Food-Image-to-Recipe-Converter,https://api.github.com/repos/Food-Image-to-Recipe-Converter/gokulkrh,A food image to recipe converter for Indian food.,"# Food-Image-to-Recipe-Converter
<a href=""https://colab.research.google.com/drive/1TnX3rEkcR11njx0--v-2msGwgRokLbro?usp=sharing"">Colab notebook</a>

This project implements a food image to recipe converter for Indian food. 

## Dataset
The dataset used in this project can be obtained by running the `scraper.py` script.

All the recipes in this dataset are scraped from <a href=""https://www.food.com/"">food.com</a> with ""Indian"" as search term. A total of 786 unique Indian recipes are taken from the website.

The recipes from the website are scraped and saved as a JSON file, google_images_download library is used to download images. For each recipe 10 images are downloaded for training and 2 for testing.

A total of 9432 images are downloaded (7860 train and 1572 test)

## Method
This is a fairly complicated task, I mean humans use several senses like sight, smell and taste to differentiate between food, an algorithm can't do that, well at least not yet, and on top of that a lot of Indian dishes look the same (hey, even a human can't tell the difference between ""chicken curry"" and ""chicken tikka masala"" just by looking at it).

Running the `generate_encodings.py` script encodes each image and saves it in encodings.txt along with the corresponding recipe names in enc_names.txt.

The input image is first encoded and then the cosine similarity between the image vector and images in the dataset are calculated, now due to the reasons mentioned earlier, a total of 10 predictions will be taken for each image and if at least one of them is correct, well YAY!!.

Densenet201 was used to encode the images, out of all the models tested, this showed the highest accuracy (58%), which is pretty decent for this task, you know, because of the stuff mentioned before.

## SeeFood Website
<img src=""SeeFood/WebApp/static/WebApp/title.png"" width=""500"">

The web application is made using django.

You can upload a food image or, on mobile, you can take a picture. The system fetches 4 recipes that are visually most similar to the uploaded image, if your not happy with the result there is an option to show 4 more reciepes.
<br><br>
![](https://github.com/gokulkrh/Food-Image-to-Recipe-Converter/blob/main/mobile_demo.gif)<br>
This is a demo of the web application on mobile devices.

In the above example a picture of a vegetable puffs are taken and the application gave the correct recipe.
<br><br><br><br><br><br>
**reference:** http://pic2recipe.csail.mit.edu/
",4,4,2,3,food,"[convolutional-neural-networks, deep-learning, densenet201, django, food, indian-food, keras, recipes, web-scraping]",72
