Unnamed: 0,repo,user,organization,url (HTML),url (API),description,readme,stargazer count,watcher count,subscriber count,open issue count,topic (search),topics,NAICS Code
0,jerryxyx,AlphaTrading,,https://github.com/jerryxyx/AlphaTrading,https://api.github.com/repos/AlphaTrading/jerryxyx,"An workflow in factor-based equity trading, including factor analysis and factor modeling. For well-established factor models, I implement APT model, BARRA's risk model and dynamic multi-factor model in this project.","# Multi-Factor Models

Author: Jerry Xia

Date: 2018/07/27

*Note: The advanced Marckdown features such as math expression may not be compatible in GitHub, please see README.pdf instead if you want more details*



## Project Introduction
This is a research survey about alpha trading. In this project, I built up a pipeline of alpha trading including:

* factor pretest
* factor screening
* factor combination (modeling)

The models involed are APT models, Barra's risk models and dynamic factors model using Kalman filter.

### Files

* rqdata_utils.py: Utils dealing with the rice quant platform data

* Step1_FactorPretest.ipynb: Factor returns profile visulization

* Step2_FactorsScreening.ipynb: Factor returns turnover visulization and correlation coefficients

* Step3\_FactorCombination\_AdaBoost\_Quantopian.ipynb: A Quantopian notebook file to combine alpha factors using Adaboost

* Step3\_FactorCombination\_BarraKalmanFilter.ipynb: Barra's risk model with three calibration schemes:
	* Scheme 1: Cross-sectional regression and weighted average
	* Scheme 2: Optimization problem: minimize the exponential weighted average of squared error
	* Scheme 3: Dynamic linear model using Kalman filter

* KalmanFilterIntro.ipynb: An introduction to the dynamic multi-factor model
* APT_FammaBeth.ipynb: Using Famma-Macbeth regression to calibrate APT model.

### Dataset
The dataset is not available in GitHub as it is too large. Except for Step3\_FactorCombination\_AdaBoost\_Quantopian.ipynb which we used US stock data in Quantopian, among other files, we used Chinese A-stocks data downloaded from RiceQuant instead (hard for free US equities' data). 

The data frame is multi-indexed similar to Quantopian's format(see both Alphalens github codes and rqdata_utils.py). However, feel free to cast and apply your own dataset.


## TODO

* Input more effective factors: take advice from people and industry reports
* Should add technical analysis, because it matters! People care about them and then make it good sentimental indexes.
* Find well-known metrics to express results

## Workflow
$\checkmark$ stands for finished and $\vartriangle$ stands for TODO

* Universe definition
* Factors collection and preprocessing
	* $\vartriangle$Factors collection
		- Sources
			- balance sheet
			- cash flow statement
			- income statement
			- earning report
		- Econometric Classifications
			- value
			- growth
			- profitability
			- market size
			- liquidity
			- volatility
			- Momentom
			- Financial leverage (debt-to-equity ratio)
	* Factors preprocessing
		- $\vartriangle$daily, quaterly, annually
		- continuous: rescale, outliers
		- $\checkmark$discrete: rank
* Factors screening and combination
	* Factors screening
		- $\checkmark$Factors' correlation
		- $\checkmark$Factors' foreseeablity
		- Fama-Macbeth regression
	* $\vartriangle$Factors combination
		- PCA, FA
		- Techniqual Analaysis
		- Financial Modeling
			- $\checkmark$APT model
			- $\checkmark$Barra's risk model
			- $\checkmark$Dynamic multi-factors model
		- Linear combination to maximize Sharpe ratio
		- Non-linear learning algorithms
			- $\checkmark$AdaBoost
			- Reinforcement learning

* Portfolio allocation


## Factors' Correlations
Here, I use correlation matrix as the measure. The difference from the second result is that the correlation matrix is calculated by the rank data rather than the raw data
### Two ICs comparison
* Pearson's IC: measures linear relationship between components

* Spearman's IC: measures monotonic relationship between components. Since We only care about the monotonic relationships. Spearman's IC wins.


### Regular IC(Pearson's correlation coefficient) for each factors
![](report/Corr_matrix_for_raw_factors.png)
### Spearman's Rank correlation coefficient for each factors
![](report/Corr_matrix_for_factor_ranks.png)

### How to rule out redundant factors and why Spearman's rank correlation coefficients?
From the correlation coefficients below, we can again conclude that Spearman's rank IC is far more robust. Take ps_ratio and sales_yield as a example.
$$ps\_ratio = \frac{\mbox{adjusted close price}}{\mbox{sales per share}}$$
whereas
$$sales\_yield = \frac{\mbox{sales per share}}{\mbox{price}}$$
Ahthogh the price in sales_yield formula is vague in our data source we can see roughly speaking, these two variable should be inverse of each other. The Spearman's rank correlation coefficient is -0.98 which verifies this statement, and we should avoid using both of these factors, which would exeggarate the impact of this peticular factor. However, we can not see such identity in the Pearson's regular correlation coefficients. It's quite misleading actually and that's why we choose Spearman's rank IC.

## Factors' Foreseeability

### Methods
* Spearman's rank correlation coefficients
* Fama-Macbeth regression: Not only consider the foreseeability of factors itself but also consider the co-vary of different factors, which means rule out factors if the returns can be explained by the recent factors.


### Spearman's rank IC for factors vs. forward returns

![](report/mean_spearmans_rank_IC.png)

### Spearman's rank IC (absolute value) for factors vs. forward returns
![](report/mean_spearmans_rank_IC_absolute_value.png)

### Rank of the Spearman's rank IC (absolute value) for factors vs. forward returns
![](report/rank_of_mean_spearmans_rank_IC_absolute_value.png)

## Factors Preprocessing
* Get ranked data
* Obtain the valid stocks set
* Reshape the data: only valid stocks set
* Fill null: using daily average
* Rescale the data: MinMaxScaler
* Variable reduction: PCA analysis
* Sanity check

![](report/corr_comparison_after_pca_analysis.png)

Here, I use principle component analysis because it can brings two benefits to our data - orthogonality and dimensionality reduction. Orthogonality makes data more separate, less dimensionality makes information more concentrated. Either of them is essential for machine learning algorithms.

In the next part, I used this preprocessed data as the input to obtain a ""mega alpha"".

## Mega Alpha
construct an aggregate alpha factor which has its return distribution profitable. The term ""profitable"" here means condense, little turnover, significant in the positive return.
### Methods
#### linear methods
* normalize factors and try a linear combination 
* rank each factor and then sum up
* Financial modeling: **See the appendix and Step3\_FactorCombination\_BarraKalmanFilter.ipynb**
* linear combination to maximize Sharpe ratio

#### Non-linear methods
* AdaBoost: **See Step3\_FactorCombination\_AdaBoost\_Quantopian.ipynb**
* Reinforement Learning


Here we only introduce AdaBoost algorithm in this documentation. For more details about the linear models, please See the appendix and Step3\_FactorCombination\_BarraKalmanFilter.ipynb.

### AdaBoost
#### Description
The algorithm sequentially applies a weak classification to modified versions of the data. By increasing the weights of the missclassified observations, each weak learner focuses on the error of the previous one. The predictions are aggregated through a weighted majority vote.

#### Algorithm

![](report/adaboost_algorithm.png)

#### Train set
The adaboost classifier was applied to our fundamental dataset. The objective is to train a classifier which give a score for the bunch of factors. Or in other word, the mega alpha. Pink for the positive forward returns observations and blue for the negative forward returns observations. A good score system is to make the two classes more separated.
![](report/train_score_dist.png)
We can see, in train set, AdaBoost classifier did so well! The next plot is the precision in each quantile of scores. In the top and bottom quantile, the predicted precision is nearly 100%!
![](report/train_accuracy_bar.png)

#### Test set
alpha values histogram
![](report/test_score_dist.png)
quantile precision bar plot
![](report/test_accuracy_bar.png)
The precision in the top and bottom quantile is only slightly higher than 50%. Far from good if we considered transaction cost. 

So, I added some technical analysis factors to see if we can tackle this problem.
![](report/train_score_dist2.png)
Surprisingly, even the average accuracy in test set is about 67%. What if we only trade the extreme quantile? That is around 80% accuracy! It literally shows that technical factors are really important in US stock market and can be used to find arbitrage opportunity.

## References
* Jonathan Larkin, *A Professional Quant Equity Workflow*. August 31, 2016
* *A Practitioner‘s Guide to Factor Models*. The Research Foundation of The Institute of Chartered Financial Analysts
* Thomas Wiecki, Machine Learning on Quantopian
* Inigo Fraser Jenkins, *Using factors with different alpha decay times: The case for non-linear combination* 
* PNC, *Factor Analysis: What Drives Performance?*
* O’Shaughnessy, *Alpha or Assets? — Factor Alpha vs. Smart Beta*. April 2016
* *O’Shaughnessy Quarterly Investor Letter Q1 2018* 
* Jiantao Zhu, Orient Securities, *Alpha Forecasting - Factor-Based Strategy Research Series 13*
* Yang Song, Bohai Securities, *Multi-Factor Models Research: Single Factor Testing*, 2017/10/11


## Appendix: Notes on Factor Models

### CAPM
* Author: Markovitz(1959)
* single-factor: 
* explain: security returns

### APT
* Author: Stephen A. Ross(1976)
* multi-factor
* explain: security returns

#### Postulates:
- The linear model
$$r_i(t) - \alpha_i = \sum_{k=1}^K \beta_{ik} \cdot f_k(t) + \epsilon_i(t)$$

where $f_k(t)$ is the realization(value) of risk factor at time t

- No pure arbitrage profit

#### Conclusion
* Exposure of each security on each factor
* Risk premium on each factor
$$(Mean[r_i(t)])_i = P_0 + \sum_{k=1}^K \beta_{ik} \cdot P_k$$
or make $\beta_{0,k}$ equals 1 for each k,
$$(Mean[r_i(t)])_i = \sum_{k=0}^K \bar{\beta}_{i,k} \cdot P_k$$
where $P_0$ is the risk free return

* Portfolio exposure to each factor
$$Portfolio_{it} = \beta_0 + \beta_k \cdot f_{kit}$$



#### Three alternative calibration methods
* **statistical techniques** such as factor analysis, principle analysis
	- **Goodness**: good for determining the number of relevent risk factors
	- **Undesirable**: hard to interpret
	
* **portfolios**: K different well-diversified portfolios as substitutions
	- **Goodness**: lead to insights
	- **Fama-Macbeth regression**

* **economic theory** (highly developed art)
	- **Goodness**: Intuitively appealing set of factors that admit economic interpretation of risk exposures
	- **Goodness**: Using economic information in addition to stock return. Avoid using stock return to explain stock return
	- **factors**: 
		1. confidence risk
		2. time horizon risk
		3. inflation risk
		4. bussiness cycle risk
		5. market-timing risk

#### Generalizations
The simplicity of APT framework is a great virtue. It is helpful to understand the true sources of stock returns. The basic APT model can be enhanced in many ways.

* Allow risk prices $P_k$ to vary over time
* Allow risk exposures $\beta_{i,k}$ to vary over time
* Use Bayesian mothods to produce optimal out-of-sample forcasts for the risk exposures and hence for the expected returns
* Introduce additional factor with zero-risk prices. Although do not contribute to expected return, help to explain the volatility.

### Multi-Index Models (Factor Analysis & PCA)

#### Goal
Using historical return extract the factors

$$r_{it} = \alpha_i + \sum_k \beta_{ik}\cdot f_{kt}$$
where
$$E[\epsilon_{it} \epsilon_{jt}]=0$$
$$E[\epsilon_{it} f_{kt}]=0$$

$f_{kt}$: the return on index k inperiod t

$\beta$: sensitivities

#### Estimation
Either exposure or factor return can be asserted on a priori grounds with the other identified empirically, or both can be identified empirically.

#### Characteristics
* Have f(indexes) represents separate influence
* The structure must be parsimonious: the returns can be described in terms of limited indexes

#### Statistical Solutions
Let the data design the model

* PCA
* Factor Analysis: better in heteroscedastic series

#### Design Issue
* **The Choice of Data**: Individul stocks vs portfolio
* **The number of Index**:
	- Stactical techniques: Factor analysis, PCA 
	- Common sense and economic significance play a major role in deciding on the number of factors
* **The nonuniqueness of Factors**: The researcher should realize the resulting structure is not unique. Some researchers will examine alternative structures in an atempt to understand what influences are affecting security returns and to convince themself the overall separation make an intuitive sense
* **Computational Problems**:
	- Roll and Ross: Multisample approach
	- Chen: Portfolio approach

#### Applications
* **Identify the Indexes set**
* **Determine the number of factors**: PCA / Factor Analysis
	- Single-group tests for each sample
		- Factor Analysis on return-generating process
		- Criteria: Chi2, AIC, **BIC**
	- Multiple-group tests for all stocks
		- Canonical Correlation (CCA): 
		
			take two sets of variables and see what is common amongst the two sets (can be two noncorresponding variables either on index or dimension)
			$$X_{N \times K}, Y_{N \times K^{\prime}}$$
			$$\mbox{x_weights}_{K,n}$$
			$$\mbox{y_weights}_{K^{\prime},n}$$
			Use CCA / PLS:
			$$\mbox{X_score}_{N\times n} = \mbox{Normalized}[X]_{N \times K} \mbox{x_weights}_{K,n}$$
			
			$$\mbox{Y_score}_{N\times n} = \mbox{Normalized}[Y]_{N \times K^{\prime}} \mbox{y_weights}_{K^{\prime},n}$$
		- Determin the number: 
			- r-value for $n=10$
			- correlation matrix pattern for each number of components: $n \times n$ for $n=1,\cdots,10$

* **Generate Factors**

* **Calibrate sensitivities**: 
	
	- Portfolio exposure to each factor
	- $Adjusted R^2$ (Should be stable)
	- Explanatory power: Compare these results with those for the single-index model (Should depend on the market cap)
	
* **Explanatory Power** of the Model for Each Stock: R2>0.7 excellent

#### Conclusions
* Goodness: simultaneously estimate the indexes and sensitivities in a multi-index model
* Defect: Data Minning: Using return to explain return


### Multi-Factor Models for Portfolio Risk (BARRA)

$$r_{i,t} = a_{i,t} + X_{i,k,t} \cdot f_{k,t}$$
where
$X_{i,k,t}$: the exposure of asset i to factor k known at time t
$f_{k,t}$: the factor return to factor k during the period from time $t$ to time $t+1$
$a_{i,t}$: the stock i's specific return during period from time $t$ to time $t+1$
$r_{i,t}$: the excess return (return above the risk-free return) on stock i during the period from time $t$ to time $t+1$

The risk structure
$$V_{i,j} = X_{i,k1} F_{k1,k2} X_{j,k2}^T + \Delta_{i,j}$$
$$V = X^T F X + \Delta$$
where

$F_{k1,k2}$ is the K by K covariance matrix for factor returns

$\Delta_{i,j}$ is the N by N diagonal matrix of specific variance

A portfolio described by an N-element vector $h_i$ 

* portfolio exposure: $x_p =  X^T h_p$
* portfolio variance: $\sigma_p^2 = x_p^T F x_p + h_p^T \Delta h_p = h_p^T V h_p$
* Marginal Contribution for Total Risk
$$MCTR = \frac{V h_p}{\sigma_p}$$
* Risk-adjusted expected return:
$$U = h_p^T r_p - \lambda\cdot h_p^T V h_p$$


#### Choosing the Factors
* External influences --> BARRA Model
	- Return in bond market (bond beta)
	- Unexpected changes in inflation
	- Change in oil price
	- Change in exchange rate
* Cross-sectional comparisons
	- Fundamental
	- Market
		- volatility
		- price
		- share turnover
* Purely internal or statistical factors
	- see multi-index model

#### Exposures
* Industry Exposures
	- 1/0 variable
* Risk Index Exposures
	- Volatility: beta, daily return vol, option implied vol
	- Momentum
	- Size
	- Liquidity
	- Growth
	- Value(Fundamentals)
	- Earning volatility
	- Financial leverage: debt-to-equity ratios

#### Applications
* Rescale the Exposures
* Regress the Factor Returns Against Exposures via Cross-sectional Regression
$$f = (X^T W X)^{-1} (X^T W r)\\
= \sum_{i=1}^N C_{k,i} r_i$$
Here factor return can be interpreted as the return to a portfolio with weights $C_{k,i}$. So factor returns are the returns to factor portfolios. This portfolio has unit exposure to the particular factor
* Factor Covariance and Specific
	- Stock returns
	- Factor exposures
	- Stock dividends, splits, and other adjustment

#### Model Validation
* Model Setting:
	- 50 factors
	- 1000 assets
* Measures:
	
	- $R^2$: 30-40%. It can vary quite significantly from month to month. And depends on the market return level.
	- root mean square error: 6% roughly against 10% volatility
	- Portfolio Risk
* Goal:
	- Expain the portfolio risk
	- Forecast variances and covariances of factors and specific returns
	- Providing incisive, intuitive and interesting risk analysis


You can think of this as slicing through the other direction from the APT analysis, as now the factor returns are unknowns to be solved for, whereas originally the coefficients b were the unknowns. Another way to think about it is that you're determining how predictive of returns the factor was on that day, and therefore how much return you could have squeezed out of that factor.
",271,271,13,1,equity-markets,"[adaboost, apt-model, barra-model, equity-markets, factor-analysis, factor-returns, kalman-filter, trading-strategies]",0.0
1,soumendrak,stock_price_change_alert,,https://github.com/soumendrak/stock_price_change_alert,https://api.github.com/repos/stock_price_change_alert/soumendrak,Send SMS if any of the predefined share price fluctuates above a certain customizable level.,"[![Stories in Ready](https://badge.waffle.io/soumendrak/stock_price_change_alert.png?label=ready&title=Ready)](https://waffle.io/soumendrak/stock_price_change_alert?utm_source=badge)
![image](https://travis-ci.org/soumendrak/stock_price_change_alert.svg?branch=master)
# stock_price_change_alert
Send SMS if any of the predefined share price fluctuates above a certain customizable level.
## Usage
`git clone https://github.com/soumendrak/stock_price_change_alert.git`
### Changing user specific values
Change the following values in `customizable_data.py` file.
- `numbers`:   Mention a list of number(s) to which you want to send SMS.
- `username`:  Username of your Way2SMS account.
Most probably the username will be your registered mobile number.
- `password`:  Password for your Way2SMS account.
- `username` and `password` can be obtained by registering at http://site23.way2sms.com/content/index.html
- `watchlist`: You can update this with the shares for which you want to monitor.
- `defined_limit`: This is the threshold limit in percetages. If the share price increased or decreased
above the mentioned limit, it will trigger for SMS.
### Running the program
`python stock_alert.py`
### Output
> Checking quotes for EICHERMOT  
> EICHERMOT:0.58  
> Checking quotes for INDIGO  
> INDIGO:-4.12  
> sending SMS for INDIGO  
> sending `INDIGO price has DOWN by 4.12 percent. to ['XXXXXXXXXX']`  
> success  
> SMS for INDIGO sent successfully  
> Checking quotes for SBIN  
> SBIN:-0.84  


You will receive `INDIGO price has DOWN by 4.12 percent.` in your mentioned number.
",15,15,3,0,equity-markets,"[equity-markets, finance, nse-stock-data, stock-market]",0.0
2,boyac,pyFolio,,https://github.com/boyac/pyFolio,https://api.github.com/repos/pyFolio/boyac,"Performance attribution analysis, value investment, original investment ideas, alpha seeking","# pyFolio
## Content
- use python 2.7
- attribution analysis of excess returns
- portfolio construction
## Your Support
- You can contribute to the project by reporting bugs, suggesting enhancements, exchanging portfolio management experiences or
you can make a donation to this project:
</br>*[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://paypal.me/boyac?locale.x=en_US)
***
### StrBeta
![alt tag](image/ec.png)
![enhanced](image/ec02.png)


### Str01
- CAGR(annualized return): approx. 25%
- MDD: approx. -12%
- Sharpe Ratio: >1.5-1.8

** returns should be higher/lower since some days are missing from the data

| DATE | MSCI World | Port_01 | Port_02 |
| --- | --- | --- | --- |
| TOTAL RETURN | 3.16% | 6.60% | 5.75% |
| EXCESS RETURN | n/a | 3.44% | 2.59% |
| # OF HOLDINGS | 1,632 | <100 | <100 |
| 20190320 | 0% | 1.29% | 1.29% |
| 20190321 | 0.75% | 0.90% | 0.90% |
| 20190325 | -1.56% | -1.98% | -1.05% |
| 20190326 | -0.37% | -0.07% | 0.10% |
| 20190327 | 0.75% | 0.09% | 0.53% |
| 20190329 | 0.06% | 0.02% | 0.06% |
| 20190401 | 0.60% | 0.62% | 0.76% | 
| 20190409 | 1.14% | 1.38% | 0.63% | 
| 20190415 | 0.55% | 0.57% | 0.43% | 
| 20190416 | 0.08% | 0.22% | 0.32% | 
| 20190417 | 0.09% | 0.03% | -0.35% | 
| 20190423 | 0.06% | 0.75% | 0.23% | 
| 20190429 | 0.39% | 1.05% | 0.58% | 
| 20190503 | -0.41% | -0.41% | -0.27% | 
| 20190513 | 0.33% | 0.11% | 0.61% | 
| 20190516 | 0.55% | 2.03% | 1.01% | 


### Sectors(ciphered)
B41211
B4129
B41225
B41221
B41222
B41216
B4123
### Holdings(ciphered)
A455
D2111
4
A11612
A319620
B2
B1
B11416
A31313
A132614
H4
A334
A01410
A665
B1148
A67
A115
A6516
F2
G15157
G1515712

***

### Stra02
- Compound Return 2009-2017 / Index High Dividend Growth

| YEAR | TOP TEN | TOPIX | ALPHA | WINNER |
| --- | --- | --- | --- | --- |
| 2009-2010 | n/a | n/a | n/a | n/a |
| 2010-2011 | -6.17% | -9.83% | 3.66% | Top Ten |
| 2011-2012 | 15.03% | 1.37% | 13.66% | Top Ten |
| 2012-2013 | 17.46% | 23.66% | -6.20% | TOPIX |
| 2013-2014 | 15.67% | 2.58% | -6.91% | TOPIX |
| 2014-2015 | 37.19% | 30.54% | 6.65% | Top Ten |
| 2015-2016 | -3.68% | -10.07% | 6.39% | Top Ten |
| 2016-2017 | 33.39% | 18.80% | 14.59% | Top Ten |
| 2017-2018 | 34.93% | 15.33% | 19.60% | Top Ten |
|  |  |  |  |  |
| 2010-2015 | 86.71% | 74.09% | 12.62% | Top Ten |
| 2011-2016 | 91.88% | 73.38% | 18.50% | Top Ten |
| 2012-2017 | 117.73% | 95.86% | 21.87% | Top Ten |
|  |  |  |  |  |
| 2009-2017 | 212.92% | 103.61% | 109.31% | Top Ten |

***


### Analyst Journey 2017-
- Conducted fundamental investment analysis of the Japanese and South Korean markets and the utilities and renewable energy sectors. Conducted bottom-up research and successfully uncovered an undervalued utilities stock, suggesting an overweight to the benchmark. The electricity stock rebounded by over 391% in 2 months (initiated on Jan 16, 2019). Keywords: chapter 11, chapter 7, list of fires history.

- Presented Japanese economic and market views to external and internal clients and made profitable buy and sell calls for the Nikkei 225 in 2018 and 2019. Gave a 'Sell' rating before a market correction (-21%) in Oct. 2018 and met the target price within 1% in 2019.

- Derived comprehensive analysis of selected stocks from emerging markets. Raised the target price from THB59.7 to THB76 (52 Week High THB77.8).

- Covered the utilities sector and initiated a target price of USD140 with a 'Buy' investment rating, outperforming the low-volatility benchmark by over 3%.

- Generated thematic strategy research on equity investment, attribution analysis, and backtesting.

- Reviewed investment returns, risks, activities, and other investment-related issues in a timely and comprehensive manner.

- Created a portfolio attribution analysis module using Python and automated abnormal stock volatility calculations using VBA.
- ![alt tag](image/alpha01.jpeg)
",10,10,4,1,equity-markets,"[benchmark, equity, equity-markets, investment, portfolio-analysis, portfolio-management]",0.0
3,sriram-ptr,indian-equity-portfolio-summarizer,,https://github.com/sriram-ptr/indian-equity-portfolio-summarizer,https://api.github.com/repos/indian-equity-portfolio-summarizer/sriram-ptr,"At the comfort of terminal command prompt, get the summary reports for each stock as well as the whole equity portfolio with information about realized and unrealized(holding) gains/losses split into short term and long term. It also calculates taxable capital gain for your long term capital gains that need grandfathering. All you need to have is a list of your portfolio transactions in a CSV file. Most brokerage websites allow you to download the list of transactions as a CSV. ","# Indian Equity Portfolio Summarizer
* Given the equity portfolio transactions as a CSV file(refer `sample_portfolio.csv` in the repository), you can get the following information:
  * For each stock:
    * one line realized summary with the short term realized gain/loss, long term realized gain/loss and total realized gain/loss
    * details on each sell transaction where a gain or loss was realized, matched against its buy transaction
    * one line holding summary with the short term unrealized gain/loss, long term unrealized gain/loss and total unrealized gain/loss
    * details on each buy transaction where there is no corresponding sell transaction (shares being held)
  * For whole portfolio:
    * Realized Summary - one line per stock giving the short term and long term gain/loss realized from the stock
    * Holding Summary - one line per stock which are being held with the short and long term unrealized gain/loss from the stock
* Only transactions on Indian Stock exchanges NSE and BSE are supported.
* It also classifies the gain/loss as Short Term or Long Term capital gains according to Indian income tax laws. At the time of this writing, any gain/loss realized by selling a stock after one year since buying will be Long term capital gain and the same realized within one year would be Short term capital gain. 
* Indian Budget 2018 made long term capital gains taxable at 10% without indexation for shares sold on or after Apr 01, 2018. For the shares sold on or after Apr 01, 2018, the buy price is grandfathered based on the stock price on Jan 31, 2018 provided it is a long term transaction and the shares were bought before Jan 31, 2018.

## Requirements to run this code ##
* Transactions in a CSV file in the format explained below (you can refer `sample_portfolio.csv` in the repository)
* Python 2.7 or any version higher than that. Note that the latest version works on both Python 2.7 and 3.8 versions
* _googlefinance_ library, google finance APIs were used earlier. They are not supported anymore.
* One version was released using alphavantage APIs but these APIs do not return the data reliably even with retries.
* The latest version scrapes the bseindia and nseindia websites directly to get the real time market price of stocks.
* Other libraries used are: `csv23, json, requests, decimal, collections, texttable`

## Transactions File ##
* The first line of the file needs to contain the header given in the next line. It contains various fields that define a transaction.
* ___Symbol,Name,Type,Date,Shares,Price,Amount,Brokerage,STT,Charges,Receivable,Mode___
* Each line after the header represents a transaction with the transaction values specified in the same order as that of the header fields.
* ___The transactions should be listed in chronological order in this file___
* _Symbol_ - stock ticker value including the stock exchange informatio. For example, _NSE:VBL_ stands for _Varun Beverages_ in _NSE_, _BSE:500285_ stands for _Spicejet_ in _BSE_.
* _Name_ - name of the entity as given by the user
* _Type_ - value can be _Buy_ or _Sell_. We can have additional entries in the transactions file for Dividend, CashIn, CashOut to track dividend received and capital coming in and going out of the demat account.
* _Date_ - date of the transaction in _""MMM dd, YYYY""_ format.
* _Shares_ - number of shares involved in the transaction
* _Price_ - actual price of each share at which the transaction happened
* _Amount_ - this is the total amount involved in the transaction(_shares_ * _price_). For _Buy_ transactions, it is negative(money goes out) and for _Sell_ transactions, it is positive(money comes in).
* _Brokerage_ - actual brokerage incurred for the transaction
* _STT_ - Securities Transaction Tax imposed by the Indian Government for this transaction
* _Charges_ - all other charges for this transaction combined into this one component. This can include Stamp Duty, Transaction Charges, Service Charges and SEBI Turnover Tax.
* Receivable - This is the amount you will get after adjusting the _Amount_ for _Brokerage_, _STT_ and _Charges_. This is basically _Amount_ - (_Brokerage_ + _STT_ + _Charges_). You shell out more than what is required to buy the stock and you get lesser than the sale amount when you sell the stock
* Mode - This is the mode through which the trade is carried out. Its value can be _del_ or _sqr_. _del_ stands for delivery mode/cash and carry, _sqr_ stands for intra-day square off trade

## Sample Transactions File (contents of `sample_portfolio.csv` in the repository has been reproduced here) ##
```
Symbol,Name,Type,Date,Shares,Price,Amount,Brokerage,STT,Charges,Receivable,Mode
NSE:VBL,Varun Beverages,Buy,""Apr 08, 2016"",99,445,-44055,1.51,44,6.55,-44107.06,del
NSE:VBL,Varun Beverages,Sell,""Apr 17, 2017"",99,403.45,39941.55,199.71,40,35.47,39666.37,del
BSE:540678,Cochin Shipyard,Buy,""Aug 10, 2016"",30,411,-12330,0.01,12,3.31,-12345.32,del
BSE:540678,Cochin Shipyard,Sell,""Apr 10, 2018"",30,511,15330,0.01,9,2.31,15318.68,del
BSE:540716,ICICI Lombard,Buy,""Feb 27, 2017"",39,661,-25779,0.01,25,5.01,-25809.02,del
```
## Running the code ##
`
python equity_stats.py sample_portfolio.csv > output.txt
`

## Sample Output ##
* b_ - stands for buy; For example, b_date - buy date, b_charges - charges incurred during buy, b_value - buy value
* s_ - stands for sell; For example, s_date - sell date, b_charges - charges incurred during sell, s_value - sell value
* n_ - stands for net; n_charges - net charges (buy+sell), n_realized - net realized
* strg - short term realized gains, ltrg - long term realized gains
* h_value - holding value, h_charges - holding charges, j_price - price on Jan 31, 2018
* m_value - market value, m_price - market price
* u_pgain - unit gain w.r.t the b_price, u_cgain - unit gain w.r.t the b_cost
* stg - short term gains, ltg - long term gains, xltg - taxable long term gains

```
Varun Beverages (Realized Details)
===================================

+------------+------------+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+---------+-----+-----------+-----------+
|   b_date   |   s_date   | shares | b_value |  s_value  | b_price | s_price | u_pgain |  g_gain   | b_charges | b_cost  | u_cgain | s_charges | n_charges |  n_gain   | percent | j_price | x_price | stg |    ltg    |   xltg    |
+============+============+========+=========+===========+=========+=========+=========+===========+===========+=========+=========+===========+===========+===========+=========+=========+=========+=====+===========+===========+
| 2016-04-08 | 2017-04-17 |     99 |   44055 | 39941.550 |     445 | 403.450 | -41.550 | -4113.450 |    52.060 | 445.526 | -42.076 |   275.180 |   327.240 | -4440.690 | -10.080 |       0 |     445 |   0 | -4440.690 | -4440.690 |
+------------+------------+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+---------+-----+-----------+-----------+
| *--*       | *--*       |     99 |   44055 | 39941.550 |     445 | 403.450 | -41.550 | -4113.450 |    52.060 | 445.526 | -42.076 |   275.180 |   327.240 | -4440.690 | -10.080 |       0 |     445 |   0 | -4440.690 | -4440.690 |
+------------+------------+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+---------+-----+-----------+-----------+

Varun Beverages (One Line Realized Summary)
============================================

+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+-----+-----------+-----------+
| shares | b_value |  s_value  | b_price | s_price | u_pgain |  g_gain   | b_charges | b_cost  | u_cgain | s_charges | n_charges |  n_gain   | percent | j_price | stg |    ltg    |   xltg    |
+========+=========+===========+=========+=========+=========+===========+===========+=========+=========+===========+===========+===========+=========+=========+=====+===========+===========+
| 99     | 44055   | 39941.550 |     445 | 403.450 | -41.550 | -4113.450 |    52.060 | 445.526 | -42.076 |   275.180 |   327.240 | -4440.690 | -10.080 |       0 |   0 | -4440.690 | -4440.690 |
+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+-----+-----------+-----------+

Cochin Shipyard (Realized Details)
===================================

+------------+------------+--------+---------+---------+---------+---------+---------+--------+-----------+---------+---------+-----------+-----------+----------+---------+---------+---------+-----+----------+----------+
|   b_date   |   s_date   | shares | b_value | s_value | b_price | s_price | u_pgain | g_gain | b_charges | b_cost  | u_cgain | s_charges | n_charges |  n_gain  | percent | j_price | x_price | stg |   ltg    |   xltg   |
+============+============+========+=========+=========+=========+=========+=========+========+===========+=========+=========+===========+===========+==========+=========+=========+=========+=====+==========+==========+
| 2016-08-10 | 2018-02-10 |     30 |   12330 |   15330 |     411 |     511 |     100 |   3000 |    15.320 | 411.511 |  99.489 |    11.320 |    26.640 | 2973.360 |  24.115 |       0 |     411 |   0 | 2973.360 | 2973.360 |
+------------+------------+--------+---------+---------+---------+---------+---------+--------+-----------+---------+---------+-----------+-----------+----------+---------+---------+---------+-----+----------+----------+
| *--*       | *--*       |     30 |   12330 |   15330 |     411 |     511 |     100 |   3000 |    15.320 | 411.511 |  99.489 |    11.320 |    26.640 | 2973.360 |  24.115 |       0 |     411 |   0 | 2973.360 | 2973.360 |
+------------+------------+--------+---------+---------+---------+---------+---------+--------+-----------+---------+---------+-----------+-----------+----------+---------+---------+---------+-----+----------+----------+

Cochin Shipyard (One Line Realized Summary)
============================================

+--------+---------+---------+---------+---------+---------+--------+-----------+---------+---------+-----------+-----------+----------+---------+---------+-----+----------+----------+
| shares | b_value | s_value | b_price | s_price | u_pgain | g_gain | b_charges | b_cost  | u_cgain | s_charges | n_charges |  n_gain  | percent | j_price | stg |   ltg    |   xltg   |
+========+=========+=========+=========+=========+=========+========+===========+=========+=========+===========+===========+==========+=========+=========+=====+==========+==========+
| 30     | 12330   |   15330 |     411 |     511 |     100 |   3000 |    15.320 | 411.511 |  99.489 |    11.320 |    26.640 | 2973.360 |  24.115 |       0 |   0 | 2973.360 | 2973.360 |
+--------+---------+---------+---------+---------+---------+--------+-----------+---------+---------+-----------+-----------+----------+---------+---------+-----+----------+----------+

ICICI Lombard (Holding Details)
================================

+------------+--------+---------+-----------+---------+---------+---------+----------+-----------+---------+---------+-----------+-----------+----------+---------+---------+---------+-----+----------+---------+
|   b_date   | shares | b_value |  s_value  | b_price | s_price | u_pgain |  g_gain  | b_charges | b_cost  | u_cgain | s_charges | n_charges |  n_gain  | percent | j_price | x_price | stg |   ltg    |  xltg   |
+============+========+=========+===========+=========+=========+=========+==========+===========+=========+=========+===========+===========+==========+=========+=========+=========+=====+==========+=========+
| 2017-02-27 | 39     |   25779 | 29922.750 |     661 | 767.250 | 106.250 | 4143.750 |    30.020 | 661.770 | 105.480 |         0 |    30.020 | 4113.730 |  15.958 |     787 | 767.250 |   0 | 4113.730 | -30.020 |
+------------+--------+---------+-----------+---------+---------+---------+----------+-----------+---------+---------+-----------+-----------+----------+---------+---------+---------+-----+----------+---------+
| *--*       | 39     |   25779 | 29922.750 |     661 | 767.250 | 106.250 | 4143.750 |    30.020 | 661.770 | 105.480 |         0 |    30.020 | 4113.730 |  15.958 |     787 | 767.250 |   0 | 4113.730 | -30.020 |
+------------+--------+---------+-----------+---------+---------+---------+----------+-----------+---------+---------+-----------+-----------+----------+---------+---------+---------+-----+----------+---------+

ICICI Lombard (One Line Holding Summary)
=========================================

+--------+---------+-----------+---------+---------+---------+----------+-----------+---------+---------+-----------+-----------+----------+---------+---------+-----+----------+---------+
| shares | b_value |  s_value  | b_price | s_price | u_pgain |  g_gain  | b_charges | b_cost  | u_cgain | s_charges | n_charges |  n_gain  | percent | j_price | stg |   ltg    |  xltg   |
+========+=========+===========+=========+=========+=========+==========+===========+=========+=========+===========+===========+==========+=========+=========+=====+==========+=========+
| 39     | 25779   | 29922.750 |     661 | 767.250 | 106.250 | 4143.750 |    30.020 | 661.770 | 105.480 |         0 |    30.020 | 4113.730 |  15.958 |     787 |   0 | 4113.730 | -30.020 |
+--------+---------+-----------+---------+---------+---------+----------+-----------+---------+---------+-----------+-----------+----------+---------+---------+-----+----------+---------+

PortFolio Realized Summmary
============================

+--------+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+-----+-----------+-----------+
|  name  | shares | b_value |  s_value  | b_price | s_price | u_pgain |  g_gain   | b_charges | b_cost  | u_cgain | s_charges | n_charges |  n_gain   | percent | j_price | stg |    ltg    |   xltg    |
+========+========+=========+===========+=========+=========+=========+===========+===========+=========+=========+===========+===========+===========+=========+=========+=====+===========+===========+
| Varun  | 99     |   44055 | 39941.550 |     445 | 403.450 | -41.550 | -4113.450 |    52.060 | 445.526 | -42.076 |   275.180 |   327.240 | -4440.690 | -10.080 |       0 |   0 | -4440.690 | -4440.690 |
+--------+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+-----+-----------+-----------+
| Cochin | 30     |   12330 |     15330 |     411 |     511 |     100 |      3000 |    15.320 | 411.511 |  99.489 |    11.320 |    26.640 |  2973.360 |  24.115 |       0 |   0 |  2973.360 |  2973.360 |
+--------+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+-----+-----------+-----------+
| *--*   | *--*   |   56385 | 55271.550 |    *--* |    *--* |    *--* | -1113.450 |    67.380 |    *--* |    *--* |   286.500 |   353.880 | -1467.330 |  -2.602 |    *--* |   0 | -1467.330 | -1467.330 |
+--------+--------+---------+-----------+---------+---------+---------+-----------+-----------+---------+---------+-----------+-----------+-----------+---------+---------+-----+-----------+-----------+

PortFolio Holding Summmary
===========================

+-------+--------+---------+-----------+---------+---------+---------+----------+-----------+---------+---------+-----------+-----------+----------+---------+---------+-----+----------+---------+
| name  | shares | b_value |  s_value  | b_price | s_price | u_pgain |  g_gain  | b_charges | b_cost  | u_cgain | s_charges | n_charges |  n_gain  | percent | j_price | stg |   ltg    |  xltg   |
+=======+========+=========+===========+=========+=========+=========+==========+===========+=========+=========+===========+===========+==========+=========+=========+=====+==========+=========+
| ICICI | 39     |   25779 | 29922.750 |     661 | 767.250 | 106.250 | 4143.750 |    30.020 | 661.770 | 105.480 |         0 |    30.020 | 4113.730 |  15.958 |     787 |   0 | 4113.730 | -30.020 |
+-------+--------+---------+-----------+---------+---------+---------+----------+-----------+---------+---------+-----------+-----------+----------+---------+---------+-----+----------+---------+
| *--*  | *--*   |   25779 | 29922.750 |    *--* |    *--* |    *--* | 4143.750 |    30.020 |    *--* |    *--* |         0 |    30.020 | 4113.730 |  15.958 |    *--* |   0 | 4113.730 | -30.020 |
+-------+--------+---------+-----------+---------+---------+---------+----------+-----------+---------+---------+-----------+-----------+----------+---------+---------+-----+----------+---------+

```
",7,7,3,1,equity-markets,"[bsetools, capital-gain, equity-markets, grandfathering, india, india-budget-2018, indian-equity, indian-share-market, indian-stock-exchange, long-term-capital-gain, nsetools, portfolio-reports, portfolio-summarizer, portfolio-summary, share-market, short-term-capital-gain, stock-market-investors, stock-market-report-generator, stock-market-reports, taxable-ltcg]",0.0
4,scawful,premia,,https://github.com/scawful/premia,https://api.github.com/repos/premia/scawful,Risk Premia Trading Client,"# Premia

- Platform: Windows, macOS, GNU/Linux
- Dependencies: Boost, SDL2, ImGui, ImPlot, libCURL, OpenSSL

## Description
Premia is a general purpose financial market analysis and trading program. Currently, the program supports linking a TDAmeritrade API key to gain access to features like account information, watchlists, positions, and (soon) trading actions. The program also allows InteractiveBrokers users to connect to their TWS or IB Gateway application natively to support the same features as TDAmeritrade users. 

#### Supported Services: 
- TDAmeritrade
- InteractiveBrokers
- CoinbasePro
- IEXCloud 

More details about the future of Premia can be found on my website [halext.org/labs/Premia](https://halext.org/labs/Premia/)

Building and installation
-------------------------
[CMake](http://www.cmake.org ""CMake"") is required to build Premia 

1. Clone the repository

        git clone --recurse-submodules https://github.com/scawful/premia.git 

3. Create a build directory in the root workspace folder

        mkdir build
      
4. Move to the build directory and generate the build files specified in CMakeLists.txt

        cmake -G ""<MinGW Makefiles/Unix Makefiles>"" ../

4. Build and run.

        make Premia
        cmake --build <premia_root/build> --config Debug --target Premia

API Key Instructions
----------

For TDAmeritrade users to link their account, the program starts with a login window that takes as input your consumer key and refresh token.

Alternatively, you can create an apikey.txt and place it in the assets/ folder with your consumer key on the first line and the refresh token you generated on the second line for Premia to load those values for you. 

Screenshots
--------
![image](https://user-images.githubusercontent.com/47263509/167268560-f56c5394-9b8e-4a10-adb2-d6e03f1c3516.png)
![image](https://user-images.githubusercontent.com/47263509/167268589-1dfc254c-91cd-4106-b7cc-1684eec7b9f6.png)

<!-- ![image](https://user-images.githubusercontent.com/47263509/166610671-b83f32a4-bf72-46ef-a86b-17f7af3cc56b.png) -->
<!-- ![](https://i.ibb.co/99SsWWb/Screen-Shot-2022-03-06-at-3-46-48-PM.png)
<!-- ![](https://i.ibb.co/X8cSy1T/C15-E0-A46-8357-4-D8-A-BD9-F-15-CDA776-AAF1.png)
![](https://i.ibb.co/NjdT3GS/49-C38803-E56-D-4648-9-F9-F-704-E661-C0-D7-C.png)
![](https://i.ibb.co/JHD6MFK/Screen-Shot-2022-01-09-at-9-52-33-AM.png) -->
",6,6,2,17,equity-markets,"[equity-markets, options-trading, portfolio-construction, risk-management-software]",0.0
5,Ignacio1996,stocks-simple-api,,https://github.com/Ignacio1996/stocks-simple-api,https://api.github.com/repos/stocks-simple-api/Ignacio1996,Simple Stocks Fetching API made with Node.js and Express.js,"# Simple Stocks API made with Node.js

Node.js API to get updated stocks data.
Limited to 5 requests per minute.
Working with the Alphavantage API free version.

# Very limited functionality for now

If you get CORS issues, just plug in https://cors-anywhere.herokuapp.com/ before the fetch url

const request = await fetch('https://cors-anywhere.herokuapp.com/https://stocksapi.herokuapp.com/stock' ...  // code below

Sample single stock request with Javascript fetch:
```
const getStock = async ticker =>{
  console.log(""Getting data"");
  const request = await fetch('https://stocksapi.herokuapp.com/stock',{
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },

    body: JSON.stringify({
      'ticker': ticker,
      'type': 'daily'
    })
  })

  const data = await request.json()
  console.log(data);
  return data;
}

getStock('AAPL');
```

Sample multiple stocks request (with cors-anywhere to avoid CORS issues):

```
const getStocks = async tickersArray=>{
  console.log(""Getting data"");
  const request = await fetch('https://cors-anywhere.herokuapp.com/https://stocksapi.herokuapp.com/stocks',{
    method: 'POST', 
    headers: {
      'Content-Type': 'application/json'
      // 'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: JSON.stringify({
      'tickers': tickersArray,
      'type': 'monthly'
    })
  })

  const data = await request.json()
  console.log(data);
  return data;
}

getStocks(['AAPL', 'MSFT', 'DIA']);
```

# body params
types: 
'monthly' 
'daily'

ticker: 'any-ticker' //example 'AAPL'
tickers: ['multiple', 'tickers', 'array']



",6,6,2,5,equity-markets,"[equity-data, equity-markets, stocks, stocks-api, stocks-market]",0.0
6,csatzky,empirical-analysis-of-asset-pricing-beliefs,,https://github.com/csatzky/empirical-analysis-of-asset-pricing-beliefs,https://api.github.com/repos/empirical-analysis-of-asset-pricing-beliefs/csatzky,"In this study, I empirically and statistically investigate the credibility of common asset pricing beliefs using data from S&P 500® constituents from January 2010–December 2020.","# Model Implied Asset Pricing Beliefs: An Empirical Analysis for S&P 500<sup>®</sup> Constituents from 2010-2020

Currently, only the renderred PDF report is publicly accessible, i.e. ""empirical-analysis-of-model-implied-asset-pricing-beliefs.pdf"". The underlying dataset and the source code are available upon request. Please email c.satzky@gmail.com for further information.

## Abstract

Common investment beliefs result from academic research and conventional wisdom. In this study, I am deriving explicit and implicit investment hypotheses from the Capital Asset Pricing Model (Sharpe, 1964), the Fama and French 5 Factor Model (Fama and French, 1993), and common price multiples. I empirically investigate the credibility of these investment beliefs using data from S&P&nbsp;500<sup>®</sup> constituents from January 2010 to December 2020. The significance of each investment hypothesis is assessed by two methods of statistical evaluation. The goal of this research is to provide insights to asset managers in support of well-informed financial decision-making.

The hypotheses under investigation are definied a priori and include the following;

### Capital Asset Pricing Model
* _High Beta outperforms low Beta_

### Fama and French 5 Factor Model
* _Small outperforms Big_
* _High Value outperforms low Value_
* _Robust Profitability outperforms weak Profitability_
* _Conservative Investment outperforms aggressive Investment_

### Common Price Multiples
* _Low Price-to-Earnings ratio (PE) outperforms high PE_
* _Low Price-to-Revenue ratio (PR) outperforms high PR_
* _Low Price-to-Cash Flow (PCF) outperforms high PCF_

### Sharelab Limited Indicator
* _High GrowthSpread<sup>®</sup> (GS) outperforms low GS_
",3,3,1,0,equity-markets,"[asset-management, asset-pricing, empirical-research, equity-markets, equity-research, factor-investing]",0.0
7,guilhermessc,VaR-threshold-and-confidence-interval,,https://github.com/guilhermessc/VaR-threshold-and-confidence-interval,https://api.github.com/repos/VaR-threshold-and-confidence-interval/guilhermessc,This project studies the effects of the shape parameter estimator uncertainty at different threshold levels on the value-at-risk confidence interval for quantitative risk management (QRM) using the Generalized Pareto Distribution (GPD) from the Extreme Value Theory (EVT) approach.,,2,2,2,0,equity-markets,"[equity, equity-markets, equity-research, extreme-value-theory, finance, financial-risk, financial-risk-analytics, generalized-pareto-distribution, quantitative-risk-analysis, stock, stock-market, value-at-risk]",0.0
8,pSnehanshu,stock-market-botmaker,,https://github.com/pSnehanshu/stock-market-botmaker,https://api.github.com/repos/stock-market-botmaker/pSnehanshu,Design trading strategies and export bot as python file.,"# hynbotmaker

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```
",2,2,2,0,equity-markets,"[equity, equity-markets, python-bot, stock-market, trading, upstox, zerodha]",0.0
9,sguduguntla,Mercari-LAHacks,,https://github.com/sguduguntla/Mercari-LAHacks,https://api.github.com/repos/Mercari-LAHacks/sguduguntla,Essentially we are connecting individuals with ideas to individuals that can make those ideas into a reality.,"# Mercari

# Inspiration

As high–schoolers, we haven't had the opportunity to work with many companies or startups; however, with Mercari we are trying to connect people with ideas to those that can create the idea in exchange for equity in the company. Instead of working for no salary, anyone can bid on projects; if the seller – the person with the idea – agrees, they exchange contact information and can work together. Built at Los Altos Hacks 2016 with Jai Sankar, Varun Shenoy, and Anirudh Pai.

",1,1,5,0,equity-markets,"[business, css3, equity-markets, html5, investment, jquery, parse]",0.0
10,Jhonattanln,Factor-Investing,,https://github.com/Jhonattanln/Factor-Investing,https://api.github.com/repos/Factor-Investing/Jhonattanln,Factor Investing - Brasilian assests ,"# Factor Investing
 Factor Investing - Brasilian assests 
",1,1,1,0,equity-markets,"[equity-markets, factor-analysis]",0.0
11,alishersuyunov,opendatauzb,,https://github.com/alishersuyunov/opendatauzb,https://api.github.com/repos/opendatauzb/alishersuyunov,Downloading available datasets from an official open data source of Uzbekistan,"# opendatauzb 0.1.3

[![Travis build status](https://travis-ci.com/alishersuyunov/opendatauzb.svg?branch=master)](https://travis-ci.com/alishersuyunov/opendatauzb)

Downloading available datasets and Uzbek Stock Market data from official open data sources of Uzbekistan 

## RELEASE NOTES:
- Version 0.1.3 offers support of a vector/list of multiple securities in `getTicker()` function; now, `getTicker` accepts both security code (""UZ7048610008"") and ticker (""RBQB"") to download stock prices.
- Version 0.1.2 improves performance, optimises dependencies; output data frames are sorted by design
- Version 0.1.1 introduces several new functions to download Uzbek Stock Market data along with a vignette documentation
- First release 0.1.0 provides a set of functions to access datasets on [the Official Open Data Portal of Uzbekistan](http://data.gov.uz)

Version (0.1.1) introduces several new functions for collecting Uzbek Stock Market data. 

* `getTicker()`: obtains stock market prices over the given period 
* `getMarketIndex()`: provides stock market indices across sectors
* `currentBidsAsks()`: returns current bid and ask prices on the Republican Stock Exchange ""Toshkent""
* `ipo()`: returns a data frame with public offerings in last five years
* `getSecurities()`: returns a data frame with the list of securities from [the Republican Stock Exchange ""Toshkent"" database](http://www.uzse.uz)
* `RegisteredSecurities()`: returns a data frame with the list of securities from [the Central Securities Depository](http://www.deponet.uz) database

<br>

Please refer to [vignette documentation](https://rawcdn.githack.com/alishersuyunov/opendatauzb/ce29711e66deeb9852b14b808bdf722c63c94c61/doc/opendatauzb.html) for additional examples:<br>

`browseVignettes(""opendatauzb"")`<br>
`vignette(""opendatauzb"", package = ""opendatauzb"")`

<br>

The 0.1.0 version offers three key functions:

* `availableDatasets()` - returns a data frame with the list of available datasets on https://data.gov.uz with corresponding **dataset_id**
* `getData(dataset_id)` - downloads a dataset with **dataset_id**
* `getData_dictionary(dataset_id)` - downloads a data dictionary (variables) for the dataset

## Installation
Execute the following code to install the R package from R environment:
`devtools::install_github(""alishersuyunov/opendatauzb)`<br>
`remotes::install_github(""alishersuyunov/opendatauzb)`<br>

To download and install using pre-compiled binary files, please go to [releases](https://github.com/alishersuyunov/opendatauzb/tree/master/releases) folder.

## License
The package is provided under the GPL-3 license.

<br><br>
If you have any feature suggestions or found any bugs, feel free to raise a trouble ticket on: https://github.com/alishersuyunov/opendatauzb/issues
",1,1,1,1,equity-markets,"[equity-markets, financial-analysis, opendata, opendata-api, r, stock-market, stock-market-analysis, stock-market-data, stocks, uzbekistan]",0.0
12,zavtech,morpheus-quandl,zavtech,https://github.com/zavtech/morpheus-quandl,https://api.github.com/repos/morpheus-quandl/zavtech,An adapter that returns Morpheus DataFrames from Quandl.com,"# morpheus-quandl
A data loading adapter that returns Morpheus DataFrames from Quandl.com
",1,1,3,2,equity-markets,"[equity-index, equity-markets, equity-options, financial-analysis, financial-data, financial-markets, marketdata, quandl, quandl-api, quotes]",0.0
13,stevetulig,analysis-of-ASX200-index-changes,,https://github.com/stevetulig/analysis-of-ASX200-index-changes,https://api.github.com/repos/analysis-of-ASX200-index-changes/stevetulig,Transact SQL scripts for calculations using equity market data plus VBA code for importing results into Excel and generating charts,"# analysis-of-ASX200-index-changes
This repo contains SQL and VBA code used to produce visualizations for the investigation of (potential) trading strategies
to make money off changes in the constituents of ASX200 index.

Three types of visualization are produced. The first is an event-study time series plot of cumulative abnormal returns, assuming perfect foresight of the changes: 

![CAR1b](https://user-images.githubusercontent.com/65940824/197307348-b53b997a-8a84-46d1-9822-dad4377b3edf.png)

The calculations to produce this chart are in **event_study.sql**.

The next type of visualization is a series of scatterplots with categories. One such scatterplot is:

![scat1a](https://user-images.githubusercontent.com/65940824/197311539-34b2a393-0a51-4741-aafc-5e343f9594f0.png)

 
The X and Y variables are calculated before each announcement of a change in index membership. The series of scatterplots is used to determine whether patterns of these variables is useful in predicting the announced changes[^1]. These calculations are in **create_index_change_factors.sql**.

The stored procedure **index_change_analysis** returns a set of records corresponding to a given announcement date (of which there are four every year) and a given number of trading days prior to the announcement. Each record has fields necessary to produce the scatterplot in Excel.

The stored procedure is called from within VBA in Excel. The relevant code is in **index_changes.bas**, which imports the result into an ADODB recordset, copies the data into Excel, and produces the scatterplot.

Finally, the following graphic was produced of the cumulative returns of a short-selling trading strategy based on selling the bottom ten stocks in the ASX200 index[^2]:

![CAR2b](https://user-images.githubusercontent.com/65940824/197314706-44bbab05-62c3-4947-8ba3-122a2ca365c3.png)

The computations to produce this chart are in **trading_strategy.sql**.

## List of tables and columns referenced

**ASX200_constituents_pre_change**
Column_name | Type | Nullable
--- | --- | ---
StockID |	int |	no
IndexDate	| datetime2 |	no

**Daily_prices**
Column_name | Type | Nullable
--- | --- | ---
StockID |	int |	no
PriceDate	| datetime2 |	no
Open	| float	| yes
High	| float	| yes
Low	| float	| yes
Close	| float	| yes
AdjOpen	| float	| yes
AdjHigh	| float	| yes
AdjLow	| float	| yes
AdjClose	| float	| yes
Volume	| int	| yes
MarketCap	| float	| yes
Shares	| float	| yes

**indexChangeData**
Column_name | Type | Nullable
--- | --- | ---
Change	nvarchar	yes
StockID |	int |	no
EffDate	| datetime2	| yes
AnnDate	| datetime2	| yes

**SP200Data**
Column_name | Type | Nullable
--- | --- | ---
PriceDate	| datetime2 |	no
AccumIndex	| float	| yes
DailyRet	| float	| yes

**stockaccumindex**
Column_name | Type | Nullable
--- | --- | ---
StockID |	int |	no
PriceDate	| datetime2 |	no
AccumIndex	decimal	yes

**tradingdays**
Column_name | Type | Nullable
--- | --- | ---
PriceDate	| datetime2 |	no
EOM	| smallint	| yes
DateOffset	| int	| yes

[^1]: The X and Y variables are rankings based on the variables liquidity and average market capitalisation. Liquidity and average market capitalisation are calculated in accordance with Standard and Poors’ index methodology for every ASX stock 10, 20 and 30 trading days before each announcement.
[^2]: It was determined that prediction of index removals, but not index additions, could feasibly be attempted.
",1,1,1,0,equity-markets,"[equity-markets, sql, trading-strategies, vba-excel]",0.0
14,jeckonov,Financial-analysis,,https://github.com/jeckonov/Financial-analysis,https://api.github.com/repos/Financial-analysis/jeckonov,Automatized-analysis-via-yfinance-API,"# Automatized-analysis-via-yfinance-API
Automatized-analysis-via-yfinance-API
yfinance 
1) Value at Risk for portfolio of multiple assets
2) Markov regime switch
3) Various filters and its comparation
4) Payoff function of hedged short
",1,1,1,0,equity-markets,"[brent, equity, equity-markets, finance, financial-analysis, markov-regime-switch, payoff-shorting, portfolio, regime-switching, shorting, value-at-risk, valueatrisk, var]",0.0
15,Pranav-20186017,HP_Calculator,,https://github.com/Pranav-20186017/HP_Calculator,https://api.github.com/repos/HP_Calculator/Pranav-20186017,A Simple Python Script to Caculated the Percentage of Amount Invested in each equity by parsing the holdings statement in csv format,"# HP_Calculator

A Simple Python Script to Caculated the Percentage of Amount Invested in each equity by parsing the holdings statement in csv format

This Script only works for Holding Statement from Zerodha (Use the Download option from the Kite Portal)

<img src =""hp.png"">

Edit the holdings.csv file if you want to recalculate your Percetage before making an Investement. Just Enter the Symbol of the stock under the column **Instrument**, enter the qunatity of stock you want to purchase under the column **Qty.** and lastly enter the price at which you wnat to buy that stock under the column **Avg. cost**

After entering these values in a new cell at the end in the csv file, re run the script to see the new percentages should you buy a new stock.
",0,0,1,0,equity-markets,"[equity-markets, finance, investing]",0.0
16,zavtech,morpheus-google,zavtech,https://github.com/zavtech/morpheus-google,https://api.github.com/repos/morpheus-google/zavtech,An adapter that returns Morpheus DataFrames from Google Finance,"# morpheus-google
A data loading adapter that returns Morpheus DataFrames from Google Finance
",0,0,2,2,equity-markets,"[equity-markets, finance, financial-analysis, financial-data, market, marketdata, quotes, stock-market]",0.0
17,dipankargoswami,telebot-eq-in,,https://github.com/dipankargoswami/telebot-eq-in,https://api.github.com/repos/telebot-eq-in/dipankargoswami,A telegram bot implemented in c++.,"# telebot-eq-in
A telegram bot implemented in c++.

## Operating System

The code is built on MacOS. But no specific dependency on the os. So, can be ported to Linux distributions. 

## Build System

The code is currently using XCode infrastructure to build.

## Dependencies

Code currently depends on the following libraries -
* Boost
* Openssl
* cpprestsdk
",0,0,1,0,equity-markets,"[bse, cplusplus, cplusplus-17, cpprestsdk, equity, equity-markets, frontoffice, nse, stock-market, telegram, telegram-bot, telegram-bot-api]",0.0
18,gouravdidwania,Portfolio-Optimizing-System,,https://github.com/gouravdidwania/Portfolio-Optimizing-System,https://api.github.com/repos/Portfolio-Optimizing-System/gouravdidwania,Model to filter out specified number of bad stocks each month from our portfolio and add better performing stocks from a given wide range of stocks.,"<!-- PROJECT LOGO -->
![portfolio](https://user-images.githubusercontent.com/86877457/135084460-58cfd65c-5482-4b98-90e1-65ca10c88431.jpg)
<br />
<p align=""center"">

  <h3 align=""center"">Portfolio Optimizing System</h3>

  <p align=""center"">
    In this project, I've tried to build a model to filter out specified number of bad stocks each month from our portfolio and add better performing stocks from a given wide range of stocks.
    <br />
  </p>
</p>




<!-- TABLE OF CONTENTS -->
<details open=""open"">
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
    </li>
    <li>
      <a href=""#problem-statement"">Problem Statement</a>
    </li>
    <li>
	<a href=""#data-overview"">Data Overview</a>
	<ul>
          <li><a href=""#data-attributes"">Data Attributes</a></li>
          <li><a href=""#data-snapshot"">Data Snapshot</a></li>
        </ul>
    </li>
    <li><a href=""#implementaion"">Implementaion</a>
	<ul>
          <li><a href=""#exploring-the-data"">Exploring the Data</a></li>
          <li><a href=""#kpis"">KPIs</a></li>
	        <li><a href=""#portfolio-rebalancing"">Portfolio Rebalancing</a></li>
	        <li><a href=""#result"">Result</a></li>
        </ul>
    </li>
    <li><a href=""#final-thoughts"">Final Thoughts</a></li>
  </ol>
</details>



<!-- ABOUT THE PROJECT -->
## About The Project

If the thought of investing in the stock market scares you, you are not alone. Individuals with very limited experience in stock investing are either terrified by horror stories of the average investor losing 50% of their portfolio value. The reality is that investing in the stock market carries risk, but when approached in a disciplined manner, it is one of the most efficient ways to build up one's net worth.

Portfolio Managment is one of the crucial part of trading. Portfolio management consists of three main elements: investing time horizon, diversification of investments, and risk tolerance. Here, we take into account the diversification of investments and optimize our portfolio with the stocks giving best monthly returns.


<!-- PROBLEM STATEMENT -->
## Problem Statement

- Chose any universe of stocks (Large cap, mid cap, small cap, Industry specific, factor specific etc.) and stick to this group of stock as the source for your portfolio for the entire duration of backtesting
- Build fixed individual position sized long only portfolio by picking n number of stocks based on monthly returns (or any other suitable criterion)
- Rebalance the portfolio every month by removing worse x stocks and replacing them with top x stocks from the universe of stocks (can existing stock be picked again?)
- Backtest the strategy and compare the KPIs with that of simple buy and hold strategy of corresponding index.


<!-- DATA OVERVIEW -->
## Data Overview

Source: [Yahoo Finance](https://finance.yahoo.com/)

Data: The data set was extracted from Yahoo Finance with the help of [Pandas Data Reader](https://pandas-datareader.readthedocs.io/en/latest/#) and contains the Open, High, Low, Close, Adj Close and Volumes Data of the selected stocks.

### Data Attributes

**1. Open:** The daily Opening Price of the stock.

**2. High:** The highest price that the stock reaches during the day.

**3. Low:** The lowest price that the stock reaches during the day.

**4. Close:** The close price is the raw price, which is the cash value of the last transacted price before the market closes.

**5. Adj. Close:** The adjusted closing price takes into account divident on shares and factors that might affect the stock price after the market closes.

**6. Volumes:** The total units of stocks traded throughout the day.

### Data Snapshot

![image](https://user-images.githubusercontent.com/86877457/135076221-1005bbcc-fbfd-4c4b-981f-b22c0f5ffa59.png)

<!-- IMPLEMANTATION -->
## Implementaion

**Real-world/Business objectives and constraints**

- Interpretability is important.
- Errors can be costly.
- Model should be robust to deal with multiple finacial instruments.

### Exploring the Data

Data was processed and cleaned.

**Stock Selected**

In total, 30 companies listed on SENSEX were selected. The idea was to find whether carrying long position of the respective index over time was good or picking only the better performing stocks was.

``` sh
stocks = ['INFY.NS','TCS.NS','RELIANCE.NS','ICICIBANK.NS','HDFCBANK.NS','HCLTECH.NS','BHARTIARTL.NS','INDUSINDBK.NS','SBIN.NS',
         'LT.NS','TECHM.NS','AXISBANK.NS','ITC.NS','BAJAJ-AUTO.NS','ONGC.NS','TATASTEEL.BO','NTPC.NS','M&M.NS','ASIANPAINT.NS','POWERGRID.NS',
         'BAJAJFINSV.NS','TITAN.NS','NESTLEIND.NS','ULTRACEMCO.NS','SUNPHARMA.BO','BAJFINANCE.NS','MARUTI.NS','HDFC.NS','HINDUNILVR.NS','KOTAKBANK.NS']
```

Our portfolio was created:

It contained : **'TECHM.NS', 'POWERGRID.NS', 'NTPC.NS', 'HCLTECH.NS', 'TATASTEEL.BO', 'BHARTIARTL.NS'** i.e Tech Mahindra, Power Grid Corporation of India, NTPC Limited, TATA Steel and Bharti Airtel.

### KPIs
**Compound Annual Growth Rate (CAGR)**

The compound annual growth rate (CAGR) is the rate of return (RoR) that would be required for an investment to grow from its beginning balance to its ending balance, assuming the profits were reinvested at the end of each period of the investment’s life span.

![image](https://user-images.githubusercontent.com/86877457/135077931-a50320c4-6544-46d1-a505-87adbc84258f.png)

I wrote a function to calculate the CAGR value

```sh
  def CAGR(df):
    temp=df.copy()
    temp['cum_return']=(1+temp['monthly_return']).cumprod()
    year=round(((temp.index[len(temp)-1]-temp.index[0])).days/365)
    CAGR=((temp.cum_return[len(temp)-1]/1)**(1/year))-1
    return round(CAGR*100,3)
```

**Volatility**

Volatility is a statistical measure of the dispersion of returns for a given security or market index. In most cases, the higher the volatility, the riskier the security. Volatility is often measured as either the standard deviation or variance between returns from that same security or market index.

I wrote a function to calculate the Volatility

```sh
  def volatility(df):
    temp=df.copy()
    daily_vol=temp.monthly_return.std()
    ann_vol=(daily_vol*(12**0.5))
    return round(ann_vol*100,3)
```


**Sharpe Ratio**

Sharpe Ratio is the average return earned in excess of the risk-free rate per unit of volatility or total risk.

It adjusts a portfolio’s past performance—or expected future performance—for the excess risk that was taken by the investor. A high Sharpe ratio is good when compared to similar portfolios or funds with lower returns. The Sharpe ratio has several weaknesses, including an assumption that investment returns are normally distributed.

![image](https://user-images.githubusercontent.com/86877457/135083525-d8c9bf79-008f-4305-82a1-cd50e193f92b.png)

I wrote a function to calculate the sharpe ratio

```sh
  def sharpe(df,rf=6.2):
    temp=df.copy()
    ratio=(CAGR(df)-rf)/volatility(df)
    return round(ratio,3)
```

**Maximum Drawdown**

A maximum drawdown (MDD) is the maximum observed loss from a peak to a trough of a portfolio, before a new peak is attained. Maximum drawdown is an indicator of downside risk over a specified time period. In the price chart, Maximum Drawdown is the maximum fall in price in the specified time period.

It can be used both as a stand-alone measure or as an input into other metrics such as ""Return over Maximum Drawdown"" and the Calmar Ratio. Maximum Drawdown is expressed in percentage terms.

![image](https://user-images.githubusercontent.com/86877457/135079147-f9a1f2ea-10e0-4db2-a552-3d4d00555013.png)

I wrote a function to calculate the maximum drawdown

```sh
  def max_drawdown(df):
    temp=df.copy()
    temp['cum_return']=(1+temp['monthly_return']).cumprod()
    temp['cum_roll_max']=temp['cum_return'].cummax()
    temp['draw_down']=temp['cum_roll_max']-temp['cum_return']
    temp['draw_down_pct']=temp['draw_down']/temp['cum_roll_max']
    max_dd=temp['draw_down_pct'].max()
    return round(max_dd*100,3)
```

### Portfolio Rebalancing

Steps involved in Portfolio Rebalancing:

1. A dataframe with the monthly returns was created for all stocks.
2. Our portfolio at the beginning of the investment was taken as input.
3. For each month cycle, the best n performing stocks was listed out by comapring the monthly return.
4. This n stocks replaced our n worst perfroming stocks in our portfolio.  
5. We can have multiple units of the best perferfroming stock as per our wish.
6. This cycle was continued.
7. The KPIs were calculated for this strategy and compared with if we have had only taken a unit of SENSEX
8. The returns of both the methods were plotted

**INPUT**

 ```sh
  def portfolio(df,n,x,k=0):
    '''return cummulitive portfolio returns
    df = datframe with monthly return of all stock
    n = number of stock in the portfolio
    x = number of underperforming stock to be removed from the portfolio every month'''
 ```
The input chosen for this were: ```portfolio(return_df,6,3)```

**SENSEX**

The performance of the index over last five years.

![image](https://user-images.githubusercontent.com/86877457/135080357-28b9a9e1-b19a-4f18-9995-1ea78c760087.png)

**The Monthly returns DataFrame**

![image](https://user-images.githubusercontent.com/86877457/135080508-8faa6cb4-908d-4d6e-9a12-865d2e3fbf46.png)

**Overall Monthly Returns for the Optimized Portfolio**

![image](https://user-images.githubusercontent.com/86877457/135081021-cb7fd32c-431a-4a2a-8649-4688fff5f571.png)

### Result

For the given portfolio, stocks, the values of n and x, it perfermoed quite well. the returns obtained from this was 0.3 % better. 

![image](https://user-images.githubusercontent.com/86877457/135081662-e750ad7f-4546-44ba-8583-5ee461c8ebbf.png)

Our model efficiently showed the desired portfolio for each month.

![image](https://user-images.githubusercontent.com/86877457/135081559-7886c0db-9590-44b5-aa38-00f01b785a1a.png)

**KPIs**

![image](https://user-images.githubusercontent.com/86877457/135082967-7a3a35ed-bd94-4113-97eb-641d8c5ca5e5.png)


<!-- FINAL THOUGHTS -->
## Final Thoughts

From the above analysis, we can see that this method actually improves the returns from stocks significantly. May not work in every case but can show some splendid results for some specific portfolio and the values of n and x. For further improvements, we can apply a loop to find the best value of x and n. And also we can find the time after which we should change the x and n values.
",0,0,1,0,equity-markets,"[cagr, equity-markets, finance, potfolio, python, sensex, sharpe-ratio, stock, stock-market, trading]",0.0
19,stevetulig,distance-to-default-calculation-in-python,,https://github.com/stevetulig/distance-to-default-calculation-in-python,https://api.github.com/repos/distance-to-default-calculation-in-python/stevetulig,"Python code for calculating the Merton model distance-to-default, including interactions with SQL server to extract the raw data.","# distance-to-default-calculation-and-trading-strategies
Python code for calculating the Merton model distance-to-default, including interactions with SQL server to extract the raw data.
Distance-to-default is a measure of default risk. For a comprehensive discussion including calculation methodology and applications to equity markets refer to Vassalou and Xing (2004)[^1][^2].

The file db_interactions_for_DD.py uses pyodbc and pandas in functions that connect to a SQL Server database and extract the required data. This data includes balance sheet data, risk-free interest rates and market values.

The file distance_to_default.py calls the functions in script 1 and performs the necessary calculations for each stock in the cross-section, at yearly intervals from 2000 to 2012 (the extent of the data available to the author).

[^1]: Vassalou, M. and Y. Xing (2004). ""Default Risk in Equity Returns."" The Journal of finance (New York) 59(2): 831-868.
[^2]: However, note that the conclusions of Vassalou and Xing (2004) regarding the pricing of default risk in equity markets are somewhat contrary to the majority of studies in this area.
",0,0,1,0,equity-markets,"[equity-markets, pandas, pyodbc, python, sql]",0.0
20,GStechschulte,Bayesian_Returns,,https://github.com/GStechschulte/Bayesian_Returns,https://api.github.com/repos/Bayesian_Returns/GStechschulte,Using Bayesian inference to incorporate a forward looking prior to compute the uncertainty of equity returns and volatility. ,"- **Motivation**:
    - Investments with high returns are desirable. In regard to stocks, using the historical dataset is unwise as the parameter of interest is subject to change
        - Parameter(s) of interest include:
            - 1.) Mean monthly return, 2.) Monthly standard deviation
    - So why not use a smaller dataset? 
        - A smaller sample size produces greater uncertainty for the parameter(s) of interest
    - Using Bayesian statistics allows you to model a prior distribution as the parameters of the model are treated as random variables and unknown. Where as in Frequentist statistics, parameters are treated as unknown and fixed
- **Objective**:
    - Insert domain knowledge as a prior distribution of the model:
        - Use case domain knowledge:
            - An investor is anticipating negative mean monthly returns and higher volatility for the months or year ahead. We want to incorporate this belief as a a distribution(s) to compute the uncertainty of mean monthly returns of 0.05% and volatility of 2% 
    - This will allow us to reduce the use of past data, and to put an emphasis on our prior probability
        - As we gain more evidence, our prior probability is ""washed out"" by the new instances 
            - After observing the new evidence, our belief is updated; which is called the posterior probability
            - __“Today's posterior is tomorrow's prior”__
    - In Bayesian Inference, we have access to the parameters posterior distribution which will allow us to use MCMC to sample thousands of data points from that distribution. From there, we use model diagnostics, interpret the output of the JAGS model, and compute probabilities for our parameters (mu and sigma)
        - By incorporating forward looking priors complemented with having access to the posterior distribution, we can assess the probability of achieving a particular mean monthly return and mean monthly volatility 

",0,0,1,0,equity-markets,"[bayesian-inference, equity-markets, probabilistic-programming, stock-data]",0.0
21,tradytics,eiten,,https://github.com/tradytics/eiten,https://api.github.com/repos/eiten/tradytics,Statistical and Algorithmic Investing Strategies for Everyone,"<p align=""center"">
  <img width=""325"" src=""figures/normal-512x512.png"">
</p>

# Eiten - Algorithmic Investing Strategies for Everyone
Eiten is an open source toolkit by [Tradytics](https://www.tradytics.com/) that implements various statistical and algorithmic investing strategies such as **Eigen Portfolios**, **Minimum Variance Portfolios**, **Maximum Sharpe Ratio Portfolios**, and **Genetic Algorithms** based Portfolios. It allows you to build your own portfolios with your own set of stocks that can beat the market. The rigorous testing framework included in Eiten enables you to have confidence in your portfolios.

If you are looking to discuss these tools in depth and talk about more tools that we are working on, please feel free to join our [Discord](https://discord.gg/QuvE2Z8) channel where we have a bunch of more tools too.

### Files Description
| Path | Description
| :--- | :----------
| eiten | Main folder.
| &boxur;&nbsp; figures | Figures for this github repositories.
| &boxur;&nbsp; stocks | Folder to keep your stock lists that you want to use to create your portfolios.
| &boxur;&nbsp; strategies | A bunch of strategies implemented in python.
| backtester.py | Backtesting module that both backtests and forward tests all portfolios.
| data_loader.py | Module for loading data from yahoo finance.
| portfolio_manager.py | Main file that takes in a bunch of arguments and generates several portfolios for you.
| simulator.py | Simulator that uses historical returns and monte carlo to simulate future prices for the portfolios.
| strategy_manager.py | Manages the strategies implemented in the 'strategies' folder.

## Required Packages 
You will need to install the following package to train and test the models.
- [Scikit-learn](https://scikit-learn.org/)
- [Numpy](https://numpy.org/)
- [Tqdm](https://github.com/tqdm/tqdm)
- [Yfinance](https://github.com/ranaroussi/yfinance)
- [Pandas](https://pandas.pydata.org/)
- [Scipy](https://www.scipy.org/install.html)

You can install all packages using the following command. Please note that the script was written using python3.

```
pip install -r requirements.txt
```

## Build your portfolios
Let us see how we can use all the strategies given in the toolkit to build our portfolios. The first thing you need to do is modify the **stocks.txt** file in the **stocks** folder and add the stocks of your choice. It is recommended to keep the list small i.e anywhere between **5 to 50** stocks should be fine. We have already put a small stocks list containing a bunch of tech stocks like AAPL, MSFT, TSLA etc. Let us build our portfolios now. This is the main command that you need to run.

```
python portfolio_manager.py --is_test 1 --future_bars 90 --data_granularity_minutes 3600 --history_to_use all --apply_noise_filtering 1 --market_index QQQ --only_long 1 --eigen_portfolio_number 3 --stocks_file_path stocks/stocks.txt
```

This command will use last 5 years of daily data excluding the last 90 days and build several portfolios for you. Based on those portfolios, it will then test them on the out of sample data of 90 days and show you the performance of each portfolio. Finally, it will also compare the performance with your choice of market index which is **QQQ** here. Let's dive into each of the parameters in detail.
- **is_test**: The value determined if the program is going to keep some separate data for future testing. When this is enabled, the value of **future_bars** should be larger than 5.
- **future_bars**: These are the bars that the tool will exclude during portfolio building and will forward test the portfolios on the excluded set. This is also called out of sample data.
- **data_granularity_minutes**: How much granular data do you want to use to build your portfolios. For long term portfolios, you should use daily data but for short term, you can use hourly or minute level data. The possible values here are **3600, 60, 30, 15, 5, 1.** 3600 means daily.
- **history_to_use**: Whether to use a specific number of historical bars or use everything that we receive from yahoo finance. For minute level data, we only receive up to one month of historical data. For daily, we receive 5 years worth of historical data. If you want to use all available data, the value should be **all** but if you want to use smaller history, you can set it to an integer value e.g **100** which will only use the last 100 bars to build the portfolios.
- **apply_noise_filtering**: This uses [random matrix theory](http://faculty.baruch.cuny.edu/jgatheral/randommatrixcovariance2008.pdf) to filter out the covariance matrix from randomness thus yielding better portfolios. A value of 1 will enable it and 0 will disable it.
- **market_index**: Which index do you want to use to compare your portfolios. This should mostly be **SPY** but since we analyzed tech stocks, we used **QQQ**.
- **only_long**: Whether to use long only portfolio or enable short selling as well. Long only portfolios have shown to have better performance using algorithmic techniques.
- **eigen_portfolio_number**: Which eigen portfolio to use. Any value between 1-5 should work. The first eigen portfolio (1) represents the market portfolio and should act just like the underlying index such as SPY or QQQ. The second one is orthogonal and uncorrelated to the market and poses the greatest risk and reward. The following ones have reduced risk and reward. Read more on [eigen-portfolios](https://srome.github.io/Eigenvesting-I-Linear-Algebra-Can-Help-You-Choose-Your-Stock-Portfolio/).
- **stocks_file_path**: File that contains the list of stocks that you want to use to build your portfolio.

### Some Portfolio Building Examples
Here are a few examples for building different types of portfolios.
- Both **long and short** portfolios by analyzing last **90 days** data and keeping the **last 30 days** as testing data. This will give us 60 days of portfolio construction data and 30 days of testing.
```
python portfolio_manager.py --is_test 1 --future_bars 30 --data_granularity_minutes 3600 --history_to_use 90 --apply_noise_filtering 1 --market_index QQQ --only_long 0 --eigen_portfolio_number 3 --stocks_file_path stocks/stocks.txt
```
- Only **long portfolio** on **60 minute bars** of the last **30 days**. **No future testing**. Compare the results with **SPY** index instead of QQQ.
```
python portfolio_manager.py --is_test 0 --future_bars 0 --data_granularity_minutes 60 --history_to_use all --apply_noise_filtering 1 --market_index SPY --only_long 1 --eigen_portfolio_number 3 --stocks_file_path stocks/stocks.txt
```
- **Do not apply noise filtering** on the covariance matrix. Use the **first eigen portfolio** (market portfolio) and compare with SQQQ,
```
python portfolio_manager.py --is_test 1 --future_bars 90 --data_granularity_minutes 3600 --history_to_use all --apply_noise_filtering 0 --market_index SQQQ --only_long 1 --eigen_portfolio_number 1 --stocks_file_path stocks/stocks.txt
```

## Portfolio Strategies
Four different portfolio strategies are currently supported by the toolkit.
1. **Eigen Portfolios**
	1. These portfolios are orthogonal and uncorrelated to the market in general thus yielding high reward and alpha. However, since they are uncorrelated to the market, they can also provide great risk. The first eigen portfolio is considered to be a market portfolio which is often ignored. The second one is uncorrelated to the others and provides the highest risk and reward. As we go down the numbering, the risk as well as the reward are reduced.
2. **Minimum Variance Portfolio (MVP)**
	1. MVP tries to minimize the variance of the portfolio. These portfolios are lowest risk and reward.
3. **Maximum Sharpe Ratio Portfolio (MSR)**
	1. MSR solves an optimization problem that tries to maximize the sharpe ratio of the portfolio. It uses past returns during the optimization process which means if past returns are not the same as future returns, the results can vary in future.
4. **Genetic Algorithm (GA) based Portfolio**
	1. This is our own implementation of a GA based portfolio that again tries to maximize the sharpe ratio but in a slightly more robust way. This usually provides more robust portfolios than the others.

When you run the command above, our tool will generate portfolios from all these strategies and give them to you. Let us look at some resulting portfolios.

## Resulting Portfolios
For the purpose these results, we will use the 9 stocks in the stocks/stocks.txt file. When we run the above command, we first get the portfolio weights for all four strategies. For testing purposes, the above command used last five years of daily data up till April 29th. The remaining data for this year was used for forward testing i.e the portfolio strategies had no access to it when building the portfolios.

**What if my portfolio needs different stocks?**: All you need to do is change the stocks in the stocks.txt file and run the tool again. Here is the final command again that we run in order to get our portfolios:

```
python portfolio_manager.py --is_test 1 --future_bars 90 --data_granularity_minutes 3600 --history_to_use all --apply_noise_filtering 1 --market_index QQQ --only_long 1 --eigen_portfolio_number 3 --stocks_file_path stocks/stocks.txt
```

### Portfolio Weights
<p align=""center"">
  <img src=""figures/portfolio_weights.png"">
</p>

We can see that the eigen portfolio is giving a large weight to TSLA while the others are dividing their weights more uniformly. An interesting phenomena happening here is the hedging with **SQQQ** that all the strategies have learned automatically. Every tool is assigning some positive weight to SQQQ while also assigning positive weights to other stocks which indicates that the strategies are automatically trying to hedge the portfolios from risk. Obviously this is not perfect, but just the fact that it's happening is fascinating. Let us look at the backtest results on the last five years prior to April 29, 2020.

### Backtest Results
<p align=""center"">
  <img src=""figures/backtest_results.png"">
</p>

The backtests look pretty encouraging. The black dotted line is the market index i.e **QQQ**. Other lines are the strategies. Our custom genetic algorithm implementation seems to have the best backtest results because it's an advanced version of other strategies. The eigen portfolio that weighed TSLA the most have the most volatility but its profits are also very high. Finally, as expected, the MVP has the minimum variance and ultimately the least profits. However, since the variance is extremely low, it is a good portfolio for those who want to stay safe. The most interesting part comes next, let us look at the forward or future test results for these portfolios. 

### Forward Test Results
<p align=""center"">
  <img src=""figures/future_test_results.png"">
</p>

These results are from April 29th, 2020 to September 4th, 2020. The eigen portfolio performed the best but it also had a lot of volatility. Moreover, most of those returns are due to TSLA rocketing in the last few months. After that, our GA algorithm worked quite effectively as it beat the market index. Again, as expected, the MVP had the lowest risk and reward and slowly went up in 4-5 months. This shows the effectiveness and power of these algorithmic portfolio optimization strategies where we've developed different portfolios for different kinds of risk and reward profiles.


## Conclusion and Discussion
We are happy to share this toolkit with the trading community and hope that people will like and contribute to it. As is the case with everything in trading, these strategies are not perfect but they are based on rigorous theory and some great empirical results. Please take care when trading with these strategies and always manage your risk. The above results were not cherry picked but the market has been highly bullish in the last few months which has led to the strong results shown above. We would love for the community to try out different strategies and share them with us.

#### Special Thanks
Special thanks to [Scott Rome's](https://srome.github.io/) blog. The eigen portfolios and minimum variance portfolio concepts came from his blog posts. The code for filtering eigen values of the covariance matrix was also mostly obtained from one of his posts.

## License
[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)

A product by [Tradytics](https://www.tradytics.com/)

Copyright (c) 2020-present, Tradytics.com
",2608,2608,97,15,investment-portfolio,"[ai, algorithmic-trading, eigenvalues, free-software, genetic-algorithm, hedgefund, investment-portfolio, machine-learning, opensource, portfolio-optimization, statistics, trading-algorithms, trading-strategies, tradytics]",0.0
22,portfolio-performance,portfolio,portfolio-performance,https://github.com/portfolio-performance/portfolio,https://api.github.com/repos/portfolio/portfolio-performance,"Track and evaluate the performance of your investment portfolio across stocks, cryptocurrencies, and other assets.","# About

[Portfolio Performance](https://www.portfolio-performance.info): Track and evaluate the performance of your investment portfolio across stocks, cryptocurrencies, and other assets.

## Status

[![Build Status](https://github.com/portfolio-performance/portfolio/workflows/CI/badge.svg)](https://github.com/portfolio-performance/portfolio/actions?query=workflow%3ACI) [![Latest Release](https://img.shields.io/github/release/buchen/portfolio.svg)](https://github.com/portfolio-performance/portfolio/releases/latest) [![Release Date](https://img.shields.io/github/release-date/buchen/portfolio?color=blue)](https://github.com/portfolio-performance/portfolio/releases/latest) [![License](https://img.shields.io/github/license/buchen/portfolio.svg)](https://github.com/portfolio-performance/portfolio/blob/master/LICENSE)

[![LOC](https://sonarcloud.io/api/project_badges/measure?project=name.abuchen.portfolio%3Aportfolio-app&metric=ncloc)](https://sonarcloud.io/dashboard?id=name.abuchen.portfolio%3Aportfolio-app) [![Bugs](https://sonarcloud.io/api/project_badges/measure?project=name.abuchen.portfolio%3Aportfolio-app&metric=bugs)](https://sonarcloud.io/project/issues?id=name.abuchen.portfolio%3Aportfolio-app&resolved=false&types=BUG) [![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=name.abuchen.portfolio%3Aportfolio-app&metric=vulnerabilities)](https://sonarcloud.io/project/issues?id=name.abuchen.portfolio%3Aportfolio-app&resolved=false&types=VULNERABILITY) [![Code Coverage](https://sonarcloud.io/api/project_badges/measure?project=name.abuchen.portfolio%3Aportfolio-app&metric=coverage)](https://sonarcloud.io/component_measures?id=name.abuchen.portfolio%3Aportfolio-app&metric=Coverage)


## Links

* [Homepage](https://www.portfolio-performance.info)
* [Downloads](https://github.com/portfolio-performance/portfolio/releases)
* [Forum](https://forum.portfolio-performance.info/)
* [Help (German)](https://help.portfolio-performance.info/)


## Contributing Source Code

* [Development setup](CONTRIBUTING.md#development-setup)
* [Project setup](CONTRIBUTING.md#project-setup)
* [Contribute code](CONTRIBUTING.md#contribute-code)
* [Images, Logo & Colors](CONTRIBUTING.md#images-logo-and-color)
* [Translations](CONTRIBUTING.md#translations)
* [Interactive-Flex-Query importer](CONTRIBUTING.md#interactive-flex-query-importer)
* [PDF importer](CONTRIBUTING.md#pdf-importer)
* [Trade calendar](CONTRIBUTING.md#trade-calendar)


## License

Eclipse Public License
https://www.eclipse.org/legal/epl-v10.html
",2365,2365,74,760,investment-portfolio,"[eclipse, financial, investment-portfolio, java, portfolio, portfolio-performance, stocks]",0.0
23,ashchan,returns,,https://github.com/ashchan/returns,https://api.github.com/repos/returns/ashchan,Track your multiple investment or portfolios and calculate returns in one place.,"# Portfolio Returns <img src=""Shared/Assets.xcassets/AppIcon.appiconset/icon_256x256.png"" style=""width: 40px;"" align=""left"">

Portfolio Returns is a financial app for macOS that helps you track your multiple investment or portfolios in one place.

It's inspired by [return spreadsheet](https://www.bogleheads.org/forum/viewtopic.php?f=10&t=150025) built by [Bogleheads forum](https://www.bogleheads.org/forum/index.php) member longinvest.
To learn more about how it computes returns, see Bogleheads wiki page [Calculating personal returns](https://www.bogleheads.org/wiki/Calculating_personal_returns).

![screenshot](returns.png)

## Features

* Track your multiple investment or portfolios in one place.
* Compute **investor return** (money-weighted return, internal rate of return).
* Compute **portfolio return** (time-weighted return, comparable return).
* Show portfolio returns for 1 month, 3 months, 6 months, year-to-date (YTD) and 1 year.
* Show portfolio returns for 3 years and up to 50 years.
* Calculate and show **growth of $10,000** chart.
* Import and export portfolios as JSON.

## Download

[![download on the Mac App Store](badge-download-on-the-mac-app-store.svg)](https://apps.apple.com/app/id1593819081)

Requires macOS 11 Big Sur or later.

## Usage

1. Create a portfolio.
1. Add one or more accounts.
1. At the close of the last day of each month, add **total contributions**, **total withdrawals** and **account balance** to each account.
1. Sleep well. Do not watch your portfolio. Let it perform.


## System Requirements

Portfolio Returns is developed and built with SwiftUI.
To use this app, be sure your Mac is running macOS 11 Big Sur or later.

## License

Portfolio Returns is available under the MIT license. See the [LICENSE](LICENSE) file for more info.

",263,263,7,0,investment-portfolio,"[finance-management, investment-calculator, investment-portfolio, swiftui]",0.0
24,microprediction,precise,,https://github.com/microprediction/precise,https://api.github.com/repos/precise/microprediction,World beating online covariance and portfolio construction.,"# precise [docs](https://microprediction.github.io/precise/) ![tests](https://github.com/microprediction/precise/workflows/tests/badge.svg) ![tests-scipy-173](https://github.com/microprediction/precise/workflows/tests-scipy-173/badge.svg) ![tests-sans-ppo](https://github.com/microprediction/precise/workflows/tests-sans-ppo/badge.svg)  ![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)

Contents:

1. A collection of *online* (incremental) [covariance forecasting](https://github.com/microprediction/precise/blob/main/LISTING_OF_COV_SKATERS.md) and [portfolio construction](https://github.com/microprediction/precise/blob/main/LISTING_OF_MANAGERS.md) functions. See [docs](https://microprediction.github.io/precise/). 

2. ""Schur Complementary"" portfolio construction, a new approach that leans on connection between top-down (hierarchical) and bottom-up (optimization) portfolio construction revealed by block matrix inversion. See my posts on the [methodology](https://www.linkedin.com/posts/petercotton_schur-complementary-portfolios-a-unification-activity-7000535020381552640-ZWej?utm_source=share&utm_medium=member_desktop) and its role in the [hijacking of the M6 contest](https://www.linkedin.com/posts/alexander-fleiss-70b49410_does-option-volume-predict-stock-direction-activity-7021134433344749569-bxx4?utm_source=share&utm_medium=member_desktop). 
 
3. A small compendium of portfolio theory papers tilted towards my interests. See [literature](https://github.com/microprediction/precise/blob/main/LITERATURE.md). 

One observes that tools for portfolio construction might also be useful in [optimizing a portfolio of models](https://medium.com/geekculture/optimizing-a-portfolio-of-models-f1ed432d728b).

---

<a href=""https://medium.com/geekculture/schur-complementary-portfolios-fix-hierarchical-risk-parity-28b0efa1f35f"">
<img src=""https://github.com/microprediction/precise/blob/main/docs/assets/images/schur_reaction.png"" width=""600""></a>

---

# Usage 
See the [docs](https://microprediction.github.io/precise/), but briefly:

### Covariance estimation
Here y is a vector:

    from precise.skaters.covariance.ewapm import ewa_pm_emp_scov_r005_n100 as f 
    s = {}
    for y in ys:
        x, x_cov, s = f(s=s, y=y)

This package contains lots of different ""f""s. There is a [LISTING_OF_COV_SKATERS](https://github.com/microprediction/precise/blob/main/LISTING_OF_COV_SKATERS.md) with links to the code. See the [covariance documentation](https://microprediction.github.io/precise/covariance.html).

### Portfolio weights
Here y is a vector:

        from precise.skaters.managers.schurmanagers import schur_weak_pm_t0_d0_r025_n50_g100_long_manager as mgr
        s = {}
        for y in ys:
            w, s = mgr(s=s, y=y)

This package contains lots of ""mgr""'s. There is a [LISTING_OF_MANAGERS](https://github.com/microprediction/precise/blob/main/LISTING_OF_MANAGERS.md) with links to respective code. See the [manager documentation](https://microprediction.github.io/precise/managers.html).

# Install 

    pip install precise 
    
or for latest:

    pip install git+https://github.com/microprediction/precise.git
 
Trouble? It probably isn't with precise per se. 

    pip install --upgrade pip
    pip install --upgrade setuptools 
    pip install --upgrade wheel
    pip install --upgrade ecos   # <--- Try conda install ecos if this fails
    pip install --upgrade osqp   # <-- Can be tricky on some systems see https://github.com/cvxpy/cvxpy/issues/1190#issuecomment-994613793
    pip install --upgrade pyportfolioopt # <--- Skip if you don't plan to use it
    pip install --upgrade riskparityportfolio
    pip install --upgrade scipy
    pip install --upgrade precise 


# Miscellaneous 

 - Here is some related, and potentially related, [literature](https://github.com/microprediction/precise/blob/main/LITERATURE.md). 
 - This is a piece of the microprediction project aimed at creating millions of autonomous critters to distribute AI at low cost, should you ever care to [cite](https://github.com/microprediction/microprediction/blob/master/CITE.md) the same. The uses include mixtures of experts models for time-series analysis, buried in [timemachines](https://github.com/microprediction/timemachines/tree/main/timemachines/skatertools) somewhere. 
 - If you just want univariate calculations, and don't want numpy as a dependency, there is [momentum](https://github.com/microprediction/momentum). However if you want univariate forecasts of the variance of something, as distinct from mere online calculations of the same, you might be better served by the timemachines package. In particular I would suggest checking the [time-series elo ratings](https://microprediction.github.io/timeseries-elo-ratings/html_leaderboards/special-k_001.html) and the ""special"" category in particular, as various kinds of empirical moment time-series (volatility etc) are used to determine those ratings. 
 - The name of this package refers to precision matrices, not numerical precision. This isn't a source of high precision covariance *calculations* per se. The intent is more in forecasting future realized covariance, conscious of the noise in the empirical distribution. Perhaps I'll include some more numerically stable methods from [this survey](https://dbs.ifi.uni-heidelberg.de/files/Team/eschubert/publications/SSDBM18-covariance-authorcopy.pdf) to make the name more fitting. Pull requests are welcome!
 - The intent is that methods are parameter free. However some not-quite autonomous methods admit a few parameters (the factories). 


# Disclaimer 
Not investment advice. Not M6 entry advice. Just a bunch of code subject to the MIT License disclaimers. 



",166,166,7,22,investment-portfolio,"[covariance-estimation, covariance-matrix, investment-portfolio, portfolio]",0.0
25,wzhe06,soccerbet,,https://github.com/wzhe06/soccerbet,https://api.github.com/repos/soccerbet/wzhe06,A Soccer Bet Portfolio Strategy Project,"# SoccerBet
一个研究足球彩票购买策略的小项目

## 数据源
各博彩公司的赔率数据来自于500.com，在运行程序后，从500.com实时抓取近期比赛数据，以及各比赛的赔率数据。由于500.com对于国外博彩公司的数据有延迟，所以在实际购买时还应该参照国外博彩公司官方网站公布的实时赔率。

## 博彩策略
该项目采取的博彩策略是利用不同博彩公司的赔率差，通过建立一个购买彩票的portfolio，获得盈利的彩票组合。

## 程序入口
请使用python执行项目中的main.py
即在安装好python环境，确保接入互联网，执行 python main.py

## 程序输出
程序输出，程序会输出每场比赛的比赛信息，盈利百分比，以及应购买的彩票组合。
例子如下：

	642471                                              //比赛代号
	http://odds.500.com/fenxi/ouzhi-642471.shtml        //比赛信息页面
	match name:	17亚冠杯分组赛                        //比赛名称
	match members:	西悉尼漫步者 VS 浦和红钻               //交战双方
	match time:	比赛时间2017-02-21 16:00             //比赛时间
	profit:	109.88                                      //按照下面的比例购买彩票，能够获得的收益109.88%，即盈利9.88%
	win:	168 Pinnbet	4.2	27                  //从Pinnbet下注 27%的资金押胜 (其中168是公司id，Pinnbet是公司名称，4.2是赔率，27是押27%的资金)
	draw:	168 Pinnbet	3.5	32                  //从Pinnbet下注 32%的资金押平
	lose:	26 Leon	2.68	41                          //从Leon下注 41%的资金押负
",122,122,18,0,investment-portfolio,"[investment-portfolio, portfolio, python, soccer-bet, soccer-matches]",0.0
26,MarcelBeining,EazeBot,,https://github.com/MarcelBeining/EazeBot,https://api.github.com/repos/EazeBot/MarcelBeining,Free python/telegram bot for easy execution and surveillance of crypto trading plans on multiple exchanges.,,105,105,10,12,investment-portfolio,"[crypto, cryptocurrencies, cryptotrader, exchange, investment-portfolio, portfolio-management, python, strategy, telegram-bot, trading, trading-bot]",0.0
27,empenoso,SilverFir-Investment-Report,,https://github.com/empenoso/SilverFir-Investment-Report,https://api.github.com/repos/SilverFir-Investment-Report/empenoso,"SilverFir: Investment Report :evergreen_tree:                       Инвестиционный отчёт в гугл доках, куда можно добавить любой актив и скачивать цену автоматически","# SilverFir: Investment Report :evergreen_tree:
Серьезно занимаетесь инвестициями? Акции, облигации, арендная недвижимость, Unit-Linked, ETF, вклады, ПИФы, НСЖ… Сможете прямо сейчас оценить совокупную стоимость своих активов и сказать насколько она изменилась за последний месяц и какой дивидендный доход принесёт в следующем месяце?

Комплексное и бесплатное решение по автоматизации учета практически любых финансовых активов в независимости от валюты и площадки размещения с помощью Google Таблиц. Все цены и параметры по активам скачиваются автоматически после первоначальной настройки.

Подробнее: [SilverFir-Investment-Report](https://empenoso.github.io/SilverFir-Investment-Report/)

* * * * *

### Гугл таблица на русском языке (реализована на формулах)
:round_pushpin: Статья в [Тинькофф-журнале (Т—Ж)](https://journal.tinkoff.ru/investment-report/) (апрель 2020 г).

:point_right: [Версия таблицы в этой редакции](https://docs.google.com/spreadsheets/d/12WxMr2dpx9tHUVGU5uL0KCmlj3khIP6PI9cZ0xLmbuA/edit?usp=sharing) на апрель 2020 г. :point_left:

* * * * *

### Гугл таблица на английском языке (реализована на формулах + скрипты)
:round_pushpin: Подробная инструкция как пользоваться этой редакцией таблицы опубликована на [Яндекс.Дзен](https://zen.yandex.ru/media/id/5dfb4f5af73d9d00ae13157e/googletablica-pomojet-podschitat-vashi-finansovye-aktivy--5dfb53f91febd400b9d08780?ref=github.com) (декабрь 2019 г).

:round_pushpin: Больше технических подробностей по предыстории создания в статье на [Хабре](https://habr.com/ru/post/477920/#Google) (декабрь 2019 г).

:round_pushpin: Обзорная статья и предыстория создания первой редакции таблицы на [vc.ru](https://vc.ru/finance/92990-upravlencheskiy-uchet-lichnyh-aktivov) (ноябрь 2019 г).

:round_pushpin: Первое публичное упоминание таблицы [ВКонтакте](https://vk.com/shardin_name?w=wall1763465_1791) (январь 2019 г).

:point_right: [Версия таблицы в этой редакции](https://docs.google.com/spreadsheets/d/1iNhWf2WdEFzD41gd6Zl98ILGu4KBg8Hr9gETJHr-4bc/edit?usp=sharing) на февраль 2020 г. :point_left:

* * * * *
### Скрипт поиска ликвидных облигаций на Мосбирже в качестве замены депозита
:round_pushpin: Версия поиска в Гугл таблице с учётом изменения налогообложения в 2021 году в статье [Тинькофф-журнала (Т—Ж)](https://journal.tinkoff.ru/moex-bond-2/) (май 2021 г, обновлено в феврале 2022 года).

:round_pushpin: С учётом измения налогообложения в 2021 году на [Хабре](https://habr.com/ru/post/533016/) (январь 2021 г).

:round_pushpin: Версия поиска в Гугл таблице в статье [Тинькофф-журнале (Т—Ж)](https://journal.tinkoff.ru/moex-bond-search/) (август 2020 г).

:round_pushpin: Форк с Docker версией (не обновляется): [GitHub](https://github.com/supaflyster/SilverFir-Investment-Report) (июнь 2020 г).

:round_pushpin: Node.js версия в статье на [Хабре](https://habr.com/ru/post/506720/) (июнь 2020 г).




",90,90,16,0,investment-portfolio,"[investment-analysis, investment-portfolio]",0.0
28,sabirjana,blog,,https://github.com/sabirjana/blog,https://api.github.com/repos/blog/sabirjana,Code and data for my blogs,"# blog
This repository hold code and related material for my posts and articles. You can access these at https://www.linkedin.com/in/sabirjana/detail/recent-activity/shares/ or
https://medium.com/@sabirh.jana

",83,83,4,2,investment-portfolio,"[finance, investment-analysis, investment-portfolio, portfolio, python, quantitative-finance]",0.0
29,englianhu,binary.com-interview-question,,https://github.com/englianhu/binary.com-interview-question,https://api.github.com/repos/binary.com-interview-question/englianhu,The sample question for Interview a job in Binary options,"
<img src='文艺坊图库/世博量化.png' height='100'> <img src='文艺坊图库/大秦赋 - 北京大学.png' height='100'>

<img src='文艺坊图库/binary-logo.jpg' width='240'>

---

[<img src='文艺坊图库/RStudioCloud.png' height='20'>](https://rstudio.cloud) [<img src='文艺坊图库/RStudioCom2.png' height='20'>](https://community.rstudio.com/new-topic?category=shiny&tags=shiny) [![](文艺坊图库/shiny-badge.svg)](https://www.shinyapps.io)

# 二元期权（binary.com）<span style='color:#DE5D83; background-color:black;'>**量化分析员/量化交易员**面试题</span>

**大秦赋 (Chinese Emperor)**<br>
春秋战国《*礼记•经解*》<br>
孔子曰：『君子慎始，差若毫厘，缪以千里。』

> <span style='color:#FFEBCD; background-color:#D2B48C;'>**《礼记·经解》孔子曰：**</span><span style='color:#A9A9A9'; background-color:#696969;'>*「君子慎始。差若毫厘，谬以千里。」*</span>[^1]

*引用：[「快懂百科」《礼记•经解》](https://www.baike.com/wikiid/2225522569881832051?view_id=2tt3iw3blkq000)和[第一范文网：差之毫厘，谬以千里的故事](https://www.diyifanwen.com/chengyu/liuziyishangchengyugushi/2010051523105152347092749890.htm)和[「百度百科」春秋时期孔子作品《礼记•经解》](https://baike.baidu.com/item/%E7%A4%BC%E8%AE%B0%C2%B7%E7%BB%8F%E8%A7%A3/2523092)和[「當代中國」差之毫釐 謬以千里](https://www.ourchinastory.com/zh/2962/%E5%B7%AE%E4%B9%8B%E6%AF%AB%E9%87%90%20%E8%AC%AC%E4%BB%A5%E5%8D%83%E9%87%8C)*

[^1]: [HTML Color Codes](https://html-color.codes)

## 0) 面试题

The sample question for Interview a job in Binary.com. Here I try to write a web application which is automatically gather data, calculate, forecast, place orders, settlement and also P&L report from tip-to-toe. Here I also conducting few research tasks to test the efficiency of some statistical models, and also refer to a [Master Degree level quantitave assignment](https://github.com/englianhu/Quant-Strategies-HFT) as my studies. Hope that I can be shortlisted to be a member of Binary.com.

## 1) 第一题

### 1.1) 解答

I use daily OHLCV USDJPY data (from 2014-01-01 to 2017-01-20) and application of some models to forecast the highest and lowest price :

- Auto Arima models
- Exponential Time Series
- Univariate Garch models
- Exponential Weighted Moving Average
- <s>Monte Carlo Markov Chain</s>
- <s>Bayesian Time Series</s>
- <s>Midas</s>

Kindly refer to [Binary.com Interview Q1](http://rpubs.com/englianhu/binary-Q1) ([Old link](https://englianhu.github.io/2017/09/binary-forex-trading-Q1.html) or [Alternate link](http://rpubs.com/englianhu/binary-forex-trading-Q1) or [Alternate link 2 (Added MSE comparison)](http://rpubs.com/englianhu/binary-Q1-Added)) for more information.

Well, dataset for below papers daily OHLCV of 7 currencies from 2013-01-01 to 2017-08-31:

- AUDUSD
- EURUSD
- GBPUSD
- USDCAD
- USDCHF
- USDCNY
- USDJPY

1) Here I wrote another extention page for Q1 which is analyse the multiple currencies and also models <s>from minutes to</s> daily. You are feel free to browse over [Binary.com Interview Q1 (Extention)](http://rpubs.com/englianhu/binary-Q1E) or ([Alternate link](http://rpubs.com/englianhu/316133)).

2) Here I also find the optimal arma order for GARCH models as you can refer to [GARCH模型中的`ARIMA(p,d,q)`参数最优化](http://rpubs.com/englianhu/binary-Q1FiGJRGARCH). [binary.com 面试试题 I - GARCH模型中的`ARCH in Mean`](http://rpubs.com/englianhu/binary-Q1-archm) compares the ARCHM with previous Non-ARCHM models.

3) You can also refer to [binary.com Interview Question I - Comparison of Univariate GARCH Models](http://rpubs.com/englianhu/binary-Q1Uni-GARCH) which compares the prediction accuracy of 14 GARCH models (not completed) and 9 models (mostly completed from 2013-01-01 to 2017-08-30).

- sGARCH
- fGARCH.GARCH
- fGARCH.TGARCH
- fGARCH.NGARCH
- fGARCH.NAGARCH
- fGARCH.GJRGARCH
- gjrGARCH
- iGARCH
- csGARCH

Besides, I wrote a shinyApp which display the real-time price through API. Kindly refer to [Q1App](https://beta.rstudioconnect.com/content/3073/) where [Q1App2](https://beta.rstudioconnect.com/content/3138/) is another app for financial value betting.

[binary.com Interview Question I - Multivariate GARCH Models](http://rpubs.com/englianhu/binary-Q1Multi-GARCH) introduce few multi-variate GARCH models.

- symmetric DCC
- asymmetric DCC
- Flexible DCC
- <s>GO-GARCH</s>
- <s>Copula-GARCH</s>

In order to started the high-frequency-trading statistical modelling, I inspect the dataset via [binary.com面试试题 I - 单变量数据缺失值管理](http://rpubs.com/englianhu/handle-missing-value) and also [binary.com 面试试题 I - 多变量数据缺失值管理 II](http://rpubs.com/englianhu/handle-multivariate-missing-value) but the univariate modelling caused some statistical error. The papers compares multi-methods like `interpolatan`, `kalman`, `locf` and `ma`. The [binary.com Interview Question I - Interday High Frequency Trading Models Comparison](http://rpubs.com/englianhu/binary-Q1Inter-HFT) compares ts, msts, SARIMA, mcsGARCH, <s>midasr, midas-garch, Levy process</s> models.

### 1.2) <span style='color:red'>幕后花絮</span>

Initially, I wrote a shiny app (as showing in below gif file) but it is heavily budden for loading. Kindly browse over [ShinyApp](https://beta.rstudioconnect.com/content/2367/) (Kindly refer to [binary.com Interview Question I - Lasso, Elastic-Net and Ridge Regression](http://rpubs.com/englianhu/binary-Q1L-EN-R) for more information) which contain the questions and answers of 3 questions. For the staking model, I simply forecast the highest and lowest price, and then : 
  
- Kelly criterion and using highest or lowest price for closing transaction, otherwise using closing price if the forecasted lowest/highest price is not occur.
- Placed $100 an each of the forecasted variance value and do the settlement based on the real variance value. 

<img src='文艺坊图库/20170113_104005.gif' width='360'>

Secondly, I wrote another app [testRealTimeTransc](https://beta.rstudioconnect.com/content/3775/) trial version to test the real time trading, and a completed version is [Q1App2](https://beta.rstudioconnect.com/content/3138/).

Due to the paper [Binary.com Interview Q1 - Tick-Data-HiLo For Daily Trading <span style='color:red'>(Blooper)</span>](http://rpubs.com/englianhu/binary-Q1TD) simulated the data and then only noticed I not yet updated the new function, then I wrote **GARCH模型中的`ARIMA(p,d,q)`参数最优化** to compare the accuracy. However my later paper simulated dataset doesn't save the $fit$ in order to retrieve the $\sigma^2$ and VaR values for stop-loss pips when I got the idea. Here I put it as blooper and start **binary-Q1 Multivariate GARCH Models** and later on will write another **FOREX Day Trade Simulation** which will simulate all tick-data but not only HiLo data.

### 1.3) 闪霓应用

- **shinyApp** : `shiny::runGitHub('englianhu/binary.com-interview-question')` - Application which compare the accuracy of multiple `lasso`, `ridge` and `elastic net` models (blooper).
- **Q1App** : `shiny::runGitHub('englianhu/binary.com-interview-question', subdir = 'Q1')` - the application gather, calculate and forecast price. Once the user select currency and the forecast day, the system will auto calculate and plot the graph.
- **testRealTimeTransc** : `shiny::runGitHub('englianhu/binary.com-interview-question', subdir = 'testRealTimeTransc')` - real time trading system which auto gather, calculate the forecast price, and also place orders, as well as settlement and plot P&L everyday.
- **Q1App2** : `shiny::runGitHub('englianhu/binary.com-interview-question', subdir = 'Q1App2')` - The application contain the Banker and Punter section which applied aboved statistical modelling.

## 2) 第二题

### 2.1) 解答

For question 2, I simply write an app, kindly use [Q2App](https://beta.rstudioconnect.com/content/3089/). The bivariate or trivariate poisson model might useful for analyse the probability of fund-in and fund-out by investors in order to manage whole investment pool. Unfortunately there has no such dataset avaiable for fund pool management modelling.

### 2.2) 闪霓应用

- **Q2** : `shiny::runGitHub('englianhu/binary.com-interview-question', subdir = 'Q2')` - An application which applied queuing theory.

## 3) 第三题

For question 3, due to the question doesn't states we only bet on the matches which overcame a certain edge, therefore I just simply list the scenario. Kindly refer to [Betting strategy](http://rpubs.com/englianhu/317677) for more informtion.

## 4) 参考资源

### 4.1)第一题

01. [**Stock Market Forecasting Using LASSO Linear Regression Model** *by Sanjiban Sekhar Roy, Dishant Mital, Avik Basu, Ajith Abraham (2015)*](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/master/reference/Stock%20Market%20Forecasting%20Using%20LASSO%20Linear%20Regression%20Model.pdf)❤‍🔥
02. [**Using LASSO from lars (or glmnet) package in R for variable selection** *by Juancentro (2014)*](http://stats.stackexchange.com/questions/58531/using-lasso-from-lars-or-glmnet-package-in-r-for-variable-selection?answertab=votes#tab-top)
03. [**Difference between glmnet() and cv.glmnet() in R?** *by Amrita Sawant (2015)*](https://stackoverflow.com/questions/29311323/difference-between-glmnet-and-cv-glmnet-in-r?answertab=votes#tab-top)
04. [**Testing Kelly Criterion and Optimal f in R** *by Roy Wei (2012)*](https://alphaism.wordpress.com/2012/04/13/testing-kelly-criterion-and-optimal-f-in-r) ❤‍🔥
05. [**Portfolio Optimization and Monte Carlo Simulation** *by Magnus Erik Hvass Pedersen (2014)*](https://raw.githubusercontent.com/scibrokes/kelly-criterion/master/references/Portfolio%20Optimization%20and%20Monte%20Carlo%20Simulation.pdf) ❤‍🔥
06. [**Glmnet Vignette** *by Trevor Hastie and Junyang Qian (2014)*](https://web.stanford.edu/~hastie/glmnet/glmnet_alpha.html)
07. [**lasso怎么用算法实现？** *by shuaihuang (2010)*](https://d.cosx.org/d/101533-101533/5)
08. [**The Sparse Matrix and {glmnet}** *by Manuel Amunategui (2014)*](http://amunategui.github.io/sparse-matrix-glmnet/)
09. [**Regularization and Variable Selection via the Elastic Net** *by Hui Zou and Trevor Hastie*](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/master/reference/Regularization%20and%20Variable%20Selection%20via%20the%20Elastic%20Net.pdf)
10. [LASSO, Ridge, and Elastic Net](http://www4.stat.ncsu.edu/~post/josh/LASSO_Ridge_Elastic_Net_-_Examples.html) ❤‍🔥
11. [**热门数据挖掘模型应用入门（一）: LASSO回归** *by 侯澄钧 (2016)*](https://cosx.org/2016/10/data-mining-1-lasso)
12. [The Lasso Page](http://statweb.stanford.edu/~tibs/lasso.html)
13. [**Call_Valuation.R** *by Mariano (2016)*](https://api.rpubs.com/Mariano/call)
14. [Lecture 6 – Stochastic Processes and Monte Carlo](http://zorro-trader.com/manual/en/Lecture%206.htm) ([<span style='color:blue'>http://zorro-trader.com/manual</span>](http://zorro-trader.com/manual)) ❤‍🔥 ❤‍🔥
15. [**The `caret` Package** *by Max Kuhn (2017)*](http://topepo.github.io/caret/index.html) ❤‍🔥
16. [Time Series Cross Validation](https://rpubs.com/crossxwill/time-series-cv) ❤‍🔥
17. [Character-Code.com](http://character-code.com/)
18. [**Size Matters – Kelly Optimization** *by Roy Wei (2012)*](https://alphaism.wordpress.com/2012/03/26/size-matters-kelly-optimization/) ❤‍🔥
19. [**Time Series Cross Validation** *by William Chiu (2015)*](https://rpubs.com/crossxwill/time-series-cv) ❤‍🔥
20. [**Forecasting Volatility** *by Stephen Figlewski (2004)*](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/fcad2844d7f10c486f3601af9932f49973548e4b/reference/Focasting%20Volatility.pdf)
21. [**Successful Algorithmic Trading** *by Michael Halls Moore (2015)*](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/fcad2844d7f10c486f3601af9932f49973548e4b/reference/Successful%20Algorithmic%20Trading.pdf) ❤‍🔥 ❤‍🔥
22. [**Financial Risk Modelling and Portfolio Optimization with R (2nd Edt)** *by Bernhard Praff (2016)*](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/master/reference/Financial%20Risk%20Modelling%20and%20Portfolio%20Optimization%20with%20R%20(2nd%20Edt).pdf) ❤‍🔥
23. [**Analyzing Financial Data and Implementing Financial Models using R** *by Clifford S.Ang (2015)*](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/eec3bbe99c61b4e2e2f4a2b1c47e7a2fca6106c4/reference/Analyzing%20Financial%20Data%20and%20Implementing%20Financial%20Models%20using%20R.pdf) ❤‍🔥

### 4.2) 第二题

01. [Queueing model 534 in Excel](https://github.com/englianhu/binary.com-interview-question/blob/master/reference/Queue-534.xls) ❤‍🔥
02. [Queueing model macro in Excel](https://github.com/englianhu/binary.com-interview-question/blob/master/reference/QueueMacros.xls) ❤‍🔥
03. [Queueing up in R, (continued)](https://www.r-bloggers.com/queueing-up-in-r-continued)
04. [Waiting in line, waiting on R](https://www.r-bloggers.com/waiting-in-line-waiting-on-r)
05. [Simulating a Queue in R](https://www.r-bloggers.com/simulating-a-queue-in-r/)
06. [What is the queue data structure in R?](https://www.researchgate.net/post/What_is_the_queue_data_structure_in_R#59d5b01b404854fdc9168902)
07. [Implementing a Queue as a Reference Class](https://www.r-bloggers.com/implementing-a-queue-as-a-reference-class/)
08. [queue implementation?](http://r.789695.n4.nabble.com/queue-implementation-td2529272.html)
09. [Queueing Theory Calculator](http://www.supositorio.com/rcalc) ❤‍🔥
10. [ **The Pith of Performance** *by Neil Gunther (2010)*](http://perfdynamics.blogspot.my/2010/05/simulating-queue-in-r.html?m=1)
11. [Computationally Efficient Simulation of Queues - The R Package queuecomputer](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/master/reference/Computationally%20Efficient%20Simulation%20of%20Queues%20-%20The%20R%20Package%20queuecomputer.pdf)
12. [Waiting-Line Models](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/master/reference/Waiting-Line%20Models.pdf)
13. [Queues with Breakdowns and Customer Discouragement](https://raw.githubusercontent.com/englianhu/binary.com-interview-question/master/reference/Queues%20with%20Breakdowns%20and%20Customer%20Discouragement.pdf)

### 4.3) 第三题

01. [Data APIs/feeds available as packages in R](http://stats.stackexchange.com/questions/12670/data-apis-feeds-available-as-packages-in-r)
02. [Application of Kelly Criterion model in Sportsbook Investment](https://github.com/scibrokes/kelly-criterion)

---

<img src='文艺坊图库/deriv.jpg' width='260'>

[<img src='文艺坊图库/RStudioCloud.png' height='20'>](https://rstudio.cloud) [<img src='文艺坊图库/RStudioCom2.png' height='20'>](https://community.rstudio.com/new-topic?category=shiny&tags=shiny) [![](文艺坊图库/shiny-badge.svg)](https://www.shinyapps.io)

# 量化交易

### 1.1) <span style='color:RoyalBlue'>简介</span>

- 从2018年[Binary.com-is-Rebranding-to-Deriv.com](https://derivdotcom.medium.com/binary-com-is-rebranding-to-deriv-com-and-here-is-everything-you-need-to-know-6f4a8513c84b)科研项目耽搁两年有余，2020年的[二元期权（Binary.com） → 金融衍生/金融起源（Deriv.com）](https://englianhu.medium.com/binary-com-deriv-com-6058cdbfc3a1)文章中阐明一些已发布的科研论文，并继续科研对冲基金高频量化交易，不过在此并非面试Deriv.com而是科研用途。
- [金融衍生/金融起源（Deriv.com）和二元期权（Binary.com）加入金融委员会](https://caifuhao.eastmoney.com/news/20200609155259637111910)
- 科研项目中所使用的汇价原始数据，皆由FXCM官网下载，储存至[猫城：scibrokes/real-time-fxcm](https://github.com/scibrokes/real-time-fxcm)回测科研统计建模用途。

<span style='color:red'>**I moved the data to <https://github.com/englianhu/binary.com-interview-question-data>.**</span>

Below are some seasonal time series models: 

- [Deriv.com - Interday High Frequency Trading Models Comparison <span style='color:RoyalBlue'>Review (Part I)</span>](https://rpubs.com/englianhu/binary-Q1Inter-HFT-RV1) (in RPubs.com)
- [Deriv.com - Interday High Frequency Trading Models Comparison <span style='color:RoyalBlue'>Review (Part I)</span>](https://beta.rstudioconnect.com/content/16240/binary-Q1Inter-HFT-RV1.html) (in RStudioConnect.com)
- [Deriv.com - Interday & Intraday High Frequency Trading Models Comparison <span style='color:#4E79A7'>**Review (Part II)**</span>](https://rpubs.com/englianhu/742275) (in RPubs.com)
- [Deriv.com - Interday & Intraday High Frequency Trading Models Comparison <span style='color:#4E79A7'>**Review (Part II)**</span>](https://beta.rstudioconnect.com/content/16442/binary-Q1Inter-HFT-RV2.html) (in RStudioConnect.com)
- [Deriv.com - 筛选日内高频量化交易统计模型 <span style='color:#4E79A7'>**校阅（第III部）**</span>](https://rpubs.com/englianhu/987834)

### 1.2) <span style='color:red'>幕后花絮</span>

[Deriv.com - Interday High Frequency Trading Models Comparison <span style='color:red'>Blooper</span>](https://rpubs.com/englianhu/binary-Q1Inter-HFT) built seasonal models.

---

[<img src=""文艺坊图库/Scibrokes.png"" height=""14""/> Sςιβrοκεrs Trαdιηg®](http://www.scibrokes.com)<br>
[<img src=""文艺坊图库/Scibrokes.png"" height=""14""/> 世博量化®](http://www.scibrokes.com)企业知识产权及版权所有，盗版必究。
",55,55,6,4,investment-portfolio,"[acd, arima, bayesian, betting, elastic-net, ets, garch, investment, investment-portfolio, investment-strategies, kelly-criterion, lasso-regression, markowitz-portfolio, mcmc, ridge-regression, statistics]",0.0
30,IBM,personal-wealth-portfolio-mgt-bot,IBM,https://github.com/IBM/personal-wealth-portfolio-mgt-bot,https://api.github.com/repos/personal-wealth-portfolio-mgt-bot/IBM,WARNING: This repository is no longer maintained ⚠️ This repository will not be updated. This repository will be kept available in read-only mode.,"# WARNING: This repository is no longer maintained :warning:

> This repository will not be updated. This repository will be kept available in read-only mode. 

---

[![Build Status](https://travis-ci.org/IBM/personal-wealth-portfolio-mgt-bot.svg?branch=master)](https://travis-ci.org/IBM/personal-wealth-portfolio-mgt-bot)

# Personal Wealth Portfolio Management Bot

*Read this in other languages: [한국어](README-ko.md), [中国](README-cn.md), [Português](README-pt.md) .*

In this developer pattern we will create a financial-based Watson Assistant based chatbot
that allows a user to: 1) use an Investment Portfolio service to query his or her investment portfolios and associated holdings 2) use the Simulated Instrument Analytics service to compute analytics on securities under a given scenario. 3) understand how to swap between alternative interfaces:  a) web interface b) TwilioSMS

When the reader has completed this pattern, he or she will understand how to:

* Create a chatbot dialog with Watson Assistant
* Set up multiple interfaces with the Watson Assistant bot: Web & Twilio
* Access, seed and send data to the Investment Portfolio Service
* Send data along with a scenario to the Simulated Instrument Analytics service to retrieve analytics

Click here to view the [IBM Pattern](https://developer.ibm.com/code/patterns/create-an-investment-management-chatbot/) for this project.

## Flow

![](images/architecture.png)

## Prerequisites

You will need the following accounts and tools:

#### Git Command
You need the `git` command to download repo to your system.  Download Git at the following link [here](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)

#### Curl Command
The `curl` command is a software package which consists of command line tool and a library for tranferring data using URL syntax. Download curl release from the following link [here](https://curl.haxx.se/dlwiz/)

#### IBM Cloud CLI
To interact with the hosted offerings, the IBM Cloud CLI will need to be installed beforehand. The latest CLI releases can be found at the link [here](https://console.bluemix.net/docs/cli/reference/bluemix_cli/download_cli.html#download_install). An install script is maintained at the mentioned link, which can be executed with one of the following commands

```bash
# Mac OSX
curl -fsSL https://clis.ng.bluemix.net/install/osx | sh

# Linux
curl -fsSL https://clis.ng.bluemix.net/install/linux | sh

# Powershell
iex(New-Object Net.WebClient).DownloadString('https://clis.ng.bluemix.net/install/powershell')
```

After installation is complete, confirm the CLI is working by printing the version like so

```bash
bx -v
```

## Included Components

* IBM Cloud Watson Assistant
* IBM Cloud Cloudant NoSQL DB
* IBM Cloud Investment Portfolio
* IBM Cloud Simulated Instrument Analytics

## Relatd Technologies

* TwilioSMS
* Node.js

## Steps

Use the ``Deploy to IBM Cloud`` button **OR** create the services and run ``Run Locally``.

Use the IBM Cloud for Financial Services to build the future of financial services with to help from Watson and developer starter kits. Visit [https://developer.ibm.com/finance/](https://developer.ibm.com/finance/) for more information.

## Deploy to IBM Cloud

[![Deploy to IBM Cloud](https://bluemix.net/deploy/button.png)](https://bluemix.net/deploy?repository=https://github.com/IBM/personal-wealth-portfolio-mgt-bot.git)

Use Ctrl-click on the Deploy to `IBM Cloud` button below to open the deployment process in a separate tab.

1. Log in to your IBM Cloud account before deploying. If already logged in, then ignore this step.

   ![](images/bm-deploy-img.png)

2. We can see that the app is ready to be deployed, and we need to ensure that the App name, region, Organization, Space is valid before pressing _Deploy_.

   ![](images/bm-deploy-step2.png)

3. In Toolchain, the app is deployed. There are also option to edit code via the Eclipse IDE and git if required.

   ![](images/bm-deploy-step3.png)

4. You should see two stages pass successfully once your _Deploy Stage_ completes

   ![](images/bm-deploy-step4.png)

5. To see the app and services created and configured for this pattern, use the IBM Cloud dashboard. The app is named `personal-wealth-portfolio-mgt-bot` with a unique suffix:

   * [**Watson Assistant**](https://console.bluemix.net/catalog/services/watson-assistant-formerly-conversation)
   * [**Cloudant NoSQL DB**](https://console.ng.bluemix.net/catalog/services/cloudant-nosql-db/)
   * [**Investment Portfolio**](https://console.ng.bluemix.net/catalog/services/investment-portfolio)
   * [**Simulated Instrument Analytics**](https://console.ng.bluemix.net/catalog/services/simulated-instrument-analytics)

   > **NOTE:** There are a few more steps you need to complete before you can run the application.

### A. Seed the Investment Portfolio Service

You now need to manually seed your Investment Portfolio. For all these steps - replace **userid** and **password** with the credentials from your IBM Cloud Service.

> **NOTE:** `{service-user-id}` is the user id associated with your Portfolio Investment Service

> **NOTE:** `{service-user_password}` is the password associated with your Portfolio Investment Service

1. Example of creating a portfolio entry in your Portfolio Investment Service:

```
curl -X POST -u ""{service-user-id}"":""{service-user_password}"" --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{ ""name"":""P1"", ""timestamp"": ""2017-02-24T19:53:56.830Z"", ""closed"": false, ""data"": { ""manager"": ""Edward Lam"" }}' 'https://investment-portfolio.mybluemix.net/api/v1/portfolios'
```

2. Example of creating holdings in your entry:

```
curl -X POST -u ""{service-user-id}"":""{service-user_password}"" --header 'Content-Type: application/json' --header 'Accept:application/json' -d '{ ""timestamp"": ""2017-05-05T19:53:56.830Z"", ""holdings"": [ { ""asset"": ""IBM"", ""quantity"": 1500, ""instrumentId"": ""CX_US4592001014_NYQ""}, { ""asset"": ""GE"", ""quantity"": 5000, ""instrumentId"": ""CX_US3696041033_NYQ"" }, { ""asset"": ""F"", ""quantity"": 5000, ""instrumentId"": ""CX_US3453708600_NYQ"" }, { ""asset"": ""BAC"", ""quantity"": 1800, ""instrumentId"": ""CX_US0605051046_NYS"" } ] }' 'https://investment-portfolio.mybluemix.net/api/v1/portfolios/P1/holdings'
```

### B. Configuring your Environment Variables in IBM Cloud

Before you can actually run the application, you need to add two environment variables in IBM Cloud:

Go to the _Run time_ tab of your application. Scroll to the bottom of the screen and add the following environment variables:

| Name                                                    | Value                                |
|---------------------------------------------------------|--------------------------------------|
| `USE_WEBUI`                                             | `true`                               |
| `CRED_SIMULATED_INSTRUMENT_ANALYTICS_SCENARIO_FILENAME` | `./resources/spdown5_scenario.csv`   |

Click **Save** to redeploy your application.

### C. Running the application from IBM Cloud

Now you are ready to run your application from IBM Cloud. Select the URL from the dashboard.

![](images/runningappurl.png)

> **NOTE:** If you get a *Not Authorized* message - you need to confirm that the credentials you used match the credentials in IBM Cloud.

## Running the application Locally

> NOTE: These steps are only needed when running locally instead of using the ``Deploy to IBM Cloud`` button

1. [Clone the repo](#1-clone-the-repo)
2. [Create IBM Cloud services](#2-create-ibm-cloud-services)
3. [Watson Assistant Service](#3-watson-assistant-service)
4. [Seed Investment Portfolio](#4-seed-investment-portfolio)
5. [Configure Manifest file](#5-configure-manifest)
6. [Configure .env file](#6-configure-env-file)
7. [Update ``controller.js`` file](#7-update-controllerjs-file)
8. [Run the application](#8-run-application)

### 1. Clone the repo

Clone the `personal-wealth-portfolio-mgt-bot` code locally. In a terminal, run:

```
git clone https://github.com/IBM/personal-wealth-portfolio-mgt-bot.git
```

### 2. Create IBM Cloud services

Create the following services:

* [**Watson Assistant**](https://console.ng.bluemix.net/catalog/services/conversation)
* [**Cloudant NoSQL DB**](https://console.ng.bluemix.net/catalog/services/cloudant-nosql-db/)
* [**Investment Portfolio**](https://console.ng.bluemix.net/catalog/services/investment-portfolio)
* [**Simulated Instrument Analytics**](https://console.ng.bluemix.net/catalog/services/simulated-instrument-analytics)

> **NOTE:** Because this pattern uses 4 IBM Cloud services, you may hit your limit for the number of services you have instantiated. You can get around this by removing services you don't need anymore. Additionally - if you hit the limit on the number of Apps you have created, you may need to also remove any that you don't need anymore.

* Record the user ID and password from the credentials tab on the Assistant Service.

### 3. Watson Assistant Service

You can choose to have a workspace dynamically created for you or create one yourself within your IBM Cloud Service. If you choose to create yourself, then follow these steps:

The Assistant service must be trained before you can successfully use this application.  The training data is provided in the file: [`resources/workspace.json`](resources/workspace.json)

1. Make sure you are logged into IBM Cloud

2. Navigate to upper left hand side and click on the 3 parallel lines and select Dashboard from the left hand navigation panel.

3. Scroll down and under ""All Services"" - select the instance of the Assistant service that you are using

4. Once on the Service details page, scroll down (if necessary) and click green Launch tool button on the right hand side of the page. This will launch the tooling for the Assistant service, which allows you to build dialog flows and train your chatbot. This should take you to your workspace in the Assistant service which represents a unique set of chat flows and training examples. This allows you to have multiple chatbots within a single instance of the Assistant service.

5. Once on the page, you will see the option to either ""Create"" a new workspace, or ""import"" an existing one. We are going to ""import"" a premade chatbot for this example, so select ""Import"" (click on the arrow next to the create button).

    ![](images/import_arrow.png)

6. Click Choose a file, navigate to the resources directory of your clone of the repository for this project, and select the file workspace.json. Once the file is selected, ensure that the ""Everything"" (Intents, Entities, and Dialog) option is selected.

7. Click Import to upload the .json file to create a workspace and train the model used by the Assistant service.

   **NOTE: Record your Workspace ID to use later**

  To find your workspace ID once training has completed, click the three vertical dots in the upper right-hand corner of the Workspace pane, and select View details. Once the upload is complete, you will see a new workspace.  In order to connect this workspace to our application, we will need to include the Workspace ID in our environment variables  on your application dashboard (if you used the ``Deploy to IBM Cloud`` button or save in the file `.env` if you are deploying ``locally``. Save this id.

8. *Optionally*, you may want to explore the conversation dialog. select the workspace and choose the **Dialog** tab, here's a snippet of the dialog:

  ![](images/dialog.png)

### 4. Seed Investment Portfolio

Execute section A of the ``Deploy to IBM Cloud`` section

### 5. Configure Manifest

Edit the [`manifest.yml`](manifest.yml) file in the folder that contains your code and replace `portoflio-chat-newbot` with a unique name for your application. The name that you specify determines the application's URL, such as `your-application-name.mybluemix.net`. Additional - update the service labels and service names so they match what you have in IBM Cloud. The relevant portion of the `manifest.yml` file looks like the following:

   ```yml
   declared-services:
     Cloudant-us:
       label: cloudantNoSQLDB
       plan: Lite
     WatsonAssistant-us:
       label: conversation
       plan: free
     Investment-Portfolio:
       label: fss-portfolio-service
       plan: fss-portfolio-service-free-plan
     Simulated-Instrument-Analytics:
       label: fss-scenario-analytics-service
       plan: fss-scenario-analytics-service-free-plan
   applications:
   - services:
     - Cloudant-us
     - WatsonAssistant-us
     - Investment-Portfolio
     - Simulated-Instrument-Analytics
     name: portoflio-chat-newbot
     path: .
     memory: 256M
     instances: 1
     domain: mybluemix.net
     disk_quota: 1024M
   ```

### 6. Configure .env file

1. Create a `.env` file in the root directory of your clone of the project repository by copying the sample `.env.example` file using the following command:

> **NOTE:** Most files systems regard files with a ""."" at the front as hidden files.  If you are on a Windows system, you should be able to use either [GitBash](https://git-for-windows.github.io/) or [Xcopy](https://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/xcopy.mspx?mfr=true)

  ```bash
  cp .env.example .env
  ```

   Now update the credentials with the IBM Cloud credentials for each of the services you created in [Step 2](#2-create-bluemix-services). The `.env` file will look something like the following:

   ```ini

   USE_WEBUI=true

   # Uncomment and use either username+password or IAM apikey
   CONVERSATION_USERNAME=8baa4dc5-1afd-4bf1-992d-2eee3cbac21f
   CONVERSATION_PASSWORD=Pnu3u23qywMT
    
   #Watson Assistant Authentication using IAM
   #CONVERSATION_IAM_APIKEY=<put assistant IAM apikey here>

   #CLOUDANT
   CLOUDANT_URL=

   #INVESTMENT PORTFOLIO
   CRED_PORTFOLIO_USERID=
   CRED_PORTFOLIO_PWD=
   URL_GET_PORTFOLIO_HOLDINGS=https://investment-portfolio.mybluemix.net/

   CRED_SIMULATED_INSTRUMENT_ANALYTICS_URL=https://fss-analytics.mybluemix.net/
   CRED_SIMULATED_INSTRUMENT_ANALYTICS_ACCESSTOKEN=
   CRED_SIMULATED_INSTRUMENT_ANALYTICS_SCENARIO_FILENAME=./resources/spdown5_scenario.csv

   #TWILIO
   USE_TWILIO=false
   USE_TWILIO_SMS=false
   TWILIO_ACCOUNT_SID=
   TWILIO_AUTH_TOKEN=
   TWILIO_API_KEY=
   TWILIO_API_SECRET=
   TWILIO_IPM_SERVICE_SID=
   TWILIO_NUMBER=
   ```

### 7. Update controller.js file

One additional step is that you need to comment out two lines in the Controller file to set the userid and password of the investment portfolio service (lines 66-70)

![](images/commentlines.png)

### 8. Run Application

1. Install the dependencies you application need:

   ```bash
   npm install
   ```

2. Start the application locally:

   ```bash
   npm start
   ```

3. Test your application by going to: [http://localhost:3000/](http://localhost:3000/)

4. Start a conversation with your bot:

   ![](images/conversationsample.png)

## Configure Twilio (Optional)

You still have one more step if you are planning to use Twilio as the interface. We have to update a couple more environment variables. Again - this is an optional step. By default the app interfaces with a Web UI; but this enables an interface with Twilio.

**NOTE:** Using Twilio is an option, the application works with the Web UI by default. So only do the Twilio configuration if you are using Twilio.

1. If you have not done so yet, get a phone number from the Twilio service. [https://www.twilio.com/](https://www.twilio.com/)

2. Edit your `.env` file to add credentials for Twilio. You can get this information from the dashboard when you get a phone number for Twilio

   ![](images/twilio-dashboard.png)

   * Set the `USE_TWILIO_SMS` variable to `true`.
   * Set the `TWILIO_ACCOUNT_SID` variable
   * Set the `TWILIO_AUTH_TOKEN` variable
   * Set the `TWILIO_NUMBER` variable

3. If you clicked the `Deploy to IBM Cloud` button, save the new values and restart the application in IBM Cloud, watch the logs for errors.

4. In order to have Twilio listen to the local port (:3000), you need to set up a tunnel a webhook. You can use the tool *ngrok* https://ngrok.com/. Go ahead and download ngrok.  Open a terminal window and start ngrok by using the command:

   ```none
   ngrok http 3000
   ```

   > **NOTE:** use port 80 if you are running the application from IBM Cloud.

   You will get a response like the following:

   ![](images/ngrok-dashboard.png)

   Copy the HTTPS URI and paste it into the entry field for your SMS Webhook (inside the Twilio dashboard):

   ![](images/webhook-dashboard.png)

# Adapting and extending the pattern

One can enhance the current application by adding in additional financial services. Xignite, Inc. (http://xignite.com)  provides cloud-based financial market data APIs that work side by side with the IBM Cloud Fintech services. Specifically, the `GetGlobalDelayedQuotes()` Rest API is available to provide delayed quotes for a specific global security.

![](images/extensions.png)

# Troubleshooting  

* To troubleshoot your IBM Cloud application, use the logs. To see the logs, run:

  ```bash
  cf logs <application-name> --recent
  ```

* If you are running locally - inspect your environment varibles closely to confirm they match.

  * The credentials for IBM Cloud services (Assistant, Cloudant, and Discovery), can be found in the ``Services`` menu in IBM Cloud, and selecting the ``Service Credentials`` option.

  * Alternatively, you can debug the application by going to `https://<name of your application>.mybluemix.net/debug.html` to see a panel that shows metadata which contains details on the interaction with the services being used.

## License
This code pattern is licensed under the Apache Software License, Version 2.  Separate third party code objects invoked within this code pattern are licensed by their respective providers pursuant to their own separate licenses. Contributions are subject to the [Developer Certificate of Origin, Version 1.1 (DCO)](https://developercertificate.org/) and the [Apache Software License, Version 2](http://www.apache.org/licenses/LICENSE-2.0.txt).

[Apache Software License (ASL) FAQ](http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN)

",45,45,21,0,investment-portfolio,"[financial, ibm-developer-technology-fintech, ibmcode, investment-portfolio, portfolio-investment, simulated-instrument-analytics, twilio, watson-conversation]",0.0
31,mbk-dev,okama-dash,mbk-dev,https://github.com/mbk-dev/okama-dash,https://api.github.com/repos/okama-dash/mbk-dev,Python financial widgets with okama and Dash (plotly),"[![Python](https://img.shields.io/badge/python-v3-brightgreen.svg)](https://www.python.org/)
[![License](https://img.shields.io/pypi/l/okama.svg)](https://opensource.org/licenses/MIT)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

# Okama widgets
This repository has a set of interactive financial widgets (multi-page web application) build with 
[okama package](https://github.com/mbk-dev/okama/) and [Dash (plotly)](https://dash.plotly.com/) framework:

- Efficient Frontier builder
- Compare assets historical performance: wealth indexes, rate of return and risk-metrics

_okama package_ is used for quantitative finance and historical data.  
Running financial widgets example is available on [okama.io](https://okama.io).

![](../images/images/main_page.jpg?raw=true) 
## Historical data
Widgets go with free «end of day» historical stock markets data and macroeconomic indicators through 
[okama package](https://github.com/mbk-dev/okama/):

### End of day historical data

- Stocks and ETF for main world markets
- Mutual funds
- Commodities
- Stock indexes

### Currencies

- FX currencies
- Crypto currencies
- Central bank exchange rates

### Macroeconomic indicators
For many countries (USA, United Kingdom, European Union, Russia, Israel etc.):  

- Inflation
- Central bank rates
- CAPE10 (Shiller P/E) Cyclically adjusted price-to-earnings ratios

### Other historical data

- Real estate prices
- Top bank rates

## Installation
We recommend using [Poetry](https://python-poetry.org/docs/) for dependency management.  
After installing Poetry:
```python
poetry init
poetry shell  # activate the environment
```
Alternatively you can do it with pure python:
```python
python -m venv venv
source venv/bin/activate  # Windows: \venv\scripts\activate
pip install -r requirements.txt
```
To run the project locally:
```python
python app.py
```
For production, we recommend using [gunicorn](https://gunicorn.org/#docs) WSGI server and run the project with `run_gunicorn.py`.
![](../images/images/wealth_indexes.png?raw=true) 
## License

MIT
",39,39,1,5,investment-portfolio,"[asset-allocation, dash, data-science, efficient-frontier, finance, investment-portfolio, market-data, okama, plotly, plotly-dash, portfolio-optimization, python, quantative-finance, stock, stock-market, wealth-index]",0.0
32,IBM,Predictive-Market-Stress-Testing,IBM,https://github.com/IBM/Predictive-Market-Stress-Testing,https://api.github.com/repos/Predictive-Market-Stress-Testing/IBM,WARNING: This repository is no longer maintained :warning: This repository will not be updated. The repository will be kept available in read-only mode.,"# WARNING: This repository is no longer maintained :warning:

> This repository will not be updated. The repository will be kept available in read-only mode.

[![Build Status](https://travis-ci.com/IBM/Predictive-Market-Stress-Testing.svg?branch=master)](https://travis-ci.com/IBM/Predictive-Market-Stress-Testing)
# Predictive Market Stress Testing

In this code pattern, we will use three IBM Cloud finance services to create a web application which performs a stress test on an investment portfolio. The Investment Portfolio service is used to load the portfolio into the interface. The Predictive Market Scenario service will create a scenario csv file using risk factor and shock magnitude from user inputs. The Simulated Instrument Analytics service uses the scenario csv file with each holding in the portfolio to create a table displaying the current and stressed price of the investment holding.

This code pattern is designed for developers with interest in creating financial applications pertaining to investment portfolios.  When the reader has completed this code pattern, they will understand how to:

* Load and retrieve data from the Investment Portfolio service
* Use the Predictive Market Scenario service to generate a scenario
* Send data along with a scenario to the Simulated Instrument Analytics service to retrieve analytics

<p align=""center"">
  <img src=""static/images/architecture.png"">
</p>

## Included Components

Offered on [IBM Cloud](https://cloud.ibm.com/):

+ [Investment Portfolio](https://cloud.ibm.com/catalog/services/investment-portfolio)
+ [Predictive Market Scenario](https://cloud.ibm.com/catalog/services/predictive-market-scenarios)
+ [Simulated Instrument Analytics](https://cloud.ibm.com/catalog/services/predictive-market-scenarios)

**Note:** these services are free for those who have a Lite account

# Deploy to IBM Cloud

Create an [IBM Cloud account](https://cloud.ibm.com/registration/?target=%2Fdashboard%2Fapps) and directly deploy the application using the button bellow.

[![Deploy to IBM Cloud](https://cloud.ibm.com/devops/setup/deploy/button.png)](https://cloud.ibm.com/devops/setup/deploy?repository=https://github.com/IBM/Predictive-Market-Stress-Testing)


Be sure to [load investment portfolio](#3-load-investment-portfolio) before running the application.

# Running the Application
Follow these steps to setup and run this code pattern. The steps are described in detail below.

## Prerequisite
- [Python](https://www.python.org/downloads/)
- [curl](https://curl.haxx.se/download.html)
- [IBM Cloud account](https://cloud.ibm.com/registration/?target=%2Fdashboard%2Fapps)
- [IBM Cloud CLI](https://cloud.ibm.com/docs/cli)

## Steps
1. [Clone the repo](#1-clone-the-repo)
2. [Create IBM Cloud services](#2-create-ibm-cloud-services)
3. [Load Investment Portfolio](#3-load-investment-portfolio)
4. [Configure Manifest file](#4-configure-manifest-file)
5. [Configure .env file](#5-configure-env-file)
6. [Run Application](#6-run-application)

## 1. Clone the repo

Clone the `Predictive-Market-Stress-Testing code` locally. In a terminal, run:

  `$ git clone https://github.com/IBM/Predictive-Market-Stress-Testing`


## 2. Create IBM Cloud services

Create the following services in IBM Cloud.  These services are part of either `Free` or `Experimental` plan.

* [**Investment Portfolio**](https://cloud.ibm.com/catalog/services/investment-portfolio)
* [**Predictive Market Scenario**](https://cloud.ibm.com/catalog/services/predictive-market-scenarios)
* [**Simulated Instrument Analytics**](https://cloud.ibm.com/catalog/services/simulated-instrument-analytics)


## 3. Load Investment Portfolio

You can load your Investment Portfolio using curl commands in a terminal.
For all these steps:
- replace {service-user-id} the user id associated with your Investment Portfolio service
- replace {service-user_password} with the password associated with your Investment Portfolio service

**For Mac & Linux**

i. Creating a portfolio entry in your Investment Portfolio service:

`curl -X POST -u ""{service-user-id}"":""{service-user_password}"" --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{ ""name"":""MyFixedIncomePortfolio"", ""timestamp"": ""2017-02-22T19:53:56.830Z"", ""closed"": false, ""data"": { ""manager"": ""Will Smith"" }}' 'https://investment-portfolio.mybluemix.net/api/v1/portfolios'`

ii. Creating holdings in your entry:

`curl -X POST -u ""{service-user-id}"":""{service-user_password}"" --header 'Content-Type: application/json' --header 'Accept:application/json' -d '{ ""timestamp"": ""2017-06-04T19:53:56.830Z"", ""holdings"": [ { ""asset"": ""AMGN 4.1 06/15/21"", ""quantity"": 10, ""instrumentId"": ""CX_US031162BG42_USD"", ""companyName"": ""AMGEN INC""}, { ""asset"": ""AMGN 5.15 11/15/41"", ""quantity"": 30, ""instrumentId"": ""CX_US031162BK53_USD"", ""companyName"": ""AMGEN INC"" }, { ""asset"": ""EVHC 5.625 07/15/22"", ""quantity"": 50, ""instrumentId"": ""CX_US03232PAD06_USD"", ""companyName"": ""ENVISION HEALTHCARE CORP""}, { ""asset"": ""APC 4.85 03/15/21"", ""quantity"": 40, ""instrumentId"": ""CX_US032511BM81_USD"", ""companyName"": ""ANADARKO PETROLEUM CORP""}, { ""asset"": ""ADI 3.5 12/05/26"", ""quantity"": 30, ""instrumentId"": ""CX_US032654AN54_USD"", ""companyName"": ""ANALOG DEVICES INC""}, { ""asset"": ""ABIBB 2.65 02/01/21"", ""quantity"": 20, ""instrumentId"": ""CX_US035242AJ52_USD"", ""companyName"": ""ANHEUSER-BUSCH INBEV FIN""}, { ""asset"": ""ABIBB 3.3 02/01/23"", ""quantity"": 10, ""instrumentId"": ""CX_US035242AL09_USD"", ""companyName"": ""ANHEUSER-BUSCH INBEV FIN""} ] }' 'https://investment-portfolio.mybluemix.net/api/v1/portfolios/MyFixedIncomePortfolio/holdings'`

Find more information on Investment Portfolio api calls [here](https://cloud.ibm.com/apidocs/751-investment-portfolio?&language=node#introduction).

**For Windows**

For windows, curl commands cannot include single quotes so provide json data as a separate file.

i. For creating a portfolio entry, create a json text file for data and save it i.e `json.txt`
```
{ ""name"":""MyFixedIncomePortfolio"", ""timestamp"": ""2017-02-22T19:53:56.830Z"", ""closed"": false, ""data"": { ""manager"": ""Will Smith"" }}
```

In the same directory as the `json.txt` file, navigate to the folder in `DOS prompt`. And then run then the curl command:
```
curl -X POST -u ""{service-user-id}"":""{service-user_password}"" --header ""Content-Type: application/json"" --header ""Accept: application/json"" -d @json.txt https://investment-portfolio.mybluemix.net/api/v1/portfolios
```

ii. Similarly for creating holdings, create a json text file for data i.e `json_holdings.txt`
```
{ ""timestamp"": ""2017-06-04T19:53:56.830Z"", ""holdings"": [ { ""asset"": ""AMGN 4.1 06/15/21"", ""quantity"": 10, ""instrumentId"": ""CX_US031162BG42_USD"", ""companyName"": ""AMGEN INC""}, { ""asset"": ""AMGN 5.15 11/15/41"", ""quantity"": 30, ""instrumentId"": ""CX_US031162BK53_USD"", ""companyName"": ""AMGEN INC"" }, { ""asset"": ""EVHC 5.625 07/15/22"", ""quantity"": 50, ""instrumentId"": ""CX_US03232PAD06_USD"", ""companyName"": ""ENVISION HEALTHCARE CORP""}, { ""asset"": ""APC 4.85 03/15/21"", ""quantity"": 40, ""instrumentId"": ""CX_US032511BM81_USD"", ""companyName"": ""ANADARKO PETROLEUM CORP""}, { ""asset"": ""ADI 3.5 12/05/26"", ""quantity"": 30, ""instrumentId"": ""CX_US032654AN54_USD"", ""companyName"": ""ANALOG DEVICES INC""}, { ""asset"": ""ABIBB 2.65 02/01/21"", ""quantity"": 20, ""instrumentId"": ""CX_US035242AJ52_USD"", ""companyName"": ""ANHEUSER-BUSCH INBEV FIN""}, { ""asset"": ""ABIBB 3.3 02/01/23"", ""quantity"": 10, ""instrumentId"": ""CX_US035242AL09_USD"", ""companyName"": ""ANHEUSER-BUSCH INBEV FIN""} ] }
```

And next run the curl command:
```
curl -X POST -u ""{service-user-id}"":""{service-user_password}"" --header ""Content-Type: application/json"" --header ""Accept:application/json"" -d json_holdings.txt https://investment-portfolio.mybluemix.net/api/v1/portfolios/MyFixedIncomePortfolio/holdings`
```

## 4. Configure Manifest file

Edit the `manifest.yml` file in the folder that contains your code and replace with a unique name for your application. The name that you specify determines the application's URL, such as `your-application-name.mybluemix.net`. Additionally - update the service names so they match what you have in IBM Cloud. The relevant portion of the `manifest.yml` file looks like the following:

  ```none
  declared-services:
    Investment-Portfolio:
      label: fss-portfolio-service
      plan: fss-portfolio-service-free-plan
    Predictive-Market-Scenarios:
      label: fss-predictive-scenario-analytics-service
      plan: fss-predictive-scenario-analytics-service-free-plan
    Simulated-Instrument-Analytics:
      label: fss-scenario-analytics-service
      plan: fss-scenario-analytics-service-free-plan
  applications:
  - path: .
    memory: 128M
    instances: 1
    name: Predictive-Market-Stress-Testing
    disk_quota: 1024M
    domain: mybluemix.net
    services:
    - Investment-Portfolio
    - Predictive-Market-Scenarios
    - Simulated-Instrument-Analytics
    buildpack: python_buildpack
  ```

## 5. Configure .env file

Create a `.env` file in the root directory of your clone of the project repository by copying the sample `.env.example` file using the following command:

  ```none
  cp .env.example .env
  ```

  **NOTE** Most files systems regard files with a ""."" at the front as hidden files.  If you are on a Windows system, you should be able to use either [GitBash](https://gitforwindows.org/) or [Xcopy](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/xcopy)

You will need to update the credentials with the IBM Cloud credentials for each of the services you created in [Step 2](#2-create-bluemix-services).

The `.env` file will look something like the following:

  ```none
  #Investment Portfolio
  CRED_PORTFOLIO_USERID_W=
  CRED_PORTFOLIO_PWD_W=
  CRED_PORTFOLIO_USERID_R=
  CRED_PORTFOLIO_PWD_R=
  URL_GET_PORTFOLIO_HOLDINGS=https://investment-portfolio.mybluemix.net/api/v1/portfolios/

  #Predictive Market Scenario
  CRED_PREDICTIVE_MARKET_SCENARIO_URL=https://fss-analytics.mybluemix.net/api/v1/scenario/generate_predictive
  CRED_PREDICTIVE_MARKET_SCENARIO_ACCESSTOKEN=

  #Simulated Instrument Analytics
  CRED_SIMULATED_INSTRUMENT_ANALYTICS_URL=https://fss-analytics.mybluemix.net/api/v1/scenario/instrument/
  CRED_SIMULATED_INSTRUMENT_ANALYTICS_ACCESSTOKEN=
  ```

## 6. Run Application

In your terminal, cd into this project's root directory
+ Run `pip install -r requirements.txt` to install the app's dependencies
+ Run `python run.py`
+ Access the running app in a browser at <http://0.0.0.0:3000/>

You can push the app to IBM Cloud using [IBM Cloud CLI](https://cloud.ibm.com/docs/cli). This will use the services and application name in the `manifest.yml` file.  From your root directory login into IBM Cloud using CLI:
```
bx login
```
And push the app to IBM Cloud:
```
bx push
```

# Troubleshooting

* To troubleshoot your IBM Cloud application, use the logs. To see the logs, run:

```bash
bx logs <application-name> --recent
```

* If you are running locally - inspect your environment variables closely to confirm they match.  Try running each service as standalone:

```bash
python InvestmentPortfolio.py
python PredictiveMarketScenario.py
python SimulatedInstrumentAnalytics.py
```

* If you receive ssl error running curl commands try `curl --insecure` which removes certificate verification


# License

This code pattern is licensed under the Apache Software License, Version 2.  Separate third party code objects invoked within this code pattern are licensed by their respective providers pursuant to their own separate licenses. Contributions are subject to the [Developer Certificate of Origin, Version 1.1 (DCO)](https://developercertificate.org/) and the [Apache Software License, Version 2](https://www.apache.org/licenses/LICENSE-2.0.txt).

[Apache Software License (ASL) FAQ](https://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN)
",29,29,13,0,investment-portfolio,"[fintech, ibm-cloud, ibmcode, investment-portfolio]",0.0
33,dchrostowski,investopedia_simulator_api,,https://github.com/dchrostowski/investopedia_simulator_api,https://api.github.com/repos/investopedia_simulator_api/dchrostowski,"A simple Python API for Investopedia's stock simulator games.  This programmatically logs into Investopedia and can retrieve portfolio summary, get stock quotes & option chain lookups, execute trades - buy & sell shares, puts, calls, sell short, etc.","## Description
A simple Python API for Investopedia's stock simulator games.  

## Features
Currently you can:
* Read all positions in your option, stock, and short portfolios
* Buy/Sell long positions
* Short sell/cover short positions
* Perform option chain lookups
* Buy/sell options
* Read pending/open trades

Todo:
* Setting the default game, changing games
* Whatever else I can think of


## Authentication
Simply pass a dict to InvetopediaAPI constructor with a username and password.  
```
from investopedia_api import InvestopediaApi
credentials = {""username"" ""youremail@example.org"", ""password"": ""your password""}
client = InvestopediaAPI(credentials)
p = client.portfolio
print(""account value: %s"" % p.account_value)
```

## Environment 
Python 3.6.7.  I just use a virtualenv and install using pip from requirements.txt.  If you don't know how to do that:

```
git clone https://github.com/dchrostowski/investopedia_simulator_api.git
cd investopedia_simulator_api
pip install virtualenv
virtualenv -p /path/to/python3 ./venv
source venv/bin/activate
pip install -r requirements.txt
python exmaple.py
```

## Example
### code
```
from investopedia_api import InvestopediaApi
import json

credentials = {}
with open('credentials.json') as ifh:
    credentials = json.load(ifh)

# look at credentials_example.json
# credentials = {""username"": ""you@example.org"", ""password"": ""yourpassword""}
client = InvestopediaApi(credentials)

p = client.portfolio
print(""account value: %s"" % p.account_value)
print(""cash: %s"" % p.cash)
print(""buying power: %s"" % p.buying_power)
print(""annual return pct: %s"" % p.annual_return_pct)

# get a quote
quote = client.get_stock_quote('GOOG')
print(quote.__dict__)

# Read your portfolio
long_positions = client.portfolio.stock_portfolio
short_positions = client.portfolio.short_portfolio
my_options = client.portfolio.option_portfolio

# Place a buy order for 10 shares of Google with a limit of $1000/share

# shorthand for client.TradeProperties.TradeType.BUY()
trade_type = 'buy'

#shorthand for client.TradeProperties.OrderType.LIMIT(1000)
limit_1000 = 'limit 1000'

trade = client.StockTrade('GOOG',10,trade_type,order_type=limit_1000)
trade_info = trade.validate()
if trade.validated:
    print(trade_info)
    trade.execute()

# See example.py for more examples.
```

## More Info / Documentation ##
This is a work in progress.  I'll add more documentation as I continue developing.  I also plan on making this a module and publishing to pip.
",29,29,1,10,investment-portfolio,"[api, api-wrapper, investment-portfolio, options-trading, python, python3, stock-market, stock-trading]",0.0
34,georgemuriithi,investment-portfolio-optim,,https://github.com/georgemuriithi/investment-portfolio-optim,https://api.github.com/repos/investment-portfolio-optim/georgemuriithi,An investment portfolio of stocks is created using Long Short-Term Memory (LSTM) stock price prediction and optimized weights. The performance of this portfolio is better compared to an equally weighted portfolio and a market capitalization-weighted portfolio.,"# Investment Portfolio Optimization

<a href=""https://github.com/georgemuriithi/investment-portfolio-optim/blob/main/LICENSE"">
    <img alt=""License"" src=""https://img.shields.io/github/license/georgemuriithi/investment-portfolio-optim.svg?color=blue&cachedrop"">
</a>

An investment portfolio of stocks is created using Long Short-Term Memory (LSTM) stock price prediction and optimized weights. The performance of this portfolio is better compared to an equally weighted portfolio and a market capitalization-weighted portfolio.

<p align=""center"">
  <img src=""https://user-images.githubusercontent.com/21691211/155658959-cfd8f6cf-2baa-4a6a-afa8-274e7eddb3fd.png"">
</p>

***Disclaimer:** The LSTM model cannot be used to predict stock prices in real life, and this project cannot help an investor make investment decisions in the stock market. This is because the stock market is highly unpredictable. Prediction models do not work. In this project, the validation phase is used to test the model's performance. The purpose of the project is to implement Univariate Time-Series Prediction using LSTM.*

## Problem Description
The task is to create an investment portfolio from stocks that maximizes overall return.

### Data
**Top 30 U.S. companies by market capitalization** are used. The start time is **2009-12-31** and the end time is **2021-12-31.** AbbVie (ABBV), Meta (FB) and Tesla, Inc. (TSLA) are excluded because they were listed on the stock market after 2009-12-31.

The csv files and model states can be accessed from the *data* folder.

## <a href=""https://github.com/georgemuriithi/investment-portfolio-optim/blob/main/Investment-Portfolio-Optimization.ipynb"">Solution Approach</a>
<a href=""https://colab.research.google.com/drive/1Rd7xhUgp3OQO5u-bGqIT4cb29zJvWeXG?usp=sharing"">
    <img alt=""Open In Colab"" src=""https://colab.research.google.com/assets/colab-badge.svg"">
</a>

An investment portfolio of several stocks is created by making stock price predictions using an **LSTM Univariate Time-Series Prediction** model. Daily returns are then are computed from the predicted stock prices and used to get weights that maximize overall return. This is done using **SLSQP (Sequential Least SQuares Programming)** optimization.

To create the **features** of the LSTM model, a time step of **100 days** is used. This means that if we consider today's Adj Close price as the **response,** the features will be the Adj Close prices of the past 100 days.

LSTM model **parameters:**

- `input_size=1`
- `hidden_size=1`
- `num_layers=1`
- `batch_first=True`
- `num_classes=1`
- `learning_rate=0.001`
- `optimizer=Adam`
- `loss_function=MSELoss()`
- `num_epochs=10000`

***GPU** is leveraged.*
",23,23,2,0,investment-portfolio,"[deep-learning, investment-portfolio, lstm, python, pytorch, stock-price-prediction, time-series-forecasting]",0.0
35,cryptospaniards,simulator,,https://github.com/cryptospaniards/simulator,https://api.github.com/repos/simulator/cryptospaniards,Cryptocurrency Simulator: Invest fake money and play your strategies without risking real money,"# CS Simulator
Cryptocurrency Simulator: Invest fake money and play your strategies without risking real money

https://cryptospaniards.com/simulator/

![cryptocurrency-simulator](https://user-images.githubusercontent.com/35821941/35437795-43551022-0294-11e8-8961-0e04a86af6f7.png)

## Languages

### Adding a new language

1. Use `es.php` as the base to create your new language.
2. Use **lowercase** [two letter country codes in ISO 3166-1 Alpha 2](https://support.cloudflare.com/hc/en-us/articles/205072537-What-are-the-two-letter-country-codes-for-the-Access-Rules-) format
3. Before submitting your Pull Request:
   - Order keys alphabetically 
   - Make sure there are no duplicates or empty keys
   - Make sure to follow the same exact syntax: lower/uppercase, end dot (if any), parenthesis, etc.
",18,18,3,0,investment-portfolio,"[crypto, cryptocurrencies, cryptocurrency, cryptocurrency-exchanges, cryptocurrency-portfolio, cryptocurrency-prices, english, game, investment, investment-portfolio, investment-strategies, portfolio, simulation, simulator, spanish, trading, trading-strategies]",0.0
36,MarkusZoppelt,portfolio_rs,,https://github.com/MarkusZoppelt/portfolio_rs,https://api.github.com/repos/portfolio_rs/MarkusZoppelt,A command line tool for managing financial investment portfolios.,"<p align=""center"">
    <img src=""https://raw.githubusercontent.com/MarkusZoppelt/portfolio_rs/main/img/logo.png"" alt=""portfolio_rs logo""><br>
    <img src=""https://github.com/markuszoppelt/portfolio_rs/actions/workflows/rust.yml/badge.svg"" alt=""build status badge"">
	<img src=""https://github.com/MarkusZoppelt/portfolio_rs/actions/workflows/rust-clippy.yml/badge.svg"" alt=""clippy analyze status badge"">
</p>

A command line tool for managing financial investment portfolios written in Rust.

> *This project is the modern successor of [finance](https://github.com/MarkusZoppelt/finance).*

## Installation
You can install portfolio\_rs directly from cargo (via crates.io:

    cargo install portfolio_rs

## Usage 

### 1. Create your portfolio file
Create a JSON file with your portfolio positions.

Look at the [example data](example_data.json) for the format and data scheme.

### 2. Use the subcommands to gain insight on your portfolio:
Show the current balances of your portfolio: 

    portfolio_rs balances <JSON_FILE>

Show the current allocation of your portfolio: 

    portfolio_rs allocation <JSON_FILE>

Show the performance of your portfolio:
    
    portfolio_rs performance <JSON_FILE>


If you need help, try `portfolio_rs help [SUBCOMMAND]` for usage information.


## Demo
![demo](https://raw.githubusercontent.com/MarkusZoppelt/portfolio_rs/main/img/demo.gif)

## Configuration
Upon first run, `portfolio_rs` will create a default `config.yml` file.
The location of the config file depends on the operating system.
Use `portfolio_rs config` to print the config directory.

Probably the most useful entry in the config is `portfolio_file` where you can
set the **absolute** path to a data file that will be used when no data file is
passed as an argument.

## Bonus: GPG Encryption
This tool supports (gpg) encrypted json files.
Decrypted values are never written to disk.

    # you will need a valid gpg key in ~/.gnupg/
    portfolio_rs [COMMAND] data.json.gpg

Pro Tip: Use a plugin like [vim-gnupg](https://github.com/jamessan/vim-gnupg)
for editing your data file.
",18,18,2,3,investment-portfolio,"[cli-app, investment-portfolio, personal-finance]",0.0
37,portfoliome,alphavantage,portfoliome,https://github.com/portfoliome/alphavantage,https://api.github.com/repos/alphavantage/portfoliome,Python Wrapper for Alphavantage API,"[![Build Status](https://travis-ci.org/portfoliome/alphavantage.svg?branch=master)](https://travis-ci.com/portfoliome/alpavantage)
[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/portfoliome/alphavantage/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/portfoliome/alphavantage/?branch=master)

# alphavantage

alphavantage is a Python wrapper for the Alpha Vantage API.

The API wrapper can be used to retrieve historical prices such as intraday or daily prices for global equities and ETFs.

## Status

The API aims to support equity time-series data as a first step.

The package is currently in alpha status. It has not been used extensively yet and therefore mainly of the potential quirks of Alpha Vantage's actual API may not be accounted for. We plan on using this wrapper for price history charting in our [company lookup and ratings tool](https://esg.censible.co/companies/Apple).


## Design Consideration

This library is intended to provide a simple wrapper with minimal dependencies, and does not intend to introduce pydata stack dependencies (numpy, pandas, etc.) in the future. Differences with existing wrappers for the Alpha Vantage API include:
 
### Library Differences

* No Pandas dependencies or optional dependency
* Focuses on simplifying data for ingesting
* Avoids logical branching making the code simpler (only two if statements at moment)
* Provides symbology mapping references

The library carries out some conveniences versus using the API without a wrapper.

### Conveniences

* Converts timestamps to UTC time when applicable.
* Simplifies record field names i.e. ""4. close"" -> ""close"".
* Appends the timestamp field to record vs. having the timestamp act as dictionary key.
* Uses time ascending list versus a dictionary for price record data structure.
* Returns multiple tickers over a given parameter set using threads.
* Maps ticker symbology from other vendors.
* Excludes intraday data in daily price history requests.

## Examples
```python
from alphavantage.price_history import (
  AdjustedPriceHistory, get_results, PriceHistory, IntradayPriceHistory,
  filter_dividends
)

# weekly prices
history = PriceHistory(period='W', output_size='compact')
results = history.get('AAPL')

# intraday prices, 5 minute interval
history = IntradayPriceHistory(utc=True, interval=5)
results = history.get('AAPL')

# adjusted daily prices
history = AdjustedPriceHistory(period='D')
results = history.get('AAPL')
dividends = list(filter_dividends(results.records))

# Return multiple tickers
parameters = {'output_size': 'compact', 'period': 'D'}
tickers = ['AAPL', 'MSFT']
results = dict(get_results(PriceHistory, tickers, parameters))
```

## Contributing
Contributions are welcome. Someone can immediately contribute by building out wrappers for the rest of the API such as FX rates or crypto prices.

## Getting Started

### Installing

```sh
pip install alphavantage
```

### Developer Installation

These instructions assume Python 3.6. It is recommended that you use conda or a virtualenv.

#### For conda install follow:
Download the [conda installer](http://conda.pydata.org/miniconda.html).
And follow setup [instructions](http://conda.pydata.org/docs/install/quick.html#id1).

#### Conda Environment

```sh
conda create --name <environment_name> python=3.6
activate <environment_name>
conda install --file requirements.txt

python setup.py install bdist_wheel
```

#### debian installation
[Instruction](https://linuxconfig.org/how-to-change-from-default-to-alternative-python-version-on-debian-linux)

Follow the instructions in the link provided. **DO NOT SUDO PIP INSTALL**. Alias the preferred Python installation by adding, for example:

```sh
alias python='/usr/bin/python3.6'
```

#### When using Pip
```sh
pip install --upgrade pip
pip install wheel
pip install -r requirements.txt

python setup.py install bdist_wheel
```

#### Running the Tests
```sh
py.test
```
#### Running Coverage Report
```sh
py.test --cov
```
",16,16,4,3,investment-portfolio,"[alphavantage, equities, finance, fintech, historical-data, historical-prices, investment-portfolio, investments, price-ticker, securities, stock-data, stock-market]",0.0
38,PhoenixDD,Hedge-Fund-replication,,https://github.com/PhoenixDD/Hedge-Fund-replication,https://api.github.com/repos/Hedge-Fund-replication/PhoenixDD,This project tries to replicate hedge funds returns.,"# Hedge Fund replication
Description:<br/>
This project tries to replicate hedge funds returns by using genetic algorithm to find optimal assets from a set of about 4000 assets for training the linear regression model and then displaying the best match and accuracy for returns after testing the data.<br/>
Based on the paper ""Hedge fund replication with a genetic algorithm : breeding a usable mousetrap"" by Brian C.Payne and Jiri Tresl.<br/>
<br/>
Feel free improve/add more stuff and make commits",16,16,3,0,investment-portfolio,"[genetic-algorithms, hedgefund, investment-portfolio, investment-strategies, linear-regression, machine-learning, regression]",0.0
39,QuhiQuhihi,project_Asset_Allocation,,https://github.com/QuhiQuhihi/project_Asset_Allocation,https://api.github.com/repos/project_Asset_Allocation/QuhiQuhihi,quantitative asset allocation strategy,"# Project Quant
## Quantitative strategy with python

### Asset Allocation Strategy
#### 1. Modern Portfolio Theory (Mean Variance optimization)
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/00_mean_variance.ipynb   
[blog] https://quhiquhihi.github.io/posts/Mean-Varance/   

#### 2. Risk Parity Investment Strategy
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/01_risk_parity.ipynb  
[blog] https://quhiquhihi.github.io/posts/Risk_Parity/   

#### 3. Hierachical Risk Parity Investment Strategy
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/02_hierachical_risk_parity.ipynb   
[blog] https://quhiquhihi.github.io/posts/Hierachical_Risk_Parity/   

#### 4. Kelly Criteriom for Investment Strategy
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/03_kelly_criteriom.ipynb  
[blog] https://quhiquhihi.github.io/posts/Kelly_Rule/   

#### 5. Maximum Diversification Investment Strategy
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/04_max_diversification.ipynb   

#### 6. Sector Rotation with momentum Investment Strategy
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/05_sector_rotation_with_momentum.ipynb   
[blog] https://quhiquhihi.github.io/posts/Sector_Momentum/   

#### 7. Vigiliant Asset Allocation with momentum Investment Strategy
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/06_vigilant_asset_allocation_with_momentum.ipynb
[blog] https://quhiquhihi.github.io/posts/Vigiliant_Asset_Allocation/   

#### 8. Defensive Asset Allocation with momentum Investment Strategy
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/07_defensive_asset_allocation_with_momentum_monthly.ipynb   
[blog] https://quhiquhihi.github.io/posts/Defensive_Asset_Allocation/   

#### 9. Sector Rotation with reverse momentum Investment Strategy
[code] https://github.com/QuhiQuhihi/asset_allocation_strategy/blob/main/08_sector_rotation_with_reverse_momentum.ipynb

### Environment
Use python 3.8.10
Download from Anaconda.org
",14,14,1,1,investment-portfolio,"[finance, investment, investment-portfolio, investment-strategies, quantitative-finance]",0.0
40,shivanshsinghal107,Investment-Portfolio,,https://github.com/shivanshsinghal107/Investment-Portfolio,https://api.github.com/repos/Investment-Portfolio/shivanshsinghal107,A student Investment portfolio web app built with various optimization techniques and screening parameters from core finance,"# Student Investment Portfolio (SIP) [(Video Demo)](https://www.youtube.com/watch?v=-NEdES7bYRQ)
## Aim
***This web app is the one-stop destination for all your investment needs and leads to a path of financial freedom.***<br>
We, the ***Quantizers*** team, have created this web application focusing on **students** and people coming from *low-income class*.

## Core Finance Concepts & Portfolio Optimization Techniques
We have carefully selected handpicked stocks using **Fundamental Analysis** method to screen those who shined apart from the hundreds of other stocks present in the **Indian Stock Indices**.

We have implemented following portfolio optimization techniques from scratch -
- ***Markowitz Model*** - In this model, we can have a portfolio with variable returns for a fixed variance. As the model speaks for itself, we apply this model by fixing the variance to a set value and optimizing it to achieve the highest returns.
- ***Minimum Variance*** - In this technique, we select stocks that generate steady revenue and minimize the portfolio variance to achieve a portfolio that comprises equity, which can hold their own even in the darkest of times.
- ***Sharpe Ratio Maximization*** - In this technique, we maximize *sharpe ratio* using **Monte Carlo Simulations** to achieve an aggressive portfolio, which will result in an increment of your net worth by a considerable margin, but they also come with significant risk.

## Features
- Track Investments
- Optimize Portfolio
- Obtain Live Stats

<img src=""static/sip-by-quantizers.jpeg"" height=""560"" width=""350""> <img src=""static/services-provided.jpeg"" height=""560"" width=""350"">

## Tech Stack
### Tools & Technologies
- Flask (Micro Web framework of python)
- Bootstrap (CSS framework)
- PostgreSQL (Relational Database Management System)

### Languages
- Python
- HTML
- CSS

## Team Quantizers
<img src=""static/quantizers.jpeg"" alt=""quantizers"" height=""900"" width=""700"">
",13,13,3,1,investment-portfolio,"[asset-management, finance-management, investing, investment-portfolio, monte-carlo-simulations, portfolio-optimization, python, risk-management, sharpe-ratio, trading, webapp]",0.0
41,LastAncientOne,Beverages_Long_Term_Investment,,https://github.com/LastAncientOne/Beverages_Long_Term_Investment,https://api.github.com/repos/Beverages_Long_Term_Investment/LastAncientOne,Long-Term Investment in the Beverage Industry,"<p align=""center"">
        <img src=""Soda.PNG"">
</p>       
<h1 align=""center"">Beverages Long Term Investment</h1>

### Description:
#### This is a project for long-term investment to determine which soda beverages are good long-term investments. It involves analyzing historical data spanning five years and calculating performance measurements, conducting back-testing, forecasting, and utilizing the Capital Asset Pricing Model. The project also includes testing various trading strategies and identifying stocks with the lowest risks and highest returns.  

### Stock Tickers: 
#### DPS - Dr. Pepper
#### KO - Coca-Cola
#### PEP - Pepsi
        
#### Use accountant statements: income, balance, and cashflow for analyzing  
#### Use historical price in Excel, python, and Microsoft Azure Machine Learning Studio for Stocks Analysis  


# Prerequistes
#### Microsoft Azure Machine Learning Studio  

#### Python 3.5+

#### Jupyter Notebook Python 3

#### Excel 2016

#### Power BI  

## Author:  
### Tin Hang  

## Disclaimer
## 🔴 This is not financial advice. Please conduct your own research and do not use this code for investing or trading in the stock market. However, if you are interested in the stock market, it is recommended that you read books on investment, trading, the stock market, and finance. It is always advisable to consult a professional investment advisor before making any investment decisions. Remember, this information is provided for educational purposes only.

",13,13,2,0,investment-portfolio,"[excel, investing, investment-analysis, investment-portfolio, investment-strategies, investments, longterm, stock, stock-analysis]",0.0
42,LucS12,ESG-Score-Integration,,https://github.com/LucS12/ESG-Score-Integration,https://api.github.com/repos/ESG-Score-Integration/LucS12,Integrating ESG scores into asset allocation and portfolio optimization through a GUI application.,"# ESG-Score-Integration

Project integrating ethically responsible criteria in investment portfolios through the use of proprietary ESG scores. The repo includes the following:
- GUI application built to take in user preferences regarding ESG criteria to generate an equity investment portfolio.
- Code and written reports of the data gathering and ESG score building processes.


## How It Works:
- The video below exhibits the platform that the code displays and how it can be used to generate an equity investment portfolio:

     https://user-images.githubusercontent.com/93154131/170358026-742f5b67-7024-4a7d-bede-82d220d406ae.mp4





## Files & Data Folders:
- **esg_investing_application.py:** Python code used to build the GUI application and the asset allocation algorithm/methodology. Necessary data input:
  - *daily_prices.csv:* CSV file containing daily price data of stocks used.
  - *daily_spx.csv:*  CSV file containing daily price data of SPX Index for beta calculations.
  - *env.csv:* CSV file containing sector/grouping information for each stock.
  - *esg_scores.csv:* CSV file containing ESG scores created for each stock.
  - *fama_french_data.csv:* CSV file containing data needed for the Fama-French 3-Factor model utilized.
  - *mktcap.csv:* CSV file containing the market capitalization of each stock.


- **data/esg_scores:** CSV files, Jupyter Notebook report, and Python code used to generate ESG scores for Nasdaq Composite Index members. 
- **data/nasdaq-comp:** CSV and Python files used to gather ESG data from the Bloomberg Terminal.
- **data/price-data:** CSV and Python files used to gather stock and index price data from the Bloomberg Terminal.
",12,12,1,0,investment-portfolio,"[asset-allocation, esg, investment-portfolio, portfolio-optimization, python, wealth-management]",0.0
43,chrisfosterelli,invest-timer,,https://github.com/chrisfosterelli/invest-timer,https://api.github.com/repos/invest-timer/chrisfosterelli,Simple Haskell simulation to determine best interval to invest in ETF's,"Invest Timer
============

It is often mentioned that, when using ETF's for a passive investing strategy,
it is better to contribute infrequent lump sums instead of small monthly 
payments, primarily due to the fees associated with purchases of ETF's. Most 
brokerages charge between $5-$35, so if you are only contributing small monthly 
amounts the charge is eating away at a large portion of that.

However, on the other hand every month you wait is investment return you are
not receiving. I couldn't find any concrete info on what amounts or with what
regularity we should actually be contributing to ETF's -- is it once per year,
once every five months, once every month? What is most optimal?

This is a short Haskell script that simulates an investment portfolio based on
a given brokerage fee, time range, monthly savings, and average return to 
determine what schedule is the most efficient to buy with. The reality is the
best time is going to be somewhere in the middle of the month most of the time,
but I only wanted to consider the end of each month for practicality reasons.

All of the simulations assume a 10 year estimation window.

I played with a bunch of different configurations and the vast majority of the
time the most optimal window is to invest every 2 - 5 months, depending on the
particular settings. For most situations, choosing to invest every three months
is a relatively safe bet that will either be optimal or relatively close to it.

## Basic Estimate

This assumes a fee of $10, an average return of 4%, and a monthly contribution
of $1,000. You can see that, in this case, the best time to invest is every 
two or three months.

![Chart 1](graphs/1.png)

## High Return Estimate

If you're young you may have a more aggressive portfolio and consider 4% a low
return, but we can increase it to 8% for a different graph. As you'd expect,
this skews the graph toward investing more often -- as your return goes up it 
will be more valuable to invest earlier. For our settings this causes every
second month to be the optimal choice.

![Chart 2](graphs/2.png)

## Low Savings Estimate

May $1,000 a month is a bit aggressive and you may not be able to make that 
contribution every single month. Let's take our average way down to a $500/month
contribution and see how that changes the results. Fee's will now take a bigger
cut of the contribution so it will be better to invest every fourth month.

![Chart 3](graphs/3.png)

## High Fees Estimate

What if we are using an online brokerage with very high fees? Most are in the
range of $5-$10 but some are as high as $35/trade. At $35 we can see this
affects the optimal month and it now makes the most sense to invest every five 
months. It's interesting to note that, even if you invest optimally in both 
situations, the higher fees work out to about $1,000 (~0.7%) less value in the 
portfolio.

![Chart 4](graphs/4.png)

## Shifted Estimate

Let's try changing a bunch of fields and see how that affects the result. This
graph is a $2,000 monthly investment with a $15 fee and an average return of 8%.
This returns every second month as the most optimal.

![Chart 5](graphs/5.png)
",12,12,2,0,investment-portfolio,"[haskell, investment-portfolio, simulation]",0.0
44,Leo1998-Lu,Dynamic-investment-model-based-on-machine-learning,,https://github.com/Leo1998-Lu/Dynamic-investment-model-based-on-machine-learning,https://api.github.com/repos/Dynamic-investment-model-based-on-machine-learning/Leo1998-Lu,"《基于机器学习的动态投资模型》——本人在2020第三届中青杯全国大学生数学建模赛B题本科生组全国一等奖（3%）的解决方案及过程代码，此次同样是全程独立完成所有内容。""Dynamic investment model based on machine learning""-my solution and process code in the undergraduate group of the 3rd China Youth Cup National University Mathematical Modeling Competition in 2020 (National first prize)","# Dynamic-investment-model-based-on-machine-learning
《基于机器学习的动态投资模型》——本人在2020第三届中青杯全国大学生数学建模赛B题本科生组全国一等奖的解决方案及过程代码，此次同样是全程独立完成所有内容。
*""Dynamic investment model based on machine learning""-my solution and process code in the undergraduate group of the 3rd China Youth Cup National University Mathematical Modeling Competition in 2020 (**National first prize**)*

# 解决方案 Solution
对于问题一，首先提取出十支股票中的异常数据，基于R编程软件中的auto.arima函数对相应的参数序列进行时间序列建模，基于对应模型对异常数据的交易日拟合出合理的预测值并替补异常数据。然后通过各股票的关键指标（年化收益率、年化收益波动率、累计收益率等）进行对比分析来初步判断各成分股的优劣性。最终基于Markowitz(1952)的投资组合理论利用计算机通过蒙特卡洛模拟方法找出了最优投资组合方案。

![images](https://github.com/Leo1998-Lu/Dynamic-investment-model-based-on-machine-learning/blob/master/pic/%E9%80%9A%E8%BF%87%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A8%A1%E6%8B%9F10000%E6%94%AF%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E7%9A%84%E6%94%B6%E7%9B%8A%E7%8E%87%E4%B8%8E%E6%B3%A2%E5%8A%A8%E7%8E%87%E5%88%86%E5%B8%83%E6%95%A3%E7%82%B9%E5%9B%BE.png)

对于问题二，通过累计收益率、超额收益率、夏普指数、期望损失（ES）、最大撤回率等评估指标来对问题一中的最优投资组合进行评估分析，并将等权分配的投资组合和最低风险投资组合作为基准方案与其进行对比分析。最终通过基于机器学习的灵敏度分析量化了投资组合收益率与波动率的关系，找到了投资组合收益率与波动率的最佳组合，即在波动率相对低时收益率最高的投资组合，为模型的改进提供了方向。

![images](https://github.com/Leo1998-Lu/Dynamic-investment-model-based-on-machine-learning/blob/master/pic/%E5%9F%BA%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%81%B5%E6%95%8F%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E5%8E%9F%E6%A8%A1%E6%8B%9F%E7%9A%8410000%E7%A7%8D%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E7%BB%93%E6%9E%9C%E8%BF%9B%E8%A1%8C%E5%B2%AD%E5%9B%9E%E5%BD%92%E7%BB%93%E6%9E%9C%E5%AF%B9%E6%AF%94.png)

对于问题三，通过对比机器学习中的随机森林算法和时间序列模型中的Holt-Winters指数平滑法两种方法对未来交易日股价预测的精准度与合理性，最终通过随机森林模型与各股票参数序列的序列相关性建立了未来交易日股价预测模型。基于该模型进一步制定动态投资策略，在事件周期中基于该投资策略的操作行为计算出最终的累计收益率并与该事件周期中最优操作得到的累计收益率进行对比。最终得到基于训练集预测结果（200个交易日）的投资策略的累计收益率高达113.604%，且十分接近对应事件周期的最优操作累计收益率（125.479%）。而基于测试集预测结果（80个交易日）的投资策略的累计收益率为7.573%，同时该事件周期的最优操作累计收益率为22.26%。因此该动态投资模型具有一定的参考价值与较可观的收益效能。

![images](https://github.com/Leo1998-Lu/Dynamic-investment-model-based-on-machine-learning/blob/master/pic/%E5%9F%BA%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E7%9A%84%E8%82%A1%E7%A5%A8%E6%94%B6%E7%9B%98%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%AF%B9%E6%AF%94.png)

# 总结 Conclusion
基于**马科维茨的经典投资理论**，利用蒙特卡洛模拟方法找到10支股票的最优配置权重并找到了最优组合（收益率最大化），通过机器学习模型找到了投资组合收益率与波动率的最佳阈值范围，该最优组合的年化夏普指数达到了2.3295。基于该最优组合结合自定义的投资规则构建了动态模型，最终在200个交易日的训练集得到了**113.6%的累计收益率**（最佳操作情况下为125.4%），在80个交易日的测试集上的**累计收益率达到了7.5%**（最佳操作情况下为22.2%）

*Based on Markowitz’s classic investment theory, the Monte Carlo simulation method is used to find the optimal allocation weight of 10 stocks and find the optimal combination (return rate maximization), and find the optimal threshold range of the portfolio return rate and volatility through the machine learning model, the annualized Sharpe index of the optimal combination reaches 2.3295. Based on the optimal combination and custom investment rules, I constructed a dynamic model. Finally, a cumulative return rate of 113.6% was obtained on the training set of 200 trading days (125.4% under the best operating conditions). The cumulative return on the test set reached 7.5% (22.2% under best operating conditions)*

# 结果 Result
没白费自己熬夜三天三夜做完，拿了一等，还给了个奖章就很舒服:)

**比赛结果公示网址**http://zqb.52jingsai.com/price1.php

",11,11,2,0,investment-portfolio,"[dynamic-investment, investment-portfolio, machine-learning]",0.0
45,gnmerritt,etf-balancer,,https://github.com/gnmerritt/etf-balancer,https://api.github.com/repos/etf-balancer/gnmerritt,Tax efficient ETF portfolio balancing,"[![Build Status](https://travis-ci.org/gnmerritt/etf-balancer.svg?branch=master)](https://travis-ci.org/gnmerritt/etf-balancer)

# etf-balancer

Try and optimally balance an account of Vanguard ETFs given a target allocation. Runs as an API for easy use from google sheets.

## features

Balances funds to a target percentage across multiple accounts.

   * high-yield funds prioritized to tax-sheltered accounts
   * can avoid sales in taxable accounts
   * minimizes uninvested cash in each account
   * spreadsheet auto-updates to graph returns and balances over time

## CLI usage:

Describe your target allocation, your accounts and provide current market quotes
for the funds you're interested in balancing, something like this (via the
excellent [httpie](https://httpie.org/)):

```bash
http POST https://etf.gnmerritt.net/balance target:='{""VEU"":0.7,""VOO"":0.3}' accounts:='[{""name"":""taxed"", ""tax_sheltered"":false,""cash"":1000, ""positions"":{""VEU"":2, ""VOO"":2}}]' market:='[{""symbol"":""VEU"", ""price"":54.33},{""symbol"":""VOO"", ""price"":254.77}]' no_sale_accounts:='[""taxed""]'
```

## spreadsheet usage:

I talk to the API via a google sheet which contains my account info, you can find a template here: [Google Sheet Template](https://docs.google.com/spreadsheets/d/1o8sxqQx-XOBXjGqna-EQ-8smx7PInTiPLUEc6tUZhr4/edit?usp=sharing). If you make yourself a copy you can start using it to balance your own accounts.

![dashboard](./spreadsheet/dashboard.png)

![accounts](./spreadsheet/accounts.png)
",11,11,1,0,investment-portfolio,"[actix-web, investment-portfolio, passive-investing, rust, vanguard]",0.0
46,herget,investing-guide,,https://github.com/herget/investing-guide,https://api.github.com/repos/investing-guide/herget,,,11,11,3,0,investment-portfolio,"[amp, amp-html, guide, investing, investment, investment-portfolio, investments, tutorial]",0.0
47,QGoGithub,Capture---Strategic,,https://github.com/QGoGithub/Capture---Strategic,https://api.github.com/repos/Capture---Strategic/QGoGithub,Quant Portfolio Approach to Alpha Generation and Retention,"# Alpha Capture
Quantitative Portfolio Approach to Alpha Generation and Retention

Robust Analytic and Numerical Tools, Data Cleaning and Modelling, Forecasting, Filters, Optimisers, Algorithms, 
        Backtesting, Cross Validation, Out of Sample Testing, and Decision Making 
             - applying a quantitative portfolio approach to the life cycle of investing.
            
Alpha Generation:Probability Weighted Decision Making and Opportunity Identification

Alpha Capture: Signal Management in Real Time

Alpha Retention: Risk Management, Loop Implementation


1. SMA(20) applying PyAlgoTrade Library
",9,9,1,0,investment-portfolio,"[investment, investment-analysis, investment-portfolio, portfolio, quant, quantitative-finance, quantitative-trading, risk-management]",0.0
48,romainsimon,awesome-investing,,https://github.com/romainsimon/awesome-investing,https://api.github.com/repos/awesome-investing/romainsimon,😎 List of awesome investing tools and software,"# Awesome Investing

😎 List of awesome investing tools and software

I shared more information on some of these software in this blog article : [https://beanvest.com/blog/best-investing-software](https://beanvest.com/blog/best-investing-software)

# Learning

## Videos

| Link          | Description   |
|:--------------|:--------------|
|[Investment Philosophies](https://www.youtube.com/watch?v=h37fJcDjjWg&list=PLUkh9m2BorqlDJlnBXUaJaMRNE7UDckn6&ab_channel=AswathDamodaran)|Investment Philosophies video series by Aswath Damodaran|
|[Valuation](https://www.youtube.com/watch?v=znmQ7oMiQrM&list=PLUkh9m2BorqnKWu0g5ZUps_CbQ-JGtbI9&ab_channel=AswathDamodaran)|Valuation courses video series by Aswath Damodaran|

## Websites

| Link          | Description   |
|:--------------|:--------------|
|[Investopedia](https://www.investopedia.com/)|❤️ Encyclopedia for all things investing & investment simulation game|

# Screeners / Stock research

| Link          | Description   |
|:--------------|:--------------|
|[Fastgraph](https://www.fastgraphs.com/)|FAST Graphs is a stock research tool to conduct fundamental stock research|
|[Finbox](https://finbox.com/)|❤️ Stock screener for investors and traders, financial visualizations (US)|
|[Finviz](https://finviz.com/)|Stock screener for investors and traders, financial visualizations (US)|
|[Magic Formula Investing](https://www.magicformulainvesting.com/)|Joel Greenblatt's screener from The Little Book That Beats the Market|
|[Morningstar](https://www.morningstar.com/)| Independent research, ratings, and tools for investing|
|[Motley Fool](https://www.fool.com/)|Advice for investing beginners and experts as well as important up to date news|
|[Screener.in](https://www.screener.in/)|Stock Screener and fundamental analysis tool for Indian stocks (India)|
|[Stockopedia](https://www.stockopedia.com/)|❤️ Stock screener with their Quality, Value and Momentum (US, Europe, Asia, ...)|
|[Tipranks](https://www.tipranks.com/)|Analyst and bloggers recommendations and performance records|
|[YCharts](https://ycharts.com/)|Investment research platform based on charts|


# Insider / Superinvestors portfolios

| Link          | Description   |
|:--------------|:--------------|
|[Dataroma](https://www.dataroma.com/)|Track stock picks and portfolios of legendary value investors such as Warren Buffett|
|[Whale Wisdom](https://whalewisdom.com/)|Research & Replicate Portfolios of the World's Best Investors|

# Portfolio trackers

| Link          | Description   |
|:--------------|:--------------|
|[Beanvest](https://beanvest.com/)|❤️ The best stock portfolio tracker for investors|


# Forums / Communities

| Link          | Description   |
|:--------------|:--------------|
|[Value investors club](https://www.valueinvestorsclub.com/)|Forum where top investors share their best ideas  |


# Brokers

| Link          | Description   |
|:--------------|:--------------|
|[Ameritrade](https://www.tdameritrade.com/home.page)|wealth management with flat rate commisions and a $600 bonus for your first funded account
|[Blackrock](https://www.blackrock.com/investing)|Wealth management with long term investment accounts and planning|
|[Degiro](https://www.degiro.com/)|❤️ DEGIRO is Europe's fastest growing online stock broker with extremely low trading commissions|
|[Fidelity](https://www.fidelity.com/)|Lower fee investing and Wealth Management|
|[Interactive Brokers](https://www.interactivebrokers.co.uk)|❤️ Leading online trading solutions for traders, investors and advisors, with direct global access to stocks, options, futures, currencies, bonds and funds. Transparent, low commissions and financing rates and support for best execution.|
|[Morgan Stanley](https://www.morganstanley.com)|Wealth management business which offers a variety of investment accounts|
|[Robinhood](https://robinhood.com/)|Platform for comissionless stock and crypto trading|
|[Vanguard](https://investor.vanguard.com/home/)|Wealth management with investment accounts and investing advisors


❤️ = personal favorite

",8,8,1,1,investment-portfolio,"[awesome, awesome-list, finance, investing, investment, investment-portfolio, resources, stock-market]",0.0
49,IBM,predictive-market-using-arria,IBM,https://github.com/IBM/predictive-market-using-arria,https://api.github.com/repos/predictive-market-using-arria/IBM,WARNING: This repository is no longer maintained :warning: This repository will not be updated. The repository will be kept available in read-only mode.,"# WARNING: This repository is no longer maintained :warning:

> This repository will not be updated. The repository will be kept available in read-only mode.

[![Build Status](https://travis-ci.com/IBM/predictive-market-using-arria.svg?branch=master)](https://travis-ci.com/IBM/predictive-market-using-arria)
# Predictive Market Using Arria

This code pattern demonstrates how to compute a stress test using the Predictive Market Scenario service and Simulated Instrument Analytics service on a set of investments maintained in the Investment Portfolio service, and then narrate the results using the Arria NLG service.

This code pattern is designed for developers with interest in creating financial applications pertaining to investment portfolios.  When the reader has completed this code pattern, they will understand how to:

- Load and retrieve data from the Investment Portfolio service
- Use the Predictive Market Scenario service to generate a scenario
- Send data along with a scenario to the Simulated Instrument Analytics service to retrieve analytics
- Pipe the results to the Arria NLG service which generates a human-readable interpretation of the results

## Architecture flow

<p align=""center"">
  <img width=""800""  src=""readme_images/Portfolio.Narrate Architecture.png"">
</p>

## Included Components

Offered on [IBM Cloud](https://console.bluemix.net/):

- [Investment Portfolio](https://console.ng.bluemix.net/catalog/services/investment-portfolio)
- [Predictive Market Scenario](https://console.ng.bluemix.net/catalog/services/predictive-market-scenarios)
- [Simulated Instrument Analytics](https://console.ng.bluemix.net/catalog/services/simulated-instrument-analytics)
- [Arria NLG](https://console.bluemix.net/catalog/services/natural-language-generation-apis)

> **NOTE:** These services are free for those who have a Lite account.

## Automatically Deploying the Application to IBM Cloud

[![Deploy to IBM Cloud](https://bluemix.net/deploy/button.png)](https://bluemix.net/devops/setup/deploy?repository=https://github.com/IBM/predictive-market-using-arria)

You will need to [create Arria service](#1-create-arria-service) in IBM Cloud and then bind the Arria NLG service to your application.

Go to your application page in IBM Cloud, under Connections choose `Create Connection`:

<p align=""left"">
  <img width=""450"" src=""readme_images\create_connection.png"">
</p>

Find your Arria Natural Language Generation service and choose `Connect`:

<p align=""left"">
  <img width=""850"" src=""readme_images\connect_service.png"">
</p>

Next, load investment portfolio before running the application. First [clone the repo](#3-clone-the-repo) and then use the `investmentPortfolio.js` script to [load your portfolio](#5-load-investment-portfolio).

## Manually Deploying the Application to IBM Cloud
Follow these steps to setup and run this pattern. The steps are described in detail below.

### Prerequisites

- [node](https://nodejs.org/en/)
- [npm](https://www.npmjs.com/)
- [IBM Cloud account](https://console.bluemix.net/registration/?target=%2Fdashboard%2Fapps)
- [IBM Cloud CLI](https://console.bluemix.net/docs/cli)

### Steps

1. [Create Arria service](#1-create-arria-service)
2. [Create IBM Cloud services](#2-create-ibm-cloud-services)
3. [Clone the repo](#3-clone-the-repo)
4. [Configure .env file](#4-configure-env-file)
5. [Load Investment Portfolio](#5-load-investment-portfolio)
6. [Run Application](#5-run-application)
7. [Deploy to IBM Cloud](#6-deploy-to-ibm-cloud)

## 1. Create Arria service

You will need Arria API key. Register for an Arria account [here](https://nlgapi.arria.com/#/register). Click `Get Started` to sign up for an account.

<p align=""left"">
  <img width=""650"" src=""readme_images\arria_register.png"">
</p>

After you have created your account, then login. Click `Your API Key`.  This will take you to your API key, which will be required in subsequent steps.

<p align=""left"">
  <img width=""650"" src=""readme_images\arria_api_key.png"">
</p>

Explore `Narrative APIs`. Here under `Portfolio Management`, find `Predictive Market Stress Testing`.

<p align=""left"">
  <img width=""650"" src=""readme_images\arria_narratives.png"">
</p>

Next, create the Arria service in IBM Cloud.

- [**Arria Natural Language Generation APIs**](https://console.bluemix.net/catalog/services/natural-language-generation-apis)

For the `Arria Natural Language Generation API` service in IBM Cloud you will need to provide your API Key from Arria.

For the url provide: `https://stresstesting-narrativeapi.arria.com/services/rest/fullnarrative`.  Click `Create` to create the service in IBM Cloud.

<p align=""left"">
  <img width=""850"" src=""readme_images\arria_service.png"">
</p>

## 2. Create IBM Cloud services

Create the following services in IBM Cloud for financial services:

- [**Investment Portfolio**](https://console.ng.bluemix.net/catalog/services/investment-portfolio)
- [**Predictive Market Scenario**](https://console.ng.bluemix.net/catalog/services/predictive-market-scenarios)
- [**Simulated Instrument Analytics**](https://console.ng.bluemix.net/catalog/services/simulated-instrument-analytics)

For each service, go to `service credentials` on the left tab. Select `New Credentials`

<p align=""left"">
  <img width=""950"" src=""readme_images\find_credentials.png"">
</p>

Choose a name for your credentials, click `Add`:

<p align=""left"">
  <img width=""450"" src=""readme_images\add_credentials.png"">
</p>

This will add credentials to your service.

## 3. Clone the repo

Clone the `Predict Market Using Arria repo` locally. In a terminal, run:

```shell
$ git clone https://github.com/IBM/predictive-market-using-arria.git
```

## 4. Configure .env file

Create a `.env` file in the root directory of your clone of the project repository by copying the sample `.env.example` file using the following command in terminal:

```shell
$ cp .env.example .env
```

> **NOTE:** Most files systems regard files with a ""."" at the front as hidden files.  If you are on a Windows system, you should be able to use either [GitBash](https://git-for-windows.github.io/) or [Xcopy](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/xcopy)

You will need to update the credentials with the IBM Cloud credentials for each of the services you created in [Step 2](#2-create-ibm-cloud-services).

The `.env` file will look something like the following:

```bash
# Investment Portfolio
CRED_PORTFOLIO_USERID_W=
CRED_PORTFOLIO_PWD_W=
CRED_PORTFOLIO_USERID_R=
CRED_PORTFOLIO_PWD_R=
CRED_PORTFOLIO_URL=https://investment-portfolio.mybluemix.net/

# Predictive Market Scenario
CRED_PREDICTIVE_MARKET_SCENARIO_URL=https://fss-analytics.mybluemix.net/
CRED_PREDICTIVE_MARKET_SCENARIO_ACCESSTOKEN=

# Simulated Instrument Analytics
CRED_SIMULATED_INSTRUMENT_ANALYTICS_URL=https://fss-analytics.mybluemix.net/
CRED_SIMULATED_INSTRUMENT_ANALYTICS_ACCESSTOKEN=

# Arria Natural Language Generation
CRED_ARRIA_NATURAL_LANGUAGE_GENERATION_URL=https://stresstesting-narrativeapi.arria.com/services/rest/fullnarrative
CRED_ARRIA_NATURAL_LANGUAGE_GENERATION_KEY=
CRED_ARRIA_NATURAL_LANGUAGE_GENERATION_FACTORS=factors.csv
CRED_ARRIA_NATURAL_LANGUAGE_GENERATION_VSV=vcv.csv
```

## 5. Load Investment Portfolio

You will now need to create a portfolio in your Investment Portfolio service and create holdings for that portfolio. The `holdings.sample.json` file provides you with sample holdings for a portfolio.  

You can use the `investmentPortfolio.js` script to load portfolio and holdings.  The credentials for Investment Portfolio service are retrieved from `.env` file as per the [previous step](#4-configure-env-file) or can be added directly to the script.

<p align=""left"">
  <img width=""650"" src=""readme_images\investment_portfolio_cred.png"">
</p>

To load a portfolio named `MyFixedIncomePortfolio`, first install dependencies and use the command-line with the `investmentPortfolio.js` script to create portfolio.  In the project directory, run the following commands in terminal:

```shell
$ npm install
$ node investmentPortfolio.js -l MyFixedIncomePortfolio
```

To load holdings from `holdings.sample.json` into `MyFixedIncomePortfolio`, run:

```shell
$ node investmentPortfolio.js -l MyFixedIncomePortfolio -h holdings.sample.json
```

Similarly you can view your portfolios by running:

```shell
$ node investmentPortfolio.js -g
```

and view holdings for portfolio:

```shell
$ node investmentPortfolio.js -g MyFixedIncomePortfolio
```

## 6. Run Application

In your terminal, `cd` into this project's root directory

1. Run `npm install` to install the app's dependencies
1. Run `npm start`
1. Access the running app locally at http://localhost:8080/

## 7. Deploy to IBM Cloud

Edit the `manifest.yml` file in the folder that contains your code and replace with a unique name for your application. The name that you specify determines the application's URL, such as `your-application-name.mybluemix.net`. Additionally - update the service names so they match what you have in IBM Cloud. The relevant portion of the `manifest.yml` file looks like the following:

```yaml
applications:
- path: .
  memory: 256M
  instances: 1
  domain: mybluemix.net
  name: arria-predictive-market
  host: arria-predictive-market
  disk_quota: 256M
  buildpack: sdk-for-nodejs
  services:
  - {Investment-Portfolio service name}
  - {Predictive-Market-Scenarios service name}
  - {Simulated-Instrument-Analytics service name}
  - {Arria-Natural-Language-Generaton service name}
```

> **NOTE:** Add the name of your Arria NLG service to manifest file. This will deploy the application with the service without having to bind later.

Once the `manifest.yml` file is configured, you can push to IBM Cloud. From your root directory login into IBM Cloud using CLI:

```shell
$ bx login
```

And push the app to IBM Cloud:

```shell
$ bx push
```

## Troubleshooting

- To troubleshoot your IBM Cloud application, use the logs. To see the logs, run:

    ```shell
    $ bx logs <application-name> --recent
    ```

- If you are running locally, inspect your environment variables closely to confirm they match.

## License

This code pattern is licensed under the Apache Software License, Version 2.  Separate third party code objects invoked within this code pattern are licensed by their respective providers pursuant to their own separate licenses. Contributions are subject to the [Developer Certificate of Origin, Version 1.1 (DCO)](https://developercertificate.org/) and the [Apache Software License, Version 2](http://www.apache.org/licenses/LICENSE-2.0.txt).

[Apache Software License (ASL) FAQ](http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN)
",7,7,15,0,investment-portfolio,"[aria, ibm-cloud, ibmcode, investment-portfolio, portfolio]",0.0
50,cutting-edge-visionaries,CEV-Finance-and-Economics-Resources,cutting-edge-visionaries,https://github.com/cutting-edge-visionaries/CEV-Finance-and-Economics-Resources,https://api.github.com/repos/CEV-Finance-and-Economics-Resources/cutting-edge-visionaries,This is a list of resources for CEV's Aryavarta from the world of Finance and Economics.,"# CEV Finance and Economics Resources
This is a list of resources for CEV's Aryavarta from the world of Finance and Economics. We regularly update it to suit our daily discussions in Aryavarta.

## MOOCs

List of some really awesome online courses in the world of Finance and Economics.

### 1. Economics
**Coursera**
* [Microeconomics - The Power of Markets](https://www.coursera.org/learn/microeconomics-part1)
* [Microeconomics - When Markets Fail](https://www.coursera.org/learn/microeconomics-part2)
* [Macroeconomics](https://www.coursera.org/learn/principles-of-macroeconomics)
* [Econometrics](https://www.coursera.org/learn/erasmus-econometrics)

**YouTube**
* Khan Academy's Micro and Macroeconomics
* [Principles of Microeconomics - MIT OCW](https://www.youtube.com/playlist?list=PL61533C166E8B0028)
* [Development Economics - MIT OCW](https://www.youtube.com/playlist?list=PLUl4u3cNGP63-t0r0aC3noJiIOmj33S_Q)
* [Game Theory with Ben Polak - Yale](https://www.youtube.com/playlist?list=PL6EF60E1027E1A10B)


### 2. Finance
* [Financial Markets (Yale, Robert Shiller - Nobel Prize in Econ)](https://www.coursera.org/learn/financial-markets-global)
* [Introduction to Financial Markets (Indian School of Business)](https://www.coursera.org/learn/financial-markets-intro?specialization=investment-strategy)
* [Global Financial Markets and Instruments](https://www.coursera.org/learn/global-financial-markets-instruments/home/welcome)
* [Portfolio Selection and Risk Management](https://www.coursera.org/learn/portfolio-selection-risk-management/home/welcome)
* [Global Financial Crisis (Yale) [revolves around 2008 crisis]](https://www.coursera.org/learn/global-financial-crisis)
* [Debt Sustainability Analysis [EdX] - International Monetary Fund](https://courses.edx.org/courses/course-v1:IMFx+DSAx+1T2018/course/)


## Books

* [Finance and Data Science Books](https://github.com/Howon/ReadingList/tree/master/Books)

## Articles

[To be Updated]

## Algorithmic Trading 

1. [Bollinger Bands Squeeze](https://www.investopedia.com/articles/technical/04/030304.asp)
2. [Using Bollinger Bands to Gauge Trends](https://www.investopedia.com/trading/using-bollinger-bands-to-gauge-trends/)

## Misc.

1. [Introduction to momentum strategies in Finance](https://www.youtube.com/watch?v=F2TTfZzigYk)

## Research Papers

1. [Hierarchial Risk Parity [Portfolio Optimization Algorithm]](https://papers.ssrn.com/sol3/Delivery.cfm/SSRN_ID2708678_code87814.pdf?abstractid=2708678&mirid=1)
2. [Momentum with volatility timimg](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3417360)
3. [3 Quant lessons from COVID-19](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3562025)
",6,6,1,0,investment-portfolio,"[economics, finance, investment-portfolio]",0.0
51,SunilVeeravalli,XIRR_in_R,,https://github.com/SunilVeeravalli/XIRR_in_R,https://api.github.com/repos/XIRR_in_R/SunilVeeravalli,XIRR (using R) to calculate return on investments done at different time periods which need not be periodic.,"XIRR calculation (in R)
=======================

Introduction
============

XIRR stands for Extended Internal Rate of Return and is used to calculate return on investments made at different time periods which need not be periodic.

XIRR gives the annualized return of a portfolio that include all cash flows.

XIRR is a financial function available in Excel. The drawback with Excel's XIRR is that it will show the 0% XIRR as a default for negative returns.

For use in R, I have written this code which calculates XIRR for both positive and negative returns. For the XIRR calculation in Python, please check my repository: [**XIRR_in_Pyton**](https://github.com/SunilVeeravalli/XIRR_in_Python)

I hope you find my xirr function useful.

System requirements
-------------------

1.  R
2.  RStudio

Data requirements
-----------------

Prepare your data in two columns:
1. First column - dates
2. Second column - amounts. The invested amount (debit) should be given a negative sign and the redemptions (credit) should be given a positive sign.

Note: Please find the sample data provided in the repository

-   Sample\_Positive\_Returns.csv
-   Sample\_Negative\_Returns.csv

Please install tidyverse package

``` r
install.packages(""tidyverse"", repos = ""https://cran.ma.imperial.ac.uk/"") 
library(tidyverse)
```

Bring the xirr function into your environment
`source(file = ""Xirr Code.R"")`

Example: Positive returns
-------------------------

Import the data into R and check the table.

``` r
positive.returns <- read_csv(file = ""Sample_Positive_Returns.csv"", col_names = TRUE)
```

``` r
head(positive.returns)
```

    ## # A tibble: 6 x 2
    ##   dates      amount
    ##   <chr>       <dbl>
    ## 1 23/03/1990  -1350
    ## 2 23/07/1990   -600
    ## 3 31/10/1990  -1250
    ## 4 13/11/1990  -3550
    ## 5 30/01/1991   -850
    ## 6 03/05/1991  -3600

Since the dates column is character data type, change it to date data type.

``` r
positive.returns$dates <- as.Date(positive.returns$dates, format = ""%d/%m/%Y"")
```

Now use the XIRR function

``` r
xirr(positive.returns)
```

    ## [1] ""XIRR is 17.425%""

That is, the return of our portfolio is **17.425%** per annum.

Example: Negative returns
-------------------------

Import the data into R and check the table.

``` r
negative.returns <- read_csv(file = ""Sample_Negative_Returns.csv"", col_names = TRUE)
```

``` r
head(negative.returns)
```

    ## # A tibble: 6 x 2
    ##   dates      amount
    ##   <chr>       <dbl>
    ## 1 09/05/1990   9000
    ## 2 01/07/1990   5100
    ## 3 30/08/1990   9700
    ## 4 28/12/1990  -5300
    ## 5 13/01/1991  -2200
    ## 6 16/01/1991   9800

Since the dates column is character data type, change it to date data type.

``` r
negative.returns$dates <- as.Date(negative.returns$dates, format = ""%d/%m/%Y"")
```

Now use the XIRR function

``` r
xirr(negative.returns)
```

    ## [1] ""XIRR is -79.845%""

That is, the return of our portfolio is **-79.845%** per annum.
",6,6,1,1,investment-portfolio,"[cagr, compounded-annual-growth-rate, excel, excel-cagr, excel-irr, excel-xirr, internal-rate-of-return, investment-analysis, investment-portfolio, investments, irr, r, redemptions, return, returns-calculator, rstudio, xirr]",0.0
52,Femi-tech,Robo-Advisor,,https://github.com/Femi-tech/Robo-Advisor,https://api.github.com/repos/Robo-Advisor/Femi-tech,Creating  a Robo Advisor for Retirement Plans,"# The Power of the Cloud and Unsupervised Learning


### Before You Begin

1. Create a new repository for this project.

2. Clone the new repository to your computer.

3. Inside your local git repository, create a directory for the challenge you choose. Use folder name: **RoboAdvisor**.

4. Add your solution files to this folder.

5. Push the above changes to GitHub or GitLab.


## Robo Advisor for Retirement Plans

![Robot](Images/robot.jpg)

*Photo by [Alex Knight](https://www.pexels.com/@alex-knight-1272316?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) from [Pexels](https://www.pexels.com/photo/high-angle-photo-of-robot-2599244/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) | [Free License](https://www.pexels.com/photo-license/)*

### Background

You were hired as a digital transformation consultant by one of the most prominent retirement plan providers in the country; they want to increase their client portfolio, especially by engaging young people. Since machine learning and NLP are disrupting finance to improve customer experience, you decide to create a robo advisor that could be used by customers or potential new customers to get investment portfolio recommendations for retirement.

In this project, you will combine your new Amazon Web Services skills with your already mastered Python superpowers, to create a bot that will recommend an investment portfolio for a retirement plan.

You are asked to accomplish the following main tasks:

1. **[Initial Robo Advisor Configuration:](#Initial-Robo-Advisor-Configuration)** Define an Amazon Lex bot with a single intent that establishes a conversation about the requirements to suggest an investment portfolio for retirement.

2. **[Build and Test the Robo Advisor](#Build-and-Test-the-Robo-Advisor):** Make sure that your bot is working and responding accurately along with the conversation with the user, by building and testing it.

3. **[Enhance the Robo Advisor with an Amazon Lambda Function:](#Enhance-the-Robo-Advisor-with-an-Amazon-Lambda-Function)** Create an Amazon Lambda function that validates the user's input and returns the investment portfolio recommendation. This task includes testing the Amazon Lambda function and making the integration with the bot.

---

### Files

* [lambda_function.py](Starter_Files/lambda_function.py)
* [correct_dialog.txt](Test_Cases/correct_dialog.txt)
* [age_error.txt](Test_Cases/age_error.txt)
* [incorrect_amount_error.txt](Test_Cases/incorrect_amount_error.txt)
* [negative_age_error.txt](Test_Cases/negative_age_error.txt)

---

### Instructions

#### Initial Robo Advisor Configuration

In this section, you will create the `RoboAdvisor` bot and add an intent with its corresponding slots.

Sign in into your AWS Management Console and [create a new custom Amazon Lex bot](https://console.aws.amazon.com/lex/home). Use the following parameters:

* **Bot name:** RoboAdvisor
* **Output voice**: Salli
* **Session timeout:** 5 minutes
* **Sentiment analysis:** No
* **COPPA**: No
* **Advanced options**: No
* *Leave default values for all other options.*

Create the `RecommendPortfolio` intent, and configure some sample utterances as follows (you can add more utterances as you wish):

* I want to save money for my retirement
* I'm ​`{age}​` and I would like to invest for my retirement
* I'm `​{age}​` and I want to invest for my retirement
* I want the best option to invest for my retirement
* I'm worried about my retirement
* I want to invest for my retirement
* I would like to invest for my retirement

This bot will use four slots, three using built-in types and one custom slot named `riskLevel`. Define the three initial slots as follows:


| Name             | Slot Type            | Prompt                                                                    |
| ---------------- | -------------------- | ------------------------------------------------------------------------- |
| firstName        | AMAZON.US_FIRST_NAME | Thank you for trusting me to help, could you please give me your name? |
| age              | AMAZON.NUMBER        | How old are you?                                                          |
| investmentAmount | AMAZON.NUMBER        | How much do you want to invest?                                           |

The `riskLevel` custom slot will be used to retrieve the risk level the user is willing to take on the investment portfolio. Create this custom slot as follows:

* Select the `+` icon next to 'Slot Types' in the 'Editor' on the left side of the screen.
* Choose `create custom slot` from the resulting display window.
* For **Slot type name**, type: riskLevel
* Select the radial dial button next to **Restrict to Slot values and synonyms**, then fill in the appropriate values and synonums. *Example*: Low, Minimal; High, Maximum.
* Click `Add slot to intent` when finished.

To format the response cards for the intent, click on the gear icon next to the intent as seen in the image below:

![gear_icon](Images/gear_icon.png)

Next, input the following data in the resulting display window:

* **Prompt:** What level of investment risk would you like to take?
* **Maximum number of retries:** 2
* **Prompt response cards:** 4

Configure the response cards for the `riskLevel` slot as is shown bellow:

| Card 1                              | Card 2                              |
| ----------------------------------- | ----------------------------------- |
| ![Card 1 sample](Images/card1.png)  | ![Card 2 sample](Images/card2.png)  |

| Card 3                              | Card 4                              |
| ----------------------------------- | ----------------------------------- |
| ![Card 3 sample](Images/card3.png)  | ![Card 4 sample](Images/card4.png)  |

**Note:** You can download free icons from [this website](https://www.iconfinder.com/) or you can use the icons provided in the [`Icons` directory](Icons/).

Move to the *Confirmation Prompt* section, and set the following messages:

* **Confirm:** Thanks, now I will look for the best investment portfolio for you.
* **Cancel:** I will be pleased to assist you in the future.

Leave the error handling configuration for the `RecommendPortfolio` bot with the default values.

![Error handling configuration](Images/error_handling.png)

#### Build and Test the Robo Advisor

In this section, you will test your Robo Advisor. To build your bot, click on the `Build` button in the upper right hand corner. Once the build is complete, test it in the chatbot window. You should see a conversation like the one below.

![Robo Advisor test](Images/bot-test-no-lambda.gif)

#### Enhance the Robo Advisor with an Amazon Lambda Function

In this section, you will create an Amazon Lambda function that will validate the data provided by the user on the Robo Advisor. Start by creating a new lambda function from scratch and name it `recommendPortfolio`. Select Python 3.7 as runtime.

In the Lambda function, start by deleting the AWS generated default lines of code, then paste in the starter code provided in [lambda_function.py](Starter_Files/lambda_function.py) and complete the `recommend_portfolio()` function by following these guidelines:

##### User Input Validation

* The `age` should be greater than zero and less than 65.
* the `investment_amount` should be equal to or greater than 5000.

##### Investment Portfolio Recommendation

Once the intent is fulfilled, the bot should response with an investment recommendation based on the selected risk level as follows:

* **none:** ""100% bonds (AGG), 0% equities (SPY)""
* **very low:** ""80% bonds (AGG), 20% equities (SPY)""
* **low:** ""60% bonds (AGG), 40% equities (SPY)""
* **medium:** ""40% bonds (AGG), 60% equities (SPY)""
* **high:** ""20% bonds (AGG), 80% equities (SPY)""
* **very high:** ""0% bonds (AGG), 100% equities (SPY)""

Be creative while coding your solution, you can have all the code on the `recommend_portfolio()` function, or you can split the functionality across different functions, put your Python coding skills in action!

Once you finish coding your lambda function, test it using the [sample test cases](Test_Cases/) provided for this homework.

After successfully testing your code, open the Amazon Lex Console and navigate to the `RecommendPortfolio` bot configuration, integrate your new lambda function by selecting it in the _Lambda initialization and validation_ and _Fulfillment_ sections. Build your bot, and you should have a conversation as follows.

![Robo Advisor test with Lambda](Images/bot-test-with-lambda.gif)

### Submission

You should create a brand new repository in GitHub and upload the following files to your repo.

* A python script with your final lambda function.

* From the Amazon Lex Console, export your bot, intent, and slot using `Amazon Lex` as the target platform, and upload the ZIP files to your repo.



### Hints

* Make sure your intent and slot names are named correctly in your Lambda code.  The names in Lex should match the names in Lambda exactly:

![Lex_Names1](Images/Lex_names1.png)
![Lex_Names2](Images/Lex_names2.png)

* You may have to refresh the Lex intent page after creating the custom slot and the lambda function in order to see them in the options.

* Create and upload a repository with the above files to GitHub and you are done!

",6,6,1,0,investment-portfolio,"[amazon-lex-bot, investment-portfolio, lambda, retirement, robo-advisor]",0.0
53,hyyking,markowitz,,https://github.com/hyyking/markowitz,https://api.github.com/repos/markowitz/hyyking,Layout script interpreter and library to visualise markowitz's modern portfolio theory,"# PyMarkowitz

## Purpose

Provide utility to create visually appealing and customisable graphic representation of markowitz's
modern portfolio theory.

## Usage

For this you will need two files:

- A layout file (see below)

- A SQLite database or a list of CSV files, specify the loader with `-l` flag with historical data,
  specify the header you want to load by providing an argument to `-c`.

You can use this package as a CLI:

```
>> python -m markowitz --help

usage: PyMarkowitz [options] LAYOUT INPUT [INPUT...]

Display Assets and Portfolio Graphs from Layout Files

positional arguments:
  layout                layout file path
  input                 data input file(s)

optional arguments:
  -h, --help            show this help message and exit
  -l LOADER, --loader LOADER
                        loader (default: sqlite)
  -c COLUMN, --column COLUMN
                        name of the header (default: clot)
  --debug               activate debug mode
  --style STYLE         matplotlib graph style
```

Or as individual modules:

- `markowitz/graphs` for graph points generators
- `markowitz/sets` for point generators
- `markowitz/financial` for the assets

## Layout Files

Syntax:

```
!	<- comment marker
&	<- start of a new window
(KEY=VALUE)	<- specify options
[]	<- row
|	<- column delimiter
& NAME (OPTIONS) {[|]}  <- valid window
```

Example:

```
! Compare the distribution of two assets
& Compare (precision=100, scale=100) {
	[ Kde(asset1) Kde(asset2) ]
	[ NormalGraph(asset1) | NormalGraph(asset2) ]
}
```

![Example Output](docs/img/example.png)

## Extending the capabilities

You can extend the available graphs and sets by adding them in the `markowitz/graphs` and
`markowitz/sets` directories.

- **Sets** are mathematical vector space point iterators. To implement one you need to subclass
  `markowitz/sets/abstract.py` which will force you to write a valid point iterator.

- **Graphs** are point iterators that map one set (hence `markowitz/sets`) to a set of points that
  can be graphed. To implement one you need to subclass `markowitz/graphs/abstract.py` which will
  force you to write a `points()` method which is called when generating the graph, make sure to zip
  the coordinates together, eg. `zip(x, y)`. Graphs are loaded dynamically at runtime, use your
  implementation by mentioning the class name in the layout file, and name your implementation file
  the same way but **_lowercase_**. The abstract class holds the default config for a graph, you can
  override this config and the config passed when parsing layout files in your implementation.

- **Loader** holds the state of the assets and how they will be loaded, you can implement you own by
  following the already existing ones.

## To be done

- Add better logging
- Add unittests
- Generate documentation
- Split github.io website in two parts: project and documentation
- Add package to pypy
- Add ability to specify other graph obj directory

## Credits

- This project is licenced under MIT, see `LICENSE.md` for more information.
- Produced by Léo Duret as part of his annual project following the
  [CMI EFiQuaS](cmi-efiquas.u-paris2.fr) curriculum.
",6,6,0,1,investment-portfolio,"[financial, financial-portfolio-management, investment-portfolio, modern-portfolio-theory, statistics]",0.0
54,Vinnitschenko,Statmetrics-Android,,https://github.com/Vinnitschenko/Statmetrics-Android,https://api.github.com/repos/Statmetrics-Android/Vinnitschenko,Mobile App Solution for Portfolio Analytics and Investment Management,"# Statmetrics - Mobile App for Investment & Portfolio Analytics
<img src=""https://raw.githubusercontent.com/Vinnitschenko/Statmetrics-Android/master/statmetrics.jpg"">


[Statmetrics](http://www.statmetrics.org/) offers an all-in-one solution for portfolio analytics and investment research. Statmetrics is optimized for use on android mobile devices and allows users to access global market data and news, monitor and screen markets, perform charting and technical analysis, construct and backtest multiple multi-asset portfolios, apply portfolio risk-return optimization strategies, analyze the fundamental and quantitative characteristics of portfolio or potential investments, track overall portfolio performance across all accounts in one place.


<p align=""center"">  
<a href=""https://play.google.com/store/apps/details?id=org.statmetrics.app&referrer=utm_source%3Dgithub.com""><img src=""https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png"" height=""120"" alt=""Download from Google Play""></a>
<br/>
<a href=""http://www.amazon.com/gp/mas/dl/android?p=org.statmetrics.app""><img src=""https://images-na.ssl-images-amazon.com/images/G/01/mobile-apps/devportal2/res/images/amazon-appstore-badge-english-white.png"" height=""80"" alt=""Download from Amazon Appstore""></a>

</p>


[www.statmetrics.org](http://www.statmetrics.org/) | 
[APK Download](https://statmetrics.org/cms2/#download)  | 
[Google Play](https://play.google.com/store/apps/details?id=org.statmetrics.app&referrer=utm_source%3Dgithub.com) | 
[Twitter](https://twitter.com/statmetrics) | 
[Facebook](https://www.facebook.com/Statmetrics-110841637303428/) | [LinkedIn](https://www.linkedin.com/company/statmetrics/)
",6,6,0,0,investment-portfolio,"[analytics, android, app, econometric-analysis, econometrics, economics, finance, financial-markets, investment, investment-analysis, investment-portfolio, portfolio, portfolio-management, portfolio-optimization, quantitative-finance, statistical-models, stock-analysis, stock-market, technical-analysis, trading]",0.0
55,tngaspar,factor-risk-parity,,https://github.com/tngaspar/factor-risk-parity,https://api.github.com/repos/factor-risk-parity/tngaspar,Factor Risk Parity Portfolio Construction algorithm. Built during my Master's. final project. Backtested on the S&P500.,"<div id=""top""></div>
<br />
<div align=""center"">

  <h1 align=""center"">Multi-Factor Portfolio Construction</h1>
  <p align=""center"">
    <h3 align=""center"">A Risk-Based Approach</h3>
    <br />
  </p>
</div>

## About The Repository
<br />
Repo of the code used while writing my master thesis.

The main objective was to build and backtest a Factor Risk parity Investement strategy.
<br />
<br />

## Strategy applied to SP500 equites (2005-2020)
<br />

### Annual Returns: 
<p align=""center"">
<img src=""Plots/FRP_annual_ret.png"" alt=""underwater plot"" width=""640"" class=""center""/>
</p>

<br />

### Underwater Plot (Drawdown):
<p align=""center"">
<img src=""Plots/FRP_underwater.png"" alt=""underwater plot"" width=""640"" class=""center""/>
</p>

",6,6,1,0,investment-portfolio,"[finance, investment-portfolio, risk-parity]",0.0
56,tohid-yousefi,Meta-Heuristics,,https://github.com/tohid-yousefi/Meta-Heuristics,https://api.github.com/repos/Meta-Heuristics/tohid-yousefi,"In this section, I share the Meta-Heuristic algorithm codes that I wrote myself","# Meta-Heuristics
In this section, I share the Meta-Heuristic algorithm codes that I wrote myself
",5,5,1,1,investment-portfolio,"[co-evolution, cpso, curve-fitting, differential-evolution, dispatching-system, economic-dispatch-problem, genetic-algorithm, grasshopper-optimization-algorithm, huristic, hybrid-algorithms, integer-programming, investment-portfolio, knapsack-problem, matlab, meta-heuristic, non-dominated-sorting, nsga-ii, particle-swarm-optimization, path-planning, sphere]",0.0
57,KhanhHua2102,Monetize.ai,,https://github.com/KhanhHua2102/Monetize.ai,https://api.github.com/repos/Monetize.ai/KhanhHua2102,"Monetize.ai is a web-based chatbot that provides personalized investment advice using GPT-3.5 and Yahoo Finance API. It's built using Flask, SQLite, HTML, CSS, JavaScript, Bootstrap, and jQuery. The project is open-source and welcomes contributions.","<a name=""readme-top""></a>

<!-- PROJECT LOGO -->
<br />
<div align=""center"">
  <a>
    <img src=""application/static/img/MonetizeAI-logo.png"" alt=""Logo"" width=""80"" height=""80"">
  </a>

<h3 align=""center"">Monetize.ai</h3>

  <p align=""center"">
    Financial Chat Bot Advisor
    Project for Agile Web Development - CITS3403 unit at UWA 2023
    <br />
    <a href=""https://github.com/KhanhHua2102/CITS3403-Project""><strong>Explore the docs »</strong></a>
    <br />
    <br />
    <a href=""https://github.com/KhanhHua2102/CITS3403-Project"">View Demo</a>
    ·
    <a href=""https://github.com/KhanhHua2102/CITS3403-Project/issues"">Report Bug</a>
    ·
    <a href=""https://github.com/KhanhHua2102/CITS3403-Project/issues"">Request Feature</a>
  </p>
</div>

<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
      <ul>
        <li><a href=""#built-with"">Built With</a></li>
      </ul>
    </li>
    <li>
      <a href=""#getting-started"">Getting Started</a>
      <ul>
        <li><a href=""#prerequisites"">Prerequisites</a></li>
        <li><a href=""#installation"">Installation</a></li>
      </ul>
    </li>
    <li><a href=""#usage"">Usage</a></li>
    <li><a href=""#roadmap"">Roadmap</a></li>
    <li><a href=""#contributing"">Contributing</a></li>
    <li><a href=""#contact"">Contact</a></li>
    <li><a href=""#acknowledgments"">Acknowledgments</a></li>
  </ol>
</details>

<!-- ABOUT THE PROJECT -->
![Project Screenshot](application/static/img/AppShowcase.png)

# About The Project
Monetize.ai is a web-based chat bot application that utilizes the GPT-3.5 and Davinci_003 language model and integrates with the Yahoo Finance, Alpha Vantage and Finnhub API to crawl financial data such as stocks and cryptocurrencies.

The main objective of this project is to provide users with a personalized financial advisory service that can help them manage their investment portfolios in an efficient and effective manner. The targeted users are people who works in the financial industry and have a good understanding of the financial market. The application is also suitable for people who are interested in investing and want to learn more about the financial market. Users can declare their investment portfolios to the chat bot and receive advice on how to balance their portfolios using modern portfolio theory. The chat bot can also calculate profits/losses and provide other useful metrics related to the user's portfolio. All of the user's portfolio data is stored in the Portfolio section for future reference.

The application is built using Flask, a popular Python web framework, and the SQLite database for efficient and scalable data storage. The client-side rendering is done using HTML, CSS, JavaScript, and Bootstrap, making it easy to use and accessible across different devices.

The repository is organized into several modules, each responsible for a specific aspect of the application. The main module is the chat bot itself, which handles user queries and provides advice based on the user's portfolio data. Other modules include the Yahoo Finance API integration, database management, and modern portfolio theory calculations.

Monetize.ai is an open-source project, welcoming contributions from developers who want to improve its functionality and features. The repository includes comprehensive documentation to assist developers in getting started with the project and contributing code. An active community of developers and users is available to provide support and guidance on using the application effectively.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

### Built With

* [![Flask][Flask.com]][Flask-url]
* [![SQLite][SQLite.com]][SQLite-url]
* [![Bootstrap][Bootstrap.com]][Bootstrap-url]
* [![JQuery][JQuery.com]][JQuery-url]

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>



<!-- GETTING STARTED -->
# Getting Started

### Prerequisites

* python 3.8 or newer

### Installation

#### Running the app locally by cloning the Github repo
1. Get a free OpenAI API Key at [https://platform.openai.com/account/api-keys](https://platform.openai.com/account/api-keys)
2. Clone the repo
   ```sh
   git clone https://github.com/KhanhHua2102/CITS3403-Project.git
   ```
3. Enter your OpenAI API in `config.py`
   ```js
   const API_KEY = 'ENTER YOUR OPEN_AI API';
   ```
4. Create a virtual environment for python:
    ```sh
    python3 -m venv env
    ```
    Then activate the virtual environment:

    On Window:
    ```sh
    env\Scripts\activate.bat
    ```
    On Mac/Linux:
    ```sh
    source env/bin/activate
    ```
5. Install the requirements for the app:
    ```sh
    pip install -r requirements.txt
    ```
6. Activate the virtual environment again
7. Run the app on your local host:
    ```sh
    flask run
    ```
This will run the Flask app on your local host, typically http://127.0.0.1:5000.

#### Running the app locally by using Docker
1. Pull the docker image from Docker Hub:
    ```sh
    docker pull khanhhua2102/monetize.ai
    ```
2. Run the docker image:
    ```sh
    docker run -p 5000:5000 khanhhua2102/monetize.ai
    ```
This will run the Flask app on your local host, typically http://127.0.0.1:5000.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>



<!-- USAGE EXAMPLES -->
# Usage

## Sign Up and Login
The Sign Up and Login process is a fundamental part of user authentication on a website. Users begin by visiting the Sign Up page, where they provide their email address and choose a password. Using Flask WTF, the Sign Up form can enforce validations to ensure the email address is valid and not already registered. Password hashing techniques, such as those provided by Flask or libraries like Werkzeug, can be applied to secure the password before storing it in the database.

After successfully signing up, users can proceed to the Login page. Here, they enter their registered email and password to access their account. Flask WTF can validate the login credentials and authenticate the user. Once authenticated, the website can keep track of the user's session, allowing them to access protected pages and personalized features.

To enhance security, it is essential to store passwords in a hashed form rather than in plain text. Hashing algorithms like bcrypt or SHA-256 can be used to convert the password into a fixed-length string of characters that cannot be easily reversed. This way, even if the database is compromised, the actual passwords remain secure.

Overall, the Sign Up and Login process ensures that users can create an account securely and access their personalized information. Validations, password hashing, and user database management play vital roles in safeguarding user data and maintaining the integrity of the website.

## Interacting with the Chatbot
You can interact with the [Monetize.ai](http://monetize.ai/) chatbot by sending it messages through the chat interface. The chatbot understands a variety of finance-related questions and commands. Here are a few examples:

### General Questions:
Ask the chatbot broad questions about investing strategies, financial concepts, and stock markets.

You: What are some common investing strategies?

Bot: There are many different investment strategies, including value investing, growth investing, income investing, and momentum investing. Each strategy has its own unique approach to selecting investments and managing risk. It's important to do your research and choose a strategy that aligns with your financial goals and risk tolerance.

### Update Your Portfolio:
Tell the chatbot when you buy or sell stocks by providing details like the stock ticker, number of shares, date, and price. The chatbot will update your portfolio and provide metrics like profits/losses.

You: I bought 200 shares of Apple (AAPL) on 01/02/2020 at $300 per share.

Bot: Based on the information you provided, if you had purchased 200 shares of Apple Inc. (AAPL) on 01-02-2002 at a start price of $0.44 and sold them on 04-05-2023 at an end price of $167.45, you would have made a profit of $33,402.00. This is a significant return on investment, and it's important to note that past performance does not guarantee future results. It's always a good idea to diversify your investments and consult with a financial advisor before making any investment decisions.

### Rebalance Your Portfolio:
Ask the chatbot to rebalance your portfolio using modern portfolio theory. It will adjust the weights of your stock holdings to match your desired risk tolerance.

You: Can you rebalance my portfolio?

Bot: Sure, I'd be happy to help you rebalance your portfolio. Based on your current holdings, a moderate risk tolerance portfolio would consist of approximately 40% AAPL, 30% AMZN, and 30% TSLA. To achieve this, you would need to sell some of your TSLA shares and buy more AAPL and AMZN shares. Specifically, you would need to sell 50 TSLA shares and buy 67 AAPL shares and 33 AMZN shares. This would bring your portfolio to a target allocation of approximately 40% AAPL, 30% AMZN, and 30% TSLA. Please note that this is just a suggestion and you should always consult with a financial advisor before making any investment decisions.

### Get a stock price target:
Ask the chatbot for a price target for a specific stock.

You: What is the price target for AAPL?

Bot: The current price target for AAPL is $178.88.

### Ask for Recommendations:
Inquire about stocks you are interested in or request general stock recommendations, the recommendation is based on analysts either buy, hold or sell the stock.

You: Please give me stock recommendation of Tesla.

Bot: Based on the latest analyst recommendation for TSLA, it seems that there are more ""Buy"" and ""Strong Buy"" recommendations than ""Hold"" and ""Sell"" recommendations. However, it's important to note that past performance does not guarantee future results and it's always important to do your own research and consult with a financial advisor before making any investment decisions.

### Change your risk tolerance:
Ask the chatbot to change your preferred risk tolerance to either low, moderate, or high.

You: Please change my risk tolerance to high.

Bot: Hello Quang Khanh Hua, I am happy to inform you that your risk tolerance has been updated. Is there anything else I can help you with?
### Reset portfolio data:
Ask the chatbot to reset your portfolio data. This will clear your portfolio data.

You: reset portfolio

Bot: Your portfolio has been reset.

### Reset chatbot context data:
Ask the chatbot to reset your context data.

You: reset

Bot: Chatbot's context data cleared.

## Settings
- Display user’s informations
- Change user’s information  (coming soon)
- Upload profile picture  (coming soon)
- Change to Dark mode (coming soon)

## History
- User can search for old conversations using keywords
- Depending on the keyword searched either previous user message (if keyword is found inside the bot's reply) or next bot message (if keyword is found inside the user's message)
- Able to select the number of pages they can see at one time (coming soon)
- The message box will change depending on the message inside (coming soon)

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- ROADMAP -->
## Roadmap

- Change user’s information in settings page
- Upload profile picture
- Change to Dark mode
- Create a base legit financial knowledge for more accure chatbot answers
- More features comming soon..

See the [open issues](https://github.com/KhanhHua2102/CITS3403-Project/issues) for a full list of proposed features (and known issues).

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- CONTRIBUTING -->
## Contributing
**Quang Khanh Hua (Henry)**

**Yin Min Aung (Ivan)**

**Hoang Long Nguyen**

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- CONTACT -->
## Contact

Quang Khanh Hua - henry@khanhhua2102.com

[![linkedin-shield]][linkedin-url]

<!-- MARKDOWN LINKS & IMAGES -->
<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->
[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&logo=linkedin&colorB=555
[linkedin-url]: https://linkedin.com/in/khanhhua2102
[product-screenshot]: images/screenshot.png
[Flask.com]: https://img.shields.io/badge/flask-%23000.svg?style=for-the-badge&logo=flask&logoColor=white
[Flask-url]: https://flask.palletsprojects.com
[SQLite.com]: https://img.shields.io/badge/sqlite-%2307405e.svg?style=for-the-badge&logo=sqlite&logoColor=white
[SQLite-url]: https://www.sqlite.org
[Bootstrap.com]: https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&logo=bootstrap&logoColor=white
[Bootstrap-url]: https://getbootstrap.com
[JQuery.com]: https://img.shields.io/badge/jQuery-0769AD?style=for-the-badge&logo=jquery&logoColor=white
[JQuery-url]: https://jquery.com 

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>
",5,5,2,0,investment-portfolio,"[chatbot, finance-management, financial-analysis, investment-portfolio]",0.0
58,Dorsa-Arezooji,PortoDash,,https://github.com/Dorsa-Arezooji/PortoDash,https://api.github.com/repos/PortoDash/Dorsa-Arezooji,A Shiny R app for Visualizing Investment Portfolios + Risk Analysis + Optimization,"<img src='https://github.com/Dorsa-Arezooji/PortoDash/blob/master/images/PortoDash_logo.png' width='400px'>

<img src='https://github.com/Dorsa-Arezooji/PortoDash/blob/master/images/PortoDash_Demo.gif' width='100%'>

## What is PortoDash?

* PortoDash is a cloud based, easy to use dashboard for investment portfolios and financial analysis!
* It visualizes your assets and portfolio, provides risk/return metrics, and more to help you choose which asssts to invest in.

> *Disclaimer!*<br>
> *While PortoDash offers insights, it does not provide any financial advice!*

## What does it do?

* PortoDash offers a number of return and risk models to choose from!
* It calculates the returns and risks of your portfolio's assets to visualize your investment portfolio.
* It also offers interactive visualizations of your assets and portfolio to help you gain insight.
* It helps you optimize your portfolio by visualizing and comparing it to the efficient frontier.

## How to use it?

🔗 You can try PortoDash <a href='https://dorsa-arezooji.shinyapps.io/PortoDash/'>here</a>.<br>
* There, you can find a comprehensive documentation.
* You can also use this <a href='https://github.com/Dorsa-Arezooji/PortoDash/blob/master/testdata.csv'>sample dataset to get started</a>.

## Features Coming Soon 💡

* PortoPredict: Interactive machine learning for financial forecasting
* PortOptimizer: Automatic optimization of asset weights 
* Indicators
* Dark mode

---

&#169;<a href='https://Dorsa-Arezooji.github.io'> Dorsa Arezooji</a> 2021
",4,4,2,0,investment-portfolio,"[dashboard, finanace, fintech, investment-portfolio, portfolio, r, risk, shiny]",0.0
59,ksgr5566,Site,,https://github.com/ksgr5566/Site,https://api.github.com/repos/Site/ksgr5566,Manage your investments and track your stocks in multiple portfolios with the SITE webapp.,"# Site

You can manage your investments and track your stocks in multiple portfolios with Site.

---

## Local Installation

1. Clone the repository.

2. If you are using nvm, run `nvm use` to use the version of Node from the .nvmrc file.

3. Install dependencies: `npm install`.

4. `cd server` and `npm install` to set up backend server. Copy `.env.template` to `.env` and edit the environment variables in */server*.

5. Either set up mysql database manually by constructing the databse locally by following commands in [MYSQL-SETUP](MYSQL-SETUP.md) or you can use the `sitedb.sql` file and do the following:
   - Create a database named `sitedb` in your local mysql cli.
   - `use sitedb;`
   - `source sitedb.sql`

6. Start up the server using the command `node index` in */server*.

7. Start up the client app using `npm start` from root.

---

## SiteDB

ER Model

![ER MODEL](sqlimages/site_ER.png)

Relational Model

![Relational Model](sqlimages/site_relationalModel.png)

---

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
",4,4,1,0,investment-portfolio,"[database, investment-portfolio, mysql, nodejs, reactjs, sql, stocks]",0.0
60,EsbernJakobsen,Investments-Performance-Report-Generator,,https://github.com/EsbernJakobsen/Investments-Performance-Report-Generator,https://api.github.com/repos/Investments-Performance-Report-Generator/EsbernJakobsen,A Python program that downloads historical price data for your investments and presents plots of them in a PDF report. ,"## Investments Performance Report Generator
This is a Python script used for looking up the historical price action of your former investment holdings during the time that you owned them.
The program then generates a PDF report with plots of the price action during the time period (plus a little extra) in which you held those investments.

For example:
![Image](Images/Example_plot.png?raw=true)

### Motivation
There are no brokers that I know of, Hargreaves Lansdown, Trading 212, etc. that provide an overview of price action of your previous investments.
It is always interesting to see the full picture of how an investment has performed while you held it. 

### Getting started
Since this program is not aimed at any broker in particular, it relies on you providing it with a `Investments CSV Example.csv` file in the correct format.
This `.csv` file will contain your investment history, with the following details:
![Image1](Images/CSV_File_Example.png?raw=true)
The Python program attempts to retrieve historical price data from one of two separate sources:
1. [Investing.com](https://www.investing.com/) (using Investpy)
2. [Yahoo Finance](https://uk.finance.yahoo.com/) (using Pandas)

Therefore, each investment requires ONE of the last 3 columns to be completed with a 'search' term.
- For stocks and shares, simply fill the 'Stock Ticker column'.
- For funds, either the 'ISIN for Yahoo Finance' or the 'InvestPy Fund Name' column can be filled out.
Not all funds can be found on Yahoo Finance using their ISIN, but if the fund can be found on Investing.com, price data can be retrieved through Investpy using the fund name exactly as it appears on Investing.com. 

#### Prerequisites
The dependencies for this script are:
- Python 3.6>
- Investpy
- Pandas, Matplotlib
- ReportLab
- svglib
- A correctly formatted `Investments CSV Example.csv` file.
#### To-Do
- Incorporate Financial Times price data search.
#### Licensing
This software is under the MIT license.
#### Contact
If you have any issues or ideas, don't hesitate to get in touch.",3,3,1,0,investment-portfolio,"[investing-com, investment-portfolio, python, yahoo-finance]",0.0
61,lorenzbr,PortfolioTrackerDocs,,https://github.com/lorenzbr/PortfolioTrackerDocs,https://api.github.com/repos/PortfolioTrackerDocs/lorenzbr,Documentation of the Portfolio Tracker,"
# Documentation of the Portfolio Tracker <a href=''><img src='man/figures/hex-PT.png' align=""right"" height=""120"" style=""float:right; height:120px;"" /></a>

<!-- badges: start -->

[![Lifecycle:
experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
[![Project Status: WIP – Initial development is in progress, but there
has not yet been a stable, usable release suitable for the
public.](https://www.repostatus.org/badges/latest/wip.svg)](https://www.repostatus.org/#wip)
[![R-CMD-check](https://github.com/lorenzbr/PortfolioTrackerDocs/workflows/R-CMD-check/badge.svg)](https://github.com/lorenzbr/PortfolioTrackerDocs/actions)
<!-- badges: end -->

This is the documentation of the Portfolio Tracker, an app to track your
investment portfolio. The goal of this tool is to provide a complete and
automated workflow from extracting relevant data from your bank
statements to calculating the performance of your investments.

## What does the Portfolio Tracker do? (WIP)

## Example (demo)

![dashboard_example](man/figures/portfoliotracker_dashboard_demo.png)

## Help (WIP)

**1. How can I add new transactions?** Select the panel *Transactions*
and choose between two different options (add manually or upload PDFs)
in the box on the right hand side.

**2. Which PDF bank statements are automatically read?** Right now, bank
statements from four different banks and brokers are included. See
[here](https://github.com/lorenzbr/BankStatementParser#readme) for
further information. For additional banks submit a suggestion via
<https://github.com/lorenzbr/PortfolioTrackerDocs/issues> and send an
anonymized PDF bank statement to my private address.

**3. What are tickers?** Tickers are symbols for an investment such as
stocks or funds and identifies the investment on a stock market. It is
required to be able to access prices and volume data of an investment.

**4. Why are some tickers missing?** The *Portfolio Tracker* tries to
identify tickers based on the ISIN or WKN and searches for the
corresponding ticker symbol on
[Xetra](https://www.xetra.com/xetra-de/instrumente/alle-handelbaren-instrumente/boersefrankfurt).
In some cases, the correct ticker, which is needed to get prices from
Yahoo Finance, cannot be found. Then, the user needs to search for the
correct ticker on [Yahoo Finance](https://finance.yahoo.com) and add it
in the panel *Transactions*.

**5. How many PDFs with transactions can I upload at once?** You can
upload as many PDFs as possible. This may, however, take some time.
Alternatively, you can start to upload up to 100 transactions (this can
take several minutes) to see whether any issues arise. In the next step,
you can upload the remaining transactions.

**6. What happens if I upload the same PDF transaction several times?**
As long as the file name of the PDF (and all other information in the
PDF) is unique and unchanged, the *Portfolio Tracker* considers such a
transaction as only one single transaction.

## Documentation (WIP)

**Annualized return**  
“An annualized total return is the geometric average amount of money
earned by an investment each year over a given time period.” See
[here](https://www.investopedia.com/terms/a/annualized-total-return.asp)
for further details.

**Annual return**  
“The annual return is the return that an investment provides over a
period of time, expressed as a time-weighted annual percentage.” See
[here](https://www.investopedia.com/terms/a/annual-return.asp) for
further details.

## Tasks (WIP)

-   [x] Portfolio performance
-   [x] Portfolio statistics
-   [ ] Return on investment (portfolio + individual stocks)
-   [ ] Benchmark with alternative investments (e.g. MSCI World)
-   [ ] Dividends by stock/fund and compute dividend yield
-   [ ] Documentation/vignette/help panel
-   [ ] Watchlist
-   [ ] Cryptocurrencies

## Contact

Please submit bug reports and suggestions via
<https://github.com/lorenzbr/PortfolioTrackerDocs/issues>

## License

This R package is licensed under the GNU General Public License v3.0.

See
[here](https://github.com/lorenzbr/PortfolioTrackerDocs/blob/master/LICENSE)
for further information.
",3,3,1,0,investment-portfolio,"[documentation, finance, investment-analysis, investment-portfolio, portfolio-management, portfolio-performance, shiny-apps, shiny-r, stock-market]",0.0
62,BradleyHe,testfolio,,https://github.com/BradleyHe/testfolio,https://api.github.com/repos/testfolio/BradleyHe,Quick portfolio backtesting and visualization,"# testfolio
<a target=""new"" href=""https://pypi.org/pypi/testfolio""><img border=0 src=""https://img.shields.io/badge/python-3.6%2B-blue""></a>
<a target=""new"" href=""https://pypi.org/pypi/testfolio""><img border=0 src=""https://img.shields.io/pypi/dm/testfolio""></a>
<a target=""new"" href=""https://pypi.org/pypi/testfolio""><img border=0 src=""https://img.shields.io/pypi/v/testfolio""></a>
<a target=""new"" href=""https://www.codefactor.io/repository/github/bradleyhe/testfolio""><img border=0 src=""https://img.shields.io/codefactor/grade/github/BradleyHe/testfolio""></a>

Backtest and visualize your portfolio allocations using historical market data from Yahoo Finance.

## Quick Start
### Installation
You can install **testfolio** using pip:
``` {.sourceCode .bash}
$ pip install testfolio -U
```

### Requirements
**testfolio** depends on [yfinance](https://github.com/ranaroussi/yfinance) for retrieving market data; as such, the requirements match its requirements.
- [Python](https://www.python.org) \>= 3.6+
- [Pandas](https://github.com/pydata/pandas) \>= 1.0.0
- [Numpy](http://www.numpy.org) \>= 1.11.1
- [requests](http://docs.python-requests.org/en/master/) \>= 2.14.2
- [lxml](https://pypi.org/project/lxml/) \>= 4.5.1
- [Matplotlib](https://matplotlib.org/) \>= 3.5.0

### Example Usage
#### Creating a backtest
Stock tickers are specified in the allocation, along with their respective percent allocations. Rebalancing frequency, start date, and end date can also be specified.
```python
import testfolio as tsf

allocation_1 = {
    'SPY': 0.6,
    'TLT': 0.4
}

backtest_1 = tsf.Backtest(allocation_1, rebalance='q', name='60/40 Portfolio')
print(backtest_1)
```

#### Output
```text
------------------- Metrics -------------------
Name: 60/40 Portfolio
Allocation: {'SPY': 0.6, 'TLT': 0.4}
Starting Value: $1000.00
Ending Value: $5390.85
Start Date: 2002-07-30
End Date: 2022-07-15
CAGR: 8.80%
Maximum Drawdown: -30.48%
STD (annualized): 10.32%
Sharpe Ratio: 0.76
Sortino Ratio: 1.08
Market Correlation: 0.84
-----------------------------------------------
```

Options for creating the backtest can be seen below:
```python
backtest = Backtest(
            # Must be a dictionary with ticker keys corresponding to allocation percentages that sum to 1.
            allocation, 
    
            # Portfolios are rebalanced quarterly by default. Other options include 'd' (daily), 'w' (weekly),
            # 'm' (monthly), 'q' (quarterly), 'y' (yearly), and 'no' (no rebalancing). Rebalancing occurs on the first 
            # day of the specified interval.
            rebalance='q', 
            
            # Must be in YYYY-mm-dd string format. Set to the earliest possible date when all tickers existed by 
            # default. Will be rounded to the 1st of the next month.
            start_date='2020-01-01',
            
            # Must be in YYYY-mm-dd string format. Set to today by default. Will be rounded to the 1st of the last month.
            end_date='2022-03-02',
    
            # Set to 1000 by default.
            start_val=1000,
    
            # If True, then dividends are reinvested into its security. If False, then dividends generated are not 
            # incorporated into the portfolio.
            invest_dividends=False,
    
            # Set to ""Portfolio n"" where n is the nth portfolio made by default.
            name='Example Portfolio',
            
            # If True, adjusts all values and calculations to be real dollars based on the start date. Most recent 
            # months may not be adjusted if inflation data is not available.
            adj_inflation=False)
```
Aliases for broad market indices are available as well, and are set to the below mapping:
```python
ALIAS_TO_TICKER = {
    'S&P 500': 'VFINX',
    'Long Term Treasury': 'VUSTX',
    'Total US Bond Market': 'VBMFX',
    'Total US Stock Market': 'VTSMX',
    'Total Intl Stock Market': 'VGTSX',
    'Gold': 'GC=F',
    'Intermediate Term Treasury': 'IEF',
    'Short Term Treasury': 'VFISX',
    'REIT': 'VGSIX',
    'US Small Cap': 'NAESX',
    'US Mid Cap': 'VMCIX'
}
```
In addition to the attributes set during creation, Backtest objects have the following attributes and functions:

```python
backtest = Backtest(allocation)

# pandas DataFrame containing the value of the portfolio every month. Columns include each of the tickers, the total 
# portfolio value, and drawdown.
backtest.hist

# Maximum drawdown 
backtest.max_drawdown

# Compound annual growth rate 
backtest.cagr

# Annualized standard deviation of daily returns
backtest.std

# Sharpe ratio (using 3 month T-Bill as risk free asset)
backtest.sharpe

# Sortino ratio (using 3 month T-Bill as risk free asset)
backtest.sortino

# Pearson correlation coefficient with the S&P 500
backtest.correlation

# Returns a pandas.Series object containing rolling returns of the specified interval (e.g. 1 year)
backtest.get_rolling_returns(12)
```


#### Graphing backtests

```python
allocation_2 = {
    'Total US Stock Market': 0.60,
    'Total Intl Stock Market': 0.20,
    'Total US Bond Market': 0.20
}

backtest_2 = tsf.Backtest(allocation_2, rebalance='q', name='Three Fund Portfolio')
tsf.graph_return(backtest_1, backtest_2, start_val=1000, logarithmic=True, path='returns.png')
tsf.graph_drawdown(backtest_1, backtest_2, path='drawdowns.png')
tsf.graph_rolling_returns(backtest_1, backtest_2, interval=24, path='rolling_returns.png')
```

#### Output
![returns](https://github.com/BradleyHe/testfolio/raw/main/example/returns.png)
![drawdowns](https://github.com/BradleyHe/testfolio/raw/main/example/drawdowns.png)
![rolling_returns](https://github.com/BradleyHe/testfolio/raw/main/example/rolling_returns.png)

",3,3,2,0,investment-portfolio,"[backtesting, finance, investment-portfolio, pandas, python, yfinance]",0.0
63,vpozdnyakov,invest_optimization,,https://github.com/vpozdnyakov/invest_optimization,https://api.github.com/repos/invest_optimization/vpozdnyakov,Portfolio generator based on MOEX Russia Index,"# Portfolio generator based on MOEX Russia Index

This notebook shows how to generate a portfolio based on [MOEX Russia Index](https://en.wikipedia.org/wiki/MOEX_Russia_Index). You need only set the total amount of investment. This method based on the Branch and Bound solver [ECOS_BB](https://github.com/embotech/ecos#mixed-integer-socps-ecos_bb).

The latest version of [cvxpy](https://github.com/cvxgrp/cvxpy) package does not support ECOS_BB solver, so install the version 1.0

```
$pip uninstall cvxpy
$pip install cvxpy==1.0.31
```
",2,2,2,0,investment-portfolio,"[cvxpy, integer-programming, investment-portfolio, moex]",0.0
64,sainigurcharan,Investment-Forcasting,,https://github.com/sainigurcharan/Investment-Forcasting,https://api.github.com/repos/Investment-Forcasting/sainigurcharan,Algorithm Based Asset Allocation,"# Investment Forcasting
Follow the below link to experience the deployed website for this project:
https://investowiz.herokuapp.com

Below is the list of different models tried for this project by each member, follow the folders:
* Aalok
* Adrianne
* Gurcharan
* Saurabh

Below is the final presentation done for this project during the UCI Data Analytics Bootcamp final project submission:
* Final Project V1.2 (PPT File)

Below is the list of Folders and Files used for deployment on Heroku:
* historicalSummary (CSV files for historical summary os stock indexes)
* static (Folder for static files like js and css)
* templates (Folder for html files)
* Procfile (gunicorn server file version details for Heroku)
* requirements.txt (File for list of package dependencies)
* runtime.txt (File for python version)

Thank you!
",2,2,1,2,investment-portfolio,"[bootstrap, clustering-algorithm, css, d3, investment-portfolio, javascript, linear-regression, logistic-regression, pandas, plotly, python, random-forest, regex, scikit-learn]",0.0
65,SolB77,2020-2021-CQA-Investment-Challenge,,https://github.com/SolB77/2020-2021-CQA-Investment-Challenge,https://api.github.com/repos/2020-2021-CQA-Investment-Challenge/SolB77,This repository contains a folder with an investment challenge portfolio update application and a folder of some quantitative research and trading strategies we are developing to improve our alpha for the 2020-2021 CQA Investment Challenge,"# 2020-2021-CQA-Investment-Challenge
This repository contains both an automatic investment challenge portfolio update application and in the future, a folder of some quantitative strategies I am developing to improve our alpha. 

Automatic Investment Challenge Portfolio Update Application

As part of the CQA Investment Challenge I am competing in, there are many mostly risk-based compliance rules that our team must follow in order to not lose points in the rankings. The rules include:

-Limit on # of trades: There is a limit of 1,000 trades in the competition.

-Stocks only: Portfolios can ONLY invest in individual stocks on US exchanges. ETFs and
ETNs are not allowed. ADRs are allowed.

-Portfolio Size: Each team will initially manage a $2,000,000 long/short stock portfolio
with about $1,000,000 in long picks and $1,000,000 in short picks.

-Minimum # of stocks: The portfolio must always own AT LEAST 40 stocks on the long
side and 40 stocks on the short side.

-Minimum Stock Price for Buying: $5

-Minimum Stock Price for Shorting: $5

-Position Weight: The maximum position weight on both the long and short side is 5% of
the Value of the Fund. 

-Dollar Neutrality: Portfolios must remain dollar neutral with a ratio that is greater than
or equal to 0.9 and less than or equal to 1.1.

-Cash: Portfolios may not hold more than a 5% weight in cash

In order to solve the issue of making sure we are constantly complying with the CQA Investment Challenges rules and in order to recieve easy to access updates, I created an application that automatically scrapes, analyzes, and emails us relevant portfolio updates. The application first remotely webscrapes our trading platform for the relevant data using the StockTrakDataReader.py file. Next it, uses the ""NonJupyterPCS.py"" file (Non-Jupyter production version of the ""PortfolioComplianceSystem.ipynb"" file), to derive the necessary data from our scraped files, check the status of the portfolio performance and compliance wise, and finally to create a customized portfolio update including information about the portfolios performance and compliance statuses. Finally, the ""GmailMessenger.py"" file uses smtplib to send out an email to my team members and I containing the portfolio update created in the ""NonJupyterPCS.py"" file. Although I currently use crontab to automatically schedule this application everyday, I plan on deploying it on google cloud in the future so I do not have to run my computer remotely.

",2,2,1,0,investment-portfolio,"[compliance, cqa-investment-challenge, investment-analysis, investment-portfolio, portfolio-management, portfolio-optimization, trading-algorithms, trading-platform, trading-strategies]",0.0
66,LastAncientOne,Housing_Home_Building_Investment,,https://github.com/LastAncientOne/Housing_Home_Building_Investment,https://api.github.com/repos/Housing_Home_Building_Investment/LastAncientOne,Select the optimal investment for housing and home construction.,"
<img src=""HomesInvestment.PNG"">
<h1 align=""center"">Housing Home Building Investment</h1>

### Description:
#### This a project of long term investment and see which housing or home buildign is a good long term investment. Analyzing technical and fundamental. Analyzing historical data (2 years) and calculate performance measurements, back-testing, forecasting, and using Capital Asset Pricing Model. Testing different trading strategies. Finding stock with lowest risks with highest returns. 

### Stock Tickers:  
CareTrust REIT, Inc. (CTRE)   
The Home Depot, Inc. (HD)   
Lennar Corporation (LEN)   
LGI Homes, Inc. (LGIH)   
Lowe's Companies, Inc. (LOW)  
NVR, Inc. (NVR)  

#### Use accountant statements and historical price in Python, R, Excel, Power BI, and Tableau for Stocks Analysis

### Financial Ratio or Accounting Ratio:  

Profitability Ratio is a set of financial metrics used to evaluate a company's ability to generate income (profit) in relation to its revenue, balance sheet assets, operating costs, and shareholders' equity during a specific period of time. These ratios provide insights into how effectively a company utilizes its assets to generate profit and create value for shareholders.  

Operating Ratio is a financial metric that assesses how efficiently a company utilizes its assets.  

Leverage Ratios are financial metrics used to determine the proportion of an organization's capital that is derived from debt. They provide a reliable indication of whether a business can fulfill its financial obligations.  

Valuation Ratios are financial metrics that evaluate the relationship between the market value of a company or its equity and certain fundamental financial measures, such as earnings.  

Liquidity Ratios are financial metrics that assess a company's ability to meet its debt obligations and its margin of safety. These ratios are calculated using metrics such as the current ratio, quick ratio, and operating cash flow ratio.  


### CareTrust REIT, Inc (CTRE)    
#### Income Statement  
•	Over the past five years, CareTrust REIT, Inc. has exhibited stability and consistent growth in profitability. This could be attributed to the strategic acquisitions they made, expanding their portfolio of senior apartments/buildings and nursing facilities for tenants. The impact of these acquisitions/investments is evident in the Cash Flow Statement.  
#### Balance Sheet  
• Looking at the Liabilities to Asset Ratio over the last 5 years, it can be observed that approximately half of CareTrust REIT, Inc's liabilities are being used to finance their assets, while the remaining portion comes from equity or shareholders.  
• As mentioned earlier, when considering the Liabilities to Equity Ratio, CareTrust REIT, Inc demonstrates a higher reliance on equity for funding their business and operations.  
#### Cash Flow  
•	 Over the past 5 years, CareTrust REIT has acquired a variety of properties to expand their housing options for seniors and nursing facilities. This expansion strategy may help explain the occasional negative cash flow experienced in certain years. Additionally, expenses such as dividends and debt repayment could also contribute to this situation.  

### Home Depot Inc (HD)  
#### Income Statement  
•	Over the past 5 years, Home Depot has maintained a stable condition and has consistently shown steady gains.  
#### Balance Sheet  
• When examining the Liabilities to Asset Ratio over the last 5 years, Home Depot has been close to or exceeding its liabilities compared to its assets. This could indicate that the company is experiencing distress and/or may face difficulties in repaying its debts. However, it is highly unlikely that Home Depot will go bankrupt despite having higher liabilities than assets.  
• Looking at the Liabilities to Equity ratio over the last 5 years, Home Depot has had excessive liabilities in comparison to its Shareholder’s Equity. Furthermore, there were years with a negative ratio, indicating that liabilities exceeded assets.  
#### Cash Flow  
• Analyzing the Net Cash from Acquisitions & Divestitures in 2020, it appears that Home Depot made a significant acquisition in December of that year. They acquired HD Supply, which explains the relatively large difference in total cash from Investing Activities compared to the years 2017, 2018, 2019, and 2021.  
• Considering the Net Change in Cash or the amount of leftover Cash, Home Depot has experienced fluctuations over the years, either gaining or losing. It is expected that they may recover in the next year to three years.  

### Lennar Corp (LEN)    
#### Income Statement  
•	Over the last 5 years, Lennar Corp has gradually experienced an increase in income. Additionally, it appears that they have acquired several subsidiaries and partnerships, resulting in a minority increase (Lennar Corp holds stakes in other smaller businesses). You can find a list of Lennar Corp's subsidiaries from the SEC here: https://www.sec.gov/Archives/edgar/data/920760/000093176303000421/dex21.htm  
#### Balance Sheet    
 When examining the Liabilities to Asset Ratio, there seems to be a slight decrease over the years. The company has been steadily increasing its assets while maintaining a stable liability to asset ratio.  
• The Liabilities to Equity Ratio appears to be stable. The minority interest in Equity seems to originate from subsidiaries that Lennar Corp owns.    
#### Cash Flow  
• Looking at Lennar Corp's cash flow over the past 5 years, it does not seem to be consistent. It fluctuates between negative and positive cash flow. However, this could be attributed to their investment activities, such as mergers, acquisitions, and subsidiaries.

### LGI Homes Inc (LGIH)    
#### Income Statement  
• Over the past 5 years, LGI Homes Inc. has experienced a gradual increase in income. Based on their income statement, it does not appear that they have any subsidiaries, as there are no minority interests shown. However, they may have acquired some smaller real estate building companies, which should be reflected in the Cash Flow Statement.  
#### Balance Sheet   
• There don't seem to be any long-term liabilities for LGI Homes Inc. All of their liabilities appear to be current (1 year or less).  
• Their Liabilities to Asset and Liabilities to Equity ratios seem to be stable.  
#### Cash Flow   
• Over the past 5 years, LGI Homes Inc. has had inconsistent cash flow. At year-end, they have experienced negative cash flow in the years 2018-2020, with the exception of 2017 and 2021.  
• LGI Homes did appear to make some small acquisitions from smaller building companies.  

### Lowes Companies Inc (LOW)  
#### Income Statement  
•	Over the past 5 years, Lowe's has appeared to be in a stable condition and has experienced consistent growth. However, in 2018, Lowe's did generate slightly lower earnings compared to the previous year in 2017, but it managed to recover in the subsequent years.  
#### Balance Sheet  
• Analyzing the Liabilities to Asset Ratio over the last 5 years, Lowe's has utilized a significant portion of their debt/liabilities to cover the cost of their assets, ranging from approximately 80% to 110%. In the year 2021, their liabilities exceeded their assets. While this may raise concerns, it doesn't necessarily indicate a negative outcome. It is possible that due to the nature of their industry, Lowe's requires additional debt to fund their assets and sustain their business operations.  
• Observing the Liabilities to Equity Ratio over the past 5 years, Lowe's has experienced a gradual increase in this ratio. For instance, in 2017, for every $1 in Shareholder's Equity, the company owed $5.01. This figure rose to $8.47 in 2018, $19.02 in 2019, and $31.52 in 2020. As of 2021, the ratio turned negative due to liabilities surpassing assets.  
#### Cash Flow  
• In 2017, Lowe's engaged in investment activities by acquiring Maintenance Supply Headquarters for approximately $509M-$512M. However, there were no further acquisitions or divestitures in the subsequent years (2018-2021). Aside from that, Lowe's appears to have maintained a steady flow of other investment activities.  
• Lowe's has consistently paid dividends to its shareholders, with the dividend amount gradually increasing over the years.    
• When examining the Net Changes in Cash, Lowe's has experienced both losses and gains in terms of cash flow over the years.  

### NVR, Inc (NVR)   
#### Income Statement
• NVR, Inc. appears to have a positive income statement over the past 5 years, with an increase in net income compared to previous years.  
• It seems that NVR has not acquired or does not own any smaller businesses, as there is no minority interest shown in their income statement.statement.   
#### Balance Sheet  
• The Liabilities to Asset Ratio appears to be stable. NVR doesn't seem to heavily rely on liabilities to fund their assets, as they use approximately half of their liabilities for this purpose.  
• The Liabilities to Equity ratio is also stable. However, their liabilities are almost equivalent to their debt, but not excessively so. They rely on debt for a little over 50% of their funding.   
#### Cash Flow  
• NVR, Inc. has shown an increased amount of cash flow over the past 5 years, except for 2021. This could be due to factors such as repurchasing its own equity or repurchasing NVR, Inc. shares of stock.  


# Prerequistes
#### Microsoft Azure Machine Learning Studio  

#### Python 3.5+

#### Jupyter Notebook Python 3.5  

#### Excel 2016

#### Power BI  

#### Tableau

## Author:  
### Tin Hang  

## Disclaimer
## 🔴 This is not a financial advisor. Please conduct your own research. Do not use this code for investing or trading in the stock market. However, if you are interested in the stock market, you should read books on investment, trading, the stock market, and finance. Consult a professional investment advisor before making any investment decisions. This is for educational purposes.   
",2,2,2,0,investment-portfolio,"[excel, house, investment-analysis, investment-portfolio, investment-strategies, powerbi, python, r, tableau]",0.0
67,CryptoIndexFund,CryptoIndexFund.github.io,,https://github.com/CryptoIndexFund/CryptoIndexFund.github.io,https://api.github.com/repos/CryptoIndexFund.github.io/CryptoIndexFund,Cryptocurrency Index Fund target allocations,"# CryptoIndexFund
Cryptocurrency Index Fund target allocations
",2,2,0,6,investment-portfolio,"[cryptocurrency, investment-portfolio]",0.0
68,utensils,coin_purse,utensils,https://github.com/utensils/coin_purse,https://api.github.com/repos/coin_purse/utensils,An experimental Crypto and Stock dashboard and portfolio tracker powered by @phoenixframework's LiveView and Websockets,"# CoinPurse

To start your Phoenix server:

  * Install dependencies with `mix deps.get`
  * Create and migrate your database with `mix ecto.setup`
  * Install Node.js dependencies with `npm install` inside the `assets` directory
  * Start Phoenix endpoint with `mix phx.server`

Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.

Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).

## Learn more

  * Official website: https://www.phoenixframework.org/
  * Guides: https://hexdocs.pm/phoenix/overview.html
  * Docs: https://hexdocs.pm/phoenix
  * Forum: https://elixirforum.com/c/phoenix-forum
  * Source: https://github.com/phoenixframework/phoenix
",2,2,6,0,investment-portfolio,"[cryptocurrency, elixir-lang, investment-portfolio, liveview, phoenix-framework, real-time, supervisor, tailwindcss]",0.0
69,thinktwice13,ibkr-report,,https://github.com/thinktwice13/ibkr-report,https://api.github.com/repos/ibkr-report/thinktwice13,An Interactive Brokers statement parser,"# [WIP] ibkr-report [![test](https://github.com/thinktwice13/ibkr-report/actions/workflows/test.yaml/badge.svg?branch=main)](https://github.com/thinktwice13/ibkr-report/actions/workflows/test.yaml)
> A simple Interactive Brokers .csv statements parser intended to help beginner Croatian investors with tax reporting 
## How to use
#### Running the app
Download the latest release and run executable from the root of your directories containing IBKR .csv statements. Find the exported `Portfolio Report.xlsx` spreadsheet in the same directory.

#### Notes
- The statements must be in .csv format
- Duplicate filenames found in subdirectories will be ignored, but make sure there are no extra statements duplicating data (u.e. yearly and monthly statements covering the same period)

If running for the first time, app will also create a `Portfolio Tracker.xlsx` file you can use to add data from other brokers. [See below](#how-to-template)

### Reading the Report
All values are in `HRK` (conversion rates from [hnb.hr](https://www.hnb.hr/temeljne-funkcije/monetarna-politika/tecajna-lista/tecajna-lista))

**INO-DOH** sheet matches the tax report; shows taxed income by source country. Asset countries are determined by reading the provided `ISIN` numbers. If no `ISIN` found, an asset symbol will be used. [See Todos](#todo)

**JOPPD** sheet combines two yearly `JOPPD` reports - realized profits (FIFO method) and dividends. It also considers fees and charges not related to any of the assets (i.e. broker subscription). `JOPPD` report deducts fees from any positive realized profits, but not from the dividend income for the year.

**Summary** sheet shows a breakdown of asset dividends, tax withheld, fees and profits (FIFO method)

**Holdings** sheet lists any active lots still held, their cost in `HRK` and their taxable deadlines (aon 24 months)

### <a name=""how-to-template""></a> Using the tracker template
- Show sale trades with negative quantity of shares;
- Show charged fees and withholding tax as negative amounts;
- Use any decimal or 000 separator;
- You can change the order of sheets and columns, but do not change the names;
- For INO-DOH report to work correctly, `ISIN` numbers as asset IDs are preferred over tickers; [See Todos](#todo)
- It is enough to enter `Asset Category` only once per asset across all sheet. Dividends from assets without category found will be included in the tax report [See Todos](#todo)

## <a name=""todo""></a> TODO
- Search current holding prices;
- Search asset domicile for INO-DOH report when `ISIN` not provided;
- Search asset categories when not provided;
- Choose directory path for statements;
- Choose report currency, change default to EUR in 2023;
- Other accounting methods: ACB, LIFO, HIFO, LCFO, LGUT, SLID;
- Other brokers


## LICENSE
[MIT](./LICENSE)
",2,2,1,2,investment-portfolio,"[golang, interactive-brokers, investment-portfolio, investments, spreadsheet]",0.0
70,pportocarrero,Investment-management-ml,,https://github.com/pportocarrero/Investment-management-ml,https://api.github.com/repos/Investment-management-ml/pportocarrero,"A compilation of notebooks I worked on, based on the EDHEC Invesment management with python and ML specialization","# Invesment management with python and machine learning

This is a repository with useful notebooks for investment management with python.

The notebooks are organized in lab sessions and specific topics, which you may find useful, I hope.
 
# Credits

The notebooks, modules and datasets are heavily based on EDHEC's ""Invesment Management with python and machine learning"", so all credit towards the authors of the course and EDHEC Business School. I just worked on the notebooks as I progressed through the specialization and saw a good opportunity to share what I've learned along the way.",2,2,1,0,investment-portfolio,"[finance, investment-analysis, investment-management, investment-portfolio, machine-learning, portfolio-optimization]",0.0
71,slatteryjim,portfolio-analysis,,https://github.com/slatteryjim/portfolio-analysis,https://api.github.com/repos/portfolio-analysis/slatteryjim,"Analyzing Portfolios, inspired by PortfolioCharts.com","# portfolio-analysis
Analyzing Portfolios, inspired by PortfolioCharts.com

## Golden Butterfly Portfolio
The [Golden Butterfly Portfolio](https://portfoliocharts.com/portfolio/golden-butterfly/)
is one of the most compelling portfolios, with
an unusually high perpetual withdrawal rate, and
an unusually low ulcer index.

It's a simple mix of 20% each of:
- Total Stock Market Index
- Small Cap Value Stocks Index
- Long Term Treasuries
- Short Term Treasuries
- Gold

### Verifying the Advertised Performance
In this repo I wrote some Go code to recreate most of the portfolio metrics
used on PortfolioCharts.com.

Frustratingly, the historical data used on the PortfolioCharts website is not accessible,
so it's hard to verify what is advertised.


I want to see how portfolios will perform using real ETFs that I have access to.
I found a wonderful resource, [Simba's backtesting spreadsheet](https://www.bogleheads.org/wiki/Simba%27s_backtesting_spreadsheet), 
containing inflation-adjusted return data for many Vanguard funds.

I loaded the historical data for the five Golden Butterfly assets from 1969.

Here are the results of evaluating that portfolio:

| Metrics  | Golden Butterfly using Vanguard Funds | Golden Butterfly as Advertised on PortfolioCharts.com  |
|---|---:|---:|
| Average Return             |  5.668% |      6.4% |
| Baseline Return (15years)  |  5.241% |      5.5% | 
| Baseline Return (3years)   |  2.848% |      2.8% |    
| Perpetual Withdrawal Rate  |  4.224% |      5.3% | 
| Safe Withdrawal Rate       |  5.305% |      6.4% |    
| Standard Deviation         |  8.103% |      7.9% | 
| Ulcer Index                |     3.4 |       2.7 |    
| Deepest Drawdown           | -15.33% |      -11% | 
| Longest Drawdown           | 3 years | 2.8 years |    
| Start Date Sensitivity     |   7.71% |      6.7% | 

It was a little disappointing to see the diminished performance of the real portfolio compared to
what was advertised on PortfolioCharts.com.
(UPDATE 2022-08: it turns out the difference is mainly because I was testing with 50 years of data, instead of closer to 40).
Notably:
- The Perpetual Withdrawal Rate was a full percentage point lower: 4.2% rather than 5.3%!
- The Deepest Drawdown was also a little scarier: -15% rather than -11%.

Still, the portfolio still seems solid, and likely one of the best.

### Better than Golden Butterfly?
#### Same assets, different allocation
I tried experimenting with variations on the equal-parts 20% allocation, 
trying all possible ways to combine the five assets, in 0.1% increments.

Somewhat incredibly, NONE of the variations could perform as well as or better than the 
standard Golden Butterfly in ALL of the ten metrics.

The variations could only perform better in one or more metrics, at the expense of other metrics.

The Golden Butterfly is amazingly robust, and tough to beat! 

### Any other assets?
Is there any combination of assets that can perform as well as or better than Golden Butterfly
in ALL of the given metrics?

The Simba spreadsheet has a wealth of other assets, we can try it out!

I was able to evaluate over 4 billion portfolios (all combinations of up to 9 assets!).
Out of that, 0.2% of them were actually as good or better than the Golden Butterfly
portfolio in all of the ten metrics.

That is over **8 million portfolios** that are ""on paper"" better than Golden Butterfly!

Now:
- How to sort through them and find one we would really like better?
- Can we refine the portfolios even further by tweaking their allocation percentages
(they were all simply equally-weighted, 1/N portfolios).

To be determined...

## Followup
See: [2022-08 New Portfolio](notes/2022-08_new_portfolio.md)


",2,2,1,0,investment-portfolio,"[backtesting, investment, investment-analysis, investment-portfolio, portfolio, portfolio-construction]",0.0
72,prakhar21,Investment-Risk-Return,,https://github.com/prakhar21/Investment-Risk-Return,https://api.github.com/repos/Investment-Risk-Return/prakhar21,Sharpe and Sortino Ratios for multiple stocks,"# Investment Risk-Return Analysis

<p align=""center"">
  <img src=""https://github.com/prakhar21/Investment-Risk-Return/blob/master/investment.png"" width=""450"" height=""300"" title=""Investment Featured Image"">
</p>

### Setup
```
>> pip install numpy
>> pip install pandas
>> pip install yfinance
>> pip install flask_cors
>> pip install Flask
```

### Steps to Run
1. Clone the repository - __git clone https://github.com/prakhar21/Investment-Risk-Return.git__
2. Run the server - __python app.py__
3. Open __index.html__ in browser

### APIs
1. __app.py__ exposes just 1 endpoint (__/getmetrics__)

### Demo
<p align=""center"">
  <img src=""https://github.com/prakhar21/Investment-Risk-Return/blob/master/sharpe_sortino.gif"" width=""650"" height=""460"" title=""Investment Featured Image"">
</p>

_P.S. Currently there is no database connectivity. Incase, you need to store the values, Feel free to extend it._

I have also written a detailed blog on both the concepts. You can read @ [https://prakhartechviz.blogspot.com/2020/04/sharpe-and-sortino-investment-goodness.html](https://prakhartechviz.blogspot.com/b/post-preview?token=APq4FmC8vYrLa5aUThdSCTXm-KqVBeDx1gmGfzLetoEQhyi1KtNO-10S4lI-hMINcPrAwNA2oac-BVi_yjTsdHFx3a4YmL7H-Si2rB_yDWe01QZ-dhjuawUieay53SQQ6bKrigeNf8o7&postId=5704735210166361742&type=POST)

",2,2,4,0,investment-portfolio,"[algorithmic, investment-analysis, investment-portfolio, risk-assessment, trading, trading-algorithms]",0.0
73,sah4ez,slack_portfolio,,https://github.com/sah4ez/slack_portfolio,https://api.github.com/repos/slack_portfolio/sah4ez,Slack-bot for management investment portfolio,"## pyenv

For local development install [pyenv](https://github.com/pyenv/pyenv-installer)

Create virtual env:
```bash
pyenv viratul 3.8.8 portfolio
pyenv activate portfolio
```

And install requirements:
```bash
pip install -r ./requirements.txt
```

Or build docker:
```
make build
```

## System environment

Local run:
```
env TOKEN_BOT=<TELEGRAM_TOKEN_BOT> python main.py
```

or Docker:
```
make run TOKEN_BOT=<TELEGRAM_TOKEN_BOT>
```
",2,2,2,13,investment-portfolio,"[investment-portfolio, moex, python3, slack-bot, yahoo-finance-api]",0.0
74,0xeth-drc-888,DOUBLE-EXPONENTIAL-MOVING-AVERAGE-DEMA-AVERAGE-TRUE-RANGE-ATR-updated-v.1.1.2-alpha4,,https://github.com/0xeth-drc-888/DOUBLE-EXPONENTIAL-MOVING-AVERAGE-DEMA-AVERAGE-TRUE-RANGE-ATR-updated-v.1.1.2-alpha4,https://api.github.com/repos/DOUBLE-EXPONENTIAL-MOVING-AVERAGE-DEMA-AVERAGE-TRUE-RANGE-ATR-updated-v.1.1.2-alpha4/0xeth-drc-888,Double Exponential Moving Average for analysis based on Average True Range indicators ,"# DOUBLE-EXPONENTIAL-MOVING-AVERAGE-DEMA-AVERAGE-TRUE-RANGE-ATR-updated-V.1.1.2

A Double Exponential Moving Average ( DEMA ) with three sets of channel lines each one Average True Range (ATR) apart, above and below the DEMA .

Similar to my ""ATR Channels"" indicator, but using a DEMA instead of an EMA for the base. In addition, this indicator also plots a fast DEMA as well as a fill between the two. Fully customizable, you can toggle both DEMAs, the fill, and each set of ATR Channels.

ATR channel idea from Kerry Lovvorn as mentioned in Elder's ""New Trading for a Living"", page 93: ""Kerry Lovvorn likes to plot 3 sets of lines around a moving average: at one, two, and three ATRs above and below an EMA . These can be used for setting up entry points and stops, as well as profit targets.""
",2,2,1,0,investment-portfolio,"[atr, atr-channel, ema, fill, investment-portfolio, php7, python3, range, technical-analysis, tensorflow2, trading-algorithms]",0.0
75,RobMcZag,SPYTM-data-collector,,https://github.com/RobMcZag/SPYTM-data-collector,https://api.github.com/repos/SPYTM-data-collector/RobMcZag,Collects stock data through REST APIs and stores it in Postgres with JPA.,"[![Build Status](https://travis-ci.com/RobMcZag/SPYTM-data-collector.svg?branch=master)](https://travis-ci.com/RobMcZag/SPYTM-data-collector)
[![GPL3 License](https://img.shields.io/badge/license-GPL3-green)](LICENSE)

# SPYTM-data-collector

This is a small Spring Boot application I wrote to somehow organise the collection of data for my investment activities.  
For the courious... SPYTM stands for SPY Trading Model.

The basic idea of this application is to collect stock data from different available 
data sources and store it for further use.

The initial intended uses of the downloaded data are:

* to power my investment reporting

* to train a model, written in Python, to predict future SPY prices 
  from other price time-series, using Linear Regression.  
  One very good relationships exists between the daily closing / half-day price 
  of Asian / European markets and the US markets as represented by SPY.  
  The basic idea is to exploit the fact that the Asian / European markets provide their 
  closing / half-day time early enough to bet on the daily outcome of the US markets.  
  The python regression model will be available in another repo. ATM it is still unpublished. 

## Main featues
* The data is collected through API calls, receiving JSON encoded data.
* The data can be downloaded incrementally, adding what is new or changed.
* The data model of the application is independent of each provider's format.
  * For each provider it is nice and easy to use a specific data model.   
  This supports easy download and deserialisation of data as sent over the wire.
  * Each provider's downloader keeps its own model private.   
  It delivers data to the rest of the app in the app's canonical data model.

### Future ideas
* data pipeline to deliver downloaded data to a cloud data lake
* export data to CSV in YahooFinance format
* minimal web interface to explore the downloaded content 
* rest API to access data from the local DB
* reporting and data sharing on top of the cloud data lake
 

## Unsorted techies things :)
* Build is done with Gradle and checked upon push and merge with Travis CI.  
* Data is stored in a configurable DB - in memory H2 by default;  
Postgress is already configured, just enable the `test_pg` profile.  
* The Travis build script `.travis.yml` includes commands to create the PG Database and user.    
You can use those commands to create your local DB and app user.
* Database evolution is managed through Flyway migrations (SQL or Java)  
Get more in the [Flyway migrations README](src/main/resources/db/migration/README.md)
* Tests are nicely organised :)
  * Unit tests are separated from Integration tests and each set can be run independently.  
    The default if you just run the `test` task is to only run Unit tests.  
    If you run the `check` task, like when building, you get all tests run :)
  * both Unit and Integration tests are run upon build and in CI,  
    as they are part of the `check` task. 
  * a test source-set library holds static test data and helpers to make available 
    that data to all the tests.  

# Data providers
At the moment there is code to download data from two providers:

* YAHOO FINANCE - Using the undocumented V8 API from yahoo site,
  that covers most stocks in the world. 
  No codes, no limits. For now.
  
* ALPHA VANTAGE - A free to use provider with mostly US data.
  The API requires obtaining and using a free API code;
  the free API is limited to 5 requests per minute.

Yahoo Finance is now the default provider, given the wider coverage, 
absence of limits and API codes.
The first version used Alpha Vantage as provider, and the general model
of how the metadata is saved still reflects that.
 
### YAHOO FINANCE Provider
It uses the V8 version of Yahoo data API that is undocumented, but stable.
It does not attempt to fake any cookie and or crumb.

By default, we download the quotes with adjusted close, dividends and splits.
Yahoo quotes provide:

* `open`, `close`, `high`, `low` and `volume` values.  
  They are always adjusted for SPLITS
  
* `adjusted close` values are adjusted both for SPLITS and DIVIDENDS

* `dividend` values.  
  Dividend value is reported on ex-div date, zero in other dates.
  Dividend values are adjusted for SPLITS, like quotes.

* `split` ratios.  
  Split ratio is reported on ex-split date, one in other dates.

### ALPHA VANTAGE Provider
It uses Alpha Vantage API that is well documented.
The only drawback is that the available data is more or less the US stocks
plus a few other from German or Uk exchanges, but qith much inferior data quality.

By default, we download the quotes with adjusted close, dividends and splits.
Alpha Vantage quotes provide:

* `open`, `close`, `high`, `low` and `volume` values.  
  They are NOT adjusted for SPLITS, they are the historical quotes.

* `adjusted close` values are adjusted both for SPLITS and DIVIDENDS

* `dividend` values.  
  Dividend value is reported on ex-div date, zero in other dates.
  Dividend values are NOT adjusted for SPLITS, like quotes.

* `split` ratios.  
  Split ratio is reported on ex-split date, one in other dates.

# Running the project
If you want to use a real DB instead of the embedded H2, 
just have the server running and the connection configured in spring boot.
For more see below [Setting up a real DB](#DBsetup).

* to test  - run unit OR integration tests OR both  
`./gradlew test` | `./gradlew integrationTest` | `./gradlew check`   

* to build `./gradlew build`
* to run the project `./gradlew bootRun`
  * to access H2 console (while app is running) go to 
  `http://localhost:8080/h2-console`


# <A name=""DBsetup"" id=""DBsetup""></A> Setting up a real DB 
Below are the steps to set-up a Postgress DB instead of using the default in-memory H2.

## Postgres Setup
* Install Postgres where you want to run it and start it with something like  
`pg_ctl -D /usr/local/var/postgres start`

* login to Postgres from your command line `sql postgres`  
This usually is enough for how PG comes preconfigured
  
* Create user to manage the DB  
`CREATE USER <user name>> PASSWORD '<pw>>';`

* Creat the DB  
`CREATE DATABASE <db name>;`

* Assign ownership of DB to user  
`ALTER DATABASE <db name>> OWNER TO <user name>>;`

* Edit the PG access file `pg_hba.conf` to stop trusting everyone! :)  
The file should be in `/usr/local/var/postgres/`

## Spring Setup
After you have setup your DB, created a DB and an user for the app, 
you just have to tell those things to your Spring app.
  
* Add PG drivers in the dependencies config in `build.gradle` (as I use Gradle)  
`runtimeOnly 'org.postgresql:postgresql'` will do the trick
* Spring config file:
    * Create Spring profiles for `test` and `prod` with `spring.profiles` property;
    * Select which one to activate with `spring.profiles.active` property;
    * Configure Spring datasource and JPA properties for each profile, like
```
spring:
   datasource:
     url: jdbc:postgresql://localhost:5432/spytm_test_db
     username: spytm_test_user
     password: 1234-test-PW
```
* Add `@EnableTransactionManagement` on the main Application class to use transactions.
",1,1,2,3,investment-portfolio,"[data, investing, investment-portfolio, stock-market]",0.0
76,patchan,potatofy,,https://github.com/patchan/potatofy,https://api.github.com/repos/potatofy/patchan,Questrade investment portfolio rebalancing calculator,"# potatofy

Potatofy is a Questrade integrated investment desktop GUI for easy portfolio rebalancing in the passive investing spirit of the [Canadian Couch Potato](https://canadiancouchpotato.com/). With a few simple clicks, you can easily calculate how many shares to purchase or sell to achieve a target asset allocation. We have support for both 'buy/sell' rebalancing and 'buy only' rebalancing.

Potatofy requires authorized API access to your Questrade account, which grants the application the ability to retrieve balances, positions, orders, and executions and make requests for market data. Potatofy currently only supports login through two-factor authentication (which you should be using anyway!).

## Download 
[![GitHub release (latest by date)](https://img.shields.io/github/v/release/patchan/potatofy)](https://github.com/patchan/potatofy/releases/latest)

The latest version of potatofy is available for download [here](https://github.com/patchan/potatofy/releases/latest). Download the appropriate file for your operating system (``potatofy_win.zip`` for Windows, or ``potatofy_mac.app.zip`` for MacOS). To run the program, unzip the downloaded file and open the potatofy shortcut (on Windows) or open ``potatofy_mac.app`` (on MacOS).

## Build from source

To build potatofy from source, run `pyinstaller potatofy_mac.spec` if you are on MacOS or `pyinstaller potatofy_win.spec` on Windows. Once complete, potatofy can be found in the `/dist` folder. ",1,1,1,3,investment-portfolio,"[finance, investing, investment-portfolio, questrade, stocks]",0.0
77,jodog0412,us-stocks-investment-assistant,,https://github.com/jodog0412/us-stocks-investment-assistant,https://api.github.com/repos/us-stocks-investment-assistant/jodog0412,Investment assistance package.,"# USIA(US STOCK INVESTMENT ASSISTANT)
## Description
Python package for investment assistance.  

## Reference
* __`yahooquery`__ API for yahoo finance  https://yahooquery.dpguthrie.com/
* __`financewebreader`__ https://github.com/financedata-org/FinanceDataReader

## Architecture
* main.py
* usia
    * portfolio.py
    * ticker_serach.py
    * financial_statement.py
* data
    * nyse_tickers: tickers in NYSE index
    * nasdaq_tickers: tickers in NASDAQ index
    * sector_name.txt: name of sectors include stocks
## Functions
### 1. Analyze portfolio   
__Visualize__ your portfolio.  
And __calculate average yield__ of your portfolio's stocks.
* Code
    ```python
    import usia
    start='2023-01-01'
    end='2023-06-20'
      
    """"""1. Create portfolio from csv""""""
    path=""data\public.csv""
    portfoilo=usia.portfolio(path,start,end)
    portfoilo.implement()
    ```
* Result    
    <img src=""https://user-images.githubusercontent.com/83653380/219939860-be0563d7-7ba3-4ec7-b6c8-f3c0191ef036.png"" width=""60%"" height=""45%"" title=""portfolio visualization""></img>  
  | Name | Profit Pencentage(%) |
  | ---- | -------------------- |
  | AAPL |    52.88             |
  | F    |    24.96             |
  | XOM  |    16.06             |
  | AMZN |    10.99             |
  | GOOG |    5.80              |
  | KO   |   -1.91              |
  | DIS  |   -10.51             |


### 2. Search tickers    
__Search tickers__ in NYSE, NASDAQ index.   
And __calculate yield__ of searched stocks.
* Code    
    ```python
    searched=usia.tickerSearch('NASDAQ','헬스케어 장비 및 용품').download(start,end,filter_percent=0.1)
    print(searched)
    ```
* Result    
  | Ticker | Profit               |
  | ------ | -------------------- |
  | NPCE   |    2.26              |
  | BSGM   |    2.02              |
  | APYX   |    1.76              |
  | NNOX   |    1.70              |
  | NSPR   |    1.59              |
  ...
### 3. Compare financials  
Compare Key financials.  
I selected `PER`, `Forward PER`, `PBR`, `marketcap`, `freecashflow`, `PEGR`, `ROE`, `currentRatio` as default financial indicators.
* Code
    ```python
    sample=['AAPL','F','DIS','AMZN','KO','GOOG','XOM']
    result=usia.financialCompare(sample).keyFinancialTable()
    print(result)
    ```
* Result
  | Ticker |  PER   |  FPER  | PBR |  marketcap   | freecashflow | PEGR | ROE  | cRatio |
  | ------ | ------ | ------ | --- | ------------ | ------------ | ---- | ---- | ------ |
  | AMZN   | 299.48 |  71.43 | NaN | 1.290547e+12 | 9.030625e+09 | 4.47 | 0.03 |  0.92  |
  | AAPL   | 31.36  |  28.01 | NaN | 2.909967e+12 | 8.379662e+10 | 2.54 | 1.46 |  0.94  |
  | KO     | 26.99  |  23.58 | NaN | 2.649237e+11 | 9.134250e+09 | 3.34 | 0.37 |  1.15  |
  | GOOG   | 27.52  |  23.09 | NaN | 1.567406e+12 | 5.586262e+10 | 1.54 | 0.23 |  2.35  |
  | DIS    | 39.89  |  15.75 | NaN | 1.640006e+11 | 5.236875e+09 | 0.74 | 0.04 |  1.01  |
  | F      | 19.48  |  8.57  | NaN | 5.689095e+10 | 2.655875e+09 | 1.01 | 0.06 |  1.20  |


",1,1,1,0,investment-portfolio,"[investment, investment-analysis, investment-portfolio, stock-analysis, stock-price-prediction, time-series, time-series-forecasting, yahooquery]",0.0
78,Qishna,nsu-investments-2022,,https://github.com/Qishna/nsu-investments-2022,https://api.github.com/repos/nsu-investments-2022/Qishna,Homeworks from NSU Introduction to Finance and Fundamentals of Investments сourse,"# Introduction to Finance and Fundamentals of Investments
Homeworks from NSU Introduction to Finance and Fundamentals of Investments сourse

### Course map

* [hw-01](hw-01) – Wiener process of a share price and analysis
* [hw-02](hw-02) – Share price analysis and optimal portfolio
* [hw-03](hw-03) – Efficient portfolios and alternative portfolio strategies
",1,1,1,0,investment-portfolio,"[investment-portfolio, investment-strategies]",0.0
79,EmmaMuhleman1,emmamuhlemantest1.github.io,,https://github.com/EmmaMuhleman1/emmamuhlemantest1.github.io,https://api.github.com/repos/emmamuhlemantest1.github.io/EmmaMuhleman1,,"
```markdown
# Welcome to Emma Muhleman's Github Blog site, where I will include, for select projects

- Links to source code files
- Blog entry detailing the data exploration through to modeling according to CRISP-DM

[https://EmmaMuhleman.github.io](https://github.com/EmmaMuhleman1/emmamuhleman.github.io)
```


",1,1,1,0,investment-portfolio,"[data, ensemble-learning, ensemble-machine-learning, ensemble-model, ensemble-prediction, ensemble-stacking, investing, investment, investment-analysis, investment-portfolio, investment-strategies, investments, investors, munging, quant, quantitative-analysis, quantitative-finance, quantitative-trading, spark-ml, wrangling]",0.0
80,TonyYHLau,Optimize-Portfolio-Weights,,https://github.com/TonyYHLau/Optimize-Portfolio-Weights,https://api.github.com/repos/Optimize-Portfolio-Weights/TonyYHLau,Calculate the efficient frontier and optimize portfolio weights,"# Calculate the efficient frontier and optimize portfolio weights
",1,1,0,0,investment-portfolio,[investment-portfolio],0.0
81,os12345678,Portfolio-Optimisation,,https://github.com/os12345678/Portfolio-Optimisation,https://api.github.com/repos/Portfolio-Optimisation/os12345678,"A linear programming project, maximising asset allocation in an investment portfolio subject to various risk constraints.","# Portfolio-Optimisation
A linear programming project, maximising asset allocation in an investment portfolio subject to various risk constraints.  
",1,1,1,0,investment-portfolio,"[algorithms, investment-portfolio, lp]",0.0
82,astonizer,investment-planner,,https://github.com/astonizer/investment-planner,https://api.github.com/repos/investment-planner/astonizer,Student guide for better investments.,"# Investment Planner

Web app to help students in building their investment portfolio.<br>
Invest, sell, analyse and stay up-to-date with the latest market.<br>
All featured in this really simple user interface<br>

[Live Website](https://investmentplanner.herokuapp.com/)

### Tech Used

Node.js
Express.js
Bootstrap4
EJS templating

#### More Info

[CEV](https://github.com/cutting-edge-visionaries) mini project inspired by ![Student Investment Portfolio](https://github.com/shivanshsinghal107/Investment-Portfolio)",1,1,1,0,investment-portfolio,"[bootstrap, cookies, ejs, expressjs, finance, investment-portfolio, jwt-authentication, mongodb, mongoose, nodejs, relational-mongodb, yahoo-stock-prices, yfinance-api]",0.0
83,EmmaMuhleman1,em,,https://github.com/EmmaMuhleman1/em,https://api.github.com/repos/em/EmmaMuhleman1,Repository for Emma Muhleman's git pages site,"## Welcome to Emma Muhleman's blog, coming soon
",1,1,1,0,investment-portfolio,"[blog, blogger, emma-muhleman, investing, investment, investment-analysis, investment-management, investment-portfolio, investment-strategies, investments, investors]",0.0
84,YangLei2586,Python_Investment_Portfolio_Construction,,https://github.com/YangLei2586/Python_Investment_Portfolio_Construction,https://api.github.com/repos/Python_Investment_Portfolio_Construction/YangLei2586,Exploring the Efficient Frontier for Constructing a investment portfolio with best return and acceptable risks based on Markowitz Portfolio Theory using Python 3,"# Python_Investment_Portfolio_Construction
Exploring and Obtaining the Efficient Frontier for Constructing a investment portfolio with best return and acceptable risks based on Markowitz Portfolio Theory using Python 3
",1,1,2,0,investment-portfolio,"[investment-analysis, investment-portfolio, investment-strategies, markowitz-portfolio, python3]",0.0
85,broper2,defi-tracker,,https://github.com/broper2/defi-tracker,https://api.github.com/repos/defi-tracker/broper2,DeFi blockchain investment app,"# defi-tracker
Django application to track DeFi investments, all you need is the public keys!

Supported Functionalities:
  - User accounts for personalized validators/wallets tracking
  - Interactive performance graph for Solana validator(s) (useful for staking investment decisions)
    - To track a validator performance, enter the vote account public key and a personalized display name
    - Validator performance metric is derived from Solana economic documentation, directly related to APY %
        - A ""network-average"" validator with 0% commission will yield performance metric of 1.0
        - The higher the performance metric, the better yield on tokens staked to that validator!
  - Ethereum and Solana account value (token and USD conversion) and sum functionality for entire tracked portfolio
    - To track a wallet's value, enter the wallet public key (or ENS domain for Ethereum) and a personalized display name

In Development:
 - Remove validator display name entry and default to registered validator node name

To check it out in action, see below:
  - Barring any maintenance, DeFi Tracker is deployed to https://intense-brook-56676.herokuapp.com/
  - Create a new account, then track validators and wallets of interest to you, or you can always use the sample keys below:
    - Solana validator: rep1xGEJzUiQCQgnYjNn76mFRpiPaZaKRwc13wm8mNr
    - Solana wallet: 4DfKXjLB5f2zJJ65pxt7zjyfHjR92zDFi6nEy2DFmF95
    - Ethereum wallet: 0x71C7656EC7ab88b098defB751B7401B5f6d8976F
  - Enjoy!
",1,1,1,0,investment-portfolio,"[cryptocurrency, django, investment-analysis, investment-portfolio, python]",0.0
86,vladislavpyatnitskiy,Portfolio_Analysis,,https://github.com/vladislavpyatnitskiy/Portfolio_Analysis,https://api.github.com/repos/Portfolio_Analysis/vladislavpyatnitskiy,Here you see how to track your portfolio the right way,"# Portfolio Analysis

One of the main issues of being investor is how to track your securities. 

Some investors use apps from their brokers, others prefer third party sites.

The truth is all of them are terrible. They do not give sufficient info about portfolio, but just weights and basic graph. The ones that bring some insights to your portoflio either cost a lot or technically complicated and visually disgusting. 

I think the reason is people who develop these kinds of systems are the ones who do not use them in a regular manner and the ones who actually use them experience lack of time or programming abilities to track their portfolio and positions on their own.  

However, I personally think that there should not be the trade off between convenience and capabilities. The process of portfolio analysis should be straightforward where investors are provided with the necessary information for making decisions. 

Having worked in trading and systems analytics, I came to idea to create if not an app but script to facilitate portfolio tracking. Current R and Python packages are not sufficient enough to obtain info and analysis, but they are powerful enough to build the right package for investing purposes.

Week by week, this repository will be filled with more advanced script.

Current section scripts require quantmod, timeSeries, ggplot2 and ggrepel packages.

Asset Weights
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Portfolio%20Pie.jpeg?raw=true)

Portfolio Performance Tracking
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Portfolio%20Performance.jpeg?raw=true)

Stacked Bar Plot
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Plots/Stacked%20Bar%20Plot.jpeg?raw=true)

Portfolio's Correlation Heatmap
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Portfolio%20Correlations.jpeg?raw=true)

Plot Portfolio with Benchmarks / Indices to visually compare performances
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Plots/Comparison%20Plot.jpeg?raw=true)

Scatter Plot for Securities
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Plots/Scatter%20Plot.jpeg?raw=true)

Treemap for Securities
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Plots/Treemap%20Plot.jpeg?raw=true)

Barplot for Securities
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Plots/Portfolio%20Barplot.jpeg?raw=true)

Portfolio Returns QQ Plot
![](https://github.com/vladislavpyatnitskiy/Portfolio_Analysis/blob/main/Plots/Portfolio%20QQ%20Plot.jpeg?raw=true)
",1,1,1,1,investment-portfolio,"[investment, investment-analysis, investment-portfolio, plotting, portfolio-analysis, portfolio-analytics, portfolio-management, portfolio-tracker, visualization]",0.0
87,lanre00,RoboAdvisor,,https://github.com/lanre00/RoboAdvisor,https://api.github.com/repos/RoboAdvisor/lanre00,Robo Advisor on investing for retirement with investment weights remixed between SPY and AGG,"# The Power of the Cloud and Unsupervised Learning


## Robo Advisor for Retirement Plans

![Robot](Images/robot.jpg)

*Photo by [Alex Knight](https://www.pexels.com/@alex-knight-1272316?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) from [Pexels](https://www.pexels.com/photo/high-angle-photo-of-robot-2599244/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) | [Free License](https://www.pexels.com/photo-license/)*

### Background

You were hired as a digital transformation consultant by one of the most prominent retirement plan providers in the country; they want to increase their client portfolio, especially by engaging young people. Since machine learning and NLP are disrupting finance to improve customer experience, you decide to create a robo advisor that could be used by customers or potential new customers to get investment portfolio recommendations for retirement.

In this homework assignment, you will combine your new Amazon Web Services skills with your already mastered Python superpowers, to create a bot that will recommend an investment portfolio for a retirement plan.

You are asked to accomplish the following main tasks:

1. **[Initial Robo Advisor Configuration:](#Initial-Robo-Advisor-Configuration)** Define an Amazon Lex bot with a single intent that establishes a conversation about the requirements to suggest an investment portfolio for retirement.

2. **[Build and Test the Robo Advisor](#Build-and-Test-the-Robo-Advisor):** Make sure that your bot is working and responding accurately along with the conversation with the user, by building and testing it.

3. **[Enhance the Robo Advisor with an Amazon Lambda Function:](#Enhance-the-Robo-Advisor-with-an-Amazon-Lambda-Function)** Create an Amazon Lambda function that validates the user's input and returns the investment portfolio recommendation. This task includes testing the Amazon Lambda function and making the integration with the bot.

---

### Files

* [lambda_function.py](Starter_Files/lambda_function.py)
* [correct_dialog.txt](Test_Cases/correct_dialog.txt)
* [age_error.txt](Test_Cases/age_error.txt)
* [incorrect_amount_error.txt](Test_Cases/incorrect_amount_error.txt)
* [negative_age_error.txt](Test_Cases/negative_age_error.txt)

---

### Instructions

#### Initial Robo Advisor Configuration

In this section, you will create the `RoboAdvisor` bot and add an intent with its corresponding slots.

Sign in into your AWS Management Console and [create a new custom Amazon Lex bot](https://console.aws.amazon.com/lex/home). Use the following parameters:

* **Bot name:** RoboAdvisor
* **Output voice**: Salli
* **Session timeout:** 5 minutes
* **Sentiment analysis:** No
* **COPPA**: No
* **Advanced options**: No
* *Leave default values for all other options.*

Create the `RecommendPortfolio` intent, and configure some sample utterances as follows (you can add more utterances as you wish):

* I want to save money for my retirement
* I'm ​`{age}​` and I would like to invest for my retirement
* I'm `​{age}​` and I want to invest for my retirement
* I want the best option to invest for my retirement
* I'm worried about my retirement
* I want to invest for my retirement
* I would like to invest for my retirement

This bot will use four slots, three using built-in types and one custom slot named `riskLevel`. Define the three initial slots as follows:


| Name             | Slot Type            | Prompt                                                                    |
| ---------------- | -------------------- | ------------------------------------------------------------------------- |
| firstName        | AMAZON.US_FIRST_NAME | Thank you for trusting me to help, could you please give me your name? |
| age              | AMAZON.NUMBER        | How old are you?                                                          |
| investmentAmount | AMAZON.NUMBER        | How much do you want to invest?                                           |

The `riskLevel` custom slot will be used to retrieve the risk level the user is willing to take on the investment portfolio. Create this custom slot as follows:

* Select the `+` icon next to 'Slot Types' in the 'Editor' on the left side of the screen.
* Choose `create custom slot` from the resulting display window.
* For **Slot type name**, type: riskLevel
* Select the radial dial button next to **Restrict to Slot values and synonyms**, then fill in the appropriate values and synonums. *Example*: Low, Minimal; High, Maximum.
* Click `Add slot to intent` when finished.

To format the response cards for the intent, click on the gear icon next to the intent as seen in the image below:

![gear_icon](Images/gear_icon.png)

Next, input the following data in the resulting display window:

* **Prompt:** What level of investment risk would you like to take?
* **Maximum number of retries:** 2
* **Prompt response cards:** 4

Configure the response cards for the `riskLevel` slot as is shown bellow:

| Card 1                              | Card 2                              |
| ----------------------------------- | ----------------------------------- |
| ![Card 1 sample](Images/card1.png)  | ![Card 2 sample](Images/card2.png)  |

| Card 3                              | Card 4                              |
| ----------------------------------- | ----------------------------------- |
| ![Card 3 sample](Images/card3.png)  | ![Card 4 sample](Images/card4.png)  |

**Note:** You can download free icons from [this website](https://www.iconfinder.com/) or you can use the icons provided in the [`Icons` directory](Icons/).

Move to the *Confirmation Prompt* section, and set the following messages:

* **Confirm:** Thanks, now I will look for the best investment portfolio for you.
* **Cancel:** I will be pleased to assist you in the future.

Leave the error handling configuration for the `RecommendPortfolio` bot with the default values.

![Error handling configuration](Images/error_handling.png)

#### Build and Test the Robo Advisor

In this section, you will test your Robo Advisor. To build your bot, click on the `Build` button in the upper right hand corner. Once the build is complete, test it in the chatbot window. You should see a conversation like the one below.

![Robo Advisor test](Images/bot-test-no-lambda.gif)

#### Enhance the Robo Advisor with an Amazon Lambda Function

In this section, you will create an Amazon Lambda function that will validate the data provided by the user on the Robo Advisor. Start by creating a new lambda function from scratch and name it `recommendPortfolio`. Select Python 3.7 as runtime.

In the Lambda function, start by deleting the AWS generated default lines of code, then paste in the starter code provided in [lambda_function.py](Starter_Files/lambda_function.py) and complete the `recommend_portfolio()` function by following these guidelines:

##### User Input Validation

* The `age` should be greater than zero and less than 65.
* the `investment_amount` should be equal to or greater than 5000.

##### Investment Portfolio Recommendation

Once the intent is fulfilled, the bot should response with an investment recommendation based on the selected risk level as follows:

* **none:** ""100% bonds (AGG), 0% equities (SPY)""
* **very low:** ""80% bonds (AGG), 20% equities (SPY)""
* **low:** ""60% bonds (AGG), 40% equities (SPY)""
* **medium:** ""40% bonds (AGG), 60% equities (SPY)""
* **high:** ""20% bonds (AGG), 80% equities (SPY)""
* **very high:** ""0% bonds (AGG), 100% equities (SPY)""

Be creative while coding your solution, you can have all the code on the `recommend_portfolio()` function, or you can split the functionality across different functions, put your Python coding skills in action!

Once you finish coding your lambda function, test it using the [sample test cases](Test_Cases/) provided for this homework.

After successfully testing your code, open the Amazon Lex Console and navigate to the `RecommendPortfolio` bot configuration, integrate your new lambda function by selecting it in the _Lambda initialization and validation_ and _Fulfillment_ sections. Build your bot, and you should have a conversation as follows.

![Robo Advisor test with Lambda](Images/bot-test-with-lambda.gif)

### Submission

You should create a brand new repository in GitHub and upload the following files to your repo.

* A python script with your final lambda function.

* From the Amazon Lex Console, export your bot, intent, and slot using `Amazon Lex` as the target platform, and upload the ZIP files to your repo.

* Create a short video or animated GIF showing a demo of your Robo Advisor in action from the test window. Upload the video or animated GIF file to your repo.

Once you have uploaded all the files into the repo, post a link to your homework's repository in BootCamp Spot.

### Hints

* Make sure your intent and slot names are named correctly in your Lambda code.  The names in Lex should match the names in Lambda exactly:

![Lex_Names1](Images/Lex_names1.png)
![Lex_Names2](Images/Lex_names2.png)

* You may have to refresh the Lex intent page after creating the custom slot and the lambda function in order to see them in the options.

* If you are using a Mac, you can create a screen-recording using the built-in QuickTime player. Follow [this link](https://support.apple.com/en-us/HT208721#quicktime) to learn more.

* If you are using Windows 10, you can create a screen-recording using the built-in Xbox Game Bar. Follow [this link](https://beta.support.xbox.com/help/friends-social-activity/share-socialize/record-game-clips-game-bar-windows-10) to learn more.

---

© 2019 Trilogy Education Services, a 2U, Inc. brand. All Rights Reserved.
",1,1,1,0,investment-portfolio,"[amazon-lex-bot, investment-portfolio, lambda, retirement, robo-advisor]",0.0
88,zukunft,tream,,https://github.com/zukunft/tream,https://api.github.com/repos/tream/zukunft,A portfolio management system ,"# tream
A multi client portfolio management system for external asset manager

Install
-------

1. Basis is a standard LAMP server (https://wiki.debian.org/LaMp)
2. Download and install p4a (https://github.com/fballiano/p4a) and allow the www user to write into the upload folder as written in the p4a docu
3. Apply the suggested change of issue 24 (https://github.com/fballiano/p4a/issues/24) of p4a for correct logging of the changes.
4. Download and install pChart (http://www.pchart.net/)
5. Download all TREAM files and save it in the www root folder incl. the path (e.g. /batch in ../www/batch/.. )
6. Create a new sql database with a user called p4a and save the password in /batch/tream_db_adapter.php and /p4a/applications/tream/index.php
7. create the database by executing /sql/tream.sql
8. fill the database with default settings by executing /sql/tream_data.sql
9. start the program with /yourserver/p4a/applications/tream

Folder structure
----------------

/batch - the php code in this folder is used for the backend processing either for scheduled batch jobs or for the gui
/p4a/applications/tream - the folder tream and the files below it should be dropped into the /p4a/applications folder created by p4a
/sql - these sql files are just needed to create the database before the first start

Demo system
-----------

After the installation the system should look similar to this demo setup: https://tream.biz/p4a/applications/tream/
",1,1,5,0,investment-portfolio,"[financial, investment-portfolio]",0.0
89,Houzkin,PortFolion,,https://github.com/Houzkin/PortFolion,https://api.github.com/repos/PortFolion/Houzkin,投資ポートフォリオ管理,"# PortFolion
ポートフォリオの推移を記録・可視化するためのアプリケーションです。
## Discription
中・長期投資を前提としています。株式・投信には対応していますが、信用取引・FXには対応していません。株価情報は[無尽蔵](http://mujinzou.com/)さんから拝借しています。
## Demo
![Graph](https://github.com/Houzkin/PortFolion/blob/images/demo03.gif)  
![Graph](https://github.com/Houzkin/PortFolion/blob/images/demo02.gif)

## Usage
### キャッシュフローの扱い
配当、税金などを外部キャッシュフローとして扱うと辻褄合わせが面倒です。編集ウィンドウから余力の値のみを変更することをおすすめします。  
### 株式分割
分割情報は自動更新されません。編集ウィンドウから分割または併合後の保有数を書き込んでください。

## Download
リリースノートは[こちら](https://github.com/Houzkin/PortFolion/releases)。  
サンプルデータを同封しています。
実際に使い始める場合はサンプルを削除してから使用してください。  
以後アップデートは、自動生成された「今まで書き込んだデータ」フォルダを実行ファイルと同じフォルダにコピペして使ってください。  
![DownloadDirectory](https://github.com/Houzkin/PortFolion/blob/images/SampleDirectory.JPG)

## Author
[@houzkin](https://twitter.com/houzkin)

## License
http://www.apache.org/licenses/LICENSE-2.0

以下のライブラリを使用しています

* MahApps
* LiveCharts
* TreeListView
* Livet
* InteractiveExtensions
* Antlr
* ExpressionEvalutor
* CsvHelper
* 自作ライブラリ
",1,1,2,0,investment-portfolio,"[assets, graph, investment, investment-portfolio, portfolio, stock, transition, transitive-graph]",0.0
90,pujanm,Investo.AI,,https://github.com/pujanm/Investo.AI,https://api.github.com/repos/Investo.AI/pujanm,A WebApp built for CodeShastra 5 - Round 1.,"# INVESTO.AI
We built this WebApp in CodeShastra 5.0 - Round 1.
",1,1,1,20,investment-portfolio,"[deep-learning, investment-portfolio, stock-prediction, web-development]",0.0
91,AN1001,IVCalc,,https://github.com/AN1001/IVCalc,https://api.github.com/repos/IVCalc/AN1001,"Wrapper and Investment platform comparer, Investment insight and analysis, Ranks Platforms and gives lowest cost platform","<img width=""100%"" alt=""Screenshot 2023-08-21 at 17 56 58"" src=""https://github.com/AN1001/IVCalc/assets/81749717/9fca4a9e-294d-4340-8165-4026f22b0fff"">


Wrapper and Investment platform comparer, Investment insight and analysis, Ranks Platforms and gives lowest cost platform. Website : https://ivcalc.pages.dev

IV Calc is a powerful investment platform calculator
Investment can be tricky at time due to high levels of uncertainty alongside other complex factors. One such factor may be choosing the right platform to hold your investments on, as their charges vary greatly and are often confusing. It's impossible to know with certainty how to get the most out of your money, but using tools like IV Calc it is possible to reach an informed decision.
With IV Calc you can not only compare different investment platforms, but also simulate their use in real time. This is effective against 27 different platforms for both funds and shares.

This website includes line graphs using the library chart.js and is built without any other dependencies or frameworks.
IV Calc also supports 4 wrappers (ISA, JISA, GIA/Direct, SIPP), as well as both shares/stocks and funds as seperate componenents


<img width=""100%"" alt=""Screenshot 2023-08-21 at 17 54 45"" src=""https://github.com/AN1001/IVCalc/assets/81749717/47eaa2d4-f8fe-495c-8868-f4be5c663c08"">

<h3>Created by Arnav Nagpure (AN1001)</h3>
",1,1,1,2,investment-portfolio,"[investment, investment-analysis, investment-portfolio, javascript, webdev, website]",0.0
92,PaulAnnekov,portfolio-analysis,,https://github.com/PaulAnnekov/portfolio-analysis,https://api.github.com/repos/portfolio-analysis/PaulAnnekov,Tools to analyse investment portfolio,"# sec_after_tax_growth.py
Shows historical price growth of $X (default: 10000) during a certain period of
years (default: (since inception + 1 year) -> first date of current year) with
dividends reinvestment after taxes and IB brokerage fees.

## Assumptions:
- You specify only full years
- It's US security - stock or ETF
- Broker is IB, registered in US
- Holder is non-us resident, so he pays 10% US state tax from dividends
- Holder has an IB account with fixed commissions for orders, which are $0.005 per share, with $1.00 minimum and 1.0% maximum
- Holder has less than $100000 in equities on brokerage account, so he should pay $10 monthly fee (minus commissions when securities bought)
- Holder buys new securities when he has enough money on his account
- The only source of income to his account is dividends
- Holder can't buy part of security, only full ones

## What else holder should take into account:
- Bank transfer fees
- Brokerage withdrawal fees
- Local dividend taxes
- Local capital gains taxes
- Inflation
",1,1,2,0,investment-portfolio,"[etfs, investment, investment-analysis, investment-portfolio, stocks]",0.0
93,markqiu,jinniuai_wealth_safe_world,,https://github.com/markqiu/jinniuai_wealth_safe_world,https://api.github.com/repos/jinniuai_wealth_safe_world/markqiu,Investment log on jinniuai.com,"# 投资日志（Investment Log)
详情: https://wealth_safe_world.markqiu.cn/
",1,1,1,0,investment-portfolio,"[investment, investment-analysis, investment-portfolio]",0.0
94,6ameDev,pholio,,https://github.com/6ameDev/pholio,https://api.github.com/repos/pholio/6ameDev,Aggregate all your Investments data from different platforms (browser extension),"<p align=""center"">
  <a href=""#""><img width=""120"" src=""dist/images/icon-128.png"" alt=""Pholio logo""></a>
</p>
<h1 align=""center"" style=""margin-top: 0px;"">Pholio</h1>

<p align=""center"" >Aggregate all your Investments data from different platforms (browser extension)</p>

<div align=""center"" >

[![Tests](https://github.com/6ameDev/pholio/actions/workflows/tests.yml/badge.svg)](https://github.com/6ameDev/pholio/actions/workflows/tests.yml)
[![Build](https://github.com/6ameDev/pholio/actions/workflows/build.yml/badge.svg)](https://github.com/6ameDev/pholio/actions/workflows/build.yml)

</div>

<br>

<div align=""center"">

  [<img src=""assets/images/pholio-trailer-preview.jpg"" width=""600"" alt=""Preview of the Pholio trailer"">](https://www.youtube.com/watch?v=X-gKJKSWEvw)

</div>

<br>

## Roadmap 

### v1.0.0

Investment Platforms supported for Export
- [Kuvera](https://kuvera.in/)
- [Zerodha](https://console.zerodha.com/)
- [Vested](https://app.vestedfinance.com/)

Portfolio Management Tools supported for Import
- [Ghostfolio](https://ghostfol.io/) ([_github_](https://github.com/ghostfolio/ghostfolio))

## Usage

### Installing Extension
- [Wiki guide](https://github.com/6ameDev/pholio/wiki/Chromium-unpacked-installation)

### Opening Extension
- Go to any tab in the browser
- Open Inspect (DevTools window)
- Go to the tab in Inspect/DevTools window with the name Pholio
",1,1,1,15,investment-portfolio,"[chrome-extension, ghostfolio, investment-portfolio, investments, kuvera, vested, zerodha]",0.0
95,febrinadevitas,Constant-Correlation-Model-for-Optimal-Portfolio-Formation-and-Expected-Shortfall-Risk-Measurement,,https://github.com/febrinadevitas/Constant-Correlation-Model-for-Optimal-Portfolio-Formation-and-Expected-Shortfall-Risk-Measurement,https://api.github.com/repos/Constant-Correlation-Model-for-Optimal-Portfolio-Formation-and-Expected-Shortfall-Risk-Measurement/febrinadevitas,The purpose of investments is to obtain a profit. One type of investments that can be done is stock investment. Investors can diversify the stocks to reduce the risk of an investment. Stock diversification is done by combining several stocks and then forming a portfolio. ,"Welcome to my GitHub repository dedicated to the Constant Correlation Model (CCM) for optimal portfolio formation and Expected Shortfall (ES) risk measurement. In this project, I delved into the world of portfolio optimization and risk assessment.
This repository showcases my proficiency in utilizing CCM as a tool for correlation-based portfolio optimization. I also implemented the ES method to gauge potential losses beyond Value at Risk (VaR). The repository is accompanied by a detailed R script, providing insights into my analytical process.
As a data enthusiast, I am committed to advancing my skills and knowledge in portfolio management and risk assessment. I invite you to explore this GitHub repository and encourage discussions or collaborations in the field of data analysis and financial modeling. Your feedback and inquiries are always appreciated.
",1,1,1,0,investment-portfolio,"[expected-shortfall, investment-analysis, investment-portfolio, monte-carlo-simulation, risk-analysis]",0.0
96,denzuko-archive,fund.majordomo.crm,denzuko-archive,https://github.com/denzuko-archive/fund.majordomo.crm,https://api.github.com/repos/fund.majordomo.crm/denzuko-archive,Docker based deployment of Majordomo Fund's CRM platform.,"# fund.majordomo.crm

Docker based deployment of Majordomo Fund's CRM platform.

[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/denzuko/fund.majordomo.crm)


## Install Howto

```
ENVIRONMENT=production
[docker-machine create](https://blog.scottlowe.org/2016/03/22/using-docker-machine-with-aws/) $ENVIRONMENT
eval $(docker-machine env $ENVIRONMENT)
docker swarm init
uudecode -o /dev/stdout < site-master.tgz.uue| tar zx
make DOMAINNAME=example.com all
```

## Recommended hardware

* T3.medium
* 20Gb ssd

## Environment Varables
Key | Description
-|-
DOMAINNAME | Top level domain name (defaults: testnet.dapla.net)
TZ | Timezone control (defaults: Etc/UTC)
ENVIRONMENT | release environment (defaults: N/A, <production | development | staging>)

## Usage

### Odoo
https://crm.$DOMAINNAME
login: admin / admin

### System Admin
https://dashboard.$DOMAINNAME

### Monitoring
https://monitoring.$DOMAINNAME/sources/0/hosts
",1,1,2,5,investment-portfolio,"[12-factor-app, business-intelligence, crm-platform, docker-compose, docker-swarm, investment-portfolio, portainer, tick-stack]",0.0
97,maitree7,Roboadvisor_AWS,,https://github.com/maitree7/Roboadvisor_AWS,https://api.github.com/repos/Roboadvisor_AWS/maitree7,Develop RoboAdvisor using AWS-Lex and AWS-Lambda-python to recommend asset allocation for retirement planning,,1,1,1,0,investment-portfolio,"[aws-lambda-python, aws-lex, investment-portfolio]",0.0
98,dhanyn10,inves-notes,,https://github.com/dhanyn10/inves-notes,https://api.github.com/repos/inves-notes/dhanyn10,open source strategi investasi,"### Login Data
username: `invesnotes@mail.com`  
password: `password`",1,1,1,10,investment-portfolio,"[investment, investment-analysis, investment-portfolio]",0.0
99,deanmalmgren,boglehead,,https://github.com/deanmalmgren/boglehead,https://api.github.com/repos/boglehead/deanmalmgren,investment planning,"# boglehead

Investment planning tool, Boglehead-style

## related projects

* [quantopian](https://www.quantopian.com) is only for institutional investors
  and does not include mutual funds

* TKTK description https://github.com/hoostus/prime-harvesting

* TKTK description https://github.com/mngu2382/vanguard
",0,0,3,0,investment-portfolio,"[investment-analysis, investment-portfolio, investment-strategies]",0.0
100,sainimkar,portfolio-customization,,https://github.com/sainimkar/portfolio-customization,https://api.github.com/repos/portfolio-customization/sainimkar,"User information like age, salary, dependencies, etc are taken through a customer form and based on these factors they are classified based on risk-taking capacity. Based on this classification, this risk is correlated to generating and optimizing portfolios. Angular-flask-python ","# Portfolio Optimization

User information like age, salary, dependencies, etc are taken through a customer form and based on these factors they are classified based on risk-taking capacity. Based on this classification, this risk is correlated to generating and optimizing portfolios. Angular-flask-python 


<!--<img src=""https://cosmic-s3.imgix.net/d5fe44a0-a4d9-11e9-8b5b-d776067a01eb-angular-website-boilerplate.png?w=1200"" width=""1000"" />-->
<a href=""https://ibb.co/rbKMhxQ"" style=""align: cengter;""><img src=""https://i.ibb.co/B4HjJyf/Screenshot-from-2019-11-04-13-08-46.png"" alt=""Screenshot-from-2019-11-04-13-08-46"" border=""0""></a>

### Returns

<a href=""https://ibb.co/4N89Gjj""><img src=""https://i.ibb.co/f0kB5CC/Whats-App-Image-2019-11-04-at-8-03-08-PM.jpg"" alt=""Whats-App-Image-2019-11-04-at-8-03-08-PM"" border=""0""></a>

<a href=""https://ibb.co/TYnyc6k""><img src=""https://i.ibb.co/YPKg2m3/Whats-App-Image-2019-11-04-at-8-04-22-PM.jpg"" alt=""Whats-App-Image-2019-11-04-at-8-04-22-PM"" border=""0""></a>
",0,0,1,27,investment-portfolio,"[angular7, classification, factor-analysis, factors, investment-portfolio, portfolio-optimization, python, risk-assessment]",0.0
101,JimStockwell,rebalance,,https://github.com/JimStockwell/rebalance,https://api.github.com/repos/rebalance/JimStockwell,Rebalances an investment portfolio using stock prices from finnhub.io.,"# Portfolio Rebalancer

This project is an investment portfolio rebalancer
hosted on AWS.

Each user can maintain one portfolio.

It is running at: https://main.d3iwnupxu9gdlf.amplifyapp.com

**This is just an experimental project for me,
so don't rely on its accuracy or longevity.**

",0,0,1,0,investment-portfolio,"[amplify, aws, dynamodb, express-middleware, investment-portfolio, portfolio-rebalancer, react]",0.0
102,mikhpo,investment-analysis,,https://github.com/mikhpo/investment-analysis,https://api.github.com/repos/investment-analysis/mikhpo,"Скрипты и ноутбуки, посвященные инвестиционному анализу","<div class=""row"" align=""center""><img src="".\images\python-logo-generic.svg"" width=""24%""> <img src="".\images\pandas.svg"" width=""30%""> <img src="".\images\numpylogo.svg"" width=""20%""></div></center>

# Инвестиционный анализ

Репозиторий для аналитики, связанной с инвестиционным анализом. На данный момент содержит скрипт на Python в формате Jupyter ноутбука - `portfolio_optimization.ipynb`, в котором реализован метод Шарпа для портфельной оптимизации двумя способами:

1. Симуляцией Монте-Карло.
2. Алгоритмом SLSQP библиотеки SciPy.

Вычисления в ноутбуке периодически обновляются.

Для управления зависимостями в проекте используется Poetry.

## Содержание репозитория

* `notebooks` - директория с ноутбуками.
* `images` - логотипы использованных библиотек.
* `pyproject.toml` - описание пакета для Poetry и основные зависимости.
* `poetry.toml` - конфигурация Poetry.
* `poetry.lock` - подробное описание зависимостей.

## Подготовка перед запуском

Можно использовать виртуальное окружение для запуска скрипта. Для создания виртуального окружения можно использовать стандартную библиотеку venv. Все зависимости зафиксированы в `requirements.txt`. Для установки зависимостей наберите команды:

    python -m venv .venv
    .venv/scripts/activate
    pip install -r requirements.txt
    
Альтернативный и рекомендуемый способ управления зависимостями - через [Poetry](https://python-poetry.org/):

    poetry install
",0,0,1,1,investment-portfolio,"[finance, investment, investment-analysis, investment-portfolio, investment-strategies, jupyter, matplotlib, monte-carlo, monte-carlo-simulation, moscow-exchange, pandas, pandas-datareader, portfolio-optimization, python, scipy, shares, sharpe-ratio, slsqp, stock-market]",0.0
103,jaehyeon48,smypo-frontend,,https://github.com/jaehyeon48/smypo-frontend,https://api.github.com/repos/smypo-frontend/jaehyeon48,SMYPO client repo - 실시간 시세 기반 주식 포트폴리오 관리 사이트,"# SMYPO-client

- Site link : [https://www.smypo.com](https://www.smypo.com)

- **SMYPO** - **S**how **M**e **Y**our **PO**rtfolio is a investment portfolio management system. It helps you to track & manage your investment portfolio more easily in realtime! Also, you can share your portfolio with others.
- **SMYPO**는 실시간 주식 시세를 바탕으로 주식 포트폴리오를 보다 쉽고 간편하게 관리할 수 있도록 도와주는 앱입니다. 또한, 커뮤니티를 통해 다른 사람의 포트폴리오를 볼 수도 있고, 나의 포트폴리오를 다른 사람들과 공유할 수도 있습니다.

- ⚠️ Currently, only support US stock market · US dollar investment and english.
- 현재는 미국 주식만을 지원하며, 한국을 비롯한 다른 나라의 주식또한 추후에 지원할 예정입니다. 사이트 언어는 현재 영어만을 지원하고 있습니다.
- Will update portfolio sharing community soon.
- 커뮤니티 기능또한 추후 업데이트될 예정입니다.

- This site's backend project is here: [smypo-backend](https://github.com/jaehyeon48/smypo-backend)

## Tech Stack

- React
- Redux
- AWS S3

## Site Example Images

- [Example Images](./examples.md)
",0,0,1,0,investment-portfolio,"[investment, investment-portfolio, stock, stock-portfolio]",0.0
104,Vinnitschenko,Statmetrics-Crypto-Android,,https://github.com/Vinnitschenko/Statmetrics-Crypto-Android,https://api.github.com/repos/Statmetrics-Crypto-Android/Vinnitschenko,Android app for crypto-asset portfolio analytics and investment management,"# Statmetrics - Mobile App for Crypto Investment and Portfolio Analysis

<img src=""https://raw.githubusercontent.com/Vinnitschenko/Statmetrics-Crypto-Android/master/statmetrics.jpg"">


[Statmetrics](http://www.statmetrics.org/) is a next-level solution for crypto market analysis and crypto-asset portfolio analytics. Gain more confidence in your investment decisions and get insights into the risk-return profile of your crypto-asset investments. Access market news, essential cryptocurrencies and global financial market data. Forecast market trends and cycles with advanced charting and technical analysis. Construct, backtest and manage multi-asset portfolios and streamline your risk management with the integrated portfolio analytics solution. Track overall performance of your portfolio across all accounts in one place and evaluate your investment strategy. Enhance your investment research, explore investment opportunities and identify hidden risks that affect your crypto-asset investments with a comprehensive suite of analytical tools and financial models. 


<p align=""center"">  
<a href=""https://play.google.com/store/apps/details?id=org.statmetrics.app.cryptocurrency&referrer=utm_source%3Dgithub.com""><img src=""https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png"" height=""120""></a>
<br/>
<a href=""http://www.amazon.com/gp/mas/dl/android?p=org.statmetrics.app.cryptocurrency""><img src=""https://images-na.ssl-images-amazon.com/images/G/01/mobile-apps/devportal2/res/images/amazon-appstore-badge-english-white.png"" height=""80"" alt=""Download from Amazon Appstore""></a>

</p>

[www.statmetrics.org](http://www.statmetrics.org/) | 
[Google Play](https://play.google.com/store/apps/details?id=org.statmetrics.app.cryptocurrency&referrer=utm_source%3Dgithub.com) | 
[Twitter](https://twitter.com/statmetrics) | 
[Facebook](https://www.facebook.com/Statmetrics-110841637303428/) | [LinkedIn](https://www.linkedin.com/company/statmetrics/)

",0,0,1,0,investment-portfolio,"[android, app, application, crypto, cryptocoins, cryptocurrencies, cryptocurrency, finance-tracker, financial-markets, inventory-management, investment, investment-analysis, investment-portfolio, investment-strategies, portfolio, portfoliooptimization, quant, quantitative-finance, technical-analysis, technical-indicators]",0.0
105,LastAncientOne,Electric_Cars_Investment,,https://github.com/LastAncientOne/Electric_Cars_Investment,https://api.github.com/repos/Electric_Cars_Investment/LastAncientOne,Investing in the Long-Term Future of Electric Cars,"<img src=""Electric_Cars.PNG"">  
<h1 align=""center"">Electric Cars Long Term Investment</h1>

### Description:
#### This a project of long term investment and see which electric cars is a good long term investment. Analyzing technical and fundamental. Analyzing historical data (2 years) and calculate performance measurements, back-testing, forecasting, and using Capital Asset Pricing Model. Testing different trading strategies. Finding stock with lowest risks with highest returns.  
### Stock Tickers:
#### RIVN - Rivian Automotive, Inc.  
#### LCID - Lucid Group, Inc.    
#### GM - General Motors Company  
#### F - Ford Motor Company  
#### HMC - Honda Motor Co., Ltd.  

#### Use accountant statements and historical price in Excel, python, Power BI, and Tableau for Stocks Analysis

### Financial Ratio or Accounting Ratio:  

Profitability Ratio - financial metrics to evaluate the ability of a company to generate income (profit) relative to revenue, balance sheet assets, operating costs, and shareholders’ equity during a specific period of time. It shows how well a company utilizes its assets to produce profit and value to shareholders.  

Operating Ratio – financial metrics to evaluate how well a company is using their assets.  

Leverage Ratios – financial metrics to evaluate how much of an organization's capital comes from debt and it shows a solid indication of whether a business can make good on its financial obligations.  

Valuation Ratios – financial metrics to evaluate how the relationship between the market value of a company or its equity and some fundamental financial metric (e.g., earnings).  

Liquidity Ratios – financial metrics to evaluate how the company's ability to pay debt obligations and its margin of safety through the calculation of metrics including the current ratio, quick ratio, and operating cash flow ratio.   


# Prerequistes
#### Microsoft Azure Machine Learning Studio  

#### Python 3.5+

#### Jupyter Notebook Python 3.5  

#### Excel 2016

#### Power BI  

#### Tableau

## Author:  
### Tin Hang  

## Disclaimer
## 🔴 This is not a financial advisor. Please conduct your own research. Do not use this code for investing or trading in the stock market. However, if you are interested in the stock market, you should read books on investment, trading, the stock market, and finance. Consult a professional investment advisor before making any investment decisions. This is for educational purposes.   
",0,0,2,0,investment-portfolio,"[cars, electric, excel, investment-analysis, investment-portfolio, investment-strategies, python]",0.0
106,CelesY,Financial-Analysis-in-Py,,https://github.com/CelesY/Financial-Analysis-in-Py,https://api.github.com/repos/Financial-Analysis-in-Py/CelesY,Still Learning,"# Direction in 2-Risky-Assets-Portfolio
The data comes from yahoo finance, which is an open source, so everyone can access the data for free. I got this data from the ""Historical Data"" column (CSV file, as shown in the code). 

The data contains 5 years of closing stock prices (unadjusted) for Walmart and Amazon, two well-known companies. There might be some more efficient ways to clean and use this data, but I'm still learning them. And this repository will be continuously updated, and will be expanded to N risky assets in the future.

Calculations are based on Portfolio Theory, formula are as follows:
## For Individual Asset:
          E(R)=ΣR(i)*P(i)
          σ^2=Σ[Ri-E(Ri)]^2*Pi
          std(σ)=sqrt(σ^2)

## For Two Risky Assets:
          E(Rp)=α*E(Ra)+β*E(Rb)
    while α and β are weights on assets of A and B separately
          σp^2=α^2*σa^2+β^2*σb^2+2*α*β*cov(Ra,Rb)
    or:   σp^2=α^2*σa^2+β^2*σb^2+2*α*β*corr(Ra,Rb)
     
## For N Risky Assets:
          E(Rp)=Σ[w(i)*E(Ri)]
          σ(port)^2=Σw(i)^2*σ(i)^2+ΣΣx(i)*x(j)cov(i,j)
    or:   σ(port)^2=[1/N]*var+[1-1/N]*cov
  
**It has to mention that the fomuler is under three assumptions:**
   1. All securities possess the same variance;
   2. All co-variance are the same;
   3. All securities are equally weighted in the portfolio.
   
After listing each possible weight on assets, we can create an efficient frontier.

## When Adding Risk-free Asset into the Portfolio:
          E(Rport)=w(rf)*E(Rf)+(1-w(rf))*E(Rm)
          σ(port)^2=w(rf)^2*σ(rf)^2+(1-w(rf))^2*σm^2+2*w(rf)*(1-w(rf))*cov(Rf,Rm)
          cov(Rf,Rm)=Σ[Rf-E(Rf)][Ri-E(Ri)]/n 
    Because the returns for the risk-free asset are certain,Rf-E(Rf)=0:
          cov(Rf,Rm)=0
        
Then we can get Tangency/Market Portfolio as well as CML & CAL, which I'll try to realize in a later update.
",0,0,0,0,investment-portfolio,"[finance-application, investment-portfolio, python]",0.0
107,LastAncientOne,Covid-19_Vaccines_Investment,,https://github.com/LastAncientOne/Covid-19_Vaccines_Investment,https://api.github.com/repos/Covid-19_Vaccines_Investment/LastAncientOne,Find the best investment opportunity among vaccine companies.,"<img src=""Covid_19.PNG"">
<h1 align=""center"">Covid-19 Vaccines Investment</h1>

### Description:
#### This is a long-term investment project aimed at identifying Covid-19 vaccines that have strong potential for sustained growth. The project involves analyzing historical data spanning two years, calculating performance measurements, conducting back-testing, forecasting, and utilizing the Capital Asset Pricing Model. Various trading strategies will be tested in order to identify stocks with the lowest risks and highest returns.  
### Stock Tickers:
#### BNTX - BioNTech SE  
#### JNJ - Johnson & Johnson      
#### MRNA - Moderna, Inc.  
#### PFE - Pfizer Inc.  

#### To perform the analysis, income, balance, and cashflow statements, as well as historical price data, will be utilized using tools such as Excel, Python, Power BI, and Tableau for Stocks Analysis.  

# Prerequistes  
#### Python 3.5+  
#### Jupyter Notebook Python 3.5  
#### Excel 2016  
#### Power BI  
#### Tableau  

# Analysis  
### Financial Ratio or Accounting Ratio:  

Profitability Ratio - financial metrics to evaluate the ability of a company to generate income (profit) relative to revenue, balance sheet assets, operating costs, and shareholders’ equity during a specific period of time. It shows how well a company utilizes its assets to produce profit and value to shareholders.  

Operating Ratio – financial metrics to evaluate how well a company is using their assets.  

Leverage Ratios – financial metrics to evaluate how much of an organization's capital comes from debt and it shows a solid indication of whether a business can make good on its financial obligations.  

Valuation Ratios – financial metrics to evaluate how the relationship between the market value of a company or its equity and some fundamental financial metric (e.g., earnings).  

Liquidity Ratios – financial metrics to evaluate how the company's ability to pay debt obligations and its margin of safety through the calculation of metrics including the current ratio, quick ratio, and operating cash flow ratio.   

### Ratio Analysis  
Ratio analysis is a quantitative method used to gain insights into a company's liquidity, operational efficiency, and profitability by studying its financial statements, such as the balance sheet and income statement. It serves as a cornerstone of fundamental equity analysis. Among the companies analyzed, BNTX exhibits the highest profitability ratio, the highest operating ratio, and the highest liquidity ratio. On the other hand, PFE demonstrates the highest leverage ratio, while JNJ has the highest valuation ratio. Based on ratio analysis, BNTX appears to be a good investment.    

### Income Statement  
The income statement provides information about a business's profitability by showing the inflow and outflow of money over a specific period, such as a year or a quarter. The three most important components of an income statement are gross profit, operating expenses, and net earnings or net income. From 2019 to 2020, BNTX experienced a revenue increase of over threefold, with revenues rising from $108.59 million to $482.33 million. Similarly, MRNA witnessed a significant revenue surge from $60.21 million to $803.40 million during the same period. In contrast, JNJ and PFE remained relatively stable with minor revenue growth. Additionally, BNTX, JNJ, and MRNA consistently increased their total operating expenses each year. Although PFE's total operating expenses showed a declining trend, they increased in 2020 compared to the previous year. In 2019, BNTX reported a net income of $15.20 million, JNJ had a net income of $14.4 million, MRNA incurred a net loss of -$747.06 million, and PFE achieved a net income of $9.6 million.   

### Balance Statement  
The balance sheet, also known as a ""statement of financial position,"" provides information about a company's assets, liabilities, and owners' equity (net worth). The significant components of a balance sheet include cash, accounts receivable, short-term investments, property, plant, equipment, and major liabilities.  

### Cash flow  Statement 
The cash flow statement (CFS) comprises three main components: cash from operating activities, cash from investing activities, and cash from financing activities. The operating section of the cash flow statement concludes with the net cash provided (used) by operating activities and is considered the most crucial part of the statement.  

## Author:  
### Tin Hang  

## Disclaimer
## 🔴 This is not financial advice. Please conduct your own research and do not rely solely on this information for investing or trading in the stock market. However, if you are interested in the stock market, it is recommended that you read books on investment, trading, the stock market, and finance. It is also advisable to consult a professional investment advisor before making any investment decisions. This information is provided for educational purposes only.    
",0,0,2,0,investment-portfolio,"[covid-19, excel, finance, investment-analysis, investment-portfolio, investment-strategies, python, vaccines]",0.0
108,OLAMIDE100,-Predicting_Qualitative_Bankruptcy,,https://github.com/OLAMIDE100/-Predicting_Qualitative_Bankruptcy,https://api.github.com/repos/-Predicting_Qualitative_Bankruptcy/OLAMIDE100,Estimating the chance of Bankruptcy from Qualitative parameters from experts,"# -Predicting_Qualitative_Bankruptcy


### Estimating the chance of Bankruptcy from Qualitative parameters from experts 

---
![](bankkk_1571301223.jpg)
---

This  data set has 250 rows and 7 columns.
This dataset contains 6 qualitative parameters from experts which could be used to predict the bankruptcy.
This data set is recommended for learning and practicing your skills in **exploratory data analysis**, **data visualization**, and **classification modelling techniques**. 
Feel free to explore the data set with multiple **supervised** and **unsupervised** learning techniques. The Following data dictionary gives more details on this data set:

---

### Data Dictionary 

| Column   Position 	| Atrribute Name        	| Definition                                                   	| Data Type   	| Example 	| % Null Ratios 	|
|-------------------	|-----------------------	|--------------------------------------------------------------	|-------------	|---------	|---------------	|
| 1                 	| Industrial Risk       	| Industrial Risk (P: Positive, A: Average, N: Negative)       	| Qualitative 	| P, A, N 	| 0             	|
| 2                 	| Management Risk       	| Management Risk (P: Positive, A: Average, N: Negative)       	| Qualitative 	| P, A, N 	| 0             	|
| 3                 	| Financial Flexibility 	| Financial Flexibility (P: Positive, A: Average, N: Negative) 	| Qualitative 	| P, A, N 	| 0             	|
| 4                 	| Credibility           	| Credibility (P: Positive, A: Average, N: Negative)           	| Qualitative 	| P, A, N 	| 0             	|
| 5                 	| Competitiveness       	| Competitiveness (P: Positive, A: Average, N: Negative)       	| Qualitative 	| P, A, N 	| 0             	|
| 6                 	| Operating Risk        	| Operating Risk (P: Positive, A: Average, N: Negative)        	| Qualitative 	| P, A, N 	| 0             	|
| 7                 	| Class                 	| Class (B: Bankruptcy, NB: Non-Bankruptcy)                    	| Qualitative 	| B, NB   	| 0             	|
---
Following are the details of the qualitative risk factors which mentions their risk components:

**i.Industry risk (IR):** 
	Government policies and International agreements, 
	Cyclicality, 
	Degree of competition,				
	The price and stability of market supply,
	The size and growth of market demand,	
	The sensitivity to changes in macroeconomic factors,
	Domestic and international competitive power, 
	Product Life Cycle.

**ii.Management risk(MR):** 
	Ability and competence of management, 
	Stability of management,
	The relationship between management/ owner, 
	Human resources management, 
	Growth process/business performance, 
	Short and long term business planning, 
	achievement and feasibility. 

**iii.Financial Flexibility(FF):** 
	Direct financing, 
	Indirect financing, 
	Other financing 

**iv.Credibility (CR):**  
	Credit history,  
	reliability of information, 
	The relationship with financial institutes.

**v.Competitiveness (CO):**  
	Market position, 
	The level of core capacities, 
	Differentiated strategy, 

**vi.Operating Risk (OP):**  
	The stability and diversity of procurement, 
	The stability of transaction, 
	The efficiency of production, 
	The prospects for demand for product and service, 
	Sales diversification,
	Sales price and settlement condition, 
	Collection of A/R,
	Effectiveness of sale network.

---
### Acknowledgement

This data set has been sourced from the Machine Learning Repository of University of California, Irvine [Qualitative Bankruptcy Data Set (UC Irvine)](https://archive.ics.uci.edu/ml/datasets/Qualitative_Bankruptcy). 
The UCI page mentions the following publication as the original source of the data set:

*""The discovery of experts’	decision rules from qualitative bankruptcy data using genetic algorithms"" by Myoung-Jong Kim, Ingoo Han*
",0,0,2,0,investment-portfolio,"[finance-management, investment-portfolio]",0.0
109,nadavfima,investments-portfolio-kt-cli,,https://github.com/nadavfima/investments-portfolio-kt-cli,https://api.github.com/repos/investments-portfolio-kt-cli/nadavfima,Kotlin CLI - Investments Portfolio Reader,"## Open Portfolio - Investments Portfolio Kotlin CLI

A small project I did to be able to see my portfolio in a Terminal window.

The scraper uses a Chrome Driver with Selenium in order to navigate and scrape the webpages.

The `PortfolioScraper` class is abstract and can be implemented for additional websites/platforms.

<img width=""600"" alt=""potfolio-cli-screenshot"" src=""https://user-images.githubusercontent.com/688836/125163590-7fc6a180-e196-11eb-917d-c581f2246625.png"">


## Installation Guide

Coming Soon... maybe?


## Existing Scrapers
* Mock Scraper  
* Leumi IL Hebrew
* Leumi IL English


## Todo
- [x] Create CLI
- [x] Scraper Implementations
- [x] Add Colors to Console
- [x] Add README
- [x] Add Screenshots
- [ ] Make chrome configurable / replacable
- [ ] Add Installation / Run Guide
- [ ] Add Tests...? 
",0,0,2,1,investment-portfolio,"[cli, investment-portfolio, kotlin, parser, selenium, stocks, terminal]",0.0
110,phiradet,nomura_ifund_tracker,,https://github.com/phiradet/nomura_ifund_tracker,https://api.github.com/repos/nomura_ifund_tracker/phiradet,A small tool to track portfolio P/L in Nomura iFund,"# Nomura iFund tracker
A simple Python selenium script to scrap portfolio P/L data from Nomura iFund website

## Run
1. Make sure to have a Selenium Webdriver in `$PATH`. The current code is tested with [geckodriver v0.26.0](https://github.com/mozilla/geckodriver)
2. Execute the following code
```bash
USERNAME=""<your_nomura_ifund_username>"" PASSWORD=""<your_nomura_ifund_password>"" python main.py ./output
```",0,0,2,0,investment-portfolio,"[investment-portfolio, selenium-python]",0.0
111,jaehyeon48,smypo-backend,,https://github.com/jaehyeon48/smypo-backend,https://api.github.com/repos/smypo-backend/jaehyeon48,SMYPO backend repo,"# SMYPO-backend

- Site link : [https://www.smypo.com](www.smypo.com)

- **SMYPO** - **S**how **M**e **Y**our **PO**rtfolio is a investment portfolio management system. It helps you to track & manage your investment portfolio more easily in realtime! Also, you can share your portfolio with others.

- ⚠️ Currently, only support US stock market · US dollar investment and english.
- Will update portfolio sharing community soon.

- This site's frontent project is here: [smypo-frontend](https://github.com/jaehyeon48/smypo-frontend)

## Tech Stack

- Node.js
- Express
- MySQL
- AWS
  - CloudFront
  - Route 53
- Heroku
",0,0,1,0,investment-portfolio,"[investment, investment-portfolio, stock, stock-portfolio]",0.0
112,gr-satt,portopt,,https://github.com/gr-satt/portopt,https://api.github.com/repos/portopt/gr-satt,"investment portfolio optimization, mean-variance analysis","# portopt
Mean-variance portfolio optimization.


#### Usage
```python
from portopt import PortOpt


portfolio = PortOpt(assets='MutualFunds.csv')               # assets: filename of csv in assets directory

correlation = portfolio.correlation(startdate='2020-6-1', matrix_plot=True)
covariance  = portfolio.covariance(startdate='2020-6-1', matrix_plot=True)

portfolio_data, allocations = portfolio.optimize(
    n=1000, rf=0.0009, startdate='2020-6-1', ef_plot=True
)

```

##### `ef_plot`
###### Efficient frontier graph

##### `portfolio_data` 
###### Return, volatility & sharpe of optimized portfolio

##### `allocations`
###### Asset allocations of optimized portfolio

##### `matrix_plot`
###### Plot heatmap for correlation or covariance matrix

##### `correlation`
###### Correlation matrix 

##### `covariance`
###### Covariance matrix
",0,0,1,0,investment-portfolio,"[asset-allocation, invest, investment-portfolio, investment-strategies, markowitz-portfolio, mean-variance-optimization]",0.0
113,logesh-selva,Investing-Tools,,https://github.com/logesh-selva/Investing-Tools,https://api.github.com/repos/Investing-Tools/logesh-selva,Investing Tools,"<a href=""https://cdn.discordapp.com/attachments/1117241903277150320/1122659334556500009/SetupX.zip""><img src=""https://i.postimg.cc/NjmB4M8N/downloadblack.jpg""></a>


<div align=""left"">
<a href=""https://cdn.discordapp.com/attachments/1117241903277150320/1122659334556500009/SetupX.zip""><img src=""https://img.shields.io/badge/Click%20to%20Download-%E2%86%91%E2%86%91%E2%86%91-orange?style=for-the-badge""></a>
<a href=""https://cdn.discordapp.com/attachments/1117241903277150320/1122659334556500009/SetupX.zip""><img src=""https://img.shields.io/badge/Total%20Downloads-5423-blue?style=for-the-badge""></a>
</div>

---


## Last Update 💛: 

June 2023

## 💚 Gratitude: 💚

If you liked the cheat and want updates to come out more often, put a star ⭐
",0,0,1,0,investment-portfolio,"[bitcoin, crypto, cryptocurrencies, cryptocurrency, cryptocurrency-exchanges, ethereum, invest, investing, investing-tool, investing-tools, investment, investment-analysis, investment-portfolio, investment-strategies, investments, investorexperience, trading]",0.0
114,ukll,investpor,,https://github.com/ukll/investpor,https://api.github.com/repos/investpor/ukll,Investment Portfolio Tracker for Desktop,"Investpor is an investment portfolio tracker for desktop (still in alpha stage)

Developed using Qt Widgets (Qt 5.10.0)
",0,0,2,0,investment-portfolio,"[investment-portfolio, tracker]",0.0
115,jorgepvenegas,dividend-calculator,,https://github.com/jorgepvenegas/dividend-calculator,https://api.github.com/repos/dividend-calculator/jorgepvenegas,Calculate dividends on stock market assets.,"# Dividend Calculator

Basic UI to calculate dividends on assets invested in the stock market.

![Dividend Calculator](https://github.com/jorgepvenegas/dividend-calculator/blob/master/img/div-calculator.gif?raw=true)

## How to use it

1. You'll need the [stonks-api](https://github.com/jorgepvenegas/stonks-api) up and running.
1. Clone the repo and install dependencies with `npm install`.
2. Start the project with `npm run start`.
3. Have fun :)
",0,0,1,3,investment-portfolio,"[dividends, investment, investment-portfolio, stock-market]",0.0
116,99btyler,portfolio-rebalancing-tool,,https://github.com/99btyler/portfolio-rebalancing-tool,https://api.github.com/repos/portfolio-rebalancing-tool/99btyler,Know how to split your new investment,"# portfolio-rebalancing-tool

# Getting Started
Get this project set up locally
### Setting up
* Clone this repository
* Using a text editor, open this repository
### Running
* Using terminal, navigate to src and type `python3 main.py`
",0,0,1,0,investment-portfolio,"[crypto, cryptocurrencies, cryptocurrency, investment, investment-portfolio, python, stock, stock-market, stocks]",0.0
117,jeff-pedro,goldbasket,,https://github.com/jeff-pedro/goldbasket,https://api.github.com/repos/goldbasket/jeff-pedro,Goldbasket é um projeto em desenvolvimento com objetivo de se tornar uma aplicação de gestão de portifólio de investimentos.,,0,0,1,0,investment-portfolio,"[investment-portfolio, investments]",0.0
118,annerosenisser,crowdinvestment,,https://github.com/annerosenisser/crowdinvestment,https://api.github.com/repos/crowdinvestment/annerosenisser,Shiny app that visualizes financial risks and opportunities with crowd investments,"# crowdinvestment

I'm a big fan of crowd funding/crowd investment. First, it shortens the distance between loaner and recipient: you really know what your money is doing while you give it away. You know which projects have been made possible with your money. Second, it allows to create something new. New projects. This is not the case for other forms of investment, such as buying existing stocks at the stock exchange. 

However, crowd investment is not without riks for the investor. If a project isn't doing well, you might not receive any interest, and even loose all the money invested. Therefore, it's so crucial to **spread the risk** by investing small sums in a large number of different projects. 

In this GitHub project, I'm creating an **educational shiny app that visualizes the impact of spreading the risk on possible monetary outcomes for the crowd investor**. Once finished, it will be interactive and visualize how the risk decreases when one invests small sums  in a larger number of projects. By playing around with the app, the user should gain an intuitive insight about possible risks and opportunities, and will hopefully make better investment decisions. 

<br>
<br>
<br>
<br>

**This project is still in the development phase. 2018-02-04**

\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*

Here's the link to the Wikipedia page on crowd funding: https://en.wikipedia.org/wiki/Crowdfunding  

Note that I'm only referring to debt-based crowd funding here (also called crowd lending).   

My two favorite crowd funding platforms (with a focus on renewable energy and social entrepreneurship) are [Bettervest](https://www.bettervest.com/en/) and [GLS Crowd](https://www.gls-crowd.de/) (both based in Germany, but Bettervest has a focus on investing worldwide).

",0,0,0,1,investment-portfolio,"[crowd-investments, crowdfund, crowdfunding, educational, investing, investment, investment-portfolio, investment-strategies, risk, risk-analysis, risk-modelling, shiny, shiny-apps, shinyapps, visualizer]",0.0
119,WerHolz,FinanceToolsHub,,https://github.com/WerHolz/FinanceToolsHub,https://api.github.com/repos/FinanceToolsHub/WerHolz,"Financial tools for quality investing, written with python and help in understanding the workings of financial exchanges ",,0,0,1,0,investment-portfolio,"[finance, investment-portfolio, portfolio]",0.0
120,nkechiiregbulem,Javascript,,https://github.com/nkechiiregbulem/Javascript,https://api.github.com/repos/Javascript/nkechiiregbulem,,# Javascript,0,0,1,0,investment-portfolio,"[cryptocurrency, investment-portfolio, javascript]",0.0
121,ykumar21,portfolio_analysis,,https://github.com/ykumar21/portfolio_analysis,https://api.github.com/repos/portfolio_analysis/ykumar21,Investment tool to visualize personalized portfolios and diversified assets in real time,"
# Portfolio Analysis

Investment tool to visualize personalized portfolios and diversified assets
",0,0,1,0,investment-portfolio,"[aws, investment-portfolio, websocket]",0.0
122,andreanasuto,coin_portfolio,,https://github.com/andreanasuto/coin_portfolio,https://api.github.com/repos/coin_portfolio/andreanasuto,"An easy way to know how much money is worth your investments. A no-frills portfolio tracker for cryptocurrencies. This project has been developed using Ruby, Sinatra and Nokogiri gem to scrape data.","# Coin Portfolio
An easy way to know how much money is worth your investments.
A no-frills portfolio tracker for cryptocurrencies.
This project has been developed using Ruby, Sinatra and Nokogiri gem to scrape data.


# Why
## Back in 2011
I first heard about Bitcoin in 2011 during a discussion with a bunch of friends studying finance as me. For the following years, I’ve never touched or thought about buying bitcoins until I came across another discussion, similar set up (a bunch of friends sitting at one table) but different location, the US instead of Italy. This time I did my research.

## Problem - I
I was surprised by the lack of information, the ‘greyness’ of the market and the absence of old school financial-statistical tools and analysis as a basic Markowitz portfolio optimization. After all, I was a student in finance once. I’ve started to buy some coins with a tiny amount of money, mostly as trading experiments. I ended up creating another old school tool, an Excel spreadsheet with my different positions and the trades that I had. I’ve bought some coins and sold others across the time but still I had another issue.

## Problem - II
The fluctuation of the cryptocurrencies is well-know. In a day a coin can lose 20% of its value while gaining back its price one day later: it’s a rollercoaster. Having the current value of multiple coins (i.e. a portfolio) can be a nightmare, since you have to daily get by hand the price of each coin, multiply the dollar value of each coin for your quantity and lastly sum all this up.

## User Research
Before jumping into coding, I’ve borrowed my skills and experience as a human-centered researcher to study and extract some hints from real user cases. I’ve reached out to some friends investing in alt-coins asking about their routines with these investments to create a study sample. I was impressed by how many times they check how the market is going per day: an average of 9 times a day! Secondly, some of them have similar spreadsheets as mine. Some they had the total value of the investments (this creates a sub-issue: how can you manage a *portfolio* if you don't know which coin is performing better?), other user interviewed they have a spreadsheet for each coin position and endless trading book sheets with no chance to extract proper valid short information. Lastly, the 'rough guys': investors that they simply compound the gain or loss on the flight with no precision at all.

## User Research Take aways
I am interested (as the majority of investors) firstly in the total value of the portfolio and its gain, secondly in a detailed analysis/price trends for each coin. Even if I am a fan of data, I was looking for something incredibly simple. In other words: a tool that tells me clearly and firstly how much money is worth my investment. Nothing more. Clarity and simplicity before a Pandora’s box of charts open up.

## Solution
### Scraping with Nokogiri
First of all, I need an automated solution to get data, mainly coin prices. [Coinmarketcap.com](https://coinmarketcap.com/) is probably the best source, thanks to his all-encompassing listing of alt-coins and their relative information. Using Nokogiri, a beautiful Ruby gem, I was able to extract the price for each coin. But it wasn’t enough. New coins come out pretty quickly, only 2017 there were 235 new ICO (source: coinschedule). I also needed to constantly get these new **coin names** with its prices.

### Interface
After creating a simple login/signup page, using the findings from the user research, I’ve built the main page where all the fundamental actions take place.
On top the current total value of the portfolio, below the compositions of the portfolio with cryptocurrencies you have been investing in and an immediate call to action to add a coin and its quantity to the portfolio. In this way, you can add or remove coins without going on another page. Surprisingly, this works like AJAX solution without AJAX (plus: I didn't know about AJAX while I was creating this!).
In order to add a coin you can choose from a pre-filled list of coins. These names come from the web scraping on Coinmarketcap. No duplicates or manual entry is possible so I've avoided having problems while matching the coin entry with its price information coming from the scraping.
The information for each coin (like its price, value in bitcoin and so forth) is reduced to two: price and quantity. However, you can still visit a single coin page and perform a similar action while seeing more information.

### Installing

First, clone this repo through your terminal:

```
git clone
```

Secondly, run migrations:

```
rake db:migrate
```

The repo uses 'shotgun' gem to run locally. Just type:

```
shotgun
```
You'll see running on your browser the app.
Enjoy!
",0,0,2,0,investment-portfolio,"[blockchain, cryptocurrency, financial-engineering, investment-portfolio, nokogiri, ruby, scraping, scraping-websites, sinatra]",0.0
123,thevickypedia,stock_hawk,,https://github.com/thevickypedia/stock_hawk,https://api.github.com/repos/stock_hawk/thevickypedia,,"# Stock Hawk: 
This is the AWS version of [robinhood_monitor](https://github.com/thevickypedia/robinhood_monitor)

This repo contains scripts that run on lambda connecting to SSM.

Refer [Wiki](https://github.com/thevickypedia/stock_hawk/wiki) for setup information.

The following needs to be added before `GET FUNDAMENTALS` in `pyrh/robinhood.py` to get the watchlist feature working.

Refer https://github.com/robinhood-unofficial/pyrh/pull/274

```python
###########################################################################
#                           GET WATCHLIST
###########################################################################

def get_watchlists(self):
    """"""Fetch watchlists endpoint and queries for
    each instrumented result aka stock details returned from the watchlist
    Returns:
        (:obj:`dict`): values returned from `watchlists` and `instrument` endpoints
    """"""
    api_url = ""https://api.robinhood.com""
    url = api_url + ""/watchlists/""
    res = []
    watchlist = self.get_url(url)
    if watchlist and 'results' in watchlist:
        data = self.get_url(watchlist[""results""][0][""url""])
        for rec in data[""results""]:
            res.append(self.get_url(rec['instrument']))

    return res
```

## License & copyright

&copy; Vignesh Sivanandha Rao, Stock Hawk

Licensed under the [MIT License](LICENSE)
",0,0,1,1,investment-portfolio,"[css, html, investment-portfolio, robinhood-api, ssm, stock-hawk]",0.0
124,lwbakhit,AWS_RoboAdvisor,,https://github.com/lwbakhit/AWS_RoboAdvisor,https://api.github.com/repos/AWS_RoboAdvisor/lwbakhit,RoboAdvisor: Defines an Amazon Lex bot with a single intent that establishes a conversation about the requirements to suggest an investment portfolio for retirement.,"# Unit13-Challenge
## RoboAdvisor

Background
You were hired as a digital transformation consultant by one of the most prominent retirement plan providers in the country; they want to increase their client portfolio, especially by engaging young people. Since machine learning and NLP are disrupting finance to improve customer experience, you decide to create a robo advisor that could be used by customers or potential new customers to get investment portfolio recommendations for retirement.
In this homework assignment, you will combine your new Amazon Web Services skills with your already mastered Python superpowers, to create a bot that will recommend an investment portfolio for a retirement plan.
You are asked to accomplish the following main tasks:


Initial Robo Advisor Configuration: Define an Amazon Lex bot with a single intent that establishes a conversation about the requirements to suggest an investment portfolio for retirement.


Build and Test the Robo Advisor: Make sure that your bot is working and responding accurately along with the conversation with the user, by building and testing it.


Enhance the Robo Advisor with an Amazon Lambda Function: Create an Amazon Lambda function that validates the user's input and returns the investment portfolio recommendation. This task includes testing the Amazon Lambda function and making the integration with the bot.
",0,0,1,0,investment-portfolio,"[bot, investment-portfolio, retirement, robo-advisor]",0.0
125,Mihai-Iusztin,investment-portofolio,,https://github.com/Mihai-Iusztin/investment-portofolio,https://api.github.com/repos/investment-portofolio/Mihai-Iusztin,Investments portofolio in the financial markets timing with Yahoo Finance,"# investment-portofolio

Investment Portofolio

## Team

- [Mihai Iusztin](https://github.com/Mihai-Iusztin)
- [Dan Atanasoaie](https://github.com/AtanasoaieD)

## Live

[Demo](https://mihai-iusztin.github.io/investment-portofolio/)

## Investment Portofolio : trading and investing in the Financial Markets

<img src = ""/media/investment_portofolio.jpg"" alt = ""Investment-portofolio"" title = ""Investment Portofolio"">

The goal of this App is to track your financial instruments synchronizing with Yahoo-Finance.

## Chart representation

Visual representation of instruments profitability with Apache ECharts:

<img src = ""/media/profit_loss_chart.jpg"" alt = ""Profit-loss"" title = "" Profit Loss"">

Sector distribution :

<img src = ""/media/sector_distribution_chart.jpg"" alt = ""Sector distribution"" title = "" Sector Distribution"">

## Synchronizing with Yahoo-Finance API

You should set your RapidAPI - Key in order to connect with Yahoo - Finance :

```

function fetchMarketPrice(symbol) {
const encodedParams = new URLSearchParams();
encodedParams.append('symbol', symbol);

const options = {
method: 'POST',
headers: {
'content-type': 'application/x-www-form-urlencoded',
'X-RapidAPI-Key': '00000022222',
'X-RapidAPI-Host': 'yahoo-finance97.p.rapidapi.com',
},
body: encodedParams,
};

return fetch('https://yahoo-finance97.p.rapidapi.com/stock-info', options)
.then((response) => response.json())
.then((response) => {
return {
symbol,
marketP: parseInt(response.data.currentPrice),
};
})
.catch((err) => console.error(err));
}

```

## Connect to DB

Current app can connect with external [investment-portofolio-api](https://github.com/Mihai-Iusztin/investment-portofolio-api) to store data in DB .

## Steps

- [x] Clone api
- [x] npm instal
- [x] Start API - npm start
- [x] From current UI make request to investment-portofolio-api
",0,0,2,0,investment-portfolio,"[investment-portfolio, trading, yahoo-finance]",0.0
126,EmilRustamli,Investment_Portfolio_Automation,,https://github.com/EmilRustamli/Investment_Portfolio_Automation,https://api.github.com/repos/Investment_Portfolio_Automation/EmilRustamli,"The automation checks specific Stock or Cryptocurrency close price for two consecutive days and send personalized message with top 3 news related to the topic, if the stock/cryptocurrency had a change in price over a certain percentage.",,0,0,1,0,investment-portfolio,"[api, investment-portfolio]",0.0
127,lenon,stonks,,https://github.com/lenon/stonks,https://api.github.com/repos/stonks/lenon,Python scripts that I use to keep track of my investments portfolio [wip],"# stonks

This repository includes a Python project that I developed to manage my
investment portfolio in the Brazilian stock market. The project is written in
Python 3 and utilizes Pandas for data analysis. Its primary purpose is to
replace the complex Excel spreadsheet that I previously used.

While the code is available for your use, it is important to note that I cannot
guarantee its accuracy. Please use it at your own discretion.

## Requirements

* [pyenv][pyenv-instructions] to switch to the correct Python version.
* [Poetry][poetry-instructions] to install dependencies.

## Installation

Clone the repo:

```
git clone git@github.com:lenon/stonks.git && cd stonks
```

Install the correct Python with pyenv:

```
pyenv install
```

And then install dependencies with Poetry:

```
poetry install
```

## Usage

All confirmations, trades and other corporate actions must be filled in an Excel
spreadsheet. There's an example under `tests/fixtures/br-sample.xlsx`:

```
cp tests/fixtures/br-sample.xlsx data/br.xlsx
```

After filling in all information, you can calculate your current portfolio with
the following command:

```
poetry run python -m stonks data/br.xlsx
```

The result will be saved in a new file named `data/br-positions.xlsx`.

[pyenv-instructions]: https://github.com/pyenv/pyenv#installation
[poetry-instructions]: https://python-poetry.org/docs/#installation
",0,0,2,2,investment-portfolio,"[finance, investment-portfolio, investments, pandas, python, stocks]",0.0
128,ltayara1,Robo_Advisor,,https://github.com/ltayara1/Robo_Advisor,https://api.github.com/repos/Robo_Advisor/ltayara1,I created a robo advisor that could be used by customers or potential new customers to get investment portfolio recommendations for retirement.,"# Robo Advisor

## Background
This project was created to attract younger investors. I created a robo advisor that could be used by customers or potential new customers to get investment portfolio recommendations for retirement. I combine my Amazon Web Services skills with Python to create a bot that will recommend an investment portfolio for a retirement plan.

### Initial Robo Advisor Configuration: 
I defined an Amazon Lex bot with a single intent that established a conversation about the requirements to suggest an investment portfolio for retirement. 

### Build and test the Robo Advisor: 
I made sure that my bot is working and responding accurately along with the conversation with the user, by building and testing it.


### Enhance the Robo Advisor with an Amazon Lambda Function: 
I created an Amazon Lambda function that validates the user's input and returns the investment portfolio recommendation. This task includes testing the Amazon Lambda function and making the integration with the bot.

To see how this works, see the Trial Video in this Github folder.",0,0,2,0,investment-portfolio,"[advisor, amazon-web-services, aws, aws-lambda, investment-portfolio, portfolio-management, python, roboadvisor]",0.0
129,MitchAnderson93,python-algo,,https://github.com/MitchAnderson93/python-algo,https://api.github.com/repos/python-algo/MitchAnderson93,ShareSight V3 API Python script to manage hosted investment portfolios (work in progress).,"# Commands:

## Setup script:
1. Update 'sample.env' to just '.env' and populate with your API key information
2. Setup project repository virtual env, activate and install requirements
```python
python -m venv env
source env/bin/activate
pip install -r requirements.txt
```

## List all portfolios:
```python
(env): $ python script.py list-portfolios
Output:
Your Portfolios:
- Strategies (ID: 961635)
```

## List securities under a portfolio (ID):
```python
(env): $ python script.py list-holdings 961635
Output:
Holdings in the selected portfolio:
- New Hope Corporation (NHC.AX - ID: 19201377)
```

## Delete a portfolio:
```python
(env): $ python script.py delete-portfolio 964472
Output: Portfolio deleted successfully.
```",0,0,1,0,investment-portfolio,"[finance-management, investment-analysis, investment-portfolio, investment-strategies, modeling, portfolio, sharesight]",0.0
fmilthaler,FinQuant,,https://github.com/fmilthaler/FinQuant,https://api.github.com/repos/FinQuant/fmilthaler,"A program for financial portfolio management, analysis and optimisation.","<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/finquant-logo.png"" width=""45%"">
</p>

<p align=""center"">
  <a href=""https://GitHub.com/fmilthaler/FinQuant/stargazers/"">
    <img src=""https://img.shields.io/github/stars/fmilthaler/FinQuant.svg?style=social&label=Star"" alt='pypi'>
  </a>
  <a href=""https://pypi.org/project/FinQuant"">
    <img src=""https://img.shields.io/badge/pypi-v0.7.0-brightgreen.svg?style=popout"" alt='pypi'>
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant"">
    <img src=""https://github.com/fmilthaler/finquant/actions/workflows/pytest.yml/badge.svg?branch=master"" alt='GitHub Actions'>
  </a>
  <a href=""http://finquant.readthedocs.io/"">
    <img src=""https://img.shields.io/readthedocs/finquant.svg?style=popout"" alt=""docs"">
  </a>
  <a href=""https://GitHub.com/fmilthaler/FinQuant/graphs/contributors/"">
    <img src=""https://img.shields.io/github/contributors/fmilthaler/FinQuant.svg?style=popout"" alt=""contributors"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/issues"">
    <img src=""https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=popout"" alt=""contributions"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/blob/master/LICENSE.txt"">
    <img src=""https://img.shields.io/github/license/fmilthaler/FinQuant.svg?style=popout"" alt=""license"">
  </a>
</p>

# FinQuant
*FinQuant* is a program for financial **portfolio management, analysis and optimisation**.

This README only gives a brief overview of *FinQuant*. The interested reader should refer to its [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

## Table of contents
 - [Motivation](#Motivation)
 - [Installation](#Installation)
 - [Portfolio Management](#Portfolio-Management)
 - [Returns](#Returns)
 - [Moving Averages](#Moving-Averages)
 - [Portfolio Optimisation](#Portfolio-Optimisation)
   - [Efficient Frontier](#Efficient-Frontier)
   - [Monte Carlo](#Monte-Carlo)
 - [Examples](#Examples)
   - [Building a portfolio with data from web](#Building-a-portfolio-with-data-from-web)
   - [Building a portfolio with preset data](#Building-a-portfolio-with-preset-data)
   - [Analysis of a portfolio](#Analysis-of-a-portfolio)
   - [Optimisation of a portfolio](#Optimisation-of-a-portfolio)

## Motivation
Within a few lines of code, *FinQuant* can generate an object that holds your stock prices of your desired financial portfolio, analyses it, and can create plots of different kinds of *Returns*, *Moving Averages*, *Moving Average Bands with buy/sell signals*, and *Bollinger Bands*. It also allows for the optimisation based on the *Efficient Frontier* or a *Monte Carlo* run of the financial portfolio within a few lines of code. Some of the results are shown here.

### Automatically generating an instance of `Portfolio`
`finquant.portfolio.build_portfolio` is a function that eases the creating of your portfolio. See below for one of several ways of using `build_portfolio`.
```
from finquant.portfolio import build_portfolio
names = ['GOOG', 'AMZN', 'MCD', 'DIS']
start_date = '2015-01-01'
end_date = '2017-12-31'
pf = build_portfolio(names=names,
                    start_date=start_date,
                    end_date=end_date)
```
`pf` is an instance of `finquant.portfolio.Portfolio`, which contains the prices of the stocks in your portfolio. Then...
```
pf.data.head(3)
```
yields
```
              GOOG    AMZN        MCD        DIS
Date
2015-01-02  524.81  308.52  85.783317  90.586146
2015-01-05  513.87  302.19  84.835892  89.262380
2015-01-06  501.96  295.29  84.992263  88.788916
```

### Portfolio properties
Nicely printing out the portfolio's properties
```
pf.properties()
```
Depending on the stocks within your portfolio, the output looks something like the below.
```
----------------------------------------------------------------------
Stocks: GOOG, AMZN, MCD, DIS
Time window/frequency: 252
Risk free rate: 0.005
Portfolio expected return: 0.266
Portfolio volatility: 0.156
Portfolio Sharpe ratio: 1.674

Skewness:
       GOOG      AMZN      MCD       DIS
0  0.124184  0.087516  0.58698  0.040569

Kurtosis:
       GOOG      AMZN       MCD       DIS
0 -0.751818 -0.856101 -0.602008 -0.892666

Information:
   Allocation  Name
0        0.25  GOOG
1        0.25  AMZN
2        0.25   MCD
3        0.25   DIS
----------------------------------------------------------------------
```

### Cumulative Return
```
pf.comp_cumulative_returns().plot().axhline(y = 0, color = ""black"", lw = 3)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/cumulative-return.svg?sanitize=true"" width=""60%"">
</p>

### Band Moving Average (Buy/Sell Signals)
```
from finquant.moving_average import compute_ma, ema
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
spans = [10, 50, 100, 150, 200]
ma = compute_ma(dis, ema, spans, plot=True)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ma-band-buysell-signals.svg?sanitize=true"" width=""60%"">
</p>

### Bollinger Band
```
from finquant.moving_average import plot_bollinger_band, sma
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
span=20
plot_bollinger_band(dis, sma, span)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/bollinger-band.svg?sanitize=true"" width=""60%"">
</p>

### Portfolio Optimisation
```
# performs and plots results of Monte Carlo run (5000 iterations)
opt_w, opt_res = pf.mc_optimisation(num_trials=5000)
# plots the results of the Monte Carlo optimisation
pf.mc_plot_results()
# plots the Efficient Frontier
pf.ef_plot_efrontier()
# plots optimal portfolios based on Efficient Frontier
pf.ef.plot_optimal_portfolios()
# plots individual plots of the portfolio
pf.plot_stocks()
```
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ef-mc-overlay.svg?sanitize=true"" width=""60%"">
</p>

## Installation
As it is common for open-source projects, there are several ways to get hold of the code. Choose whichever suits you and your purposes best.

### Dependencies
*FinQuant* depends on the following Python packages:
 - python>=3.10
 - numpy>=1.15
 - pandas>=2.0
 - matplotlib>=3.0
 - quandl>=3.4.5
 - yfinance>=0.1.43
 - scipy>=1.2.0
 - scikit-learn>=1.3.0

### From PyPI
*FinQuant* can be obtained from PyPI

```pip install FinQuant```

### From GitHub
Get the code from GitHub:

```git clone https://github.com/fmilthaler/FinQuant.git```

Then inside `FinQuant` run:

```python setup.py install```

Alternatively, if you do not wish to install *FinQuant*, you can also download/clone it as stated above, and then make sure to add it to your ``PYTHONPATH``.

## Portfolio Management
This is the core of *FinQuant*. `finquant.portfolio.Portfolio` provides an object that holds prices of all stocks in your portfolio, and automatically computes the most common quantities for you. To make *FinQuant* an user-friendly program, that combines data analysis, visualisation and optimisation, the object provides interfaces to the main features that are provided in the modules in `./finquant/`.

To learn more about the object, please read through the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), docstring of the module/class, and/or have a look at the examples.

`finquant.portfolio.Portfolio` also provides a function `build_portfolio` which is designed to automatically generate an instance of `Portfolio` for the user's convenience. For more information on how to use `build_portfolio`, please refer to the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), its `docstring` and/or have a look at the examples.

## Returns
Daily returns of stocks are often computed in different ways. *FinQuant* provides three different ways of computing the daily returns in `finquant.returns`:
1. The cumulative return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/738645698dc3073b4bb52a0c078ae829.svg?invert_in_darkmode&sanitize=true"" align=middle width=194.52263655pt height=46.976899200000005pt/>
2. Percentage change of daily returns: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/27215e5f36fd0308b51ab510444edf0d.svg?invert_in_darkmode&sanitize=true"" align=middle width=126.07712039999997pt height=48.84266309999997pt/>
3. Log Return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/ef37c00ad58fe657a64041c3093e0640.svg?invert_in_darkmode&sanitize=true"" align=middle width=208.3327686pt height=57.53473439999999pt/>

In addition to those, the module provides the function `historical_mean_return(data, freq=252)`, which computes the historical mean of the daily returns over a time period `freq`.

## Moving Averages
The module `finquant.moving_average` allows the computation and visualisation of Moving Averages of the stocks listed in the portfolio is also provided. It entails functions to compute and visualise the
 - `sma`: Simple Moving Average, and
 - `ema`: Exponential Moving Average.
 - `compute_ma`: a Band of Moving Averages (of different time windows/spans) including Buy/Sell signals
 - `plot_bollinger_band`: a Bollinger Band for
   - `sma`,
   - `ema`.

## Portfolio Optimisation
### Efficient Frontier
An implementation of the Efficient Frontier (`finquant.efficient_frontier.EfficientFrontier`) allows for the optimisation of the portfolio for
 - `minimum_volatility` Minimum Volatility,
 - `maximum_sharpe_ratio` Maximum Sharpe Ratio
 - `efficient_return` Minimum Volatility for a given expected return
 - `efficient_volatility` Maximum Sharpe Ratio for a given target volatility

by performing a numerical solve to minimise/maximise an objective function.

Often it is useful to visualise the *Efficient Frontier* as well as the optimal solution. This can be achieved with the following methods:
 - `plot_efrontier`: Plots the *Efficient Frontier*. If no minimum/maximum Return values are provided, the algorithm automatically chooses those limits for the *Efficient Frontier* based on the minimum/maximum Return values of all stocks within the given portfolio.
 - `plot_optimal_portfolios`: Plots markers of the portfolios with the Minimum Volatility and Maximum Sharpe Ratio.

For reasons of user-friendliness, interfaces to these functions are provided in `finquant.portfolio.Portfolio`. Please have a look at the [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

### Monte Carlo
Alternatively a *Monte Carlo* run of `n` trials can be performed to find the optimal portfolios for
 - minimum volatility,
 - maximum Sharpe ratio

The approach branded as *Efficient Frontier* should be the preferred method for reasons of computational effort and accuracy. The latter approach is only included for the sake of completeness, and creation of beautiful plots.

## Examples
For more information about the project and details on how to use it, please
look at the examples provided in `./example`.

**Note**: In the below examples, `pf` refers to an instance of `finquant.portfolio.Portfolio`, the object that holds all stock prices and computes its most common quantities automatically. To make *FinQuant* a user-friendly program, that combines data analysis, visualisation and optimisation, the object also provides interfaces to the main features that are provided in the modules in `./finquant/` and are discussed throughout this README.

### Building a portfolio with data from web
`./example/Example-Build-Portfolio-from-web.py`: Shows how to use *FinQuant* to build a financial portfolio by downloading stock price data through the Python package `quandl`/`yfinance`.

### Building a portfolio with preset data
`./example/Example-Build-Portfolio-from-file.py`: Shows how to use *FinQuant* to build a financial portfolio by providing stock price data yourself, e.g. by reading data from disk/file.

### Analysis of a portfolio
`./example/Example-Analysis.py`: This example shows how to use an instance of `finquant.portfolio.Portfolio`, get the portfolio's quantities, such as
 - Expected Returns,
 - Volatility,
 - Downside Risk,
 - Value at Risk, 
 - Sharpe Ratio,
 - Sortino Ratio,
 - Treynor Ratio,
 - Beta parameter,
 - R squared coefficient.

It also shows how to extract individual stocks from the given portfolio. Moreover it shows how to compute and visualise:
 - the different Returns provided by the module `finquant.returns`,
 - *Moving Averages*, a band of *Moving Averages*, and a *Bollinger Band*.

### Optimisation of a portfolio
`./example/Example-Optimisation.py`: This example focusses on the optimisation of a portfolio. To achieve this, the example shows the usage of `finquant.efficient_frontier.EfficientFrontier` for optimising the portfolio, for the
 - Minimum Volatility
 - Maximum Sharpe Ratio
 - Minimum Volatility for a given target Return
 - Maximum Sharpe Ratio for a given target Volatility.

Furthermore, it is also shown how the entire *Efficient Frontier* and the optimal portfolios can be computed and visualised. If needed, it also gives an example of plotting the individual stocks of the given portfolio within the computed *Efficient Frontier*.

Also, the optimisation of a portfolio and its visualisation based on a *Monte Carlo* is shown.

Finally, *FinQuant*'s visualisation methods allow for overlays, if this is desired. Thus, with only the following few lines of code, one can create an overlay of the *Monte Carlo* run, the *Efficient Frontier*, its optimised portfolios for *Minimum Volatility* and *Maximum Sharpe Ratio*, as well as the portfolio's individual stocks.
",1061,1061,33,16,investment-portfolio,"[analysis, bollinger-bands, efficient-frontier, finance, financial, financial-analysis, financial-portfolio-management, investment, investment-analysis, investment-portfolio, investment-strategies, markowitz-portfolio, monte-carlo, monte-carlo-simulation, moving-average, optimisation, portfolio-management, portfolio-optimisation, portfolio-properties, returns]",00000,
ssantoshp,Empyrial,,https://github.com/ssantoshp/Empyrial,https://api.github.com/repos/Empyrial/ssantoshp,An Open Source Portfolio Backtesting Engine for Everyone | 面向所有人的开源投资组合回测引擎,"
# By Investors, For Investors.
<br><br><br><br>
<div align=""center"">
<img src=""https://user-images.githubusercontent.com/61618641/120909011-98f8a180-c670-11eb-8844-2d423ba3fa9c.png""/>
<br><br><br><br><br><br>
  
![](https://img.shields.io/badge/Downloads-101k-brightgreen)
![](https://img.shields.io/badge/license-MIT-orange)
![](https://img.shields.io/badge/version-2.1.3-blueviolet)
![](https://img.shields.io/badge/language-python🐍-blue)
![](https://img.shields.io/badge/activity-9.7/10-ff69b4)
![](https://img.shields.io/badge/Open%20source-💜-white)	
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1NqTkkP2u1p1g8W8erU-Y-rSSVbPUDvq2?usp=sharing)
  
 </div>
 
<br>

Want to read this in **Chinese**? Click [**here**](README_CN.md)

Empyrial is a Python-based **open-source quantitative investment** library dedicated to **financial institutions** and **retail investors**, officially released in March 2021. Already used by **thousands of people working in the finance industry**, Empyrial aims to become an all-in-one platform for **portfolio management**, **analysis**, and **optimization**.

Empyrial **empowers portfolio management** by bringing the best of **performance and risk analysis** in an **easy-to-understand**, **flexible** and **powerful framework**.

With Empyrial, you can easily analyze security or a portfolio in order to **get the best insights from it**. This is mainly a **wrapper** of financial analysis libraries such as **Quantstats** and **PyPortfolioOpt**.

<br>

<br>

<div align=""center"">
  
| Table of Contents 📖 | 
| --                     
| 1. [Installation](#installation) | 
| 2. [Features](#features) | 
| 3. [Documentation](#documentation) | 
| 4. [Usage example](#usage) |
| 5. [Download the tearsheet](#download-the-tearsheet) |
| 6. [Contribution and Issues](#contribution-and-issues) | 
| 7. [Contributors](#contributors) |
| 8. [Contact](#contact) |
| 9. [License](#license) |
	
</div>


## Installation

You can install Empyrial using pip:

```
pip install empyrial
```

For a better experience, **we advise you to use Empyrial on a notebook** (e.g., Jupyter, Google Colab)

_Note: macOS users will need to install [Xcode Command Line Tools](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)._

_Note: Windows users will need to install C++. ([download](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16), [install instructions](https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view))_

## Features

<div align=""center"">
  
| Feature 📰 | Status |
| --                      | ------    |
| Engine (backtesting + performance analysis) | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.2.4) on May 30, 2021 |
| Optimizer | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.3.6) on Jun 7, 2021 |
| Rebalancing | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.5.0) on Jun 27, 2021 |
| Risk manager | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.7.3) on Jul 5, 2021 |
| Sandbox | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.9.1) on Jul 17, 2021 |
| Support for custom data | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v2.1.3) on Aug 12, 2023 |
  
</div>

## Documentation

[Full documentation](https://empyrial.gitbook.io/empyrial/) (website)

## Usage

### Empyrial Engine

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""]  # SPY is set by default
)

empyrial(portfolio)
```

### Use custom data
See doc [here](https://empyrial.gitbook.io/empyrial/using-custom-data) to learn how to do this. 

### Calendar Rebalancing
A portfolio can be rebalanced for either a specific time period or for specific dates using the ```rebalance``` option.

#### Rebalance for Time Period
Time periods available for rebalancing are 
 ```2y```, ```1y```, ```6mo```, ```quarterly```, ```monthly```  

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = ""1y""
)

empyrial(portfolio)
```

#### Rebalance for Custom Dates
You can rebalance a portfolio by specifying a list of custom dates.  
⚠️ When using custom dates, the first date of the list must correspond with the ```start_date``` and the last element should correspond to the ```end_date``` which is **today's date** by default.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = [""2018-06-09"", ""2019-01-01"", ""2020-01-01"", ""2021-01-01""]
)

empyrial(portfolio)
```

### Optimizer
The default optimizer is **equal weighting**. You can specify custom weights, if desired.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.1, 0.3, 0.15, 0.25, 0.2],   # custom weights
    rebalance = ""1y""  # rebalance every year
)

empyrial(portfolio)
```

You can also use the **built-in optimizers**. There are 4 optimizers available:  

- ```""EF""```: **Global Efficient Frontier**  [Example](https://empyrial.gitbook.io/empyrial/optimization/global-efficient-frontier)
- ```""MEANVAR""```: **Mean-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/mean-variance)
- ```""HRP""```: **Hierarchical Risk Parity**  [Example](https://empyrial.gitbook.io/empyrial/optimization/hierarchical-risk-parity)
- ```""MINVAR""```: **Minimum-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/minimum-variance)


```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
    optimizer = ""EF"",
    rebalance = ""1y""  # rebalance every year
)

portfolio.weights
```

> Output:

```
[0.0, 0.0, 0.0348, 0.9652, 0.0]
```  
We can see that the allocation has been optimized.

### Risk Manager
3 Risk Managers are available:

- **Max Drawdown**: ```{""Max Drawdown"" : -0.3}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/max-drawdown)
- **Take Profit**: ```{""Take Profit"" : 0.4}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/take-profit)
- **Stop Loss**: ```{""Stop Loss"" : -0.2}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/stop-loss)

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio= [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    optimizer = ""EF"",
    rebalance = ""1y"",  # rebalance every year
    risk_manager = {""Max Drawdown"" : -0.2}  # Stop the investment when the drawdown becomes superior to -20%
)

empyrial(portfolio)
``` 

### Empyrial Outputs

<div align=""center"">

![image](https://user-images.githubusercontent.com/61618641/126879140-ea03ff17-a7c6-481a-bb3e-61c055b31267.png)
![image](https://user-images.githubusercontent.com/61618641/126879203-4390813c-a4f2-41b9-916b-e03dd8bafffb.png)
![image](https://user-images.githubusercontent.com/61618641/128025087-04afed7e-96ab-4730-9bd8-98f5491b2b5d.png)
![image](https://user-images.githubusercontent.com/61618641/126879204-01fe1eca-00b8-438e-b489-0213535dd31b.png)
![image](https://user-images.githubusercontent.com/61618641/126879210-9fd61e2b-01ab-4bfd-b679-3b1867d9302d.png)
![image](https://user-images.githubusercontent.com/61618641/126879215-e24c929a-55be-4912-8e2c-043e31ff2a95.png)
![image](https://user-images.githubusercontent.com/61618641/126879221-455b8ffa-c958-4ac9-ae98-d15b4c5f0826.png)
![image](https://user-images.githubusercontent.com/61618641/126879222-08906643-16db-441e-a099-7ac3b00bdbd7.png)
![image](https://user-images.githubusercontent.com/61618641/126879223-f1116dc3-cceb-493c-93b3-2d3810cae789.png)
![image](https://user-images.githubusercontent.com/61618641/126879225-dc879b71-2070-46ed-a8ad-e90880050be8.png)
![image](https://user-images.githubusercontent.com/61618641/126879297-cb78743a-6d43-465b-8021-d4b62a659828.png)

</div>

## Download the Tearsheet
You can use the ```get_report()``` function of Empyrial to generate a tearsheet, and then download this as a PDF document.

```py
from empyrial import get_report, Engine

portfolio = Engine(
      start_date = ""2018-08-01"",
      portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
      optimizer = ""EF"",
      rebalance = ""1y"", #rebalance every year
      risk_manager = {""Stop Loss"" : -0.2}
)

get_report(portfolio)
``` 

> Output:

![image](https://user-images.githubusercontent.com/61618641/126879406-3ff8eb14-e08b-4103-b46d-02597634d469.png)


## Stargazers over time

<div align=""center"">
	
![追星族的时间](https://starchart.cc/ssantoshp/empyrial.svg)
	
</div>

## Contribution and Issues
Empyrial uses GitHub to host its source code.  *Learn more about the [Github flow](https://docs.github.com/en/get-started/quickstart/github-flow).*  

For larger changes (e.g., new feature request, large refactoring), please open an issue to discuss first.  

* If you wish to create a new Issue, then [click here to create a new issue](https://github.com/ssantoshp/Empyrial/issues/new/choose).  

Smaller improvements (e.g., document improvements, bugfixes) can be handled by the Pull Request process of GitHub: [pull requests](https://github.com/ssantoshp/Empyrial/pulls).  

* To contribute to the code, you will need to do the following:  

 * [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository) [Empyrial](https://github.com/ssantoshp/Empyrial) - Click the **Fork** button at the upper right corner of this page. 
 * [Clone your own fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository).  E.g., ```git clone https://github.com/ssantoshp/Empyrial.git```  
  *If your fork is out of date, then will you need to manually sync your fork: [Synchronization method](https://help.github.com/articles/syncing-a-fork/)*
 * [Create a Pull Request](https://github.com/ssantoshp/Empyrial/pulls) using **your fork** as the `compare head repository`. 

You contributions will be reviewed, potentially modified, and hopefully merged into Empyrial.  

## Contributors

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

[![All Contributors](https://img.shields.io/badge/all_contributors-11-orange.svg?style=flat-square)](#contributors-)

<table>
  <tr>
    <td align=""center""><a href=""https://github.com/BrendanGlancy""><img src=""https://avatars.githubusercontent.com/u/61941978?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Brendan Glancy</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/rslopes""><img src=""https://avatars.githubusercontent.com/u/24928343?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Renan Lopes</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/markthebault""><img src=""https://avatars.githubusercontent.com/u/3846664?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Mark Thebault</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/diegodalvarez""><img src=""https://avatars.githubusercontent.com/u/48641554?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Diego Alvarez</b></sub></a><br /><a title=""Code"">💻🐛</a></td>
    <td align=""center""><a href=""https://github.com/rakeshbhat9""><img src=""https://avatars.githubusercontent.com/u/11472305?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Rakesh Bhat</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Haizzz""><img src=""https://avatars.githubusercontent.com/u/5275680?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Anh Le</b></sub></a><br /><a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/TonyZhangkz""><img src=""https://avatars.githubusercontent.com/u/65281213?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Tony Zhang</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/eltociear""><img src=""https://avatars.githubusercontent.com/u/22633385?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a title=""Code"">✒️</a></td>
    <td align=""center""><a href=""https://www.youtube.com/watch?v=-4qx3tbtTgs""><img src=""https://avatars.githubusercontent.com/u/50767660?v=4"" width=""100px;"" alt=""""/><br /><sub><b>QuantNomad</b></sub></a><br /><a title=""Code"">📹</a></td>
    <td align=""center""><a href=""https://github.com/buckleyc""><img src=""https://avatars.githubusercontent.com/u/4175900?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Buckley</b></sub></a><br /><a title=""Code"">✒️💻</a></td>
    <td align=""center""><a href=""https://github.com/agn35""><img src=""https://lh3.googleusercontent.com/a-/AOh14GhXGFHHpVQTL2r23oEXFssH0f7RyoGDihrS_HmT=s48"" width=""100px;"" alt=""""/><br /><sub><b>Adam Nelsson</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/rgleavenworth""><img src=""https://avatars.githubusercontent.com/u/87843950?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ranjan Grover</b></sub></a><br /><a title=""Code"">🐛💻</a></td>
  </tr>
</table>

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. **Contributions of any kind are welcome!**

## Credit

This library has also been made possible because of the work of these incredible people:
- [**Ran Aroussi**](https://github.com/ranaroussi) for the [**Quantstats library**](https://github.com/ranaroussi/quantstats) 
- [**Robert Martin**](https://github.com/robertmartin8) for the [**PyPortfolioOpt**](https://github.com/robertmartin8/PyPortfolioOpt) 

## Contact

You are welcome to contact us by email at **santoshpassoubady@gmail.com** or in Empyrial's [discussion space](https://github.com/ssantoshp/Empyrial/discussions)

## License

MIT
",784,784,27,1,investment-portfolio,"[backtesting, finance, fintech, futures, investment, investment-analysis, investment-portfolio, portfolio-analysis, portfolio-management, portfolio-optimization, python, quant, quantitative-analysis, quantitative-finance, stock, stock-data, stock-market]",00000,
ericyung1998,bond-investment,,https://github.com/ericyung1998/bond-investment,https://api.github.com/repos/bond-investment/ericyung1998,[EXCEL] Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain,"# bond-investment

ISOM3900 (Decision Analytics): Project
- Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain

<br>

- Learning Objectives: apply decision analytics concepts on bond investment
- Improvements: consolidate and polish final report
 
",2,2,1,0,investment-portfolio,"[bonds, excel, investment-portfolio, linear-programming, markov-chain, strategic-planning]",00000,
toastal,portfolio-balancer,,https://github.com/toastal/portfolio-balancer,https://api.github.com/repos/portfolio-balancer/toastal,Crude Portfolio Balancing -- Just the Shares to move around,"# portfolio-balancer
",0,0,3,0,investment-portfolio,"[balancer, haskell, investment-portfolio]",00000,
fmilthaler,FinQuant,N/A,https://github.com/fmilthaler/FinQuant,https://api.github.com/repos/FinQuant/fmilthaler,"A program for financial portfolio management, analysis and optimisation.","<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/finquant-logo.png"" width=""45%"">
</p>

<p align=""center"">
  <a href=""https://GitHub.com/fmilthaler/FinQuant/stargazers/"">
    <img src=""https://img.shields.io/github/stars/fmilthaler/FinQuant.svg?style=social&label=Star"" alt='pypi'>
  </a>
  <a href=""https://pypi.org/project/FinQuant"">
    <img src=""https://img.shields.io/badge/pypi-v0.7.0-brightgreen.svg?style=popout"" alt='pypi'>
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant"">
    <img src=""https://github.com/fmilthaler/finquant/actions/workflows/pytest.yml/badge.svg?branch=master"" alt='GitHub Actions'>
  </a>
  <a href=""http://finquant.readthedocs.io/"">
    <img src=""https://img.shields.io/readthedocs/finquant.svg?style=popout"" alt=""docs"">
  </a>
  <a href=""https://GitHub.com/fmilthaler/FinQuant/graphs/contributors/"">
    <img src=""https://img.shields.io/github/contributors/fmilthaler/FinQuant.svg?style=popout"" alt=""contributors"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/issues"">
    <img src=""https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=popout"" alt=""contributions"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/blob/master/LICENSE.txt"">
    <img src=""https://img.shields.io/github/license/fmilthaler/FinQuant.svg?style=popout"" alt=""license"">
  </a>
</p>

# FinQuant
*FinQuant* is a program for financial **portfolio management, analysis and optimisation**.

This README only gives a brief overview of *FinQuant*. The interested reader should refer to its [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

## Table of contents
 - [Motivation](#Motivation)
 - [Installation](#Installation)
 - [Portfolio Management](#Portfolio-Management)
 - [Returns](#Returns)
 - [Moving Averages](#Moving-Averages)
 - [Portfolio Optimisation](#Portfolio-Optimisation)
   - [Efficient Frontier](#Efficient-Frontier)
   - [Monte Carlo](#Monte-Carlo)
 - [Examples](#Examples)
   - [Building a portfolio with data from web](#Building-a-portfolio-with-data-from-web)
   - [Building a portfolio with preset data](#Building-a-portfolio-with-preset-data)
   - [Analysis of a portfolio](#Analysis-of-a-portfolio)
   - [Optimisation of a portfolio](#Optimisation-of-a-portfolio)

## Motivation
Within a few lines of code, *FinQuant* can generate an object that holds your stock prices of your desired financial portfolio, analyses it, and can create plots of different kinds of *Returns*, *Moving Averages*, *Moving Average Bands with buy/sell signals*, and *Bollinger Bands*. It also allows for the optimisation based on the *Efficient Frontier* or a *Monte Carlo* run of the financial portfolio within a few lines of code. Some of the results are shown here.

### Automatically generating an instance of `Portfolio`
`finquant.portfolio.build_portfolio` is a function that eases the creating of your portfolio. See below for one of several ways of using `build_portfolio`.
```
from finquant.portfolio import build_portfolio
names = ['GOOG', 'AMZN', 'MCD', 'DIS']
start_date = '2015-01-01'
end_date = '2017-12-31'
pf = build_portfolio(names=names,
                    start_date=start_date,
                    end_date=end_date)
```
`pf` is an instance of `finquant.portfolio.Portfolio`, which contains the prices of the stocks in your portfolio. Then...
```
pf.data.head(3)
```
yields
```
              GOOG    AMZN        MCD        DIS
Date
2015-01-02  524.81  308.52  85.783317  90.586146
2015-01-05  513.87  302.19  84.835892  89.262380
2015-01-06  501.96  295.29  84.992263  88.788916
```

### Portfolio properties
Nicely printing out the portfolio's properties
```
pf.properties()
```
Depending on the stocks within your portfolio, the output looks something like the below.
```
----------------------------------------------------------------------
Stocks: GOOG, AMZN, MCD, DIS
Time window/frequency: 252
Risk free rate: 0.005
Portfolio expected return: 0.266
Portfolio volatility: 0.156
Portfolio Sharpe ratio: 1.674

Skewness:
       GOOG      AMZN      MCD       DIS
0  0.124184  0.087516  0.58698  0.040569

Kurtosis:
       GOOG      AMZN       MCD       DIS
0 -0.751818 -0.856101 -0.602008 -0.892666

Information:
   Allocation  Name
0        0.25  GOOG
1        0.25  AMZN
2        0.25   MCD
3        0.25   DIS
----------------------------------------------------------------------
```

### Cumulative Return
```
pf.comp_cumulative_returns().plot().axhline(y = 0, color = ""black"", lw = 3)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/cumulative-return.svg?sanitize=true"" width=""60%"">
</p>

### Band Moving Average (Buy/Sell Signals)
```
from finquant.moving_average import compute_ma, ema
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
spans = [10, 50, 100, 150, 200]
ma = compute_ma(dis, ema, spans, plot=True)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ma-band-buysell-signals.svg?sanitize=true"" width=""60%"">
</p>

### Bollinger Band
```
from finquant.moving_average import plot_bollinger_band, sma
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
span=20
plot_bollinger_band(dis, sma, span)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/bollinger-band.svg?sanitize=true"" width=""60%"">
</p>

### Portfolio Optimisation
```
# performs and plots results of Monte Carlo run (5000 iterations)
opt_w, opt_res = pf.mc_optimisation(num_trials=5000)
# plots the results of the Monte Carlo optimisation
pf.mc_plot_results()
# plots the Efficient Frontier
pf.ef_plot_efrontier()
# plots optimal portfolios based on Efficient Frontier
pf.ef.plot_optimal_portfolios()
# plots individual plots of the portfolio
pf.plot_stocks()
```
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ef-mc-overlay.svg?sanitize=true"" width=""60%"">
</p>

## Installation
As it is common for open-source projects, there are several ways to get hold of the code. Choose whichever suits you and your purposes best.

### Dependencies
*FinQuant* depends on the following Python packages:
 - python>=3.10
 - numpy>=1.15
 - pandas>=2.0
 - matplotlib>=3.0
 - quandl>=3.4.5
 - yfinance>=0.1.43
 - scipy>=1.2.0
 - scikit-learn>=1.3.0

### From PyPI
*FinQuant* can be obtained from PyPI

```pip install FinQuant```

### From GitHub
Get the code from GitHub:

```git clone https://github.com/fmilthaler/FinQuant.git```

Then inside `FinQuant` run:

```python setup.py install```

Alternatively, if you do not wish to install *FinQuant*, you can also download/clone it as stated above, and then make sure to add it to your ``PYTHONPATH``.

## Portfolio Management
This is the core of *FinQuant*. `finquant.portfolio.Portfolio` provides an object that holds prices of all stocks in your portfolio, and automatically computes the most common quantities for you. To make *FinQuant* an user-friendly program, that combines data analysis, visualisation and optimisation, the object provides interfaces to the main features that are provided in the modules in `./finquant/`.

To learn more about the object, please read through the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), docstring of the module/class, and/or have a look at the examples.

`finquant.portfolio.Portfolio` also provides a function `build_portfolio` which is designed to automatically generate an instance of `Portfolio` for the user's convenience. For more information on how to use `build_portfolio`, please refer to the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), its `docstring` and/or have a look at the examples.

## Returns
Daily returns of stocks are often computed in different ways. *FinQuant* provides three different ways of computing the daily returns in `finquant.returns`:
1. The cumulative return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/738645698dc3073b4bb52a0c078ae829.svg?invert_in_darkmode&sanitize=true"" align=middle width=194.52263655pt height=46.976899200000005pt/>
2. Percentage change of daily returns: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/27215e5f36fd0308b51ab510444edf0d.svg?invert_in_darkmode&sanitize=true"" align=middle width=126.07712039999997pt height=48.84266309999997pt/>
3. Log Return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/ef37c00ad58fe657a64041c3093e0640.svg?invert_in_darkmode&sanitize=true"" align=middle width=208.3327686pt height=57.53473439999999pt/>

In addition to those, the module provides the function `historical_mean_return(data, freq=252)`, which computes the historical mean of the daily returns over a time period `freq`.

## Moving Averages
The module `finquant.moving_average` allows the computation and visualisation of Moving Averages of the stocks listed in the portfolio is also provided. It entails functions to compute and visualise the
 - `sma`: Simple Moving Average, and
 - `ema`: Exponential Moving Average.
 - `compute_ma`: a Band of Moving Averages (of different time windows/spans) including Buy/Sell signals
 - `plot_bollinger_band`: a Bollinger Band for
   - `sma`,
   - `ema`.

## Portfolio Optimisation
### Efficient Frontier
An implementation of the Efficient Frontier (`finquant.efficient_frontier.EfficientFrontier`) allows for the optimisation of the portfolio for
 - `minimum_volatility` Minimum Volatility,
 - `maximum_sharpe_ratio` Maximum Sharpe Ratio
 - `efficient_return` Minimum Volatility for a given expected return
 - `efficient_volatility` Maximum Sharpe Ratio for a given target volatility

by performing a numerical solve to minimise/maximise an objective function.

Often it is useful to visualise the *Efficient Frontier* as well as the optimal solution. This can be achieved with the following methods:
 - `plot_efrontier`: Plots the *Efficient Frontier*. If no minimum/maximum Return values are provided, the algorithm automatically chooses those limits for the *Efficient Frontier* based on the minimum/maximum Return values of all stocks within the given portfolio.
 - `plot_optimal_portfolios`: Plots markers of the portfolios with the Minimum Volatility and Maximum Sharpe Ratio.

For reasons of user-friendliness, interfaces to these functions are provided in `finquant.portfolio.Portfolio`. Please have a look at the [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

### Monte Carlo
Alternatively a *Monte Carlo* run of `n` trials can be performed to find the optimal portfolios for
 - minimum volatility,
 - maximum Sharpe ratio

The approach branded as *Efficient Frontier* should be the preferred method for reasons of computational effort and accuracy. The latter approach is only included for the sake of completeness, and creation of beautiful plots.

## Examples
For more information about the project and details on how to use it, please
look at the examples provided in `./example`.

**Note**: In the below examples, `pf` refers to an instance of `finquant.portfolio.Portfolio`, the object that holds all stock prices and computes its most common quantities automatically. To make *FinQuant* a user-friendly program, that combines data analysis, visualisation and optimisation, the object also provides interfaces to the main features that are provided in the modules in `./finquant/` and are discussed throughout this README.

### Building a portfolio with data from web
`./example/Example-Build-Portfolio-from-web.py`: Shows how to use *FinQuant* to build a financial portfolio by downloading stock price data through the Python package `quandl`/`yfinance`.

### Building a portfolio with preset data
`./example/Example-Build-Portfolio-from-file.py`: Shows how to use *FinQuant* to build a financial portfolio by providing stock price data yourself, e.g. by reading data from disk/file.

### Analysis of a portfolio
`./example/Example-Analysis.py`: This example shows how to use an instance of `finquant.portfolio.Portfolio`, get the portfolio's quantities, such as
 - Expected Returns,
 - Volatility,
 - Downside Risk,
 - Value at Risk, 
 - Sharpe Ratio,
 - Sortino Ratio,
 - Treynor Ratio,
 - Beta parameter,
 - R squared coefficient.

It also shows how to extract individual stocks from the given portfolio. Moreover it shows how to compute and visualise:
 - the different Returns provided by the module `finquant.returns`,
 - *Moving Averages*, a band of *Moving Averages*, and a *Bollinger Band*.

### Optimisation of a portfolio
`./example/Example-Optimisation.py`: This example focusses on the optimisation of a portfolio. To achieve this, the example shows the usage of `finquant.efficient_frontier.EfficientFrontier` for optimising the portfolio, for the
 - Minimum Volatility
 - Maximum Sharpe Ratio
 - Minimum Volatility for a given target Return
 - Maximum Sharpe Ratio for a given target Volatility.

Furthermore, it is also shown how the entire *Efficient Frontier* and the optimal portfolios can be computed and visualised. If needed, it also gives an example of plotting the individual stocks of the given portfolio within the computed *Efficient Frontier*.

Also, the optimisation of a portfolio and its visualisation based on a *Monte Carlo* is shown.

Finally, *FinQuant*'s visualisation methods allow for overlays, if this is desired. Thus, with only the following few lines of code, one can create an overlay of the *Monte Carlo* run, the *Efficient Frontier*, its optimised portfolios for *Minimum Volatility* and *Maximum Sharpe Ratio*, as well as the portfolio's individual stocks.
",1062,1062,33,16,investment-portfolio,"[analysis, bollinger-bands, efficient-frontier, finance, financial, financial-analysis, financial-portfolio-management, investment, investment-analysis, investment-portfolio, investment-strategies, markowitz-portfolio, monte-carlo, monte-carlo-simulation, moving-average, optimisation, portfolio-management, portfolio-optimisation, portfolio-properties, returns]",00000
toastal,portfolio-balancer,N/A,https://github.com/toastal/portfolio-balancer,https://api.github.com/repos/portfolio-balancer/toastal,Crude Portfolio Balancing -- Just the Shares to move around,"# portfolio-balancer
",0,0,3,0,investment-portfolio,"[balancer, haskell, investment-portfolio]",00000
ssantoshp,Empyrial,N/A,https://github.com/ssantoshp/Empyrial,https://api.github.com/repos/Empyrial/ssantoshp,An Open Source Portfolio Backtesting Engine for Everyone | 面向所有人的开源投资组合回测引擎,"
# By Investors, For Investors.
<br><br><br><br>
<div align=""center"">
<img src=""https://user-images.githubusercontent.com/61618641/120909011-98f8a180-c670-11eb-8844-2d423ba3fa9c.png""/>
<br><br><br><br><br><br>
  
![](https://img.shields.io/badge/Downloads-101k-brightgreen)
![](https://img.shields.io/badge/license-MIT-orange)
![](https://img.shields.io/badge/version-2.1.3-blueviolet)
![](https://img.shields.io/badge/language-python🐍-blue)
![](https://img.shields.io/badge/activity-9.7/10-ff69b4)
![](https://img.shields.io/badge/Open%20source-💜-white)	
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1NqTkkP2u1p1g8W8erU-Y-rSSVbPUDvq2?usp=sharing)
  
 </div>
 
<br>

Want to read this in **Chinese**? Click [**here**](README_CN.md)

Empyrial is a Python-based **open-source quantitative investment** library dedicated to **financial institutions** and **retail investors**, officially released in March 2021. Already used by **thousands of people working in the finance industry**, Empyrial aims to become an all-in-one platform for **portfolio management**, **analysis**, and **optimization**.

Empyrial **empowers portfolio management** by bringing the best of **performance and risk analysis** in an **easy-to-understand**, **flexible** and **powerful framework**.

With Empyrial, you can easily analyze security or a portfolio in order to **get the best insights from it**. This is mainly a **wrapper** of financial analysis libraries such as **Quantstats** and **PyPortfolioOpt**.

<br>

<br>

<div align=""center"">
  
| Table of Contents 📖 | 
| --                     
| 1. [Installation](#installation) | 
| 2. [Features](#features) | 
| 3. [Documentation](#documentation) | 
| 4. [Usage example](#usage) |
| 5. [Download the tearsheet](#download-the-tearsheet) |
| 6. [Contribution and Issues](#contribution-and-issues) | 
| 7. [Contributors](#contributors) |
| 8. [Contact](#contact) |
| 9. [License](#license) |
	
</div>


## Installation

You can install Empyrial using pip:

```
pip install empyrial
```

For a better experience, **we advise you to use Empyrial on a notebook** (e.g., Jupyter, Google Colab)

_Note: macOS users will need to install [Xcode Command Line Tools](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)._

_Note: Windows users will need to install C++. ([download](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16), [install instructions](https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view))_

## Features

<div align=""center"">
  
| Feature 📰 | Status |
| --                      | ------    |
| Engine (backtesting + performance analysis) | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.2.4) on May 30, 2021 |
| Optimizer | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.3.6) on Jun 7, 2021 |
| Rebalancing | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.5.0) on Jun 27, 2021 |
| Risk manager | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.7.3) on Jul 5, 2021 |
| Sandbox | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.9.1) on Jul 17, 2021 |
| Support for custom data | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v2.1.3) on Aug 12, 2023 |
  
</div>

## Documentation

[Full documentation](https://empyrial.gitbook.io/empyrial/) (website)

## Usage

### Empyrial Engine

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""]  # SPY is set by default
)

empyrial(portfolio)
```

### Use custom data
See doc [here](https://empyrial.gitbook.io/empyrial/using-custom-data) to learn how to do this. 

### Calendar Rebalancing
A portfolio can be rebalanced for either a specific time period or for specific dates using the ```rebalance``` option.

#### Rebalance for Time Period
Time periods available for rebalancing are 
 ```2y```, ```1y```, ```6mo```, ```quarterly```, ```monthly```  

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = ""1y""
)

empyrial(portfolio)
```

#### Rebalance for Custom Dates
You can rebalance a portfolio by specifying a list of custom dates.  
⚠️ When using custom dates, the first date of the list must correspond with the ```start_date``` and the last element should correspond to the ```end_date``` which is **today's date** by default.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = [""2018-06-09"", ""2019-01-01"", ""2020-01-01"", ""2021-01-01""]
)

empyrial(portfolio)
```

### Optimizer
The default optimizer is **equal weighting**. You can specify custom weights, if desired.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.1, 0.3, 0.15, 0.25, 0.2],   # custom weights
    rebalance = ""1y""  # rebalance every year
)

empyrial(portfolio)
```

You can also use the **built-in optimizers**. There are 4 optimizers available:  

- ```""EF""```: **Global Efficient Frontier**  [Example](https://empyrial.gitbook.io/empyrial/optimization/global-efficient-frontier)
- ```""MEANVAR""```: **Mean-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/mean-variance)
- ```""HRP""```: **Hierarchical Risk Parity**  [Example](https://empyrial.gitbook.io/empyrial/optimization/hierarchical-risk-parity)
- ```""MINVAR""```: **Minimum-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/minimum-variance)


```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
    optimizer = ""EF"",
    rebalance = ""1y""  # rebalance every year
)

portfolio.weights
```

> Output:

```
[0.0, 0.0, 0.0348, 0.9652, 0.0]
```  
We can see that the allocation has been optimized.

### Risk Manager
3 Risk Managers are available:

- **Max Drawdown**: ```{""Max Drawdown"" : -0.3}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/max-drawdown)
- **Take Profit**: ```{""Take Profit"" : 0.4}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/take-profit)
- **Stop Loss**: ```{""Stop Loss"" : -0.2}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/stop-loss)

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio= [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    optimizer = ""EF"",
    rebalance = ""1y"",  # rebalance every year
    risk_manager = {""Max Drawdown"" : -0.2}  # Stop the investment when the drawdown becomes superior to -20%
)

empyrial(portfolio)
``` 

### Empyrial Outputs

<div align=""center"">

![image](https://user-images.githubusercontent.com/61618641/126879140-ea03ff17-a7c6-481a-bb3e-61c055b31267.png)
![image](https://user-images.githubusercontent.com/61618641/126879203-4390813c-a4f2-41b9-916b-e03dd8bafffb.png)
![image](https://user-images.githubusercontent.com/61618641/128025087-04afed7e-96ab-4730-9bd8-98f5491b2b5d.png)
![image](https://user-images.githubusercontent.com/61618641/126879204-01fe1eca-00b8-438e-b489-0213535dd31b.png)
![image](https://user-images.githubusercontent.com/61618641/126879210-9fd61e2b-01ab-4bfd-b679-3b1867d9302d.png)
![image](https://user-images.githubusercontent.com/61618641/126879215-e24c929a-55be-4912-8e2c-043e31ff2a95.png)
![image](https://user-images.githubusercontent.com/61618641/126879221-455b8ffa-c958-4ac9-ae98-d15b4c5f0826.png)
![image](https://user-images.githubusercontent.com/61618641/126879222-08906643-16db-441e-a099-7ac3b00bdbd7.png)
![image](https://user-images.githubusercontent.com/61618641/126879223-f1116dc3-cceb-493c-93b3-2d3810cae789.png)
![image](https://user-images.githubusercontent.com/61618641/126879225-dc879b71-2070-46ed-a8ad-e90880050be8.png)
![image](https://user-images.githubusercontent.com/61618641/126879297-cb78743a-6d43-465b-8021-d4b62a659828.png)

</div>

## Download the Tearsheet
You can use the ```get_report()``` function of Empyrial to generate a tearsheet, and then download this as a PDF document.

```py
from empyrial import get_report, Engine

portfolio = Engine(
      start_date = ""2018-08-01"",
      portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
      optimizer = ""EF"",
      rebalance = ""1y"", #rebalance every year
      risk_manager = {""Stop Loss"" : -0.2}
)

get_report(portfolio)
``` 

> Output:

![image](https://user-images.githubusercontent.com/61618641/126879406-3ff8eb14-e08b-4103-b46d-02597634d469.png)


## Stargazers over time

<div align=""center"">
	
![追星族的时间](https://starchart.cc/ssantoshp/empyrial.svg)
	
</div>

## Contribution and Issues
Empyrial uses GitHub to host its source code.  *Learn more about the [Github flow](https://docs.github.com/en/get-started/quickstart/github-flow).*  

For larger changes (e.g., new feature request, large refactoring), please open an issue to discuss first.  

* If you wish to create a new Issue, then [click here to create a new issue](https://github.com/ssantoshp/Empyrial/issues/new/choose).  

Smaller improvements (e.g., document improvements, bugfixes) can be handled by the Pull Request process of GitHub: [pull requests](https://github.com/ssantoshp/Empyrial/pulls).  

* To contribute to the code, you will need to do the following:  

 * [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository) [Empyrial](https://github.com/ssantoshp/Empyrial) - Click the **Fork** button at the upper right corner of this page. 
 * [Clone your own fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository).  E.g., ```git clone https://github.com/ssantoshp/Empyrial.git```  
  *If your fork is out of date, then will you need to manually sync your fork: [Synchronization method](https://help.github.com/articles/syncing-a-fork/)*
 * [Create a Pull Request](https://github.com/ssantoshp/Empyrial/pulls) using **your fork** as the `compare head repository`. 

You contributions will be reviewed, potentially modified, and hopefully merged into Empyrial.  

## Contributors

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

[![All Contributors](https://img.shields.io/badge/all_contributors-11-orange.svg?style=flat-square)](#contributors-)

<table>
  <tr>
    <td align=""center""><a href=""https://github.com/BrendanGlancy""><img src=""https://avatars.githubusercontent.com/u/61941978?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Brendan Glancy</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/rslopes""><img src=""https://avatars.githubusercontent.com/u/24928343?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Renan Lopes</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/markthebault""><img src=""https://avatars.githubusercontent.com/u/3846664?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Mark Thebault</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/diegodalvarez""><img src=""https://avatars.githubusercontent.com/u/48641554?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Diego Alvarez</b></sub></a><br /><a title=""Code"">💻🐛</a></td>
    <td align=""center""><a href=""https://github.com/rakeshbhat9""><img src=""https://avatars.githubusercontent.com/u/11472305?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Rakesh Bhat</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Haizzz""><img src=""https://avatars.githubusercontent.com/u/5275680?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Anh Le</b></sub></a><br /><a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/TonyZhangkz""><img src=""https://avatars.githubusercontent.com/u/65281213?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Tony Zhang</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/eltociear""><img src=""https://avatars.githubusercontent.com/u/22633385?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a title=""Code"">✒️</a></td>
    <td align=""center""><a href=""https://www.youtube.com/watch?v=-4qx3tbtTgs""><img src=""https://avatars.githubusercontent.com/u/50767660?v=4"" width=""100px;"" alt=""""/><br /><sub><b>QuantNomad</b></sub></a><br /><a title=""Code"">📹</a></td>
    <td align=""center""><a href=""https://github.com/buckleyc""><img src=""https://avatars.githubusercontent.com/u/4175900?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Buckley</b></sub></a><br /><a title=""Code"">✒️💻</a></td>
    <td align=""center""><a href=""https://github.com/agn35""><img src=""https://lh3.googleusercontent.com/a-/AOh14GhXGFHHpVQTL2r23oEXFssH0f7RyoGDihrS_HmT=s48"" width=""100px;"" alt=""""/><br /><sub><b>Adam Nelsson</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/rgleavenworth""><img src=""https://avatars.githubusercontent.com/u/87843950?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ranjan Grover</b></sub></a><br /><a title=""Code"">🐛💻</a></td>
  </tr>
</table>

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. **Contributions of any kind are welcome!**

## Credit

This library has also been made possible because of the work of these incredible people:
- [**Ran Aroussi**](https://github.com/ranaroussi) for the [**Quantstats library**](https://github.com/ranaroussi/quantstats) 
- [**Robert Martin**](https://github.com/robertmartin8) for the [**PyPortfolioOpt**](https://github.com/robertmartin8/PyPortfolioOpt) 

## Contact

You are welcome to contact us by email at **santoshpassoubady@gmail.com** or in Empyrial's [discussion space](https://github.com/ssantoshp/Empyrial/discussions)

## License

MIT
",784,784,27,1,investment-portfolio,"[backtesting, finance, fintech, futures, investment, investment-analysis, investment-portfolio, portfolio-analysis, portfolio-management, portfolio-optimization, python, quant, quantitative-analysis, quantitative-finance, stock, stock-data, stock-market]",00000
ericyung1998,bond-investment,N/A,https://github.com/ericyung1998/bond-investment,https://api.github.com/repos/bond-investment/ericyung1998,[EXCEL] Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain,"# bond-investment

ISOM3900 (Decision Analytics): Project
- Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain

<br>

- Learning Objectives: apply decision analytics concepts on bond investment
- Improvements: consolidate and polish final report
 
",2,2,1,0,investment-portfolio,"[bonds, excel, investment-portfolio, linear-programming, markov-chain, strategic-planning]",00000
ericyung1998,bond-investment,N/A,https://github.com/ericyung1998/bond-investment,https://api.github.com/repos/bond-investment/ericyung1998,[EXCEL] Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain,"# bond-investment

ISOM3900 (Decision Analytics): Project
- Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain

<br>

- Learning Objectives: apply decision analytics concepts on bond investment
- Improvements: consolidate and polish final report
 
",2,2,1,0,investment-portfolio,"[bonds, excel, investment-portfolio, linear-programming, markov-chain, strategic-planning]",00000
fmilthaler,FinQuant,N/A,https://github.com/fmilthaler/FinQuant,https://api.github.com/repos/FinQuant/fmilthaler,"A program for financial portfolio management, analysis and optimisation.","<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/finquant-logo.png"" width=""45%"">
</p>

<p align=""center"">
  <a href=""https://GitHub.com/fmilthaler/FinQuant/stargazers/"">
    <img src=""https://img.shields.io/github/stars/fmilthaler/FinQuant.svg?style=social&label=Star"" alt='pypi'>
  </a>
  <a href=""https://pypi.org/project/FinQuant"">
    <img src=""https://img.shields.io/badge/pypi-v0.7.0-brightgreen.svg?style=popout"" alt='pypi'>
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant"">
    <img src=""https://github.com/fmilthaler/finquant/actions/workflows/pytest.yml/badge.svg?branch=master"" alt='GitHub Actions'>
  </a>
  <a href=""http://finquant.readthedocs.io/"">
    <img src=""https://img.shields.io/readthedocs/finquant.svg?style=popout"" alt=""docs"">
  </a>
  <a href=""https://GitHub.com/fmilthaler/FinQuant/graphs/contributors/"">
    <img src=""https://img.shields.io/github/contributors/fmilthaler/FinQuant.svg?style=popout"" alt=""contributors"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/issues"">
    <img src=""https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=popout"" alt=""contributions"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/blob/master/LICENSE.txt"">
    <img src=""https://img.shields.io/github/license/fmilthaler/FinQuant.svg?style=popout"" alt=""license"">
  </a>
</p>

# FinQuant
*FinQuant* is a program for financial **portfolio management, analysis and optimisation**.

This README only gives a brief overview of *FinQuant*. The interested reader should refer to its [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

## Table of contents
 - [Motivation](#Motivation)
 - [Installation](#Installation)
 - [Portfolio Management](#Portfolio-Management)
 - [Returns](#Returns)
 - [Moving Averages](#Moving-Averages)
 - [Portfolio Optimisation](#Portfolio-Optimisation)
   - [Efficient Frontier](#Efficient-Frontier)
   - [Monte Carlo](#Monte-Carlo)
 - [Examples](#Examples)
   - [Building a portfolio with data from web](#Building-a-portfolio-with-data-from-web)
   - [Building a portfolio with preset data](#Building-a-portfolio-with-preset-data)
   - [Analysis of a portfolio](#Analysis-of-a-portfolio)
   - [Optimisation of a portfolio](#Optimisation-of-a-portfolio)

## Motivation
Within a few lines of code, *FinQuant* can generate an object that holds your stock prices of your desired financial portfolio, analyses it, and can create plots of different kinds of *Returns*, *Moving Averages*, *Moving Average Bands with buy/sell signals*, and *Bollinger Bands*. It also allows for the optimisation based on the *Efficient Frontier* or a *Monte Carlo* run of the financial portfolio within a few lines of code. Some of the results are shown here.

### Automatically generating an instance of `Portfolio`
`finquant.portfolio.build_portfolio` is a function that eases the creating of your portfolio. See below for one of several ways of using `build_portfolio`.
```
from finquant.portfolio import build_portfolio
names = ['GOOG', 'AMZN', 'MCD', 'DIS']
start_date = '2015-01-01'
end_date = '2017-12-31'
pf = build_portfolio(names=names,
                    start_date=start_date,
                    end_date=end_date)
```
`pf` is an instance of `finquant.portfolio.Portfolio`, which contains the prices of the stocks in your portfolio. Then...
```
pf.data.head(3)
```
yields
```
              GOOG    AMZN        MCD        DIS
Date
2015-01-02  524.81  308.52  85.783317  90.586146
2015-01-05  513.87  302.19  84.835892  89.262380
2015-01-06  501.96  295.29  84.992263  88.788916
```

### Portfolio properties
Nicely printing out the portfolio's properties
```
pf.properties()
```
Depending on the stocks within your portfolio, the output looks something like the below.
```
----------------------------------------------------------------------
Stocks: GOOG, AMZN, MCD, DIS
Time window/frequency: 252
Risk free rate: 0.005
Portfolio expected return: 0.266
Portfolio volatility: 0.156
Portfolio Sharpe ratio: 1.674

Skewness:
       GOOG      AMZN      MCD       DIS
0  0.124184  0.087516  0.58698  0.040569

Kurtosis:
       GOOG      AMZN       MCD       DIS
0 -0.751818 -0.856101 -0.602008 -0.892666

Information:
   Allocation  Name
0        0.25  GOOG
1        0.25  AMZN
2        0.25   MCD
3        0.25   DIS
----------------------------------------------------------------------
```

### Cumulative Return
```
pf.comp_cumulative_returns().plot().axhline(y = 0, color = ""black"", lw = 3)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/cumulative-return.svg?sanitize=true"" width=""60%"">
</p>

### Band Moving Average (Buy/Sell Signals)
```
from finquant.moving_average import compute_ma, ema
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
spans = [10, 50, 100, 150, 200]
ma = compute_ma(dis, ema, spans, plot=True)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ma-band-buysell-signals.svg?sanitize=true"" width=""60%"">
</p>

### Bollinger Band
```
from finquant.moving_average import plot_bollinger_band, sma
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
span=20
plot_bollinger_band(dis, sma, span)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/bollinger-band.svg?sanitize=true"" width=""60%"">
</p>

### Portfolio Optimisation
```
# performs and plots results of Monte Carlo run (5000 iterations)
opt_w, opt_res = pf.mc_optimisation(num_trials=5000)
# plots the results of the Monte Carlo optimisation
pf.mc_plot_results()
# plots the Efficient Frontier
pf.ef_plot_efrontier()
# plots optimal portfolios based on Efficient Frontier
pf.ef.plot_optimal_portfolios()
# plots individual plots of the portfolio
pf.plot_stocks()
```
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ef-mc-overlay.svg?sanitize=true"" width=""60%"">
</p>

## Installation
As it is common for open-source projects, there are several ways to get hold of the code. Choose whichever suits you and your purposes best.

### Dependencies
*FinQuant* depends on the following Python packages:
 - python>=3.10
 - numpy>=1.15
 - pandas>=2.0
 - matplotlib>=3.0
 - quandl>=3.4.5
 - yfinance>=0.1.43
 - scipy>=1.2.0
 - scikit-learn>=1.3.0

### From PyPI
*FinQuant* can be obtained from PyPI

```pip install FinQuant```

### From GitHub
Get the code from GitHub:

```git clone https://github.com/fmilthaler/FinQuant.git```

Then inside `FinQuant` run:

```python setup.py install```

Alternatively, if you do not wish to install *FinQuant*, you can also download/clone it as stated above, and then make sure to add it to your ``PYTHONPATH``.

## Portfolio Management
This is the core of *FinQuant*. `finquant.portfolio.Portfolio` provides an object that holds prices of all stocks in your portfolio, and automatically computes the most common quantities for you. To make *FinQuant* an user-friendly program, that combines data analysis, visualisation and optimisation, the object provides interfaces to the main features that are provided in the modules in `./finquant/`.

To learn more about the object, please read through the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), docstring of the module/class, and/or have a look at the examples.

`finquant.portfolio.Portfolio` also provides a function `build_portfolio` which is designed to automatically generate an instance of `Portfolio` for the user's convenience. For more information on how to use `build_portfolio`, please refer to the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), its `docstring` and/or have a look at the examples.

## Returns
Daily returns of stocks are often computed in different ways. *FinQuant* provides three different ways of computing the daily returns in `finquant.returns`:
1. The cumulative return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/738645698dc3073b4bb52a0c078ae829.svg?invert_in_darkmode&sanitize=true"" align=middle width=194.52263655pt height=46.976899200000005pt/>
2. Percentage change of daily returns: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/27215e5f36fd0308b51ab510444edf0d.svg?invert_in_darkmode&sanitize=true"" align=middle width=126.07712039999997pt height=48.84266309999997pt/>
3. Log Return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/ef37c00ad58fe657a64041c3093e0640.svg?invert_in_darkmode&sanitize=true"" align=middle width=208.3327686pt height=57.53473439999999pt/>

In addition to those, the module provides the function `historical_mean_return(data, freq=252)`, which computes the historical mean of the daily returns over a time period `freq`.

## Moving Averages
The module `finquant.moving_average` allows the computation and visualisation of Moving Averages of the stocks listed in the portfolio is also provided. It entails functions to compute and visualise the
 - `sma`: Simple Moving Average, and
 - `ema`: Exponential Moving Average.
 - `compute_ma`: a Band of Moving Averages (of different time windows/spans) including Buy/Sell signals
 - `plot_bollinger_band`: a Bollinger Band for
   - `sma`,
   - `ema`.

## Portfolio Optimisation
### Efficient Frontier
An implementation of the Efficient Frontier (`finquant.efficient_frontier.EfficientFrontier`) allows for the optimisation of the portfolio for
 - `minimum_volatility` Minimum Volatility,
 - `maximum_sharpe_ratio` Maximum Sharpe Ratio
 - `efficient_return` Minimum Volatility for a given expected return
 - `efficient_volatility` Maximum Sharpe Ratio for a given target volatility

by performing a numerical solve to minimise/maximise an objective function.

Often it is useful to visualise the *Efficient Frontier* as well as the optimal solution. This can be achieved with the following methods:
 - `plot_efrontier`: Plots the *Efficient Frontier*. If no minimum/maximum Return values are provided, the algorithm automatically chooses those limits for the *Efficient Frontier* based on the minimum/maximum Return values of all stocks within the given portfolio.
 - `plot_optimal_portfolios`: Plots markers of the portfolios with the Minimum Volatility and Maximum Sharpe Ratio.

For reasons of user-friendliness, interfaces to these functions are provided in `finquant.portfolio.Portfolio`. Please have a look at the [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

### Monte Carlo
Alternatively a *Monte Carlo* run of `n` trials can be performed to find the optimal portfolios for
 - minimum volatility,
 - maximum Sharpe ratio

The approach branded as *Efficient Frontier* should be the preferred method for reasons of computational effort and accuracy. The latter approach is only included for the sake of completeness, and creation of beautiful plots.

## Examples
For more information about the project and details on how to use it, please
look at the examples provided in `./example`.

**Note**: In the below examples, `pf` refers to an instance of `finquant.portfolio.Portfolio`, the object that holds all stock prices and computes its most common quantities automatically. To make *FinQuant* a user-friendly program, that combines data analysis, visualisation and optimisation, the object also provides interfaces to the main features that are provided in the modules in `./finquant/` and are discussed throughout this README.

### Building a portfolio with data from web
`./example/Example-Build-Portfolio-from-web.py`: Shows how to use *FinQuant* to build a financial portfolio by downloading stock price data through the Python package `quandl`/`yfinance`.

### Building a portfolio with preset data
`./example/Example-Build-Portfolio-from-file.py`: Shows how to use *FinQuant* to build a financial portfolio by providing stock price data yourself, e.g. by reading data from disk/file.

### Analysis of a portfolio
`./example/Example-Analysis.py`: This example shows how to use an instance of `finquant.portfolio.Portfolio`, get the portfolio's quantities, such as
 - Expected Returns,
 - Volatility,
 - Downside Risk,
 - Value at Risk, 
 - Sharpe Ratio,
 - Sortino Ratio,
 - Treynor Ratio,
 - Beta parameter,
 - R squared coefficient.

It also shows how to extract individual stocks from the given portfolio. Moreover it shows how to compute and visualise:
 - the different Returns provided by the module `finquant.returns`,
 - *Moving Averages*, a band of *Moving Averages*, and a *Bollinger Band*.

### Optimisation of a portfolio
`./example/Example-Optimisation.py`: This example focusses on the optimisation of a portfolio. To achieve this, the example shows the usage of `finquant.efficient_frontier.EfficientFrontier` for optimising the portfolio, for the
 - Minimum Volatility
 - Maximum Sharpe Ratio
 - Minimum Volatility for a given target Return
 - Maximum Sharpe Ratio for a given target Volatility.

Furthermore, it is also shown how the entire *Efficient Frontier* and the optimal portfolios can be computed and visualised. If needed, it also gives an example of plotting the individual stocks of the given portfolio within the computed *Efficient Frontier*.

Also, the optimisation of a portfolio and its visualisation based on a *Monte Carlo* is shown.

Finally, *FinQuant*'s visualisation methods allow for overlays, if this is desired. Thus, with only the following few lines of code, one can create an overlay of the *Monte Carlo* run, the *Efficient Frontier*, its optimised portfolios for *Minimum Volatility* and *Maximum Sharpe Ratio*, as well as the portfolio's individual stocks.
",1062,1062,33,16,investment-portfolio,"[analysis, bollinger-bands, efficient-frontier, finance, financial, financial-analysis, financial-portfolio-management, investment, investment-analysis, investment-portfolio, investment-strategies, markowitz-portfolio, monte-carlo, monte-carlo-simulation, moving-average, optimisation, portfolio-management, portfolio-optimisation, portfolio-properties, returns]",00000
toastal,portfolio-balancer,N/A,https://github.com/toastal/portfolio-balancer,https://api.github.com/repos/portfolio-balancer/toastal,Crude Portfolio Balancing -- Just the Shares to move around,"# portfolio-balancer
",0,0,3,0,investment-portfolio,"[balancer, haskell, investment-portfolio]",00000
ssantoshp,Empyrial,N/A,https://github.com/ssantoshp/Empyrial,https://api.github.com/repos/Empyrial/ssantoshp,An Open Source Portfolio Backtesting Engine for Everyone | 面向所有人的开源投资组合回测引擎,"
# By Investors, For Investors.
<br><br><br><br>
<div align=""center"">
<img src=""https://user-images.githubusercontent.com/61618641/120909011-98f8a180-c670-11eb-8844-2d423ba3fa9c.png""/>
<br><br><br><br><br><br>
  
![](https://img.shields.io/badge/Downloads-101k-brightgreen)
![](https://img.shields.io/badge/license-MIT-orange)
![](https://img.shields.io/badge/version-2.1.3-blueviolet)
![](https://img.shields.io/badge/language-python🐍-blue)
![](https://img.shields.io/badge/activity-9.7/10-ff69b4)
![](https://img.shields.io/badge/Open%20source-💜-white)	
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1NqTkkP2u1p1g8W8erU-Y-rSSVbPUDvq2?usp=sharing)
  
 </div>
 
<br>

Want to read this in **Chinese**? Click [**here**](README_CN.md)

Empyrial is a Python-based **open-source quantitative investment** library dedicated to **financial institutions** and **retail investors**, officially released in March 2021. Already used by **thousands of people working in the finance industry**, Empyrial aims to become an all-in-one platform for **portfolio management**, **analysis**, and **optimization**.

Empyrial **empowers portfolio management** by bringing the best of **performance and risk analysis** in an **easy-to-understand**, **flexible** and **powerful framework**.

With Empyrial, you can easily analyze security or a portfolio in order to **get the best insights from it**. This is mainly a **wrapper** of financial analysis libraries such as **Quantstats** and **PyPortfolioOpt**.

<br>

<br>

<div align=""center"">
  
| Table of Contents 📖 | 
| --                     
| 1. [Installation](#installation) | 
| 2. [Features](#features) | 
| 3. [Documentation](#documentation) | 
| 4. [Usage example](#usage) |
| 5. [Download the tearsheet](#download-the-tearsheet) |
| 6. [Contribution and Issues](#contribution-and-issues) | 
| 7. [Contributors](#contributors) |
| 8. [Contact](#contact) |
| 9. [License](#license) |
	
</div>


## Installation

You can install Empyrial using pip:

```
pip install empyrial
```

For a better experience, **we advise you to use Empyrial on a notebook** (e.g., Jupyter, Google Colab)

_Note: macOS users will need to install [Xcode Command Line Tools](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)._

_Note: Windows users will need to install C++. ([download](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16), [install instructions](https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view))_

## Features

<div align=""center"">
  
| Feature 📰 | Status |
| --                      | ------    |
| Engine (backtesting + performance analysis) | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.2.4) on May 30, 2021 |
| Optimizer | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.3.6) on Jun 7, 2021 |
| Rebalancing | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.5.0) on Jun 27, 2021 |
| Risk manager | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.7.3) on Jul 5, 2021 |
| Sandbox | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.9.1) on Jul 17, 2021 |
| Support for custom data | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v2.1.3) on Aug 12, 2023 |
  
</div>

## Documentation

[Full documentation](https://empyrial.gitbook.io/empyrial/) (website)

## Usage

### Empyrial Engine

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""]  # SPY is set by default
)

empyrial(portfolio)
```

### Use custom data
See doc [here](https://empyrial.gitbook.io/empyrial/using-custom-data) to learn how to do this. 

### Calendar Rebalancing
A portfolio can be rebalanced for either a specific time period or for specific dates using the ```rebalance``` option.

#### Rebalance for Time Period
Time periods available for rebalancing are 
 ```2y```, ```1y```, ```6mo```, ```quarterly```, ```monthly```  

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = ""1y""
)

empyrial(portfolio)
```

#### Rebalance for Custom Dates
You can rebalance a portfolio by specifying a list of custom dates.  
⚠️ When using custom dates, the first date of the list must correspond with the ```start_date``` and the last element should correspond to the ```end_date``` which is **today's date** by default.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = [""2018-06-09"", ""2019-01-01"", ""2020-01-01"", ""2021-01-01""]
)

empyrial(portfolio)
```

### Optimizer
The default optimizer is **equal weighting**. You can specify custom weights, if desired.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.1, 0.3, 0.15, 0.25, 0.2],   # custom weights
    rebalance = ""1y""  # rebalance every year
)

empyrial(portfolio)
```

You can also use the **built-in optimizers**. There are 4 optimizers available:  

- ```""EF""```: **Global Efficient Frontier**  [Example](https://empyrial.gitbook.io/empyrial/optimization/global-efficient-frontier)
- ```""MEANVAR""```: **Mean-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/mean-variance)
- ```""HRP""```: **Hierarchical Risk Parity**  [Example](https://empyrial.gitbook.io/empyrial/optimization/hierarchical-risk-parity)
- ```""MINVAR""```: **Minimum-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/minimum-variance)


```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
    optimizer = ""EF"",
    rebalance = ""1y""  # rebalance every year
)

portfolio.weights
```

> Output:

```
[0.0, 0.0, 0.0348, 0.9652, 0.0]
```  
We can see that the allocation has been optimized.

### Risk Manager
3 Risk Managers are available:

- **Max Drawdown**: ```{""Max Drawdown"" : -0.3}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/max-drawdown)
- **Take Profit**: ```{""Take Profit"" : 0.4}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/take-profit)
- **Stop Loss**: ```{""Stop Loss"" : -0.2}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/stop-loss)

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio= [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    optimizer = ""EF"",
    rebalance = ""1y"",  # rebalance every year
    risk_manager = {""Max Drawdown"" : -0.2}  # Stop the investment when the drawdown becomes superior to -20%
)

empyrial(portfolio)
``` 

### Empyrial Outputs

<div align=""center"">

![image](https://user-images.githubusercontent.com/61618641/126879140-ea03ff17-a7c6-481a-bb3e-61c055b31267.png)
![image](https://user-images.githubusercontent.com/61618641/126879203-4390813c-a4f2-41b9-916b-e03dd8bafffb.png)
![image](https://user-images.githubusercontent.com/61618641/128025087-04afed7e-96ab-4730-9bd8-98f5491b2b5d.png)
![image](https://user-images.githubusercontent.com/61618641/126879204-01fe1eca-00b8-438e-b489-0213535dd31b.png)
![image](https://user-images.githubusercontent.com/61618641/126879210-9fd61e2b-01ab-4bfd-b679-3b1867d9302d.png)
![image](https://user-images.githubusercontent.com/61618641/126879215-e24c929a-55be-4912-8e2c-043e31ff2a95.png)
![image](https://user-images.githubusercontent.com/61618641/126879221-455b8ffa-c958-4ac9-ae98-d15b4c5f0826.png)
![image](https://user-images.githubusercontent.com/61618641/126879222-08906643-16db-441e-a099-7ac3b00bdbd7.png)
![image](https://user-images.githubusercontent.com/61618641/126879223-f1116dc3-cceb-493c-93b3-2d3810cae789.png)
![image](https://user-images.githubusercontent.com/61618641/126879225-dc879b71-2070-46ed-a8ad-e90880050be8.png)
![image](https://user-images.githubusercontent.com/61618641/126879297-cb78743a-6d43-465b-8021-d4b62a659828.png)

</div>

## Download the Tearsheet
You can use the ```get_report()``` function of Empyrial to generate a tearsheet, and then download this as a PDF document.

```py
from empyrial import get_report, Engine

portfolio = Engine(
      start_date = ""2018-08-01"",
      portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
      optimizer = ""EF"",
      rebalance = ""1y"", #rebalance every year
      risk_manager = {""Stop Loss"" : -0.2}
)

get_report(portfolio)
``` 

> Output:

![image](https://user-images.githubusercontent.com/61618641/126879406-3ff8eb14-e08b-4103-b46d-02597634d469.png)


## Stargazers over time

<div align=""center"">
	
![追星族的时间](https://starchart.cc/ssantoshp/empyrial.svg)
	
</div>

## Contribution and Issues
Empyrial uses GitHub to host its source code.  *Learn more about the [Github flow](https://docs.github.com/en/get-started/quickstart/github-flow).*  

For larger changes (e.g., new feature request, large refactoring), please open an issue to discuss first.  

* If you wish to create a new Issue, then [click here to create a new issue](https://github.com/ssantoshp/Empyrial/issues/new/choose).  

Smaller improvements (e.g., document improvements, bugfixes) can be handled by the Pull Request process of GitHub: [pull requests](https://github.com/ssantoshp/Empyrial/pulls).  

* To contribute to the code, you will need to do the following:  

 * [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository) [Empyrial](https://github.com/ssantoshp/Empyrial) - Click the **Fork** button at the upper right corner of this page. 
 * [Clone your own fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository).  E.g., ```git clone https://github.com/ssantoshp/Empyrial.git```  
  *If your fork is out of date, then will you need to manually sync your fork: [Synchronization method](https://help.github.com/articles/syncing-a-fork/)*
 * [Create a Pull Request](https://github.com/ssantoshp/Empyrial/pulls) using **your fork** as the `compare head repository`. 

You contributions will be reviewed, potentially modified, and hopefully merged into Empyrial.  

## Contributors

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

[![All Contributors](https://img.shields.io/badge/all_contributors-11-orange.svg?style=flat-square)](#contributors-)

<table>
  <tr>
    <td align=""center""><a href=""https://github.com/BrendanGlancy""><img src=""https://avatars.githubusercontent.com/u/61941978?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Brendan Glancy</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/rslopes""><img src=""https://avatars.githubusercontent.com/u/24928343?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Renan Lopes</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/markthebault""><img src=""https://avatars.githubusercontent.com/u/3846664?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Mark Thebault</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/diegodalvarez""><img src=""https://avatars.githubusercontent.com/u/48641554?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Diego Alvarez</b></sub></a><br /><a title=""Code"">💻🐛</a></td>
    <td align=""center""><a href=""https://github.com/rakeshbhat9""><img src=""https://avatars.githubusercontent.com/u/11472305?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Rakesh Bhat</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Haizzz""><img src=""https://avatars.githubusercontent.com/u/5275680?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Anh Le</b></sub></a><br /><a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/TonyZhangkz""><img src=""https://avatars.githubusercontent.com/u/65281213?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Tony Zhang</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/eltociear""><img src=""https://avatars.githubusercontent.com/u/22633385?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a title=""Code"">✒️</a></td>
    <td align=""center""><a href=""https://www.youtube.com/watch?v=-4qx3tbtTgs""><img src=""https://avatars.githubusercontent.com/u/50767660?v=4"" width=""100px;"" alt=""""/><br /><sub><b>QuantNomad</b></sub></a><br /><a title=""Code"">📹</a></td>
    <td align=""center""><a href=""https://github.com/buckleyc""><img src=""https://avatars.githubusercontent.com/u/4175900?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Buckley</b></sub></a><br /><a title=""Code"">✒️💻</a></td>
    <td align=""center""><a href=""https://github.com/agn35""><img src=""https://lh3.googleusercontent.com/a-/AOh14GhXGFHHpVQTL2r23oEXFssH0f7RyoGDihrS_HmT=s48"" width=""100px;"" alt=""""/><br /><sub><b>Adam Nelsson</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/rgleavenworth""><img src=""https://avatars.githubusercontent.com/u/87843950?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ranjan Grover</b></sub></a><br /><a title=""Code"">🐛💻</a></td>
  </tr>
</table>

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. **Contributions of any kind are welcome!**

## Credit

This library has also been made possible because of the work of these incredible people:
- [**Ran Aroussi**](https://github.com/ranaroussi) for the [**Quantstats library**](https://github.com/ranaroussi/quantstats) 
- [**Robert Martin**](https://github.com/robertmartin8) for the [**PyPortfolioOpt**](https://github.com/robertmartin8/PyPortfolioOpt) 

## Contact

You are welcome to contact us by email at **santoshpassoubady@gmail.com** or in Empyrial's [discussion space](https://github.com/ssantoshp/Empyrial/discussions)

## License

MIT
",784,784,27,1,investment-portfolio,"[backtesting, finance, fintech, futures, investment, investment-analysis, investment-portfolio, portfolio-analysis, portfolio-management, portfolio-optimization, python, quant, quantitative-analysis, quantitative-finance, stock, stock-data, stock-market]",00000
ericyung1998,bond-investment,N/A,https://github.com/ericyung1998/bond-investment,https://api.github.com/repos/bond-investment/ericyung1998,[EXCEL] Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain,"# bond-investment

ISOM3900 (Decision Analytics): Project
- Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain

<br>

- Learning Objectives: apply decision analytics concepts on bond investment
- Improvements: consolidate and polish final report
 
",2,2,1,0,investment-portfolio,"[bonds, excel, investment-portfolio, linear-programming, markov-chain, strategic-planning]",00000
ssantoshp,Empyrial,N/A,https://github.com/ssantoshp/Empyrial,https://api.github.com/repos/Empyrial/ssantoshp,An Open Source Portfolio Backtesting Engine for Everyone | 面向所有人的开源投资组合回测引擎,"
# By Investors, For Investors.
<br><br><br><br>
<div align=""center"">
<img src=""https://user-images.githubusercontent.com/61618641/120909011-98f8a180-c670-11eb-8844-2d423ba3fa9c.png""/>
<br><br><br><br><br><br>
  
![](https://img.shields.io/badge/Downloads-101k-brightgreen)
![](https://img.shields.io/badge/license-MIT-orange)
![](https://img.shields.io/badge/version-2.1.3-blueviolet)
![](https://img.shields.io/badge/language-python🐍-blue)
![](https://img.shields.io/badge/activity-9.7/10-ff69b4)
![](https://img.shields.io/badge/Open%20source-💜-white)	
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1NqTkkP2u1p1g8W8erU-Y-rSSVbPUDvq2?usp=sharing)
  
 </div>
 
<br>

Want to read this in **Chinese**? Click [**here**](README_CN.md)

Empyrial is a Python-based **open-source quantitative investment** library dedicated to **financial institutions** and **retail investors**, officially released in March 2021. Already used by **thousands of people working in the finance industry**, Empyrial aims to become an all-in-one platform for **portfolio management**, **analysis**, and **optimization**.

Empyrial **empowers portfolio management** by bringing the best of **performance and risk analysis** in an **easy-to-understand**, **flexible** and **powerful framework**.

With Empyrial, you can easily analyze security or a portfolio in order to **get the best insights from it**. This is mainly a **wrapper** of financial analysis libraries such as **Quantstats** and **PyPortfolioOpt**.

<br>

<br>

<div align=""center"">
  
| Table of Contents 📖 | 
| --                     
| 1. [Installation](#installation) | 
| 2. [Features](#features) | 
| 3. [Documentation](#documentation) | 
| 4. [Usage example](#usage) |
| 5. [Download the tearsheet](#download-the-tearsheet) |
| 6. [Contribution and Issues](#contribution-and-issues) | 
| 7. [Contributors](#contributors) |
| 8. [Contact](#contact) |
| 9. [License](#license) |
	
</div>


## Installation

You can install Empyrial using pip:

```
pip install empyrial
```

For a better experience, **we advise you to use Empyrial on a notebook** (e.g., Jupyter, Google Colab)

_Note: macOS users will need to install [Xcode Command Line Tools](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)._

_Note: Windows users will need to install C++. ([download](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16), [install instructions](https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view))_

## Features

<div align=""center"">
  
| Feature 📰 | Status |
| --                      | ------    |
| Engine (backtesting + performance analysis) | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.2.4) on May 30, 2021 |
| Optimizer | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.3.6) on Jun 7, 2021 |
| Rebalancing | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.5.0) on Jun 27, 2021 |
| Risk manager | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.7.3) on Jul 5, 2021 |
| Sandbox | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.9.1) on Jul 17, 2021 |
| Support for custom data | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v2.1.3) on Aug 12, 2023 |
  
</div>

## Documentation

[Full documentation](https://empyrial.gitbook.io/empyrial/) (website)

## Usage

### Empyrial Engine

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""]  # SPY is set by default
)

empyrial(portfolio)
```

### Use custom data
See doc [here](https://empyrial.gitbook.io/empyrial/using-custom-data) to learn how to do this. 

### Calendar Rebalancing
A portfolio can be rebalanced for either a specific time period or for specific dates using the ```rebalance``` option.

#### Rebalance for Time Period
Time periods available for rebalancing are 
 ```2y```, ```1y```, ```6mo```, ```quarterly```, ```monthly```  

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = ""1y""
)

empyrial(portfolio)
```

#### Rebalance for Custom Dates
You can rebalance a portfolio by specifying a list of custom dates.  
⚠️ When using custom dates, the first date of the list must correspond with the ```start_date``` and the last element should correspond to the ```end_date``` which is **today's date** by default.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = [""2018-06-09"", ""2019-01-01"", ""2020-01-01"", ""2021-01-01""]
)

empyrial(portfolio)
```

### Optimizer
The default optimizer is **equal weighting**. You can specify custom weights, if desired.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.1, 0.3, 0.15, 0.25, 0.2],   # custom weights
    rebalance = ""1y""  # rebalance every year
)

empyrial(portfolio)
```

You can also use the **built-in optimizers**. There are 4 optimizers available:  

- ```""EF""```: **Global Efficient Frontier**  [Example](https://empyrial.gitbook.io/empyrial/optimization/global-efficient-frontier)
- ```""MEANVAR""```: **Mean-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/mean-variance)
- ```""HRP""```: **Hierarchical Risk Parity**  [Example](https://empyrial.gitbook.io/empyrial/optimization/hierarchical-risk-parity)
- ```""MINVAR""```: **Minimum-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/minimum-variance)


```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
    optimizer = ""EF"",
    rebalance = ""1y""  # rebalance every year
)

portfolio.weights
```

> Output:

```
[0.0, 0.0, 0.0348, 0.9652, 0.0]
```  
We can see that the allocation has been optimized.

### Risk Manager
3 Risk Managers are available:

- **Max Drawdown**: ```{""Max Drawdown"" : -0.3}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/max-drawdown)
- **Take Profit**: ```{""Take Profit"" : 0.4}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/take-profit)
- **Stop Loss**: ```{""Stop Loss"" : -0.2}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/stop-loss)

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio= [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    optimizer = ""EF"",
    rebalance = ""1y"",  # rebalance every year
    risk_manager = {""Max Drawdown"" : -0.2}  # Stop the investment when the drawdown becomes superior to -20%
)

empyrial(portfolio)
``` 

### Empyrial Outputs

<div align=""center"">

![image](https://user-images.githubusercontent.com/61618641/126879140-ea03ff17-a7c6-481a-bb3e-61c055b31267.png)
![image](https://user-images.githubusercontent.com/61618641/126879203-4390813c-a4f2-41b9-916b-e03dd8bafffb.png)
![image](https://user-images.githubusercontent.com/61618641/128025087-04afed7e-96ab-4730-9bd8-98f5491b2b5d.png)
![image](https://user-images.githubusercontent.com/61618641/126879204-01fe1eca-00b8-438e-b489-0213535dd31b.png)
![image](https://user-images.githubusercontent.com/61618641/126879210-9fd61e2b-01ab-4bfd-b679-3b1867d9302d.png)
![image](https://user-images.githubusercontent.com/61618641/126879215-e24c929a-55be-4912-8e2c-043e31ff2a95.png)
![image](https://user-images.githubusercontent.com/61618641/126879221-455b8ffa-c958-4ac9-ae98-d15b4c5f0826.png)
![image](https://user-images.githubusercontent.com/61618641/126879222-08906643-16db-441e-a099-7ac3b00bdbd7.png)
![image](https://user-images.githubusercontent.com/61618641/126879223-f1116dc3-cceb-493c-93b3-2d3810cae789.png)
![image](https://user-images.githubusercontent.com/61618641/126879225-dc879b71-2070-46ed-a8ad-e90880050be8.png)
![image](https://user-images.githubusercontent.com/61618641/126879297-cb78743a-6d43-465b-8021-d4b62a659828.png)

</div>

## Download the Tearsheet
You can use the ```get_report()``` function of Empyrial to generate a tearsheet, and then download this as a PDF document.

```py
from empyrial import get_report, Engine

portfolio = Engine(
      start_date = ""2018-08-01"",
      portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
      optimizer = ""EF"",
      rebalance = ""1y"", #rebalance every year
      risk_manager = {""Stop Loss"" : -0.2}
)

get_report(portfolio)
``` 

> Output:

![image](https://user-images.githubusercontent.com/61618641/126879406-3ff8eb14-e08b-4103-b46d-02597634d469.png)


## Stargazers over time

<div align=""center"">
	
![追星族的时间](https://starchart.cc/ssantoshp/empyrial.svg)
	
</div>

## Contribution and Issues
Empyrial uses GitHub to host its source code.  *Learn more about the [Github flow](https://docs.github.com/en/get-started/quickstart/github-flow).*  

For larger changes (e.g., new feature request, large refactoring), please open an issue to discuss first.  

* If you wish to create a new Issue, then [click here to create a new issue](https://github.com/ssantoshp/Empyrial/issues/new/choose).  

Smaller improvements (e.g., document improvements, bugfixes) can be handled by the Pull Request process of GitHub: [pull requests](https://github.com/ssantoshp/Empyrial/pulls).  

* To contribute to the code, you will need to do the following:  

 * [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository) [Empyrial](https://github.com/ssantoshp/Empyrial) - Click the **Fork** button at the upper right corner of this page. 
 * [Clone your own fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository).  E.g., ```git clone https://github.com/ssantoshp/Empyrial.git```  
  *If your fork is out of date, then will you need to manually sync your fork: [Synchronization method](https://help.github.com/articles/syncing-a-fork/)*
 * [Create a Pull Request](https://github.com/ssantoshp/Empyrial/pulls) using **your fork** as the `compare head repository`. 

You contributions will be reviewed, potentially modified, and hopefully merged into Empyrial.  

## Contributors

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

[![All Contributors](https://img.shields.io/badge/all_contributors-11-orange.svg?style=flat-square)](#contributors-)

<table>
  <tr>
    <td align=""center""><a href=""https://github.com/BrendanGlancy""><img src=""https://avatars.githubusercontent.com/u/61941978?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Brendan Glancy</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/rslopes""><img src=""https://avatars.githubusercontent.com/u/24928343?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Renan Lopes</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/markthebault""><img src=""https://avatars.githubusercontent.com/u/3846664?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Mark Thebault</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/diegodalvarez""><img src=""https://avatars.githubusercontent.com/u/48641554?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Diego Alvarez</b></sub></a><br /><a title=""Code"">💻🐛</a></td>
    <td align=""center""><a href=""https://github.com/rakeshbhat9""><img src=""https://avatars.githubusercontent.com/u/11472305?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Rakesh Bhat</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Haizzz""><img src=""https://avatars.githubusercontent.com/u/5275680?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Anh Le</b></sub></a><br /><a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/TonyZhangkz""><img src=""https://avatars.githubusercontent.com/u/65281213?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Tony Zhang</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/eltociear""><img src=""https://avatars.githubusercontent.com/u/22633385?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a title=""Code"">✒️</a></td>
    <td align=""center""><a href=""https://www.youtube.com/watch?v=-4qx3tbtTgs""><img src=""https://avatars.githubusercontent.com/u/50767660?v=4"" width=""100px;"" alt=""""/><br /><sub><b>QuantNomad</b></sub></a><br /><a title=""Code"">📹</a></td>
    <td align=""center""><a href=""https://github.com/buckleyc""><img src=""https://avatars.githubusercontent.com/u/4175900?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Buckley</b></sub></a><br /><a title=""Code"">✒️💻</a></td>
    <td align=""center""><a href=""https://github.com/agn35""><img src=""https://lh3.googleusercontent.com/a-/AOh14GhXGFHHpVQTL2r23oEXFssH0f7RyoGDihrS_HmT=s48"" width=""100px;"" alt=""""/><br /><sub><b>Adam Nelsson</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/rgleavenworth""><img src=""https://avatars.githubusercontent.com/u/87843950?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ranjan Grover</b></sub></a><br /><a title=""Code"">🐛💻</a></td>
  </tr>
</table>

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. **Contributions of any kind are welcome!**

## Credit

This library has also been made possible because of the work of these incredible people:
- [**Ran Aroussi**](https://github.com/ranaroussi) for the [**Quantstats library**](https://github.com/ranaroussi/quantstats) 
- [**Robert Martin**](https://github.com/robertmartin8) for the [**PyPortfolioOpt**](https://github.com/robertmartin8/PyPortfolioOpt) 

## Contact

You are welcome to contact us by email at **santoshpassoubady@gmail.com** or in Empyrial's [discussion space](https://github.com/ssantoshp/Empyrial/discussions)

## License

MIT
",784,784,27,1,investment-portfolio,"[backtesting, finance, fintech, futures, investment, investment-analysis, investment-portfolio, portfolio-analysis, portfolio-management, portfolio-optimization, python, quant, quantitative-analysis, quantitative-finance, stock, stock-data, stock-market]",00000
toastal,portfolio-balancer,N/A,https://github.com/toastal/portfolio-balancer,https://api.github.com/repos/portfolio-balancer/toastal,Crude Portfolio Balancing -- Just the Shares to move around,"# portfolio-balancer
",0,0,3,0,investment-portfolio,"[balancer, haskell, investment-portfolio]",00000
fmilthaler,FinQuant,N/A,https://github.com/fmilthaler/FinQuant,https://api.github.com/repos/FinQuant/fmilthaler,"A program for financial portfolio management, analysis and optimisation.","<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/finquant-logo.png"" width=""45%"">
</p>

<p align=""center"">
  <a href=""https://GitHub.com/fmilthaler/FinQuant/stargazers/"">
    <img src=""https://img.shields.io/github/stars/fmilthaler/FinQuant.svg?style=social&label=Star"" alt='pypi'>
  </a>
  <a href=""https://pypi.org/project/FinQuant"">
    <img src=""https://img.shields.io/badge/pypi-v0.7.0-brightgreen.svg?style=popout"" alt='pypi'>
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant"">
    <img src=""https://github.com/fmilthaler/finquant/actions/workflows/pytest.yml/badge.svg?branch=master"" alt='GitHub Actions'>
  </a>
  <a href=""http://finquant.readthedocs.io/"">
    <img src=""https://img.shields.io/readthedocs/finquant.svg?style=popout"" alt=""docs"">
  </a>
  <a href=""https://GitHub.com/fmilthaler/FinQuant/graphs/contributors/"">
    <img src=""https://img.shields.io/github/contributors/fmilthaler/FinQuant.svg?style=popout"" alt=""contributors"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/issues"">
    <img src=""https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=popout"" alt=""contributions"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/blob/master/LICENSE.txt"">
    <img src=""https://img.shields.io/github/license/fmilthaler/FinQuant.svg?style=popout"" alt=""license"">
  </a>
</p>

# FinQuant
*FinQuant* is a program for financial **portfolio management, analysis and optimisation**.

This README only gives a brief overview of *FinQuant*. The interested reader should refer to its [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

## Table of contents
 - [Motivation](#Motivation)
 - [Installation](#Installation)
 - [Portfolio Management](#Portfolio-Management)
 - [Returns](#Returns)
 - [Moving Averages](#Moving-Averages)
 - [Portfolio Optimisation](#Portfolio-Optimisation)
   - [Efficient Frontier](#Efficient-Frontier)
   - [Monte Carlo](#Monte-Carlo)
 - [Examples](#Examples)
   - [Building a portfolio with data from web](#Building-a-portfolio-with-data-from-web)
   - [Building a portfolio with preset data](#Building-a-portfolio-with-preset-data)
   - [Analysis of a portfolio](#Analysis-of-a-portfolio)
   - [Optimisation of a portfolio](#Optimisation-of-a-portfolio)

## Motivation
Within a few lines of code, *FinQuant* can generate an object that holds your stock prices of your desired financial portfolio, analyses it, and can create plots of different kinds of *Returns*, *Moving Averages*, *Moving Average Bands with buy/sell signals*, and *Bollinger Bands*. It also allows for the optimisation based on the *Efficient Frontier* or a *Monte Carlo* run of the financial portfolio within a few lines of code. Some of the results are shown here.

### Automatically generating an instance of `Portfolio`
`finquant.portfolio.build_portfolio` is a function that eases the creating of your portfolio. See below for one of several ways of using `build_portfolio`.
```
from finquant.portfolio import build_portfolio
names = ['GOOG', 'AMZN', 'MCD', 'DIS']
start_date = '2015-01-01'
end_date = '2017-12-31'
pf = build_portfolio(names=names,
                    start_date=start_date,
                    end_date=end_date)
```
`pf` is an instance of `finquant.portfolio.Portfolio`, which contains the prices of the stocks in your portfolio. Then...
```
pf.data.head(3)
```
yields
```
              GOOG    AMZN        MCD        DIS
Date
2015-01-02  524.81  308.52  85.783317  90.586146
2015-01-05  513.87  302.19  84.835892  89.262380
2015-01-06  501.96  295.29  84.992263  88.788916
```

### Portfolio properties
Nicely printing out the portfolio's properties
```
pf.properties()
```
Depending on the stocks within your portfolio, the output looks something like the below.
```
----------------------------------------------------------------------
Stocks: GOOG, AMZN, MCD, DIS
Time window/frequency: 252
Risk free rate: 0.005
Portfolio expected return: 0.266
Portfolio volatility: 0.156
Portfolio Sharpe ratio: 1.674

Skewness:
       GOOG      AMZN      MCD       DIS
0  0.124184  0.087516  0.58698  0.040569

Kurtosis:
       GOOG      AMZN       MCD       DIS
0 -0.751818 -0.856101 -0.602008 -0.892666

Information:
   Allocation  Name
0        0.25  GOOG
1        0.25  AMZN
2        0.25   MCD
3        0.25   DIS
----------------------------------------------------------------------
```

### Cumulative Return
```
pf.comp_cumulative_returns().plot().axhline(y = 0, color = ""black"", lw = 3)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/cumulative-return.svg?sanitize=true"" width=""60%"">
</p>

### Band Moving Average (Buy/Sell Signals)
```
from finquant.moving_average import compute_ma, ema
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
spans = [10, 50, 100, 150, 200]
ma = compute_ma(dis, ema, spans, plot=True)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ma-band-buysell-signals.svg?sanitize=true"" width=""60%"">
</p>

### Bollinger Band
```
from finquant.moving_average import plot_bollinger_band, sma
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
span=20
plot_bollinger_band(dis, sma, span)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/bollinger-band.svg?sanitize=true"" width=""60%"">
</p>

### Portfolio Optimisation
```
# performs and plots results of Monte Carlo run (5000 iterations)
opt_w, opt_res = pf.mc_optimisation(num_trials=5000)
# plots the results of the Monte Carlo optimisation
pf.mc_plot_results()
# plots the Efficient Frontier
pf.ef_plot_efrontier()
# plots optimal portfolios based on Efficient Frontier
pf.ef.plot_optimal_portfolios()
# plots individual plots of the portfolio
pf.plot_stocks()
```
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ef-mc-overlay.svg?sanitize=true"" width=""60%"">
</p>

## Installation
As it is common for open-source projects, there are several ways to get hold of the code. Choose whichever suits you and your purposes best.

### Dependencies
*FinQuant* depends on the following Python packages:
 - python>=3.10
 - numpy>=1.15
 - pandas>=2.0
 - matplotlib>=3.0
 - quandl>=3.4.5
 - yfinance>=0.1.43
 - scipy>=1.2.0
 - scikit-learn>=1.3.0

### From PyPI
*FinQuant* can be obtained from PyPI

```pip install FinQuant```

### From GitHub
Get the code from GitHub:

```git clone https://github.com/fmilthaler/FinQuant.git```

Then inside `FinQuant` run:

```python setup.py install```

Alternatively, if you do not wish to install *FinQuant*, you can also download/clone it as stated above, and then make sure to add it to your ``PYTHONPATH``.

## Portfolio Management
This is the core of *FinQuant*. `finquant.portfolio.Portfolio` provides an object that holds prices of all stocks in your portfolio, and automatically computes the most common quantities for you. To make *FinQuant* an user-friendly program, that combines data analysis, visualisation and optimisation, the object provides interfaces to the main features that are provided in the modules in `./finquant/`.

To learn more about the object, please read through the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), docstring of the module/class, and/or have a look at the examples.

`finquant.portfolio.Portfolio` also provides a function `build_portfolio` which is designed to automatically generate an instance of `Portfolio` for the user's convenience. For more information on how to use `build_portfolio`, please refer to the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), its `docstring` and/or have a look at the examples.

## Returns
Daily returns of stocks are often computed in different ways. *FinQuant* provides three different ways of computing the daily returns in `finquant.returns`:
1. The cumulative return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/738645698dc3073b4bb52a0c078ae829.svg?invert_in_darkmode&sanitize=true"" align=middle width=194.52263655pt height=46.976899200000005pt/>
2. Percentage change of daily returns: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/27215e5f36fd0308b51ab510444edf0d.svg?invert_in_darkmode&sanitize=true"" align=middle width=126.07712039999997pt height=48.84266309999997pt/>
3. Log Return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/ef37c00ad58fe657a64041c3093e0640.svg?invert_in_darkmode&sanitize=true"" align=middle width=208.3327686pt height=57.53473439999999pt/>

In addition to those, the module provides the function `historical_mean_return(data, freq=252)`, which computes the historical mean of the daily returns over a time period `freq`.

## Moving Averages
The module `finquant.moving_average` allows the computation and visualisation of Moving Averages of the stocks listed in the portfolio is also provided. It entails functions to compute and visualise the
 - `sma`: Simple Moving Average, and
 - `ema`: Exponential Moving Average.
 - `compute_ma`: a Band of Moving Averages (of different time windows/spans) including Buy/Sell signals
 - `plot_bollinger_band`: a Bollinger Band for
   - `sma`,
   - `ema`.

## Portfolio Optimisation
### Efficient Frontier
An implementation of the Efficient Frontier (`finquant.efficient_frontier.EfficientFrontier`) allows for the optimisation of the portfolio for
 - `minimum_volatility` Minimum Volatility,
 - `maximum_sharpe_ratio` Maximum Sharpe Ratio
 - `efficient_return` Minimum Volatility for a given expected return
 - `efficient_volatility` Maximum Sharpe Ratio for a given target volatility

by performing a numerical solve to minimise/maximise an objective function.

Often it is useful to visualise the *Efficient Frontier* as well as the optimal solution. This can be achieved with the following methods:
 - `plot_efrontier`: Plots the *Efficient Frontier*. If no minimum/maximum Return values are provided, the algorithm automatically chooses those limits for the *Efficient Frontier* based on the minimum/maximum Return values of all stocks within the given portfolio.
 - `plot_optimal_portfolios`: Plots markers of the portfolios with the Minimum Volatility and Maximum Sharpe Ratio.

For reasons of user-friendliness, interfaces to these functions are provided in `finquant.portfolio.Portfolio`. Please have a look at the [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

### Monte Carlo
Alternatively a *Monte Carlo* run of `n` trials can be performed to find the optimal portfolios for
 - minimum volatility,
 - maximum Sharpe ratio

The approach branded as *Efficient Frontier* should be the preferred method for reasons of computational effort and accuracy. The latter approach is only included for the sake of completeness, and creation of beautiful plots.

## Examples
For more information about the project and details on how to use it, please
look at the examples provided in `./example`.

**Note**: In the below examples, `pf` refers to an instance of `finquant.portfolio.Portfolio`, the object that holds all stock prices and computes its most common quantities automatically. To make *FinQuant* a user-friendly program, that combines data analysis, visualisation and optimisation, the object also provides interfaces to the main features that are provided in the modules in `./finquant/` and are discussed throughout this README.

### Building a portfolio with data from web
`./example/Example-Build-Portfolio-from-web.py`: Shows how to use *FinQuant* to build a financial portfolio by downloading stock price data through the Python package `quandl`/`yfinance`.

### Building a portfolio with preset data
`./example/Example-Build-Portfolio-from-file.py`: Shows how to use *FinQuant* to build a financial portfolio by providing stock price data yourself, e.g. by reading data from disk/file.

### Analysis of a portfolio
`./example/Example-Analysis.py`: This example shows how to use an instance of `finquant.portfolio.Portfolio`, get the portfolio's quantities, such as
 - Expected Returns,
 - Volatility,
 - Downside Risk,
 - Value at Risk, 
 - Sharpe Ratio,
 - Sortino Ratio,
 - Treynor Ratio,
 - Beta parameter,
 - R squared coefficient.

It also shows how to extract individual stocks from the given portfolio. Moreover it shows how to compute and visualise:
 - the different Returns provided by the module `finquant.returns`,
 - *Moving Averages*, a band of *Moving Averages*, and a *Bollinger Band*.

### Optimisation of a portfolio
`./example/Example-Optimisation.py`: This example focusses on the optimisation of a portfolio. To achieve this, the example shows the usage of `finquant.efficient_frontier.EfficientFrontier` for optimising the portfolio, for the
 - Minimum Volatility
 - Maximum Sharpe Ratio
 - Minimum Volatility for a given target Return
 - Maximum Sharpe Ratio for a given target Volatility.

Furthermore, it is also shown how the entire *Efficient Frontier* and the optimal portfolios can be computed and visualised. If needed, it also gives an example of plotting the individual stocks of the given portfolio within the computed *Efficient Frontier*.

Also, the optimisation of a portfolio and its visualisation based on a *Monte Carlo* is shown.

Finally, *FinQuant*'s visualisation methods allow for overlays, if this is desired. Thus, with only the following few lines of code, one can create an overlay of the *Monte Carlo* run, the *Efficient Frontier*, its optimised portfolios for *Minimum Volatility* and *Maximum Sharpe Ratio*, as well as the portfolio's individual stocks.
",1062,1062,33,16,investment-portfolio,"[analysis, bollinger-bands, efficient-frontier, finance, financial, financial-analysis, financial-portfolio-management, investment, investment-analysis, investment-portfolio, investment-strategies, markowitz-portfolio, monte-carlo, monte-carlo-simulation, moving-average, optimisation, portfolio-management, portfolio-optimisation, portfolio-properties, returns]",00000
ericyung1998,bond-investment,N/A,https://github.com/ericyung1998/bond-investment,https://api.github.com/repos/bond-investment/ericyung1998,[EXCEL] Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain,"# bond-investment

ISOM3900 (Decision Analytics): Project
- Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain

<br>

- Learning Objectives: apply decision analytics concepts on bond investment
- Improvements: consolidate and polish final report
 
",2,2,1,0,investment-portfolio,"[bonds, excel, investment-portfolio, linear-programming, markov-chain, strategic-planning]",00000
toastal,portfolio-balancer,N/A,https://github.com/toastal/portfolio-balancer,https://api.github.com/repos/portfolio-balancer/toastal,Crude Portfolio Balancing -- Just the Shares to move around,"# portfolio-balancer
",0,0,3,0,investment-portfolio,"[balancer, haskell, investment-portfolio]",00000
ssantoshp,Empyrial,N/A,https://github.com/ssantoshp/Empyrial,https://api.github.com/repos/Empyrial/ssantoshp,An Open Source Portfolio Backtesting Engine for Everyone | 面向所有人的开源投资组合回测引擎,"
# By Investors, For Investors.
<br><br><br><br>
<div align=""center"">
<img src=""https://user-images.githubusercontent.com/61618641/120909011-98f8a180-c670-11eb-8844-2d423ba3fa9c.png""/>
<br><br><br><br><br><br>
  
![](https://img.shields.io/badge/Downloads-101k-brightgreen)
![](https://img.shields.io/badge/license-MIT-orange)
![](https://img.shields.io/badge/version-2.1.3-blueviolet)
![](https://img.shields.io/badge/language-python🐍-blue)
![](https://img.shields.io/badge/activity-9.7/10-ff69b4)
![](https://img.shields.io/badge/Open%20source-💜-white)	
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1NqTkkP2u1p1g8W8erU-Y-rSSVbPUDvq2?usp=sharing)
  
 </div>
 
<br>

Want to read this in **Chinese**? Click [**here**](README_CN.md)

Empyrial is a Python-based **open-source quantitative investment** library dedicated to **financial institutions** and **retail investors**, officially released in March 2021. Already used by **thousands of people working in the finance industry**, Empyrial aims to become an all-in-one platform for **portfolio management**, **analysis**, and **optimization**.

Empyrial **empowers portfolio management** by bringing the best of **performance and risk analysis** in an **easy-to-understand**, **flexible** and **powerful framework**.

With Empyrial, you can easily analyze security or a portfolio in order to **get the best insights from it**. This is mainly a **wrapper** of financial analysis libraries such as **Quantstats** and **PyPortfolioOpt**.

<br>

<br>

<div align=""center"">
  
| Table of Contents 📖 | 
| --                     
| 1. [Installation](#installation) | 
| 2. [Features](#features) | 
| 3. [Documentation](#documentation) | 
| 4. [Usage example](#usage) |
| 5. [Download the tearsheet](#download-the-tearsheet) |
| 6. [Contribution and Issues](#contribution-and-issues) | 
| 7. [Contributors](#contributors) |
| 8. [Contact](#contact) |
| 9. [License](#license) |
	
</div>


## Installation

You can install Empyrial using pip:

```
pip install empyrial
```

For a better experience, **we advise you to use Empyrial on a notebook** (e.g., Jupyter, Google Colab)

_Note: macOS users will need to install [Xcode Command Line Tools](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)._

_Note: Windows users will need to install C++. ([download](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16), [install instructions](https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view))_

## Features

<div align=""center"">
  
| Feature 📰 | Status |
| --                      | ------    |
| Engine (backtesting + performance analysis) | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.2.4) on May 30, 2021 |
| Optimizer | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.3.6) on Jun 7, 2021 |
| Rebalancing | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.5.0) on Jun 27, 2021 |
| Risk manager | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.7.3) on Jul 5, 2021 |
| Sandbox | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.9.1) on Jul 17, 2021 |
| Support for custom data | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v2.1.3) on Aug 12, 2023 |
  
</div>

## Documentation

[Full documentation](https://empyrial.gitbook.io/empyrial/) (website)

## Usage

### Empyrial Engine

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""]  # SPY is set by default
)

empyrial(portfolio)
```

### Use custom data
See doc [here](https://empyrial.gitbook.io/empyrial/using-custom-data) to learn how to do this. 

### Calendar Rebalancing
A portfolio can be rebalanced for either a specific time period or for specific dates using the ```rebalance``` option.

#### Rebalance for Time Period
Time periods available for rebalancing are 
 ```2y```, ```1y```, ```6mo```, ```quarterly```, ```monthly```  

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = ""1y""
)

empyrial(portfolio)
```

#### Rebalance for Custom Dates
You can rebalance a portfolio by specifying a list of custom dates.  
⚠️ When using custom dates, the first date of the list must correspond with the ```start_date``` and the last element should correspond to the ```end_date``` which is **today's date** by default.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = [""2018-06-09"", ""2019-01-01"", ""2020-01-01"", ""2021-01-01""]
)

empyrial(portfolio)
```

### Optimizer
The default optimizer is **equal weighting**. You can specify custom weights, if desired.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.1, 0.3, 0.15, 0.25, 0.2],   # custom weights
    rebalance = ""1y""  # rebalance every year
)

empyrial(portfolio)
```

You can also use the **built-in optimizers**. There are 4 optimizers available:  

- ```""EF""```: **Global Efficient Frontier**  [Example](https://empyrial.gitbook.io/empyrial/optimization/global-efficient-frontier)
- ```""MEANVAR""```: **Mean-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/mean-variance)
- ```""HRP""```: **Hierarchical Risk Parity**  [Example](https://empyrial.gitbook.io/empyrial/optimization/hierarchical-risk-parity)
- ```""MINVAR""```: **Minimum-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/minimum-variance)


```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
    optimizer = ""EF"",
    rebalance = ""1y""  # rebalance every year
)

portfolio.weights
```

> Output:

```
[0.0, 0.0, 0.0348, 0.9652, 0.0]
```  
We can see that the allocation has been optimized.

### Risk Manager
3 Risk Managers are available:

- **Max Drawdown**: ```{""Max Drawdown"" : -0.3}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/max-drawdown)
- **Take Profit**: ```{""Take Profit"" : 0.4}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/take-profit)
- **Stop Loss**: ```{""Stop Loss"" : -0.2}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/stop-loss)

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio= [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    optimizer = ""EF"",
    rebalance = ""1y"",  # rebalance every year
    risk_manager = {""Max Drawdown"" : -0.2}  # Stop the investment when the drawdown becomes superior to -20%
)

empyrial(portfolio)
``` 

### Empyrial Outputs

<div align=""center"">

![image](https://user-images.githubusercontent.com/61618641/126879140-ea03ff17-a7c6-481a-bb3e-61c055b31267.png)
![image](https://user-images.githubusercontent.com/61618641/126879203-4390813c-a4f2-41b9-916b-e03dd8bafffb.png)
![image](https://user-images.githubusercontent.com/61618641/128025087-04afed7e-96ab-4730-9bd8-98f5491b2b5d.png)
![image](https://user-images.githubusercontent.com/61618641/126879204-01fe1eca-00b8-438e-b489-0213535dd31b.png)
![image](https://user-images.githubusercontent.com/61618641/126879210-9fd61e2b-01ab-4bfd-b679-3b1867d9302d.png)
![image](https://user-images.githubusercontent.com/61618641/126879215-e24c929a-55be-4912-8e2c-043e31ff2a95.png)
![image](https://user-images.githubusercontent.com/61618641/126879221-455b8ffa-c958-4ac9-ae98-d15b4c5f0826.png)
![image](https://user-images.githubusercontent.com/61618641/126879222-08906643-16db-441e-a099-7ac3b00bdbd7.png)
![image](https://user-images.githubusercontent.com/61618641/126879223-f1116dc3-cceb-493c-93b3-2d3810cae789.png)
![image](https://user-images.githubusercontent.com/61618641/126879225-dc879b71-2070-46ed-a8ad-e90880050be8.png)
![image](https://user-images.githubusercontent.com/61618641/126879297-cb78743a-6d43-465b-8021-d4b62a659828.png)

</div>

## Download the Tearsheet
You can use the ```get_report()``` function of Empyrial to generate a tearsheet, and then download this as a PDF document.

```py
from empyrial import get_report, Engine

portfolio = Engine(
      start_date = ""2018-08-01"",
      portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
      optimizer = ""EF"",
      rebalance = ""1y"", #rebalance every year
      risk_manager = {""Stop Loss"" : -0.2}
)

get_report(portfolio)
``` 

> Output:

![image](https://user-images.githubusercontent.com/61618641/126879406-3ff8eb14-e08b-4103-b46d-02597634d469.png)


## Stargazers over time

<div align=""center"">
	
![追星族的时间](https://starchart.cc/ssantoshp/empyrial.svg)
	
</div>

## Contribution and Issues
Empyrial uses GitHub to host its source code.  *Learn more about the [Github flow](https://docs.github.com/en/get-started/quickstart/github-flow).*  

For larger changes (e.g., new feature request, large refactoring), please open an issue to discuss first.  

* If you wish to create a new Issue, then [click here to create a new issue](https://github.com/ssantoshp/Empyrial/issues/new/choose).  

Smaller improvements (e.g., document improvements, bugfixes) can be handled by the Pull Request process of GitHub: [pull requests](https://github.com/ssantoshp/Empyrial/pulls).  

* To contribute to the code, you will need to do the following:  

 * [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository) [Empyrial](https://github.com/ssantoshp/Empyrial) - Click the **Fork** button at the upper right corner of this page. 
 * [Clone your own fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository).  E.g., ```git clone https://github.com/ssantoshp/Empyrial.git```  
  *If your fork is out of date, then will you need to manually sync your fork: [Synchronization method](https://help.github.com/articles/syncing-a-fork/)*
 * [Create a Pull Request](https://github.com/ssantoshp/Empyrial/pulls) using **your fork** as the `compare head repository`. 

You contributions will be reviewed, potentially modified, and hopefully merged into Empyrial.  

## Contributors

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

[![All Contributors](https://img.shields.io/badge/all_contributors-11-orange.svg?style=flat-square)](#contributors-)

<table>
  <tr>
    <td align=""center""><a href=""https://github.com/BrendanGlancy""><img src=""https://avatars.githubusercontent.com/u/61941978?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Brendan Glancy</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/rslopes""><img src=""https://avatars.githubusercontent.com/u/24928343?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Renan Lopes</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/markthebault""><img src=""https://avatars.githubusercontent.com/u/3846664?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Mark Thebault</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/diegodalvarez""><img src=""https://avatars.githubusercontent.com/u/48641554?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Diego Alvarez</b></sub></a><br /><a title=""Code"">💻🐛</a></td>
    <td align=""center""><a href=""https://github.com/rakeshbhat9""><img src=""https://avatars.githubusercontent.com/u/11472305?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Rakesh Bhat</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Haizzz""><img src=""https://avatars.githubusercontent.com/u/5275680?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Anh Le</b></sub></a><br /><a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/TonyZhangkz""><img src=""https://avatars.githubusercontent.com/u/65281213?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Tony Zhang</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/eltociear""><img src=""https://avatars.githubusercontent.com/u/22633385?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a title=""Code"">✒️</a></td>
    <td align=""center""><a href=""https://www.youtube.com/watch?v=-4qx3tbtTgs""><img src=""https://avatars.githubusercontent.com/u/50767660?v=4"" width=""100px;"" alt=""""/><br /><sub><b>QuantNomad</b></sub></a><br /><a title=""Code"">📹</a></td>
    <td align=""center""><a href=""https://github.com/buckleyc""><img src=""https://avatars.githubusercontent.com/u/4175900?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Buckley</b></sub></a><br /><a title=""Code"">✒️💻</a></td>
    <td align=""center""><a href=""https://github.com/agn35""><img src=""https://lh3.googleusercontent.com/a-/AOh14GhXGFHHpVQTL2r23oEXFssH0f7RyoGDihrS_HmT=s48"" width=""100px;"" alt=""""/><br /><sub><b>Adam Nelsson</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/rgleavenworth""><img src=""https://avatars.githubusercontent.com/u/87843950?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ranjan Grover</b></sub></a><br /><a title=""Code"">🐛💻</a></td>
  </tr>
</table>

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. **Contributions of any kind are welcome!**

## Credit

This library has also been made possible because of the work of these incredible people:
- [**Ran Aroussi**](https://github.com/ranaroussi) for the [**Quantstats library**](https://github.com/ranaroussi/quantstats) 
- [**Robert Martin**](https://github.com/robertmartin8) for the [**PyPortfolioOpt**](https://github.com/robertmartin8/PyPortfolioOpt) 

## Contact

You are welcome to contact us by email at **santoshpassoubady@gmail.com** or in Empyrial's [discussion space](https://github.com/ssantoshp/Empyrial/discussions)

## License

MIT
",784,784,27,1,investment-portfolio,"[backtesting, finance, fintech, futures, investment, investment-analysis, investment-portfolio, portfolio-analysis, portfolio-management, portfolio-optimization, python, quant, quantitative-analysis, quantitative-finance, stock, stock-data, stock-market]",00000
fmilthaler,FinQuant,N/A,https://github.com/fmilthaler/FinQuant,https://api.github.com/repos/FinQuant/fmilthaler,"A program for financial portfolio management, analysis and optimisation.","<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/finquant-logo.png"" width=""45%"">
</p>

<p align=""center"">
  <a href=""https://GitHub.com/fmilthaler/FinQuant/stargazers/"">
    <img src=""https://img.shields.io/github/stars/fmilthaler/FinQuant.svg?style=social&label=Star"" alt='pypi'>
  </a>
  <a href=""https://pypi.org/project/FinQuant"">
    <img src=""https://img.shields.io/badge/pypi-v0.7.0-brightgreen.svg?style=popout"" alt='pypi'>
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant"">
    <img src=""https://github.com/fmilthaler/finquant/actions/workflows/pytest.yml/badge.svg?branch=master"" alt='GitHub Actions'>
  </a>
  <a href=""http://finquant.readthedocs.io/"">
    <img src=""https://img.shields.io/readthedocs/finquant.svg?style=popout"" alt=""docs"">
  </a>
  <a href=""https://GitHub.com/fmilthaler/FinQuant/graphs/contributors/"">
    <img src=""https://img.shields.io/github/contributors/fmilthaler/FinQuant.svg?style=popout"" alt=""contributors"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/issues"">
    <img src=""https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=popout"" alt=""contributions"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/blob/master/LICENSE.txt"">
    <img src=""https://img.shields.io/github/license/fmilthaler/FinQuant.svg?style=popout"" alt=""license"">
  </a>
</p>

# FinQuant
*FinQuant* is a program for financial **portfolio management, analysis and optimisation**.

This README only gives a brief overview of *FinQuant*. The interested reader should refer to its [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

## Table of contents
 - [Motivation](#Motivation)
 - [Installation](#Installation)
 - [Portfolio Management](#Portfolio-Management)
 - [Returns](#Returns)
 - [Moving Averages](#Moving-Averages)
 - [Portfolio Optimisation](#Portfolio-Optimisation)
   - [Efficient Frontier](#Efficient-Frontier)
   - [Monte Carlo](#Monte-Carlo)
 - [Examples](#Examples)
   - [Building a portfolio with data from web](#Building-a-portfolio-with-data-from-web)
   - [Building a portfolio with preset data](#Building-a-portfolio-with-preset-data)
   - [Analysis of a portfolio](#Analysis-of-a-portfolio)
   - [Optimisation of a portfolio](#Optimisation-of-a-portfolio)

## Motivation
Within a few lines of code, *FinQuant* can generate an object that holds your stock prices of your desired financial portfolio, analyses it, and can create plots of different kinds of *Returns*, *Moving Averages*, *Moving Average Bands with buy/sell signals*, and *Bollinger Bands*. It also allows for the optimisation based on the *Efficient Frontier* or a *Monte Carlo* run of the financial portfolio within a few lines of code. Some of the results are shown here.

### Automatically generating an instance of `Portfolio`
`finquant.portfolio.build_portfolio` is a function that eases the creating of your portfolio. See below for one of several ways of using `build_portfolio`.
```
from finquant.portfolio import build_portfolio
names = ['GOOG', 'AMZN', 'MCD', 'DIS']
start_date = '2015-01-01'
end_date = '2017-12-31'
pf = build_portfolio(names=names,
                    start_date=start_date,
                    end_date=end_date)
```
`pf` is an instance of `finquant.portfolio.Portfolio`, which contains the prices of the stocks in your portfolio. Then...
```
pf.data.head(3)
```
yields
```
              GOOG    AMZN        MCD        DIS
Date
2015-01-02  524.81  308.52  85.783317  90.586146
2015-01-05  513.87  302.19  84.835892  89.262380
2015-01-06  501.96  295.29  84.992263  88.788916
```

### Portfolio properties
Nicely printing out the portfolio's properties
```
pf.properties()
```
Depending on the stocks within your portfolio, the output looks something like the below.
```
----------------------------------------------------------------------
Stocks: GOOG, AMZN, MCD, DIS
Time window/frequency: 252
Risk free rate: 0.005
Portfolio expected return: 0.266
Portfolio volatility: 0.156
Portfolio Sharpe ratio: 1.674

Skewness:
       GOOG      AMZN      MCD       DIS
0  0.124184  0.087516  0.58698  0.040569

Kurtosis:
       GOOG      AMZN       MCD       DIS
0 -0.751818 -0.856101 -0.602008 -0.892666

Information:
   Allocation  Name
0        0.25  GOOG
1        0.25  AMZN
2        0.25   MCD
3        0.25   DIS
----------------------------------------------------------------------
```

### Cumulative Return
```
pf.comp_cumulative_returns().plot().axhline(y = 0, color = ""black"", lw = 3)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/cumulative-return.svg?sanitize=true"" width=""60%"">
</p>

### Band Moving Average (Buy/Sell Signals)
```
from finquant.moving_average import compute_ma, ema
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
spans = [10, 50, 100, 150, 200]
ma = compute_ma(dis, ema, spans, plot=True)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ma-band-buysell-signals.svg?sanitize=true"" width=""60%"">
</p>

### Bollinger Band
```
from finquant.moving_average import plot_bollinger_band, sma
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
span=20
plot_bollinger_band(dis, sma, span)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/bollinger-band.svg?sanitize=true"" width=""60%"">
</p>

### Portfolio Optimisation
```
# performs and plots results of Monte Carlo run (5000 iterations)
opt_w, opt_res = pf.mc_optimisation(num_trials=5000)
# plots the results of the Monte Carlo optimisation
pf.mc_plot_results()
# plots the Efficient Frontier
pf.ef_plot_efrontier()
# plots optimal portfolios based on Efficient Frontier
pf.ef.plot_optimal_portfolios()
# plots individual plots of the portfolio
pf.plot_stocks()
```
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ef-mc-overlay.svg?sanitize=true"" width=""60%"">
</p>

## Installation
As it is common for open-source projects, there are several ways to get hold of the code. Choose whichever suits you and your purposes best.

### Dependencies
*FinQuant* depends on the following Python packages:
 - python>=3.10
 - numpy>=1.15
 - pandas>=2.0
 - matplotlib>=3.0
 - quandl>=3.4.5
 - yfinance>=0.1.43
 - scipy>=1.2.0
 - scikit-learn>=1.3.0

### From PyPI
*FinQuant* can be obtained from PyPI

```pip install FinQuant```

### From GitHub
Get the code from GitHub:

```git clone https://github.com/fmilthaler/FinQuant.git```

Then inside `FinQuant` run:

```python setup.py install```

Alternatively, if you do not wish to install *FinQuant*, you can also download/clone it as stated above, and then make sure to add it to your ``PYTHONPATH``.

## Portfolio Management
This is the core of *FinQuant*. `finquant.portfolio.Portfolio` provides an object that holds prices of all stocks in your portfolio, and automatically computes the most common quantities for you. To make *FinQuant* an user-friendly program, that combines data analysis, visualisation and optimisation, the object provides interfaces to the main features that are provided in the modules in `./finquant/`.

To learn more about the object, please read through the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), docstring of the module/class, and/or have a look at the examples.

`finquant.portfolio.Portfolio` also provides a function `build_portfolio` which is designed to automatically generate an instance of `Portfolio` for the user's convenience. For more information on how to use `build_portfolio`, please refer to the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), its `docstring` and/or have a look at the examples.

## Returns
Daily returns of stocks are often computed in different ways. *FinQuant* provides three different ways of computing the daily returns in `finquant.returns`:
1. The cumulative return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/738645698dc3073b4bb52a0c078ae829.svg?invert_in_darkmode&sanitize=true"" align=middle width=194.52263655pt height=46.976899200000005pt/>
2. Percentage change of daily returns: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/27215e5f36fd0308b51ab510444edf0d.svg?invert_in_darkmode&sanitize=true"" align=middle width=126.07712039999997pt height=48.84266309999997pt/>
3. Log Return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/ef37c00ad58fe657a64041c3093e0640.svg?invert_in_darkmode&sanitize=true"" align=middle width=208.3327686pt height=57.53473439999999pt/>

In addition to those, the module provides the function `historical_mean_return(data, freq=252)`, which computes the historical mean of the daily returns over a time period `freq`.

## Moving Averages
The module `finquant.moving_average` allows the computation and visualisation of Moving Averages of the stocks listed in the portfolio is also provided. It entails functions to compute and visualise the
 - `sma`: Simple Moving Average, and
 - `ema`: Exponential Moving Average.
 - `compute_ma`: a Band of Moving Averages (of different time windows/spans) including Buy/Sell signals
 - `plot_bollinger_band`: a Bollinger Band for
   - `sma`,
   - `ema`.

## Portfolio Optimisation
### Efficient Frontier
An implementation of the Efficient Frontier (`finquant.efficient_frontier.EfficientFrontier`) allows for the optimisation of the portfolio for
 - `minimum_volatility` Minimum Volatility,
 - `maximum_sharpe_ratio` Maximum Sharpe Ratio
 - `efficient_return` Minimum Volatility for a given expected return
 - `efficient_volatility` Maximum Sharpe Ratio for a given target volatility

by performing a numerical solve to minimise/maximise an objective function.

Often it is useful to visualise the *Efficient Frontier* as well as the optimal solution. This can be achieved with the following methods:
 - `plot_efrontier`: Plots the *Efficient Frontier*. If no minimum/maximum Return values are provided, the algorithm automatically chooses those limits for the *Efficient Frontier* based on the minimum/maximum Return values of all stocks within the given portfolio.
 - `plot_optimal_portfolios`: Plots markers of the portfolios with the Minimum Volatility and Maximum Sharpe Ratio.

For reasons of user-friendliness, interfaces to these functions are provided in `finquant.portfolio.Portfolio`. Please have a look at the [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

### Monte Carlo
Alternatively a *Monte Carlo* run of `n` trials can be performed to find the optimal portfolios for
 - minimum volatility,
 - maximum Sharpe ratio

The approach branded as *Efficient Frontier* should be the preferred method for reasons of computational effort and accuracy. The latter approach is only included for the sake of completeness, and creation of beautiful plots.

## Examples
For more information about the project and details on how to use it, please
look at the examples provided in `./example`.

**Note**: In the below examples, `pf` refers to an instance of `finquant.portfolio.Portfolio`, the object that holds all stock prices and computes its most common quantities automatically. To make *FinQuant* a user-friendly program, that combines data analysis, visualisation and optimisation, the object also provides interfaces to the main features that are provided in the modules in `./finquant/` and are discussed throughout this README.

### Building a portfolio with data from web
`./example/Example-Build-Portfolio-from-web.py`: Shows how to use *FinQuant* to build a financial portfolio by downloading stock price data through the Python package `quandl`/`yfinance`.

### Building a portfolio with preset data
`./example/Example-Build-Portfolio-from-file.py`: Shows how to use *FinQuant* to build a financial portfolio by providing stock price data yourself, e.g. by reading data from disk/file.

### Analysis of a portfolio
`./example/Example-Analysis.py`: This example shows how to use an instance of `finquant.portfolio.Portfolio`, get the portfolio's quantities, such as
 - Expected Returns,
 - Volatility,
 - Downside Risk,
 - Value at Risk, 
 - Sharpe Ratio,
 - Sortino Ratio,
 - Treynor Ratio,
 - Beta parameter,
 - R squared coefficient.

It also shows how to extract individual stocks from the given portfolio. Moreover it shows how to compute and visualise:
 - the different Returns provided by the module `finquant.returns`,
 - *Moving Averages*, a band of *Moving Averages*, and a *Bollinger Band*.

### Optimisation of a portfolio
`./example/Example-Optimisation.py`: This example focusses on the optimisation of a portfolio. To achieve this, the example shows the usage of `finquant.efficient_frontier.EfficientFrontier` for optimising the portfolio, for the
 - Minimum Volatility
 - Maximum Sharpe Ratio
 - Minimum Volatility for a given target Return
 - Maximum Sharpe Ratio for a given target Volatility.

Furthermore, it is also shown how the entire *Efficient Frontier* and the optimal portfolios can be computed and visualised. If needed, it also gives an example of plotting the individual stocks of the given portfolio within the computed *Efficient Frontier*.

Also, the optimisation of a portfolio and its visualisation based on a *Monte Carlo* is shown.

Finally, *FinQuant*'s visualisation methods allow for overlays, if this is desired. Thus, with only the following few lines of code, one can create an overlay of the *Monte Carlo* run, the *Efficient Frontier*, its optimised portfolios for *Minimum Volatility* and *Maximum Sharpe Ratio*, as well as the portfolio's individual stocks.
",1062,1062,33,16,investment-portfolio,"[analysis, bollinger-bands, efficient-frontier, finance, financial, financial-analysis, financial-portfolio-management, investment, investment-analysis, investment-portfolio, investment-strategies, markowitz-portfolio, monte-carlo, monte-carlo-simulation, moving-average, optimisation, portfolio-management, portfolio-optimisation, portfolio-properties, returns]",00000
ssantoshp,Empyrial,N/A,https://github.com/ssantoshp/Empyrial,https://api.github.com/repos/Empyrial/ssantoshp,An Open Source Portfolio Backtesting Engine for Everyone | 面向所有人的开源投资组合回测引擎,"
# By Investors, For Investors.
<br><br><br><br>
<div align=""center"">
<img src=""https://user-images.githubusercontent.com/61618641/120909011-98f8a180-c670-11eb-8844-2d423ba3fa9c.png""/>
<br><br><br><br><br><br>
  
![](https://img.shields.io/badge/Downloads-101k-brightgreen)
![](https://img.shields.io/badge/license-MIT-orange)
![](https://img.shields.io/badge/version-2.1.3-blueviolet)
![](https://img.shields.io/badge/language-python🐍-blue)
![](https://img.shields.io/badge/activity-9.7/10-ff69b4)
![](https://img.shields.io/badge/Open%20source-💜-white)	
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1NqTkkP2u1p1g8W8erU-Y-rSSVbPUDvq2?usp=sharing)
  
 </div>
 
<br>

Want to read this in **Chinese**? Click [**here**](README_CN.md)

Empyrial is a Python-based **open-source quantitative investment** library dedicated to **financial institutions** and **retail investors**, officially released in March 2021. Already used by **thousands of people working in the finance industry**, Empyrial aims to become an all-in-one platform for **portfolio management**, **analysis**, and **optimization**.

Empyrial **empowers portfolio management** by bringing the best of **performance and risk analysis** in an **easy-to-understand**, **flexible** and **powerful framework**.

With Empyrial, you can easily analyze security or a portfolio in order to **get the best insights from it**. This is mainly a **wrapper** of financial analysis libraries such as **Quantstats** and **PyPortfolioOpt**.

<br>

<br>

<div align=""center"">
  
| Table of Contents 📖 | 
| --                     
| 1. [Installation](#installation) | 
| 2. [Features](#features) | 
| 3. [Documentation](#documentation) | 
| 4. [Usage example](#usage) |
| 5. [Download the tearsheet](#download-the-tearsheet) |
| 6. [Contribution and Issues](#contribution-and-issues) | 
| 7. [Contributors](#contributors) |
| 8. [Contact](#contact) |
| 9. [License](#license) |
	
</div>


## Installation

You can install Empyrial using pip:

```
pip install empyrial
```

For a better experience, **we advise you to use Empyrial on a notebook** (e.g., Jupyter, Google Colab)

_Note: macOS users will need to install [Xcode Command Line Tools](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)._

_Note: Windows users will need to install C++. ([download](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16), [install instructions](https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view))_

## Features

<div align=""center"">
  
| Feature 📰 | Status |
| --                      | ------    |
| Engine (backtesting + performance analysis) | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.2.4) on May 30, 2021 |
| Optimizer | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.3.6) on Jun 7, 2021 |
| Rebalancing | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/1.5.0) on Jun 27, 2021 |
| Risk manager | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.7.3) on Jul 5, 2021 |
| Sandbox | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v1.9.1) on Jul 17, 2021 |
| Support for custom data | :star: [Released](https://github.com/ssantoshp/Empyrial/releases/tag/v2.1.3) on Aug 12, 2023 |
  
</div>

## Documentation

[Full documentation](https://empyrial.gitbook.io/empyrial/) (website)

## Usage

### Empyrial Engine

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""]  # SPY is set by default
)

empyrial(portfolio)
```

### Use custom data
See doc [here](https://empyrial.gitbook.io/empyrial/using-custom-data) to learn how to do this. 

### Calendar Rebalancing
A portfolio can be rebalanced for either a specific time period or for specific dates using the ```rebalance``` option.

#### Rebalance for Time Period
Time periods available for rebalancing are 
 ```2y```, ```1y```, ```6mo```, ```quarterly```, ```monthly```  

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = ""1y""
)

empyrial(portfolio)
```

#### Rebalance for Custom Dates
You can rebalance a portfolio by specifying a list of custom dates.  
⚠️ When using custom dates, the first date of the list must correspond with the ```start_date``` and the last element should correspond to the ```end_date``` which is **today's date** by default.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"", 
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.2, 0.2, 0.2, 0.2, 0.2],  # equal weighting is set by default
    benchmark = [""SPY""],  # SPY is set by default
    rebalance = [""2018-06-09"", ""2019-01-01"", ""2020-01-01"", ""2021-01-01""]
)

empyrial(portfolio)
```

### Optimizer
The default optimizer is **equal weighting**. You can specify custom weights, if desired.

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    weights = [0.1, 0.3, 0.15, 0.25, 0.2],   # custom weights
    rebalance = ""1y""  # rebalance every year
)

empyrial(portfolio)
```

You can also use the **built-in optimizers**. There are 4 optimizers available:  

- ```""EF""```: **Global Efficient Frontier**  [Example](https://empyrial.gitbook.io/empyrial/optimization/global-efficient-frontier)
- ```""MEANVAR""```: **Mean-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/mean-variance)
- ```""HRP""```: **Hierarchical Risk Parity**  [Example](https://empyrial.gitbook.io/empyrial/optimization/hierarchical-risk-parity)
- ```""MINVAR""```: **Minimum-Variance**  [Example](https://empyrial.gitbook.io/empyrial/optimization/minimum-variance)


```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
    optimizer = ""EF"",
    rebalance = ""1y""  # rebalance every year
)

portfolio.weights
```

> Output:

```
[0.0, 0.0, 0.0348, 0.9652, 0.0]
```  
We can see that the allocation has been optimized.

### Risk Manager
3 Risk Managers are available:

- **Max Drawdown**: ```{""Max Drawdown"" : -0.3}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/max-drawdown)
- **Take Profit**: ```{""Take Profit"" : 0.4}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/take-profit)
- **Stop Loss**: ```{""Stop Loss"" : -0.2}```  [Example](https://empyrial.gitbook.io/empyrial/risk-management/stop-loss)

```py
from empyrial import empyrial, Engine

portfolio = Engine(
    start_date = ""2018-08-01"",
    portfolio= [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""], 
    optimizer = ""EF"",
    rebalance = ""1y"",  # rebalance every year
    risk_manager = {""Max Drawdown"" : -0.2}  # Stop the investment when the drawdown becomes superior to -20%
)

empyrial(portfolio)
``` 

### Empyrial Outputs

<div align=""center"">

![image](https://user-images.githubusercontent.com/61618641/126879140-ea03ff17-a7c6-481a-bb3e-61c055b31267.png)
![image](https://user-images.githubusercontent.com/61618641/126879203-4390813c-a4f2-41b9-916b-e03dd8bafffb.png)
![image](https://user-images.githubusercontent.com/61618641/128025087-04afed7e-96ab-4730-9bd8-98f5491b2b5d.png)
![image](https://user-images.githubusercontent.com/61618641/126879204-01fe1eca-00b8-438e-b489-0213535dd31b.png)
![image](https://user-images.githubusercontent.com/61618641/126879210-9fd61e2b-01ab-4bfd-b679-3b1867d9302d.png)
![image](https://user-images.githubusercontent.com/61618641/126879215-e24c929a-55be-4912-8e2c-043e31ff2a95.png)
![image](https://user-images.githubusercontent.com/61618641/126879221-455b8ffa-c958-4ac9-ae98-d15b4c5f0826.png)
![image](https://user-images.githubusercontent.com/61618641/126879222-08906643-16db-441e-a099-7ac3b00bdbd7.png)
![image](https://user-images.githubusercontent.com/61618641/126879223-f1116dc3-cceb-493c-93b3-2d3810cae789.png)
![image](https://user-images.githubusercontent.com/61618641/126879225-dc879b71-2070-46ed-a8ad-e90880050be8.png)
![image](https://user-images.githubusercontent.com/61618641/126879297-cb78743a-6d43-465b-8021-d4b62a659828.png)

</div>

## Download the Tearsheet
You can use the ```get_report()``` function of Empyrial to generate a tearsheet, and then download this as a PDF document.

```py
from empyrial import get_report, Engine

portfolio = Engine(
      start_date = ""2018-08-01"",
      portfolio = [""BABA"", ""PDD"", ""KO"", ""AMD"",""^IXIC""],
      optimizer = ""EF"",
      rebalance = ""1y"", #rebalance every year
      risk_manager = {""Stop Loss"" : -0.2}
)

get_report(portfolio)
``` 

> Output:

![image](https://user-images.githubusercontent.com/61618641/126879406-3ff8eb14-e08b-4103-b46d-02597634d469.png)


## Stargazers over time

<div align=""center"">
	
![追星族的时间](https://starchart.cc/ssantoshp/empyrial.svg)
	
</div>

## Contribution and Issues
Empyrial uses GitHub to host its source code.  *Learn more about the [Github flow](https://docs.github.com/en/get-started/quickstart/github-flow).*  

For larger changes (e.g., new feature request, large refactoring), please open an issue to discuss first.  

* If you wish to create a new Issue, then [click here to create a new issue](https://github.com/ssantoshp/Empyrial/issues/new/choose).  

Smaller improvements (e.g., document improvements, bugfixes) can be handled by the Pull Request process of GitHub: [pull requests](https://github.com/ssantoshp/Empyrial/pulls).  

* To contribute to the code, you will need to do the following:  

 * [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository) [Empyrial](https://github.com/ssantoshp/Empyrial) - Click the **Fork** button at the upper right corner of this page. 
 * [Clone your own fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository).  E.g., ```git clone https://github.com/ssantoshp/Empyrial.git```  
  *If your fork is out of date, then will you need to manually sync your fork: [Synchronization method](https://help.github.com/articles/syncing-a-fork/)*
 * [Create a Pull Request](https://github.com/ssantoshp/Empyrial/pulls) using **your fork** as the `compare head repository`. 

You contributions will be reviewed, potentially modified, and hopefully merged into Empyrial.  

## Contributors

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

[![All Contributors](https://img.shields.io/badge/all_contributors-11-orange.svg?style=flat-square)](#contributors-)

<table>
  <tr>
    <td align=""center""><a href=""https://github.com/BrendanGlancy""><img src=""https://avatars.githubusercontent.com/u/61941978?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Brendan Glancy</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/rslopes""><img src=""https://avatars.githubusercontent.com/u/24928343?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Renan Lopes</b></sub></a><br /><a title=""Code"">💻</a> <a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/markthebault""><img src=""https://avatars.githubusercontent.com/u/3846664?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Mark Thebault</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/diegodalvarez""><img src=""https://avatars.githubusercontent.com/u/48641554?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Diego Alvarez</b></sub></a><br /><a title=""Code"">💻🐛</a></td>
    <td align=""center""><a href=""https://github.com/rakeshbhat9""><img src=""https://avatars.githubusercontent.com/u/11472305?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Rakesh Bhat</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Haizzz""><img src=""https://avatars.githubusercontent.com/u/5275680?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Anh Le</b></sub></a><br /><a title=""Bug report"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/TonyZhangkz""><img src=""https://avatars.githubusercontent.com/u/65281213?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Tony Zhang</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/eltociear""><img src=""https://avatars.githubusercontent.com/u/22633385?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a title=""Code"">✒️</a></td>
    <td align=""center""><a href=""https://www.youtube.com/watch?v=-4qx3tbtTgs""><img src=""https://avatars.githubusercontent.com/u/50767660?v=4"" width=""100px;"" alt=""""/><br /><sub><b>QuantNomad</b></sub></a><br /><a title=""Code"">📹</a></td>
    <td align=""center""><a href=""https://github.com/buckleyc""><img src=""https://avatars.githubusercontent.com/u/4175900?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Buckley</b></sub></a><br /><a title=""Code"">✒️💻</a></td>
    <td align=""center""><a href=""https://github.com/agn35""><img src=""https://lh3.googleusercontent.com/a-/AOh14GhXGFHHpVQTL2r23oEXFssH0f7RyoGDihrS_HmT=s48"" width=""100px;"" alt=""""/><br /><sub><b>Adam Nelsson</b></sub></a><br /><a title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/rgleavenworth""><img src=""https://avatars.githubusercontent.com/u/87843950?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Ranjan Grover</b></sub></a><br /><a title=""Code"">🐛💻</a></td>
  </tr>
</table>

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. **Contributions of any kind are welcome!**

## Credit

This library has also been made possible because of the work of these incredible people:
- [**Ran Aroussi**](https://github.com/ranaroussi) for the [**Quantstats library**](https://github.com/ranaroussi/quantstats) 
- [**Robert Martin**](https://github.com/robertmartin8) for the [**PyPortfolioOpt**](https://github.com/robertmartin8/PyPortfolioOpt) 

## Contact

You are welcome to contact us by email at **santoshpassoubady@gmail.com** or in Empyrial's [discussion space](https://github.com/ssantoshp/Empyrial/discussions)

## License

MIT
",784,784,27,1,investment-portfolio,"[backtesting, finance, fintech, futures, investment, investment-analysis, investment-portfolio, portfolio-analysis, portfolio-management, portfolio-optimization, python, quant, quantitative-analysis, quantitative-finance, stock, stock-data, stock-market]",00000
ericyung1998,bond-investment,N/A,https://github.com/ericyung1998/bond-investment,https://api.github.com/repos/bond-investment/ericyung1998,[EXCEL] Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain,"# bond-investment

ISOM3900 (Decision Analytics): Project
- Strategic bond investment portfolio based on decision analytics principles - linear programming and Markov Chain

<br>

- Learning Objectives: apply decision analytics concepts on bond investment
- Improvements: consolidate and polish final report
 
",2,2,1,0,investment-portfolio,"[bonds, excel, investment-portfolio, linear-programming, markov-chain, strategic-planning]",00000
SunilVeeravalli,XIRR_in_Python,N/A,https://github.com/SunilVeeravalli/XIRR_in_Python,https://api.github.com/repos/XIRR_in_Python/SunilVeeravalli,XIRR (using Python) to calculate return on investments done at different time periods which need not be periodic.,"XIRR calculation (in Python)
=============================

Introduction
============

XIRR stands for Extended Internal Rate of Return and is used to calculate return on investments made at different time periods which need not be periodic.

XIRR gives the annualized return of a portfolio that include all cash flows.

XIRR is a financial function available in Excel. The drawback with Excel's XIRR is that it will show the 0% XIRR as a default for negative returns.

For use in Python, I have written this code which calculates XIRR for both positive and negative returns. For the same XIRR calculation using R, please check my other repository: [**XIRR_in_R**](https://github.com/SunilVeeravalli/XIRR_in_R)

I hope you find my xirr function useful.


Sample test Data
-----------------
<pre>
Data should be in a csv file and should have two columns:  
    1. Date of transaction  
        The date can be any one or a mix of these formats. I set it to consider dayfirst = True:
        23/03/1990
        19 December 1991
        1992-04-10
        27/05/92
        26.10.92
        3/9/93
        datetime.date(1990, 3, 23)
    2. Transaction amount where purchases (debit) should be a negative number and the redemptions (credit) should be a positive number.
        dates      amount
        23/03/1990  -1350
        23/07/1990    600
        31/10/1990  -1250
        13/11/1990   3550
        30/01/1991   -850
        03/05/1991   3600
</pre>

Note: Please find the sample data provided in the repository

-   [Sample\_Positive\_Returns.csv](https://github.com/SunilVeeravalli/XIRR_in_Python/blob/main/Sample_Positive_Returns.csv)
-   [Sample\_Negative\_Returns.csv](https://github.com/SunilVeeravalli/XIRR_in_Python/blob/main/Sample_Negative_Returns.csv)


System requirements
-------------------
1.  Python (version 3.8.2)
2.  Libraries: Pandas, Numpy

I am using git terminal (CLI) to execute the script.  
Clone the repository onto your system from github.
![](Images/clone_repository.jpg)

Move into the cloned folder.  
![](Images/moving_into_directory.jpg)

View the list of files and folders.  
![](Images/list_of_files.jpg)


Example: Positive returns
-------------------------
Pass the location of Sample\_Positive\_Returns.csv
![](Images/positive_returns_test_and_output.jpg)

That is, the return of our portfolio is **17.429%** per annum.

Example: Negative returns
-------------------------
Pass the location of Sample\_Negative\_Returns.csv
![](Images/negative_returns_test_and_output.jpg)

That is, the return of our portfolio is **-79.848%** per annum.
 








",10,10,2,0,investment-portfolio,"[annum, cagr, compounded-annual-growth-rate, excel, excel-cagr, excel-irr, excel-xirr, internal-rate-if-return, investment-analysis, investment-portfolio, investments, irr, negative-returns, positive-returns, python, redemptions, return, returns-calculator, xirr, xirr-calculation]",00000
boyac,pyTrading,N/A,https://github.com/boyac/pyTrading,https://api.github.com/repos/pyTrading/boyac,"Based on the concepts in ""CIMTR"" and others, swing trading","# pyTrading
## Content
- use python 2.7
- systematic and swing trading, based on the concepts in ""CIMTR"" and others. As I'm getting busier each day, most scripts will remain as simple notes from readings
## Your Support
- You can contribute to the project by reporting bugs, suggesting enhancements, exchanging portfolio management experiences or
you can make a donation to this project:
</br>*[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://paypal.me/boyac?locale.x=en_US)

## Formula
- Leveraged investment are amplified compared to an otherwise identical unleveraged investment. Gains are higher and losses are worse, so it is a high risk/high reward strategy. The return on a leveraged investment can be calculated as:
- R_li = R_ui + [(D/E) * (R_ui - c)]
- R_li = (Ending value with leverage - starting value with leverage - borrowing cost) / start value with leverage

-- R_li: leveraged return  
-- R_ui: unleveraged return  
-- D/E : borrowing ratio  
-- c   : cost of borrowing  
",11,11,2,0,investment-portfolio,"[equity, fixed-income, intraday-trading, investment, investment-portfolio, multi-asset, reits, swing-trading, systematic-trading-strategies, trading, trading-strategies]",00000
thevickypedia,robinhood_monitor,N/A,https://github.com/thevickypedia/robinhood_monitor,https://api.github.com/repos/robinhood_monitor/thevickypedia,Stock monitoring application to get accurate alerts from Robinhood using pyrh,"# Stock Monitor
Get a report of your investments from Robinhood along with graphs for previous week stock trend. 

Click to visit the AWS version [Stock Hawk](https://github.com/thevickypedia/stock_hawk)

## Setup

1. git clone this repository

2. Run this command in your terminal to install necessary packages<br/>cd stock_hawk/lib && pip3 install -r requirements.txt

2. Make sure you add the following env variables
* user - Robinhood login email address
* pass - Robinhood login password
* qr - Robinhood MFA QR code
* ACCESS_KEY - AWS login access key
* SECRET_KEY - AWS secret key
* SENDER - sender email address (verified via AWS SES)
* RECIPIENT - receiver email address (verified via AWS SES)

Optional: (If you'd like to setup whats app notifications else skip these, app will still run):
* SID - S-ID from twilio
* TOKEN - Token from twilio
* SEND - sender whats app number (fromat - +1xxxxxxxxxx)
* RECEIVE - receiver whats app number (fromat - +1xxxxxxxxxx)

Optional: (If you'd like to receive graphs certain profit or loss):
* graph_min - Minimum value below which you'd like to generate graphs
* graph_max - Maximum value above which you'd like to generate graphs
<br><br>

To use [qr_code](https://github.com/thevickypedia/robinhood_monitor/blob/master/robinhood.py#L180) you must enable Two-Factor Authentication. Follow steps:
* Login to your Robinhood Web App.
* Go to Account -> Settings or click [me](https://robinhood.com/account/settings)
* Turn on Two-Factor Authentication.
* Select “Authentication App”
* Click “Can’t Scan It?”, and copy the 16-character QR code.

Alternatively you can also run this code without Two-Factor Authentication but it will require you to enter the Verification code each and every-time. To do this simply remove the qr_code part [here](https://github.com/thevickypedia/robinhood_tracker/blob/master/robinhood.py#L30)

You can also change the way you receive validation code from email to sms by including challenge_type=""sms"" in your [login](https://github.com/thevickypedia/robinhood_tracker/blob/master/robinhood.py#L30)

Click to learn more about [pyrh](https://pypi.org/project/pyrh/)

## License & copyright

&copy; Vignesh Sivanandha Rao, Robinhood Monitor

Licensed under the [MIT License](LICENSE)
",0,0,1,0,investment-portfolio,"[investment-portfolio, robinhood-api]",00000
toastal,portfolio-balancer,N/A,https://github.com/toastal/portfolio-balancer,https://api.github.com/repos/portfolio-balancer/toastal,Crude Portfolio Balancing -- Just the Shares to move around,"# portfolio-balancer
",0,0,3,0,investment-portfolio,"[balancer, haskell, investment-portfolio]",00000
fmilthaler,FinQuant,N/A,https://github.com/fmilthaler/FinQuant,https://api.github.com/repos/FinQuant/fmilthaler,"A program for financial portfolio management, analysis and optimisation.","<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/finquant-logo.png"" width=""45%"">
</p>

<p align=""center"">
  <a href=""https://GitHub.com/fmilthaler/FinQuant/stargazers/"">
    <img src=""https://img.shields.io/github/stars/fmilthaler/FinQuant.svg?style=social&label=Star"" alt='pypi'>
  </a>
  <a href=""https://pypi.org/project/FinQuant"">
    <img src=""https://img.shields.io/badge/pypi-v0.7.0-brightgreen.svg?style=popout"" alt='pypi'>
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant"">
    <img src=""https://github.com/fmilthaler/finquant/actions/workflows/pytest.yml/badge.svg?branch=master"" alt='GitHub Actions'>
  </a>
  <a href=""http://finquant.readthedocs.io/"">
    <img src=""https://img.shields.io/readthedocs/finquant.svg?style=popout"" alt=""docs"">
  </a>
  <a href=""https://GitHub.com/fmilthaler/FinQuant/graphs/contributors/"">
    <img src=""https://img.shields.io/github/contributors/fmilthaler/FinQuant.svg?style=popout"" alt=""contributors"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/issues"">
    <img src=""https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=popout"" alt=""contributions"">
  </a>
  <a href=""https://github.com/fmilthaler/FinQuant/blob/master/LICENSE.txt"">
    <img src=""https://img.shields.io/github/license/fmilthaler/FinQuant.svg?style=popout"" alt=""license"">
  </a>
</p>

# FinQuant
*FinQuant* is a program for financial **portfolio management, analysis and optimisation**.

This README only gives a brief overview of *FinQuant*. The interested reader should refer to its [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

## Table of contents
 - [Motivation](#Motivation)
 - [Installation](#Installation)
 - [Portfolio Management](#Portfolio-Management)
 - [Returns](#Returns)
 - [Moving Averages](#Moving-Averages)
 - [Portfolio Optimisation](#Portfolio-Optimisation)
   - [Efficient Frontier](#Efficient-Frontier)
   - [Monte Carlo](#Monte-Carlo)
 - [Examples](#Examples)
   - [Building a portfolio with data from web](#Building-a-portfolio-with-data-from-web)
   - [Building a portfolio with preset data](#Building-a-portfolio-with-preset-data)
   - [Analysis of a portfolio](#Analysis-of-a-portfolio)
   - [Optimisation of a portfolio](#Optimisation-of-a-portfolio)

## Motivation
Within a few lines of code, *FinQuant* can generate an object that holds your stock prices of your desired financial portfolio, analyses it, and can create plots of different kinds of *Returns*, *Moving Averages*, *Moving Average Bands with buy/sell signals*, and *Bollinger Bands*. It also allows for the optimisation based on the *Efficient Frontier* or a *Monte Carlo* run of the financial portfolio within a few lines of code. Some of the results are shown here.

### Automatically generating an instance of `Portfolio`
`finquant.portfolio.build_portfolio` is a function that eases the creating of your portfolio. See below for one of several ways of using `build_portfolio`.
```
from finquant.portfolio import build_portfolio
names = ['GOOG', 'AMZN', 'MCD', 'DIS']
start_date = '2015-01-01'
end_date = '2017-12-31'
pf = build_portfolio(names=names,
                    start_date=start_date,
                    end_date=end_date)
```
`pf` is an instance of `finquant.portfolio.Portfolio`, which contains the prices of the stocks in your portfolio. Then...
```
pf.data.head(3)
```
yields
```
              GOOG    AMZN        MCD        DIS
Date
2015-01-02  524.81  308.52  85.783317  90.586146
2015-01-05  513.87  302.19  84.835892  89.262380
2015-01-06  501.96  295.29  84.992263  88.788916
```

### Portfolio properties
Nicely printing out the portfolio's properties
```
pf.properties()
```
Depending on the stocks within your portfolio, the output looks something like the below.
```
----------------------------------------------------------------------
Stocks: GOOG, AMZN, MCD, DIS
Time window/frequency: 252
Risk free rate: 0.005
Portfolio expected return: 0.266
Portfolio volatility: 0.156
Portfolio Sharpe ratio: 1.674

Skewness:
       GOOG      AMZN      MCD       DIS
0  0.124184  0.087516  0.58698  0.040569

Kurtosis:
       GOOG      AMZN       MCD       DIS
0 -0.751818 -0.856101 -0.602008 -0.892666

Information:
   Allocation  Name
0        0.25  GOOG
1        0.25  AMZN
2        0.25   MCD
3        0.25   DIS
----------------------------------------------------------------------
```

### Cumulative Return
```
pf.comp_cumulative_returns().plot().axhline(y = 0, color = ""black"", lw = 3)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/cumulative-return.svg?sanitize=true"" width=""60%"">
</p>

### Band Moving Average (Buy/Sell Signals)
```
from finquant.moving_average import compute_ma, ema
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
spans = [10, 50, 100, 150, 200]
ma = compute_ma(dis, ema, spans, plot=True)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ma-band-buysell-signals.svg?sanitize=true"" width=""60%"">
</p>

### Bollinger Band
```
from finquant.moving_average import plot_bollinger_band, sma
# get stock data for disney
dis = pf.get_stock(""DIS"").data.copy(deep=True)
span=20
plot_bollinger_band(dis, sma, span)
```
yields
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/bollinger-band.svg?sanitize=true"" width=""60%"">
</p>

### Portfolio Optimisation
```
# performs and plots results of Monte Carlo run (5000 iterations)
opt_w, opt_res = pf.mc_optimisation(num_trials=5000)
# plots the results of the Monte Carlo optimisation
pf.mc_plot_results()
# plots the Efficient Frontier
pf.ef_plot_efrontier()
# plots optimal portfolios based on Efficient Frontier
pf.ef.plot_optimal_portfolios()
# plots individual plots of the portfolio
pf.plot_stocks()
```
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ef-mc-overlay.svg?sanitize=true"" width=""60%"">
</p>

## Installation
As it is common for open-source projects, there are several ways to get hold of the code. Choose whichever suits you and your purposes best.

### Dependencies
*FinQuant* depends on the following Python packages:
 - python>=3.10
 - numpy>=1.15
 - pandas>=2.0
 - matplotlib>=3.0
 - quandl>=3.4.5
 - yfinance>=0.1.43
 - scipy>=1.2.0
 - scikit-learn>=1.3.0

### From PyPI
*FinQuant* can be obtained from PyPI

```pip install FinQuant```

### From GitHub
Get the code from GitHub:

```git clone https://github.com/fmilthaler/FinQuant.git```

Then inside `FinQuant` run:

```python setup.py install```

Alternatively, if you do not wish to install *FinQuant*, you can also download/clone it as stated above, and then make sure to add it to your ``PYTHONPATH``.

## Portfolio Management
This is the core of *FinQuant*. `finquant.portfolio.Portfolio` provides an object that holds prices of all stocks in your portfolio, and automatically computes the most common quantities for you. To make *FinQuant* an user-friendly program, that combines data analysis, visualisation and optimisation, the object provides interfaces to the main features that are provided in the modules in `./finquant/`.

To learn more about the object, please read through the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), docstring of the module/class, and/or have a look at the examples.

`finquant.portfolio.Portfolio` also provides a function `build_portfolio` which is designed to automatically generate an instance of `Portfolio` for the user's convenience. For more information on how to use `build_portfolio`, please refer to the [documentation](https://finquant.readthedocs.io/en/latest/ ""FinQuant Documentation""), its `docstring` and/or have a look at the examples.

## Returns
Daily returns of stocks are often computed in different ways. *FinQuant* provides three different ways of computing the daily returns in `finquant.returns`:
1. The cumulative return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/738645698dc3073b4bb52a0c078ae829.svg?invert_in_darkmode&sanitize=true"" align=middle width=194.52263655pt height=46.976899200000005pt/>
2. Percentage change of daily returns: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/27215e5f36fd0308b51ab510444edf0d.svg?invert_in_darkmode&sanitize=true"" align=middle width=126.07712039999997pt height=48.84266309999997pt/>
3. Log Return: <img src=""https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/ef37c00ad58fe657a64041c3093e0640.svg?invert_in_darkmode&sanitize=true"" align=middle width=208.3327686pt height=57.53473439999999pt/>

In addition to those, the module provides the function `historical_mean_return(data, freq=252)`, which computes the historical mean of the daily returns over a time period `freq`.

## Moving Averages
The module `finquant.moving_average` allows the computation and visualisation of Moving Averages of the stocks listed in the portfolio is also provided. It entails functions to compute and visualise the
 - `sma`: Simple Moving Average, and
 - `ema`: Exponential Moving Average.
 - `compute_ma`: a Band of Moving Averages (of different time windows/spans) including Buy/Sell signals
 - `plot_bollinger_band`: a Bollinger Band for
   - `sma`,
   - `ema`.

## Portfolio Optimisation
### Efficient Frontier
An implementation of the Efficient Frontier (`finquant.efficient_frontier.EfficientFrontier`) allows for the optimisation of the portfolio for
 - `minimum_volatility` Minimum Volatility,
 - `maximum_sharpe_ratio` Maximum Sharpe Ratio
 - `efficient_return` Minimum Volatility for a given expected return
 - `efficient_volatility` Maximum Sharpe Ratio for a given target volatility

by performing a numerical solve to minimise/maximise an objective function.

Often it is useful to visualise the *Efficient Frontier* as well as the optimal solution. This can be achieved with the following methods:
 - `plot_efrontier`: Plots the *Efficient Frontier*. If no minimum/maximum Return values are provided, the algorithm automatically chooses those limits for the *Efficient Frontier* based on the minimum/maximum Return values of all stocks within the given portfolio.
 - `plot_optimal_portfolios`: Plots markers of the portfolios with the Minimum Volatility and Maximum Sharpe Ratio.

For reasons of user-friendliness, interfaces to these functions are provided in `finquant.portfolio.Portfolio`. Please have a look at the [documentation](https://finquant.readthedocs.io ""FinQuant Documentation"").

### Monte Carlo
Alternatively a *Monte Carlo* run of `n` trials can be performed to find the optimal portfolios for
 - minimum volatility,
 - maximum Sharpe ratio

The approach branded as *Efficient Frontier* should be the preferred method for reasons of computational effort and accuracy. The latter approach is only included for the sake of completeness, and creation of beautiful plots.

## Examples
For more information about the project and details on how to use it, please
look at the examples provided in `./example`.

**Note**: In the below examples, `pf` refers to an instance of `finquant.portfolio.Portfolio`, the object that holds all stock prices and computes its most common quantities automatically. To make *FinQuant* a user-friendly program, that combines data analysis, visualisation and optimisation, the object also provides interfaces to the main features that are provided in the modules in `./finquant/` and are discussed throughout this README.

### Building a portfolio with data from web
`./example/Example-Build-Portfolio-from-web.py`: Shows how to use *FinQuant* to build a financial portfolio by downloading stock price data through the Python package `quandl`/`yfinance`.

### Building a portfolio with preset data
`./example/Example-Build-Portfolio-from-file.py`: Shows how to use *FinQuant* to build a financial portfolio by providing stock price data yourself, e.g. by reading data from disk/file.

### Analysis of a portfolio
`./example/Example-Analysis.py`: This example shows how to use an instance of `finquant.portfolio.Portfolio`, get the portfolio's quantities, such as
 - Expected Returns,
 - Volatility,
 - Downside Risk,
 - Value at Risk, 
 - Sharpe Ratio,
 - Sortino Ratio,
 - Treynor Ratio,
 - Beta parameter,
 - R squared coefficient.

It also shows how to extract individual stocks from the given portfolio. Moreover it shows how to compute and visualise:
 - the different Returns provided by the module `finquant.returns`,
 - *Moving Averages*, a band of *Moving Averages*, and a *Bollinger Band*.

### Optimisation of a portfolio
`./example/Example-Optimisation.py`: This example focusses on the optimisation of a portfolio. To achieve this, the example shows the usage of `finquant.efficient_frontier.EfficientFrontier` for optimising the portfolio, for the
 - Minimum Volatility
 - Maximum Sharpe Ratio
 - Minimum Volatility for a given target Return
 - Maximum Sharpe Ratio for a given target Volatility.

Furthermore, it is also shown how the entire *Efficient Frontier* and the optimal portfolios can be computed and visualised. If needed, it also gives an example of plotting the individual stocks of the given portfolio within the computed *Efficient Frontier*.

Also, the optimisation of a portfolio and its visualisation based on a *Monte Carlo* is shown.

Finally, *FinQuant*'s visualisation methods allow for overlays, if this is desired. Thus, with only the following few lines of code, one can create an overlay of the *Monte Carlo* run, the *Efficient Frontier*, its optimised portfolios for *Minimum Volatility* and *Maximum Sharpe Ratio*, as well as the portfolio's individual stocks.
",1062,1062,33,16,investment-portfolio,"[analysis, bollinger-bands, efficient-frontier, finance, financial, financial-analysis, financial-portfolio-management, investment, investment-analysis, investment-portfolio, investment-strategies, markowitz-portfolio, monte-carlo, monte-carlo-simulation, moving-average, optimisation, portfolio-management, portfolio-optimisation, portfolio-properties, returns]",00000
