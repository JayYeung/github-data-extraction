repo,user,organization,url (HTML),url (API),description,readme,stargazer count,watcher count,subscriber count,open issue count,topic (search),topics,NAICS Code
opengeos,streamlit-geospatial,opengeos,https://github.com/opengeos/streamlit-geospatial,https://api.github.com/repos/streamlit-geospatial/opengeos,A multi-page streamlit app for geospatial,"# streamlit-geospatial

A streamlit multipage app for geospatial applications. It can be deployed to [Streamlit Cloud](https://streamlit.io/cloud), [Heroku](https://heroku.com/), or [MyBinder](https://mybinder.org/).

[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/giswqs/streamlit-geospatial/master?urlpath=proxy/8501/)

- Web app: <https://streamlit.geemap.org>
- Source code: <https://github.com/giswqs/streamlit-geospatial>

## Instructions

1. For the GitHub repository to your GitHub account.
2. Customize the sidebar by changing the sidebar text and logo in each Python file.
3. Find your favorite emoji from https://emojipedia.org.
4. Add a new app to the `pages/` directory with an emoji in the file name, e.g., 1_üöÄ_Chart.py.

## Demo

![](https://i.imgur.com/6lj0oAO.png)

## Real Estate Data and Market Trends

![](https://i.imgur.com/Z3dk6Tr.gif)
",708,708,12,5,real-estate,"[data-science, datascience, dataviz, geopython, geospatial, housing-data, housing-market, huggingface, mapping, open-source, python, real-estate, streamlit, streamlit-webapp]",0
emilepetrone,financial_lessons,,https://github.com/emilepetrone/financial_lessons,https://api.github.com/repos/financial_lessons/emilepetrone,What financial info would I have wanted to know when I was 22 and jumping into tech?,"# Financial Lessons After 10+ years in Tech
What financial info would I have wanted to know when I was 22 and jumping into tech?

**üì¨ Join the newsletter** 

https://newsletter.ficombinator.com/ for posts

**üí°Origin Story**

This project started after I posted the idea on Reddit. 

https://www.reddit.com/r/cscareerquestions/comments/swdgiq/financial_advice_after_a_decade_in_tech/

After a huge outpouring of support, I'm writing this book/repo/project. Feel free to create issues or PRs if you find something you think is incorrect or needs fixing. 

Thanks for your support!

Emile 

[@emilepetrone](https://www.twitter.com/emilepetrone)
",686,686,84,3,real-estate,"[401k, 401k-investment, 401k4usa, faang, faang-101, finance, financial, investing, job-interviews, personal-finance, personal-portfolio, real-estate, retirement, retirement-planning, startup, startups, stock, stock-market, stock-options, stocks]",0
etewiah,property_web_builder,,https://github.com/etewiah/property_web_builder,https://api.github.com/repos/property_web_builder/etewiah,Create a fully featured real estate website on Rails in minutes! ‚õ∫,"# PropertyWebBuilder

Please help support this project by making a contribution to PropertyWebBuilder here: https://opencollective.com/property_web_builder

[![Backers on Open Collective](https://opencollective.com/property_web_builder/backers/badge.svg)](#backers)
[![Sponsors on Open Collective](https://opencollective.com/property_web_builder/sponsors/badge.svg)](#sponsors)
[![Gitter](https://badges.gitter.im/dev-1pr/1pr.svg)](https://gitter.im/property_web_builder/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)
[![Open Source Helpers](https://www.codetriage.com/etewiah/property_web_builder/badges/users.svg)](https://www.codetriage.com/etewiah/property_web_builder)


## February 2023 update

PropertyWebBuilder is now a standalone Ruby on Rails app (it is no longer a Ruby on Rails engine). It has also been upgraded to use Rails 6 and Ruby 3!

I am currently working on a Rails 7 upgrade which will use the wonderful vite-ruby gem to re-implement the admin panel with vue.js and the quasar framework:

https://github.com/etewiah/property_web_builder/tree/vite

Also, I am currently working on a tool to help with house hunting and would love to get some feedback about it.

Please check it out here and let me know what you think (and if you would like it to be open-sourced):

[https://homestocompare.com/](https://homestocompare.com/)


## Motivation

This project has been created to address a glaring gap in the rails ecosystem: the lack of an open source project for real estate websites.

The result is that WordPress has become the dominant tool for creating real estate websites.  This is far from ideal and PropertyWebBuilder seeks to address this.


## Demo

<!-- You can try out a demo at [https://pwb-v2.herokuapp.com](https://pwb-v2.herokuapp.com/)

To see the admin panel, login as user admin@example.com with a password of ""pwb123456"". -->

There was previously a demo hosted on heroku but since they ended the free plan I have had to take it down.

![pwb_iphone_landing](https://cloud.githubusercontent.com/assets/1741198/22990222/bfec0168-f3b8-11e6-89df-b950c4979970.png)


## Create your own real estate website with no technical knowledge

The simplest way to create a website with PropertyWebBuilder is to use Heroku, a trusted service provider.  They no longer have the free tier which was a great selling point but are still worth trying out.

Just [sign up for Heroku](https://signup.heroku.com/identity), click the button below and in a few minutes your site will be ready

[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/etewiah/property_web_builder)

Here is a video about how to deploy to heroku:

[![Depoly PWB to heroku](http://img.youtube.com/vi/hyapXTwGyr4/0.jpg)](http://www.youtube.com/watch?v=hyapXTwGyr4 ""Deploy PWB to heroku"")


## Install locally

PWB was previously designed to be included as an engine in an existing Ruby on Rails app. This is no longer the case and you can now run it directly as a standalone app.

It can also be installed locally as follows:

```bash
git clone https://github.com/etewiah/property_web_builder.git
cd property_web_builder
rails db:create
rails db:migrate
rails pwb:db:seed
```

## Rails Version

PropertyWebBuilder runs with Rails '~> 6.0'

## Ruby Version

PropertyWebBuilder runs with Ruby >= 3.0.0.


## Features

* Multilingual
* Multi-currency
* Powerful search component
* Fully featured admin panel
* Google maps integration
* Customisable look and feel
* Easily extendable
* Search engine friendly
* Mobile friendly responsive layout
* Fully open source

## Coming soon

These are some features I plan to add over the coming months.  If there is something you need which is not on the list, please let me know.  I am also interested in knowing which of these features I should prioritize.

* Instant price conversions into other currencies
* Migrate admin section from an ember js app to vue js using the quasar framework
* [More languages](https://github.com/etewiah/property_web_builder/issues/4)
* [More themes](https://github.com/etewiah/property_web_builder/issues/3)
* Mobile app (iOS and android)
* [RETS support (to allow synchronizing MLS content)](https://github.com/etewiah/property_web_builder/issues/2)
* Integration with third party apps such as Insightly and Basecamp
* Full calendering functionality for rental properties
* Ability to import WordPress blogs
* Neighbourhood information from Zillow API


## Contribute and spread the love
We encourage you to contribute to this project and file issues for any problems you encounter.

If you like it, please star it and spread the word on [Twitter](https://twitter.com/prptywebbuilder), [LinkedIn](https://www.linkedin.com/company/propertywebbuilder) and [Facebook](https://www.facebook.com/propertywebbuilder).  You can also subscribe to github notifications on this project.

Please consider making a contribution to the development of PropertyWebBuilder.  If you wish to pay for specific enhancements, please email me directly (opensource at propertywebbuilder.com).

I would like PropertyWebBuilder to be available in as many languages as possible so any help with translations will be much appreciated.  A basic Spanish version of this document can be found here:
[https://github.com/etewiah/property_web_builder/blob/master/README_es.md](https://github.com/etewiah/property_web_builder/blob/master/README_es.md)

For instructions on how to add a new language, please see:
[https://github.com/etewiah/property_web_builder/wiki/Adding-translations-for-a-new-language](https://github.com/etewiah/property_web_builder/wiki/Adding-translations-for-a-new-language)
<!--
---

Thanks to the awesome [Locale](http://www.localeapp.com/) contributing to the translations is super easy!

- Edit the translations directly on the [property_web_builder](http://www.localeapp.com/projects/public?search=property_web_builder) project on Locale.
- **That's it!**
- The maintainer will then pull translations from the Locale project and push to Github.
-->

## Contributors

This project exists thanks to all the people who contribute. [[Contribute]](CONTRIBUTING.md).
<a href=""https://github.com/etewiah/property_web_builder/graphs/contributors""><img src=""https://opencollective.com/property_web_builder/contributors.svg?width=890"" /></a>


## Backers

Thank you to all our backers! üôè [[Become a backer](https://opencollective.com/property_web_builder#backer)]

<a href=""https://opencollective.com/property_web_builder#backers"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/backers.svg?width=890""></a>


## Sponsors

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/property_web_builder#sponsor)]

<a href=""https://opencollective.com/property_web_builder/sponsor/0/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/0/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/1/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/1/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/2/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/2/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/3/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/3/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/4/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/4/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/5/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/5/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/6/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/6/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/7/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/7/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/8/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/8/avatar.svg""></a>
<a href=""https://opencollective.com/property_web_builder/sponsor/9/website"" target=""_blank""><img src=""https://opencollective.com/property_web_builder/sponsor/9/avatar.svg""></a>



## License
The gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).

",498,498,39,17,real-estate,"[cms, crm, heroku, lead-generator, mls, opensource, property-management, proptech, rails, real-estate, real-estate-website, rets, ruby]",0
microrealestate,microrealestate,microrealestate,https://github.com/microrealestate/microrealestate,https://api.github.com/repos/microrealestate/microrealestate,This is an Open Source Real estate management system that helps landlords to manage their rentals and properties,"# MicroRealEstate

MicroRealEstate is an open-source application designed to assist landlords in managing their properties and rentals. With a user-friendly interface and a range of helpful features, MicroRealEstate (MRE) serves as a centralized platform for landlords to streamline their property management tasks.

MRE is designed to be customizable, allowing landlords to adapt the application to their unique property management needs. As an open-source project, MRE benefits from continuous improvement and community-driven enhancements.

## Key Features

- Centralized Property and Tenant Information: MRE allows landlords to store all property and tenant details in one convenient location. From property specifications to tenant records and contact information, everything is easily accessible whenever you need it.

- Rent Lease Creation: MRE simplifies the process of creating rent leases. It offers customizable templates that enable landlords to generate lease tailored to their specific requirements.

- Rent Payment Tracking: MRE provides a comprehensive system for tracking rent payments, helping landlords stay updated on transactions and promptly address any overdue payments.

- Custom Document Generation: MRE allows landlords to create custom documents for effective communication with tenants. Personalized letters, notices, and announcements can be generated to ensure clear and consistent correspondence.

- Collaboration: Whether you are an independent landlord or manage a real estate business with multiple collaborators, MRE supports collaboration and facilitates task coordination within teams.

## Screenshots

Explore the application through these screenshots:

|                                                                                                                           |                                                                                                                                   |                                                                                                                                       |
| :-----------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------: |
|                                                      **Rents page**                                                       |                                                **Send notices, receipt by email**                                                 |                                                            **Pay a rent**                                                             |
|      [<img src=""./documentation/pictures/rents.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/rents.png)      | [<img src=""./documentation/pictures/sendmassemails.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/sendmassemails.png) |          [<img src=""./documentation/pictures/payment.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/payment.png)          |
|                                                     **Tenants page**                                                      |                                                        **Tenant details**                                                         |                                                                                                                                       |
|    [<img src=""./documentation/pictures/tenants.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/tenants.png)    | [<img src=""./documentation/pictures/tenantcontract.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/tenantcontract.png) |                                                                                                                                       |
|                                                    **Properties page**                                                    |                                                       **Property details**                                                        |                                                                                                                                       |
| [<img src=""./documentation/pictures/properties.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/properties.png) |       [<img src=""./documentation/pictures/property.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/property.png)       |                                                                                                                                       |
|                                                     **Landlord page**                                                     |                                                        **Template leases**                                                        |                                                         **Author a contract**                                                         |
|   [<img src=""./documentation/pictures/landlord.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/landlord.png)   |         [<img src=""./documentation/pictures/leases.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/leases.png)         | [<img src=""./documentation/pictures/contracttemplate.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/contracttemplate.png) |
|                                                        **Members**                                                        |                                                                                                                                   |
|    [<img src=""./documentation/pictures/members.png"" alt=""drawing"" width=""200""/>](./documentation/pictures/members.png)    |                                                                                                                                   |

## Getting started

Get started with the application by following the installation steps.

> Prerequisite
>
> - [Docker and docker-compose installed](https://docs.docker.com/compose/install/)

### 1. Clone the GitHub repository

```shell
$ git clone https://github.com/microrealestate/microrealestate.git
```

### 2. Build an Start the application

To effectively build and run the application, make use of the `mre` executable on Linux. If you are using Windows, utilize `mre.exe`, whereas on Mac, opt for `mre-macos`.

```shell
$ cd microrealestate
$ ./mre build
```

When building the first time, you can expect a series of questions to configure the application. Answer the questions as prompted to tailor the application to your specific needs. Once you've completed this interactive configuration, a `.env` file will be generated, containing your settings.

```
? Have you created a mailgun account for sending emails (https://www.mailgun.com/)? No

? Enter the URL to access the landlord front-end: http://localhost:8080/landlord

? Enter the URL to access the tenant front-end (it should share the same domain and port as the landlord front-end URL): http://localhost:8080/tenant
```

Once the build process has been completed, execute the following command to launch the application:

```shell
$ ./mre start
```

Once the application has started successfully, you will find a link displayed in the console to access the application.

Simply copy the link and paste into your preferred web browser to access the application's interface.

## Community

### How can you get involved?

- **Code Development**: Whether you're an experienced developer or a coding enthusiast, there's a place for you. Contribute your expertise in building robust features, fixing bugs, and optimizing performance.
- **User Interface (UI) and User Experience (UX) Design**: Join our efforts in creating an intuitive and visually appealing interface that enhances user experience. Your creative input will be invaluable in making MRE a joy to use.
- **Documentation and Localization**: Contribute to improving MRE's documentation, making it comprehensive and accessible to users worldwide. Additionally, assist in localizing the application to reach a broader audience.
- **Testing and Quality Assurance**: Ensure the reliability and stability of MRE by actively testing new features and providing valuable feedback. Help maintain a high standard of quality and user satisfaction.

To run the application in development mode, follow the steps outlined in the documentation available [here](./documentation/DEVELOPER.md)

## Donate

Your support means the world to me as I work on this project. If you'd like to show your appreciation and help fuel my efforts, you can buy me a coffee or two. Every contribution goes a long way in keeping me motivated and dedicated to delivering the best results. Thank you for your support! :raised_hands:

[![Donate](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub)](https://github.com/sponsors/camelaissani)

## Contact

Connect with me on LinkedIn and Twitter to get in touch:

LinkedIn: [www.linkedin.com/in/caissani](https://www.linkedin.com/in/caissani/)
Twitter: [@camelaissani](https://twitter.com/camelaissani)

Feel free to reach out to me to connect, collaborate, and discuss anything related to our shared interests.

## License

The project is licensed under the MIT License. To view the license details, please follow the link below:

[MIT License](./LICENSE)

Feel free to review the license terms and conditions to understand the permissions and restrictions associated with the project.
",365,365,23,25,real-estate,"[landlord, microservices, open-source, opensource, property-management, real-estate, realestate, rental]",0
archilogic-com,3dio-js,archilogic-com,https://github.com/archilogic-com/3dio-js,https://api.github.com/repos/3dio-js/archilogic-com,JavaScript toolkit for interior apps,"> 3dio.js is deprecated
> visit [https://developers.archilogic.com](https://developers.archilogic.com) for new developements

<!--p align=""center""><a href=""https://app.3d.io/oFXeKW"" target=""_blank""><img alt=""toolkit for interior apps"" src=""img/title-pic3.gif""></a></p-->

## Basic Example

[Run Demo](https://3dio-aframe.glitch.me)
```html
<!DOCTYPE html>
<html>
<head>
  <script src=""https://aframe.io/releases/0.7.1/aframe.min.js""></script>
  <script src=""https://dist.3d.io/3dio-js/1.1.x/3dio.min.js""></script>
</head>
<body>
<a-scene>
  <!-- A-Frame Components Loading Content from 3d.io -->
  <a-entity io3d-data3d=""key:/fd72bf39-9d3a-471f-a4ff-ecaa3f5ff30b/bake/2017-04-15_22-45-14_XsiltX/regular/lighting.gz.data3d.buffer"" position=""0 -5 -6""></a-entity>
  <a-entity io3d-furniture=""id:10a54bcf-3b9c-4518-b7ea-81c4251cf5a4"" position=""-0.85 -5 -5.4""></a-entity>
</a-scene>
</body>
</html>
```

Learn more about using 3d.io data at https://furniture.3d.io

## Documentation

https://3d.io/docs/api/2/

## Install

### Browser

Requirements: A-frame v0.8 or lower

```html
<head>
  <!-- latest minor version -->
  <script src=""https://dist.3d.io/3dio-js/1.x.x/3dio.min.js""></script>
</head>
```

### Server

`npm install 3dio --save`

Installation tutorial for beginners: https://www.npmjs.com/package/3dio/tutorial

## Features

https://3d.io/#products

## Use Cases

https://3d.io/#use-cases

## Contribute

Install local dev environment:

1. Clone repository: 

    `git clone https://github.com/archilogic-com/3dio-js.git ; cd ./3dio-js`
2. Install global packages: 

    `npm install rollup -g ; npm install lite-server -g`
3. Install local packages: 

    `npm install`
4. Run local dev server: 

    `npm start`
5. Run tests:

    `npm test`

Please follow our [Contribution guidelines](.github/CONTRIBUTING.md)

[![Build Status](https://travis-ci.org/archilogic-com/3dio-js.svg?branch=master)](https://travis-ci.org/archilogic-com/3dio-js)
",270,270,33,23,real-estate,"[3d, aframe, ai, ar, architecture, architecture-visualization, bim, furniture, html, interior-design, interiors, real-estate, real-time, threejs, vr, webgl, webvr]",0
SmartToolFactory,PropertyFindAR,,https://github.com/SmartToolFactory/PropertyFindAR,https://api.github.com/repos/PropertyFindAR/SmartToolFactory,"üèò üéÉ   Real Estate Sample App with RxJava3+Coroutines Flow, Dynamic Feature Modules, Dagger Hilt, Offline First, ConcatAdapter, Animations and tests for Room, Retrofit, useCase and ViewModels with TDD.","# üèò  Real Estate App with MVVM Clean Architecture RxJava3+Coroutines Flow, Static Code Analysis, Dagger Hilt, Dynamic Features

[![ktlint](https://img.shields.io/badge/code%20style-%E2%9D%A4-FF4081.svg)](https://ktlint.github.io/)
[![Kotlin Version](https://img.shields.io/badge/kotlin-1.4.20-blue.svg)](https://kotlinlang.org)
[![API](https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat)](https://android-arsenal.com/api?level=21)


## About

Sample project that build with MVVM clean architecture and various cool techs including RxJava3 and Coroutines Flow, Dynamic Feature modules as base of BottomNavigationView or ViewPager2, with both OfflineFirst and OfflineLast approaches as database Single Source of Truth Merge Adapter, ViewBinders for setting inner RecyclerViews, RecycledViewPools, SavedStateHandle, and more.

Unit tests are written with JUnit4, JUnit5, MockK, Truth, MockWebServer. Data(including for both RxJava and Coroutines tests for Room and Retrofit), Domain, and ViewModel tests in Home module are written with Test Driven Development.

| Flow      | RxJava3   | Pagination |
| ----------|-----------| -----------|
| <img src=""./screenshots/property_flow.gif""/> | <img src=""./screenshots/property_rxjava3.gif""/> | <img src=""./screenshots/property_pagination.gif""/> |

| Dashboard | Notification   | Account |
| ----------|----------------| --------|
| <img src=""./screenshots/dashboard.png""/> | <img src=""./screenshots/notifications.png""/> | <img src=""./screenshots/account.png""/> |


## ü§ì Overview
* Gradle Kotlin DSL is used for setting up gradle files with ```buildSrc``` folder and extensions.
* KtLint, Detekt, and Git Hooks is used for checking, and formatting code and validating code before commits.
* Dagger Hilt, Dynamic Feature Modules with Navigation Components, ViewModel, Retrofit, Room, RxJava, Coroutines libraries and dependencies are set up.
* ```features``` and ```libraries``` folders are used to include android libraries and dynamic feature modules
* In core module dagger hilt dependencies and ```@EntryPoint``` is created
* Data module uses Retrofit and Room to provide Local and Remote data sources
* Room database has many-to-many and one-to many relation with Junction/Association table.
* Repository provides offline and remote sources and mappers, local save, delete and fetch functions
* Domain module uses useCase classes to implement business logic to fetch and forward data
* ViewModel uses LiveData with data-binding to display LOADING, and ERROR or SUCCESS states.
* Home dynamic feature module has a ViewPager2 that hosts property lists
* Dashboard module contains list with different type of layouts using **ViewBinder** classes, and Recommendations based on users history and **ConcatAdapter** to
merge different type of Adapters.

<img src=""/./screenshots/property_overview.gif"" align=""right"" width=""32%""/>

## Built With üõ†

Some of the popular libraries and MVVM clean architecture used with offline-first and offline-last with Room database and Retrofit as data source

* [Kotlin](https://kotlinlang.org/) - First class and official programming language for Android development.

* [Coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html) - Threads on steroids for Kotlin
* [Flow](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/) - A cold asynchronous data stream that sequentially emits values and completes normally or with an exception.
* [RxJava3](https://github.com/ReactiveX/RxJava) - Newest version of famous reactive programming library for Java, and other languages
* [Android JetPack](https://developer.android.com/jetpack) - Collection of libraries that help you design robust, testable, and maintainable apps.
  * [LiveData](https://developer.android.com/topic/libraries/architecture/livedata) - Data objects that notify views when the underlying database changes.
  * [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel) - Stores UI-related data that isn't destroyed on UI changes.
  * [DataBinding](https://developer.android.com/topic/libraries/data-binding) - Generates a binding class for each XML layout file present in that module and allows you to more easily write code that interacts with views.
  * [Navigation Components](https://developer.android.com/guide/navigation/navigation-getting-started) Navigate fragments as never easier before
  * [Dynamic Feature Modules](https://developer.android.com/guide/playcore/dynamic-delivery) Dynamic modules for adding or removing based on preference
  * [SavedStateHandle](https://developer.android.com/reference/androidx/lifecycle/SavedStateHandle) A handle to saved state passed down to androidx.lifecycle.ViewModel. You should use SavedStateViewModelFactory if you want to receive this object in ViewModel's constructor.
  * [Room](https://developer.android.google.cn/jetpack/androidx/releases/room) Persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite.
* [Material Components for Android](https://github.com/material-components/material-components-android) - Modular and customizable Material Design UI components for Android.
* [Dependency Injection](https://developer.android.com/training/dependency-injection) -
  * [Hilt-Dagger](https://dagger.dev/hilt/) - Standard library to incorporate Dagger dependency injection into an Android application.
  * [Hilt-ViewModel](https://developer.android.com/training/dependency-injection/hilt-jetpack) - DI for injecting `ViewModel`.
* [Retrofit](https://square.github.io/retrofit/) - A type-safe HTTP client for Android and Java.
* [Glide](https://github.com/bumptech/glide) - Image loading library.
* [ConcatAdapter](https://medium.com/androiddevelopers/merge-adapters-sequentially-with-mergeadapter-294d2942127a) RecyclerView adapter which enables you to sequentially combine multiple adapters to be displayed in a single RecyclerView.
* [Lottie](http://airbnb.io/lottie) - Animation library from AirBnB
* [MpChart](https://github.com/PhilJay/MPAndroidChart) - ‚ö°Ô∏è MPAndroidChart is a powerful & easy to use chart library for Android ‚ö°Ô∏è
* [Chucker](https://github.com/ChuckerTeam/chucker) - OkHttp interceptor providing a UI for inspecting and sharing their content.

* Architecture
    * Clean Architecture
    * MVVM + MVI
    * Offline first/last with Room an Retrofit
    * [Dynamic feature modules](https://developer.android.com/studio/projects/dynamic-delivery)
* Tests
    * [Unit Tests](https://en.wikipedia.org/wiki/Unit_testing) ([JUnit5](https://junit.org/junit5/)) ([JUnit4](https://junit.org/junit4/))
    * [MockWebServer](https://github.com/square/okhttp/tree/master/mockwebserver) Mock server for testing Api requests with OkHttp and Retrofit
    * [Mockk](https://mockk.io/) Mockking library for Kotlin
    * [Truth](https://truth.dev) Assertion library
    * [FlowTestObserver](https://github.com/SmartToolFactory/RxJava-Style-LiveData-And-Flow-TestObserver) RxJava style test observer for testing Flow
    * [LiveDataTestObserve](https://github.com/SmartToolFactory/RxJava-Style-LiveData-And-Flow-TestObserver) RxJava style test observer for LiveData
* Gradle
    * [Gradle Kotlin DSL](https://docs.gradle.org/current/userguide/kotlin_dsl.html)
    * Custom tasks
    * Plugins ([Ktlint](https://github.com/JLLeitschuh/ktlint-gradle), [Detekt](https://github.com/arturbosch/detekt#with-gradle), [SafeArgs](https://developer.android.com/guide/navigation/navigation-pass-data#Safe-args)), [Git Hooks](https://githooks.com)


### Modularaization, Library and Feature Modules

Uses both library modules and dynamic feature modules

## Architecture

<img src=""./docs/android-final-architecture.png""/>

Uses concepts of clean architecture

## Data Module

## Domain Module

### Database and Table Relations with Junction Table
",253,253,14,0,real-estate,"[android, android-animation, clean-architecture, coroutines-flow, dagger-hilt, dynamic-feature, dynamic-feature-module, kotlin-android, kotlin-gradle-dsl, mockk, mockwebserver, modularization, navigation-component, offline-first, real-estate, retrofit2, room-persistence-library, rxjava3, unit-testing]",0
camelaissani,loca,,https://github.com/camelaissani/loca,https://api.github.com/repos/loca/camelaissani,Open source real estate management,"# :warning: DEPRECATED :warning:

This repository is deprecated in favor of [MicroRealEstate](https://github.com/microrealestate/microrealestate).

The new version uses latest stack on the front-end (NextJS, ReactJS, MobX). The split between front and back-end code is more obvious and the UI has been fully rewritten.

Also, additional functionalities were added in order to customize the application to the landlords needs.

Developer wise [MicroRealEstate](https://github.com/microrealestate/microrealestate) should be easier to enhance and to maintain.

## Loca

### What is Loca?

This nodejs project is a tentative of web application that offers a toolkit for owners of buildings, flats, offices, meeting rooms, car parks, letter boxes...

The idea is to make easy the management of properties and occupants by proposing many services:

- Gather all information of your properties and occupants in one place
- Create rent contract from templates available in the system
- Follow the rent payments month by month
- Template letters for recovery of not paid rents

![Loca](http://www.nuageprive.fr/images/loca-sample.png 'Open source real estate management')

### Getting started

Follow instructions from [here](https://github.com/microrealestate/microrealestate#getting-started)

### Technical Stack

Back-end:

Node, Express, MongoDB, EJS (templates), PassportJS (authentication)

Front-End:

JQuery, Bootstrap, Handlebars, and [frontexpress](https://github.com/camelaissani/frontexpress)

Build system based on RollupJS

### Why do I created this application?

Simply to help my best friend and I to manage properties that we rent.

Above all, to have a good reason to play with node and javascript :-)
",227,227,36,2,real-estate,"[appartments, car-park, erp, invoices, nodejs, occupants, offices, open-source, owners, properties, property, property-management, real-estate, rentals]",0
AnthonyBloomer,daftlistings,,https://github.com/AnthonyBloomer/daftlistings,https://api.github.com/repos/daftlistings/AnthonyBloomer,A library that enables programmatic interaction with daft.ie. Daft.ie has nationwide coverage and contains about 80% of the total available properties in Ireland.,"# Daftlistings


[![Build Status](https://travis-ci.org/AnthonyBloomer/daftlistings.svg?branch=master)](https://travis-ci.org/AnthonyBloomer/daftlistings)
[![codecov](https://codecov.io/gh/AnthonyBloomer/daftlistings/branch/master/graph/badge.svg)](https://codecov.io/gh/AnthonyBloomer/daftlistings)

A library that enables programmatic interaction with [Daft.ie](https://daft.ie). Daft.ie has nationwide coverage and contains about 80% of the total available properties in Ireland.


## Installation

Daftlistings is available on the [Python Package Index (PyPI)](https://pypi.org/project/daftlistings/). You can install daftlistings using pip.

``` bash
virtualenv env
source env/bin/activate
pip install daftlistings
```

To install the development version, run:

``` bash
pip install https://github.com/AnthonyBloomer/daftlistings/archive/dev.zip
```

## Usage

``` python
from daftlistings import Daft

daft = Daft()
listings = daft.search()

for listing in listings:
    print(listing.title)
    print(listing.price)
    print(listing.daft_link)
    # ...
```

By default, the Daft search function iterates over each page of results and appends each Listing object to the array that is returned. If you wish to limit the number of results that are returned you can use the `max_pages` argument.

```python
daft.search(max_pages=1)
```

## Examples

Search for apartments for rent in Dublin.

```python
from daftlistings import Daft, Location, SearchType, PropertyType

daft = Daft()
daft.set_location(Location.DUBLIN)
daft.set_search_type(SearchType.RESIDENTIAL_RENT)
daft.set_property_type(PropertyType.APARTMENT)

listings = daft.search()

for listing in listings:
    print(listing.title)
    print(listing.price)
    print(listing.daft_link)
```

Search for houses for sale in Dublin between 400 and 500k.

```python
from daftlistings import Daft, Location, SearchType, PropertyType

daft = Daft()
daft.set_location(Location.DUBLIN)
daft.set_search_type(SearchType.RESIDENTIAL_SALE)
daft.set_property_type(PropertyType.HOUSE)
daft.set_min_price(400000)
daft.set_max_price(500000)

listings = daft.search()

for listing in listings:
    print(listing.title)
    print(listing.price)
    print(listing.daft_link)
```

Search for student accomodation near Dundalk IT.

```python
from daftlistings import Daft, Location, SearchType

daft = Daft()
daft.set_location(Location.DUNDALK_INSTITUTE_OF_TECHNOLOGY_LOUTH)
daft.set_search_type(SearchType.STUDENT_ACCOMMODATION)

listings = daft.search()

for listing in listings:
    print(listing.title)
    print(listing.price)
    print(listing.daft_link)
```

Search for commercial listings.

```python
from daftlistings import Daft, SearchType

daft = Daft()
daft.set_search_type(SearchType.COMMERCIAL_SALE)

listings = daft.search()

for listing in listings:
    print(listing.title)
    print(listing.price)
    print(listing.daft_link)
    print()
```

Search properties according to criteria then sort by nearness to Dublin Castle

```python
from daftlistings import Daft, SearchType

daft = Daft()

daft.set_location(""Dublin City"")
daft.set_search_type(SearchType.RESIDENTIAL_RENT)
daft.set_min_price(1000)
daft.set_max_price(1500)

listings = daft.search(max_pages=1)

dublin_castle_coords = [53.3429, -6.2674]
listings.sort(key=lambda x: x.distance_to(dublin_castle_coords))

for listing in listings:
    print(f'{listing.title}')
    print(f'{listing.daft_link}')
    print(f'{listing.price}')
    print(f'{listing.distance_to(dublin_castle_coords):.3}km')
    print('')

```

Search properties within 10kms of Dublin city centre

```python
from daftlistings import Daft, SearchType

daft = Daft()

daft.set_location(""Dublin City Centre"", Distance.KM10)
daft.set_search_type(SearchType.RESIDENTIAL_RENT)

listings = daft.search(max_pages=1)

for listing in listings:
    print(f'{listing.title}')
    print(f'{listing.daft_link}')
    print(f'{listing.price}')
    print('')

```

Search rental properties in Dublin with monthly rent lower than 1500 euros and visualize it on a map

```python
import pandas as pd
from daftlistings import Daft, Location, SearchType, PropertyType, SortType, MapVisualization

 
daft = Daft()
daft.set_location(Location.DUBLIN)
daft.set_search_type(SearchType.RESIDENTIAL_RENT)
daft.set_sort_type(SortType.PRICE_ASC)
daft.set_max_price(1500)

listings = daft.search()

# cache the listings in the local file
with open(""result.txt"", ""w"") as fp:
    fp.writelines(""%s\n"" % listing.as_dict_for_mapping() for listing in listings)

# read from the local file
with open(""result.txt"") as fp:
  lines = fp.readlines()

properties = []
for line in lines:
  properties.append(eval(line))

df = pd.DataFrame(properties)
print(df)

dublin_map = MapVisualization(df)
dublin_map.add_markers()
dublin_map.add_colorbar()
dublin_map.save(""ireland_rent.html"")
print(""Done, please checkout the html file"")
```

Search for apartments for rent in Dublin with an alarm and parking.

```python
from daftlistings import Daft, Location, SearchType, PropertyType, Facility

daft = Daft()
daft.set_location(Location.DUBLIN)
daft.set_search_type(SearchType.RESIDENTIAL_RENT)
daft.set_property_type(PropertyType.APARTMENT)
daft.set_facility(Facility.PARKING)
daft.set_facility(Facility.ALARM)

listings = daft.search()

for listing in listings:
    print(listing.title)
    print(listing.price)
    print(listing.daft_link)
    print()
```

## Running Tests

The Python unittest module contains its own test discovery function, which you can run from the command line:

```
python -m unittest discover tests/
```


## Contributing

  - Fork the project and clone locally.
  - Create a new branch for what you're going to work on.
  - Push to your origin repository.
  - Create a new pull request in GitHub.

Note: We use (Black)[https://github.com/psf/black] for code formatting. After making any changes to the code, it is important for you to ensure that it passes Black's lint check. ",153,153,17,0,real-estate,"[daft, housing-prices, ireland, properties, property-market, python, real-estate]",0
MBKraus,Predicting_real_estate_prices_using_scikit-learn,,https://github.com/MBKraus/Predicting_real_estate_prices_using_scikit-learn,https://api.github.com/repos/Predicting_real_estate_prices_using_scikit-learn/MBKraus,"Predicting Amsterdam house / real estate prices using Ordinary Least Squares-, XGBoost-, KNN-, Lasso-, Ridge-, Polynomial-, Random Forest-, and Neural Network MLP Regression (via scikit-learn)","# Predicting Amsterdam house / real estate prices using Ordinary Least Squares-, XGBoost-, KNN-, Lasso-, Ridge-, Polynomial-, Random Forest-, and Neural Network MLP Regression (via scikit-learn)

## Approach:

- load Pandas DataFrame containing (Dec-17) housing data retrieved by means of the [following scraper](https://github.com/Weesper1985/Funda-Scraper), supplemented with longitude and latitude coordinates mapped to zip code (via [GeoPy](https://geopy.readthedocs.io/en/1.10.0/#)
- do some simple data exploration / visualisation
- remove non-numeric data, NaNs, and outliers (everything above 3 x standard dev of y)
- define explanatory variables (surface,latitude,and longitude) and independent variable (price EUR)
- split the data in train and test sets (+ normalise independent variables where required) 
- find the optimal model parameters using [scikit-learn](http://scikit-learn.org/stable/)'s GridSearchCV
- fit the model using GridSearchCV's optimal parameters
- evaluate estimator performance by means of 5 fold 'shuffled' nested cross-validation
- predict cross validated estimates of y for each data point and plot on scatter diagram vs true y

## Packages required

- [Python 3.7.0](https://www.python.org/downloads/)
- [Matplotlib](https://matplotlib.org/)
- [Pandas](https://pandas.pydata.org/)
- [Numpy](https://docs.scipy.org/doc/)
- [scikit-learn](http://scikit-learn.org/stable/)

## Scores (5 fold nested 'shuffled'cross-validation - Rsquared)

**1. XGBoost Regression**											                                            
  * Parameters: max_depth: 5, min_child_weight: 6, gamma: 0.01, colsample_bytree: 1, subsample: 0.7
  * Score: 0.887	

**2. Random Forest Regression**        									                                   
  * Parameters: max_depth: 6, max_feat: None, n_estimators: 10
  * Score:  0.839

**3. Polynomial Regression**                                							
  * Parameters: degrees: 2
  * Score: 0.731
  
**4. Neural Network MLP Regression** 				     					
  * Parameters: act: relu, alpha: 0.01, hidden_layer_size: (10,10), learning_rate: invscal
  * Score: 0.715
  
**5. KNN Regression**                                      							
  * Parameters: n_neighbours: 10
  * Score: 0.711
  
**6. Ordinary Least-Squares Regression**                                    				
  * Parameters: None
  * Score: 0.694
  
**7. Ridge Regression** 		                                        				
  * Parameters: alpha: 0.01
  * Score: 0.694
  
**8. Lasso Regression**                                        	 					
  * Parameters: alpha 0.01
  * Score: 0.693

### Sample data input (Pandas DataFrame)
```
   surface  rooms_new  zipcode_new  price_new   latitude  longitude
0    138.0        4.0         1060     420000  40.804672 -73.963420
1    130.0        5.0         1087     550000  52.355590   5.000561
2    116.0        5.0         1061     425000  52.373044   4.837568
3     92.0        5.0         1035     349511  52.416895   4.906767
4    127.0        4.0         1013    1050000  52.396789   4.876607
```

#### Scatter plot - Surface vs. Asking Price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/Scatter.png)

#### XGBoost - Predicted prices vs. True price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/XGB.png)

#### Random Forest - Predicted prices vs. True price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/Forest.png)

#### Polynomial - Predicted prices vs. True price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/Poly.png)

#### Neural Network MLP - Predicted prices vs. True price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/MLP.png)

#### KNN - Predicted prices vs. True price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/KNN.png)

#### OLS - Predicted prices vs. True price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/OLS.png)

#### Lasso - Predicted prices vs. True price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/Lasso.png)

#### Ridge - Predicted prices vs. True price (EUR)

![alt text](https://github.com/Weesper1985/Predicting_real_estate_prices_using_scikit-learn/blob/master/Ridge.png)

",138,138,15,0,real-estate,"[amsterdam, decision-trees, ensemble-learning, knn, knn-regression, lasso, lasso-regression, machine-learning, mlp-regressor, multi-layer-perceptron, neural-network, ols, polynomial, polynomial-regression, predicting-housing-prices, python, random-forest, real-estate, ridge-regression, xgboost]",0
Coderberg,ResidenceCMS,,https://github.com/Coderberg/ResidenceCMS,https://api.github.com/repos/ResidenceCMS/Coderberg,Open Source Property Management System based on Symfony 6,"![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg) [![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/Coderberg/ResidenceCMS/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/Coderberg/ResidenceCMS/?branch=master) [![Testing with MySQL](https://github.com/Coderberg/ResidenceCMS/actions/workflows/mysql.yml/badge.svg)](https://github.com/Coderberg/ResidenceCMS/actions/workflows/mysql.yml) [![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=Coderberg_ResidenceCMS&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=Coderberg_ResidenceCMS) [![StyleCI](https://github.styleci.io/repos/148062622/shield?branch=master)](https://github.styleci.io/repos/148062622?branch=master)

ResidenceCMS is a fast and lightweight Property Management System on top of [Symfony 6][1].

![GitHub](https://raw.githubusercontent.com/Coderberg/ResidenceCMS/master/docs/images/screenshot.png)

## Requirements

- PHP 8.1.0 or higher;
- PDO PHP Extension;
- GD PHP extension
- MySQL >= 5.7;
- And the [usual Symfony application requirements][2].

## Installation

1. Install Composer (see http://getcomposer.org/download)

2. Create new project via [Composer][3]

   ```
   $ composer create-project coderberg/residence-cms mywebsite.loc
   ```
3. Enter the newly created folder

   ```
   $ cd mywebsite.loc
   ```

4. After installing you should configure your web server's document / web root to be the ```public``` directory.

5. Create ```.env.local``` from ```.env``` file and fill in your database credentials

    ```
    DATABASE_URL=mysql://db_user:db_password@127.0.0.1:3306/db_name
    ```

6. Run

    ```
    $ php bin/console app:install
    ```

7. Go to http://mywebsite.loc/en/admin and log in.

   ```
   login: admin
   password: admin
   ```

8. To use feedback forms, configure MAILER_DSN in ```.env.local```

## Tests

1. Modify your DATABASE_URL config in ```.env.test.local```

   ```
   DATABASE_URL=mysql://db_user:db_password@127.0.0.1:3306/db_name
   ```

2. Install the ChromeDriver:

   ```
   vendor/bin/bdi detect drivers
   ```

3. Execute this command to run tests:

   ```
   php bin/phpunit
   ```

## Additional documentation
- [How to run Residence CMS in Docker Containers][4]

[1]: https://symfony.com/
[2]: https://symfony.com/doc/current/setup.html#technical-requirements
[3]: https://getcomposer.org/doc/03-cli.md#create-project
[4]: https://github.com/Coderberg/ResidenceCMS/blob/master/docs/docker.md
",107,107,15,3,real-estate,"[cms, php-cms, php8, real-estate, symfony, symfony-application, symfony6]",0
bigprof-software,online-rental-property-manager,bigprof-software,https://github.com/bigprof-software/online-rental-property-manager,https://api.github.com/repos/online-rental-property-manager/bigprof-software,"Manage your rental properties, units, applications, leases and tenants.","[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/bigprof-software/online-rental-property-manager) 

# Online Rental Property Manager (ORPM)

<img src=""https://cdn.bigprof.com/screencasts/online-rental-property-manager-demo-6.3.gif"" title=""ORPM screencast"" alt=""ORPM (Online rental property manager) screencast"" width=""960"" height=""465"" style=""width: 100%; max-width: 960px; height: auto;"">

Online rental property manager (ORPM) is a free open source app.
It allows you to manage landlords, rental properties, units, 
applications, leases and tenants. Add all details related to the tenants, i.e. references, 
rental history, employment history and income overview.

ORPM was created using [AppGini](https://bigprof.com/appgini/).
So you can easily customize it to add/remove 
details or any extra functionality to fit your own requirements. 
ORPM is a responsive, multi-user web-based application that you can access from your PC, tablet, 
mobile or any other device. 

### [‚á© Download the latest release](https://github.com/bigprof-software/online-rental-property-manager/releases/latest) ([_Changelog_](https://github.com/bigprof-software/online-rental-property-manager/releases))

## Features

* Manage applicants and tenants.
* Add, search and manage applications and leases.
* Manage applicants/tenants rental history, employment history and other references.
* Manage landlords, properties, and units.
* Reports (created by [Summary Reports plugin for AppGini](https://bigprof.com/appgini/applications/summary-reports-plugin)):
	* **Applicants by status** review how many new applicants vs. tenants vs. previous tenants do we have.
	* **Applications/leases over time** review the growth of leases and applications over time.
	* **Applications/leases by property** review the growth of demand for each property over time.
	* **Leases by property over time** review the growth of actual leases for each property over time.
	* **Lease value by property over time** check the monthly rental revenue for each property and its growth over time.
* Efficient management of applications status through mass update of multiple applications.
* Quickly view leases starting and ending each month through a calendar view -- also allows adding and editing (created by [Calendar plugin for AppGini](https://bigprof.com/appgini/applications/calendar-plugin)).

This application was created using [AppGini](https://bigprof.com/appgini/),
and therefore it shares the features of any AppGini application as well, including:

* Responsive Bootstrap apps that work beautifully on any device.
* Support for multiple users and user groups, with easy-to-configure per-table permissions.
* Quick and advanced search.
* Export your data to CSV to work on them in Excel or other spreadsheets.
* Import already-existing data from CSV files through a powerful import wizard.

*Disclaimer: AppGini itself is not an open source application,
but: 1. applications generated by AppGini can be distributed as open source with any
license of choice. 2. You don't need to install AppGini in order to use this app.*

---

## Installation

This is a PHP/MySQL web application that you run from a browser. You can install it either locally
on your own PC, or to a web/intranet server.

### 1. Try the live demo

* We provide a live demo with sample data [here](https://demos.appgini.com/online-rental-property-manager/)
* You can access the demo as a guest user, with read-only access to data.
* You can also access the demo using the following credentials:
  * Username: `demo`
  * Password: `demo`

  The above credentials allow browsing the sample data with read-only access,
  as well as adding new data, with full access (view, edit, delete). Data added
  through the demo account is automatically removed periodically to prevent
  cluttering the demo app.

### 2. Trying it out using Gitpod (requires a github account)

This application is ready to run within the Gitpod IDE.
This will allow you to try the application out and develop it for your needs.
All you will need is a web browser. _Do not use this in production!!!_

**[Launch private demo on Gitpod](https://gitpod.io/#https://github.com/bigprof-software/online-rental-property-manager)**

The app would take a couple of minutes to launch.
Afterwards, you'll see the welcome screen of the app in the right part of the window, where you can start the setup wizard.
When prompted to enter the database name, database username and datatbase password, you should enter `appgini` for all.

Gitpod is intended for previewing the app only, and is _not suitable for use in actual production environments_.

---

### 3. Installing to a PC

#### System requirements

This application can be installed on Windows, Linux and MacOS. Before installing,
you should have the following software set up and running:

* A webserver (Apache, IIS, nginx, ... etc)
* PHP 7.0 or higher.
* MySQL 5.6 and above; or MariaDB 10 and above.

If you don't have the above software installed, we recommend installing
[Xampp latest version](https://www.apachefriends.org/).

#### Installation steps

1. [Download the latest release as a zip file](https://github.com/bigprof-software/online-rental-property-manager/releases/latest).
(Click the *Source code (zip)* link down the page).

2. Extract the contents of the zip file. Then copy the contents of the `app` folder into a folder inside your document root.
For Xampp on Windows, this is usually `C:\xampp\htdocs`
(*[more info about how to find your 'document root'](http://www.karelia.com/sandvox/help/z/Document_Root.html)*).

3. In your web browser, go to: `http://localhost/app-folder/`
(change `app-folder` to the name of the folder inside your document root where you extracted the zip in step 2).

4. You should now see the setup wizard in your browser. Just follow the steps!   
![The setup wizard](https://cdn.bigprof.com/appgini-open-source-apps/setup-wizard-page-1.png)

---

### 4. Installing to a web/intranet server

#### System requirements

This application can be installed on both Windows and Linux servers.
Before installing, make sure your server has the following software:

* PHP 7.0 or higher
* MySQL 5.6 and above; or MariaDB 10 and above.
	
Make sure your have access to a MySQL/MariaDB database.
You might need to set up one in your server control panel.
Please refer to your server documentation or the technical support staff for help on this if needed.

If your server has cPanel installed, here is a
[screencast explaining how to install your application using cPanel](https://bigprof.com/appgini/screencasts/how-to-upload-your-appgini-web-application-to-a-web-server-using-ftp-and-cpanel).

#### Installation steps

1. [Download the latest release as a zip file](https://github.com/bigprof-software/online-rental-property-manager/releases/latest).
(Click the *Source code (zip)* link down the page).

2. Extract the contents of the zip file. Then upload the contents of the `app` folder to a folder inside your server document root.
This might be a folder named `public_html` or `/var/www/html` or something else, based on how your server is set up
(ask your server admin if you need help on that).

3. In your web browser, visit `http://server.com/app-folder/`
(change `server.com` above to the actual domain name or IP address of your server,
and change `app-folder` to the name of the folder inside your document root where
you uploaded the files in step 2).

4. You should now see the setup wizard in your browser. Just follow the steps!

---

## Customization

This application was created using [AppGini](https://bigprof.com/appgini). This means you can easily customize it by
opening the included AXP project file in AppGini. Examples of possible customization you can do from there include:

* [Changing the application theme](https://bigprof.com/appgini/screencasts/how-to-easily-change-your-appgini-application-theme).
* Adding more fields to existing tables, or entirely new tables to fit your use cases.
* Changing the options/behavior of any table/field in your application.
* For more details, check [the AppGini tutorials](https://bigprof.com/appgini/screencasts/).

You can also perform more advanced customization, like adding reports,
changing validation rules, adding business logic, ... etc. through hooks.
Please refer to the [AppGini hooks documentation](https://bigprof.com/appgini/help/advanced-topics/hooks)
for more details.

_Contributions to this project are always welcome :)_
",107,107,12,0,real-estate,"[landlord, mariadb, mysql, php, property-management, real-estate, rental, small-business, tenants, webapp]",0
eevan7a9,real-estate-management,,https://github.com/eevan7a9/real-estate-management,https://api.github.com/repos/real-estate-management/eevan7a9,Real estate and physical property management to connect property managers and potential buyers.,"# real-estate-management

A online property management solution for real estate and
physical property management. This can include residential,
commercial, and land real estate. a software developed to
connect property managers and potential buyers.

üöß **frontend/** work in progress üöß.

üöß **backend-fastify/** work in progress üöß.

**[LIVE DEMO](https://real-estate-management.netlify.app/)**

![Screenshot](https://ik.imagekit.io/wr5lnrww0q8/REM_Folder/social_GKmc-8vHw.jpg?updatedAt=1631134174081)


## **Dependencies**

### **Frontend**
- [Ionic 6+](https://ionicframework.com/)
- [Angular 14+](https://angular.io/)
- [leaflet 1.7+](https://leafletjs.com/)
- [chartjs 3.5+](https://www.chartjs.org/)

### **Backend**
- [Node](https://nodejs.org/en/)
- [fastify 4+](https://www.fastify.io/)
- [mongoDB](https://www.mongodb.com/)

# **SETUP**

## **Frontend (Part)**

### **1.1 navigate to `frontend/` directory.**

```
#  navigate to frontend 
$ cd frontend
```

### **1.2 Fill the desired environment variables:**  
- navigate to `frontend/src/environments`
- set values to variables (ex. api.url) 
```
  api: {
    url: 'http://localhost:8000/', <-- server URL
    mapKey: '', <-- Leaflet map key,
    googleAuthClientId: '', <-- google Auth CLient ID for Social signin
    webSocketUrl: 'ws://localhost:8000/websocket' <-- websocket URL
  }
```

### **2. then install dependencies & run ionic serve**

In terminal - command
```
# install dependencies
$ npm install

# serve frontend
$ ionic serve
```

<br>

## **Backend-Fastify (Part)**
### **1.1 navigate to `backend-fastify/` directory.**
```
cd backend-fastify/
```
### **1.2 create `.env` file & add variables:**
- copy `.env.example` & re-name it to `.env`
- set your desired variable value
```
PORT=8000
LOGGER=true
SALT=12
SECRET_KEY='secret'
DB_CONNECT=mongodb://localhost:27017/rem-db
```
### **2. then install dependencies & run dev**

In terminal - command
```
#  navigate to backend-fastify 
$ cd backend-fastify

# install dependencies
$ npm install

# start server
$ npm start `or` $ npm run dev

```

### **2.1 Database seeder(optional)**
- Make sure `.env` is configured & dependencies are installed
- Will populate database with dummy data.

‚ö†Ô∏è This will delete existing records in the database document. 

‚ö†Ô∏è Make a backup if needed
```
$ npm run db:seeder
```

dummy user:
```
  fullName: ""test tester"",
  email: ""test@email.com"",
  password: ""password""

  You can use this to signin.
```
## Routes
```
/docs/
/users/
/auth/
/properties/
/enquiries/
```",94,94,7,0,real-estate,"[angular, angular-project, fastify, ionic, ionic-project, property-management, real-estate]",0
expresspixel,estatezilla,,https://github.com/expresspixel/estatezilla,https://api.github.com/repos/estatezilla/expresspixel,A lightweight open-source Real Estate CMS,,77,77,18,37,real-estate,"[cms, laravel, php, properties, real-estate, realestate]",0
abresler,realtR,,https://github.com/abresler/realtR,https://api.github.com/repos/realtR/abresler,Real estate brokers are the....,,73,73,11,5,real-estate,"[broker, r, real-estate]",0
ZacharyHampton,HomeHarvest,,https://github.com/ZacharyHampton/HomeHarvest,https://api.github.com/repos/HomeHarvest/ZacharyHampton,Python package for real estate scraping of MLS listing data,"<img src=""https://github.com/ZacharyHampton/HomeHarvest/assets/78247585/d1a2bf8b-09f5-4c57-b33a-0ada8a34f12d"" width=""400"">

**HomeHarvest** is a simple, yet comprehensive, real estate scraping library that extracts and formats data in the style of MLS listings.

[![Try with Replit](https://replit.com/badge?caption=Try%20with%20Replit)](https://replit.com/@ZacharyHampton/HomeHarvestDemo)

**Not technical?** Try out the web scraping tool on our site at [tryhomeharvest.com](https://tryhomeharvest.com).

*Looking to build a data-focused software product?* **[Book a call](https://calendly.com/zachary-products/15min)** *to work with us.*

Check out another project we wrote: ***[JobSpy](https://github.com/cullenwatson/JobSpy)** ‚Äì a Python package for job scraping*

## HomeHarvest Features

- **Source**: Fetches properties directly from **Realtor.com**.
- **Data Format**: Structures data to resemble MLS listings.
- **Export Flexibility**: Options to save as either CSV or Excel.
- **Usage Modes**:
  - **Python**: For those who'd like to integrate scraping into their Python scripts.
  - **CLI**: For users who prefer command-line operations.


[Video Guide for HomeHarvest](https://youtu.be/J1qgNPgmSLI) - _updated for release v0.3.4_

![homeharvest](https://github.com/ZacharyHampton/HomeHarvest/assets/78247585/b3d5d727-e67b-4a9f-85d8-1e65fd18620a)

## Installation

```bash
pip install homeharvest
```
  _Python version >= [3.10](https://www.python.org/downloads/release/python-3100/) required_ 

## Usage

### Python

```py
from homeharvest import scrape_property
from datetime import datetime

# Generate filename based on current timestamp
current_timestamp = datetime.now().strftime(""%Y%m%d_%H%M%S"")
filename = f""HomeHarvest_{current_timestamp}.csv""

properties = scrape_property(
  location=""San Diego, CA"",
  listing_type=""sold"",  # or (for_sale, for_rent, pending)
  past_days=30,  # sold in last 30 days - listed in last x days if (for_sale, for_rent)
  # mls_only=True,  # only fetch MLS listings
  # proxy=""http://user:pass@host:port""  # use a proxy to change your IP address
)
print(f""Number of properties: {len(properties)}"")

# Export to csv
properties.to_csv(filename, index=False)
print(properties.head())
```

### CLI 

```
usage: homeharvest [-l {for_sale,for_rent,sold}] [-o {excel,csv}] [-f FILENAME] [-p PROXY] [-d DAYS] [-r RADIUS] [-m] [-c] location
                                                                                                                             
Home Harvest Property Scraper                                                                                                 
                                                                                                                             
positional arguments:                                                                                                         
  location              Location to scrape (e.g., San Francisco, CA)                                                          
                                                                                                                             
options:                                                                                                                      
  -l {for_sale,for_rent,sold,pending}, --listing_type {for_sale,for_rent,sold,pending}                                                        
                        Listing type to scrape                                                                                
  -o {excel,csv}, --output {excel,csv}                                                                                        
                        Output format                                                                                         
  -f FILENAME, --filename FILENAME                                                                                            
                        Name of the output file (without extension)                                                           
  -p PROXY, --proxy PROXY                                                                                                     
                        Proxy to use for scraping                                                                             
  -d DAYS, --days DAYS  Sold/listed in last _ days filter.                                                                           
  -r RADIUS, --radius RADIUS                                                                                                  
                        Get comparable properties within _ (e.g., 0.0) miles. Only applicable for individual addresses.        
  -m, --mls_only        If set, fetches only MLS listings.                                                                    
```
```bash
homeharvest ""San Francisco, CA"" -l for_rent -o excel -f HomeHarvest
```


## Output
```plaintext
>>> properties.head()
    MLS       MLS # Status          Style  ...     COEDate LotSFApx PrcSqft Stories
0  SDCA   230018348   SOLD         CONDOS  ...  2023-10-03   290110     803       2
1  SDCA   230016614   SOLD      TOWNHOMES  ...  2023-10-03     None     838       3
2  SDCA   230016367   SOLD         CONDOS  ...  2023-10-03    30056     649       1
3  MRCA  NDP2306335   SOLD  SINGLE_FAMILY  ...  2023-10-03     7519     661       2
4  SDCA   230014532   SOLD         CONDOS  ...  2023-10-03     None     752       1
[5 rows x 22 columns]
```

### Parameters for `scrape_property()`
```
Required
‚îú‚îÄ‚îÄ location (str): The address in various formats - this could be just a zip code, a full address, or city/state, etc.
‚îî‚îÄ‚îÄ listing_type (option): Choose the type of listing.
    - 'for_rent'
    - 'for_sale'
    - 'sold'
    - 'pending'

Optional
‚îú‚îÄ‚îÄ radius (decimal): Radius in miles to find comparable properties based on individual addresses.
‚îÇ    Example: 5.5 (fetches properties within a 5.5-mile radius if location is set to a specific address; otherwise, ignored)
‚îÇ
‚îú‚îÄ‚îÄ past_days (integer): Number of past days to filter properties. Utilizes 'last_sold_date' for 'sold' listing types, and 'list_date' for others (for_rent, for_sale).
‚îÇ    Example: 30 (fetches properties listed/sold in the last 30 days)
‚îÇ
‚îú‚îÄ‚îÄ mls_only (True/False): If set, fetches only MLS listings (mainly applicable to 'sold' listings)
‚îÇ
‚îî‚îÄ‚îÄ proxy (string): In format 'http://user:pass@host:port'

```
### Property Schema
```plaintext
Property
‚îú‚îÄ‚îÄ Basic Information:
‚îÇ ‚îú‚îÄ‚îÄ property_url
‚îÇ ‚îú‚îÄ‚îÄ mls
‚îÇ ‚îú‚îÄ‚îÄ mls_id
‚îÇ ‚îî‚îÄ‚îÄ status

‚îú‚îÄ‚îÄ Address Details:
‚îÇ ‚îú‚îÄ‚îÄ street
‚îÇ ‚îú‚îÄ‚îÄ unit
‚îÇ ‚îú‚îÄ‚îÄ city
‚îÇ ‚îú‚îÄ‚îÄ state
‚îÇ ‚îî‚îÄ‚îÄ zip_code

‚îú‚îÄ‚îÄ Property Description:
‚îÇ ‚îú‚îÄ‚îÄ style
‚îÇ ‚îú‚îÄ‚îÄ beds
‚îÇ ‚îú‚îÄ‚îÄ full_baths
‚îÇ ‚îú‚îÄ‚îÄ half_baths
‚îÇ ‚îú‚îÄ‚îÄ sqft
‚îÇ ‚îú‚îÄ‚îÄ year_built
‚îÇ ‚îú‚îÄ‚îÄ stories
‚îÇ ‚îî‚îÄ‚îÄ lot_sqft

‚îú‚îÄ‚îÄ Property Listing Details:
‚îÇ ‚îú‚îÄ‚îÄ list_price
‚îÇ ‚îú‚îÄ‚îÄ list_date
‚îÇ ‚îú‚îÄ‚îÄ sold_price
‚îÇ ‚îú‚îÄ‚îÄ last_sold_date
‚îÇ ‚îú‚îÄ‚îÄ price_per_sqft
‚îÇ ‚îî‚îÄ‚îÄ hoa_fee

‚îú‚îÄ‚îÄ Location Details:
‚îÇ ‚îú‚îÄ‚îÄ latitude
‚îÇ ‚îú‚îÄ‚îÄ longitude

‚îî‚îÄ‚îÄ Parking Details:
    ‚îî‚îÄ‚îÄ parking_garage
```

### Exceptions
The following exceptions may be raised when using HomeHarvest:

- `InvalidListingType` - valid options: `for_sale`, `for_rent`, `sold`
- `NoResultsFound` - no properties found from your search
  
  
## Frequently Asked Questions
---

**Q: Encountering issues with your searches?**  
**A:** Try to broaden the parameters you're using. If problems persist, [submit an issue](https://github.com/ZacharyHampton/HomeHarvest/issues).

---

**Q: Received a Forbidden 403 response code?**  
**A:** This indicates that you have been blocked by Realtor.com for sending too many requests. We recommend:

- Waiting a few seconds between requests.
- Trying a VPN or useing a proxy as a parameter to scrape_property() to change your IP address.

---

",72,72,2,1,real-estate,"[data, finance, mls, properties, proptech, real-estate, realtor, redfin, redfin-scraper, scraper, scraping, webscraping, zillow, zillow-scraper]",0
RealEstateWebTools,property_web_scraper,RealEstateWebTools,https://github.com/RealEstateWebTools/property_web_scraper,https://api.github.com/repos/property_web_scraper/RealEstateWebTools,Web based UI to make scraping data from real estate websites super simple,"# PWB as used by [https://homestocompare.com/](https://homestocompare.com/)

Great new for anyone interested in this project, a US appeals court has recently reaffirmed that web scraping is legal!!

https://techcrunch.com/2022/04/18/web-scraping-legal-court/amp/

I am currently a bit busy with other projects but hope to return to update it shortly.

Please get in touch if you are interested in helping me take this project forward.


## [Demo of PropertyWebScraper ](https://homestocompare.com/)

Previously there was a demo at [https://real-estate-web-scraper.herokuapp.com](https://real-estate-web-scraper.herokuapp.com/)

I have had to take that down as heroku has cancelled thier free tier.  You can see it being used in production here though: [https://homestocompare.com/](https://homestocompare.com/)

To use Property Web Scraper as a service you would make calls like:

[https://real-estate-web-scraper.herokuapp.com/retriever/as_json?url=https%3A%2F%2Fwww.rightmove.co.uk%2Fproperty-for-sale%2Fproperty-68790657.html](https://real-estate-web-scraper.herokuapp.com/retriever/as_json?url=https%3A%2F%2Fwww.rightmove.co.uk%2Fproperty-for-sale%2Fproperty-68790657.html)

## Support for importing properties from an MLS

PropertyWebScraper also supports connecting to different MLSs (Multiple Listing Services) in the US using RETS and Web Services.  This functionality is currently experimental and has only been implemented for 3 MLSs.  If there is a particular MLS for which you need support, open an issue with the details.   

## Rails Version

PropertyWebScraper runs with Rails >= 5.0

## Ruby Version

PropertyWebScraper runs with Ruby >= 2.0.0.


## Installation

Install into an existing Rails project by adding these lines in your applications's Gemfile:

```ruby
gem 'property_web_scraper', git: 'https://github.com/RealEstateWebTools/property_web_scraper', branch: 'master'
```

Also, be sure to use Postgres as your database (by having the ""pg"" gem and Postgres installed locally 
And then execute:
```bash
$ bundle
```

Mount PropertyWebScraper by adding the following to your routes.rb file:
```ruby
mount PropertyWebScraper::Engine => '/'
```

and run the ff commands from the console:
```bash
rails property_web_scraper:install:migrations
rails db:create
rails db:migrate
rails property_web_scraper:db:seed
```


## Contribute and spread the love
We encourage you to contribute to this project and file issues for any problems you encounter.

If you like it, please star it and spread the word on [Twitter](https://twitter.com/prptywebbuilder), [LinkedIn](https://www.linkedin.com/company/propertywebbuilder) and [Facebook](https://www.facebook.com/propertywebbuilder).  You can also subscribe to github notifications on this project.  

Please consider making a contribution to the development of PropertyWebScraper.  If you wish to pay for specific enhancements, please email me directly (opensource at propertywebbuilder.com).

Or make a contribution to PropertyWebBuilder here:
[https://opencollective.com/property_web_builder](https://opencollective.com/property_web_builder)

---

## License

The gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).

## Disclaimer

While scraping can sometimes be used as a legitimate way to access all kinds of data on the internet, it‚Äôs also important to consider the legal implications. There are cases where scraping data may be considered illegal, or open you to the possibility of being sued. 

I created this tool in part as a learning exercise and am sharing it in case others find it useful. If you do decide to use this tool to scrape a website it is your responsibilty to ensure that what you are doing is legal.
",70,70,12,7,real-estate,"[mls, rails, real-estate, rets, ruby, scrapers]",0
noahgift,real_estate_ml,,https://github.com/noahgift/real_estate_ml,https://api.github.com/repos/real_estate_ml/noahgift,Machine Learning for Real Estate,"# real_estate_ml
Machine Learning for Real Estate

You may want to run jupyter in this mode:
```
jupyter notebook --NotebookApp.iopub_data_rate_limit=10000000000
```


## Zillow API Sign Up

To sign up for the zillow api:

https://www.zillow.com/howto/api/APIOverview.htm

## Download Zillow

Zillow data can be downloaded from site here:
https://www.zillow.com/research/data/

# Exploratory Data Analysis

* [Jupyter Notebook with Plotly Integration doing Zillow Data Exploration](https://github.com/noahgift/real_estate_ml/blob/master/notebooks/explore_zillow_data_sets.ipynb)

# Plotly Graphs

* [Plotly Interactive Chart:  30 Year History of Real Estate USA](https://plot.ly/~ngift/9/)

![30 Year History of Real Estate USA](https://user-images.githubusercontent.com/58792/33234951-e89a4d86-d1e3-11e7-94bc-6ca8ce336104.png)

* [Plotly Interactive Chart:  Bay Area Median Prices Single Family Homes](https://plot.ly/~ngift/7/)

![Bay Area Median Prices Single Family Homes](https://user-images.githubusercontent.com/58792/33234931-90cfd350-d1e3-11e7-94d4-61e6e7ed11d0.png)
",64,64,16,0,real-estate,"[jupyter-notebook, knn, machine-learning, pandas, plotly, python, real-estate, scikit-learn, unsupervised-learning]",0
denadai2,real-estate-neighborhood-prediction,,https://github.com/denadai2/real-estate-neighborhood-prediction,https://api.github.com/repos/real-estate-neighborhood-prediction/denadai2,"Code to repeat the experiments of ""The economic value of neighborhoods: Predicting real estate prices from the urban environment"" ","# The economic value of neighborhoods: Predicting real estate prices from the urban environment

This repository contains all the code required to reproduce the results presented in the following paper:

* M. De Nadai, B. Lepri. *The economic value of neighborhoods: Predicting real estate prices from the urban environment*, 2018.

Input, intermediary and source data can be downloaded from [figshare](https://doi.org/10.6084/m9.figshare.6934970).

# Dependencies

Dependencies are listed in the `requirements.txt` file at the root of the repository. Using [Python 3.6](https://www.python.org/downloads/) with [pip](https://pip.pypa.io/en/stable/installing/) all the required dependencies can be installed automatically.

``` sh
pip3 install -r requirements.txt
```

* [PostgreSQL 10.0](https://www.postgresql.org/) 
* [PostGIS 2.4.1](https://postgis.net) extension

# Data

Due to storage constraints, input data are not integrated to this repository. However, input and intermediary files required to run the analysis can be downloaded from a [figshare](https://doi.org/10.6084/m9.figshare.6934970). To run the following code, input and/or the intermediary files must be downloaded and placed in the folder. 
Then, do:

``` sh
createdb dsaa
gunzip < intermediate_db_backup.sql.gz | psql dsaa
tar -xf data.tar -C data/
```

Then place the content of dsaa_census_areas.zip into `data/generated_files/`.

To produce the intermediary files, go to the section ""DIY Instructions"".

# Code

The code of the analysis in divided in two parts: the Python scripts and modules used to support the analysis, and the notebooks where the outputs of the analysis have been produced.

## Scripts

* `data_processing_houses.ipynb` : script used for the pre-processing of Immobiliare.it data.
* `compute_walkability.py` : script used to generate the walkability scores for each census area.
* `data_processing_neighborhood.py` : script used to create all the dataset.
* `predict.py` : script used to predict the housing value from the intermediary files.
* `plots.ipynb` : script used to produce the images of the manuscript.


## License
This code is licensed under the MIT license. 


# DIY Instructions

Here we generate the entire database from ground. To do so, we have to create the minimal setup from this command:

``` sh
psql dsaa < data/SQL/minimal.sql
psql dsaa < data/SQL/minimal_materialize.sql
```

## Additional dependencies
* [osm2pgsql 0.95.0-dev](https://github.com/openstreetmap/osm2pgsql)
* [osrm v5.17.0](http://project-osrm.org/)
* [Security perception dependencies](https://github.com/denadai2/google_street_view_deep_neural)

## Census data
Census data have to complay to the format of the `census_areas_onfocus` table. Only when you did import data to this table you can proceed with all the steps. When you imported the data, you can generate the spatial matrix here:

``` sh
psql dsaa < data/SQL/first-DIY-step.sql
```


## Walkability
A OpenStreetMap file has to be downloaded (preferably from [here](https://wiki.openstreetmap.org/wiki/Planet.osm)), and placed in `data/OSM`. Then they are imported in PostGIS with:

``` sh
osm2pgsql -c -d dsaa --create --style ""config/osm2pgsql.style"" --multi-geometry --number-processes 5 --latlong -C 30000 [FILENAME].osm.pbf
```

The same file OSM file can then be used to produce the OSRM database:

``` sh
osrm-extract -p config/profiles/foot.lua [FILENAME].osm.pbf
osrm-contract [FILENAME].osrm
```

To run the server, use the command

``` sh
osrm-routed [FILENAME].osrm
```

After this everything is set up to create the intermediate data in the database. Import all the materialized view, then run the script. Before running it, personalize line 13 and 35 of `compute_walkability.py`.

``` sh
psql dsaa < data/SQL/walkability.sql
python3 compute_walkability.py
```

## Security perception
To create the security perception scores, we use the code and weights of the following paper:

* De Nadai, M., Vieriu, R. L., Zen, G., Dragicevic, S., Naik, N., Caraviello, M., ... & Lepri, B. *Are safer looking neighborhoods more lively?: A multimodal investigation into urban life*. In ACM MM 2016.

Everything is available [here](https://github.com/denadai2/google_street_view_deep_neural). All the prediction should be placed inside the `placepulse` table in PostgreSQL. Then, you can impor/refresh the materialized view present here:

``` sh
psql dsaa < data/SQL/security.sql
```

## Companies
You can insert a dataset with the census areas (`geoid`) and a proxy of companies earnings (`fatturato`) in `data/companies.csv`. Pay attention that this is included only in the non-open model version.

## Land value
You can insert a dataset with the census areas (`geoid`) and a proxy of land value (`assessed_land_value`) in `data/land_value.csv`. Pay attention that this is included only in the non-open model version.

## Census
Census data has to be inserted with the same format as the files placed in `data/census` and `data/census/industry`. To change this, change the corrisponding code at `data_processing_housing.py`.

## Land use
Download satellite shapefiles from https://land.copernicus.eu/local/urban-atlas/urban-atlas-2012/view. Import them in the `urban_atlas` PostgreSQL table. Then run the code:

``` sh
psql dsaa < data/SQL/urban_atlas.sql
```

# Some additional notes to the repository
* XGBoost 0.72 for some reason is not available anymore. I changed it to 0.71 because many users have contacted me because of this issue.",63,63,5,8,real-estate,"[datamining, real-estate, urban, urban-planning]",0
summera,retscli,,https://github.com/summera/retscli,https://api.github.com/repos/retscli/summera,CLI for querying RETS servers and searching metadata.,"# retscli

[![Gem Version](https://badge.fury.io/rb/retscli.svg)](https://badge.fury.io/rb/retscli)
[![Build Status](https://travis-ci.org/summera/retscli.svg?branch=master)](https://travis-ci.org/summera/retscli)

CLI for querying RETS servers and searching metadata.

This gem is built on top of the [rets](http://github.com/estately/rets) gem, which handles the actual querying and parsing of the RETS server requests. Big thanks to the [Estately](http://www.estately.com) team for their work!

![retscli gif](https://github.com/summera/gifs/blob/master/retscli/search_metadata_cropped.gif?raw=true)
![retscli png](https://github.com/summera/gifs/blob/master/retscli/search.png?raw=true)

## Installation
    $ gem install retscli

## Features
- Search metadata for keywords. Results are highlighted for readability.
- Search resources. Results are displayed in a nicely formatted ascii table.
- Open command results in your editor of choice.
- Debug RETS requests and queries in debug mode.
- Command results are paged using less by default.

## Usage

#### CLI Commands
```bash
$ retscli help
Commands:
  retscli capabilities [LOGIN URL]  # Display capabilities for rets server
  retscli console [LOGIN URL]       # Start rets console
  retscli help [COMMAND]            # Describe available commands or one specific command
  retscli validate [LOGIN URL]      # Validate rets credentials
```

To see the available flags/options, run help on the command

```bash
$ retscli help console
Usage:
  retscli console [LOGIN URL]

Options:
  -u, [--username=USERNAME]        # Username
  -p, [--password=PASSWORD]        # Password
  -v, [--version=VERSION]          # Rets version
                                   # Default: RETS/1.7.2
  -a, [--agent=AGENT]              # User agent
  -t, [--ua-password=UA_PASSWORD]  # User agent password
  -d, [--debug], [--no-debug]      # Debug mode

Start rets console
```

#### Debug Mode
To view requests being made to the RETS server, enable debug mode with the `-d` flag. Once enabled, helpful info will be logged to `$stdout`. This is helpful to debug errors thrown by the RETS server and to adjust queries.

#### Rets Console Commands
After dropping into the RETS console, you get a bunch of useful commands for searching and exploring the RETS server

```bash
$ retscli console http://rets.server.com -u summera -p password

summera@rets.server.com > help
Commands:
  capabilities                       # Display capabilities for rets server
  classes [RESOURCE]                 # List available classes for resource
  help [COMMAND]                     # Describe available commands or one specific command
  login                              # Re-Login to RETS server. Use if session is no longer valid
  metadata                           # View metadata
  objects [RESOURCE]                 # List available objects for resource
  resources                          # List available resources
  search [RESOURCE] [CLASS] [QUERY]  # Search resources, e.g. properties, open houses, etc.
  search-metadata                    # Search metadata tables
  tables [RESOURCE] [CLASS]          # List available tables for class of resource
  timezone-offset                    # System timezone offset
```

Again, to see available flags/options, run help on the command. Many of the commands have an `editor` option if you feel the need to get down and dirty in your editor of choice.


```bash
summera@rets.server.com > help search-metadata
Usage:
  search-metadata

Options:
  -r, [--resources=one two three]  # Filter metadata by resources
  -c, [--classes=one two three]    # Filter metadata by classes
  -e, [--editor=EDITOR]            # Open search results in editor

Search metadata tables
```

## Notes
- When opening output in your editor, retscli will check the `$EDITOR` environment variable. If this is not set, it falls back to nano.
- Much of the output is piped through `less` by default to allow for easy paging. If you'd like to change this, set your preferred pager in the `$PAGER` environment variable.
- Retscli uses the ruby readline module for the rets console.
- If any arguments and/or options have spaces in them, you will need to wrap them in quotes so that retscli does not split on the spaces.

## Contributing

1. Fork it ( https://github.com/summera/retscli/fork )
1. Create your feature branch (`git checkout -b my-new-feature`)
1. Commit your changes (`git commit -am 'Add some feature'`)
1. Run the test suite (`bundle exec rake`)
1. Push to the branch (`git push origin my-new-feature`)
1. Create a new Pull Request


## License

The gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).

",57,57,5,2,real-estate,"[cli, command-line, mls, real-estate, rets]",0
cheesestringer,property-seeker,,https://github.com/cheesestringer/property-seeker,https://api.github.com/repos/property-seeker/cheesestringer,Calculate the price range for property advertised on Domain and Real Estate.,"# Property Seeker

Calculate the price range for property advertised on [Domain](https://www.domain.com.au) and [Real Estate](https://www.realestate.com.au).

[<img src=""https://cdn.buymeacoffee.com/buttons/v2/default-orange.png"" width=""150"" />](https://www.buymeacoffee.com/cheesestringer)

### Install

- [Chrome](https://chrome.google.com/webstore/detail/property-seeker/olfjldooogfhhgklechmbdemheblklga)
- [Firefox](https://addons.mozilla.org/en-US/firefox/addon/property-seeker)
- [Edge](https://microsoftedge.microsoft.com/addons/detail/property-seeker/fonehbkcamhecgmkmmcibkdpdjdkjmef)

### Privacy

All searches are performed within your own browser and are not stored or shared with anyone else.

To enforce this the extension's [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) uses the `connect-src` directive to restrict communication to Domain and Real Estate servers at `https://*.domain.com.au` and `https://*.realestate.com.au`.

### Demo

#### Domain

![Domain](images/domain.png?raw=true)

#### RealEstate

![RealEstate](images/realestate.png?raw=true)

### Disclaimer

This extension is not connected with, or approved by, Domain Group or REA Group.

### Acknowledgements

Based on [pectusbrah's](https://www.reddit.com/user/pectusbrah) Reddit [post](https://www.reddit.com/r/AusFinance/comments/p28a7u/heres_how_to_find_the_price_range_of_any_house_on/).
",53,53,1,0,real-estate,"[browser-extension, chrome-extension, javascript, property, real-estate]",0
hrshadhin,HRM,,https://github.com/hrshadhin/HRM,https://api.github.com/repos/HRM/hrshadhin,Easy & hassle free  House Rent Management Web Application,"HRM[House Rent Management]
==========================================

# Description
  Easy & hassle free 'House Rent Management' web application.

# Installation and use
### HRM is build using Laravel 5.3
```
$ git clone https://github.com/hrshadhin/HRM.git
```
```
$ cd HRM
```
```
$ mv .env.example .env
```
**Change configuration in .env according your need and create Database**
```
$ composer install
```
```
$ php artisan migrate
```
```
$ php artisan db:seed
```
```
$ php artisan storage:link
```
**Give write permission to storage and bootstrap/cache directory**

```
$ php artisan serve
```
**http://localhost:8000** \
USER: admin@hrm.com \
PASS: demo123

# Demo Live Link
URL: http://hrm.hrshadhin.me \
USER: admin@hrm.com \
PASS: demo123


# Screenshot
<img src=""screenshots/1.png"">
<img src=""screenshots/2.png"">
<img src=""screenshots/3.png"">
<img src=""screenshots/4.png"">
<img src=""screenshots/6.png"">
<img src=""screenshots/7.png"">


# License
HRM is open-sourced software licensed under the AGPL-3.0 license. Frameworks and libraries has it own licensed

Enjoy :)
",51,51,15,2,real-estate,"[housing, housing-management, management, real-estate, rent, rentalsystem]",0
samuelklam,real-estate-ecommerce,,https://github.com/samuelklam/real-estate-ecommerce,https://api.github.com/repos/real-estate-ecommerce/samuelklam,"Real Estate Ecommerce Store built with Angular, Express, PostgreSQL and Node.js","# Real Estate Ecommerce Store

A Full Stack Ecommerce Platform built for the exchange of Commercial Real Estate. Deployed at https://real-estate-stackstore.herokuapp.com.

## Features
- Properties search and filtering by categories and location
- Google Maps API Integration
- Individual property listings with building details and customer reviews
- User and Account management (login / sign up) and persistent session storage
- OAuth login (Facebook, Google and Twitter)
- Admin panel for managing properties, orders, reviews and user privileges
- Cart checkout with integrated Stripe payment

## Technologies Used
- [Node.js](https://nodejs.org/en/)
- [AngularJS](https://angularjs.org/)
- [Express](https://expressjs.com/)
- [Sequelize](http://docs.sequelizejs.com/en/v3/)
- [PostgreSQL](https://www.postgresql.org/)
- [Passport.js](http://passportjs.org/)
- [Express Sessions](https://github.com/expressjs/session)
- [Bootstrap](http://getbootstrap.com/)
- [Gulp](http://gulpjs.com/)
- [Nodemailer](https://github.com/nodemailer/nodemailer)
- [Stripe](https://stripe.com/)
",46,46,8,9,real-estate,"[angular, ecommerce, express, full-stack, nodejs, real-estate, sequelize]",0
OpenEstate,OpenEstate-IO,OpenEstate,https://github.com/OpenEstate/OpenEstate-IO,https://api.github.com/repos/OpenEstate-IO/OpenEstate,"Java libraries to read and write real estate data in common formats (e.g. OpenImmo, ImmoXML, Kyero, Trovit, IDX)","OpenEstate-IO 1.5
=================

*OpenEstate-IO* provides a set of Java libraries to read and write real estate data in common formats. These libraries are used within [*OpenEstate-ImmoTool*](https://openestate.org/) and in some of our clients projects in order to process real estate data.


Supported Formats
-----------------

| Module                           | Format                                                                  | Type | Version    |
| -------------------------------- | ------------------------------------------------------------------------|:----:|:----------:|
| [`CasaIT`](CasaIT)               | [*Casa.it*](https://www.casa.it/) format **(experimental)**             | XML  | ?          |
| [`DaftIE`](DaftIE)               | [*Daft.ie*](https://www.daft.ie) Overseas Webfeed                       | XML  | 2.7        |
| [`Filemaker`](Filemaker)         | [*Filemaker*](http://www.filemaker.com) FMPXMLLAYOUT                    | XML  | ?          |
|                                  | [*Filemaker*](http://www.filemaker.com) FMPXMLRESULT                    | XML  | ?          |
| [`Idealista`](Idealista)         | [*idealista.com*](https://www.idealista.com/) format **(experimental)** | JSON | 6.00       |
| [`IDX`](IDX)                     | *IDX* format                                                            | CSV  | 3.01       |
| [`ImmoXML`](ImmoXML)             | *ImmoXML* format                                                        | XML  | 3.0        |
| [`ImmobarIT`](ImmobarIT)         | [*immobar.it*](https://www.immobar.it) format **(experimental)**        | XML  | 21/04/2015 |
| [`ImmobiliareIT`](ImmobiliareIT) | [*Immobiliare.it*](https://www.immobiliare.it) format                   | XML  | 2.8        |
| [`IS24-CSV`](IS24-CSV)           | *IS24-CSV* format (*legacy*)                                            | CSV  | 1.4.0.4    |
| [`IS24-XML`](IS24-XML)           | *IS24-XML* format (*legacy*)                                            | XML  | rev189438  |
| [`Kyero`](Kyero)                 | [*Kyero.com*](https://www.kyero.com) XML feed                           | XML  | 3.4        |
|                                  |                                                                         |      | 2.1        |
| [`OpenImmo`](OpenImmo)           | [*OpenImmo*](http://www.openimmo.de) format                             | XML  | 1.2.7b     |
|                                  |                                                                         |      | 1.2.7      |
|                                  |                                                                         |      | 1.2.6      |
|                                  |                                                                         |      | 1.2.5      |
|                                  |                                                                         |      | 1.2.4      |
|                                  |                                                                         |      | 1.2.3      |
|                                  |                                                                         |      | 1.2.2      |
|                                  |                                                                         |      | 1.2.1      |
|                                  |                                                                         |      | 1.2        |
|                                  |                                                                         |      | 1.1        |
| [`Trovit`](Trovit)               | [*Trovit.com*](https://www.trovit.com) Homes Feed                       | XML  | ?          |
| [`WisIT`](WisIT)                 | [*Wohnen-in-Suedtirol.it*](https://www.wohnen-in-suedtirol.it) format   | XML  | 2.2        |

Open a module subfolder to get more information about the specific format.


How to use
----------

Download the [latest release from GitHub](https://github.com/OpenEstate/OpenEstate-IO/releases/latest). The provided archive contains all required files (compiled libraries, dependencies, source code and documentations).

Alternatively you can integrate the library from [Maven Central Repository](https://search.maven.org/#search|ga|1|org.openestate.io) into your [Maven](https://maven.apache.org/) project. Just add one or more of the following dependencies to your projects `pom.xml` (according to your requirements):

```xml
<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-CasaIT</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-DaftIE</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-Filemaker</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-Idealista</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-IDX</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-ImmobarIT</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-ImmobiliareIT</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-ImmoXML</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-IS24-CSV</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-IS24-XML</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-Kyero</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-OpenImmo</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-Trovit</artifactId>
  <version>1.5</version>
</dependency>

<dependency>
  <groupId>org.openestate.io</groupId>
  <artifactId>OpenEstate-IO-WisIT</artifactId>
  <version>1.5</version>
</dependency>
```

You can find further information in the [project wiki](https://github.com/OpenEstate/OpenEstate-IO/wiki). Some example classes for each format are available in the [`Examples`](Examples) module.


Dependencies
------------

- Java 8 or newer
- [Apache BVal 2.0.5](https://bval.apache.org/) (optional; for validation of JSON data; may be replaced with other implementations)
- [commons-codec 1.15](https://commons.apache.org/proper/commons-codec/)
- [commons-csv 1.9.0](https://commons.apache.org/proper/commons-csv/) (optional; for processing of CSV formats)
- [commons-io 2.11.0](https://commons.apache.org/proper/commons-io/)
- [commons-lang 3.12.0](https://commons.apache.org/proper/commons-lang/)
- [commons-text 1.9](https://commons.apache.org/proper/commons-text/) (optional; for examples and some unit tests)
- [Eclipse Implementation of JAXB 2.3.5](https://projects.eclipse.org/projects/ee4j.jaxb-impl) (optional; for processing of XML formats)
- [jackson-databind 2.12.4](https://github.com/FasterXML/jackson-databind) (optional; for processing of JSON formats)
- [Jakarta Activation 1.2.2](https://projects.eclipse.org/projects/ee4j.jaf) (optional; for processing of XML formats)
- [Jakarta Annotations 1.3.5](https://projects.eclipse.org/projects/ee4j.ca) (optional; for processing of JSON / XML formats)
- [Jakarta Bean Validation 2.0.2](https://projects.eclipse.org/projects/ee4j.bean-validation) (optional; for processing of JSON formats)
- [Jakarta XML Binding 2.3.3](https://projects.eclipse.org/projects/ee4j.jaxb) (optional; for processing of XML formats)
- [jaxb2-basics-runtime 0.12.0](https://github.com/highsource/jaxb2-basics) (optional; for processing of XML formats)
- [SLF4J 1.7.30](https://www.slf4j.org/)
- [Logback 1.2.5](http://logback.qos.ch/) (optional; for logging in example classes)
- [lorem 2.1](https://github.com/mdeanda/lorem) (optional; for generating random data in example classes)


Notes about JDK versions below 11
---------------------------------

JAXB is bundled with JDK 8, was disabled / deprecated in JDK 9 & 10 and finally removed in JDK 11. Therefore, we're providing JAXB as an explicit dependency. See also [""JAXB on Java 9, 10, 11 and beyond""](https://www.jesperdj.com/2018/09/30/jaxb-on-java-9-10-11-and-beyond/).

It is recommended to use this library with JDK 11 as it should work out of the box. In case you're using JDK 8, you might need to follow one of these steps documented at [""JAXB Release Documentation""](https://javaee.github.io/jaxb-v2/doc/user-guide/release-documentation.html#deployment-migrating-jaxb-2-0-applications-to-javase-6):

> JavaSE comes with JAXB 2.x API/implementation in `rt.jar`. Each version of JavaSE (6, 7, 8, ...) contains different version of JAXB 2.x API. Therefore, if you want to use different version of JAXB API/implementation than the one present in your version of JDK, you are required to override a portion of `rt.jar` with the new API. There are several ways to achieve this:
>
> 1.    Place the `jakarta.xml.bind-api-X.Y.Z.jar` into `$JRE_HOME/lib/endorsed`. **Do not put other JAXB jars into the endorsed directory.** This essentially makes your JRE to ""JRE X + JAXB 2.y"". This would affect any other applications that use this JRE, and it's easy. On the other hand, in various scenarios you may not be able to alter the JRE.
>
> 2.    Use the system property `java.endorsed.dirs` when you launch your application, and have it point to the directory which contains the `jakarta.xml.bind-api-X.Y.Z.jar` only. **The directory must not contain any other jaxb artifacts.** This allows you to use different version of JAXB for different applications.
>
> See the [endorsed directory mechanism](http://docs.oracle.com/javase/6/docs/technotes/guides/standards/) for more details.

All provided dependencies should work with JDK 8. If compatibility problems occur, you might replace them with an earlier version.


Changelog
---------

Take a look at [`CHANGELOG.md`](CHANGELOG.md) for the full changelog.


License
-------

This library is licensed under the terms of [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0.html). Take a look at [`LICENSE.txt`](https://github.com/OpenEstate/OpenEstate-IO/blob/develop/LICENSE.txt) for the license text.


Support
-------

We are providing [professional support](https://github.com/OpenEstate/OpenEstate-IO/wiki/Service) for *OpenEstate-IO* in case you need a specialized solution for your use case. 


Further information
-------------------

- [*OpenEstate-IO* at GitHub](https://github.com/OpenEstate/OpenEstate-IO)
- [Releases of *OpenEstate-IO*](https://github.com/OpenEstate/OpenEstate-IO/releases)
- [Changelog of *OpenEstate-IO*](https://github.com/OpenEstate/OpenEstate-IO/blob/v1.5/CHANGELOG.md)
- [API documentation of *OpenEstate-IO*](https://media.openestate.org/apidocs/OpenEstate-IO/)
- [Validator for common XML formats](https://validator.openestate.org/)
",45,45,8,3,real-estate,"[filemaker, idx, immobilienscout24, immoxml, kyero, openimmo, real-estate, realestate, trovit]",0
orpms,orpms,orpms,https://github.com/orpms/orpms,https://api.github.com/repos/orpms/orpms,Opensource Real Estate Property Management System,"# orpms
Opensource Real Estate Property Management System


====

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/orpms)
[![Build Status](https://travis-ci.org/orpms/orpms.svg?branch=master)](https://travis-ci.org/orpms/orpms)
[![Coverage Status](https://coveralls.io/repos/github/orpms/orpms/badge.svg?branch=master)](https://coveralls.io/github/orpms/orpms?branch=master)


## What is ORPMS?

This nodejs project is a opensource real estate property management system. 
A web application that offers a toolkit for owners of buildings, flats, offices, meeting rooms, car parks, letter boxes...

The idea is to make easy the management of properties and occupants by proposing many services:
 - Gather all information of your properties and occupants in one place
 - Create rent contract from templates available in the system
 - Follow the rent payments month by month
 - Template letters for recovery of not paid rents


## Getting started

Coming Soon

## Technical Stack


### Back-end:
* Node
* Express
* MongoDB 
* EJS (templates)
* PassportJS (authentication)

### Front-End:
* JQuery
* Bootstrap
* Handlebars
* frontexpress

### Build system 
 * RollupJS

",42,42,2,2,real-estate,"[property-management, property-search, real-estate, real-estate-management, real-estate-platform, real-estate-rental, realestate, realestateagency, realestatecloud]",0
WillowInc,opendigitaltwins-building,WillowInc,https://github.com/WillowInc/opendigitaltwins-building,https://api.github.com/repos/opendigitaltwins-building/WillowInc,WillowTwin open digital twin definition language (DTDL) ontology for buildings and real estate,"# WillowTwin DTDL Ontology - Buildings
WillowTwin open digital twin definition language (DTDL) ontology for buildings and real estate

## Prerequisites

Before getting started:
* Install a code editor such as [Visual Studio Code](https://code.visualstudio.com/) to view, manage, and update the files.
* Install git to allow for cloning and working with this repo and its submodules. For Windows, we recommend [Git for Windows](https://gitforwindows.org/).
* Learn [basic git techniques](https://docs.github.com/en/github/using-git) such as creating a branching, committing, pulling, and pushing.
* Learn about the [Digital Twin Definition Language (DTDL)](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL//dtdlv2.md) which defines the language used to describe models of digital twins.
* Learn about the [DTDL-based RealEstateCore ontology](https://github.com/Azure/opendigitaltwins-building) which forms the base ontology from which this WillowTwin ontology extends.
* Learn about [Azure Digital Twins](https://docs.microsoft.com/en-us/azure/digital-twins/) which is the service WillowTwin is built upon and this ontology gets loaded into as [Models](https://docs.microsoft.com/en-us/azure/digital-twins/concepts-models).

## Getting Started

* Clone this repo and its submodules to your local machine by running `git clone --recurse-submodules`.

    NOTE: This project includes `git submodules` which are references to other repos. If this repo was cloned by default, such as running `git clone`, this project will only include the directories of the submodules but not the files within them yet. To initialize and pull down the submodule files, run the command: `git submodule update --init --recursive`. Read more about working with submodules [here](https://git-scm.com/book/en/v2/Git-Tools-Submodules).

* After successfully cloning the submodules, there should be files in the following directories:

    | Submodule | Description |
    | --------- | ----------- |
    | DTDL-Validator | Tool to parse and validate the DTDL ontology |
    | Ontology\opendigitaltwins-building | DTDL-based RealEstateCore ontology |

* Confirm all of the DTDL files have been pulled to your local machine by running the [DTDL Validator](https://github.com/Azure-Samples/DTDL-Validator) self-contained executable. The output should include **Validated all files - Your DTDL is valid**. After making changes to the DTDL files, it is recommended to run this command prior to committing changes.

* Start browsing the Ontology which has the following top-level directories:

    | Directory | Description |
    | --------- | ----------- |
    | opendigitaltwins-building\Ontology | DTDL-based RealEstateCore ontology. This is the base set of DTDL models from which the Willow models extend |
    | Willow | This is the set of WillowTwin DTDL models which are used for creating digital twins |

    NOTE: When creating twins in the WillowTwin, they are always based on a Willow DTDL model id which begins with `dtmi:com:willowinc:`.

## Key Concepts

### Ontology Overview

A model which **extends** another model recusively inherits all of the Properties, Relationships, and Components from the referenced model. The following table describes the set of top-level models for this ontology. These form the base from which all other models extend.

| Model | Description |
| --------- | ----------- |
| Agent | Any basic types of stakeholder that can have roles or perform activities, e.g., people, companies, departments. |
| Asset | An object such which is located inside (or outside) a building, but is not an integral part of that building's structure, for example architectural, furniture, and equipment. Assets are typically products that have a manufacturer, model, and serial number |
| Building Component | A part that constitutes a piece of a building's structural makeup, for example Facade, Wall, Slab, RoofInner, etc. These are typically constructed onsite. |
| Capability | A capability indicates the capacity of a entity, be it a Space, an Asset, or a LogicalDevice, to produce or ingest data. This is equivalent to the term ""point"" in Brick Schema and generic Building Management System. Specific subclasses specialize this behavior: Sensor entities harvest data from the real world, Actuator entities accept commands from a digital twin platform, and Parameter entities configure some capability or system. |
| Collection | An administrative grouping of entities that are addressed and treated as a unit for some purpose. These entities may have some spatial arrangement (e.g., a Tenant Unit is typically contiguous), however that is not a requirement (see, e.g., a distributed Campus consisting of spatially disjoint plots or buildings). |
| Document | A formal piece of written, printed or electronic matter that provides information or evidence or that serves as an official record, for example LeaseContract, Building Specification, Warranty, Drawing, etc. |
|Event | A spatiotemporally indexed entity with participants, something which occurs somewhere, and that has or takes some time, for example a Lease or Rent. |
| Space | A contiguous part of the physical world that has a 3D spatial extent and that contains or can contain sub-spaces. For example a Region can contain many pieces of Land, which in turn can contain many Buildings, which in turn can contain Levels and Rooms. |

NOTE: Many of the models include **Components**. These are not intended to be instantiated as digital twins. They can be thought of as a reusable interface by many models or a folder to organize a related set of Properties and Relationships.

Models define the possible set of Properties, Relationships, and Components that a twin may have; however, a twin does not have to include all of these at runtime. A twin is only required to have an **id** and a reference **model**.

### Relationships

Relationships between twins are what give the WillowTwin its powerful capabilities to action data. The more relationships that exist in for a given set of twins, also known as a greater graph density, the more opportunity there is for descriptive, presctiptive, predicitive, and real-time analtyics.

We encourage twins to be created and updated with as many relationships as possible; however, it is important that users (and machines) creating twins have a common understanding of the real-world meaning of relationships just as they should have a common understanding of the real-world meaning of models. Having this alignment allows for the highest accuracy of the analytics and thus trust in the outcomes that are actioned and surfaced by the data.

Here are the commmon relationships found in the ontology:

| Relationship | Description |
| ------------ | ----------- |
| isPartOf | A simplified set of topological relations to connect sub- and super-entities within the top-level RealEstateCore interface tree. ""isPartOf"" operates on entities of the same type, for example Spaces have only Spaces as parts, Assets have only Assets as parts, etc. |
| isCapabilityOf | Indicates that a Space, Asset or LogicalDevice has the ability to produce or ingest data represented by sensors, actuators or parameters. |
| includedIn | Indicates that an entity is included in some Collection, for example a Building is included in a RealEstate, or an Asset is included in a System. |
| locatedIn | Indicates that a given Asset is physically located in a Space. |
| hostedBy | Indicates that a capability or logical device is hosted by another entity such as an asset. |
| servedBy | The coverage or area impacted by a given Asset or Sensor/Actuator. Note that Assets can also service one another. |
| isFedBy | Indicates that a given equipment or space is fed ""something"" by another equipment, like electricity, water or air. |
| hasDocument | Indicates that an entity has accompanying details or references in a Document such as a Drawing, Product Data, Warranty, or Lease Contract. |

Here are examples of how to use relationships:

| Relationship | Examples |
| ------------ | ------- |
| isPartOf | Room-->isPartOf-->Level<br>Room-->isPartof-->HVACZone |
| isCapabilityOf | ZoneAirTemperatureSetpoint-->isCapabilityOf-->FanPoweredBox<br>PeopleCountSensor-->isCapabilityOf-->OccupancyZone |
| includedIn | FanPoweredBox-->includedIn-->HVACSupplyAirSystem<br>DomesticWaterPump-->includedIn-->PlumbingPumpGroup<br>Building-->includedIn-->Portfolio |
| locatedIn | Workstation-->locatedIn-->Room<br>AirHandlingUnit-->locatedIn-->Level |
| hostedBy | ZoneAirTemperatureSetpoint-->hostedBy-->BACnetController<br>ElectricalEnergySensor-->hostedby-->ModbusController |
| servedBy | OccupancyZone-->servedBy--PeopleCountSensorEquipment<br>Room-->servedBy-->VideoSurveillanceCamera<br>Level-->servedBy-->Elevator |
| isFedBy | FireSprinklerHead-->isFedBy-->SprinklerValve<br>Sink-->isFedBy-->ElectricTankWaterHeater<br>Luminaire-->isFedBy-->ElectricalCircuit1Pole |
| hasDocument | AirHandlingUnit-->hasDocument-->Warranty<br>HVACChilledWaterSystem-->hasDocument-->TestReport<br>Level-->hasDocument-->AsBuiltDrawing |

Relationships can also have properties with all of the same semantics as properties on twins. This is an powerful feature of DTDL which allows for the graph to better model the real world. In this ontology, the **isFedBy** relationship defined on [Equipment](https://github.com/Azure/opendigitaltwins-building/blob/master/Ontology/Asset/Equipment/Equipment.json), [HVACZone](https://github.com/WillowInc/opendigitaltwins-building/blob/main/Ontology/Willow/Space/Zone/HVACZone.json), and [LightingZone](https://github.com/WillowInc/opendigitaltwins-building/blob/main/Ontology/Willow/Space/Zone/LightingZone.json) has a property **substance** which defines what is being fed such as **SupplyAir**, **HotDomesticWater**, **ACElec**, or **Light**. This property has been defined as an Enum such that the allowed values for substance must come from the list defined in the above models.

NOTE: We recommend that the **substance** proeperty be defined on all **isFedBy** relationships to enable the best WillowTwin user experience. We also recommend using the most descriptive **substance** such as **SupplyAir** instead of **Air** and **SprinklerWater**instead of **Water**.

## Samples

For more in-depth examples of common scenarios, visit the [Samples](Samples).

These include diagrams and accompanying narratives to learn how to organize the data, what models should be used when creating twins, and the types of relationships between the twins.

## Frequency Asked Questions

**How do I determine which model to use when deciding between a model which extends another?**

It is recommended to be as specific as possible when creating twins to provide the most detailed classification. As such, the ""child"" model which extends the ""parent"" should always be used. For example, when creating a twin of a Fan Powered Box that is known to have a heating element, the model `dtmi:com:willowinc:FanPoweredBoxReheat;1` should be used instead of a more generic model from which it extends such as `dtmi:willowinc:TerminalUnit;1`, `dtmi:willowinc:VAVBox;1`, or `dtmi:willowinc:FanPoweredBox;1`.

**How do I determine whether to use a given relationship or its inverse?**

In general, relationships should be defined on the ""children"" twins with an outgoing relationship to a common ""parent"". For example, there are typically many rooms on a building level so the relationship would be defined as `Room-->isPartOf-->Level`. Similarly, there are many luminaires fed by an electrical circuit so the relationship would be defined as `Luminaire-->isFedBy-->ElectricalCircuit1Pole`.

",38,38,4,5,real-estate,"[digital-twins, ontologies, real-estate]",0
Shahed-Chy-Suzan,property-listing,,https://github.com/Shahed-Chy-Suzan/property-listing,https://api.github.com/repos/property-listing/Shahed-Chy-Suzan,"It's like a Real Estate Management System was developed using Laravel-8. It is designed to provide the facility where the customer can easily buy or sell their properties such as land, villa, apartment. It contains a search filter which helps users to search property in a certain city, area or state. Rest of the features are listed in the README file.","<div align=""center"">
  
## Civanoglu - Property Listing (Laravel Project)

> Technology Used : Laravel-8, Tailwind CSS, JavaScript, jQuery and MySQL Database
</div>

## What I have done
   - Completed property search by Rent/Sale, Type, Bedrooms, Price range.
   - Applied 3 Language(English, Bangla, Turkish) support through Laravel Localization.
   - Applied Laravel Queue for sending/enquiring/contacting User Email.
   - 3 Types Currency Converter System Added (USD(Dollar), BDT(Taka), TR(Turkish Lira))
   - Hosted it Cloudways Server.
   - Used form as Component
   - Used property item as Component
   - Display search result in the property page with query message under the title
   - Display the count of the total search property
   - Use TailWind grid box to design the ""property card"" (each item height is equal)
   - Use Tailwind @apply css to style the search form

## Demo
## Search Result Summary Demo
<img src=""https://github.com/Shahed-Chy-Suzan/property-listing/blob/master/z_others/demo-images/serach-result.png""/>

## Entire Properties Page
<img src=""https://github.com/Shahed-Chy-Suzan/property-listing/blob/master/z_others/demo-images/properties.jpg""/>

## Entire Dashboard / Admin-Panel Page
<img src=""https://github.com/Shahed-Chy-Suzan/property-listing/blob/master/z_others/demo-images/Dashboard.png""/>

Some screenshots can be found <a target=""blank"" href=""https://drive.google.com/drive/folders/1WAYff_6D8BTRLvZbAFe0ZqwIXpgLU3Hf?usp=sharing"">HERE</a>


## About 1st Task
    - First task was to complete the search query from home page.

## Part #17 - Localization
   - Added Localization package
   - Added custom fonts for Bangla
   - Created bn.json file to make the translation (into Bangla).                                                                  
   - Created tr.json file to make the translation (into Turkish).                                                                  

## Part #20 - Dashboard
   - Added Dashboard Page
   - Added Property index page
   - Added Property add new page with validation
   - Added Property edit page with validation and update function
   - Added Property delete function

## Part #23
   - Add Dashboard Location Menu
   - Added Location index page
   - Added Location add new page with validation
   - Added Location edit with validation and update function
   - Added Location delete function

## Part #24,25,26
   - Back end controllers converted into Resource Route 
   - (Properties, Locations, Pages, Users and Messages)
   - User's Messages/Mail/Contact/Enquires listed
   - Destroy method for Messages/Enquires
   - Install Php Flasher
   - Added flash message for all operations (Store, Update, Destroy) of all Admin Controller
   - Generated ""Queue"" table and work with jobs
   - Created jobs for enquire email sending

## Additional Work
    - Design Dashboard for summery of the site
    - Show count of all items (Properties, Locations, Pages, Users and Messages) in dashboard

Some screenshots can be found <a target=""blank"" href=""https://drive.google.com/drive/folders/1WAYff_6D8BTRLvZbAFe0ZqwIXpgLU3Hf?usp=sharing"">HERE</a>

## Part #28
    - Currency Converter System Added (USD(Dollar), BDT(Taka), TR(Turkish Lira))

",34,34,2,3,real-estate,"[house-rent, house-rental-system, houserental, houserentalsystem, laravel-8, laravel-localization, laravel-queue, property-listings, property-management, real-estate, real-state-website, realstatemanagement, rental-housing, rental-management, rentals-listing, rentalsystem]",0
tamarasaurus,immo-feed,,https://github.com/tamarasaurus/immo-feed,https://api.github.com/repos/immo-feed/tamarasaurus,A extensible app for scraping property listings,"# üè† immo-feed

An API to aggregate real-estate listings from these sites:

- Bienici
- Thierry immobilier
- Stephane plaza
- Blot
- Francois & Francois immobilier
- Ouestfrance immo

### Installation

Install Docker & Docker compose

```
./install.sh
./scrape.sh
```

Go to `http://localhost:8000/results` to get the results in JSON
Go to `http://localhost:4567` to monitor the scraping jobs
",34,34,3,18,real-estate,"[api, immobilier, real-estate, scraper]",0
ExtReMLapin,gHomes,,https://github.com/ExtReMLapin/gHomes,https://api.github.com/repos/gHomes/ExtReMLapin,gHomes for Garry's mod | All-in-one property solution [Buy/rent from NPC or from 3D/2D Panel],"# gHomes
gHomes for Garry's mod | All-in-one property solution [Buy/rent from NPC or from 3D/2D Panel]

DLC is included


![](https://i.imgur.com/nuy5vTn.png)


## gHomes allows your players to rent/purchase houses or apartments.

GHomes is provided with strong and easy-to-use tools which will allow you to quickly add -if the map you're using is not supported yet- houses or apartments to your favorite map.

You can either buy/rent the home/apartment directly on it's front panel or go to the NPC selling them, you can also disable the panels in the config to force the players to use the Seller.

![](https://i.imgur.com/gyO07pu.png) Buy houses from multiple way (Each way can be disabled in the settings/ or by not spawning the npc)

*   [**From the 3D2D panel**](https://i.imgur.com/YbCrFH2.gifv)
*   [**From the 2D panel like darkrp using F2**](https://youtu.be/BvZJrLRlv8c)
*   [**Or from the NPC**](https://i.imgur.com/CKlQ9zs.gif)

![](https://i.imgur.com/gyO07pu.png) Let the players rent or purchase properties (You do like : max rental = 3 days, autosell after not connected after _x_ days in the config)

![](https://i.imgur.com/gyO07pu.png) Let the players decide for how much days they rent the home (You can disable each mode individually for each house)

![](https://i.imgur.com/gyO07pu.png) As a player, renew the lease before it expires

![](https://i.imgur.com/gyO07pu.png) [Easy as hell to use tools allowing you to add your own maps/houses/apartments](https://youtu.be/oD2ZUGqk5_M)

![](https://i.imgur.com/gyO07pu.png) Auto props saving for the owner of the house/apartment every minutes

![](https://i.imgur.com/gyO07pu.png) Auto keys management, directly use them, no F2 or door linking bullshit

![](https://i.imgur.com/gyO07pu.png) Prevent people from spawning shit on your lawn

![](https://i.imgur.com/gyO07pu.png) [Sexy preview of the property when buying it with the NPC](https://i.imgur.com/CKlQ9zs.mp4)

![](https://i.imgur.com/gyO07pu.png) [Sexy 3D panel](https://i.imgur.com/W3Gzc55.gifv) if you decide to keep it enabled, [**since the 4.0 update you can disable it and open it in a 2D context using F2 on the door**](https://youtube.com/watch?v=BvZJrLRlv8c)

![](https://i.imgur.com/gyO07pu.png) Add co-owners, allow them to open/close doors and spawn props

![](https://i.imgur.com/gyO07pu.png) With the 3D Panel, ring the doorbell and leave messaged to the owner or the co-owners, they will be able to read them directly on it.

![](https://i.imgur.com/gyO07pu.png) If the player didn't connect for X days (in the config) the property/house/whatever he owns is sold.

![](https://i.imgur.com/gyO07pu.png) Compatible with [AGC](https://www.gmodstore.com/scripts/view/2828) to get a list of the guys living in a house

![](https://i.imgur.com/gyO07pu.png) **NO DRM**

üí™ ESL ONE Certified mathematics used for optimizations

Quick showcase video i made for the 2.0, it's a recap of most of the existing features, keep in mind i'm french, so pardon my english

[![](https://i.imgur.com/mOlw5T8.jpg)](https://youtu.be/dEIbtReTolU)

![](https://i.imgur.com/gyO07pu.png) Sexy booting animation for the tool (you'll see it only once, don't worry)

![](https://i.imgur.com/gyO07pu.png) **[NEW]** You can now edit houses (daily price, perma price, name etc) directly with the NPC

![](https://i.imgur.com/gyO07pu.png) **[NEW]** Players can now rent houses in hours not just in days

![](https://i.imgur.com/gyO07pu.png) **[NEW]** You can enable the ""sell-on-leave"" mode to get a darkrp vanilla experience and still make it easier for your players to buy houses

Even if the tool to add homes is easy as hell to use, [ready-to use maps files](https://i.imgur.com/7YyTCFL.png) are provided with the addon, more will come in the future, but keep in mind using [the tools](https://youtu.be/oD2ZUGqk5_M) is really easy.

All existing map are supported, there is nothing as an ""unsupported map"", the tools are easy as fuck to use, really

![](https://i.imgur.com/CKlQ9zs.gif)

(I know it's supposed to be X per day and not per day**s**, it's fixed in the addon but i'm too lazy to re-record it)

![](https://i.imgur.com/YbCrFH2.gif)

_sexy booting animation which you will see only once ;), don't worry about seeing it evertime to use the tool_

![](https://i.imgur.com/DLdvCKa.gif)

# Compatibility and other stuff

*   INCOMPATIBLE WITH [Advanced Lock & Lockpicking System](https://www.gmodstore.com/scripts/view/1025) Because his hook is overwriting stuff

Take a look at BadCoderz, the first addon that find unoptimized code on your server.

[![](https://i.imgur.com/wq5F2hG.jpg)](https://github.com/ExtReMLapin/BadCoderz/)

",33,33,6,7,real-estate,"[darkrp, gmod, properties, property, real-estate]",0
jkarelins,real-estate-site,,https://github.com/jkarelins/real-estate-site,https://api.github.com/repos/real-estate-site/jkarelins,üèòÔ∏è Real Estate advertisement project. Built using: React ‚≠ï Redux ‚≠ï Express ‚≠ï JS ‚≠ï NODE ‚≠ï PostgresQL,"# Real Estate React client üèòÔ∏è

## What's this project is about

- [üî• Deployed Version üî•](https://desolate-refuge-17574.herokuapp.com/)

Real estate for sale & for rent website. Real estate website's visitors can easily filter their searches by type, location, price, and other predefined and custom criteria. Each property goes with a detailed description, community and property features, location, price, and a great image gallery.
Buyer of real estate can find contacts of seller. In case seller enabled online appointment feature for advertisement - buyer can fill in form to make online appointment request.

**Disclaimer:**
This project was merely a learning exercise as well as my first sizeable project delving into React, Redux & other used technologies.

## Readme Content

- [Technologies Used](https://github.com/jkarelins/real-estate-site/tree/feat/readme-update#technologies-used)
- [Terms & Conditions](https://github.com/jkarelins/real-estate-site#terms--conditions)
- [Project Goals](https://github.com/jkarelins/real-estate-site#main-goals-of-this-project)
- [Installation & Setup Guide](https://github.com/jkarelins/real-estate-site/tree/feat/readme-update#installation--setup-guide)
- [App Screens](https://github.com/jkarelins/real-estate-site/tree/feat/readme-update#app-screens)
- [Basic Mockups for Project](https://github.com/jkarelins/real-estate-site/tree/feat/readme-update#basic-mockups-for-project)
- [Datastructure for db](https://github.com/jkarelins/real-estate-site/tree/feat/readme-update#datastructure-for-db)

## Technologies Used

- [React](https://reactjs.org/)
- [Redux](https://redux.js.org/)
- [Redux-Thunk](https://github.com/reduxjs/redux-thunk)
- [GitHub](http://github.com)
- [Express](https://expressjs.com/)
- [PostgresQL](https://www.postgresql.org/)
- [Docker](https://www.docker.com/)
- [react-moment](https://github.com/headzoo/react-moment#readme)
- [Leaflet](https://leafletjs.com/)
- [Cloudinary](https://cloudinary.com/)
- [Cloudinary-React](https://cloudinary.com/documentation/react_integration)

## Terms & Conditions

This project was created in 2 and a half weeks. React Site & API Server was built as Portfolio project, after a Full-Stack Developer cource: [Codaisseur](https://codaisseur.com/).

## Main goals of this project:

- Create Full Stack App independently
  - Using new knowleges from Full Stack course
  - Finding and using new technologies for specific tasks
- Brainstorm idea
- Create Wireframes & Datastructure
- Train Git Usage
  - Work on different branches
  - Create regular PR
  - Write a small summary when you make a PR
  - Create regular commits
  - Make sure latest working version is always on the master branch
- Finish the exististing functionality and polish
- Style Project
- Deploy project

## Installation & Setup Guide

- git clone git@github.com:jkarelins/real-estate-site.git
- cd real-estate-site
- npm install
- npm run start

**_To run on local machine, API server should run on same local machine, using port: 4000_**

- API server link: - [API server](https://github.com/jkarelins/real-estate-server)

## Deployment Guide

**_Before deployment API link should be changed in actions, and on payment page(CheckoutForm.jsx)._**

## App Screens

#### User Roles

![User Roles](https://github.com/jkarelins/real-estate-site/blob/master/images/ready-screens/manager-agent-roles.gif?raw=true)

- Manager of Company can activate and suspend accounts of company agents.
- Company Agent can not log in to site, after registration (while manager have not confirmed account)
- Company Agents can use Company Balance to add new advertisements
- Company manager can Top Up Balance for all company

#### Top Up Balance using Stripe

![Top Up Balance using Stripe](https://github.com/jkarelins/real-estate-site/blob/master/images/ready-screens/top-up-balance-stripe.gif?raw=true)

#### One step to add your Advertisement

![One step to add your Advertisement](https://github.com/jkarelins/real-estate-site/blob/master/images/ready-screens/Easy-to-add-advert.gif)

#### Upload Images to your Advertisement

![Upload Images to your Advertisement](https://github.com/jkarelins/real-estate-site/blob/master/images/ready-screens/image-upload.gif?raw=true)

#### Add Extras to your Advertisement & Check finished Advertisement

![Add Extras to your Advertisement & Check finished Advertisement](https://github.com/jkarelins/real-estate-site/blob/master/images/ready-screens/add-extras+overview.gif?raw=true)

#### Check Main Page & Search for Advertisements

![Check Main Page & Search for Advertisements](https://github.com/jkarelins/real-estate-site/blob/master/images/ready-screens/main-page&search.gif?raw=true)

## Basic Mockups for Project

#### Image of Single advertisement page

![Image of Single advertisement page](https://github.com/jkarelins/real-estate-site/blob/master/images/One_Advertisement_page.png?raw=true)

#### Image of Search Page

![Image of Search Page](https://github.com/jkarelins/real-estate-site/blob/master/images/Search_page.png?raw=true)

---

# Datastructure for db

#### Advertisement

![Advertisement data structure](https://github.com/jkarelins/real-estate-site/blob/master/images/advert-data-table.png?raw=true)

- isForSale: Boolean,
- isForRent: Boolean,
- realEstateType: TEXT - can select from categories

- adress
- postcode
- city
- price
- Year of construction
- year of last renovation
- Living space
- Number of rooms/bedrooms/bathrooms
- description
- Status: Available/sold
- Energy label
- Heating
- Warm water - Boiler/central
- Location Description
- Garden - optional
- Type of parking

Extras(especially for rent):
e.g.:
optical internet
free parking
city view/nature view / cannal view
air conditioner
bath

#### User

username: TEXT,
password: TEXT,
email: TEXT,
phoneNumber: Text,

#### User roles

![User Roles](https://github.com/jkarelins/real-estate-site/blob/master/images/user-roles-updated.png?raw=true)

## Calendar

Used to make a new appointment:

Each calendar event has:

- hasOne Customer
- hasOne Seller
- date: Date
- time: time
- message: TEXT
- customer PhoneNumber
- customer Email
- canceledByCustomer: Boolean
- canceledBySeller: Boolean
",30,30,3,3,real-estate,"[advertisement-site, leaflet, leaflet-map, react, react-router, reactjs, real-estate, real-estate-offers, real-estate-platform, real-estate-website, real-estates, redux, redux-thunk, stripe, stripe-payments]",0
ryansherby,RedfinScraper,,https://github.com/ryansherby/RedfinScraper,https://api.github.com/repos/RedfinScraper/ryansherby,Scrapes Redfin data.,"Ôªø# Redfin Scraper

## Description
A scalable Python library that leverages Redfin's unofficial Stringray API to quickly scrape real estate data.

## One-Time Setup
### Zip Code Database
> A database of zip codes is required to search for City, State values  

> It is strongly recommended to download this [free](https://www.unitedstateszipcodes.org/zip-code-database/#) version in .csv format
### The Config
> Parameters for the RedfinScraper class can be controlled using an optional `config.json` file  

> [Sample Config](https://github.com/ryansherby/RedfinScraper/blob/main/config.json)



## Getting Started
### Installation
`pip3 install -U redfin-scraper`

### Import Module
`from redfin_scraper import RedfinScraper`  

### Initialize Module
`scraper = RedfinScraper()`

## Using The Scraper
### Required Setup
`scraper.setup(zip_database_path:str, multiprocessing:bool=False)`

> **zip_database_path**: Binary path to the zip_code_database.csv  

> **multiprocessing**: Allow for multiprocessing

### Activating The Scraper
`scraper.scrape(city_states:list[str]=None, zip_codes:list[str], sold:bool=False, sale_period:str=None, lat_tuner:float=1.5, lon_tuner:float=1.5)`
>**city_states**: List of strings representing US cities formatted as ""City, State""  

>**zip_codes**: List of strings representing US zip codes  

>**sold**: Select whether to scrape for-sale data (default) or sold data  

>**sale_period**: Must be selected whenever sold is True (1mo, 3mo, 6mo, 1yr, 3yr, 5yr)

>**lat_tuner**: Represents # of standard deviations beyond the local latitude average that a zip code may exist within   

>**lon_tuner**: Represents # of standard deviations beyond the local longitude average that a zip code may exist within  

### Accessing Prior Scrapes
`scraper.get_data(id:str)`
>**id**: IDs are indexed at 1 and increase in the format ""D00#""

## Appendix
### Warnings
> Multiprocessing can result in the consumption of all available CPU resources for an extended period of time  

> Unethical use of this library can result in Redfin taking disciplinary action against your IP address  

### Recommendations
> Requests for large amounts of data (# of zip codes > 2,000) should be split into separate requests  

> The `package.log` file can be used to investigate unexpected results
",30,30,3,2,real-estate,"[data, pandas, python, real-estate, redfin, redfin-scraper, scraper]",0
limpapud,data_science_tutorials_projects,,https://github.com/limpapud/data_science_tutorials_projects,https://api.github.com/repos/data_science_tutorials_projects/limpapud,Data science tutorials and projects,"# data_science_tutorials_projects [![GitHub issues](https://img.shields.io/github/issues/limpapud/data_science_tutorials_projects.svg)](https://github.com/limpapud/data_science_tutorials_projects/issues) [![GitHub stars](https://img.shields.io/github/stars/limpapud/data_science_tutorials_projects.svg)](https://github.com/limpapud/data_science_tutorials_projects/stargazers) [![GitHub license](https://img.shields.io/github/license/limpapud/data_science_tutorials_projects.svg)](https://github.com/limpapud/data_science_tutorials_projects/blob/master/LICENSE) [![GitHub forks](https://img.shields.io/github/forks/limpapud/data_science_tutorials_projects.svg)](https://github.com/limpapud/data_science_tutorials_projects/network)

### Qƒ±sa m…ôlumat:

""data_science_tutorials_projects"" repositoriyasƒ±nda Veril…ônl…ôr Elmi, Ma≈üƒ±n √∂yr…ônm…ôsi sah…ôl…ôrind…ô m…ôqal…ôl…ôr v…ô layih…ôl…ôr yer alƒ±b.


Fayllar
-------------------
M√∂vcud fayllarƒ±n v…ô qovluqlarƒ±n a√ßƒ±ƒülamasƒ± a≈üaƒüƒ±daki kimidir:

∆èsas qovluq:

> - *Bina_az_tutorial* - Az…ôrbaycanƒ±n …ôn geni≈ü, da≈üƒ±nmaz …ômlak saytƒ±ndan 10 000 elanƒ±n Python programla≈üdƒ±rma dili vasit…ôsi il…ô g√∂t√ºr√ºlm…ôsi, Pandas, Numpy v…ô sair modul vasit…ôsi il…ô m…ôlumatƒ±n t…ômizl…ônm…ôsi v…ô vizual …ôks olunmasƒ± proyekti.
> - *DataScience_Tutorials* - Veril…ônl…ôr Elmi sah…ôsind…ô m…ôqal…ôl…ôr.
> - *ML_Tutorials* - Ma≈üƒ±n √∂yr…ônm…ôsi sah…ôsind…ô m…ôqal…ôl…ôr.
> - *SSRS Tutorials* -  SQL Server Reporting Services il…ô d…ôrs-m…ôqal…ôl…ôr.

ƒ∞≈ütirak v…ô t√∂vh…ô verm…ô
----------------------
Lahiy…ôd…ô i≈ütirak edib t√∂vh…ô verm…ôk ist…ôyirs…ôn? ∆èla! Bunun √º√ß√ºn **Fork** edib lahiy…ôni √∂z hesabƒ±nƒ±za ke√ßirib t√∂vh…ôl…ôrinizi …ôlav…ô edib **Pull** sorƒüularƒ±n ed…ô bil…ôrsiniz.

> **∆èlav…ôl…ôr:**
> - M√º…ôllif  ist…ônil…ôn h…ôcmd…ô t√∂vh…ôni d…ôy…ôrl…ôndirir.
> - T…ôklif v…ô iradlarƒ± s…ôhif…ô sonunda qeyd olumu≈ü elektron √ºnvana v…ô ya **Issues** -…ô …ôlav…ô il…ô qeyd ed…ô bil…ôrsiniz.


ƒ∞stifad…ô
-------------
Lahiy…ô **MIT** lisenziyasƒ± il…ô yayƒ±mlanƒ±r.
> **Bu dem…ôkdir ki:**
> - **Kommersiya** m…ôqs…ôdi il…ô istifad…ô etm…ôk **icaz…ôniz var**
> - D…ôyi≈üm…ôk **icaz…ôniz var**
> - Yenid…ôn b√∂l√º≈üm…ôk **icaz…ôniz var**
> - ≈û…ôxsi m…ôqs…ôdl…ôrd…ô istifad…ôy…ô **icaz…ôniz var**
> - M√º…ôllif he√ß bir **z…ôman…ôt vermir**
> - M√º…ôllif he√ß bir **m…ôhsuliyy…ôt da≈üƒ±mƒ±r**
> - ƒ∞stifad…ô olunan zaman istifad…ô olunan lisenziya v…ô m√º…ôllif h√ºquqlarƒ± **qeyd olunmalƒ±dƒ±r!**


### ∆èlaq…ô

M√º…ôllif il…ô …ôlaq…ô [![](https://www.shareicon.net/data/16x16/2015/11/02/665918_email_512x512.png)](mailto:omarbayramov@hotmail.com) **omarbayramov@hotmail.com** elektron √ºnvan √ºz…ôrind…ôn aparƒ±la bil…ôr.
∆èlav…ô olaraq sosial ≈ü…ôb…ôk…ô v…ô dig…ôr saytlara linkl…ôr …ôlav…ô olunur.

[Facebook![](https://www.shareicon.net/data/32x32/2016/06/20/606800_facebook_48x48.png)](https://www.facebook.com/Omar.X.Bayramov)
[Wordpress![](https://www.shareicon.net/data/32x32/2016/07/14/606997_wordpress_64x64.png)](https://omarbayramov.wordpress.com/) [LinkedIn![](https://www.shareicon.net/data/32x32/2016/06/20/606446_linkedin_48x48.png)](https://www.linkedin.com/in/omarbayramov/)
",29,29,3,0,real-estate,"[azerbaijan, data-science, data-science-portfolio, jupiter, matplotlib, python, real-estate]",0
suraj25809,Real-Estate-Php,,https://github.com/suraj25809/Real-Estate-Php,https://api.github.com/repos/Real-Estate-Php/suraj25809,"Open Source Real Estate Management System based on Php and Mysql, Javascript","# Real-Estate-Php



Realestate Management system

This is a ready to use web application for managing Real Estate System. the application is built on PHP and Mysql, its interface is very user friendly.

Description

It can easily be used to manage two different group of users with different permission level.User can find Property easily in particular and Specific Location,Loan Calculator, Admin can Manage all data , User can Add property etc....

# Requirements

    PHP >= 7.3;
    PDO PHP Extension;
    GD PHP extension
    MySQL >= 5.7;


# Installation

    Modify config.php file

    $con = mysqli_connect(""server_name"",""user_name"",""password"",""Database_name"");

Import the Database in Your Server like Xampp, Wamp

Database Name -: developer
",29,29,2,1,real-estate,"[cms, real-estate, real-estate-management, real-estate-website]",0
brokalys,map-app,brokalys,https://github.com/brokalys/map-app,https://api.github.com/repos/map-app/brokalys,Latvia's real estate statistics,"<p align=""center"">
  <a href=""https://brokalys.com"" target=""_blank"">
    <img src=""/map-demo.png"" alt=""Brokalys Map"" />
  </a>
</p>

# Riga real estate price map

[![Codacy Badge](https://app.codacy.com/project/badge/Grade/b6c8ebf470004c17afb6695f369e5661)](https://www.codacy.com/gh/brokalys/map-app/dashboard?utm_source=github.com&utm_medium=referral&utm_content=brokalys/map-app&utm_campaign=Badge_Grade)
[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)

Brokalys: a real-estate price analysis platform.

### Installing

```sh
yarn install
```

### Development

```sh
yarn start
```

### Testing

```sh
yarn test
```

### Building

```sh
yarn build
```
",27,27,3,0,real-estate,"[data, hacktoberfest, latvia, map, react, real-estate, realestate]",0
deluminators,Realate,deluminators,https://github.com/deluminators/Realate,https://api.github.com/repos/Realate/deluminators,real-estate data prediction system,"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<img src=""https://i.ibb.co/f2j96d5/Untitled-design-removebg-preview-1.png"" alt=""Untitled-design-removebg-preview-1"" border=""0"">

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[![Stargazers](https://img.shields.io/github/stars/deluminators/Realate)](https://github.com//deluminators/Realate/stargazers)
[![Issues](https://img.shields.io/github/issues/deluminators/Realate)](https://github.com/deluminators/Realate/issues)
[![Contributors](https://img.shields.io/github/contributors/deluminators/Realate)](https://img.shields.io/github/contributors/deluminators/Realate)
[![Forks](https://img.shields.io/github/forks/deluminators/Realate)](https://github.com//deluminators/Realate/network/members)
[![Pull Request](https://img.shields.io/github/issues-pr/deluminators/Realate)](https://github.com/deluminators/Realate/pulls)
[![Contributors](https://img.shields.io/github/contributors/deluminators/Realate)](https://img.shields.io/github/contributors/deluminators/Realate)
[![Top Language](https://img.shields.io/github/languages/top/deluminators/Realate)](https://github.com/deluminators/Realate)


<h5 align=""center""><i>real-estate data prediction & analysis</i>
</h5>
A robust application providing support for predicting and detecting land quality & cover, its optimal usage for building flats or property, its generative model and optimal paths to electric/water/sewage reserve.

# Features

- **Land Cover** : Real estate agents find it difficult to predict and determine the land quality and optimal cover.
- **External supplies** : Finding optimized path for external supplies like electricity, water or sewage reserves.
- **Optimal usage** : [COMING SOON] Optimal usage of land for predicting the maximum number of flats and bunglows possible to fit into a chosen plot.
- **Generating usages** : [UNDER EXPERIMENATION] To generate usages of the plot based on demands by the real estate agents and clients.

# Implementation

1. For classifying the land cover and usage the Resnet50 Architecture along with OpenCV's CVT Threshold.
2. For finding the land cover, semantic segmenation of Land is performed on aerial images for masking the image to suitable classes.
3. For finding the optimal and best route between two points in an aerial image we use the Djikstra Algorithm in the road segmented image of the satellite imagery with an added algorithm which ignores the region with black pixels and finds the best path among the white pixels.
4. We plan to use Generative Adverserial Networks for generating best plot plan of the chosen area for giving a complete finish plan to the real-estate agents.


### Future Plan

- Add GANs generated blueprints for construction on land site
- Dynamic Pricing model for predicting real time price predictions based on demand and availability.
- Implementing bridge with nearby sources for particular usages of tools.
- Implementing better Semantic Segmentation models for better optimal usage functionality.
- Implementing real-time deployment with added security.
- Usage of A-Star or better algorithms in finding the best optimal path between the source and reserves.
<br>

# Installation & Setup

**Running the Machine Learning server**
Go to root of the project, run

```
cd ml
```

```
pip install -r requirements.txt
```

```
python app.py
```

A Flask app will be running on port 8000.  

**Running the back-end server**  
Go to root of the project, run

```
cd backend
```

```
npm install
```

```
npm start
```

Server will be running on localhost on port 5000  
  
  

**Running the front-end server**
Go to root of the project, run

```
cd client
```

```
npm install
```

```
npm start
```

A react app will be running on your browser on port 3000.
Visit http://127.0.0.1:3000/ in your browser to access the application



## Contributions

Contributing rules are mentioned in <a href=""https://github.com/deluminators/Realate/blob/main/CONTRIBUTING.md"">CONTRIBUTING.md</a> file.  
For existing bugs and adding more features open a issue [here](https://github.com/deluminators/Matix/issues)


## Discussions

Pitch new ideas, suggestions and contribute in developing the project! Participate in the discussions [here](https://github.com/deluminators/Realate/discussions)

## Project Maintainers

<table>
<tr>
<td align=""center""><a href=""https://github.com/sanjibansg""><img src=""https://avatars.githubusercontent.com/u/40017007?v=4"" width=150px height=150px /></a></br> <h4>Sanjiban Sengupta</h4>
<a href=""https://www.linkedin.com/in/sanjiban-sengupta/""><img src=""http://pngimg.com/uploads/linkedIn/linkedIn_PNG15.png"" width=32px height=32px></a><a href=""https://github.com/sanjibansg"" style=""padding:7px;""><img src=""https://i.pinimg.com/originals/b5/1b/78/b51b78ecc9e5711274931774e433b5e6.png"" width=32 height=32></a></td>

<td align=""center""><a href=""https://github.com/07souravkunda""><img src=""https://media-exp1.licdn.com/dms/image/C5103AQHQLzOcQVoErg/profile-displayphoto-shrink_800_800/0/1583347930281?e=1638403200&v=beta&t=AoRRg1Q6RYqhcDZoLnbilz479MJnYPho8MM5TOWicFI"" width=150px height=150px /></a></br> <h4>Sourav Kunda</h4>
<a href=""https://www.linkedin.com/in/souravkunda/""><img src=""http://pngimg.com/uploads/linkedIn/linkedIn_PNG15.png"" width=32px height=32px></a><a href=""https://github.com/07souravkunda"" style=""padding:7px;""><img src=""https://i.pinimg.com/originals/b5/1b/78/b51b78ecc9e5711274931774e433b5e6.png"" width=32 height=32></a></td>

<td align=""center""><a href=""https://github.com/SanchiMittal""><img src=""https://media-exp1.licdn.com/dms/image/C4D03AQEXvY2-Ko4f0Q/profile-displayphoto-shrink_800_800/0/1617735487447?e=1638403200&v=beta&t=atAYpGSuMXen2uA0DckxewJHxoQk1ksVWITqTGCM11s"" width=150px height=150px /></a></br> <h4>Sanchi Mittal</h4>
<a href=""https://www.linkedin.com/in/sanchi-mittal/""><img src=""http://pngimg.com/uploads/linkedIn/linkedIn_PNG15.png"" width=32px height=32px></a><a href=""https://github.com/SanchiMittal"" style=""padding:7px;""><img src=""https://i.pinimg.com/originals/b5/1b/78/b51b78ecc9e5711274931774e433b5e6.png"" width=32 height=32></a></td>

</tr>
</table>

## License

MIT
",27,27,5,21,real-estate,"[computer-vision, deep-learning, machine-learning, optimization, real-estate]",0
arthuRHD,immosheets,,https://github.com/arthuRHD/immosheets,https://api.github.com/repos/immosheets/arthuRHD,Tired of searching with your mouse ? Let's automate the process.,"<div id=""header"" align=""center"">
  <img src=""SVGLogo.svg""/><br><br>
    <p><strong><em>Tired of searching with your mouse ? Let's automate the process.</em></strong></p>
    <a href=""https://app.codacy.com/project/badge/Grade/ba1afb9f8ffe402ca6a31a30ba63b628"">
      <img src=""https://app.codacy.com/project/badge/Grade/ba1afb9f8ffe402ca6a31a30ba63b628"" alt=""Codacy Badge"">
   </a>
   <a href=""https://badge.fury.io/py/immosheets"">
      <img src=""https://badge.fury.io/py/immosheets.svg"" alt=""PyPI version"">
  </a>
  <a href=""https://pepy.tech/project/immosheets"">
     <img src=""https://static.pepy.tech/badge/immosheets"" alt=""Downloads"">
  </a>
  <a href=""https://github.com/arthuRHD/immosheets/actions/workflows/python-publish.yml"">
    <img src=""https://github.com/arthuRHD/immosheets/actions/workflows/python-publish.yml/badge.svg"" alt=""release"">
  </a>
  <a href=""https://github.com/arthuRHD/immosheets/actions/workflows/documentation-publish.yml"">
    <img src=""https://github.com/arthuRHD/immosheets/actions/workflows/documentation-publish.yml/badge.svg"" alt=""documentation"">
  </a>
  <a href=""https://github.com/arthuRHD/immosheets/actions/workflows/codacy.yml"">
    <img src=""https://github.com/arthuRHD/immosheets/actions/workflows/codacy.yml/badge.svg"" alt=""Codacy Security Scan"">
  </a>
</div>
<br>

## Description :
+ Introducing ""**immosheets**"", a tool that streamlines your search process by automating it. 
+ No more tedious mouse clicking and scrolling through search results. With **immosheets**, you can quickly and easily find what you're looking for with just a few simple commands. 
+ Whether you're a developer looking for code snippets or a researcher scouring the web for information, **immosheets** can help you save time and increase your productivity. 

<div align=""center"">
<h3>Try immosheets out today and see the difference for yourself!<h3>
</div>



## Usage

### Install

```sh
pip install immosheets
```

### Write your script

This is meant to be used as a package for your bot.

```py
from immosheets import (SelogerService, SelogerSearchQuery, SelogerRealEstateFilter, 
SelogerRealEstateType, SelogerTransactionType, GoogleSpreadsheetsService)


seloger = SelogerService(api_key='my_seloger_api_key')
google_sheets = GoogleSpreadsheetsService(credentials_file_path='./credentials.json')

query = SelogerSearchQuery(
    maximumPrice=""800"",
    zip_codes=""76300,76800,76000"",
    includeNewConstructions=""false"",
    transactionType=SelogerTransactionType.RENT,
    realtyTypes=SelogerRealEstateType.APPARTMENT,
    sortBy=SelogerRealEstateFilter.NEWEST
)

google_sheets.use(""my_sheet_id"").clear().add_headers()

for result in seloger.search(query):
    google_sheets.insert(result)
```
## Genereting credentials

| **Third party** | **Instructions**                                                                                                                                                                                                                                                                                                                     |
|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [<img src=""https://kstatic.googleusercontent.com/files/adf55cdf4c7f8fb38efbf8df6c2792660fbeff2d05be05f2ec8e9c265a179b51c64b9679d8aee00e09cad19ce419d90a2d999b82cea4200abbe78c73e6bfaacf"" width=100>](https://www.google.fr/intl/fr/sheets/about/)    | To learn how to create credentials, go to [Create credentials](https://developers.google.com/workspace/guides/create-credentials).  Once you create the credentials, make sure the downloaded JSON file is saved as credentials.json. Then move the file to your working directory and fill the path when instanciating the service. |
| [<img src=""https://is1-ssl.mzstatic.com/image/thumb/Purple112/v4/bf/64/69/bf646951-e676-9162-1300-4e9a3beb1a8f/AppIcon-0-1x_U007emarketing-0-7-0-85-220.png/256x256bb.jpg"" width=100>](https://www.seloger.com/)        | Generate your API key [here](https://rapidapi.com/apidojo/api/seloger/). An account on RapidAPI is needed to retrieve an API key. |
| [<img src=""https://static.orpi.com/images/orpibackend/default/5c6e83b340014_Orpi_picto_Agences%20ORPI_ROUGE.png"" width=100>](https://www.orpi.com/) | Nothing to do. |
|  [<img src=""https://www.erafrance.com/assets/imgs/era-logo-national.svg"" width=100>](https://www.erafrance.com) | Work in progress. |
| [<img src=""https://www.ouestfrance-immo.com/photo-laforet-guingamp/client/1498/laforet-guingamp-1498logo.jpg"" width=100>](https://www.laforet.com/) | Work in progress. |

Check out examples for more.

## For contributors

To install development dependencies

```sh
pip install -r requirements.txt
```

To install the package locally with your new code inside

```sh
pip install -e .
```

There are no unit tests or documentation currently, we're working on that.

## Integration

+ At this time, I am able to integrate with seloger.com and Google Sheets.
+ I am currently in the process of implementing support for Leboncoin.
+ If you would like me to integrate with any other third-party platforms, please submit a request in the form of an issue.
+ Additional integrations beyond seloger.com and Google Sheets are being considered and are open for request through the creation of an issue.
+ Your suggestions will be taken into consideration and evaluated for feasibility and compatibility with my current system.
+ We appreciate your feedback and suggestions as it helps us to improve and expand my capabilities to better serve you!

### You can actually write your own integration based on defaults abstract classes located at the root of the package :

- 'RealEstateService' for data acquisition
- 'ReportingService' to display and manage data
    
    
### Integration Ideas 
    
Here's few integrations ideas:

- Excel
- MongoDB
- MySQL
- ElasticSearch
- Persist data as a File (JSON, XML, CSV)
- Explorimmo
- meilleursagents.com
- apimo.net
",25,25,1,13,real-estate,"[automation, data, google-sheets, google-sheets-api, immosheets, leboncoin, open-source, orpi, pypi, python, real-estate, seloger, sheets-api]",0
rgautam320,Real-Estate,,https://github.com/rgautam320/Real-Estate,https://api.github.com/repos/Real-Estate/rgautam320,Real Estate App using React as Frontend and Django as Backend by Rajan Gautam,"# Real Estate App using React as Frontend and Django as Backend by Rajan Gautam

## Steps to Run the Application

Pull the repository into your device and run it as you used to run Django Application.

-   (You need to install 'requirements.txt' if you don't have these already)

-   (You also need to build React Application as it has been ignored in git and also need node_modules.)

-   Note: You need to provide your Google Account Details in Settings File.

OR You can simply go through the below link.

### Link: https://rgautam320-real-estate.herokuapp.com

## User View

### 1. Home Page

When you first open the application, you will see the home page where you can see the search options and default search results just below. You will see two menu icons (One at right top and another at left top).

![Real-Estate-Home](https://user-images.githubusercontent.com/71542496/126948127-24f67fa6-ff8e-4055-9ad3-3d92c893b247.png)

### 2. Listing Page

You can see all the listings here.

![Real-Estate-Listing](https://user-images.githubusercontent.com/71542496/126948475-2692512c-714b-470f-8f02-7f8256e449b7.png)

### 3. About Page

In about page, you can see about the company, top sellers and listed sellers.

![Real-Estate-About](https://user-images.githubusercontent.com/71542496/126949090-f83bf783-1330-4e0c-96b9-8e37a2af0c87.png)

### 4. Contact Page

There is a seperate contact page from where you can contact to the company. You will also get response email after sending messages.

![Real-Estate-Contact](https://user-images.githubusercontent.com/71542496/126949256-9adc748c-5cbc-435e-8b5d-f2839295b35a.png)

### 5. Login and Signup Page

You need an account to view the details page and make order. For that you just need to go to Signup page and create an account.

![Real-Estate-Signup](https://user-images.githubusercontent.com/71542496/126949535-ab52f3cc-808a-4d50-91cf-2d1392a0f922.png)

![Real-Estate-Login](https://user-images.githubusercontent.com/71542496/126949599-60a26190-55d2-4110-aeb2-15ca19b34f07.png)

### 6. Details Page

You can view the details page after logging in. You can see the complete details about the house/condo/townhouse in this page. You can also see the images and description of those and about the seller also. You can also contact the seller directly from the contact section.
If you want to buy, then you just need to click on ""BUY NOW"" button.

![Real-Estate-Ocean-Home](https://user-images.githubusercontent.com/71542496/126949836-3075241c-b9fe-475c-9ad1-776f18642921.png)

### 7. Buy Page

You can use ""DISCOUNT100"" coupon to buy that item. If you could buy that item successfully, then you will get confirmation message there only.

![Real-Estate-Ocean-Home-Buy](https://user-images.githubusercontent.com/71542496/126950250-fe9191b6-a37d-4772-acc3-6a62bef1301a.png)

### 8. Profile Page

In profile page, you can see about your info as well as the orders you have made. You can see your buyings on clicking on the Item Name coloured in blue.

![Real-Estate-Profile](https://user-images.githubusercontent.com/71542496/126950607-61d81403-7579-442e-b8e1-1d7a94190bd2.png)

### 9. Brought Page

You can see full details about what you have brought.

![Real-Estate-River-Side-House](https://user-images.githubusercontent.com/71542496/126950796-a1698fdb-b48b-418d-aaea-91cc8dc77fbf.png)

### 10. Admin Page

From the admin page, you can manage almost all things.

![Real Estate - Admin](https://user-images.githubusercontent.com/71542496/126960020-9c794376-fba4-4a5f-8bb4-1e47a263dcbb.png)

## Thank You

## Rajan Gautam
",22,22,1,0,real-estate,"[django, django-react, react, real-estate]",0
lawrensylvan,immoweb-keeper,,https://github.com/lawrensylvan/immoweb-keeper,https://api.github.com/repos/immoweb-keeper/lawrensylvan,Create your own long term database of Immoweb photos and metadata based on criterias,"# Immoweb Keeper

Save your favorite Immoweb.be search results forever in your MongoDB database and explore the past !

![Screenshot of the front-end](https://user-images.githubusercontent.com/25752900/138572515-7369734a-9727-4450-87e5-fa43db6b8b9c.png)

## Table of contents

* [Context](#context)
* [How to use](#how-to-use)
  + [Requirements](#requirements)
  + [Setup config](#setup-config)
  + [Run download routine](#run-download-routine)
  + [Run visualisation page](#run-visualisation-page)
* [Data model](#data-model)
  + [Collection `estates`](#collection--estates-)
    - [Subdocument `rawMetadata`](#subdocument--rawmetadata-)
* [How does it work ?](#how-does-it-work--)
* [Work in progress...](#work-in-progress)

## Context

Immoweb is the leading real estate classified ads website in Belgium. However, items disappear once they are sold or rented. If you want to be able to keep forever all the information about items (including description, photos and structured data such as PEB, bedroom count, price), you've come to the right place ! Immoweb Keeper, provided that you run it on a schedule (such as every day) and that you provide one or more search criteria, will automatically download all the new items matching those criteria and even redownload ones that were updated.

You are then free to analyse the long-term market trends, such as the evolution of price/transaction volume/average bedroom count/surface etc. in specific area over a specific time period. That part is still up to you as of today : you could use MongoDB Compass or MongoDB Charts to quickly analyse the data, use a front-end data vizualization framework to build an interactive webpage or use any other data vizualization tool.

## How to use

### Requirements

- You need to have Node.js and npm installed
- You need to have an instance of MongoDb installed on your machine

### Setup config

- Go to the root project directory using terminal & run `npm install`
- Make sure your MongoDB instance is running (you can run `mongod`)
- Modify the `config.env` file to match your MongoBD connection string, such as :
  ```sh
  MONGODB_URL=mongodb://localhost:27017
  MONGODB_DATABASE=immoweb
  ```
- Create a `config.json` file with the following items :
  * `imageRepository` : the path on your filesystem where you would like the items' images to be downloaded
  * `searchURLs` : just go to http://www.immoweb.be, choose you criterias and paste the url once you are on the search results page, OR :
  
  * `searchQueries` : an alternative, more structured way of storing the search criteria than the search url (the filter names are those from immoweb urls query params) 
 
  ```json
  {
    ""imageRepository"": ""~/immoweb/photos"",
    ""searchURLs"": [
        ""https://www.immoweb.be/en/search/house/for-rent?countries=BE&postalCodes=BE-1140&orderBy=relevance"",
        ""https://www.immoweb.be/en/search/apartment/for-rent?countries=BE&minBedroomCount=1&propertySubtypes=KOT%2CFLAT_STUDIO&page=1&orderBy=relevance""
    ],
    ""searchQueries"": [{
            ""propertyTypes"": [""HOUSE""],
            ""postalCodes"": [1030, 1040, 1140],
            ""maxPrice"": 600000,
            ""minBedroomCount"": 3
        }, {
            ""propertyTypes"": [""GARAGE""],
            ""postalCodes"": [1030, 1040, 1140]
        }]
  }
  ```

### Run download routine

Execute `npm run routine` to start the download routine.

Ideally, you should setup a cron job to execute the routine daily (there are various ways of achieving this depending on your OS).

All the structured data and the pictures will be respectively stored in your MongoDB database and on your hard drive.

Then, it's up to you to decide how you want to xplore : you can use the front-end described in next section to explore the results, or you can setup any data vizualisation tool.

It is good to know that :
- The first time you include a search query/url in the config and run Immoweb Keeper, it will browse through all search results matching that criteria
- The next times, Immoweb Keeper will sort the results from the most recently to the least recently updated item, and stop browsing the results when it reaches an item that has not been updated since the last time you runned Immoweb Keeper

### Run visualisation page

- Execute ``npm run server`` to setup the server that will expose the data from your MongoDB
  * if you want to use another port than 5000, you can override the default port in ``config.env``

- Execute ``npm run client`` and the React ImmowebKeeper website will pop up in your default browser and allow you to explore the results !
  * use the filters on top to dive into your results
  * currently, the filtering is done on all the results that exist in your database, no distinction is made between the different search queries
  * lots of improvements and optimizations yet to come !

## Data model

If the provided front-end is a bit light for your needs, you are free to explore the data with any tool you want. Here is a documentation of how the data is structured in the MongoDB database :

### Collection `estates`

|       Field         |            Source             |                      Description                    |
| ------------------- | ----------------------------- | --------------------------------------------------- |
| _id                 | MongoDB                       | unique id generated by mongodb                      |
| rawMetada           | Immoweb                       | all the raw metadata as it was fetched from Immoweb |
| fetchDate           | Immoweb Keeper                | datetime of the download                            |
| images              | Immoweb Keeper                | item's pictures file paths on your hard drive       |
| lastSeen            | Immoweb Keeper                | date of last run in which that item appeared        |
| disappearanceDate   | Immoweb Keeper                | date of first run in which it was not there anymore |
| immowebCode         | rawMetadata                   | unique id within immoweb                            |
| lastModificationDate| rawMetadata                   | cast to datetime                                    |
| creationDate        | rawMetadata                   | cast to datetime                                    |
| expirationDate      | rawMetadata                   | cast to datetime                                    |
| geolocation         | rawMetadata.property.location | better format for direct display in MongoDB compass |

#### Subdocument `rawMetadata`

Whereas the first level structure is guaranteed by Immoweb Keeper, the *rawMetadata* field structure could change without notice in the case of Immoweb changing things in their data structure. Only a change in the lastModificationDate and id (which holds the immoweb code) would break the Immoweb Keeper routine as it uses them for indexing data and knowing when to stop to browse results. Any other modification in the structure would just make the afterhand data analysis more difficult.

|       Field path              |  Filter in front-end ?  | Usage in front-end |
| -------------------           | ----------------------  | ------------------ |
| immowebCode                   |                         | card, table        |
| price.mainValue               | v                       | card, table        |
| property.location.postalCode  | v                       | card, table        |
| property.location.locality    | v                       | card, table        |
| property.location.geolocation | v                       | map                |
| property.location.street      | v                       | card, table        |
| property.hasGarden            | v                       | card, table        |
| property.gardenSurface        | v                       | card, table        |
| customers[0].name             |                         | card               |
| customers[0].logoUrl          |                         | card               |
| flags.isPublicSale            |                         | card               |
| flags.isSoldOrRented          |                         | card               |
| flags.isUnderOption           |                         | card               |

## How does it work ?

- All the structured data about real estate items will be stored in your **immoweb** MongoDB database (in collections **estates**)
- All the item pictures will be downloaded to your image repository folder, in subfolders named after their immoweb codes
- The details (url, list of criteria, last run date) of the search query will be stored as documents the *queries* collection of the *immoweb* database, along with the last time when it was runned

Here is the overview of how the code is organized. When you run it, the script will :

- Create a database called *immoweb* in your mongodb instance specified in *mongoDBUrl* (if it does not exist already)
- Create the folder for the image repository as mentioned in *imageRepository* (if it does not exist already)
- For each of your search result's URLs or structured queries, it will then :
  - Get the last run date from the *queries* collection of the *immoweb* mongodb
  - Add a filter to sort results from the most to the least recently updated/created
  - For each page of results, it will extract all the immoweb codes and for each of them, it will :
    - Get the JSON metadata provided by immoweb in the source code of the item webpage
    - Get the lastModificationDate from the metadata : if it is older than the last run date of this query, go on with the next query
    - Get all the item's pictures' urls from the media.pictures item from the metadata
    - Download all pictures to the path *<imageRepository>/<immowebCode>/<pictureName>.jpg*
    - Create a new document in the *estate* collection of the *immoweb* database with the immoweb metadata wrapped with other data (cf next section)
  - Save the current date and time as the last run date for that query in the *query* collection of the *immoweb* database

## Work in progress...

The download routine is working fully, but the front-end visualization page, although working, is still under construction : only a few filters exist, the retrieval of items from the database is far from efficient and there is no way to select for which query we want to see the results : the filters work on the basis of the full set of data and their min/max/allowed values (price range, list of zip codes) does not change according to the bounds that we can find in the database.",20,20,4,28,real-estate,"[immoweb, mongodb, nodejs, real-estate, scraper]",0
SimplyRETS,examples,SimplyRETS,https://github.com/SimplyRETS/examples,https://api.github.com/repos/examples/SimplyRETS,"SimplyRETS API for RETS, IDX, & RESO WebAPI data feeds - Examples","# SimplyRETS API Examples

A collection of examples showcasing usage of the SimplyRETS API.
SimplyRETS makes it easy to **build software using data from your
MLS** or REALTORS association by normalizing any **RETS**, **IDX**,
or **RESO WebAPI** feed into a [standardized JSON API made for real estate](https://docs.simplyrets.com).

_NOTE: Looking for something plug-and-play? Check out the
[SimplyRETS WordPress plugin](https://wordpress.org/plugins/simply-rets/)_

## Getting Started

The SimplyRETS API makes it easy to access your MLS's listing data from
with any programming language. Below you'll find examples for getting started
with some of the most common languages - if you don't see what you're looking
for, [send us a message](https://simplyrets.com/#home-contact) and we'll be
happy to help get you going.

- [PHP](php/)
- [Ruby](ruby/)
- [JavaScript (ajax)](javascript/)
- [JavaScript (ajax) - interactive map search](interactive-map-search/)

## Interactive map search

The [interactive-map-search](interactive-map-search/) directory contains an
example program for building a map-based search tool using Ajax, Leaflet,
and OpenStreetMap. The test data is located in Houston.

To run this example, download [`interactive-map-search/index.html`](interactive-map-search/index.html)
and open it in your browser, or [visit the live version here](https://simplyrets.github.io/examples/interactive-map-search)

## More resources

The SimplyRETS API can be accessed from and tool or language that can
make HTTP requests. Use the examples in this repo to get started, or
check out some of the other resources and documentation:

- [API documentation and help topics](https://docs.simplyrets.com)
- [Interactive API documentation](https://docs.simplyrets.com/api/index.html)
- [Code snippets](https://simplyrets.com/#curl)
",20,20,4,2,real-estate,"[idx, idx-api, real-estate, reso-web-api, rets, simplyrets, simplyrets-api]",0
DicksonC96,PropertyGuru-Scraper,,https://github.com/DicksonC96/PropertyGuru-Scraper,https://api.github.com/repos/PropertyGuru-Scraper/DicksonC96,A python scraper to scrape information on property sale or rent in Malaysia from PropertyGuru.com. Strictly for educational purposes only.,"# PropertyGuru Property Listing Scraper And Rental-Installment BreakEven Analysis

## Interactive Dashboard 
Condo Property Price in KL (updated monthly): https://datastudio.google.com/s/iDD1161H8RQ
![image](https://user-images.githubusercontent.com/66625723/173601300-89c0b8c5-364b-48a3-90c4-cf60dff07471.png)  
  
### Column Description
- Mean: Mean Price for Sale/Rent
- CV: Coefficient of Variation of Sale/Rent Price
- Median: Mean Price for Sale/Rent  

### Color Legend
- Red: Sale list summary
- Blue: Rental list summary
- Green: Percentage breakeven (%)

### Rental-Installment BreakEven Formula and Assumptions
1. The degree of high-balling are assumed to be the same for both selling and renting prices scraped.
2. Only those properties with both sale and rental listed will be selected.
3. Default analysis will remove NaN entries and calculate break-even % as in (2) based on median prices.
5. Gross Rental-Installment Break-even Rate are pre-calculated as:
> RM404 monthly installment /RM100k selling price (90% loan, 3.5% IR, 30yrs)

## Property List Scraper
- A python scraper to scrape property price listed for sale or rent in Malaysia from PropertyGuru.com.
- Currently supports state and property type filters only (ping me if you need more precise/personalized filters)
- Strictly for educational purposes only.
- Any suggestions/collabs are very much welcomed!
- [Property price datasets](https://github.com/DicksonC96/PropertyGuru-Scraper/tree/main/data) (sampled every first day of the month)

### How to scrape myself?
1. Download [data-scraper-v2alpha.py](https://raw.githubusercontent.com/DicksonC96/PropertyGuru-Scraper/main/data-scraper-v2alpha.py) (right-click and download).
2. Install [python](https://www.python.org/) and dependencies.
3. Run the script with your parameters. (check -h for documentation)
4. Enjoyy!
P/S: Refer section below for the keywords

### Query selection keywords (select one for each category):
|Category|Keywords|
|--|--|
|MARKET|residential, commercial (not tested)|
|PROPERTY_TYPE|all, bungalow (Bungalow / Villa), condo (Apartment / Condo / Service Residence), semid (Semi-Detached House), terrace (Terrace / Link House), land (Residential Land)|
|STATE|johor, kedah, kelantan, melaka, ns, pahang, penang, perak, perlis, selangor, terengganu, sabah, sarawak, kl, labuan, putrajaya, other|

### Output Data Description
|Column|Type|Remarks|
|--|--|--|
|PropertyName|str| |
|Type|str|Sale/Rent|
|Price|float| |
|Bedrooms|str|int or str (eg. Studio)|
|Bathrooms|str|int or str (eg. Studio)|
|Sqft|int|Lot size|
|Author|str|Person who uploaded the listing|
",19,19,3,4,real-estate,"[education, investment-calculator, market-data, property, python, real-estate, scraper]",0
aelassas,movinin,,https://github.com/aelassas/movinin,https://api.github.com/repos/movinin/aelassas,Rental Property Management Platform with Mobile App,"[![](https://movin-in.github.io/content/cover.jpg)](https://movin-in.github.io)

|**Supported Platforms**|  ![](https://img.shields.io/badge/iOS-4630EB.svg?logo=APPLE&labelColor=999999&logoColor=fff) ![](https://img.shields.io/badge/Android-4630EB.svg?&logo=ANDROID&labelColor=A4C639&logoColor=fff) ![](https://img.shields.io/badge/web-4630EB.svg?logo=GOOGLE-CHROME&labelColor=4285F4&logoColor=fff) |
| ----------- | ----------- |
| **CodeFactor**| [![CodeFactor](https://www.codefactor.io/repository/github/aelassas/movinin/badge)](https://www.codefactor.io/repository/github/aelassas/movinin) |
| **API**      | [![API CI](https://github.com/aelassas/movinin/actions/workflows/api.yml/badge.svg)](https://github.com/aelassas/movinin/actions/workflows/api.yml) |
| **Backend**   | [![Backend CI](https://github.com/aelassas/movinin/actions/workflows/backend.yml/badge.svg)](https://github.com/aelassas/movinin/actions/workflows/backend.yml) |
| **Frontend**   | [![Frontend CI](https://github.com/aelassas/movinin/actions/workflows/frontend.yml/badge.svg)](https://github.com/aelassas/movinin/actions/workflows/frontend.yml) |
| **Mobile App**   | [![Mobile CI](https://github.com/aelassas/movinin/actions/workflows/mobile.yml/badge.svg)](https://github.com/aelassas/movinin/actions/workflows/mobile.yml) |

Movin' In is a Rental Property Management Platform with a backend for managing properties, customers and bookings, a frontend and a mobile app for renting properties.

Movin' In is designed to work with multiple agencies. Agencies can manage their properties and bookings from the backend. Movin' In can also work with only one agency as well.

From the backend, administrators can create and manage agencies, properties, locations, users and bookings.

When new agencies are created, they receive an email prompting them to create their account to access the backend and manage their properties, customers and bookings.

Customers can sign up from the frontend or the mobile app, search for available properties based on location point and time, choose a property and complete the checkout process.

A key design decision was made to use TypeScript instead of JavaScript due to its numerous advantages. TypeScript offers strong typing, tooling, and integration, resulting in high-quality, scalable, more readable and maintainable code that is easy to debug and test.

<img src=""https://movin-in.github.io/content/docker.png"" alt="""" width=""220"" />

Movin' In can run in a Docker container. Follow this step by step [guide](https://github.com/aelassas/movinin/wiki/Docker) to walk you through on how to build Movin' In Docker image and run it in a Docker container.

## Features

* Agency management
* Ready for one or multiple agencies
* Property management
* Booking management
* Customer management
* Multiple payment methods (Credit Card, Pay Later)
* Multiple language support (English, French)
* Multiple pagination options (Classic pagination with next and previous buttons, infinite scroll)
* Responsive backend and frontend
* Native Mobile app for Android and iOS with single codebase
* Push notifications

## Contents

1. [Overview](https://github.com/aelassas/movinin/wiki/Overview)
2. [Architecture](https://github.com/aelassas/movinin/wiki/Architecture)
3. [Installing](https://github.com/aelassas/movinin/wiki/Installing)
4. [Docker](https://github.com/aelassas/movinin/wiki/Docker)
   1. [Docker Image](https://github.com/aelassas/movinin/wiki/Docker#docker-image)
   2. [SSL](https://github.com/aelassas/movinin/wiki/Docker#ssl)
5. [Build Mobile App](https://github.com/aelassas/movinin/wiki/Build-Mobile-App)
6. [Demo Database](https://github.com/aelassas/movinin/wiki/Demo-Database)
   1. [Windows, Linux and macOS](https://github.com/aelassas/movinin/wiki/Demo-Database#windows-linux-and-macos)
   2. [Docker](https://github.com/aelassas/movinin/wiki/Demo-Database#docker)
8. [Run from Source](https://github.com/aelassas/movinin/wiki/Run-from-Source)
9. [Run Mobile App](https://github.com/aelassas/movinin/wiki/Run-Mobile-App)
10. [Change Currency](https://github.com/aelassas/movinin/wiki/Change-Currency)
11. [Add New Language](https://github.com/aelassas/movinin/wiki/Add-New-Language)

### License

Movin' In is [MIT licensed](https://github.com/aelassas/movinin/blob/main/LICENSE).

",19,19,1,0,real-estate,"[android, cross-platform, expo, expressjs, ios, landlord, mobile, mongodb, mui, mvc, nodejs, property-management, property-rental, react, react-native, real-estate, rental, typescript]",0
stevob14,passivecash,,https://github.com/stevob14/passivecash,https://api.github.com/repos/passivecash/stevob14,Passive Cash Ideas,,18,18,2,0,real-estate,"[annuities, bitcoin, bonds, cash, cds, cefi, compound-interest-calculator, crypto, cryptocurrency, defi, dividends, ethereum, high-yield, honeygain, inflation-calculator, mortgage-calculator, passive-cash, passive-income, real-estate, savings-account]",0
harry-s-grewal,mls-real-estate-scraper-for-realtor.ca,,https://github.com/harry-s-grewal/mls-real-estate-scraper-for-realtor.ca,https://api.github.com/repos/mls-real-estate-scraper-for-realtor.ca/harry-s-grewal,Python MLS and Real-Estate Data Scraper for the Realtor.ca Website,"# Realtor.ca API Wrapper and Scraper
Python wrapper and scraper for the Realtor.ca website. Use it to scrape Canadian real-estate listings easily.

## Installation
Use the package manager [pip](https://pip.pypa.io/en/stable/) to install the package requirements.

```bash
pip install git+https://github.com/harry-s-grewal/mls-real-estate-scraper-for-realtor.ca.git
```

## Local Development

```bash
git clone https://github.com/harry-s-grewal/mls-real-estate-scraper-for-realtor.ca.git
python -m venv venv
. venv/bin/activate
pip install -r ./mls-real-estate-scraper-for-realtor.ca/requirements.txt
```

## Context
Realtor.ca has two API endpoints: `PropertySearch_Post` and `PropertyDetails`. Querying `PropertySearch_Post` 
will return a list of properties in a .json format, including some limited details. Querying `PropertyDetails` will provide detailed information on each property. Depending on what you're looking for, you can query one or the other, but be aware that getting details on each property is slow. That's because Realtor.ca is rate limited (boo). If you make too many queries too often, you'll receive an `Error 403: Unauthorized` error. It's not clear what the rate limit is, but waiting an hour or so between limits stops the freeze-out.

## Usage
In `queries.py` you will find queries to Realtor.ca for both the `PropertySearch_Post` endpoint and the `PropertyDetails` endpoint. It also contains a query to get the coordinate bounding box of a city, as that's what Realtor.ca uses to determine which properties to list.

In `realtorca.py` there are two functions to automate the scraping of Realtor.ca.

`get_property_list_by_city()` will scrape a list of properties by city and save it as a .csv.
```python
get_property_list_by_city(""Calgary, AB"")
```

Result:
```bash
CalgaryAB.csv
```
`get_property_details_from_csv()` will use that .csv file to get property listing details to enhance the data already available.
```python
get_property_list_by_city(""CalgaryAB.csv"")
```
## License
MIT License

*Follows PEP8 Styleguide.*
",18,18,2,3,real-estate,"[canada, etl-framework, housing, housing-prices, mls, property, real-estate, scraper, webscraping]",0
IamOmaR22,Real-Estate-Project-with-Django-PostgreSQL,,https://github.com/IamOmaR22/Real-Estate-Project-with-Django-PostgreSQL,https://api.github.com/repos/Real-Estate-Project-with-Django-PostgreSQL/IamOmaR22,"LF Real Estate is ready to make your real estate website faster, safer and better!","# Real-Estate-Project-Using-Django-PostgreSQL
*LF Real Estate is ready to make your real estate website faster, safer and better!*

# Features
* There are realtors
* There are best sellers
* You can by your house/flat
* You can sell your house/flat
* User-friendly.
<!--
**[Live Demo](https://iamomar22.pythonanywhere.com/)**
-->

# Tools
## Front-end Part
* HTML
* CSS
* Bootstrap
* JavaScript
* JQuery
## Back-end
* Django
* SQLite 3



# Screenshots of the Project
<p align=""center"">
  <img width=""660"" height=""300"" src=""static/ss/a.png"">
  <img width=""660"" height=""300"" src=""static/ss/b.png"">
  <img width=""660"" height=""300"" src=""static/ss/c.png"">
  <img width=""660"" height=""300"" src=""static/ss/d.png"">
  <img width=""660"" height=""300"" src=""static/ss/e.png"">
</p>

**Copyright ¬©** 2020-3020 Md. Omar Faruk

## Go Through This Site Then You Will Know About This Site Properly.
",16,16,2,0,real-estate,"[bootstrap4, django, html-css-javascript, python3, real-estate]",0
KhouryFinance,awesome-home-buying,KhouryFinance,https://github.com/KhouryFinance/awesome-home-buying,https://api.github.com/repos/awesome-home-buying/KhouryFinance,A list of useful resources for buying your home in a crazy market. Written by some people at Khoury Finance,"# Awesome Home Buying

A compendium of resources for the home buyer who wants to know everything they can about real estate. Most resources pertain to residents of California, but the general principles can be applied to the rest of the United States.


## Content
- [HomeGuessr](#homeguessr)

- [Generalist Guides](#generalist-guides)

- [Budgeting](#budgeting)

- [Mortgages](#mortgages)

- [Down Payments](#down-payments)

- [Commissions](#commissions)

- [Interest Rates](#interest-rates)

- [Home Search](#home-search)

- [House Tours](#house-tours)

- [Make an Offer](#make-an-offer)

- [Escrow and Title](#escrow-and-title)

- [Closing Costs](#closing-costs)


## HomeGuessr
- [HomeGuessr - Put your inner home appraiser to the test!](https://homeguessr.khouryfinance.com/) - Our free browser game where players guess the value of recently listed homes. See how much of a grip you have on modern property prices!

## Generalist Guides
- [Michael Bluejay's Home Buyer's Guide](https://michaelbluejay.com/house/) - A commonly referenced internet classic, originally published in 1999. The author has updated it over the years and still remains a highly useful primer for home buyers.
- [Investopedia: First Time Buyer's Guide](https://www.investopedia.com/updates/first-time-home-buyer/) - A basic guide for all the fundamentals of the home buying process. What to look out for, what needs to be done, budget considerations, and perks of being a first timer.
- [RocketMortgage: Buying a Second Home](https://www.rocketmortgage.com/learn/buying-a-second-home) - Details the differences and similarities in the home buying process for second timers. What to expect, down payment requirements, and types of designations for your second property.

## Budgeting
### Guides
- [Investopedia: Set a Budget for Buying Your First Home](https://www.investopedia.com/personal-finance/how-set-budget-your-first-home/) - What an ""affordable"" mortgage actually looks like, as well as other expenses to keep in mind that go beyond the mortgage.
- [Khoury Finance: How Much Mortgage Can I Afford?](https://wiki.khouryfinance.com/how-much-mortgage-can-i-afford) -  A comprehensive guide on mortgage budgeting. Starting with the lifestyle budget, and working through what mortgage lenders look for.
- [MotleyFool: Factors Determining Mortgage Approval](https://www.fool.com/the-ascent/mortgages/factors-determining-mortgage-approval/) - Details the major factors mortgage lenders look for when they're considering your risk profile.

### Calculators
- [NerdWallet: How Much House Can I Afford?](https://www.nerdwallet.com/mortgages/how-much-house-can-i-afford/calculate-affordability) - A mortgage calculator that features all the bells and whistles you need to make an educated decision.

## Mortgages
### Guides
- [Investopedia: Mortgage Brokers vs. Direct Lenders](https://www.investopedia.com/articles/personal-finance/090915/mortgage-broker-vs-direct-lenders-which-best.asp) - The differences between brokers and direct lenders, pros and cons, and which to choose depending on your situation.
- [Time: How to Find the Best Mortgage Lender](https://time.com/nextadvisor/mortgages/how-to-find-the-best-mortgage-lender/) - Whether to choose a broker or a lender, and what specific items to shop around for and focus on.
- [RocketMortgage: Types of Mortgages](https://www.rocketmortgage.com/learn/types-of-mortgages) - An introductory explainer on the different types of mortgages offered by lenders, banks and brokers.
- [TheMortgageReports: Types of Home Loans](https://themortgagereports.com/guide/types-of-home-loans) - A fairly exhaustive compendium of articles on all the different types of mortgages/home loans. 
- [/r/PersonalFinance: Mortgage Wiki](https://www.reddit.com/r/personalfinance/wiki/housing/) - Useful resource for understanding mortgages, includes links to popular reddit threads that discuss the topic.

### Calculators
- [BankRate: Mortgage Rates](https://www.bankrate.com/mortgages/mortgage-rates/) - A thorough calculator and explainer for comparing mortgage rates.


## Down Payments
-  [Bankrate: What is Home Down Payment](https://www.bankrate.com/mortgages/what-is-down-payment/) - The basics of down payments, your options, and the implications of each.
- [Reddit: Housing Down Payments 101 by /u/yes_its_him](https://www.reddit.com/r/personalfinance/comments/6tmh6v/housing_down_payments_101/) - A celebrated guide on down payments, how you can source them, and the consequences of a low down payment via private mortgage insurance.
- [TheMortgageReports: Low to 0 Down-Payment Mortgage Options](https://themortgagereports.com/11306/buy-a-home-with-a-low-downpayment-or-no-downpayment-at-all) - A comprehensive look into the different types of mortgages that allow for less than a 20% down payment.
- [CFPB: What is Private Mortgage Insurance (PMI)?](https://www.consumerfinance.gov/ask-cfpb/what-is-private-mortgage-insurance-en-122/) - Explains what down-payment brackets will trigger PMI, how it works, how it's paid, and when you can refinance out of it.
- [Khoury Finance: What is private mortgage insurance (PMI)?](https://wiki.khouryfinance.com/what-is-premium-mortgage-insurance) - Private Mortgage Insurance explainer, how it works, and why you might consider paying 20% down to avoid it.

## Commissions
### About Realtor Commissions
- [Avoiding Real Estate Commissions](https://wiki.khouryfinance.com/everything-we-know-about-avoiding-real-estate-commissions) - Everything we know about saving on Realtor commissions.
### Discount Real-Estate Providers
- [Khoury Finance: DIY Home Buying](https://www.khouryfinance.com/real-estate) - Save up to 50% of the buyer's side commission by taking on the fun parts of the real-estate process yourself.

## Interest Rates
### Discount Points
- [Khoury Finance: What is a Mortgage Rate Buydown?](https://wiki.khouryfinance.com/what-is-a-mortgage-rate-buydown) - A primer on mortgage rate buydowns, how they work, and how they can benefit you in the high rate market.

## Home Search
### Platforms
- [Redfin](https://www.redfin.com/)
- [Zillow](https://www.zillow.com/)
- [Realtor.com](https://www.realtor.com/)
- [Trulia](https://www.trulia.com/)
- [Homes.com](https://www.homes.com/)
- [Foreclosure.com](https://www.foreclosure.com/)
- [FSBO.com](https://fsbo.com/)
- [Homes for Heroes](https://www.homesforheroes.com/)

### Guides
- [RocketMortgage: Your House Hunting Checklist](https://www.rocketmortgage.com/learn/house-shopping) - A basic guide on what you should prioritize for your home search, as well as some tips and tactics for what to keep your eyes peeled for.
- [Khoury Finance: How to Search for a Home without a Realtor](https://wiki.khouryfinance.com/how-to-search-for-a-home-without-a-realtor) - A guide on how to search for homes without professional assistance. Includes tools and resources to evaluate your choices.

## House Tours
- [OpenDoor: What to Look for on a House Tour](https://www.opendoor.com/w/blog/what-to-look-for-on-a-house-tour) - A short guide on general best practices for private home showings; what to check out, what to ignore, and what questions you should be asking.
- [Homes.com: 13 Essential Things to Look for When Viewing a House](https://www.homes.com/blog/2017/04/13-essential-things-look-viewing-house/) - Guide to touring houses from the perspective of a home inspector. Has a helpful infographic for major items to look out for, as well as a downloadable checklist to bring with you as your tour a property.

## Making an Offer
- [HomeBuyer: Making an Offer on a House](https://homebuyer.com/learn/making-an-offer-on-a-house) - Fundamentals of making an offer, the steps getting there, what to understand and include in the offer -- with or without a buyer's agent.

### Contingencies
- [NerdWallet: Common Real Estate Contingencies Home Buyers Should Know](https://www.nerdwallet.com/article/mortgages/buying-a-house-contingencies-disclosures) - Basic primer on what contingencies are, and how they can protect you from unfortunate surprises so you can pull out of the deal.
- [RocketHomes: How Often do Contingent Offers Fall Through](https://www.rockethomes.com/blog/home-buying/how-often-do-contingent-offers-fall-through) - Details possible buyer and seller contingencies, and the risks associated with having too many as a buyer in a competitive market.
- [KhouryFinance: What Does it Mean to Waive an Appraisal Contingency](https://wiki.khouryfinance.com/what-does-it-mean-to-waive-an-appraisal-contingency) - Appraisal Contingencies and everything you need to know about them.

### Disclosures
- [Nolo: Required Disclosures When Selling U.S. Real Estate](https://www.nolo.com/legal-encyclopedia/required-disclosures-selling-real-estate-30027.html) - Explains the basics of disclosures, and what disclosures are required for the seller.
- [QuickenLoans: A Guide To Seller Disclosure Requirements: Forms, States And More](https://www.quickenloans.com/learn/sellers-disclosure) - A comprehensive look at disclosures and state-by-state requirements with documents detailing all the necessary information.


## Escrow and Title
- [Moving: A Simple Guide to Understanding Real Estate Escrow](https://www.moving.com/tips/a-simple-guide-to-understanding-real-estate-escrow/) - A basic overview of what escrow is, what happens during the process, who organizes it, and why it's necessary.
- [Chase: Understanding Earnest Money](https://www.chase.com/personal/mortgage/education/financing-a-home/understanding-earnest-money) - Explains what earnest money deposits are, why they're a common convention, and how to protect your earnest money in case the deal falls through.
- [Forbes: Title Insurance: Is It Required?](https://www.forbes.com/advisor/mortgages/title-insurance/) - Defines what title insurance is, the various types, and what it protects you from.
- [EndPointClosing: 19 Title and Escrow Problems and How to Solve Them](https://www.endpointclosing.com/insights/19-title-and-escrow-problems) - Fairly exhaustive look at all the reasons you and the seller might fall out of escrow and drop the deal. 

### Appraisals
- [Forbes: How Home Appraisals Work](https://www.forbes.com/advisor/mortgages/how-home-appraisals-work/) - Explains the fundamentals of house appraisal. Who organizes it, what occurs, who pays for it and why it's important.
- [TheBalance: How to Deal with a Low Appraisal](https://www.thebalance.com/how-to-deal-with-a-low-appraisal-1798414) - Explains what can happen when an appraisal is below the listed price, as well as steps on how to challenge the appraisal. 
- [Khoury Finance: What is an appraisal gap?](https://wiki.khouryfinance.com/what-is-an-appraisal-gap) - Appraisal gaps and how they can impact your transaction.

### Inspections
- [Forbes: How a Home Inspection Protects You](https://www.forbes.com/advisor/mortgages/home-inspection/) - Outlines all the benefits of a home inspection from the buyer's point-of-view, as well as recommendations on what to do if the inspection uncovers issues with the home.
- [Moving: Who Pays for Repairs After a Home Inspection](https://www.moving.com/tips/who-pays-for-repairs-after-a-home-inspection/) - Explains how contract contingencies will dictate who pays for needed repairs identified by inspection.


## Closing Costs
### Guides
- [Reddit: Buyer's Closing Costs 101 by /u/yes_its_him](https://www.reddit.com/r/personalfinance/comments/6tu91h/buyers_closing_costs_101/) - Covers a lot of ground on what closing costs are, how they work, and how to best shop around and compare.
- [Forbes: Mortgage Closing Costs Explained: How Much You‚Äôll Pay](https://www.forbes.com/advisor/mortgages/closing-costs/) - A great explainer on categories of closing costs, and the general fee amounts (will be different state-to-state).
- [SmartAsset: How to Reduce Closing Costs](https://smartasset.com/mortgage/how-to-reduce-closing-costs) - Tips, tricks and strategies on how to shop around for the lowest closing costs, and how to negotiate for lower fees.


### Calculators
- [SmartAsset: Closing Cost Calculator](https://smartasset.com/mortgage/closing-costs) - A simple calculator that lists out all the possible closing costs, contingent on your purchase price and location.

",15,15,1,0,real-estate,"[awesome, awesome-list, down-payment, first-time-home-buyer, home-buying, home-purchase, mortgage, mortgage-rates, real-estate]",0
Adamouization,FCF-Real-Estate-Monaco-Android-App,,https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App,https://api.github.com/repos/FCF-Real-Estate-Monaco-Android-App/Adamouization, :house_with_garden: Catalogue to browse FCF Real-Estate Monaco properties for sale & renting (2016),"# FCF Real-Estate Android Application [![HitCount](http://hits.dwyl.com/Adamouization/FCF-Real-Estate-Monaco-Android-App.svg)](http://hits.dwyl.com/Adamouization/FCF-Real-Estate-Monaco-Android-App) [![Stars](https://img.shields.io/github/stars/Adamouization/FCF-Real-Estate-Monaco-Android-App)](https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/stargazers) [![Forks](https://img.shields.io/github/forks/Adamouization/FCF-Real-Estate-Monaco-Android-App)](https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/network) [![License](https://img.shields.io/github/license/Adamouization/FCF-Real-Estate-Monaco-Android-App)](https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/LICENSE)

**FCF Real-Estate** is a catalogue to browse *FCF Real-Estate Monaco*'s properties available for sale & renting. 

Works on mobiles and tablets with **Android 4.0.3 and up**.

## Features

* **Single XML feed** used to populate the entire application's data, allowing the data to be quickly changed and not requiring any app-maintenance. At the time of writing this text, the app has been on the Google Play Store for 21 months and the data is being regularly updated through the XML feed.
* **Property sorting** (ascending and descending order) on the *Sales* and *Renting* pages by *date last edited*, *price* and *surface area*.
* **System of favourite properties** for any product for sale/renting, along with a custom system allowing users to select multiple properties through force touch.
* **Search engine** to filter properties by *sales type*, *product type*, *country*, *number of rooms*, *Max/Min price* and *max/Min area*.
* **Offline mode**: The XML feed data is stored in the user's device to optimise browsing speeds throughout the app. Everytime the user opens the app with an internet connection, the stored data will be overwritten by the new data from the latest XML feed.
* **Multiple languages support** for French, English and Italian.
* **HD image gallery**: each product has a carousel display for HD images, including fullscreen mode to go through all the pictures in HD with a pinch to zoom feature.
* **In-app emailing**: direct emailing with FCF Real-Estate, opening the user's default email app and prepolating the email's body with the property the user was viewing, allowing users to set up viewings more quickly with the agency.
* **Google Maps** for the agency's contact page and for each property's location. 

### Screenshots

 Home Screen               |  Products Page            | Product Detail Page       | Product Image Gallery
:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:
<img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/Screenshots%20playstore/screenshots%20anglais/Screenshot_20160726-122430.png"" width=""200"">  | <img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/Screenshots%20playstore/screenshots%20anglais/Screenshot_20160726-122437.png"" width=""200""> |  <img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/Screenshots%20playstore/screenshots%20anglais/Screenshot_20160726-122445.png"" width=""200""> | <img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/Screenshots%20playstore/screenshots%20anglais/Screenshot_20160726-122452.png"" width=""200"">

Search Engine Page         |  Contact Page             | Favourites Selection      | Navigation Menu
:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:
<img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/Screenshots%20playstore/screenshots%20anglais/Screenshot_20160726-122550.png"" width=""200"">  |  <img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/Screenshots%20playstore/screenshots%20anglais/Screenshot_20160726-122610.png"" width=""200""> |  <img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/Screenshots%20playstore/screenshots%20anglais/Screenshot_20160726-122631.png"" width=""200""> | <img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/Screenshots%20playstore/screenshots%20anglais/Screenshot_20160726-122642.png"" width=""200"">

## Download
<a href=""https://bit.ly/2qqexsH""><img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/get-it-on-google-play.png"" width=""150""></a> <img src=""https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/media/qrcode_googleplaystore.png"" width=""150"">

## Third party libraries
* [Android Universal Image Loader](https://github.com/nostra13/Android-Universal-Image-Loader), see [license](https://github.com/nostra13/Android-Universal-Image-Loader/blob/master/LICENSE)

## License 
* see [LICENSE](https://github.com/Adamouization/FCF-Real-Estate-Monaco-Android-App/blob/master/LICENSE) file
* see [MCM Legal Mentions](http://www.montecarlomultimedia.com/avertissement.php) webpage

## Version 
* Version 1.0.0

## Contact
* website: www.adam.jaamour.com
* LinkedIn: [www.linkedin.com/in/adamjaamour](https://www.linkedin.com/in/adamjaamour/)
* twitter: [@Adamouization](https://twitter.com/Adamouization)
",15,15,6,0,real-estate,"[android, android-application, catalog, catalogue, java, real-estate]",0
tumon-art,real_estate,,https://github.com/tumon-art/real_estate,https://api.github.com/repos/real_estate/tumon-art,fully responsive real estate selling/renting site with nextjs and tailwind,"## REAL ESTATE 
# Fully responsive real estate selling/renting site with nextjs and tailwind

![Frame 1 (2)](https://user-images.githubusercontent.com/53380504/219885298-cca544d1-c603-475f-8add-9f42fb29341c.png)

## Property Page
![image](https://github.com/tumon-art/real_estate/assets/53380504/93328ca3-91d4-4178-81e1-7fad924ffce0)
",15,15,1,0,real-estate,"[nextjs, prisma, react, real-estate, real-estate-website, tailwindcss, typescript]",0
chukaibejih,Homemix-Real-Estate-API,,https://github.com/chukaibejih/Homemix-Real-Estate-API,https://api.github.com/repos/Homemix-Real-Estate-API/chukaibejih,"This real estate API allows users to search for properties with information about the property type, address, price, size, number of bedrooms and bathrooms, description, photos, availability, and contact information. The API is built using Python, Django and Django Rest Framework.","
Homemix - A Real Estate API (This project is still a work in progress).
========

Homemix is a RESTful API that enables users to buy and sell properties with ease. It provides endpoints for CRUD operations on real estate listings, making it simple for users to create, read, update, and delete listings.

- URL: https://homemix-api.onrender.com
- Documentaion - https://homemix-api.onrender.com/redoc/


Features Explained
------------------

With Homemix, users can list properties with detailed information, including property type, address, price, size, number of bedrooms and bathrooms, description, photos, availability, and contact information. This makes it easy for potential buyers to search for properties that meet their specific needs and requirements.

Homemix also provides advanced search and filtering capabilities, allowing users to search for properties based on parameters such as location, price, number of bedrooms, and more. The API supports pagination for large datasets, with customizable page size and page number parameters, making it easy to view large amounts of data.

Users can register as either a buyer or seller and are provided with secure authentication and authorization through the use of token-based authentication. This ensures that only authorized users have access to sensitive information and the ability to manipulate data.

Homemix is built with Django Rest Framework (DRF), a powerful and flexible framework for building APIs in Django. This makes it easy to extend and customize the API to meet specific needs, and provides comprehensive documentation and examples to get you started quickly.

With its advanced search and filtering capabilities, secure authentication, and support for multiple media types, Homemix is the ideal solution for anyone looking to buy or sell properties with ease.

In addition to the features mentioned above, Homemix now also includes a referral system. Users can generate a unique referral code and share it with their friends or family. When a new user signs up using the referral code, both the referring user and the new user receive a reward or incentive.

Users can view a list of all the users they have referred, providing transparency and accountability. This encourages existing users to invite others to the platform and helps to grow the user base.

Overall, Homemix offers a comprehensive solution for buying and selling properties, with a user-friendly interface and advanced features to make the process as smooth and efficient as possible.


Why Homemix?
--------

The creation of Homemix is a personal project for me as it has roots in my family's background in the real estate industry. Growing up, my parents ran a traditional real estate business and I have always wanted to create something that would solve some of the problems they faced and make their work easier.

I saw an opportunity to use my skills in software development to build an API that would streamline the process of buying and selling properties. With Homemix, I aim to provide users with an intuitive and user-friendly platform that makes it easy to list properties and search for properties that meet their needs.

The project holds a special place in my heart because it allows me to give back to my parents and the real estate community. I am passionate about creating a clean, well-secured API that will make a positive impact on the industry. I believe that the features and capabilities offered by Homemix will greatly benefit both buyers and sellers, and I am excited to see the impact it will have.

In short, Homemix is a project that brings together my passion for real estate and my skills in software development. I am confident that it will make a positive difference in the industry and I look forward to seeing it grow and evolve over time.


Technical Overview
------------------

The platform uses the following technologies to gather and display the pricing data:

-   Django: A web framework used to handle the back-end and interact with the database.
-   Uses Django RestFramework for building RESTful APIs
-   Implements standard HTTP methods (GET, POST, PUT, DELETE) for interacting with the API.
-   Database: To store the user and property data for quick and easy retrieval.
-   Supports authentication and authorization using Simple JWT. A JSON Web Token authentication plugin for the Django REST Framework.
-   Serialization of data using DRF's serializers
-   Supports pagination of results using DRF's built-in pagination classes
-   Provides documentation of the API using drf-yasg - Yet Another Swagger Generator. 


Security Layers
------------------

- ALLOWED_HOSTS.
- CORS_ALLOWED_ORIGINS.
- Authentication.
- Authorization.
- API throttling - User-based request rate limiting. 
- Implemented request validation and filtering - Serialization of data.


Sending Emails
------------------

This project currently use django.core.mail module and console email backend. You can change it to your prefered email backend.


Installation
------------

Here are the steps to install and set up the Homemix real estate API project locally:

1. Clone the repository: First, you will need to clone the Homemix repository to your local machine. This can be done using the following command in your terminal or command prompt:
    ```bash
    git clone https://github.com/[your-username]/homemix.git
    ```
2. Create a virtual environment: It is recommended to work with a virtual environment to keep the dependencies for this project separate from other projects on your system. To create a virtual environment, run the following command:
    ```bash
    python -m venv homemix-env
    ```
    Activate the virtual environment by running the following command:
    ```bash
    source homemix-env/bin/activate (for Mac or Linux)
    ```

    ```bash
    source homemix-env\Scripts\activate (for Windows)
    ```
3. Install dependencies: Next, you will need to install the dependencies required for the project. These dependencies are listed in the requirements.txt file. To install them, run the following command:
    ```bash
    pip install -r requirements.txt
    ```
4. Set up the database: The Homemix API uses the Django ORM to interact with a database. By default, the project uses PostgreSQL as the database or you could use any database of your choice. Run these commands to make migrations:
     ```bash
    python manage.py makemigrations
    ```
  
    ```bash
    python manage.py migrate
    ```
5. Create a superuser: To access the Django admin interface, you will need to create a superuser. You can do this by running the following command:
    ```bash
    python manage.py createsuperuser
    ```
6. Run the development server: Once the installation and setup are complete, you can start the development server by running the following command:
    ```bash
    python manage.py runserver
    ```
  
  The Homemix API should now be running at http://localhost:8000/. You can access the Django admin interface at http://localhost:8000/admin/.
  
  
Running Unit Tests
------------

After making any changes to the code, it's important to run the unit tests to ensure everything is working correctly. To run the tests, follow these steps:

1. Open a terminal or command prompt in the project directory.
2. Enter the following command to run the tests:

     ```bash
    python manage.py tests
    ```
3. Wait for the tests to complete. If any tests fail, you will see an error message in the terminal.
4. Make sure that all tests are passing before pushing any changes to the codebase.
   
  
Contributing / Reporting issues
------------

Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

License
-----

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

",14,14,1,0,real-estate,"[django, django-rest-framework, real-estate, rest-api]",0
dreed47,redfin,,https://github.com/dreed47/redfin,https://api.github.com/repos/redfin/dreed47,Redfin property estimate Sensor for Home Assistant,"# Redfin

[![GitHub Release][releases-shield]][releases]
[![GitHub Activity][commits-shield]][commits]

[![hacs][hacsbadge]][hacs]
[![maintainer][maintenance-shield]][maintainer]
[![BuyMeCoffee][buymecoffeebadge]][buymecoffee]

<img src=""https://raw.githubusercontent.com/home-assistant/brands/master/custom_integrations/redfin/logo.png"" width=""40%"">

### <span style=""color:red"">_This component requires HA Core version 2021.6.0 or greater!_</span>

This is a _Custom Integration_ for [Home Assistant](https://www.home-assistant.io/). It uses the unofficial [Redfin](https://www.redfin.com) API to get property value estimates.

There currently is support for the Sensor device type within Home Assistant.

## Installation

### HACS installation

This Integration is part of the default HACS store, so go to the HACS page and search for _Redfin_.

### Manual Installation

To manually add Redfin to your installation, create this folder structure in your /config directory:

`custom_components/redfin`.

Then drop the following files into that folder:

```yaml
translations/en.json
__init__.py
config_flow.py
const.py
hacs.json
sensor.py
manifest.json
```

## Configuration

You will need the Redfin property ID for each property you‚Äôd like to track. This information is available from the URL of a property you are interested in. If you‚Äôre the owner of this property, it‚Äôs recommended to claim the listing and update the property information to help the information be as accurate as possible.

For example, given this Redfin URL: https://www.redfin.com/DC/Washington/1745-Q-St-NW-20009/unit-3/home/9860590 the property ID is 9860590.

To enable this sensor, add new Redfin integration component in the Home Assistant UI and follow the prompts to add your properties.

The sensor provides the following attributes:

- amount
- amount_currency
- amount_formatted
- address
- full_address
- redfin_url
- street_view

<!---->

[buymecoffee]: https://www.buymeacoffee.com/dreed47.david
[buymecoffeebadge]: https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg
[commits-shield]: https://img.shields.io/github/commit-activity/y/dreed47/redfin.svg
[commits]: https://github.com/dreed47/redfin/commits/main
[hacs]: https://github.com/custom-components/hacs
[hacsbadge]: https://img.shields.io/badge/HACS-Default-orange.svg
[maintenance-shield]: https://img.shields.io/badge/maintainer-%20%40dreed47-blue.svg
[maintainer]: https://github.com/dreed47
[releases-shield]: https://img.shields.io/github/v/release/dreed47/redfin
[releases]: https://github.com/dreed47/redfin/releases
",13,13,2,4,real-estate,"[home-assistant, homeassistant-components, homeassistant-integration, homeassistant-sensor, real-estate, redfin, sensor]",0
ganprad,rentorbuy,,https://github.com/ganprad/rentorbuy,https://api.github.com/repos/rentorbuy/ganprad,"A Project that uses Zillow research data on Quandl, Prophet for time series forecasting, Altair for vega-lite charts and Folium for an creating interactive map.",,12,12,2,9,real-estate,"[altair, anaconda, chicago, fbprophet, folium, geopy, numpy, openstreetmap, pandas, prophet, quandl, real-estate, time-series, vega-lite, zillow]",0
floschnell,flatcrawl-processors,,https://github.com/floschnell/flatcrawl-processors,https://api.github.com/repos/flatcrawl-processors/floschnell,A set of processors that will instantly inform users via a set of channels (ie. Telegram) of new flats that are found on different rental websites.,"# flatcrawl-processors

This repository is part of my **flatcrawl project**. The processors will receive new flats from the message broker (ie. RabbitMQ). They will then evaluate the flats against the user defined searches and send them notifications on different channels (ie. Telegram), when they have a match.

If you are interested in how the flats end up at the message broker: there's [another repository that contains the different crawlers](https://github.com/floschnell/flatcrawl-crawlers) which will extract the flat information from the different rental portals and then sends them to the message broker's queue.

## The flatcrawl project

The purpose of the project is to **collect flats from different rental sites** and **expose them in a consistent shape**. Eventually it lets users define **custom searches** and provides them with **instant updates on new matching flats**.

**Clarification**: flats are *not* stored on the server. The purpose is not to create a competing portal, but to extend usability and help users find the right flat quickly by receiving updates from several sites without the hassle to setup and maintain different searches.

## Usage

This chapter describes how to use the flatcrawler. Only thing that you will need is the [Telegram App](https://telegram.org/) on either your smartphone, your computer or any other supported device.

### Create a Search

To create a search, you need to get in touch with the FlatCrawl bot. You can search for it and communicate with it like with any other contact in Telegram.
Use the app's search field and look for *FlatcrawlBot*. Once found, click onto it and hit the Start button to begin a conversation.

Right now the bot is capable of a few commands that you can simply type into the conversation window. To start a search, simply type `/search`. Afterwards the bot will ask you some questions and eventually keep looking for flats that match your criteria.

<p align=""center"">
<img alt=""An Example Conversation with the Flat Crawling Bot"" src=""./img/conversation.png"" />
</p>

Once the search is setup, the bot will output an numeric ID. Remember it well. The bot will not start to send flats right away! This is because you might want to be notified within a group, so that all your potential flat mates receive the offers as well. This is very helpful, because all members of the group will then be able to discuss the different flats just as they are popping in.

### Subscribe to a Search

To continuously receive new flats that match your search criteria, first go to the chat or group conversation where you would like to be notified. Then open the chat menu and add a new member. Search and choose the *FlatcrawlBot*.

Then, back in the chat, you just need to enter `/subscribe [ID]`. Of course, you will need to replace [ID] with the ID that the bot provided you with, when you finished the search setup.

That's it, now you will receive all the new flats that get posted on all the different web portals if they only match your search criteria.

## Development

This project consists of two parts:
- **Firebase Realtime Database:** Stores users and their configured searches.
- **Telegram Processor:** Client application that will listen for new events on the queue. As soon as a new flat becomes available it will check all user searches and send out messages whenever matches have been found.

Of those **only the telegram client is under source control**. However, if you setup a firebase account and create an empty database, it will then be filled automatically as soon as you run the crawling application.

### Setup
If you want to run the whole infrastructure yourself, you will need to do the following things:
1) Create a [Firebase account](https://firebase.google.com/) and setup an empty realtime database.
2) [Create a Telegram bot via the BotFather](https://core.telegram.org/bots#creating-a-new-bot).
3) Create a Google API Key for the Directions API
4) Create the `src/config.ts` file and fill it with the information you should have acquired from step 1, 2 and 3:
```typescript
// from step 1
export const DATABASE_KEY = '...';
export const DATABASE_URL = '...';
// from step 2
export const BOT_ID = '...';
export const BOT_TOKEN = '...:...';
// from step 3
export const GOOGLE_API_KEY = '...';
```
5) Finally - for the webhooks to work - you will also need to create a self signed SSL certificate like so:
```bash
openssl req -newkey rsa:2048 -sha256 -nodes -keyout ./certs/private.key -x509 -days 365 -out ./certs/public.pem -subj ""/C=DE/ST=Bavaria/L=Munich/O=/CN=YOURDOMAIN.EXAMPLE""
```
You will need to replace YOURDOMAIN.EXAMPLE with the public domain via that the bot can be found.

### Build
Before you can build the code, you need to install all dependencies:
```
yarn install
```
After that, you can run
```
yarn build
```
which will compile all Typescript files and put them in a folder called `dist/`.

### Run
Once you have completed the setup and build steps, you can run all processors by
```
yarn start
```",12,12,5,0,real-estate,"[bot, crawler, flatcrawl, flats, real-estate, rentals-search, telegram]",0
espocrm,ext-real-estate,espocrm,https://github.com/espocrm/ext-real-estate,https://api.github.com/repos/ext-real-estate/espocrm,Real Estate extension for EspoCRM,"# Real State extension for EspoCRM

[See more](https://www.espocrm.com/extensions/real-estate/) on the website.

## Configuration

Create `config.json` file in the root directory. When reading, this config will be merged with `config-default.json`. You can override default parameters in the created config.

Parameters:

* espocrm.repository - from what repository to fetch EspoCRM;
* espocrm.branch - what branch to fetch (`stable` is set by default); you can specify version number instead (e.g. `5.8.5`);
* database - credentials of the dev database;
* install.siteUrl - site url of the dev instance.


## Config for EspoCRM instance

You can override EspoCRM config. Create `config.php` in the root directory of the repository. This file will be applied after EspoCRM intallation (when building).

Example:

```php
<?php
return [
    'useCacheInDeveloperMode' => true,
];
```

## Building

After building, EspoCRM instance with installed extension will be available at `site` directory. You will be able to access it with credentials:

* Username: admin
* Password: 1

Note: You can build on Linux and Windows OS. Commands are the same.

### Preparation

1. You need to have *node*, *npm*, *composer* installed.
2. Run `npm install`.
3. Create a database. The database name is set in the config file.

### Full EspoCRM instance building

It will download EspoCRM (from the repository specified in the config), then build and install it. Then it will install the extension.

Command:

```
node build --all
```

Note: It will remove a previously installed EspoCRM instance, but keep the database intact.

### Extension package building

Command:

```
node build --extension
```

The package will be created in `build` directory.

Note: The version number is taken from `package.json`.

## Development workflow

1. Do development in `src` dir.
2. Run `node build --copy`.
3. Test changes in EspoCRM instance at `site` dir by opening it in a browser. A URL will look like: `http://localhost/real-estate/site`, depending on how you named your directory.

## Tests

Prepare:

1. `node build --copy`
2. `cd site`
3. `grunt test`

Unit tests:

```
vendor/bin/phpunit --bootstrap=./vendor/autoload.php tests/unit/Espo/Modules/RealEstate
```

Integration tests:

```
vendor/bin/phpunit --bootstrap=./vendor/autoload.php tests/integration/Espo/Modules/RealEstate
```

## Versioning

The version number is stored in `package.json` and `package-lock.json`.

Bumping version:

```
npm version patch
npm version minor
npm version major
```

## Translation

Assuming that you have already built EspoCRM instance.

### Building PO file

1. Change dir: `cd site`
2. Run: `node po en_US --module=RealEstate` (replace `en_US` with a language code you need to translate to)

This will generate PO file in `site/build/` directory. You will need to translate this file.

### Building langauge files from PO

Assuming you have translated PO file in build directory with the same name as when it was generated.

1. Change dir: `cd site`
2. Run: `node lang en_US --module=RealEstate` (replace `en_US` with the target language code)

This will generate language files in `site/build/` directory. You will need to copy these files to `src/files/` directory and commit.

## License

Real Estate extension for EspoCRM is published under the GNU GPLv3 license.
",12,12,6,0,real-estate,"[crm, espocrm, extension, php, real-estate]",0
formysister,solidity-realestate-tokenization,,https://github.com/formysister/solidity-realestate-tokenization,https://api.github.com/repos/solidity-realestate-tokenization/formysister,Solidity Boilerplate Real-Estate Tokenization Smart Contract,"# Solidity Boilerplate Real-Estate Tokenization Smart Contract

This boilerplate smart contract template introduces the core ideas and implementations for real estate tokenization, by letting real-estate investors invest in a portion of the properties and get dividends accordingly to the purchased portion.

It showcases key opportunities that immutable distributed ledgers and Solidity smart contracts offer: 
* transparent & auditable real-estate investments
* tracking equity in real-estate
* getting dividends
* tokenization of equity and trading",11,11,1,0,real-estate,"[blockchain, erc1358, ethereum, real-estate, smart-contract, solidity]",0
ravvis,Real-Estate-Django-Project,,https://github.com/ravvis/Real-Estate-Django-Project,https://api.github.com/repos/Real-Estate-Django-Project/ravvis,A real estate üè† database management dashboard application üìÑ,,10,10,1,5,real-estate,"[dbms, dbms-project, django, hacktoberfest, hacktoberfest2021, javascript, mysql, python, real-estate]",0
aagnone3,zillium,,https://github.com/aagnone3/zillium,https://api.github.com/repos/zillium/aagnone3,Real estate visualization with Zillow + Folium,"# zillium
Real estate visualization with Zillow + Folium

## Prerequisite(s)
- [Docker](https://docs.docker.com/)
- `make build`

## Running
```python
# view options
make help

# run the scripts
make atlanta_heatmap
# or
make price_by_state

# launch a Jupyter notebook
make jup
```

## BYO Data
- Obtain a Zillow Web Services ID (ZSID)
- define this key as `ZILLOW_WSID` in `env`
- set `generate_new = True` in the script/notebook, and customize away
",10,10,1,1,real-estate,"[distribution, geojson, heatmap, real-estate, visualization]",0
bulbinc,tarumae-viewer,bulbinc,https://github.com/bulbinc/tarumae-viewer,https://api.github.com/repos/tarumae-viewer/bulbinc,Fast and lightweight VR engine specialized in the real estate industry.,"![npm](https://img.shields.io/npm/v/tarumae-viewer.svg)

# Tarumae

Tarumae is optimized WebGL engine for showcase application. 
Tarumae-viewer is the web viewer of tarumae engine using WebGL.

# Setting up development environment

```shell
yarn
```

Start development environment:

```shell
yarn start
```

# Build release

```shell
yarn pub
```

All files published as npm package content are located in `dist` folder.

# Use Tarumae-Viewer

## Hello World

```js
import Tarumae from ""tarumae"";
import { Vec3, Color3 } from ""@jingwood/graphics-math"";

// create rendering context
const renderer = new Tarumae.Renderer();

// create scene
const scene = renderer.createScene();

// create a cube object
const cube = new Tarumae.Shapes.Cube();

// add cube into scene
scene.add(cube);

// show the scene (begin rendering) 
scene.show();
```

## Set material

Initialize material object:

```js
cube.mat = {};
```

```js
// color
cube.mat.color = new Color3(1, 0, 0); // red (0 ~ 1)

// glossy (mirror reflection)
cube.mat.glossy = 0.7; // (0 ~ 1)

```

### Set resources via async download

```js

// texture
renderer.createTextureFromURL(""/public/mytex.png"", tex => {
  cube.mat.tex = tex;
});

// normalmap
renderer.createTextureFromURL(""/public/mynormalmap.png"", tex => {
  cube.mat.normalmap = tex;
});
```


",10,10,10,1,real-estate,"[3d, engine, performance, real-estate, realtime, rendering, showcase, showroom, vr, webgl]",0
pirupius,enyumba,,https://github.com/pirupius/enyumba,https://api.github.com/repos/enyumba/pirupius,:house: :family_man_girl_boy: Laravel House Listings Real Estate - This a sample repo that has some functionality needed to create a real estate project in laravel,,10,10,3,36,real-estate,"[laravel, laravel-framework, real-estate]",0
ahmnouira,pillar-landing,,https://github.com/ahmnouira/pillar-landing,https://api.github.com/repos/pillar-landing/ahmnouira,"Pillar is a commercial real estate investment platform designed to facilitate discovery, diligence, execution, and ongoing management of direct deals for institutional CRE investors.","# Pillar 

Pillar is a commercial real estate investment platform designed to facilitate discovery, diligence, execution, and ongoing management of direct deals for institutional CRE investors (e.g. pensions/endowments/family offices/RIAs) and help sponsors efficiently manage capital throughout the lifecycle of an investment.
",10,10,1,1,real-estate,"[investment, nextjs, react, real-estate, real-estate-website, typescript, vercel]",0
dogpackdesign,apn,dogpackdesign,https://github.com/dogpackdesign/apn,https://api.github.com/repos/apn/dogpackdesign,A database for county-specific formats of assessor's parcel numbers (APNs).,,10,10,4,0,real-estate,"[apn, apns, python, real-estate]",0
SonamRinzinGurung,Real-Estate-Rental-and-Tenant-Management-System,,https://github.com/SonamRinzinGurung/Real-Estate-Rental-and-Tenant-Management-System,https://api.github.com/repos/Real-Estate-Rental-and-Tenant-Management-System/SonamRinzinGurung,Property Plus is an online real estate market for residential and commercial rental with tenant management system. Final Year Project.,"# Real Estate Rental and Tenant Management System - Property Plus

Property Plus is a real estate rental and tenant management system. It is a web application that allows two types of users to use the application. The two types of users are the owner and the tenant. The owner can post a property for rent, manage tenants, register rent payment, and create a property contract. The tenant can search and filter properties, view property details, send an email to the owner of the property, and use the built-in chat application for communication between the owner and the tenant.

Live Site - [Property Plus](https://property-plus.netlify.app/)

## Features

- Post a property for rent
- Search and filter properties
- View property details
- Built-in Chat Application for communication between owner and tenant
- Secure JWT authentication using access and refresh tokens
- Send emails between owner and tenant
- Create Property Contract
- Manage tenants
- Register Rent Payment

## Configuration and Installation Instructions

### Prerequisites

- [Node.js](https://nodejs.org/en/download/)
- [React.js](https://facebook.github.io/react/)
- [npm](https://www.npmjs.com/)
- [MongoDB](https://www.mongodb.com/)
- [Cloudinary](https://cloudinary.com/)
- [Ethereal Email](https://ethereal.email/)

1. Clone the repository:

```bash
$ git clone https://github.com/SonamRinzinGurung/Real-Estate-Rental-and-Tenant-Management-System.git
```

2. Install the required packages for the backend:

```bash
$ cd server
$ npm install
```

3. Install the required packages for the frontend:

```bash
$ cd client
$ npm install
```

4. Configure the environment variables:

```bash
$ cd server

- create a .env file and add the following variables:
- generate secret keys for jwt tokens using online tools

MONGO_URI= <your_mongo_uri>
ACCESS_TOKEN_SECRET_OWNER= <your_access_token_secret_owner>
ACCESS_TOKEN_SECRET_TENANT= <your_access_token_secret_tenant>
REFRESH_TOKEN_SECRET_OWNER= <your_refresh_token_secret_owner>
REFRESH_TOKEN_SECRET_TENANT= <your_refresh_token_secret_tenant>
ACCESS_LIFETIME=15m
REFRESH_LIFETIME=7d
CLOUDINARY_API_KEY= <your_cloudinary_api_key>
CLOUDINARY_API_SECRET= <your_cloudinary_api_secret>
RESET_PASSWORD_KEY= <your_reset_password_key>
EMAIL_VERIFICATION_KEY= <your_email_verification_key>
CLIENT_URL=http://localhost:3000
EMAIL_HOST=smtp.ethereal.email
EMAIL_PORT=587
EMAIL_USER= <your_ethereal_email_user>
EMAIL_PASS= <your_ethereal_email_pass>
```

5. Run the application:

```bash
$ cd server
$ npm run dev
```

## Author

[Sonam Rinzin Gurung](https://github.com/SonamRinzinGurung)

## Repository

[Property Plus](https://github.com/SonamRinzinGurung/Real-Estate-Rental-and-Tenant-Management-System)
",10,10,1,0,real-estate,"[express, mongodb, nodejs, reactjs, real-estate]",0
Guilherme-B,manifold,,https://github.com/Guilherme-B/manifold,https://api.github.com/repos/manifold/Guilherme-B,"Manifold is a plug-and-play end-to-end real estate asset tracker, from web scraping to ETL (data warehouse) using Python, Go, Apache Airflow/Spark, AWS EMR/Redshift/S3","# Project Manifold
## Overview

Manifold is a plug-and-play end-to-end real estate asset tracker. In other words, it encompasses the entire process of tracking real estate listings in a variety of sources (e.g. ERA, REMAX), from website scraping to the ETL process, culminating in a Data Warehouse (Kimball). Typically, Real Estate market studies are expensive or performed by external platforms. Manifold's goal is to provide everyone with the capability to track their local Real Estate market with little effort, and virtually no expenses.

The project is built on top of different languages and platforms:
* Scrapers
  * [GoLang] - Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. Go is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency making it a performant candidate for web scraping
  * [Python] (deprecated)
* ETL
  *  [Apache Airflow] - Apache Airflow is an open-source workflow management platform
  *  [Apache Spark] - Apache Spark is an open-source unified analytics engine for large-scale data processing
  *  [AWS EMR] - Amazon Elastic MapReduce (EMR) is a tool for big data processing and analysis on Apache Spark, Apache Hive, Apache HBase, Apache Flink, Apache Hudi, and Presto
  *  [AWS Redshift] - Amazon Redshift is a data warehouse product that forms part of the larger cloud-computing platform Amazon Web Services
  *  [AWS S3] - Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance
  


## Features

- Fast web scrapers ([GoLang Colly])
- Scalable ETL ([Apache Spark], [AWS EMR], [AWS S3], [AWS Redshift])
- Pre-built ETL DAG ([Apache Airflow])
- Backfill - only the resources for the current timestep are consumed (*default* weekly)
- Extensible
- Cheap - resources are allocated and deallocated on a need basis

## Structure

The project is divided into two main categories: web scrapers (crawlers) and ETL resources.

| Folder | Category | Description |
| ------ | ------ |  ------ |
| crawler | Crawlers | Go and Python (deprecated) web scrapers |
| dags | ETL | Apache Airflow DAGs |
| plugins | ETL | Apache Airflow extensions (Operators, Sensors, utilities) |
| scripts | ETL | Python and Bash scripts to be stored and executed by third parties (Apache Spark, AWS EMR) |
| images | miscellaneous | Documentation support images |


## ETL Process

The ETL process consists of five interlinked and linear steps:
1. Web scraping ([GoLang] by default)
2. Intermmediate layer - source consumption and staging preparation in Parquet format ([Apache Spark], [AWS EMR], [AWS S3])
3. Staging layer- Parquet to AWS Redshift ([AWS Redshift], [AWS S3])
4. Presentation layer - presentation layer creation with Slowly Changing Dimensions (type 2)

Note: The scrapers were not included in the DAG given different users will aim at executing them in different manners (locally, docker, Kubernetes) hence, a dummy operator replaces the scrapers by default.

![DAG](https://github.com/Guilherme-B/manifold/blob/main/images/dag/graph.PNG)

### Data Model

The data model is comprised of four dimensions and one fact table:

| Object Name| Object Type| SCD Type | Description |
| ------ | ------ |  ------ |  ------ |
| dim_asset| Dimension| SCD2 | The unique asset dimension |
| dim_broker | Dimension| SCD2 | The unique broker dimension |
| dim_geography | Dimension| SCD2 | The unique grography (country, district, county, parish) dimension|
| dim_date_view | Dimension| SCD2 | The unique date dimension (note: the object is a view which might need reparametrization) |
| fact_stock| Fact| None | Holds the stock (assets) present at a given time step |

![DAG](https://github.com/Guilherme-B/manifold/blob/main/images/data_model.PNG)

Note: for future work, it's worth considering adding three additional fact tables:
* fact_new_stock - represents assets not present in the previous date's stock
* fact_deleted_stock - represents assets no longer present relative to the previous date's stock
* fact_price_oscillations - represents assets that suffered a price oscillation relative to the previous date's stock

### Intermmediate layer
![EMR Create](https://github.com/Guilherme-B/manifold/blob/main/images/dag/emr_create.png)

Launches an EMR (*default* cluster) instance, which installs the required packages using [scripts/bootstrap_install_python_modules.sh], and runs the [Apache Spark] ETL process via [scripts/el_to_parquet.py]. 

[scripts/el_to_parquet.py] in in charge of the following tasks:
- locating the S3 bucket for the referenced timestep (*default* weekly)
- consuming the identified JSON sources
- cleanup and standardization
- staging layer creation (Parquet files)
- save Parquet files to an S3 bucket

### Staging layer

The staging layer is in charge of consuming the [AWS S3] Parquet files into [AWS Redshift]. The process is handled by the S3 to Redshift Operator.

The DAG is then comprised of two steps:

1- Assert the existence of the proper schemas, and create them if not present
![Schema Create](https://github.com/Guilherme-B/manifold/blob/main/images/dag/staging_schema.png)
2- Copy the Parquet files into the appropriate dimensional object
![Staging Copy](https://github.com/Guilherme-B/manifold/blob/main/images/dag/staging_tables.png)

### Presentation layer

The presentation or consumption layer holds the final updated dimensional model. Roughly speaking, the layer's responsibilities are:
1- Calculate dimension Deltas
2- Upsert dimension data according to the computed Delta
![Presentation Dimension](https://github.com/Guilherme-B/manifold/blob/main/images/dag/presentation_dimensions.png)
3- Append to the fact tables
![Presentation Fact](https://github.com/Guilherme-B/manifold/blob/main/images/dag/presentation_facts.png)

Operations 1 and 2 are the responsibility of the [Dimension Operator], whereas the Fact appending is handled via Postgres Operator.

## Custom Operators

Two operators were introduced to facilitate and replicate Airflow functions:
- [Dimension Operator]
- [S3 to Redshift Operator]

### Dimension Operator

The [Dimension Operator] computes the Deltas between a *base_table* and *target_table*, by comparing the *(SHA256) hash* between the two tables (typically, staging vs presentation), using *match_columns* as the business keys, and updates the *target_table* by implementing a Slowly Changing Dimension of type 2.

| Argument | Type | Description |
| ------ | ------ |  ------ |
| postgres_conn_id | str | The Airflow Redshift connection ID |
| target_table | str | The table to be updated (typically, presentation) |
| base_table | str | The base table to use as current value (typically, staging) |
| match_columns | List[str] | The list of columns representing business keys |
| database_name | str | The target database (*default dev*) |

### S3 to Redshift Operator

The [S3 to Redshift Operator] is responsible for taking a set of Parquet files stored in an [AWS S3] bucket and pushing them to the defined [AWS Redshift] cluster.


| Argument | Type | Description |
| ------ | ------ |  ------ |
| redshift_conn_id | str | The Airflow Redshift connection ID |
| redshift_credentials_id | str | The Airflow connection containing the Redshift credentials |
| s3_path | str | The base [AWS S3] URL holding the Parquet files |
| s3_bucket_template | str | The template S3 Bucket template (for backfilling, *default ""/{year}/{month}/{week}/""* |
| destination_name | str | The [AWS Redshift] destination table name |
| source_name | str | The Parquet file name |
| role_name | str | The [AWS Redshift] role name |
| region_name | str | The [AWS Redshift] cluster region |

### Data Quality - Count Operator

The [Data Quality - Count Operator] implements a basic data quality layer, asserting whether or not a table contains records.

| Argument | Type | Description |
| ------ | ------ |  ------ |
| postgres_conn_id | str | The Airflow Postgres connection ID |
| table_name | str | The Postgres/Redshift table name |

### Data Quality - Dimension Operator

The [Data Quality - Dimension Operator] is responsible for checking if a dimension contains multiple active records, in other words, if the Slowly Changing Dimension type 2 failed to process appropriately.

| Argument | Type | Description |
| ------ | ------ |  ------ |
| postgres_conn_id | str | The Airflow Postgres connection ID |
| table_name | str | The Postgres/Redshift table name |
| identification_columns | List[str] | The unique columns (e.g. contract_number for dim_asset, broker_name for dim_broker) to serve as business keys |

## Sources

Manifold comes with two out-of-the-box scrapers: one developed in GoLang, two developed in Python (deprecated). However, given the small number of local listings per website (around 10.000), Manifold has been tested on 50 million records of weekly data, in addition to the weekly scraped listings. 

External data sources:
* [Argentina Data]
* [Colombia Data]
* [Ecuador Data]
* [Uruguay Data]
* [Peru Data]
* [Brazil Data]
* [Spain (Madrid) Data]
* [Mexico Data]

The data was then aggregated, and a 10-week weekly evolution was simulated: in each week, a sample of 80% of the dataset was retrieved, simulating new and removed assets; in addition to price fluctuations.

The final dataset contained around 50GB of data.

## Installation

Manifold is a plug-and-play project, which is fully working from the moment [Apache Airflow] is started. Nonetheless, there are configurations that need to be set and connections to be created in order to drive the DAG and make sure it's pointing in the right direction, with the appropriate permissions. 

### Configuration
#### Variables
| Variable Name | Description |
| ------ |  ------ |
| manifold_s3_path |  The [AWS S3] base bucket name |
| manifold_s3_template |  The template S3 Bucket template (for backfilling, *default ""/{year}/{month}/{week}/""* |

#### Connections
| Connection Name | Type | Description | Extra |
| ------ | ------ |  ------ |   ------ |
| aws_credentials | Amazon Web Services | The AWS  ([AWS S3]) login (Access Key) and password (Secret Access Key)  | {""region_name"": ""your_region_name""} | 
| emr_credentials | Amazon Web Services | The [AWS EMR] login (Access Key) and password (Secret Access Key) | |
| redshift_conn | Postgres | The [AWS Redshift] connection details, host, schema, login, password, port | |

### Docker

Apache Spark can be started by using docker-compose on the provided image, which takes care of the entire process including the first-time setup:
```sh
cd manifold
docker-compose up -d
```

## License

GNU General Public License v3.0


[//]: # (Reference links)

   [GoLang]: <https://golang.org/>
   [Python]: <https://www.python.org/>
   [Apache Airflow]: <https://airflow.apache.org/>
   [Apache Spark]: <https://spark.apache.org/>
   [AWS EMR]: <https://aws.amazon.com/emr/>
   [AWS Redshift]: <https://aws.amazon.com/redshift/>
   [AWS S3]: <https://aws.amazon.com/s3/>
   [GoLang Colly]: <http://go-colly.org/>
   [crawlers]: <https://github.com/Guilherme-B/manifold/tree/main/crawler>
   [scripts/bootstrap_install_python_modules.sh]: <https://github.com/Guilherme-B/manifold/blob/main/scripts/bootstrap_install_python_modules.sh>
   [scripts/el_to_parquet.py]: <https://github.com/Guilherme-B/manifold/blob/main/scripts/el_to_parquet.py>
   [S3 to Redshift Operator]: <https://github.com/Guilherme-B/manifold/blob/main/plugins/operators/s3toredshift_operator.py>
   [Dimension Operator]: <https://github.com/Guilherme-B/manifold/blob/main/plugins/operators/dimension_operator.py>
   [Data Quality - Count Operator]: <https://github.com/Guilherme-B/manifold/blob/main/plugins/operators/data_quality_count_operator.py>
   [Data Quality - Dimension Operator]: <https://github.com/Guilherme-B/manifold/blob/main/plugins/operators/data_quality_dimension_operator.py>
   
   [Argentina Data]: <https://storage.googleapis.com/properati-data-public/ar_properties.csv.gz>
   [Colombia Data]: <https://storage.googleapis.com/properati-data-public/co_properties.csv.gz>
   [Ecuador Data]: <https://storage.googleapis.com/properati-data-public/ec_properties.csv.gz>
   [Uruguay Data]: <https://storage.googleapis.com/properati-data-public/uy_properties.csv.gz>
   [Peru Data]: <https://storage.googleapis.com/properati-data-public/pe_properties.csv.gz>
   [Brazil Data]: <https://data.world/properati/real-estate-listings-brazil>
   [Spain (Madrid) Data]: <https://www.kaggle.com/mirbektoktogaraev/madrid-real-estate-market>
   [Mexico Data]: <https://data.world/properati/real-estate-listings-mexico>
",10,10,3,0,real-estate,"[airflow, golang, parquet, python, real-estate, redshift, s3, scraping, spark]",0
akash-1536,Revolt-Platform,,https://github.com/akash-1536/Revolt-Platform,https://api.github.com/repos/Revolt-Platform/akash-1536,REVOLT‚ö°Platform (Real Estate ~ Virtual Ownership ~ Land Transfer)  Reinventing and revolutionizing the real estate space w blockchain üåç ,"REVOLT‚ö°Platform (Real Estate ~ Virtual Ownership ~ Land Transfer)

Reinventing and revolutionizing the real estate space w blockchain üåç

Virtual Ownership

- Buy, sell, rent, and lease real estate land on the blockchain
- Fractional ownership of land (Dividing the land into fractions and enabling trading)
- Blockchain facilitates secure data sharing, streamlines rental collections and payments to property owners

Land Transfer

Land titles continue to rely on paper documentation, vulnerable to loss, fraud, and mismanagement

- Blockchain replaces outdated paper deeds with true digital assets
- Tracks changes on an immutable ledger that acts as a secure shared source of truth for documents between multiple parties and organizations.
- Ethereum enables transaction and property ownership records to be more accessible
- Facilitating market transactions, increasing investor confidence, unlocking access to finance, and promoting economic and social community development
",10,10,3,0,real-estate,"[blockchain-technology, real-estate, solidity, web3]",0
diabolical-ninja,smart-property-search,,https://github.com/diabolical-ninja/smart-property-search,https://api.github.com/repos/smart-property-search/diabolical-ninja,Buyer focused property search ,"# Smart Property Search

![Linting](https://github.com/diabolical-ninja/smart-property-search/workflows/Linting/badge.svg) ![Deploy](https://github.com/diabolical-ninja/smart-property-search/workflows/Deploy%20Feature%20Branch/badge.svg) [![codecov](https://codecov.io/gh/diabolical-ninja/smart-property-search/branch/master/graph/badge.svg)](https://codecov.io/gh/diabolical-ninja/smart-property-search)



Buyer focused property search, with results tailored to your needs rather than the agents.

## How to Build & Deploy the API

Assumes you have:

- An AWS Account including access & secret keys
- Domain client ID & secret, available from [Domain](https://developer.domain.com.au/docs/introduction) 
- A Google maps API key
- WalkScore API key, available from [Walk Score](https://www.walkscore.com/professional/walk-score-apis.php)

1.  Build Domain client library

```sh
sh build_domain_client_library.sh
```

2.  Copy contents to `src`

```sh
mv domainClient/domainClient src/domainClient
```

3.  Install & configure serverless via the instructions on their [website](https://www.serverless.com/framework/docs/getting-started/)

4. Populate `serverless.yml` with all required keys


5.  To deploy:

```sh
sls deploy
```


6.  Once done, teardown the infrastructure using:

```sh
sls remove
```

## Using the API

An API will now be available that you can query with different search parameters. 

To query the API make a `POST` request using your favourite client & include a `JSON` body with your search & filter criteria. The key items to include are:

-   `Domain` [residential search](https://developer.domain.com.au/docs/latest/apis/pkg_agents_listings/references/listings_detailedresidentialsearch)
-   `Filters` are (optional) additional parameters to filter the results


Currently the supported filters are:
* `travelTime`
    - A desired destination & the maximum allowable public transport time to get there
* `features`
    - List of features the property must have:
        - AirConditioning
        - Heating
        - Outside
        - Dishwasher
    - Also see `src/filter_parameters.yml`
* `nbn`
    - List of desired NBN types from [NBN technologies](https://www.nbnco.com.au/learn/network-technology)
* `walkscore`
    - Minimum allowable walkscore value, as defined by [Walk Score](https://www.walkscore.com/)


Full deatils or requests & the acceptable parameters are available in `search_schema.json`


A request will look like:

```json
{
    ""domain"":{
        // as per domain docs
    },
    ""filters"":{
        ""travelTime"": {
            ""destinationAddress"": ""<target destination>"",
            ""maxTravelTime"": 10 //minutes
        },
        ""features"":[""<keys from feature_parameters.yml>"", ],
        ""nbn"": [""<list of nbn types>""],
        ""walkscore"": <minimum allowable walkscore>
    }
}
```

Eg:

```json
{
    ""domain"": {
        ""listingType"": ""Sale"",
        ""propertyTypes"": [""Penthouse"",""ApartmentUnitFlat""],
        ""minBedrooms"": 4,
        ""minBathrooms"": 3,
        ""minPrice"": 4500000,
        ""locations"": [{
            ""state"": ""VIC"",
            ""postcode"": ""3000""
        }
        ]
    },
    ""filters"": {
       ""travelTime"": {
            ""destinationAddress"": ""Spring St, East Melbourne VIC 3002"",
            ""maxTravelTime"": 20 //minutes
        }
    },
    ""features"":[""AirConditioning"", ""Outside""],
    ""nbn"": [""FTTP"", ""FTTB"", ""FTTC""],
    ""walkscore"": 75
}
```
",9,9,3,7,real-estate,"[property, real-estate]",0
MarekProkop,sreality,,https://github.com/MarekProkop/sreality,https://api.github.com/repos/sreality/MarekProkop,Functions in R for downloading real estate data from sreality.cz.,"
<!-- README.md is generated from README.Rmd. Please edit that file -->

# sreality

<!-- badges: start -->

<!-- badges: end -->

With the functions from this repository you can create your personal
database of property offers from the Sreality website, update their
status and analyse their history. You need some knowledge of R to do
this.

## How to use

1.  Clone this repo, or create a new project in RStudio and copy the R
    folder.
2.  Create subfolders `data` and `images`.

### Load packages and functions

``` r
library(tidyverse)
library(httr)
library(jsonlite)

source(""R/sreality-funcs.R"")
```

### Add property

Adds the property with the given URL to the `data/my_properties.rds`
file. If you specify the `img_dir` parameter, a small preview image is
downloaded and saved in this folder under the name *id\_property.jpg*

If a property with the given id already exists in the file, an error
will occur.

``` r
add_property(
  data_path = ""data/my_properties.rds"",
  img_dir = ""images/"",
  url = ""https://www.sreality.cz/detail/prodej/dum/rodinny/melnik-melnik-namesti-miru/3960968780""
)
#> Warning in add_property(data_path = ""data/my_properties.rds"", img_dir =
#> ""images/"", : File data/my_properties.rdsdoesn't exist. Creating a new one.
#> # A tibble: 1 √ó 8
#>   id         status checked             location  name   price description url  
#>   <chr>      <chr>  <dttm>              <chr>     <chr>  <int> <chr>       <chr>
#> 1 3960968780 init   2022-07-07 09:43:11 n√°mƒõst√≠ ‚Ä¶ Prod‚Ä¶ 1.30e7 Rodinn√Ω d≈Ø‚Ä¶ http‚Ä¶
```

Adds multiple properties to the `data/my_properties.rds` file. If any
property id already exists in the file, an error will occur.

``` r
add_property(
  data_path = ""data/my_properties.rds"",
  img_dir = ""images/"",
  url = c(
    ""https://www.sreality.cz/detail/prodej/dum/rodinny/vernerice-rychnov-/2752723036"",
    ""https://www.sreality.cz/detail/prodej/dum/rodinny/tabor-tabor-provaznicka/3936430428""
  )
)
#> # A tibble: 2 √ó 8
#>   id         status checked             location  name   price description url  
#>   <chr>      <chr>  <dttm>              <chr>     <chr>  <int> <chr>       <chr>
#> 1 2752723036 init   2022-07-07 09:43:11 Verne≈ôic‚Ä¶ Prod‚Ä¶ 5.79e6 Rodinn√Ω d≈Ø‚Ä¶ http‚Ä¶
#> 2 3936430428 init   2022-07-07 09:43:12 Provazni‚Ä¶ Prod‚Ä¶ 9.7 e6 Rodinn√Ω d≈Ø‚Ä¶ http‚Ä¶
```

### Update properties

Fetches all properties in the `data/my_properties.rds` file from
Sreality and appends their current data to the end of the file.

``` r
update_properties(rds_path = ""data/my_properties.rds"")
```

### List archived data

#### Full content of the archive

``` r
read_rds(""data/my_properties.rds"")
#> # A tibble: 6 √ó 8
#>   id         status checked             location  name   price description url  
#>   <chr>      <chr>  <dttm>              <chr>     <chr>  <dbl> <chr>       <chr>
#> 1 3960968780 init   2022-07-07 09:43:11 n√°mƒõst√≠ ‚Ä¶ Prod‚Ä¶ 1.30e7 Rodinn√Ω d≈Ø‚Ä¶ http‚Ä¶
#> 2 2752723036 init   2022-07-07 09:43:11 Verne≈ôic‚Ä¶ Prod‚Ä¶ 5.79e6 Rodinn√Ω d≈Ø‚Ä¶ http‚Ä¶
#> 3 3936430428 init   2022-07-07 09:43:12 Provazni‚Ä¶ Prod‚Ä¶ 9.7 e6 Rodinn√Ω d≈Ø‚Ä¶ http‚Ä¶
#> 4 3960968780 live   2022-07-07 09:43:12 n√°mƒõst√≠ ‚Ä¶ Prod‚Ä¶ 1.30e7 Rodinn√Ω d≈Ø‚Ä¶ <NA> 
#> 5 2752723036 live   2022-07-07 09:43:12 Verne≈ôic‚Ä¶ Prod‚Ä¶ 5.79e6 Rodinn√Ω d≈Ø‚Ä¶ <NA> 
#> 6 3936430428 live   2022-07-07 09:43:13 Provazni‚Ä¶ Prod‚Ä¶ 9.7 e6 Rodinn√Ω d≈Ø‚Ä¶ <NA>
```

#### Current state of properties

Displays the current state of all properties in the
`data/my_properties.rds` file.

``` r
list_properies(""data/my_properties.rds"")
#> # A tibble: 3 √ó 11
#>   id         status checked_0           checked_last        dur   location name 
#>   <chr>      <chr>  <dttm>              <dttm>              <drt> <chr>    <chr>
#> 1 2752723036 live   2022-07-07 09:43:11 2022-07-07 09:43:12 1.18‚Ä¶ Verne≈ôi‚Ä¶ Prod‚Ä¶
#> 2 3936430428 live   2022-07-07 09:43:12 2022-07-07 09:43:13 1.07‚Ä¶ Provazn‚Ä¶ Prod‚Ä¶
#> 3 3960968780 live   2022-07-07 09:43:11 2022-07-07 09:43:12 1.37‚Ä¶ n√°mƒõst√≠‚Ä¶ Prod‚Ä¶
#> # ‚Ä¶ with 4 more variables: price_0 <dbl>, price_last <dbl>, description <chr>,
#> #   url <chr>
```

You can filter the previous dataframe by status (only valid: `status
%in% c(""init"", ""live"")` or only removed: `status == ""gone""`), by price
change (`price_last != price_0`), etc.

#### List of properties using the {gt} package

``` r
list_properies(""data/my_properties.rds"") |> 
  mutate(
    name = paste0(""["", name, ""]("", url, "")""),
    name = map(name, gt::md)
  ) |> 
  select(name, location, price_last) |> 
  gt::gt() |> 
  gt::cols_label(price_last = ""price"") |> 
  gt::fmt_number(price_last, decimals = 0, suffixing = ""K"") |> 
  gt::as_raw_html()
```

<table style=""font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3;"">
  
  <thead style=""border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3;"">
    <tr>
      <th style=""color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; text-align: center;"" rowspan=""1"" colspan=""1"">name</th>
      <th style=""color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; text-align: left;"" rowspan=""1"" colspan=""1"">location</th>
      <th style=""color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; text-align: right; font-variant-numeric: tabular-nums;"" rowspan=""1"" colspan=""1"">price</th>
    </tr>
  </thead>
  <tbody style=""border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3;"">
    <tr><td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: center;""><a href=""https://www.sreality.cz/detail/prodej/dum/rodinny/vernerice-rychnov-/2752723036"">Prodej rodinn√©ho domu 208 m¬≤, pozemek 2 069 m¬≤</a></td>
<td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;"">Verne≈ôice - Rychnov, okres Dƒõƒç√≠n</td>
<td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: right; font-variant-numeric: tabular-nums;"">5,790K</td></tr>
    <tr><td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: center;""><a href=""https://www.sreality.cz/detail/prodej/dum/rodinny/tabor-tabor-provaznicka/3936430428"">Prodej rodinn√©ho domu 231 m¬≤, pozemek 107 m¬≤</a></td>
<td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;"">Provaznick√°, T√°bor</td>
<td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: right; font-variant-numeric: tabular-nums;"">9,700K</td></tr>
    <tr><td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: center;""><a href=""https://www.sreality.cz/detail/prodej/dum/rodinny/melnik-melnik-namesti-miru/3960968780"">Prodej rodinn√©ho domu 150 m¬≤, pozemek 250 m¬≤</a></td>
<td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;"">n√°mƒõst√≠ M√≠ru, Mƒõln√≠k</td>
<td style=""padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: right; font-variant-numeric: tabular-nums;"">12,990K</td></tr>
  </tbody>
  
  
</table>

You can also add images to the listing.

``` r
list_properies(""data/my_properties.rds"") |> 
  mutate(
    title = paste0(location, ""\n\n"", replace_na(name, """")),
    title = map(title, gt::md)
  ) |> 
  select(id, title, price_last) |>
  gt::gt() |> 
  gt::cols_label(price_last = ""price"") |> 
  gt::fmt_number(price_last, decimals = 0, suffixing = ""K"") |> 
  gt::text_transform(
    locations = gt::cells_body(columns = id),
    fn = function(x) {
      map_chr(x, function(x) {
        img_path <- here::here(""images"", paste0(x, "".jpg""))
        if (file.exists(img_path)) {
          gt::local_image(filename = img_path, height = 166)
        } else {
          x
        }
      })
    }
  )
```

![listing preview](scrrenshot-01.png)

## To-do

Maybe I‚Äôll add those features some day:

  - Downloading preview images of the property.
  - Shiny app to make it more user-friendly.
",9,9,2,0,real-estate,"[czech, r, real-estate]",0
cjchika,realtor,,https://github.com/cjchika/realtor,https://api.github.com/repos/realtor/cjchika,"Real Estate Website Built With ReactJs and Tailwindcss: Features - Property Listing, Property Details, Testimonial, FAQs, Blogs | Populates data from REST API","https://user-images.githubusercontent.com/74545192/195051897-365da939-a071-450c-a084-80bb9f207644.mp4

## Macho Realtor

### Real Estate app that populates data from an API endpoints, Bayut API, fetches the real estate UAE data, and NewscatcherAPI for real time news headlines across the world,  Redux Toolkit's RTK Query was used to communicate to the multiple endpoints and state management, I made used of Firebase Auth REST API for authentication.

### Features
* Landing Page
* Property Listing Page
* Property Details Page
* Agency Page
* Blog Page
* Signup and Login Pages
* User Authentication
* Search Query
* Highly responsive and aesthetic design
* FAQs

### Dependencies/Tools
* React
* Redux Toolkit
* React Router 5
* Tailwindcss
* Firebase
* React Icons

### APIs
* Firebase Auth REST API
* Bayut API  [Real Estate]
* Newscatcher API [Global News]

### Macho Realtor is hosted on Netlify

### [Live View](https://macho-realtor.netlify.app/home) 


[![Netlify Status](https://api.netlify.com/api/v1/badges/8c2d58f9-aa02-4e52-99c5-9658f5946663/deploy-status)](https://app.netlify.com/sites/macho-realtor/deploys)
",9,9,1,0,real-estate,"[api, bayut-api, newscatcher, properties, rapidapi, react, reactjs, real-estate, realtor, redux, redux-toolkit, responsive, rest-api, tailwindcss]",0
nimadorostkar,RealEstate,,https://github.com/nimadorostkar/RealEstate,https://api.github.com/repos/RealEstate/nimadorostkar,"A simple, real estate reponsive website listings built with django. A full featured real estate website. that let user find properties in the preferred cities or neighborhood and also let realtor list their properties","
# RealEstate
",9,9,2,0,real-estate,"[django, python, real-estate]",0
amadeobrands,ChainEstate_Wanxiang_Blockchain_Shanghai,,https://github.com/amadeobrands/ChainEstate_Wanxiang_Blockchain_Shanghai,https://api.github.com/repos/ChainEstate_Wanxiang_Blockchain_Shanghai/amadeobrands,A model to tokenize office space to create a more liquid real estate market.,"<h1>Wanxiang Blockchain Hackathon 2018</h1>

<img src=""https://raw.githubusercontent.com/amadeobrands/ChainEstate/master/art-work/chain-estate.png"">

<Strong>Project Name:</strong>
Chain Estate

<Strong>Team nr:</strong>
17

<Strong>Tags:</strong>
Real Estate
Office
Leasing Contract
Smart Contract
Blockchain

<Strong>Concept:</Strong>
During the Wanxiang Blockchain Hackathon in Shanghai, we made a model to tokenize office space. Instead of expansive and insecure Agents selling office space we have build an smart contracts with embedded KYC and whitelist that will enable a more liquid real estate market. Each project/building will have it's own ERC20 token and then each floor will have its own ERC721 to separate ownership, better control of open space and easy budget management.

<a href=""https://github.com/amadeobrands/ChainEstate/blob/master/art-work/Chain_Estate_v1.pdf"" target=""_blank""><h4>Check out some nice art-work :)</h4></a>

<a href=""http://chainestate.maxlava.com/"" target=""_blank""><h3>Check out our website for more information</h3></a>


",9,9,4,2,real-estate,"[blockchain, ethereum, office-leasing, real-estate, smart-contract]",0
Elmehdi9,web-scraping-projects,,https://github.com/Elmehdi9/web-scraping-projects,https://api.github.com/repos/web-scraping-projects/Elmehdi9,This repository provides various web scraping projects in Jupyter notebooks for both learning and data-related workshopes,"#  Web Scraping Projects With Python

This repository contains a collection of tools, scripts and projects that focus on analysis and visualisation of football data.

##  Contents
<details open=""open"">
<summary>Table of Contents</summary>
<ol>

<li><a href=""#about-the-project""> About the project</a></li>
<li><a href=""#prerequisites"">  Prerequisites</a></li>
<li><a href=""#folder-structure"">  Folder Structure</a></li>
<li> Projects
<ul>
<li>Scraping salaries data from <a href='https://www.salary.com/'>Salary.com</a></li>
<li>Scraping car's data and crawling to specific URLs</li>
<li>Scraping of transfers data</li>
<li>Scraping different types of football data from <a href='https://understat.com/'>Understat.com</a></li>
<li>Scraping movie data from <a href=''>Cineb.com</a></li>
<li>Scraping Real-estate data and crawling to Appartement pages</li>
<li>Scraping amazons data by keywords search</li>
</ul>
</ol>
</details>

<br>


## About the Project
This repository has a collection of web scraping projects. I attempted to scrape many websites in order to cope with various structures and obtain various sorts of data (cars, salary, sports...). Some of these projects feature crawling techniques as well as exploratory data visualization. I'd also like to point out that the web isn't constant, thus the method I approach a specific website scraping now may not be appropriate in the future.

I recommend starting with the notebook that scrapes movie data from <a href=''>Cineb.com</a> since it provides an understanding of how the scraping is done.


## Prerequisites
<br>

[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/) <br><br>
[![Made withJupyter](https://img.shields.io/badge/Made%20with-Jupyter-orange?style=for-the-badge&logo=Jupyter)](https://jupyter.org/try) 

<br>


The following open source packages are used in this project:

* Pandas

* Matplotlib
* bs4
* requests
* csv
* json



## Folder structure

    |-- web-scraping-projects
        |-- README.md
        |-- data-directory
        |   |-- books_data.csv
        |   |-- cars.csv
        |   |-- movies.csv
        |   |-- real_estate.csv
        |   |-- salary_data.csv
        |   |-- transfers_data.csv
        |-- notebooks
            |-- Amazon.ipynb
            |-- Carvago.ipynb
            |-- Cineb_movies.ipynb
            |-- Real estate.ipynb
            |-- Salaries.ipynb
            |-- Transfermarkt.ipynb
            |-- Understat.ipynb
            |-- .ipynb_checkpoints




</details>
",9,9,1,0,real-estate,"[cars-data, football-data, jupyter-notebooks, movies-data, real-estate, web-scraping-python]",0
wp-api-libraries,wp-idxbroker-api,wp-api-libraries,https://github.com/wp-api-libraries/wp-idxbroker-api,https://api.github.com/repos/wp-idxbroker-api/wp-api-libraries,A WordPress php library for interacting with the IDX Broker API.,"# WP IDX Broker API

A WordPress php library for interacting with the [IDX Broker API](https://middleware.idxbroker.com/docs/api/overview.php).

[![Code Climate](https://codeclimate.com/repos/57d32c751a166e18a60006aa/badges/88dbe05ca5942d204761/gpa.svg)](https://codeclimate.com/repos/57d32c751a166e18a60006aa/feed)
[![Test Coverage](https://codeclimate.com/repos/57d32c751a166e18a60006aa/badges/88dbe05ca5942d204761/coverage.svg)](https://codeclimate.com/repos/57d32c751a166e18a60006aa/coverage)
[![Issue Count](https://codeclimate.com/repos/57d32c751a166e18a60006aa/badges/88dbe05ca5942d204761/issue_count.svg)](https://codeclimate.com/repos/57d32c751a166e18a60006aa/feed)
[![Build Status](https://travis-ci.org/wp-api-libraries/wp-idxbroker-api.svg?branch=master)](https://travis-ci.org/wp-api-libraries/wp-idxbroker-api)

# Example Usage
The IDX Broker API library contains a method for each endpoint of the API. Visit the [PHPDocs](https://wp-api-libraries.github.io/wp-idxbroker-api/classes/IdxBrokerAPI.html) for the full documentation.

#### GET Requests
```php
$idx_api = new IdxBrokerAPI( 'example_api_key' );

$res1 = $idx_api->get_clients_featured();

$res2 = $idx_api->get_clients_systemlinks( 'url' );

$res3 = $idx_api->get_mls_approvedmls();
```

#### POST Requests
```php
$res1 = $idx_api->post_clients_dynamicwrapperurl( 'https://example.com/luxury-real-estate', '12345' );

$data = array( 'note' => 'Wheres my IDX?' );
$res2 = $idx_api->post_leads_note( '3', '1', $data );

```

#### PUT Requests
```php
$data = array( 
  'propertyName' => 'Test Property',
  'property' => array('idxID' => 'a001', 'listingID' => '345678' )
);
$res1 = $idx_api->put_leads_property( 812, $data );
```

#### DELETE Requests
```php
$res1 = $idx_api->delete_clients_supplemental( 345678 );
```

## Helper Methods

The library also provides a few methods that assist in  extracting  information that is not readily accessible.

#### Check API Key Usage
After you make a call to the API you can check your hourly API key usage using the check_usage method
```php
$usage = $idx_api->check_usage();
```

#### Get Wrapper Domain
The API doesnt have an easy way of getting the domain used on the client wrapper pages. The domain can be some version of either `<youraccount>.idxbroker.com` or `<customsubdomain>.<yourdomain>.com`
```php
$domain = $idx_api->get_idx_domain();

/*
Results
Array
(
    [scheme] => https
    [url] => search.example.com
    [full] => https://search.example.com
)
*/
```

## Extending Functionality

The IDXBrokerAPI Class is extensible, which gives developers the ability to override the functionality of the class to their needs.

For Example. Exceeding the hourly limit is a common issue developers may face when using the API. By overriding the `request()` method, we can cache the calls made to the API.
```php
class OptimizedIdxBrokerAPI extends IdxBrokerAPI {

  /**
   * By overriding the request method we can intercept the API call and choose to 
   * either make a fresh API call or retrieve a cached result from the database.
   */
  public function request( $force_refresh = false ) {
    // Only cache GET requests.
    if ( 'GET' !== $this->args['method'] ) {
      return parent::request();
    }

    // We md5 the route to create a unique key for that call and to also reduce the risk of
    // creating a key that is over 64 characters long, aka the max length for option names.
    $transient_key = 'idxbroker_cache_' . md5( $this->route );

    // Check if cached results for API call exist.
    $request = get_transient( $transient_key );

    // If nothing is found, make the request.
    if ( true === $force_refresh || false === $request ) {
      // Parent method handles the request to IDX Broker.
      $request = parent::request();

      if ( false !== $request ) {
        set_transient( $transient_key, $request, 1 * HOUR_IN_SECONDS );
      }
    }
		
    return $request;
  }
	
}
```
Now when you instantiate your new class and make calls to methods such as `get_clients_featured()` or `get_partners_clients()`, you will get cached versions of the results if they are available.

##### Usage:
```php
$optimized_idx_api = new OptimizedIdxBrokerAPI( 'yourapikey' );

$results = $optimized_idx_api->get_clients_featured(); // Fresh call to the API.

$results = $optimized_idx_api->get_clients_featured(); // Cached results.
```
",9,9,10,2,real-estate,"[api, complete, idx, idxbroker, needs-testing, real-estate, wordpress]",0
linetonthat,Real_estate_Taipei_regression,,https://github.com/linetonthat/Real_estate_Taipei_regression,https://api.github.com/repos/Real_estate_Taipei_regression/linetonthat,[Machine Learning - Regression] Predicting real estate valuation in Xindian district,"# [Machine Learning Regression Project] Real estate valuation in Xindian district, New Taipei, Taiwan
## Description
This is a project to predict real estate value in Xindian district, based on several features. The objectives of this project are to:
1. Understand the data available
2. Build a summary map of the data available based on Graphic Information Preprocessing
3. Test rapidly different regression models
4. Assess the best model(s) and improve them
5. Present the results and what could be further addressed.

## Table of contents
* 1_Problem_description_and_EDA.ipynb [Jupyter notebook]
* 2_graphic_information_processing.ipynb [Jupyter notebook]
* 3_Spot_checking_algorithms.ipynb [Jupyter notebook]
* 4_Model_fine_tuning.ipynb [Jupyter notebook]
* Real estate valuation data set.xlsx [XLXS file]
* [Folder] maps: Summary maps
* [Folder] template: Spot_checking_regression [Python script]
  
## Source of data
UCI Machine Learning Repository: __[Real estate valuation Dataset](https://archive.ics.uci.edu/ml/datasets/Real+estate+valuation+data+set)__
",9,9,1,0,real-estate,"[graphic-information-processing, machine-learning, prediction-algorithm, python, real-estate, regression, spot-checking, taipei]",0
sthsuyash,GharBikri,,https://github.com/sthsuyash/GharBikri,https://api.github.com/repos/GharBikri/sthsuyash,"GharBikri is a RealEstate website where you can buy, sell and rent houses.","# GharBikri

<img src=""./client/src/assets/Images/GharBikri-logos_white.png"" height=100/>

## Description

GharBikri is a full stack web application that allows users to buy and sell properties. It is a single page application that allows users to create an account, login, and post properties for sale. It also allows users to search for properties based on location, price, and property type. It also allows users to view the details of a property and contact the seller.

## Running the Application

- Clone the repository

```bash
git clone https://github.com/sthsuyash/GharBikri.git
```

_change into each client and server directory and run the following commands:_<br/>

- Install dependencies

```bash
npm i
```

- Run the application

```bash
npm run dev
```

## Contributing

Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

- First fork the repository

- Clone your forked repository

```bash
git clone <your-repo-name>
```

- Create a new branch

```bash
git checkout -b <your-branch-name>
```

- Make changes and commit

```bash
git add .
git commit -m ""<your-commit-message>""
```

- Push changes to GitHub

```bash
git push origin <your-branch-name>
```

- Submit your changes for review, i.e create a pull request

If you have any questions, please open an issue.
",9,9,2,1,real-estate,"[expressjs, nodejs, pern-stack, postgresql, reactjs, real-estate, spa]",0
JoomlaEstateAgency,com_jea,JoomlaEstateAgency,https://github.com/JoomlaEstateAgency/com_jea,https://api.github.com/repos/com_jea/JoomlaEstateAgency,Joomla Estate Agency. A real estate properties management component for Joomla.,"# Joomla Estate Agency (JEA) component

This is the new official code repository.

## What is JEA?

JEA is a real estate extension for the [Joomla CMS](http://www.joomla.org). It provides an easy (and powerful) way to manage a properties listing on your website.

More infos can be found on the [Joomla Extensions Directory](http://extensions.joomla.org/extensions/vertical-markets/real-estate/6755).

Try a [demo](http://demo.sphilip.com/jea/)

## Support

- [Documentation](https://github.com/JoomlaEstateAgency/com_jea/wiki/)
- [Forum](http://jea.sphilip.com/forum/)

## Credits

JEA is released under the [GNU GPL licence V2](http://www.gnu.org/licenses/gpl-2.0.html)

- Main developer : [Sylvain Philip](http://www.sphilip.com/)
- Contributions : [Roberto Segura](https://twitter.com/#!/phproberto)
",9,9,9,9,real-estate,"[cms, jea, joomla, joomla-component, joomla-extension, real-estate]",0
Yougourta,House_Rental_App,,https://github.com/Yougourta/House_Rental_App,https://api.github.com/repos/House_Rental_App/Yougourta,Android example of a real-estate app,"# House_Rental_App


This app only contains UIs for those interested in implementing the server side. 
The app basicaly displays a list of houses for rental where you can choose to see more details or navigate to show other categories of houses.

![alt tag](https://preview.ibb.co/cjagKG/1.png ""Img 1"")
![alt tag](https://preview.ibb.co/fkaLDb/3.png ""Img 2"")
![alt tag](https://preview.ibb.co/jnBMKG/2.png ""Img 3"")
",9,9,2,0,real-estate,"[android, real-estate, ui]",0
brenj,real-estate-marketplace,,https://github.com/brenj/real-estate-marketplace,https://api.github.com/repos/real-estate-marketplace/brenj,An Ethereum real estate marketplace for transferring title ownership.,"Real Estate Marketplace
=======================

About
-----

From Udacity:
> In this project, you will represent your ownership of the property using ZK-SNARKs and then mint tokens to represent your claim to the property. You will then make these tokens available for sale on blockchain marketplace.

`Real Estate Marketplace` is a decentralized application that allows users to create tokens that represent real estate. These tokens are verified using ZK-SNARKs and can be sold on `OpenSea`.

**OpenSea:**

Marketplace Seller: https://rinkeby.opensea.io/accounts/0x7c2df1af9f1751b29991ec4ead35d4da7ea61780  
Marketplace Buyer: https://rinkeby.opensea.io/accounts/0xfa6457e067dde3a0f9753ac895585fb4cff210fa

**Deployed Contracts:**

```console
Network: rinkeby (id: 4)
  Migrations: 0x996f0fF4374D683fe71383E6e90a1C708C9E21c9
  SolnSquareVerifier: 0xDf0c36c1Ffd49940E31D49BF5Ab77A7F9351976D
  Verifier: 0x8951206C17C4aF6F24237b91E3A55e54831F07E9
```

**Application Binary Interface:**

[abi/ABI.json](https://raw.githubusercontent.com/brenj/real-estate-marketplace/master/abi/ABI.json)

Requirements
------------
* Node v10.x.x
* Node Package Manager (npm)
* Truffle
* Ganache
* Infura

Install, Test, & Run
--------------------
1. `npm install`
2. `npm test`

Screenshot
----------
![Real Estate Marketplace Tests](screenshots/tests.png?raw=true)

Code Organization
-----------------
```console
contracts/
‚îú‚îÄ‚îÄ ERC721Mintable.sol
‚îú‚îÄ‚îÄ Migrations.sol
‚îú‚îÄ‚îÄ Oraclize.sol
‚îú‚îÄ‚îÄ SolnSquareVerifier.sol
‚îî‚îÄ‚îÄ Verifier.sol
test
‚îú‚îÄ‚îÄ TestERC721Mintable.js
‚îú‚îÄ‚îÄ TestSolnSquareVerifier.js
‚îî‚îÄ‚îÄ TestVerifier.js
```

Grading (by Udacity)
--------------------

Criteria              |Highest Grade Possible  |Grade Recieved
----------------------|------------------------|--------------------
Project Deliverables  |Meets Specifications    |Meets Specifications 
ERC721                |Meets Specifications    |Meets Specifications 
Zokrates              |Meets Specifications    |Meets Specifications 
OpenSea Marketplace   |Meets Specifications    |Meets Specifications 
Deployment            |Meets Specifications    |Meets Specifications 
",9,9,2,14,real-estate,"[blockchain, ethereum, ganache, javascript, node, real-estate, smart-contracts, solidity, truffle, web3, zokrates, zsnarks]",0
galtproject,galtproject-docs,galtproject,https://github.com/galtproject/galtproject-docs,https://api.github.com/repos/galtproject-docs/galtproject,üìöGalt Project documentation. Work in progress.,"<p align=""center""> <img src=""https://github.com/galtproject/galtproject-docs/blob/master/whitepaper/images/logo-black-1.png"" alt=""logo-black-360"" width=""200""/></p>

# Galt Project Documentation
This repository contains Software Design Documents for Galt Project.

For each smart contract Documentation contains:
- problems descriptions;
- goals;
- requirements;
- specifications;
- user scenarios;
- user inteface design;

## File structure
- ru - directory contains documentation in Russian Language. One file for each contract.
- en - directory contains documentation in English Language. One file for each contract.

## About Galt Project

Galt Project is an international decentralized land and real estate property registry governed by DAO (Decentralized autonomous organization) and self-governance protocol for communities of homeowners built on top of Ethereum blockchain. Unlike the state property registries, the Galt Project is managed by a decentralized community of property owners using smart contracts. Creation of property records, resolution of disputes between owners, trading, mortgage, title insurance, and many other operations are performed on smart contracts. Also, property owners can unite in communities for voting, fundraising, and managing the common property.

### Galt Project Tokens
GALT - ERC20 standart ethereum based token.

SPACE - ERC721 standart ethereum based token.

### Galt Project Contact information
https://galtproject.io/

",8,8,7,24,real-estate,"[blockchain, galt, land, land-registration, protocol, real-estate, real-estate-platform, self-governance]",0
easypropertylistings,library,easypropertylistings,https://github.com/easypropertylistings/library,https://api.github.com/repos/library/easypropertylistings,Easy Property Listings for WordPress Real Estate Plugin - Code Snippet Library,"EPL Code Snippet Library
========================

This is a community-maintained repository of code snippets that help modify the default behaviour of [Easy Property Listings](https://easypropertylistings.com.au/).

Snippets are organised into categories (folders) and each snippet is placed in its own file with a name that describes what it does.

## Using Snippets

Most files in this library are set up to be WordPress plugins:

1. Click on the filename of the snippet you'd like to use.
2. Click the ""Raw"" button (next to ""Blame"" and ""History"") at the top right.
3. Save the page from your browser to your wp-content/plugins folder and upload to your server. Alternatively you can compress the file as a .zip file and upload as a plugin from within WordPress. 
4. Activate the plugin from the WordPress plugins page.

For files that aren't set up as plugins follow steps 1 and 2 above and then copy and paste the code into your child theme's functions.php or place inside a custom functionality plugin.

If you need help customising any of the snippets or do not understand how to use them, we recommend [Advanced Development](https://easypropertylistings.com.au/extensions/advanced-development/).

## Submitting Your Snippet

We welcome and encourage everyone to submit their code snippets. If you would like to submit your snippet, please [fork](https://github.com/easypropertylistings/library/fork) the repository and then create a [pull request](https://github.com/easydigitaldownloads/library/compare/).

Please refer to the [Contributing guidelines](https://github.com/easypropertylistings/library/blob/master/CONTRIBUTING.md) before submitting your pull request.

## Proposing a Snippet

If there is a snippet you are unable to find and would like to propose get written, please open an [issue](https://github.com/easypropertylistings/library/issues) and describe your need.

## Notes

This is not a tutorial archive. Please see the [tutorials section](https://easypropertylistings.com.au/category/tutorial/) of the EPL website if you're looking for instructions on how to implement these snippets (and others).

These snippets come with no guarantees. Due to the constant evolution of the EPL codebase, it is possible that the behaviour of these snippets may change overtime. Find something broken? [Let us know](https://github.com/easypropertylistings/library/issues)!",8,8,4,0,real-estate,"[epl, plugin, real-estate, snippets, snippets-library, tutorial, wordpress, wordpress-plugin]",0
Web3-Architects,open-rental,Web3-Architects,https://github.com/Web3-Architects/open-rental,https://api.github.com/repos/open-rental/Web3-Architects,Management of rental payments and tenancy deposits using Smart Contracts and Ethereum: a tutorial and Proof of Concept.,"# Solidity Tutorial (w/ ERC20 & AAVE)

üëâüëâ [LINK TO THE FULL TUTORIAL](https://blog.raphaelroullet.com/solidity-tutorial-erc20-aave/) üëàüëà

This is a tutorial for beginners which can be done ideally after completing CryptoZombies!

This repository was created from [this Solidity template](https://github.com/paulrberg/solidity-template) which contains the following tools:

- [Hardhat](https://github.com/nomiclabs/hardhat): compile and run the smart contracts on a local development network
- [TypeChain](https://github.com/ethereum-ts/TypeChain): generate TypeScript types for smart contracts
- [Ethers](https://github.com/ethers-io/ethers.js/): renowned Ethereum library and wallet implementation
- [Waffle](https://github.com/EthWorks/Waffle): tooling for writing comprehensive smart contract tests
- [Solhint](https://github.com/protofire/solhint): linter
- [Solcover](https://github.com/sc-forks/solidity-coverage) code coverage
- [Prettier Plugin Solidity](https://github.com/prettier-solidity/prettier-plugin-solidity): code formatter

## Usage

### Pre Requisites

Before running any command, make sure to install dependencies:

```sh
$ yarn install
```

### Compile

Compile the smart contracts with Hardhat:

```sh
$ yarn compile
```

### TypeChain

Compile the smart contracts and generate TypeChain artifacts:

```sh
$ yarn typechain
```

### Lint Solidity

Lint the Solidity code:

```sh
$ yarn lint:sol
```

### Lint TypeScript

Lint the TypeScript code:

```sh
$ yarn lint:ts
```

### Test

Run the Mocha tests:

```sh
$ yarn test
```

### Coverage

Generate the code coverage report:

```sh
$ yarn coverage
```

### Clean

Delete the smart contract artifacts, the coverage reports and the Hardhat cache:

```sh
$ yarn clean
```
",8,8,2,0,real-estate,"[blockchain, ethereum, real-estate, real-estate-rental, smart-contracts, solidity, tutorial]",0
arthur-e,parcel-analysis,,https://github.com/arthur-e/parcel-analysis,https://api.github.com/repos/parcel-analysis/arthur-e,"Tools for cleaning, managing parcel-level real estate data","Contains scripts for working with fixed-width real estate data, including deed sales, tax assessor's records, and foreclosure records, as commonly purchased from vendors such as Data Quick, RealtyTrac, and Attom Data Solutions.
Specifically includes support for:

- Conversion from fixed width to delimited (e.g., CSV) format;
- Creation of a relational database table (PostgreSQL) from a layout file;
- Inflation adjustment of home sales and other dollar amounts (from CPI-U for housing, 1982-2015);
- SQL scripts for some analysis, geocoding of transactions, assessments, and foreclosures;

Much of the scripts assume a couple of working objectives because they were developed as part of an applied research project.
I have no intention of changing these any time soon but will consider any pull requests that improve/ generalize this work.
If you're working in a different study area, the intent is that this repo is, at the least, a great place to get inspired/ up-to-speed on using these data.
By subfolder:

- `DataQuick/` - Assumes working in Los Angeles MSA
- `RealtyTrac/` - Assumes working in Detroit-Flint-Ann Arbor CSA

**Disclaimer: No actual real estate data are included in this repository as this would violate data license agreements.**

Dependencies
============

GNU Awk (overrides `awk` but is also called `gawk`) is required for this but it may not be installed already.
On Debian systems (including the Ubuntu distributions) it is likely not available; try:

```sh
sudo apt-get install gawk
```

`dos2unix` may also be required if you are using a non-Windows computer. I discovered Windows-style line endings in the CoreLogic data, for instance.

Workflow
========

To import some foreclosure data into a database, we want to perform the following steps, in order:

1. Save the data dictionary/ layout file as a CSV and edit as necessary. **You must make sure that the header is in the first row and there are no extra rows (every row is a field description).**
2. **If necessary,** clean the RealtyTrac data dictionary (`clean_data_dict.py`).
3. Create the database to hold our foreclosure records.
4. Convert the fixed-width files to comma-separated variable (CSV) files to be read.
5. Copy data to the table.

Create the Database and Schema
------------------------------

Create a database `realtytrac` owned by `arthur`:

```sh
$ . create_db.sh realtytrac arthur
```

Then, create the `transactions` (Recorder) table, where `sr_unique_id` is the primary key.

```sh
$ python create_from_data_dict.py ""transactions"" data_dict.csv ""sr_unique_id"" | sudo -u postgres psql -d $DBNAME -f -
```

Convert Fixed-Width Files to CSV
--------------------------------

The length column is always the fourth column, so leave the index at ""4"" as in the following example.
Where the field length column is at index 4 and we want to use the "">"" character as a delimiter:

```sh
$ . convert_fixed_width_to_csv.sh data_dict.csv 4 "">"" fixed_width_data.txt > output.csv
```

Because the fixed-width data contain so many different characters, I found it necessary to use the following delimiters with each data file:

* Recorder data: The right angle-bracket "">"" character
* Assessor data: The vertical bar ""|"" character
* Foreclosure data: The vertical bar ""|"" character

Copy Data to Database Table
---------------------------

For example, copying data to the `transactions` (Recorder) table:

```sh
DBNAME=detroit
TABLE_NAME=transactions
sudo -u postgres psql -d $DBNAME -c ""COPY $TABLE_NAME FROM 'test.csv' WITH DELIMITER '>' NULL AS ''""
```

Data Issues
===========

DataQuick
---------

One significant issue with the DataQuick exports is that they have backslashes; these often occur right before the text delimiter.

**The layout file for the Tax Assessor data** (""Tax_Layout_w_Property_Level_lat_long_w_code_01262017.xlsx"") **has a few problems:**

- It's not clear what the primary key should be. `map_reference_1` is described as ""A CoreLogic unique key to link record to the CoreLogic CD Map product"" but the field is empty for some rows.
- It specifies a `centroid_code` field that does not exist in the data. This field should NOT be created in the database or all the columns after this column index will be shifted one to the right.
- It does NOT specify the `owner_full_name` field, which is clearly evident in the data. This field should be added to the layout file and a column created in the database.
- The `assessed_year` column is supposed to be a 4-digit year (""YYYY"" format or, e.g., ""2016""); however, it contains strings like ""20160000""--that is, with 4 trailing zeros. This needs to be fixed in the layout file and the database column for `assessed_year` needs to allow 8 digits.
- The columns `front_footage`, `depth_footage`, `living_square_feet`, `ground_floor_square_feet`, `basement_square_feet`, `garage_parking_square_feet`, `total_baths`, and `sale_price` are all described as integer columns in the layout file but they all contain decimal numbers.
- The columns `OWNER_1_LAST_NAME`, `OWNER_1_FIRST_NAME_MI`, `OWNER_2_LAST_NAME`, `OWNER_2_FIRST_NAME_MI`, `SUBDIVISION_NAME` may be too short. At least the first one, which has a specified width of 30 characters, exceeded that limit on Line 16. I defined all these columns to have 255-byte lengths (the maximum for `varchar` type).
- Columns `mail_unit_number` and `zoning` also have incorrect widths. I upgraded these to 255 characters after running into too many edge cases (e.g., ""313MAILBOX"").

(By the way, most of these issues were discovered on Line 1 of the file! They are not rare!)

**The layout file for the Deed data** (""Deed_Layout_PropertyLevel_Lat_Long_11172016.xlsx"") **has a few problems:**

- The fields `pcl_id_iris_frmtd`, `situs_carrier_code`, `deed_sec_cat_codes_2x10`, `mtg_sec_cat_codes_1x10`, `mailing_carrier_code`, 'transaction_type', `mailing_house_number` are listed as integer fields but contain character data.

RealtyTrac
----------

In the metadata/ layout files provided there were some elements that simply weren't true (or couldn't be true):

* In the Assessor layout file, after converting it to a CSV, I changed the ""Empty Value"" field for the `process_id` field from ""No"" to ""Yes"" because, in fact, there are NULL values in the `process_id` field within the Assessor data.
* The `sr_unique_id` field is **not** unique in the Assessor data and therefore cannot be used as a primary key.
* In the Foreclosure layout file, after converting it to a CSV, I changed the ""Empty Value"" field for multiple fields from ""No"" to ""Yes"" because, in fact, there are NULL values in the `trustee_unit_nbr` and `fd_beneficiary_unit_nbr` and `parcel_nbr_raw` fields.

In the Tax Assessor's data:

* `sa_parcel_nbr_change_yr` (""Indicates the year in which the most recent parcel conversion took place.""); this ranges wildly from 2001 to 2015 with over 1.2 million properties assigned a year of 0. Some years, like 2004, have 6 properties while others, like 2008, have over 490,000.
* `sa_yr_blt` (""Year in which the primary structure was built on the property"")
* `sa_yr_blt_effect` (""Year in which 'permitted' major improvements were made to the property"")
* `sa_condition_code` (""Code indicating the state/condition of a particular property""); unfortunately, it is blank for every record.
* `sa_architecture_code` (""Indicates the architectural style of the structure.""); it is blank (equal to ""0"") for almost 98% of the records.
* `sa_construction_code` (""Indicates the material used in the construction of the framework for the structure on the  property.""); blank for about 96% of the records.
* `sa_patio_porch_code` (""Indicates the presence or type of patio or porch.""); non-null for every record, but there is no code for ""not present"" so it's unclear what to make of this.
* `sa_pool_code` (""Indicates if there is a pool on the property and/or pool construction material.""); blank for about 98% of the records, **which should indicate the property does not have a pool.**

**Primary Keys:** It's not clear what RealtyTrac intended, but here are some possible primary keys (unique for every record):

    Assessor data:
        sa_property_id (""Unique primary key identifier assigned to a property"")

    Foreclosure data:
        unique_id_notice (""Unique transactional identifier for a recorded pre-Forecelosure Notice."")

    Recorder data:
        sr_property_id (""Joined to Assessor data to merge Assessor and Recorder data. Internal identification number assigned to every property"") -- NOT UNIQUE
        sr_unique_id (""Unique  ID assigned to the original loan transaction for an Assignment record."")

**Useful Fields:**

- In the Assessor file, the `use_code_std` field is populated for most of the records and describes the type of property. Those codes beginning with an ""R"" are residential properties; ""RSFR"" properties are single-family home properties.

Here's an example of field coverage for select fields from the Detroit Metropolitan Statistical Area:

| Dataset  | Field Name          | Coverage
|----------|---------------------|-----------------
| Recorder | sr_deed_type        |  96.5%
| Recorder | sr_doc_type         |  96.0%
| Recorder | sr_tran_type        | 100.0%
| Recorder | sr_arms_length_flag |  21.1%
| Recorder | sr_quitclaim        | 100.0%
",8,8,5,1,real-estate,"[foreclosure, parcels, real-estate]",0
baizel36,property_search,,https://github.com/baizel36/property_search,https://api.github.com/repos/property_search/baizel36,Python scripts to search for real estate on realtor.com and zillow.com,,8,8,2,0,real-estate,"[api, automation, properties, property, python, python3, real-estate, webscraping]",0
davidski,zestimate-lambda,,https://github.com/davidski/zestimate-lambda,https://api.github.com/repos/zestimate-lambda/davidski,Œªüè† AWS Lambda function for monitoring Zillow Zestimates,"Zestimate Tracker (a/k/a update-zestimate)
==========================================

Python based AWS Lambda function for checking the Zillow Zestimate of a 
given property value.

When triggered, this function pulls a CSV from a configured S3 location 
and the current Zillow Zestimate (including rental estimates) for a 
specified property. If the date of the last update to the Zestimate is 
newer than the last date in the file, a message is published to an 
SNS topic with the new value and the full Zestimate response is 
appended to the CSV.

Zestimates API documentation: https://bridgedataoutput.com/docs/explorer/zestimates#listZestimates

Expected Environment Variables
------------------------------

+ zaddress - Address to track
+ zwsid - Bridge Interactive API Server Token (for server-to-server communication)
+ bucket_name - S3 bucket name to store Zestimate history
+ bucket_key - S3 object name to store Zestimate history
+ sns_topic_arn - SNS topic to publish to when new updates available

Deployment
----------

Continuous Deployment is done via the GitHub Actions workflow. Alternatively, 
the included [Makefile](./Makefile) will build a ZIP file which can be 
deployed to AWS Lambda. This ZIP file will include all dependencies 
(including Pandas, and therefore rather large).

Contributing
============

This project is governed by a [Code of Conduct](./CODE_OF_CONDUCT.md). By 
participating in this project you agree to abide by these terms.

License
=======

The [MIT License](LICENSE) applies.
",7,7,2,6,real-estate,"[aws, lambda, real-estate, zillow]",0
daviseford,real-estate-update,,https://github.com/daviseford/real-estate-update,https://api.github.com/repos/real-estate-update/daviseford,React/Electron. crawl my address and let me know what the valuation is from different sources,"Personal real estate update. This has been built to be kinda extensible, but my stuff is hardcoded in there.

`npm run dev`

`npm package`",7,7,3,0,real-estate,"[electron, es6-javascript, javascript, promises, react, real-estate, zillow]",0
Orlogskapten,dvf_ensae_sbra,,https://github.com/Orlogskapten/dvf_ensae_sbra,https://api.github.com/repos/dvf_ensae_sbra/Orlogskapten,Academic project at ENSAE about Paris real estate prediction,"<h1 align=""center"">:house: Pr√©vision du prix de l'immobilier parisien √† l'aide de DVF &Co :house:</h1>

[![Heroku App Status](http://heroku-shields.herokuapp.com/parismutation)](https://parismutation.herokuapp.com)


<div align=""center"">
  <strong>Projet Python 2√®me ann√©e de l'ENSAE</strong>
</div>
<div align=""center"">
  <strong>La pr√©sentation du projet est <a href=""https://soutenancensaedvfsbra.netlify.app/#/"">disponible ici</a></strong>
</div>


<div align=""center"">
  <sub>En collaboration avec 
  <a href=""https://github.com/camillefrancon"">Camille Francon</a>,
  <a href=""https://github.com/Orlogskapten"">Wenceslas Sanchez</a> et
    <a href=""https://github.com/khaledlarbi"">Khaled Larbi</a>.
</div>


## Sommaire
- [But](#but)
- [R√©sultats](#r√©sultats)
- [GitHub-Pages](#github-pages)

----
Les donn√©es sont [disponibles ici temporairement](https://drive.google.com/drive/folders/1jNVEkmhRgsNgsXHlyKPRbNdJiBnFMHr_?usp=sharing).


## But

La direction g√©n√©rale des finances publiques publie tous les semestres le dataset **Demandes de valeurs fonci√®res** qui fournit sur les 5 derni√®res ann√©es l'ensemble des transactions immobili√®res √† partir des actes notari√©s sur le territoire m√©tropolitain (hors Alsace, Moselle et Mayotte). Ce dataset contient la valeur √† laquelle le bien a √©t√© vendu, le type de transaction, les caract√©ristiques des biens (surface, localisation, nombre de pi√®ce) etc. Les donn√©es sont accessibles [ici](https://datafoncier.cerema.fr/donnees/autres-donnees-foncieres/dvfplus-open-data);

Nous nous sommes concentr√©s sur Paris (en d√©pit d'avoir 64 go de RAM :cry:) pour pr√©dire la valeur d'un bien (en fonction de ses caract√©ristiques) en enrichissant le dataset avec :
- les donn√©es **FiLoSoFi** publi√© par l'INSEE qui fournissent des informations sur les caract√©ristiques des m√©nages au sein d'un carroyage (de 200m pour notre part), disponible [ici](https://www.data.gouv.fr/fr/datasets/donnees-carroyees-issues-du-dispositif-sur-les-revenus-localises-fiscaux-et-sociaux-filosofi/).
- les crit√®res d'appr√©ciation et **les notes de Paris** par arrondissement (not√© par les habitants). Ces informations ont √©t√© scrapp√© sur le site [Ville-id√©ale](https://www.ville-ideale.fr/). Le script qui permet de scrapper est disponilbe [ici](https://github.com/Orlogskapten/dvf_ensae_sbra/blob/master/script/ville_ideale_scraping.py)
- les donn√©es sur **les √©quipements √† proximit√© des logements**. Le dataset est disponible [ici](https://www.insee.fr/fr/statistiques/fichier/3568638/bpe19_ensemble_xy_csv.zip). Un gros travail a √©t√© n√©cessaire pour rattacher ces donn√©es √† la table DVF que vous retrouverez [ici](https://github.com/Orlogskapten/dvf_ensae_sbra/blob/master/khaled/notebook/localisation_service_bpe.ipynb).

## R√©sultats

| Mod√®le |      RMSE     | Gagnant |
|:----:|:----------------:|:----:|
| LightGBM |      140786.01      | :crown: |
| SVR |    205309.53   | :cry: |
| RandomForest |    143325.41   | :cry: |


## GitHub-Pages


Nous avons d√©velopp√© dans le cadre de ce projet **un dashboard int√©ractif** pour mettre en avant les principales variables disponibles dans notre dataset dont voici un aper√ßu :

<p align=""center"">
  <a href=""https://orlogskapten.github.io/dvf_ensae_sbra/#dashboard"">
  <img src=""./img/dashboard.png"" width=""738"">
  </a>
</p>

<p align=""center"">
  <a href=""https://orlogskapten.github.io/dvf_ensae_sbra/#dashboard"">
  <img src=""./img/dashboard2.png"" height=""700"">
  </a>
</p>

Il est disponible sur [cette page](https://orlogskapten.github.io/dvf_ensae_sbra/#dashboard) et en app [ici](https://parismutation.herokuapp.com/).
",7,7,2,0,real-estate,"[ensae, ensae-paristech, machine-learning, paris, real-estate]",0
prolinkinfo,RealEstateCRM,,https://github.com/prolinkinfo/RealEstateCRM,https://api.github.com/repos/RealEstateCRM/prolinkinfo,RealEstate CRM: Empowering Real Estate Agents with Modern CRM Tools,"# Welcome to Real Estate CRM: Empowering Real Estate Agents with Modern CRM Tools

Real Estate CRM is an innovative Customer Relationship Management (CRM) solution designed exclusively for Real Estate Agents. Streamline your workflow, enhance client interactions, and boost your business with our feature-packed CRM.

## **Explore our repository to discover**

1. Intuitive Interface: A user-friendly dashboard tailored to the needs of Real Estate professionals.
2. MERN Stack Powered: Built on the robust MERN (MongoDB, Express, ReactJS, Node.js) stack for high performance.
3. Customization: Open-source architecture allows you to tailor the CRM to your unique requirements.
4. Responsive Design: Access your CRM anytime, anywhere, from any device.
5. Seamless Communication: Foster better client relationships with integrated communication tools.

Ready to revolutionize your Real Estate business? Dive into our documentation below and take the first step towards enhancing your productivity.

## **Demo**

Here are the demo link credentials.

https://real-estate-crm-jet.vercel.app/

**Admin access:**
Username: admin@gmail.com
Password: admin123

**Regular access:**
Username: user@gmail.com
Password: user123

## **Installation**

Getting started with RealEstateCRM is a breeze. Follow our comprehensive installation guide to set up the CRM in your local environment. Whether you're an experienced developer or new to the stack, our step-by-step instructions will have you up and running in no time.

[Installation Guide](https://github.com/prolinkinfo/RealEstateCRM/discussions/2)

## **Contributing**

We believe in the power of collaboration! Join us in making RealEstateCRM even better. Whether you're a developer, designer, or Real Estate enthusiast, your contributions are invaluable. Check out our contribution guidelines and dive into our codebase.

Contribution Guidelines

## **Support**

We're here to support your journey with RealEstateCRM. If you have questions, encounter issues, or need assistance, don't hesitate to reach out. Our responsive support team is dedicated to helping you succeed.

For support inquiries, email us at: talent@prolinkinfotech.com

## **License**

RealEstateCRM is released under the MIT License. Feel free to use, modify, and distribute the software in accordance with the license terms.

## **Keeping in Touch**

We value your feedback and ideas. If you have suggestions for new features or customization options, we'd love to hear from you. Let's work together to shape the future of RealEstateCRM.

Contact us at: talent@prolinkinfotech.com

## **Social Media**

Stay connected with us on social media for the latest updates, tips, and community discussions. Join our growing network of Real Estate professionals using RealEstateCRM to elevate their business.
",7,7,1,0,real-estate,"[clientmanagement, crm, crm-platform, crm-system, freecrm, mern-project, mern-stack, open-source, opensource, property-management, react, reactjs, real-estate, real-estate-crm, realestate, realestate-sample-website, realestateagency, realestateagent, realestatecloud, realestates]",0
Shriansh2002,real-estate,,https://github.com/Shriansh2002/real-estate,https://api.github.com/repos/real-estate/Shriansh2002,A Real Estate React & Next.js Application with RapidAPI,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",7,7,1,1,real-estate,"[nextjs, rapidapi, react, real-estate, real-estate-website]",0
mpky,property_project,,https://github.com/mpky/property_project,https://api.github.com/repos/property_project/mpky,"In this repo, I trained various models to detect potential money laundering in residential real estate in Bexar County, Texas.","## Detecting Criminal Investment in Residential Property in Bexar County, Texas

<p align=""center"">
  <img src=""./data/figures/conf_matrix_gbc_pseudo.png"" width=""500"" height=""500"" title=""Confusion Matrix for GBC Model"">
</p>

__Performance metrics for Gradient Boosting classifier trained on pseudo-labeled data on original test data:__
- Recall: 0.8
- Precision: 0.8
- F1 Score: 0.8

<p align=""center"">
  <img src=""./data/figures/gbc_feat_importance.png"" width=""475"" height=""575"" title=""Feature Importances"">
</p>


A [Dutch study](https://www.politieacademie.nl/kennisenonderzoek/kennis/mediatheek/PDF/86218.pdf) that largely served as inspiration for this project found the three best indicators to identify conspicuous properties in the Netherlands are foreign ownership, the owner being a just-established company, and unusual price fluctuations. Therefore, my model having `just_established_owner` as the most important feature matches their study exactly.

Also encouraging is my model having year-over-year price differences for two years as some of the most important features. This roughly aligns with their third indicator of unusual price fluctuations.

Next, `out_of_state_owner` roughly maps to foreign ownership in the Dutch case.

Lastly, `owner_own_multiple` fits the general typology of money laundering in real estate where someone would own more than one property to launder larger amounts of money.


## About:

Money-laundering in residential real estate has become a significant focus of the United States Treasury's Financial Crimes Enforcement Network (FinCEN) over the past few years. As a part of this focus, FinCEN has begun releasing Geographic Targeting Orders (GTOs) that make title insurance companies legally obligated to report a real estate transaction if it meets specific criteria. These GTOs are applied at the county level, including such counties as Miami-Dade, Dallas, and Los Angeles. One county covered by a GTO that has always interested me is Bexar County, Texas, the county that surrounds San Antonio. Under a GTO since July 2016, Bexar County and San Antonio have a long history of ties to northern Mexico, with weekend commutes between San Antonio and Monterrey commonplace. The county has also recently had several high-profile instances of Mexican politicians stashing ill-gotten gains in real estate around San Antonio.

Therefore, focusing on Bexar County, I used publicly available data from the county property assessor and the state of Texas to build a model capable of detecting criminal investment in residential real estate in the county. This repository visualizes the data and applies unsupervised and semi-supervised approaches to detecting criminal investment.

## Contents:

- **data**:
  - raw_h5_files/bexar_property_all.h5 - 2019 Bexar County Appraisal District data with appraisal values from 2015, 2016, 2017, and 2018 added.
  - raw_h5_files/texas_corp_merged.h5 - State of Texas Comptroller of Public Accounts company data merged with the Comptroller's dataset that includes company directors and officers.
  - labels/criminal_properties_labels.csv - Dataset of properties located in Bexar County that have been used to launder the proceeds of some form of crime.

    One such example is 1115 Links Cv, San Antonio, TX 78260, which is owned by Red Kaizen Investments LLC. Red Kaizen Investments LLC is one of dozens of companies named as defendants in the court case against Rafael Olvera Amezcua, a Mexican financier accused of running a sham savings and loans business that defrauded depositors of more than $160 million.
  - figures - HTML output of plotted addresses of labeled properties from folium.
  <p align=""center"">
    <img src=""./data/figures/crim_prop_map.png"" width=""500"" title=""Map of criminal properties"">
  </p>


- **build**:
  - build/merge.py - Script that joins the relevant columns from the Comptroller dataset with the cleaned Bexar property data. The output is a preprocessed h5 file.
  - build/process.py - Script that generates features for modeling and joins the labeled properties data. The output is a processed h5 file.
  - build/get_true_labels.py - Script that reduces the dataset to properties that I can confidently label as either ""innocent"" or ""criminal"" (see above for the ""criminal"" label). Output is h5 file.

      In order to build an adequately-large (several thousand) set of ""innocent"" properties, I assumed that every property owned by one of the top-30 most frequent owners would be innocent. I felt comfortable making that assumption because most of these owners are home builder companies and government agencies. There is, however, an obvious skew that this subset will have - newer properties as well as atypical housing that the county or city of San Antonio may own.

- **modeling_scripts**:
  - clustering.py - Script that visualizes clusters in the property data.
  - isolation_forest.py - Script that applies the Isolation Forest anomaly detection
algorithm to the property data and then returns visualizations and
model performance metrics.
  - semisupervised_pseudolabeling.py - Script that uses pseudo-labeling to train a semisupervised Gradient Boosting model. Outputs model metrics and confusion matrix visualization.

- **notebooks**:
  - Bexar_EDA.ipynb - Notebook for visual inspection of the data.
  - clustering.ipynb - Notebook that applies several unsupervised learning techniques to the data to reveal clusters.
  - isolation_forest.ipynb - Notebook that applies the Isolation Forest anomaly detection algorithm to the property data. I also used my experience in the field to trim the dataset to what I believed to be the most important features and applied the algorithm to this subset.
  - semisupervised_pseudolabeling.ipynb - Because I have a limited dataset of properties with labels I can be truly confident in, I used pseudo-labeling to train a Gradient Boosting Classifier.


- **configs**:
  - config.yaml - Contains variables for .py scripts

## Setup

1. Clone repository.
2. Go to <a href=""https://drive.google.com/drive/folders/16hbhfiExi2Nf6zO56Dzl_28kw2cKKsB0?usp=sharing"" target=""_blank"">this Google Drive link</a> to download the raw datasets for both Bexar Property and the Texas Comptroller.
3. Select ""Download All"" in the upper righthand corner. This will download a zip file.
4. Unzip the zip file and move the resulting ""raw_h5_files"" folder to this repo under the data folder. The two files will, together, be ~750 MB in size.
5. Install pipenv (if not already installed) and create a new environment with the requisite packages:
```
brew install pipenv
pipenv install
pipenv shell
```
6. Merge the two raw datasets into a preprocessed file:
```
python build/merge.py
```
7. Build the features used for modeling:
```
python build/process.py
```
8. Create dataset with true labels:
```
python build/get_true_labels.py
```

## Build Model


```
python modeling_scripts/clustering.py
python modeling_scripts/isolation_forest.py
python modeling_scripts/semisupervised_pseudolabeling.py
```

## Future Directions

- Train a GAN model for better semisupervised learning.
- Visualize with Streamlit.
- Add more features, such as Zillow neighborhood ratings, that have proven useful in other similar exercises.

## Changelog

##### branch==dev3 20200418
###### Added
- Figures for top ten features as well as bar chart for metrics comparison

##### branch==dev3 20200415
###### Changed
- Figures to reflect new performance metrics
- README overview to reflect reworked feature importances and metrics

##### branch==dev3 20200414
###### Added
- Grid-searched base model for pseudo-labeling
- New model in models/ folder

##### branch==dev2 20200326
###### Added
- Feature importance plot for GBC.
- Output feature importance plot for ssl .py script.
- New feature importance visualization

##### branch==dev2 20200325
###### Added
- Grid-searching for gradient boosting classifier in ssl notebook.
- GBC model saved under models folder.
- Figure with performance metrics for the grid-searched model.

###### Changed
- Second gradient boosting model to include grid-searched parameters.

###### Removed
- Figure with old performance metrics.
",7,7,3,0,real-estate,"[anomaly-detection, money-laundering, real-estate]",0
LibreProperty,LibreProperty,LibreProperty,https://github.com/LibreProperty/LibreProperty,https://api.github.com/repos/LibreProperty/LibreProperty,Property Management SaaS focusing on vacation rentals,"# ![Logo](libreproperty/static/favicon.png?raw=true ""Logo"") LibreProperty: Short-Term Property Management
Note: This README is more of a roadmap since there is no working prototype yet.

LibreProperty is free and open source property management software focused on vacation
and short-term rentals.

## Features
ROADMAP:

* Manage your listings across various platforms Airbnb, Vrbo and Booking.com
* Automatically close off your listings when on other platforms when booked
  to prevent double bookings
* Dynamically adjust pricing based across all platforms based on the rules
  you define
* Integrate with Smart Locks and send a unique code for each booking
* Easily create a professional booking website for your property

## Setting up a local development environment
Create a virtualenv and install dependencies
```sh
python3 -m venv .venv
source .venv/bin/activate
pip3 install -r requirements.txt
```

Start minio to be used instead of S3 and redis:
```sh
./scripts/run-dev-services.sh
```

Start the local development server:
```
export AWS_ACCESS_KEY_ID=LIBREPROPERTY
export AWS_SECRET_ACCESS_KEY=LIBREPROPERTY
export SECRET_KEY=changemetosomethingsecret
python server.py
```

You should now have a development environment running on
[http://localhost:8888](http://localhost:8888).

Start Huey for background tasks execution:
```sh
export AWS_ACCESS_KEY_ID=LIBREPROPERTY
export AWS_SECRET_ACCESS_KEY=LIBREPROPERTY
huey_consumer.py libreproperty.tasks.tasks.huey -w 2 -v
```

## License
[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

",7,7,5,1,real-estate,"[landlord, property-management, real-estate, rental, rental-housing, vacation-rental]",0
ombharatiya,property-advisor,,https://github.com/ombharatiya/property-advisor,https://api.github.com/repos/property-advisor/ombharatiya,Django app for a property advisor & matching service. Uses linear proportion conversion algorithm to match the properties and give suggestions to buy properties/real-estate based on your budget.,"# Property Advisor
(by [@ombharatiya](https://www.linkedin.com/in/ombharatiya))

- - -

### A demo app for a property advisor application using match feature:

**Check the deployed app here : [Property Advisor](https://property-advisor.herokuapp.com/).**

- - -
#### Problem Statement:

Agentdesks has a lot of properties from property sellers and searches requirements from property buyers which get added to a SQL database every day. Every day these multiple properties and search criteria get added through our application by agents. Write an algorithm to match these properties and search criteria as they come in based on 4 parameters such that each match has a  match percentage.

##### The 4 parameters are:

- Distance - radius (high weightage)
- Budget (high weightage)
- Number of bedrooms (low weightage)
- Number of bathrooms (Low weightage)
- Each match should have a percentage that indicates the quality of the match. Ex: if a property exactly matches a buyers search requirement for all 4 constraints mentioned above, it‚Äôs a 100% match.  
- Each property has these 6 attributes - Id, Latitude, Longitude, Price, Number of bedrooms, Number of bathrooms
- Each requirement has these 9 attributes - Id, Latitude, Longitude, Min Budget, Max budget, Min Bedrooms required, Max bedroom reqd, Min bathroom reqd, Max bathroom reqd.

#### Functional requirements:

1. All matches above 40% can only be considered useful.
2. The code should scale up to a million properties and requirements in the system.
3. Requirements can be without a min or a max for the budget, bedroom and a bathroom but either min or max would be surely present.
4. For a property and requirement to be considered a valid match, distance should be within 10 miles, the budget is +/- 25%, bedroom and bathroom should be +/- 2.
5. If the distance is within 2 miles, distance contribution for the match percentage is fully 30%
6. If the budget is within min and max budget, budget contribution for the match percentage is full 30%. If min or max is not given, +/- 10% budget is a full 30% match.
7. If bedroom and bathroom fall between min and max, each will contribute full 20%. If min or max is not given, match percentage varies according to the value.
8. The algorithm should be reasonably fast and should be quick in responding with matches for the users once they upload their property or requirement.

#### Assumptions made:

- Since it is not mentioned that the valid budget +/- 25% has to be taken from min/max budget value, I assumed the average value to calculate the +/- 25% and the added both sides.
- Assuming all the data will be provided
- Created 1000 properties mock data in database to match with the requirements.
  - assumed bedrooms & bathrooms between 1 to 6
  - assumed price between $ 1k to 10k
- Using [Haversine formula](https://en.wikipedia.org/wiki/Haversine_formula) to calculate distance between two points in miles
   


#### Algorithm used:

I used linear proportion conversion algorithm to generate results.
Here's the formula for it:
```
OldRange = (OldMax - OldMin)  
NewRange = (NewMax - NewMin)  
NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin
```

Here's the steps for one data: 
(example of price - budget matching):
- given min & max budget and price of a property
- calculate the average budget 
- define boundaries for valid to 100% matching condition
- using above expression to find the matching percentage
- returning data

#### Request Object Model:

```
property_request_object_example = {
    ""lat"": 18.3721392,
    ""lon"": 121.5111211,
    ""minBedrooms"": 1,
    ""maxBedrooms"": 2,
    ""minBathrooms"": 1,
    ""maxBathrooms"": 4,
    ""minBudget"": ""8305.39"",
    ""maxBudget"": ""18305.39""
}

```

#### Calculations:

After indivisually calculating matching of every field, I'm then merging them according to the provided weightage:

```
DISTANCE_WEIGHT = 0.3
BUDGET_WEIGHT = 0.3
BATHROOM_WEIGHT = 0.2
BEDROOM_WEIGHT = 0.2

Result(in %age)  = distance_match * DISTANCE_WEIGHT
        + budget_match * BUDGET_WEIGHT
        + bedroom_match * BEDROOM_WEIGHT
        + bathroom_match * BATHROOM_WEIGHT

```

Refer this file to see all the business logic: [Business Logic](https://github.com/ombharatiya/property-advisor/blob/master/apiservices/core/RealState/driver.py)

- - - 

#### Deployment, Hosting & Demo work:

- **Created Django Project to add this functionalities into an app**
- **Created Server Side rendered UI Form and Result Property List**
- **Validation on Form Fields in UI itself to handle different case**
- **Using Docker for Deployement**
- **Hosted the code on Git**
- **Serving the App Container on Heroku cloud**

Thank you :)

Copyright @ombharatiya
- - -
",7,7,3,2,real-estate,"[containerization, docker, geolocation, heroku, latitude, longitude, matching, python, python3, real-estate, version-control]",0
NiccoloSalvini,thesis,,https://github.com/NiccoloSalvini/thesis,https://api.github.com/repos/thesis/NiccoloSalvini,my master's thesis,"
<!-- README.md is generated from README.Rmd. Please edit that file - rmarkdown::render('README.Rmd', output_format = 'github_document', output_file = 'README.md') -->

<img src=""images/logo/logo.png"" align=""right"" height=""80""/>

# REST Scraping API for Real Estate data, a Spatial Bayesian modeling perspective with INLA

*author*: [**Niccol√≤ Salvini**](https://niccolosalvini.netlify.app/)
*date*: 14 June, 2021

[![HitCount](http://hits.dwyl.com/NiccoloSalvini/NiccoloSalvini%20/%20Thesis.svg)](http://hits.dwyl.com/NiccoloSalvini/NiccoloSalvini%20/%20Thesis)
<img src=""https://img.shields.io/github/issues-raw/NiccoloSalvini/thesis"" alt=""GitHub issues""/>
[![Generic
badge](https://img.shields.io/badge/Github%20Pages%20Deploy-PASSING-%3CCOLOR%3E.svg)](https://shields.io/)
[![Website](https://img.shields.io/website-up-down-green-red/https/naereen.github.io.svg)](https://niccolosalvini.github.io/Thesis/)
<a href=""https://www.repostatus.org/#wip""><img src=""https://www.repostatus.org/badges/latest/wip.svg"" alt=""Project Status: WIP ‚Äì Initial development is in progress, but there has not yet been a stable, usable release suitable for the public.""/>
</a> [![Netlify
Status](https://api.netlify.com/api/v1/badges/6d5dad0e-716a-4995-ac8f-bcbf35a4bfe6/deploy-status)](https://app.netlify.com/sites/nsmasterthesis/deploys)

<br> <br>

### Abstract:

The following work has the aim to build a robust Scraping API service to
extract Real Estate rental data (Milan, IT) and applying *geostatistics*
spatial modeling through a convenient computing alternative called INLA.
Data originates from immobiliare.it database and it is extracted through
a *scraper* built on top of the website. The scraper is *optimized* with
respect to both the server side *kindly requesting* permission and
imposing *delayed-request rates*, and the client side by granting
continuity through *fail dealers* and request‚Äôs *headers rotation*.
Scraping functions exploit a custom workflow that combines url reverse
engineering and optimal search strategies within the website. Speed
comes from the fact that differently from spiders and derivatives which
operate a full crawling down of the web site, the workflow concentrates
only on a restricted set of urls. A further critical speed boost is
offered by parallelism through the latest *Future* back-end, and a run
time benchmark demonstrates the scraper rapidity for two recent parallel
with two configurations. The scraper is then wrapped into a http API
through an R framework, namely *Plumber*. Security is a major focus and
anti dossing strategies, HTTPS and sanitization are singularly treated.
Docker can offer a lightweight environment where dependencies are
conveniently organized making the software portable. As a result the
whole API service is *containerized* and built upon custom Dockerfiles,
which are orchestrated by *Compose* through a .yml file. Amazon EC2 is
an AWS web service providing a stable, scalable cloud computing
capability in which the system is hosted. The service choice is a free
tier one. Along with the server it comes the need of a reverse proxy
service and the choice falls on *NGINX* reverse proxy server for
authentication and load balancing. The architecture principles stacked
on top of the http API elevates it to being RESTful. RESTful APIs are a
mean of communication among internet services that allows to perform any
kind of action without having both parts to know how they are
implemented. In other words, if the client wants to interact with a web
service with the aim to retrieve information or perform a function, a
RESTful API land a hand by communicating the *desiderata* to that system
so it can understand and fulfill the request in a secured and structured
way. Software CI/CD is managed through automatic workflow that exploits
GitHub and DockerHub, which ultimately allows containers to be pulled
into the EC2. Once the RESTful API endpoint is invoked, data, in this
case Milan rental market within the municipality borders, is
asynchronously scraped and collected into a JSON format. Traditional
spatial bayesian methods have been generally slow in the context of
spatial big data since covariance matrices are dense and their
inversions scale to a cubic order. Therefore Integrated Nested Laplace
approximation (INLA) is applied constituting a faster computational
alternative on a special type of models called Latent Gaussian models
(LGM). *INLA* shorten computations through analytics approximations with
Laplace and numerical methods for space matrices with the aim to obtain
an approximated posterior distribution of the parameters. Hedonic Price
Models (HPM) constitutes the economic theoretical foundation of the
model according to which the linear predictor is set. As a matter of
fact house prices are related to the value of the property by their
demand-offer price equilibra for each single characteristic (including
the spatial ones). A further aspects addresses the fact that prices are
considered as a proxy value for rents since they are both
interchangeable economic actions satisfying the same need. However the
critical part of studying house characteristics in geostatistics is the
*estimation* for the reason already anticipates. LGMs are defined into a
hierarchical bayesian modeling framework, distinguishing three nested
hierarchy levels: the likelihood of the data (generally an exponential
family), the latent Gaussian Markov Random Field GRMF (where the linear
predictor is) and the hyper parameter distribution for which priors are
specified. GMRF are suitable since they provide a sparse precision
matrix due to conditional assumption, marking matrices tridiagonal. The
spatial component of the data is considered as a discrete realization of
an underlying unobserved and continuous Gaussian Process (GP) to be
estimated, completely characterized by a mean structure and a covariance
matrix. For the Gaussian Process are made two major assumptions:
stationarity and isotropy, which let specifying a flexible covariance
function i.e.¬†Mat√©rn. The Stochastic Partial Differential Equations
(SPDE) solutions can provide a GMRF representation of the GP whose
covariance matrix is Mat√©rn. This happens through a triangulation of the
domain of the study, i.e.¬†mesh. The model is then fitted and cross
validated with R-INLA and inference on parameter posterior distribution
is given.

### Deployment:

The deployment of the project is made through Netlify + GitHub + GitHub
actions (CI environement).

### License:

[![License:
MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
",7,7,1,1,real-estate,"[bayesian-statistics, inla, real-estate, spatial-data-analysis, webscraping]",0
SAP-samples,btp-industry-use-cases,SAP-samples,https://github.com/SAP-samples/btp-industry-use-cases,https://api.github.com/repos/btp-industry-use-cases/SAP-samples,Key SAP BTP components implemented in the proposed architecture of the BTP for Industries use cases.,"# SAP BTP Industry Use Cases
[![License: Apache2](https://img.shields.io/badge/License-Apache2-green.svg)](https://opensource.org/licenses/Apache-2.0)
[![REUSE status](https://api.reuse.software/badge/github.com/SAP-samples/btp-industry-use-cases)](https://api.reuse.software/info/github.com/SAP-samples/btp-industry-use-cases)

<!--- Register repository https://api.reuse.software/register, then add REUSE badge:
[![REUSE status](https://api.reuse.software/badge/github.com/SAP-samples/REPO-NAME)](https://api.reuse.software/info/github.com/SAP-samples/REPO-NAME)

2. The .reuse/dep5 file: 
The [Reuse Tool](https://reuse.software/) must be used for your samples project. You can find the .reuse/dep5 in the project initial. Please replace the parts inside the single angle quotation marks < > by the specific information for your repository.

3. The README.md file (this file):
Please edit this file as it is the primary description file for your project. You can find some placeholder titles for sections below.
-->

## Description
This repository includes a list of sample code about industry use cases with SAP BTP, which are presented during the [SAP BTP Industry Use Cases series](https://blogs.sap.com/2023/02/10/deliver-real-life-use-cases-with-sap-btp/). Each numbered folder you see in the structure is comprised by the code presented on an individual session. And each folder represents a completed runnable project about a industry use case with SAP BTP. To run a specific project, please kindly follow the READMe.md within its folder. <br/>
Use Case | Industry | SAP BTP Services | Blog Post
---------|----------|----------|----------
[`01-Intelligent Ticketing System`](01-intelligent-ticket-system) | Service | SAP CAP, CF, Business Rule | [link](https://blogs.sap.com/2023/02/28/deliver-real-life-use-cases-with-sap-btp-intelligent-ticket-system/)
[`02-Fleet Driver Tracking`](02-fleet-driver-tracking) | Transportation | SSO with IAS between SAC and CAP, SAP Graph, SAP Build Process Automation | [link](https://blogs.sap.com/2023/03/30/deliver-real-life-use-cases-with-sap-btp-fleet-driver-tracking-solution/)
[`03-Workplace Management`](03-workplace-management) | Real Estate | Multitenancy, Security, SAP CAP | [link](https://blogs.sap.com/?p=1763035)
[`04-Customer Interaction Powered by GPT`](04-customer-interaction-gpt4) | Service | Generative AI, Large Language Model, GPT, SAP CAP, SAP RAP | [link](https://blogs.sap.com/2023/06/20/exploring-the-potential-of-gpt-in-sap-ecosystem/)
[`06-AI-powered Returnable Packaging`](06-ai-powered-returnable-packaging) | Sustainability | AI-Core, SAP Computer Vision, Kyma, SAP Build Apps | comming soon

## Known Issues
No known issues.

## How to obtain support
[Create an issue](https://github.com/SAP-samples/<repository-name>/issues) in this repository if you find a bug or have questions about the content.
 
For additional support, [ask a question in SAP Community](https://answers.sap.com/questions/ask.html).

## Contributing
If you wish to contribute code, offer fixes or improvements, please send a pull request. Due to legal reasons, contributors will be asked to accept a DCO when they create the first pull request to this project. This happens in an automated fashion during the submission process. SAP uses [the standard DCO text of the Linux Foundation](https://developercertificate.org/).

## License
Copyright (c) 2023 SAP SE or an SAP affiliate company. All rights reserved. This project is licensed under the Apache Software License, version 2.0 except as noted otherwise in the [LICENSE](LICENSE) file.
",7,7,11,0,real-estate,"[ai, analytics, artificial-intelligence, chatgpt, clean-core, energy, gpt, gpt-4, healthcare, industry-cloud, llm, manufacturing, process-automation, real-estate, sample, sap-btp, service, sustainability, transportation, utilities]",0
tortuc,Excel_to_JavaScript-Real_Estate-Maximum_Mortgage_Calculator,,https://github.com/tortuc/Excel_to_JavaScript-Real_Estate-Maximum_Mortgage_Calculator,https://api.github.com/repos/Excel_to_JavaScript-Real_Estate-Maximum_Mortgage_Calculator/tortuc,Real_Estate-Maximum_Mortgage_Calculator,"# Excel_to_JavaScript-Real_Estate-Maximum_Mortgage_Calculator
",6,6,2,0,real-estate,"[excel-javascript, javascript, jquery, mortgage-calculator, real-estate]",0
kahramanumut,EmlakOtomasyonu,,https://github.com/kahramanumut/EmlakOtomasyonu,https://api.github.com/repos/EmlakOtomasyonu/kahramanumut,,"# EmlakOtomasyonu
Bir emlak firmasƒ± i√ßin geli≈ütirmeye ba≈üladƒ±ƒüƒ±m bu uygulamadan vazge√ßilmesi sonucu yarƒ±m kalmƒ±≈ütƒ±r.
Entity ile geli≈ütirilen bu uygulamadan faydalanmak isteyen ki≈üi App.Config kƒ±smƒ±na veritabanƒ± c√ºmlesini yazarak uygulamayƒ± kullanƒ±p isteƒüine g√∂re geli≈ütirebilir.
",6,6,0,0,real-estate,"[c-sharp, entity-framework, real-estate]",0
fdd4s,matterport-downloader,,https://github.com/fdd4s/matterport-downloader,https://api.github.com/repos/matterport-downloader/fdd4s,Download Skybox panoramic photos of Matterport houses,"# matterport downloader

## What it does

matterport-downloader downloads Skybox 360 panos photos of Matterport houses

## Dependencies

php, php-curl, curl  

This code can run over Linux and Windows  

## Usage

    $ php ./matterport-downloader.php <matterport id>  

e.g: If the url is https://my.matterport.com/show/?m=huhpm6maGbT&mls=1 you have to run the script this way:  

    $ php ./matterport-downloader.php huhpm6maGbT  

It will download all the skybox images with the highest quality available (4k, 2k or 1k).  

## Online downloader version of this script

https://openpano.rf.gd/download/ shows skybox images of matterport virtual tours, with the browser option ""save web complete"" it downloads all skybox images of a matterport virtual tour.

## Viewers

PC: Linux/Mac/Windows using Panini and opening as Cube Faces: https://github.com/lazarus-pkgs/panini  

Web Browser: Chrome and Firefox: Pannellum (webgl based), self hosted virtual tour, equirectangular and cubemap skybox: https://github.com/mpetroff/pannellum  

## Equirectangular

Skybox can be converted to equirectangular format and achieve a higher compatibility among viewers.  

https://github.com/fdd4s/skybox2equirectangular  

Or directly using this tool that merge both projects

https://github.com/fdd4s/matterport-dl-equi  

Equirectangular can be viewed in players like Ricoh Theta for Android https://play.google.com/store/apps/details?id=com.theta360&hl=en&gl=US  

## Credits

Created by fdd4s  
Send feedback and questions to fc1471789@gmail.com  
All files are public domain https://unlicense.org/  
",6,6,2,0,real-estate,"[360-photo, data-scraping, equirectangular-panorama, matterport, real-estate, skybox]",0
Riocodex,RealNFT,,https://github.com/Riocodex/RealNFT,https://api.github.com/repos/RealNFT/Riocodex,"A  digital platform that functions as a marketplace for buying and selling houses, with the unique feature of using Non-Fungible Tokens (NFTs) to represent each individual property.","Hello fellow devs!!I have developed a cutting-edge application that serves as a sophisticated marketplace for the trading of real estate assets in the form of non-fungible tokens (NFTs)üî•üî•üî•üî•üî•üî•üî•üî•. To provide a comprehensive overview of the application's functionality, I have included a concise video demonstrating the seamless process of purchasing and listing real estate assets within the platform here https://www.linkedin.com/posts/onwuka-rosario-619890227_hello-fellow-devsi-have-developed-a-cutting-edge-activity-7079705285866438658-yBtJ?utm_source=share&utm_medium=member_ios

Additionally, I would like to provide the links to the frontend and backend code repositories of the application for further exploration. The frontend code can be found at https://github.com/Riocodex/RealNFT while the backend code can be accessed at  https://github.com/Riocodex/RealNFT_backend. Enjoy!! And of course give it a starüòé
",6,6,2,0,real-estate,"[bootstrap, nft-marketplace, reactjs, real-estate]",0
sudhamstarun,Spark,,https://github.com/sudhamstarun/Spark,https://api.github.com/repos/Spark/sudhamstarun,An augmented reality based property valuation further enhanced by blockchain and data science to provide an end-to-end mortgage application processing platform‚ú®üì±,"<img src=""Assets/logo.png"" alt="""" width=""100px""/>

# Spark

## Introduction

An augmented reality based property valuation further enhanced by blockchain and data science to provide an end-to-end mortgage application processing platform‚ú®üì±

## Motivation

Mortgage industry has been around for a long time but has not improved the processing times for end to end mortgage application processing. This is due to the archaic technology and processes still followed by the parties involved in the mortgage food-chain. Currently it takes on an average of 40+ days from submitting home loan application to closing the loan or settlement of funds. <br>
<br>
Given the advancement in Augmented Reality technology, it is imperative for this very pen and paper process to catch up with the emerging technologies. Blockchain mortgages has a potential to disrupt the existing processes and could eliminate costs and inefficiencies thus improving closing time line and saving a lot of fees that are currently charged in each step of application processing. <br>
<br>
Combining Augmented Reality, Data Science and Blockchain, Spark aims to provide a new end-to-end mortgage application processing which ensures efficient, effective and timely reslution of application in a transparent manner.

## Dependencies

- Xcode 10.1
- ARKit 2
  - Swift 4.2.1
  - OpenCV 3.4.2
  - R.swift 4.0.0

* Ethereum
  - Ganache CLI (Choice of Ethereum Client) (EthereumJS)
  - Solidity 0.5.1
  - Truffle Framework
 * Keras
  - Tensorflow

## Technology

The end-to-end solution is made possible by Swift and React Native which allows us to make a mobile application and a web application for the mortgage applicants and the banks respectively. In order to ensure that the powerful tehcnologies being used in the backend are only used to serve the user and not scare them, we are expecting to neatly package the entire backend suit into a final iOS application which handles all the necessary key views provided to the user. <br>
<br>
Let's delve into the three key technologies which power Spark.

### Augmented Reality

### Machine Learning

### Blockchain

## Authors

[Janmajaya Mall](https://github.com/Janmajayamall) <br>
[Ankit Tibrewal](https://github.com/atibrewal98) <br>
[Tarun Sudhams](https://github.com/sudhamstarun) <br>
",6,6,2,7,real-estate,"[arkit, augmented-reality, ethereum-contract, ethereum-dapp, ganache-cli, react, real-estate, solidity, swift4, truffle-framework]",0
TheMostafax,My_Real_Estate,,https://github.com/TheMostafax/My_Real_Estate,https://api.github.com/repos/My_Real_Estate/TheMostafax,Professional Web-App using ReactJs and Tailwind CSS (Responsive for all mobile devices),"<h1 align=""center"">My Real Estate</h1>
<p align=""center"">
  
![main](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/d2415a1a-1a8f-4d05-892b-7aa49884fe8a)

</p>


<h1 align=""center"">Project Description </h1>

My real estate web app is a modern and fully responsive platform developed using React JS and Tailwind CSS. The app is designed to provide visitors with an immersive and user-friendly experience on all mobile devices. The app includes eight pages that cover all the important aspects of the real estate business. 

The Home page provides visitors with a brief overview of your business and its offerings, while the About Us page details the background and mission of your real estate business.

The Our Features page highlights the unique selling points of your real estate services, while the On Sale page provides visitors with a comprehensive list of properties available for purchase.

The Our Services page outlines all the services offered by your real estate business, while the Demo page provides a visual representation of your real estate properties.

The Our Clients page showcases your satisfied clients and their testimonials, while the Contact Us page provides visitors with a convenient way to get in touch with your team.

The app's design is clean and minimalist, with a focus on providing the user with an intuitive navigation experience. The use of Tailwind CSS ensures that the app's design is consistent across all pages, providing a seamless user experience.

Overall, my real estate web app is a powerful tool for your business, providing visitors with all the information they need to make informed decisions about your services.

<hr>

<h1 align=""center"">üöÄ Folder Structure</h1>

```

‚îî‚îÄ‚îÄ myrealstate/
    ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îú‚îÄ‚îÄ assets/
    |   ‚îú‚îÄ‚îÄ components/
    |   ‚îî‚îÄ‚îÄ ‚îú‚îÄ‚îÄ pages/
    |            ‚îî‚îÄ‚îÄ about.js
    |            ‚îî‚îÄ‚îÄ clients.js
    |            ‚îî‚îÄ‚îÄ contact.js
    |            ‚îî‚îÄ‚îÄ demo.js
    |            ‚îî‚îÄ‚îÄ features.js
    |            ‚îî‚îÄ‚îÄ home.js
    |            ‚îî‚îÄ‚îÄ onsale.js
    |            ‚îî‚îÄ‚îÄ service.js
    |     ‚îî‚îÄ‚îÄ navbar.js
    |     ‚îî‚îÄ‚îÄ footer.js
    ‚îî‚îÄ‚îÄ App.js
    ‚îî‚îÄ‚îÄ index.css
    ‚îî‚îÄ‚îÄ index.js

```

<hr>

<h1 align=""center"">Live Demo</h1>
<p align=""center"">
  

<h5 align=""left"">Click here </h5> https://my-real-estate-beta.vercel.app

</p>


<hr>


<h1 align=""center"">The GUI</h1>



<h3 align=""center"">Home page</h3>


![home](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/521f7332-7dd6-4bba-9af1-cbf34a9e382e)


<hr>

<h3 align=""center"">About Us page</h3>

![about](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/146adc58-d84f-499b-9aad-d72dc17fec64)


<hr>

<h3 align=""center"">Our Features page</h3>


![features](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/b410dbf6-06b3-4ac7-8635-d9826cb78ac4)


<hr>

<h3 align=""center"">On Sale page</h3>


![onsale](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/cc783109-f816-4150-99fb-667c36d5f34f)


<hr>

<h3 align=""center"">Demo page</h3>

![demo](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/45e0e0ba-d291-44df-9f99-9c464124ad64)


<hr>


<h3 align=""center"">Our Clients page</h3>



![clients](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/b3e58b7b-b872-4be2-bff8-2246fbf3e48d)



<hr>

<h3 align=""center"">Contact Us page</h3>

![contact](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/22add6c2-0fac-4cce-b991-d6d5205f8f9b)



<hr>

<h2 align=""center"">Responsive View</h2>

![image](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/e4a51c4b-194d-420e-8ed2-aac451be047f)


![image](https://github.com/TheMostafax/My_Real_Estate/assets/81190585/33e728b1-e6c8-47d9-a0e9-1ed509fff438)


<hr>

<h1 align=""center"" style=""color:red;"">Notes</h1>

<h4 align=""left"">1. The app is still in the development phase and is not yet finished.</h4>

<hr>

<h1 align=""center"">Languages and Tools that used in this project</h1>
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript"" target=""_blank"" rel=""noreferrer"">
        <img src=""https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg"" alt=""javascript"" width=""40"" height=""40""/>
      </a><a href=""https://www.w3schools.com/css/"" target=""_blank"" rel=""noreferrer"">
        <img src=""https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg"" alt=""css3"" width=""40"" height=""40""/>
      </a>
      <a href=""https://www.w3.org/html/"" target=""_blank"" rel=""noreferrer"">
        <img src=""https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg"" alt=""html5"" width=""40"" height=""40""/>
      </a><a href=""https://reactjs.org/"" target=""_blank"" rel=""noreferrer"">
        <img src=""https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg"" alt=""react"" width=""40"" height=""40""/>
      </a><a href=""https://tailwindcss.com/"" target=""_blank"" rel=""noreferrer"">
        <img src=""https://www.vectorlogo.zone/logos/tailwindcss/tailwindcss-icon.svg"" alt=""tailwind"" width=""40"" height=""40""/>
      </a>
",6,6,1,0,real-estate,"[commercial, css, html, react, reactjs, real-estate, responsive, responsive-design, tailwind-css, tailwindcss, webapp, webdevelopment, website]",0
theopomies,Leace-Monorepo,,https://github.com/theopomies/Leace-Monorepo,https://api.github.com/repos/Leace-Monorepo/theopomies,Doing to Real Estate what Tinder did to Dating,"# Leace Monorepo

## About

Leace does to Real Estate what Tinder did to Dating

It uses [Turborepo](https://turborepo.org/) and contains:

```
.github
  ‚îî‚îÄ workflows
        ‚îî‚îÄ CI with pnpm cache setup
.vscode
  ‚îî‚îÄ Recommended extensions and settings for VSCode users
apps
  ‚îú‚îÄ mobile
  |   ‚îú‚îÄ Expo SDK 46
  |   ‚îú‚îÄ React Native using React 18
  |   ‚îú‚îÄ Tailwind using Nativewind
  |   ‚îî‚îÄ Typesafe API calls using tRPC
  ‚îî‚îÄ web
      ‚îú‚îÄ Next.js 13
      ‚îú‚îÄ React 18
      ‚îú‚îÄ TailwindCSS
      ‚îî‚îÄ E2E Typesafe API Server & Client
packages
 ‚îú‚îÄ api
 |   ‚îî‚îÄ tRPC v10 router definition
 ‚îú‚îÄ auth
     ‚îî‚îÄ authentication using next-auth. **NOTE: Only for Next.js app, not Expo**
 ‚îî‚îÄ db
     ‚îî‚îÄ typesafe db-calls using Prisma
```

## Quick Start

To get it running, follow the steps below:

### Setup dependencies

```diff
# Install dependencies
pnpm i

- provider = ""postgresql""
+ provider = ""mysql""

# Configure environment variables.
# There is an `.env.example` in the root directory you can use for reference
cp .env.example .env

# Push the Prisma schema to our database
pnpm db-push
```

### Configure Expo `dev`-script

> **Note:** If you want to use a physical phone with Expo Go, just run `pnpm dev` and scan the QR-code.

#### Use iOS Simulator

1. Make sure you have XCode and XCommand Line Tools installed [as shown on expo docs](https://docs.expo.dev/workflow/ios-simulator/).
2. Change the `dev` script at `apps/mobile/package.json` to open the iOS simulator.

```diff
+  ""dev"": ""expo start --ios"",
```

3. Run `pnpm dev` at the project root folder.

#### For Android

1. Install Android Studio tools [as shown on expo docs](https://docs.expo.dev/workflow/android-studio-emulator/).
2. Change the `dev` script at `apps/mobile/package.json` to open the Android emulator.

```diff
+  ""dev"": ""expo start --android"",
```

3. Run `pnpm dev` at the project root folder.

## Deployment

### Next.js

#### Prerequisites

_We're gonna be using PlanetScale (cloud hosted & managed mysql database) with Prisma which isn't quite ready yet._

#### Deploy to Vercel

Let's deploy the Next.js application to [Vercel](https://vercel.com/). If you have ever deployed a Turborepo app there, the steps are quite straightforward. You can also read the [official Turborepo guide](https://vercel.com/docs/concepts/monorepos/turborepo) on deploying to Vercel.

1. Create a new project on Vercel, select the `apps/web` folder as the root directory and apply the following build settings:

<img width=""927"" alt=""Vercel deployment settings"" src=""https://user-images.githubusercontent.com/11340449/201974887-b6403a32-5570-4ce6-b146-c486c0dbd244.png"">

> The install command filters out the expo package and saves a few second (and cache size) of dependency installation. The build command makes us build the application using Turbo.

2. Add your `DATABASE_URL` environment variable.

3. Done! Your app should successfully deploy. Assign your domain and use that instead of `localhost` for the `url` in the Expo app so that your Expo app can communicate with your backend when you are not in development.

### Expo

Deploying your Expo application works slightly differently compared to Next.js on the web. Instead of ""deploying"" your app online, you need to submit production builds of your app to the app stores, like [Apple App Store](https://www.apple.com/app-store/) and [Google Play](https://play.google.com/store/apps). You can read the full [Distributing your app](https://docs.expo.dev/distribution/introduction/), including best practices, in the Expo docs.

1. Let's start by setting up [EAS Build](https://docs.expo.dev/build/introduction/), which is short for Expo Application Services. The build service helps you create builds of your app, without requiring a full native development setup. The commands below are a summary of [Creating your first build](https://docs.expo.dev/build/setup/).

   ```bash
   // Install the EAS CLI
   $ pnpm add -g eas-cli

   // Log in with your Expo account
   $ eas login

   // Configure your Expo app
   $ cd apps/mobile
   $ eas build:configure
   ```

2. After the initial setup, you can create your first build. You can build for Android and iOS platforms and use different [**eas.json** build profiles](https://docs.expo.dev/build-reference/eas-json/) to create production builds or development, or test builds. Let's make a production build for iOS.

   ```
   $ eas build --platform ios --profile production
   ```

   > If you don't specify the `--profile` flag, EAS uses the `production` profile by default.

3. Now that you have your first production build, you can submit this to the stores. [EAS Submit](https://docs.expo.dev/submit/introduction/) can help you send the build to the stores.

   ```
   $ eas submit --platform ios --latest
   ```

   > You can also combine build and submit in a single command, using `eas build ... --auto-submit`.

4. Before you can get your app in the hands of your users, you'll have to provide additional information to the app stores. This includes screenshots, app information, privacy policies, etc. _While still in preview_, [EAS Metadata](https://docs.expo.dev/eas/metadata/) can help you with most of this information.

5. Once everything is approved, your users can finally enjoy your app. Let's say you spotted a small typo; you'll have to create a new build, submit it to the stores, and wait for approval before you can resolve this issue. In these cases, you can use EAS Update to quickly send a small bugfix to your users without going through this long process. Let's start by setting up EAS Update.

   The steps below summarize the [Getting started with EAS Update](https://docs.expo.dev/eas-update/getting-started/#configure-your-project) guide.

   ```bash
   // Add the `expo-updates` library to your Expo app
   $ cd apps/mobile
   $ pnpm expo install expo-updates

   // Configure EAS Update
   $ eas update:configure
   ```

6. Before we can send out updates to your app, you have to create a new build and submit it to the app stores. For every change that includes native APIs, you have to rebuild the app and submit the update to the app stores. See steps 2 and 3.

7. Now that everything is ready for updates, let's create a new update for `production` builds. With the `--auto` flag, EAS Update uses your current git branch name and commit message for this update. See [How EAS Update works](https://docs.expo.dev/eas-update/how-eas-update-works/#publishing-an-update) for more information.

   ```bash
   $ cd apps/mobile
   $ eas update --auto
   ```

   > Your OTA (Over The Air) updates must always follow the app store's rules. You can't change your app's primary functionality without getting app store approval. But this is a fast way to update your app for minor changes and bug fixes.

8. Done! Now that you have created your production build, submitted it to the stores, and installed EAS Update, you are ready for anything!

## References

The stack originates from [create-t3-app](https://github.com/t3-oss/create-t3-app).

And [create-t3-turbo](https://github.com/t3-oss/create-t3-turbo).
",6,6,1,152,real-estate,[real-estate],0
bashovski,apollo,,https://github.com/bashovski/apollo,https://api.github.com/repos/apollo/bashovski,üè°  Real Estate Platform,"<p align=""center"">
  <img align=""center"" src=""/public/img/apollo_logo.png"" width=""40"" height=""40""></img> 
</p> 
<p align=""center"">Real Estate Web Application - manage, rent, sell and buy properties.</p>

### Stack
![alt text](https://img.shields.io/badge/frontend-Vue.js-41b883?logo=vue.js&style=for-the-badge)
![alt text](https://img.shields.io/badge/backend-Laravel-red?logo=laravel&style=for-the-badge)
![alt text](https://img.shields.io/badge/frontend-Bootstrap-563D7C?logo=bootstrap&style=for-the-badge)
![alt text](https://img.shields.io/badge/stylesheets-Sass-cc6699?logo=sass&style=for-the-badge)

### Assets and State management
![alt text](https://img.shields.io/badge/Asset_management-Webpack-b3c6ff?logo=webpack&style=for-the-badge)
![alt text](https://img.shields.io/badge/State_management-Vuex-41b883?logo=vue.js&style=for-the-badge)

### Documentation
![alt text](https://img.shields.io/badge/API_Documentation-Swagger-85ea2d?logo=swagger&style=for-the-badge)

To observe API documentation, please refer to swagger.yaml file in the root directory.

### Installation of the project (locally)

1.1. First of all, this or newer version of PHP is needed: PHP 7.3.3 (cli) (built: Mar  6 2019 21:53:23)<br>
1.2. After installing PHP, feel free to test if it's installed by calling <i>php -v</i> in terminal/command line.<br>
1.3. If you get output mentioned in the first step, you did the step 1.(1.) successfully.<br>
1.4. Refer to: https://www.php.net/manual/en/install.php<br>

2.1. Install Composer for dependency injection.<br>
2.2. It is neccessary to have composer installed locally so all the dependencies get downloaded for further use.<br>
2.3. After installed, call command <i>composer -V</i> in terminal to see if it's installed.<br>
2.4. If <i>Composer version 1.8.6 2019-06-11 15:03:05</i> gets outputted, you installed Composer successfully.<br>
2.5. Refer to: https://getcomposer.org/<br>

3.1. Install Node.js with Node Package Manager (NPM)<br>
3.2. Refer to: https://nodejs.org/en/download/<br>
3.3. After installing, try inputting <i>npm -v</i> in terminal. You should see output of 6.9.0 or higher.<br>

4.1. Clone or fork the repository: <i>git clone https://github.com/bashovski/apollo</i><br>
4.2. In terminal, execute command: <i>cd apollo</i><br>
4.3. Execute command: <i>composer install</i><br>
4.4. Execute command: <i>php artisan key:generate</i><br>
4.5. Copy .env-example and paste it as a new file with name of .env - Insert manually sensitive credentials and save the file.<br>
4.6. Create local database 'apollo' before migrating.<br>
4.7. Execute command: <i>php artisan migrate</i> to migrate migrations to the database<br>
4.8. Execute command: <i>php artisan serve</i> to run the server.<br>


",6,6,3,37,real-estate,"[jwt, laravel, real-estate, real-estate-platform, rest-api, vue]",0
darren7753,jakarta_housing_price,,https://github.com/darren7753/jakarta_housing_price,https://api.github.com/repos/jakarta_housing_price/darren7753,"Exploring Jakarta's housing market trends through web scraping, data analysis, and interactive visualization.","<a name=""readme-top""></a>

# üè† Jakarta Housing Prices <a href=""https://jakarta-housing-prices-dashboard.streamlit.app/"" target=""_blank""><img src=""https://static.streamlit.io/badges/streamlit_badge_black_white.svg"" alt=""Open in Streamlit""></a>

<p align=""center"">
    <img src=""https://img.shields.io/badge/python-3670A0?style=for-the-badge&logo=python&logoColor=ffdd54"" alt=""Python Badge"" height=""23"">
    <img src=""https://img.shields.io/badge/Google%20BigQuery-%234A90E2.svg?style=for-the-badge&logo=googlecloud&logoColor=white"" alt=""Google BigQuery Badge"" height=""23"">
    <img src=""https://img.shields.io/static/v1?style=for-the-badge&message=GitHub+Actions&color=2088FF&logo=GitHub+Actions&logoColor=FFFFFF&label="" alt=""GitHub Actions Badge"" height=""23"">
    <img src=""https://img.shields.io/static/v1?style=for-the-badge&message=Jupyter+Notebook&color=F37626&logo=Jupyter&logoColor=FFFFFF&label="" alt=""Jupyter Notebook Badge"" height=""23"">
    <img src=""https://img.shields.io/static/v1?style=for-the-badge&message=Google+Sheets&color=34A853&logo=Google+Sheets&logoColor=FFFFFF&label="" alt=""Google Sheets Badge"" height=""23"">
    <img src=""https://img.shields.io/static/v1?style=for-the-badge&message=Streamlit&color=FF4B4B&logo=Streamlit&logoColor=FFFFFF&label="" alt=""Streamlit Badge"" height=""23"">
</p>

<p align=""center"">
    <img src=""images/screenshot_dashboard.png"" alt=""Screenshot of the Dashboard"" width=""100%"">
    <br>
    <em>Screenshot of the Dashboard</em>
</p>

<h2>üëã Introduction</h2>

The Jakarta Housing Prices Project aims to provide detailed insights into the housing market in Jakarta, the capital city of Indonesia. By collecting and analyzing data from [Rumah123](https://www.rumah123.com/), a popular real estate website, we can gain a comprehensive understanding of price trends, property features, and other relevant factors. This analysis is intended to benefit potential home buyers, real estate professionals, and researchers interested in the Jakarta housing market.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<h2>üö∂ Walkthrough</h2>

This section provides a step-by-step explanation of the process used to create this project:

<h3>üåê Data Source</h3>

We source our data from [Rumah123](https://www.rumah123.com/), a prominent online platform in Indonesia known for its extensive property listings. This website provides detailed information about various properties, including their prices, locations, sizes, and additional features.

<h3>üîÑ Data Scraping & Data Cleaning</h3>

We employ Python along with the Selenium library for web scraping. Selenium allows us to automate the process of extracting housing price data. With carefully crafted scripts, we retrieve the desired information, ensuring accuracy and consistency. Following the scraping process, we apply data cleaning techniques to refine and format the collected data, making it suitable for analysis.

<h3>üíæ Data Storing</h3>

We utilize Google BigQuery, a fully managed and scalable cloud-based data warehouse, for storing the cleaned housing price data. BigQuery offers efficient storage and retrieval capabilities, enabling us to handle large datasets with ease. By leveraging the power of BigQuery, we can perform seamless data analysis and generate valuable insights.

<h3>üìä Data Visualization</h3>

To facilitate the exploration and presentation of our findings, we create an interactive dashboard using Streamlit. It provides a user-friendly interface and a wide range of visualization options, allowing us to visualize housing price trends, average and median prices per district and city, and other relevant metrics. The dashboard offers an intuitive way to interact with the data, empowering users to gain valuable insights at a glance.

<h3>üìÉ Data Overview</h3

In addition to the interactive dashboard, we provide the housing price data in a spreadsheet format. This allows users to access and analyze the data in a more detailed and customized manner. The spreadsheet format offers flexibility for further calculations, filtering, and exploratory analysis, catering to users who prefer working with raw data or conducting their own analyses.

<h3>ü§ñ Automated Process</h3>

The entire data analysis pipeline is automated using GitHub Actions. Every day at 8 AM, 2 PM, 8 PM, and 2 AM UTC+7, GitHub Actions automatically triggers the data scraping, cleaning, storing, and visualization processes. This ensures that the data and insights are up-to-date and readily available for users without manual intervention.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<h2>üìö Conclusion</h2>

The Jakarta Housing Prices Project offers comprehensive insights into the housing market in Jakarta, supporting informed decision-making for various stakeholders. The interactive dashboard, created with Streamlit, provides a visually engaging and user-friendly interface for exploring housing price trends and patterns. Additionally, the availability of the data in a spreadsheet format ensures flexibility and customization for deeper analysis.

For a detailed analysis and access to the interactive dashboard and spreadsheet, please visit the following links:

- [Link to Dashboard](https://jakarta-housing-prices-dashboard.streamlit.app/)
- [Link to Spreadsheet](https://docs.google.com/spreadsheets/d/1jZj5tTV1WanOg2qszqDNPI8cAfk3yRRev_ph4J_10IA/edit?usp=sharing)

Feel free to explore the data, analyze trends, and make use of the valuable insights provided by this project.

Data last updated: 2023-10-08 14:15:21.140594

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>",6,6,1,0,real-estate,"[bigquery, dashboard, data-analysis, data-visualization, python, real-estate, scraping, streamlit]",0
sanidhyy,real-estate-app,,https://github.com/sanidhyy/real-estate-app,https://api.github.com/repos/real-estate-app/sanidhyy,,"# Realtor - A Next JS Real Estate App

![A Next JS Real Estate App](https://user-images.githubusercontent.com/71302066/175340586-9dccc0e4-0444-47cf-bd6e-d3543e14aae8.png)

[![Ask Me Anything !](https://img.shields.io/badge/Ask%20me-anything-1abc9c.svg)](https://github.com/Technical-Shubham-tech)
[![GitHub license](https://img.shields.io/github/license/Technical-Shubham-tech/real-estate-app)](https://github.com/Technical-Shubham-tech/real-estate-app/blob/main/LICENSE.md)
[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/Technical-Shubham-tech/real-estate-app/commits/main)
[![GitHub branches](https://badgen.net/github/branches/Technical-Shubham-tech/real-estate-app/)](https://github.com/Technical-Shubham-tech/real-estate-app/branches)
[![Github commits](https://badgen.net/github/commits/Technical-Shubham-tech/real-estate-app/main)](https://github.com/Technical-Shubham-tech/real-estate-app/commits)
[![Website](https://img.shields.io/website-up-down-green-red/http/shields.io.svg)](https://real-estate-app-react.vercel.app/)
[![GitHub issues](https://img.shields.io/github/issues/Technical-Shubham-tech/real-estate-app)](https://github.com/Technical-Shubham-tech/real-estate-app/issues)

## ‚ö†Ô∏è Before you start

1. Make sure **Git** and **NodeJS** is installed
2. **Yarn** is faster than Npm. So use [Yarn](https://classic.yarnpkg.com/lang/en/docs/install/).
3. Create .env file in root folder.
4. Contents of **.env**

```
NEXT_APP_RAPID_API_KEY=XXXXXXXXXXXXXXXXXXXXXXXXXXX
```

5. Now, to setup API, go to [Rapid API Website](https://rapidapi.com/) and create an account.

6. Enable this API to fetch Real estate data: [API: Bayut](https://rapidapi.com/apidojo/api/bayut/).

![Copy API Key](https://user-images.githubusercontent.com/71302066/175342480-ab86e3e0-9380-47b0-b79a-9f13e079077d.png)

7. After enabling you can get your API Keys and paste them in `.env` file in `NEXT_APP_RAPID_API_KEY`.

**NOTE:** Make sure you don't share these keys publicaly.

## üìå How to use this App?

1. Clone this **repository** to your local computer.
2. Open **terminal** in root directory.
3. Type and Run `npm install` or `yarn install`.
4. Once packages are installed, you can start this app using `npm run dev` or `yarn dev`
5. Now app is fully configured and you can start using this app :+1:

## üìÉ Built with

[<img src=""https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&logo=javascript&logoColor=F7DF1E"" width=""150"" height=""40"" />](https://www.javascript.com/)

[<img src=""https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB"" width=""150"" />](https://reactjs.org/)

[<img src=""https://img.shields.io/badge/next.js-000000?style=for-the-badge&logo=nextdotjs&logoColor=white"" width=""150"" />](https://nextjs.org/)

[<img src=""https://user-images.githubusercontent.com/71302066/174567516-824b1967-5954-4ac7-9446-14a3b2ab825d.svg"" alt=""Rapid API"">](https://rapidapi.com/)

[<img src=""http://ForTheBadge.com/images/badges/built-with-love.svg"" alt=""Built with Love"">](https://github.com/Technical-Shubham-tech)

## üîß Stats

![Stats for this App](https://user-images.githubusercontent.com/71302066/175344406-4184c9b0-3e56-4a6d-91c8-6bd5089a5f3d.svg)

## üôåüèº Contribute

You might encounter some bugs while using this app. You are more than welcome to contribute. Just submit changes via pull request and I will review them before merging. Make sure you follow community guidelines.

## Buy Me a Coffee üç∫

[<img src=""https://img.shields.io/badge/Buy_Me_A_Coffee-FFDD00?style=for-the-badge&logo=buy-me-a-coffee&logoColor=black"" width=""200"" />](https://www.buymeacoffee.com/sanidhy ""Buy me a Coffee"")

## üöÄ Follow Me

[![GitHub followers](https://img.shields.io/github/followers/Technical-Shubham-tech?style=social&label=Follow&maxAge=2592000)](https://github.com/Technical-Shubham-tech)
[![Twitter](https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Ftwitter.com%2FTechnicalShubam)](https://twitter.com/intent/tweet?text=Wow:&url=https%3A%2F%2Fgithub.com%2FTechnical-Shubham-tech%2Fmedical-chat-app)
[![YouTube](https://img.shields.io/badge/YouTube-FF0000?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/channel/UCNAz_hUVBG2ZUN8TVm0bmYw)

## ‚≠ê Give A Star

You can also give this repository a star to show more people and they can use this repository.
",6,6,1,1,real-estate,"[css, html, javascript, js, next, nextjs, react, react-router, reactjs, real-estate]",0
Yana-Gupta,real-estate-frontend,,https://github.com/Yana-Gupta/real-estate-frontend,https://api.github.com/repos/real-estate-frontend/Yana-Gupta,front end for a real estate website ,"# REAL ESTATE FRONTEND

This is a frontend of a real estate website with a good User Interface. The design is clean and User friendly. This is only frontend application of a real estate application.

## How to run the project on your local server

1. Fork the repository

2. Clone the repository (`git clone`)

3. Install all the dependencies (`npm install`)

4. Run start command (`npm run start`)

The application will start live on your local server.


## Contributing

Contributions from the community are highly valued and encouraged, as they play a crucial role in refining and expanding the capabilities of this repository, making it a collaborative hub for continuous improvement and innovation.

1. Fork the project
2. Create your Feature Branch (`git checkout -b feature/FeatureBranch`)
3. Commit your Changes (`git commit -m ""changes""`)
4. Push to the Branch (`git push origin feature/FeatureBranch`)
5. Create a Pull Request


## Contributors 

<a href = ""https://github.com/Yana-Gupta/real-estate-frontend/graphs/contributors"">
  <img src = ""https://contrib.rocks/image?repo=Yana-Gupta/real-estate-frontend""/>
</a>

",6,6,0,8,real-estate,"[hacktoberfest, hacktoberfest2023, real-estate, real-estate-website]",0
brainbarett,yerin,,https://github.com/brainbarett/yerin,https://api.github.com/repos/yerin/brainbarett,üè° Real Estate CMS for agencies to manage their property listings.,"# Yerin

üè° Real Estate CMS for agencies to manage their property listings. It currently in its early stages; not production ready.

> üìù NOTE: Incremental migrations will start when v1.0.0 is released. Until then migration files will be modified.

| Screenshots                                                         |
| ------------------------------------------------------------------- |
| <img src=""./public/github/creating a property.png"" alt=""drawing"" /> |

## Table of contents

-   [Requirements](#requirements)
-   [Installation](#installation)
-   [Tests](#tests)
-   [Roadmap](#roadmap)

## Requirements

-   php >= 8.1
-   mysql
-   composer (see http://getcomposer.org/download)

## Installation

1. Clone the repo

```
> git clone https://github.com/brainbarett/yerin
```

2. Install the project's dependencies(make sure you're in the project's directory when running the command)

```
> composer install
```

3. Modify the auto-generated `.env` file to reflect your environment(mostly the database credentials)

4. Run the database migrations and seeds

> ‚ö†Ô∏è WARNING: running this command will drop all tables from the specified database

```
> php artisan migrate:fresh --seed --seeder=DemoSeeder
```

5. Run the server

```
> php artisan serve
```

You can log in with email `admin@test.com` and password `password`

## Tests

Update your `phpunit.xml` file and set the `DB_DATABASE` value to your testing database

You can then run all the tests with

```
> vendor\bin\phpunit
```

## Roadmap

-   v1.0.0

    -   ‚¨úÔ∏è Account management

        -   ‚úÖ Create and modify accounts
        -   ‚úÖ Authentication
        -   ‚¨úÔ∏è Manage and assign roles & permissions

    -   ‚úÖ Property management

        -   ‚úÖ Create and modify properties
        -   ‚úÖ Manage and assign property features
        -   ‚úÖ Images
        -   ‚úÖ Geographical locations

    -   ‚¨úÔ∏è UI translations

-   Backlog

    -   ‚¨úÔ∏è Account management

        -   ‚¨úÔ∏è Manage and assign tasks

    -   ‚¨úÔ∏è Property management

        -   ‚¨úÔ∏è Manage and use dynamic property types
        -   Manage and use dynamic property fields
        -   ‚¨úÔ∏è Manage and schedule tours
        -   ‚¨úÔ∏è Make use of the tasks system
        -   ‚¨úÔ∏è Manage and add notes
        -   ‚¨úÔ∏è Manage and upload attachments
",6,6,1,0,real-estate,"[cms, javascript, laravel, php, real-estate, real-estate-management, tdd, tdd-laravel, tdd-php, typescript, typescript-vue, vue, vue2, vuejs, vuejs2]",0
lwoluke,React-RealEstate-FullStack,,https://github.com/lwoluke/React-RealEstate-FullStack,https://api.github.com/repos/React-RealEstate-FullStack/lwoluke,"Frontend using React, HTML, CSS. Backend using Strapi GraphQL.","# React-RealEstate-FullStack
Frontend using React, HTML, CSS. Backend using Strapi GraphQL.
## Front End Setup
To setup front end, follow these steps:

1) Download NodeJS: https://nodejs.org/en/download/
2) Clone this repo using the command:
```
git clone ""https://github.com/lwoluke/React-RealEstate-Pt1.git""
```
3) CD into Front-End directory and Enter the following into the terminal:
```
npm install
npm start
```
4) If unable to run on local development server, create a .env file and paste the following line:
```
SKIP_PREFLIGHT_CHECK=true
```

## Back End Setup
To setup back end, follow these steps:

1) CD into Back-End directory and Enter the following into the terminal:
```
npm install
npm run strapi install graphql
npm run develop
npm i graphql @apollo/client
```
2) Create Strapi Admin account http://localhost:1337/admin

## Strapi Email/Password to Use
Email: test_strapi@gmail.com

Password: Test123!

Use http://localhost:1337 to enter

### For the best development experience, use VS Code: https://code.visualstudio.com/

## Production
To build the app for production: 
- CD into Front-End and enter ```npm run build```
- CD into Back-End and enter ```npm run strapi build```

Documentation for Deployment: https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment.html

### Blog post I made on the creation of this project: https://medium.com/codex/reactjs-graphql-full-stack-real-estate-web-app-98b59fddc7a6

",5,5,1,0,real-estate,"[css, fullstack-javascript, graphql, html, react, real-estate, webdevelopment]",0
blmoore,summerdatachallenge,,https://github.com/blmoore/summerdatachallenge,https://api.github.com/repos/summerdatachallenge/blmoore,My entry for: http://summerdatachallenge.com (I came 3rd),"<p align=""center"">
<img src=""writeup/images/logo3_hires.png"" /><br />
<img src=""writeup/images/logotext.png"" width=""200"" />
</p>

This repo containts my entry for Imperial create lab's [summerdatachallenge](http://summerdatachallenge.com). The challenge was to apply data science techniques to one or more of their supplied datasets. I chose **London house prices**, listings for all house sales within 100 km of the City of London from 2009 up to 2014.

A short written report can be found under [`report/sdc_report.pdf`](report/sdc_report.pdf) and there's an accompanying site at [blm.io/datarea](http://blm.io/datarea).

## How to run

Clone the github repository or download as a zip archive then run as described below. Note that the competition data is **not** included in this repository due to its terms of use, so to run these analyses you must first place the file `Houseprice_2009_100km_London.csv` (137 MB) in directory `houseprices/`. Scripts are all in the `R` directory, so can then be run with e.g. `Rscript R/fractal_context.R`, but are best played with interactively through an R IDE such as [RStudio](http://www.rstudio.com/).

The main scripts are briefly described here, more information is available in source code comments:

* `fractal_context.R` generates a series of visualisations (namely `plots/FC*`) that relate a specific area to its neighbouring sector, district and area in terms of, is it the most or least expensive in a given locale? An outlier? Unexpectedly underpriced? Figures FC0-4 were combined for the final report using inkscape.
* `arima_model.R` ‚Äî after some background work, fits AR|I|MA models to house price time series and plots the forecast of a given sector ([`plots/forecast.pdf`](plots/forecast.pdf)) as well as a random selection for comparison ([`plots/grid_forecasts.svg`](plots/grid_forecasts.svg)).
* `investment_grade.R` ‚Äî fits ARIMA models to all sectors in dataset (2500+?) and calculates historical volatility to be combined into an investment grade. Saves the top 5 sectors ([`plots/top5_investments.svg`](plots/top5_investments.svg)) and a summary dataframe R object ([`rds/invest_grade.rds`](rds/invest_grade.rds)).

Other more minor scripts include:
* `postcode_map.R` ‚Äî draws a series of monthly png bitmap images then stitches them together into animated gifs (via ImageMagick commandline) to show the entire dataset of house sales over time.
* `interactive.R` ‚Äî builds the basic javascript plots using rCharts (and dimple.js) of investment grading used online.
* `report_viz.R`‚Äî just draws the introductory overview map ([`plots/report_overview.pdf`](plots/report_overview.pdf))for the written report.
* `gmap.R` ‚Äî outputs a csv ([`gmap/fusion_kml.csv`](gmap/fusion_kml.csv)) for use with fusion tables and the Google Maps API in order to build the interactive map overlay shown in the online report.

The directory `wip/` contains work in progress scripts or analyses that didn't make the final report. `writeup/` contains a version of the online report (current version at: [blm.io/datarea](http://blm.io/datarea)) and `report/` contains the LaTeX written report.

## sessionInfo()

Below is the output of `sessionInfo()` which shows loaded package versions, the OS and R version (3.1.1) under which these scripts were written. For CRAN snapshots, these analyses were performed around mid October 2014.

```
R version 3.1.1 (2014-07-10)
Platform: x86_64-apple-darwin13.1.0 (64-bit)

locale:
[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] rgeos_0.3-6      maptools_0.8-30  mapdata_2.2-3    maps_2.3-9       gpclib_1.5-5    
 [6] gridExtra_0.9.1  ggplot2_1.0.0    forecast_5.6     timeDate_3010.98 zoo_1.7-11      
[11] dplyr_0.3.0.2    sp_1.0-15       

loaded via a namespace (and not attached):
 [1] assertthat_0.1   codetools_0.2-9  colorspace_1.2-4 DBI_0.3.1        digest_0.6.4    
 [6] foreign_0.8-61   fracdiff_1.4-2   gtable_0.1.2     lattice_0.20-29  magrittr_1.0.1  
[11] MASS_7.3-35      munsell_0.4.2    nnet_7.3-8       parallel_3.1.1   plyr_1.8.1      
[16] proto_0.3-10     quadprog_1.5-5   rCharts_0.4.5    Rcpp_0.11.3      reshape2_1.4    
[21] RJSONIO_1.3-0    scales_0.2.4     stringr_0.6.2    tools_3.1.1      tseries_0.10-32 
[26] whisker_0.3-2    yaml_2.1.13 
```
",5,5,2,0,real-estate,"[analytics, data-science, london, r, real-estate, rstats]",0
Dhirru12,Real-Estate-Webscraper,,https://github.com/Dhirru12/Real-Estate-Webscraper,https://api.github.com/repos/Real-Estate-Webscraper/Dhirru12,Collect the home info anywhere in Canada and America!," <!-- PROJECT LOGO -->
<br />
<p align=""center"">
  <a>
    <img src=""images/Home Security Logo.png"" alt=""Logo"" width=""240"" height=""240"">
  </a>
 
   <p align=""center"">
    Collect the home info anywhere in Canada and America!
    <br />
    By inputting a country and location, the spider will collect info on all homes in the specified area into an excel file.
    <br />
    <a href=""https://github.com/Dhirru12/Real-Estate-Webscraper/blob/main/README.md""><strong>Explore the docs ¬ª</strong></a>
    <br />
    <br />
    <a href=""https://github.com/Dhirru12/Real-Estate-Webscraper/blob/main/real_estate_webscraper/spiders/house_info.py"">View Code</a>
    ¬∑
    <a href=""https://github.com/Dhirru12/Real-Estate-Webscraper/issues"">Report Bug or Request Feature</a>
  </p>
</p>

<!-- ABOUT THE PROJECT -->
## What is The Real Estate Webscraper?
The real estate industry is always changing, so I created a bot that records its current conditions for your convienience!

By simply inputting whether your location is within America or Canada and the location itself, this bot will scrape all info on all the homes in the area!

<p float=""left"" align=""center"">
   <img src=""images/Input_example.gif"" alt=""input_example"" width=""400"" height=""225"">
   <img src=""images/Zillow_Example.gif"" alt=""scraping_example"" width=""400"" height=""225"">
   <img src=""images/Excel_result_example.gif"" alt=""excel_example"" width=""400"" height=""225"">
</p>


What can I use this program for?
* Record current prices of homes in a location
* Real estate back of the envelope analysis
* Record homes available for sale


### Built With
* [Selenium](https://www.selenium.dev)
* [Scrapy](https://scrapy.org/)



<!-- GETTING STARTED -->
## Getting Started

Follow these intructions to get Instagram MultiDM started!

### Prerequisites

You only need Selenium and Scrapy as a prequisite
  ```sh
  pip install selenium
  ```
  
  ```sh
  pip install scrapy
  ```

### Installation

1. Clone the repo
   ```sh
   git clone https://github.com/Dhirru12/Real-Estate-Webscraper.git
   ```
   

<!-- USAGE EXAMPLES -->
## Usage

I will put images here when I can




<!-- CONTRIBUTING -->
## Contributing

I feel like this bot can expand to be so much more, especially with inspiration from my Instagram Discord Bot. Any contributions you make are **greatly appreciated**.

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request
",5,5,1,0,real-estate,"[bot, investi, real-estate, scrapy, selenium]",0
trevv16,rental-property-calc-ts,,https://github.com/trevv16/rental-property-calc-ts,https://api.github.com/repos/rental-property-calc-ts/trevv16,A calculator to evaluate the profitability of a potential rental property purchase.,"# Rental Property Calculator

[![Netlify Status](https://api.netlify.com/api/v1/badges/055eea24-a3b7-4038-9310-04e259fe0f61/deploy-status)](https://app.netlify.com/sites/rental-calc/deploys)

This front end project is a rental property calculator.
This calculator can be used to determine important KPIs for a real estate deal.

It can be helpful to quickly plug in the deal's info to get these numbers before deciding if a property is worth buying.

#### Built with [Create React App](https://create-react-app.dev/), [Typescript](https://www.typescriptlang.org/), [Tailwind CSS](https://tailwindcss.com/), tested with [Jest](https://jestjs.io/) and deployed to [Netlify](https://www.netlify.com/).

### Calculations provided:

- [x] Monthly cash flow
- [x] Mortgage payment
- [x] 5 Year annualized return
- [x] Monthly expense breakdown
  - [x] Fixed expenses
  - [x] Variable expenses
  - [x] Total expenses including mortgage, taxes, insurance
- [x] Net operating income
- [x] Cash on cash return
- [x] 50% rule (rough estimate numbers)
- [x] Cap Rate
- [x] Ammortize loan payment
- [x] Render graph to view deal balances at 1, 2, 3, 4, 5, 10, 15, 20, 30 Years for

## Screenshots

## Form Preview

![form-section](https://user-images.githubusercontent.com/32273310/112067183-07cc6100-8b3e-11eb-9867-2fea5ec84d2b.png)

## Results Preview

![Screen Shot 2023-09-02 at 4 36 33 PM](https://github.com/trevv16/rental-property-calc-ts/assets/32273310/1c080f0f-213b-4e90-8afa-4dac03fe9ded)
![Screen Shot 2023-09-02 at 4 36 43 PM](https://github.com/trevv16/rental-property-calc-ts/assets/32273310/b45beb49-d6cf-4def-918d-a8a0e741e854)
",5,5,2,0,real-estate,"[calculator-application, real-estate, rental-analysis, rental-property-calculator]",0
fischlerben,San-Fran-Housing-Market-Visualizations,,https://github.com/fischlerben/San-Fran-Housing-Market-Visualizations,https://api.github.com/repos/San-Fran-Housing-Market-Visualizations/fischlerben,"This project utilizes Python visualizations packages, such as Plotly Express, HVPlot and PyPlot/Matplotlib to create an interactive dashboard exploring the San Francisco real estate housing market.  Uses MapBox API.","# Visualizations with Python

This project utilizes Python visualizations packages, such as Plotly Express, HVPlot and PyPlot/Matplotlib to create an interactive dashboard exploring the 2010-2016 San Francisco housing market.  Uses MapBox API to grab data and create visualizations.
![san_fran](https://www.fortunebuilders.com/wp-content/uploads/2015/04/san-francisco-real-estate-market.jpg)

## Visualizations of San Francisco Real Estate Housing Market:

### Average Housing Units/Year
![av_housing_units_per_year](/Pics/av_housing_units_per_year.png?raw=true)

### Average Price/Neighborhood (with Interactive Dropdown Selector for Neighborhood)
First, group by year and neighborhood and then create a new dataframe of the mean values:

    mean_values = sfo_data.groupby([sfo_data.index, ""neighborhood""]).mean()
    mean_values.reset_index(inplace=True)
    
Then use HVPlot to create an interactive line chart of the Average Price/Sq. Foot, with a dropdown selector for the neighborhood:

    mean_values.hvplot.line(x=""year"", y=""sale_price_sqr_foot"", xlabel= ""Year"", ylabel=""Average Price/Square Foot"", groupby=""neighborhood"")

The above code results in the following interactive line chart:
![av_price_per_neighborhood](/Pics/av_price_per_neighborhood.png?raw=true)

### Top 10 Most Expensive Neighborhoods
![top_10_most_expensive](/Pics/top_10_most_expensive.png?raw=true)

### Parallel Coordinates Plot to Interactively Filter and Explore Various Factors Related to Sales Price

    # Parallel Coordinates Plot
    px.parallel_coordinates(ten_most_expensive_df, color=""sale_price_sqr_foot"", color_continuous_scale=px.colors.sequential.Inferno, title='Average House Value/Neighborhood', labels={'neighborhood': ""Neighborhood"", 'sale_price_sqr_foot':'Sales Price/Square Foot', 'housing_units':'Housing Units', 'gross_rent':'Gross Rent'})

The above code results in the following interactive parallel coordinates plot:
![parallel_cats](/Pics/parallel_cats.png?raw=true)

### Parallel Categories Plot to Interactively Filter and Explore Various Factors Related to Sales Price

    # Parallel Categories Plot
    px.parallel_categories(ten_most_expensive_df, color=""sale_price_sqr_foot"", color_continuous_scale=px.colors.sequential.Inferno, title='Average House Value/Neighborhood', labels={'neighborhood': ""Neighborhood"", 'sale_price_sqr_foot':'Sales Price/Square Foot', 'housing_units':'Housing Units', 'gross_rent':'Gross Rent'})

The above code results in the following interactive parallel coordinates plot:
![parallel_two](/Pics/parallel_two.png?raw=true)

### Average Value/Neighborhood utilizing MapBox API
First, calculate the mean values for each neighborhood:

    mean_neighborhoods = sfo_data.groupby(""neighborhood"").mean()
    mean_neighborhoods = mean_neighborhoods.reset_index()
    
Then join average values with the neighborhood locations (Lat/Long loaded in with MapBox API):
    
    values_and_locations_df = pd.concat([df_neighborhood_locations, mean_neighborhoods['sale_price_sqr_foot'], mean_neighborhoods['housing_units'], mean_neighborhoods['gross_rent']], axis=1).dropna()

Lastly, create a scatter plot through mapbox to analyze neighborhood info:

    map_plot = px.scatter_mapbox(values_and_locations_df, lat=""Lat"", lon=""Lon"", size=""sale_price_sqr_foot"", color=""gross_rent"", color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=3, width=1000, hover_name=""Neighborhood"", title=""Average Price/Square Foot and Gross Rent in San Francisco"")

The above code results in the following interactive MapBox visualization:
![mapbox](/Pics/mapbox.png?raw=true)",5,5,2,0,real-estate,"[dashboard, housing-market-analysis, hvplot, mapbox-api, plotly-express, pyplot, python-visualization, real-estate, san-francisco, visualization]",0
Strevitz,real-estate-website,,https://github.com/Strevitz/real-estate-website,https://api.github.com/repos/real-estate-website/Strevitz,React real estate website with Contentful CMS.,"# REAL ESTATE REACT WEBSITE
### Real estate responsive website with full functional apartment filters and Contentful CMS.

![propertie-video](https://user-images.githubusercontent.com/61030079/90961870-284f1280-e4ac-11ea-985f-7cbcd99613eb.gif)

## General info

This frontend application works together with this
[rails application](https://github.com/Strevitz)

## Tech info

- The real estate website was written in **React**. I used **Context API** for better data flow in application.
- In a project, I wanted to learn content flow and how to build simple filter components, apartments details. Also I learned how to use **React-Icons** to style icons directly in React components and **React-Hamburger** plug in.

![real-estate-presentation-laptop](https://user-images.githubusercontent.com/61030079/90545409-e579fb80-e188-11ea-9afa-0196b330ef3f.png)

![real-estate-presentation-phone](https://user-images.githubusercontent.com/61030079/90545469-fd517f80-e188-11ea-853c-898c13fa1948.png)

## Technologies

- Javascript
- Contentful
- React
- React Router
- React-Transition-Group
- React-icons
- Context API
- Bootstrap-React
- GSAP
- Jest

## Setup

To run this project, install it locally using npm:

```sh
$ npm install
$ npm start
```

## Link to app

Go to this [link](https://propertie.netlify.app/) and choose your favourite apartment.


## Link to Rails Application

[rails application](https://github.com/Strevitz/real-estate-website)
",5,5,1,1,real-estate,"[bootstrap, contentful, context-api, gsap3, javascript, react, react-icons, react-router, react-transition-group, real-estate]",0
lexiddie,d-fastighet-blockchain,,https://github.com/lexiddie/d-fastighet-blockchain,https://api.github.com/repos/d-fastighet-blockchain/lexiddie,Real Estate Smart Contract | Hyperledger Fabric,"# dFastighet Blockchain | Real Estate Smart Contract | Hyperledger Fabric

### [Presentation Slide Deck](https://github.com/lexiddie/d-fastighet-blockchain/blob/main/Slide%20Deck.pdf)

## What is dFastighet?

**dFastighet** is the application for real estate organizations to conduct transactions as Smart Contract using blockchain technology via **Hyperledger Fabric**. Moreover, dFastighet came from the word '**decentralized real estate**' in the **Swedish** Language.

When it comes to real estate transactions, it takes months and significantly slow processes. And it requires third parties or the middlemen like **brokers, banks, and lawyers**. Moreover, it will not eliminate the local government regulations as the guarantors. The real estate transactions will be on the smart contract executed into the Blockchain network with blockchain technology. As a result, it removes **bureaucracy, middlemen, and complete transparency**.

The transactions of the real estate will be able to speed up. **Smart-contract** makes it convenient to bind the digital ownership of the **property**, **documents**, and **contracts** swiftly into the blockchain network. The owner will be protected because their data are inside the blockchain network, and it is impossible to be **tampered** with or **altered**.

## [What is Hyperledger Fabric?](https://aws.amazon.com/blockchain/what-is-hyperledger-fabric/)

Hyperledger Fabric is an open-source, permissioned blockchain framework, started in 2015 by The Linux Foundation. It is a modular, general-purpose framework that offers unique identity management and access control features, making it suitable for various industrial applications such as track-and-trace of supply chains, trade finance, loyalty and rewards, and clearing and settlement of financial assets.

[Hyperledger Fabric](https://www.hyperledger.org/use/fabric) is intended as a foundation for developing applications or solutions with a modular architecture. Hyperledger Fabric allows components, such as consensus and membership services, to be plug-and-play. Its modular and versatile design satisfies a broad range of industry use cases. It offers a unique approach to consensus that enables performance at scale while preserving privacy.

## Benefits of Hyperledger Fabric

1. Open Source
2. Permissioned blockchain
3. Governance and Access Control
4. Performance

## Blockchain

The Blockchain is a digitally decentralized ledger, as we so-called data. Its primary technology provides a decentralized network without the trusted third party, secured using cryptography, and regulated under the consensus algorithm.

Blockchain is an immutable and irreversible chain. Moreover, most blockchains are distributed to their chains of the network, which fully peers to peers. Again, those networks are computers that do the computational equation as they are called nodes.

Blockchain provides an independent, tamperproof, transparent new platform to store, transmit securely, and process sensitive and valuable data.

Blockchain is only consisting of a list of validated blocks. Moreover, each block is connecting to its predecessor to the genesis block.

## Private Blockchain | Permissioned Blockchain

Private Blockchain is an innovation-only single organization network to have access and authority over the network. It is a partially decentralized system.

## Technology Stack and Tools

- React
- Redux
- JavaScript
- ExpressJS
- Google Cloud Platform
- Firebase
- Sass
- Docker
- Node.js
- Hyperledger Fabric (Test Network)
- Fabric Contract API
- Fabric Network
- Fabric Client

## Platforms

- **dFastighet App**: is written in JavaScript ES6 using ReactJS for Client-Side Application.
- **dFastighet Chaincode**: is written in JavaScript using Fabric Contract API. It dispatched the information of the business model and logic that govern assets on the blockchain ledger.
- **dFastighet Server**: is written in JavaScript using ExpressJS as a web service to facilitate data from the blockchain network into the client-side platform.

## Project Criteria and Requirements

1. The solution must have a front-end application (e.g., mobile application or web application) that directly interacts with the back-end Hyperledger Fabric platform. Optionally, it must be the web application that acts as a medium between the front-end application and Hyperledger Fabric to facilitate any necessary services.

2. The information must be carefully selected to store in or not in the Blockchain.

3. The solution must demonstrate with at least three organizations. Optionally, each organization can also have a different number of peers.

4. The solution must demonstrate the channel mechanism for peer-to-peer or more than three peers' interactions regarding the application concept.

5. It must be the fabric test network as the development base.

6. It must be demonstrated that when someone with an inconsistent wallet identity tries to request the contract, the system should respond unauthorize.

7. The demonstration of the system architecture illustration, including Hyperledger Fabric network architecture, in detail.

## Project Completions

1. Three Organizations (Org1, Org2, & Org3)
2. Two Channels (Shared Channel and Private Channel)
3. The integrity of data ownership
4. Web App, Web Service, Chaincode Smart-Contract
5. The assets like properties can be added to the blockchain network
6. The assets can be transferred to another owner
7. The previous assets' owners can be traced

## Members and Roles

1. SOKVATHARA LIN: Full-Stack Developer
2. MENH KEO: Back-End Developer

## Licenses

Content is released under the consent of the member who developed this very system. Any individual is allowed to use this project freely due to it has been open-sourced.
",5,5,1,0,real-estate,"[api-client, api-rest, docker, expressjs, firebase, firestore, gcp, google-cloud-platform, hyperledger, hyperledger-fabric, javascript, nodejs, react, real-estate, real-estate-smart-contract, redux, sass, smart, smart-contracts]",0
ovinueza,MortgageDelinquency,,https://github.com/ovinueza/MortgageDelinquency,https://api.github.com/repos/MortgageDelinquency/ovinueza,Machine Learning project to assess the probability of default for Single Family homes in the United States,"# Mortgage Modeling:
## Capstone Machine Learning Data Analytics Project

![Canueza](images/rice-cookers-project3.jpg)


## Team members: Lisa Cannon, Oswald Vinueza, Brian Labelle.

## Link: http://www.canueza.com/


# Data:
Fannie Mae Single-Family Acquisition and Performance data.
Files are released quarterly but contain monthly information. Each of the quarterly files (Acquisition and Performance) contains information on loans that originated in that quarter and all history to the most recent quarter.
Fannie Mae is the nickname of FNMA, the Federal National Mortgage Association. Fannie Mae was established in 1938 by congress as part of the New Deal to stimulate the housing market by making mortgage more attainable for low- and middle-income families. Fannie Mae does not originate loans, but it does back or guarantee them.

# Goal:
The goal of this project is to use Fannie Mae‚Äôs mortgage performance data to make predictions about a given customer. We want to forecast 1. the probability a borrower will go into default in the next quarter, 2. the probability a borrower will not pay their next mortgage payment, 3. how long until a borrower goes into default, and 4. how these trends vary geographically.

	Proposed Methods:
	
	1. The probability a borrower will go into default in the next quarter.
		a. Logistic regression on default indicator
		b. Other ML techniques
		c. Automate selecting best model‚Äîdisplay optimal model, graphics relevant to chosen model
		d. Chose state to build state level model
	
	2. The probability a borrower will not pay their next mortgage payment.
		a. Logistic regression on missed payment indicator
		b. Other ML techniques
		c. Automate selecting best model‚Äîdisplay optimal model, graphics relevant to chosen model
		d. State level
	
	3. How long until a borrower goes into default.
		a. Hazard model
		b. State level
	
	4. Forecast Visualization: Enter your info and get probability of default and time to default.
	
	5. Map Visualization: How these trends vary geographically.
	
	
# Inspiration:
The Federal National Mortgage Association (Fannie Mae) guarantees mortgages to stimulate lenders to assume the risk of extending a mortgage to a qualified borrower.  In order to qualify for a mortgage backed by Fannie Mae, borrowers must meet certain criteria that are strong indicators of their ability to pay the loan.  Despite choosing borrowers that meet criteria, sometimes, borrowers are not able to make regular payments on their loan and might even go into default. Lenders know there will be some loss involved in mortgage lending.  If the lender can predict how much loss they might incur, they can employ methods to hedge their losses.  

In this project we seek to provide a tool that will help a lender to determine if an individual account will default given certain origination information and current age.   

 
 # Analysis:  
The focus of this analysis is to develop a loan level model that predicts whether a borrower will default (miss 4 or more payments) on their mortgage based on origination nand performance information available through Fannie Mae.  

Model fitting began with logistic regression on a random sample of Fannie Mae data.  The resulting model had an accuracy score off 99.8%, which seems too good to be true.  When you look at the precision of both outcomes: default or not default.  There was not a single prediction of defaulting.  Thus, not defaulting was predicted with 100% accuracy, and defaulting was predicted with 0% accuracy.  This averaged out to a score of 99.8 because the number of defaults present in the data is very small.

In order to make predictions about defaulting, more observations of default are needed.  Because the model assumes independence among the observations and is not trying to make predictions about the population, but instead a single account, the proportion of loans that defaulted are sampled at a higher rate than loans that do not default.  

Running logistic regression using LogisticRegressionCV with the oversampled data provided better results.  While the accuracy number was still high, 91%, the precision of default was improved, though not ideal at 61%. 

A decision tree was fitted to the oversampled data set.  In order to see any significant splits that identified delinquency, the depth had to be set at at least 5.  At this depth, the tree is very complex, with 32 nodes, with only 5 of those nodes identifying default.

A random forest model was fitted using XGBoost provided a very accurate prediction of both defaulting and not defaulting (0 and 100%, respectively).

All fitted models seem to be most influenced by the age of a loan. As a loan ages, it's likelihood of defaulting increases.  This might be because once a borrower begins to miss payments, it becomes increasingly hard as time passes to right their account. As the borrower gets further away from the date they qualified for their loan, there is more opportunity for their credit score, or debt to income to change, thus providing more possibility for default as time passes.

 
# Conclusion:
Though several modeling techniques were investigated, the best models to provide a prediction of default were logistic regression and Random Forest using XGBoost.  Both models are used to provide a user with a prediction of default given information enter for an individual loan.


# What‚Äôs next for analysis?:   
![Canueza](images/futuredevelopment.jpg)

This initial analysis of the Fannie Mae data uses two modeling techniques to answer one question, whether a borrower will default.  There are more opportunities for analysis and prediction using this data.  There are also other methods and modifications to the existing analysis that might improve the prediction of default. 

_Further Default Prediction Analysis_
There are more modeling techniques that might provide better prediction of a borrower defaulting.    A Bayesian forecast technique could be implemented assuming a distribution on the current loan delinquency status from the previous month to predict whether a borrower will default. 
A RandomizedSearchCV method of random forest optimization is thought to yield more robust solutions than the XGBoost method that was used here.  It would be of interest to compare the accuracy of different random forest modeling methods.

_Data Enhancements_
This study focuses on a narrow timeline to draw conclusions about defaulting early in the life of a mortgage.  Defaulting is possible at any stage of a loan‚Äôs lifetime.  Including data over a broader timeline would create a more robust model could predict default in more mature mortgages.  
To better capture the regional differences in the economic wellbeing in the country, including an MSA level Case Shiller Index would provide another variable that likely has a high correlation with defaulting trends.

_Additional Questions the Data Can Answer_
While this study focuses on defaulting (missing 4 or more payments), an early look at delinquency could also be useful.  The likelihood of missing a payment given the current loan delinquency status could be modeled using a Bayesian Logistic Regression, where the current delinquency status has an assumed distribution.
Another outcome of interest is whether a loan will be prepaid.  It would be interesting to look at factors that are predictive of whether a borrower will prepay their loan.
Another way to look at the data is to consider how long it takes for a customer to default or miss a payment.  Estimating the time until default could be accomplished using a hazard survival model where defaulting is the event of interest and loans that do not default in the observed time period are considered censored. Considering 3 possible ways for a mortgage to end, payment until maturity, default, and prepay, a competing risk hazard model could predict the time until any event that might result in the loan not reaching maturity. 


-----------------------------------------------

# Data Management / Cleaning / Flask Coding

1. The Fannie Mae Single-Family Loan Performance Data was downloaded as CSV files from Fannie Mae website.

2. In the master dataset, we ensured referential integrity and brought the data to 3rd normal form. Referential integrity states that table relationships must always be consistent. In other words, any foreign key field must agree with the primary key that is referenced by the foreign key. Third normal form (3NF) is a normal form that is used in normalizing a database design to reduce the duplication of data and ensure referential integrity.

3. The data was cleaned using Python Pandas. We started by concatenating all years into a single Acquisition file and then filtering by Single Family, Principal Residence and Purchase Only, which helped us narrow the scope of this project. 
Afterwards, we selected the loans from the Performance data, based on the loan identifier from the cleaned Acquisition table. Due to the size of the files it was necessary to break down the selection and cleaning process first by quarter and then concatenating the files by year.
Finally, to start the machine learning process we took an oversample due to the low percentage of loans with delinquency.


4. AWS RDS ( Amazon Web Services ) was chosen as our cost effective data warehouse based on the amount of data that we would need to run through our machine learning models. The free tier Amazon Linux AMI 2018.03.0 (HVM) was selected based on the default image which includes AWS command line tools, Python, Ruby, Perl, and Java. The repositories include Docker, PHP, MySQL, PostgreSQL, and other packages.

![Canueza](images/001-aws-postgres-001.jpg)

5. Postgres PGAdmin was used to create the SQL tables, ACQ, PER ( Sample Data ), PEREXT ( full data )
6. Postgres PGAdmin was used to import the TXT files into the created SQL tables. This was done during the proof of concept phase. It would be easily configured to populate Postgres on AWS RDS directly from Pandas.



# Python Flask coding: 
Created the framework of the app.py, template/index.html, static/js/app.js files to connect to the ProgresSQL database and create a hello world template to build on.  


# Leaflet Loans Originated Map
	1. Leaflet 1.3.3, a JS library
	2. GeoJSON file was created based off of the Fannie Mae Dataset.
	3. Geometry obtained from https://www1.ncdc.noaa.gov/pub/data/nidis/geojson/us/base/unitedstates.geojson
	4. MapBox map layer is populated by 54 features. Each feature having 8 properties 
	   and geometry multi-polygon coordinates.

# Tableau Visualizations 
Tableau presentation plus additional graphs created from source data can be found [here](https://public.tableau.com/profile/oswald.vinueza#!/vizhome/Project3_15738645799510/FannieMaeDataOverview)

-----------------------------------------------

# Canueza Marketing | www.canueza.com 

	1. Domain name registration, project branded email addresses, hosted website.
	2. Search Engine Optimized website, Google Analytics, Google Submitted sitemap.xml & robots.txt. 
	3. Social Media accounts, Twitter, Linkedin Business Page, Youtube Channel & Facebook page.

1. As with any brand, you may have the best product or service but if no ones knows about you or can find you, there's no point. After uniquely naming our project, we immedately purchased the domain and secured a website hosting service on hostway.com.

![Canueza](images/004-hostway.jpg)

2. Email addresses were quickly created afterwards to facilitate communications between the team and create a source for any outside potential customers / employers to contact us via a professional corporate email address. First impression perception is everything.

![Canueza](images/005-google-analytics.jpg)

3. We implemented Google Analytics across all html pages inorder to track multiple dimensions. Oswald Vinueza's name ready shows up 5th out of 60k SERPS ( Search Engine Results Pages ) 

![Canueza](images/005-google-analytics2.jpg)

3. Social Media accounts were created including Twitter, Linkedin Corporate Pages, Facebook Pages. Even for this small project, SEO ( Search Engine Optimization) still helps us rank. If anyone 


![Canueza](images/006-twitter.jpg)


4. The entire site was also search engine optimized.

![Canueza](images/007-seo.jpg)

-----------------------------------------------

# TECHNOLOGY UTILIZED:

### Prerequisites

```
python-3.6.2
Flask-PyMongo 2.3.0
Flask-SQLAlchemy 2.4.0
gunicorn 19.9.0
Jinja2 2.10.1
psycopg2 2.8.3
SQLAlchemy 1.2.19
gunicorn 19.9.0
```

## Tools that were used to built this project:
```
* Visual Studio Code v1.39.2 - code development
* Adobe DreamWeaver v19.2.1 - Management & development of HTML files.
* Postgres pgAdmin v4.9 - SQL Table creation on Heroku
* Adobe Fireworks CS6 - Graphic editing

* Adobe Premiere Rush v1.2.8 - Video editing
* WinMerge v2.16.4 - easy side by side code comparison
* GitHub Desktop v2.2.1 - sharing code
* Tableau Tableau 2019.3
* Tableau Prep Builder 2019.3

* AWS Ubuntu Server 18.04 LTS (HVM), 
* Heroku - Platform as a Service -
* Heroku - PostGres Add-on v11 Data Store

* Ashton Responsive HTML Template from Theme Forest ( Envato.com )
* several video files from Envato.com
```


	



## Link to the project

 http://www.canueza.com/



",5,5,4,5,real-estate,"[acquisition, data-analysis, fannie-mae, machine-learning-algorithms, mortgage, real-estate]",0
marianaborgal,P001_RealEstate_Insights,,https://github.com/marianaborgal/P001_RealEstate_Insights,https://api.github.com/repos/P001_RealEstate_Insights/marianaborgal,Insights from a real state portfolio analysis,"# P001_RealEstate_Insights

<i>Se quiser ler sobre esse projeto em portugu√™s, [clique aqui](https://github.com/marianaborgal/P001_RealEstate_Insights/blob/main/Readme_EmPortugu%C3%AAs.md).</i>


This repository contains codes for the porfolio analysis of a real estate company. <br>
All information below is fictional.

#### Project 001 - Real Estate Insights
The objetives of this project are:
* Perform exploratory data analysis on properties available on dataset.
* Determine which properties should be purchased according to business criteria.
* Develop an online [dashboard](https://p001-realestate-insights.herokuapp.com/) that can be acessed by the CEO from a mobile or computer.
<br>

## 1. Business Problem
House Rocket business model consists of purchasing and reselling properties through a digital platform. The data scientist is in charge to develop a online dashboard so that the company's CEO can have an overview of properties available to became part of House Rocket portfolio in King County (USA).<br>

The [dashboard](https://p001-realestate-insights.herokuapp.com/) must contain:
   * Which properties the company should buy.
   * A map view with properties available.
   * A table view with attributes filters.
   * Expected profit of each property.<br><br>


**_Dashboard screenshot exemple:_**

<img src=""https://user-images.githubusercontent.com/77681284/152690550-fc5b1c2e-6cf6-4bb5-ae7d-0b19b936ac0d.png""/>


<!-- <img src=""https://user-images.githubusercontent.com/77681284/117519523-439a7900-af7a-11eb-8cf0-4900c78737e4.png"" alt=""image"" width=""200"" align=""right""/>
<img src=""https://user-images.githubusercontent.com/77681284/152690450-089c6833-edbe-4eb2-bfa6-261973611e3a.png"" alt=""dashboard screenshot"" width=""300""  align=""right""/> -->

## 2. Business Results
There are 21,436 available properties. Based on business criteria, 10,707 should be bought by House Rocket resulting on a US$1,2B profit.<br>
Maximum Value Invested: US$4,163,721,410.00<br>
Maximum Value Returned: US$5,412,837,833.00<br>
Maximum Expected Profit: US$1,249,116,423.00<br>

This results on a 30.0 % gross revenue.
<br><br>

## 3. Business Assumptions
* The data available is only from May 2014 to May 2015.
* Properties with bedrooms disproportional with interior living squarefoot were deleted, assuming it was a input error.
* Seasons of the year:<br>
   * Spring starts on March 21st<br>
   * Summer starts on June 21st<br>
   * Fall starts on September 23rd<br>
   * Winter starts on December 21st<br>
* Business criteria to determine whether a property should be bought are:
   * Property must have a 'condition' equals or bigger than 3.
   * Property price must be below or equal the median price on the region (zipcode)

<details><summary>The variables on original dataset goes as follows:</summary><br>

Variable | Definition
------------ | -------------
|id | Unique ID for each property available|
|date | Date that the property was available|
|price | Sale price of each property |
|bedrooms | Number of bedrooms|
|bathrooms | Number of bathrooms, where .5 accounts for a room with a toilet but no shower, and .75 or ¬æ bath is a bathroom that contains one sink, one toilet and either a shower or a bath.|
|sqft_living | Square footage of the apartments interior living space|
|sqft_lot | Square footage of the land space|
|floors | Number of floors|
|waterfront | A dummy variable for whether the apartment was overlooking the waterfront or not|
|view | An index from 0 to 4 of how good the view of the property was|
|condition | An index from 1 to 5 on the condition of the apartment|
|grade | An index from 1 to 13, where 1-3 falls short of building construction and design, 7 has an average level of construction and design, and 11-13 have a high quality level of construction and design.|
|sqft_above | The square footage of the interior housing space that is above ground level|
|sqft_basement | The square footage of the interior housing space that is below ground level|
|yr_built | The year the property was initially built|
|yr_renovated | The year of the property‚Äôs last renovation|
|zipcode | What zipcode area the property is in|
|lat | Lattitude|
|long | Longitude|
|sqft_living15 | The square footage of interior housing living space for the nearest 15 neighbors|
|sqft_lot15 | The square footage of the land lots of the nearest 15 neighbors|
</details>
<details><summary>Variables created during the project development goes as follow:</summary><br>

Variable | Definition
------------ | -------------
| decision | whether a property should be bought |
| median_price_zipcode | median price of zipcode region |
| selling_price_suggestion | 30% more on buying price, if property should be bought |
| expected_profit | difference between buying price and selling price suggestion  |
| dist_fromlake | distance from the center of Evergreen Point Floating Bridge |
| season | season property became available |
| med_autumn | median price from properties available during autumn  |
| med_spring | median price from properties available during spring |
| med_summer | median price from properties available during summer |
| med_winter | median price from properties available during winter |
| season_to_sell | in which season property should be sold |
</details>
<br>

## 4. Solution Strategy
1. Understanding the business model
2. Understanding the business problem
3. Collecting the data
4. Data Description
5. Data Filtering
6. Feature Engineering
8. Exploratory Data Analysis
9. Insights Conclusion
10. Dashboard deploy on [Heroku](https://p001-reale-insights.herokuapp.com/)
<br>

## 5. Top 3 Data Insights
1. The number of properties built with basements decreased after the 80s.
2. Almost 60% of the properties became available during summer/spring.
3. Properties selected to be bought in a 15km radius from lake correspond to 60% of expected profit.
<br>

## 6. Conclusion
The objective of this project was to create a online dashboard to House Rocket's CEO. Deploying the dashboard on Heroku platforms provided the CEO acess from anywhere facilitating data visualization and business decisions.
<br><br>

## 7. Next Steps
* Determine which season of the year would be the best to execute a sale.
* Get more address data to fill NAs.
* Expand this methodology to other regions that House Rocket operates.
<br>

---
## References:
* Dataset House Sales in King County (USA) from [Kaggle](https://www.kaggle.com/harlfoxem/housesalesprediction)
* Variables meaning on [Kaggle discussion](https://www.kaggle.com/harlfoxem/housesalesprediction/discussion/207885)
* <div>Icons made by <a href=""https://www.flaticon.com/authors/smashicons"" title=""Smashicons"">Smashicons</a> from <a href=""https://www.flaticon.com/"" title=""Flaticon"">www.flaticon.com</a></div>
* Python from Zero to DS lessons on [Youtube](https://www.youtube.com/watch?v=1xXK_z9M6yk&list=PLZlkyCIi8bMprZgBsFopRQMG_Kj1IA1WG&ab_channel=SejaUmDataScientist)
* Blog [Seja um Data Scientist](https://sejaumdatascientist.com/os-5-projetos-de-data-science-que-fara-o-recrutador-olhar-para-voce/)
",5,5,1,0,real-estate,"[data-analysis, data-science, data-visualization, insights, real-estate]",0
LucasBoscariole,React-Real-State-Website,,https://github.com/LucasBoscariole/React-Real-State-Website,https://api.github.com/repos/React-Real-State-Website/LucasBoscariole, Real State Website with Animation made with React and Styled components.,"# React Real Estate Website

Website made from scratch with React. The website has animations, icons, carousel and styled components.

-Mobile Speed Website: 93
-Desktop Speed Website: 98

The website form submition has been deleted to preserve the website speed. I'm going to made a project just that handle submition forms.

## Animations

Animations made with react reveal package.
Site for more information:

```
https://www.react-reveal.com/
```

## Carousel

Carousel made with react multi carousel package.
Site for more information:

```
https://www.npmjs.com/package/react-multi-carousel
```

## Icons

Icons from react icons package.
Site for more information:

```
https://react-icons.github.io/react-icons/
```

## Styled Components

Styled components from react styled components package.
Site for more information:

```
https://styled-components.com/
```

# Author

Design and coded by myself with React. Packages used: reveal, icons, styled, carousel.

Lucas Boscariole Silva
",5,5,1,0,real-estate,"[animation, carousel, carousel-slider, react, real-estate, responsive, reveal-js, styled-components]",0
CityOfPhiladelphia,property2,CityOfPhiladelphia,https://github.com/CityOfPhiladelphia/property2,https://api.github.com/repos/property2/CityOfPhiladelphia,Find information on real estate property in Philadelphia.,"# Property

[![Tested on BrowserStack](https://img.shields.io/badge/browserstack-tested-brightgreen.svg?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAACsUlEQVQokVWSTWwUZQCGn2%2B%2Bnd2d7XS7K1v6Q6WAaBoKklAMP0rcNBqWiMET0SskxEBAURLjBfZkPJAQWmOswkVjYnqiKiGALQ0NP0EIcjAg0gottNB26f7Odmfmm89TG31P7%2BF5bo%2FgP%2BvX%2FfKto31bmY3vV2O590VJIlKps5FS0Fv35roRkc06C6xYOLkvt3cyWTmh7wdve402411Jys0GNkWSUxXij%2Bw79S1N2brPTp9ZFJ9lM6%2FKfP5c%2BK7ZOvpGmsHMu9wImnjmgUWeDeavpNUQa25ZKpVq%2FST6wbc9QvccjExP3LhkPdJbxpdnOL%2FnEAMPKzy48gve%2BH2q7Wuo37Sdd2Kn2BW7wusPG%2F1k%2B4sZIzd9d1tYqS3lis2Tne8xWoHJn05g9h1jxa2LfLfKRI4McNPdyG03zMyyaqhWLB41dCT2EZ7Ci8bxUimCuVn0zUuIcBSzPs7fo2OI4Z%2BpuYrn8yEeWwGE1CaD%2BWLaB5Rw8P0SrzTGCSdSaOUz%2BWSSvq96cRNLWW1X0TrAV2CGRMQILWseMySYco78P0O8tDTB7sOf09KxFqvOZslrabr37aVD%2Fo4hBY1ljVCCkGyI9UgrciqWcGm6eoY%2F2iKs27iDzm9%2BoJzP4cZqTJcHmCg9oEv6rJyL4b0gnFD91uVn8zNTszhPU13FAoULP3K9awRpNwOK0swEQVBhveuTGXdJdLRRM4zLAsD5bd%2Bn8t7E8cJfTzF8eNwQ5l6zScmSWAhWFmq8XDVIrm9HJ%2BuqfhDtFgBa98va8OBJOZU74IxO4z93EF4AhsCImpitDcQ6W1ARs%2Br55odW99ffLyaH1sK99vEeUXOOaGe%2BQypFIDQh28IThhJCXvZ1%2BJiV7h35X6uL%2Fp9Z2y8WNiOj25BWp67NDaOMa18MHr%2BdzYpggfsXmkch023E8JUAAAAASUVORK5CYII%3D)](https://www.browserstack.com/)

Property is a client-side web application for aggregating open data about properties in the City of Philadelphia. All logic is in client-side JavaScript -- there is not server-side components outside of the open data APIs.

Property makes several AJAX calls, some of which are required to complete before the next one can happen. The flow happens like this:

1. Geocode user input expecting zero or more property results. These results include a summary of OPA and standardized address data.
2. With the OPA number, fetch the OPA details for a single property.
3. At the same time, use the Standardized Address to fetch the service area data from Socrata.

But a user can also share a link directly to a property which contains the OPA number in the query string. In this case, the flow happens like this:

1. With the OPA number, fetch the OPA details for a single property.
2. After the details have been fetched, then use the Standardize address to fetch the service area data from Socrata.

## Local Setup

Clone the repository
```
git clone git@github.com:CityOfPhiladelphia/property2.git
cd property2
```

Start a web server of your choosing. For example:
```
python -m SimpleHTTPServer
```

For python v3 users:
```
python3 -m http.server 9000
```

You're done! Go visit [http://127.0.0.1:8000](http://127.0.0.1:8000).

## Contributing

### Markup

Nearly all markup is in templates located in `index.html`, but note that some is generated in the JavaScript views.

### Application

All application setup logic is in `js/app.js`. This includes event bindings, templating, utilities, etc.

### Views

`js/front.js`
- for the landing page.

`js/results.js`
- for displaying zero or more than 1 results as a table.

`js/property.js`
- for showing all of the details for a single property.

## Deploying

Property is hosted on GitHub pages. To deploy:

1. Push a new feature branch to GitHub.
2. Create a Pull Request from your feature branch to the `gh-pages` branch.
3. Merge the Pull Request.
4. Open the cloudfront page under the PHL-OIT account and invalidate the cache so the changes will be reflected in the site.
5. Done!

## Supported Browsers

Test against each of these browsers, including mobile and print view, before deploying to production.

- IE9 and up
- Latest version of all other browsers
",5,5,15,46,real-estate,"[philadelphia, property, real-estate]",0
James-E-Adams,auction-results,,https://github.com/James-E-Adams/auction-results,https://api.github.com/repos/auction-results/James-E-Adams,realestate.com.au auction results csv generator,"# REA Auction Results CSV Generator

- Having a quick browse on https://www.realestate.com.au/auction-results/vic, there is no easy way to see a sorted-by-price list of sold properties from that weeks auction results. All the info is available in REA's not-so-public API (i.e if you watch HTTP traffic in the dev tools when you click to an auction-results page).

This is just a quick script to grab that data and generate a CSV that allows you to browse all the auction results for the last week, sorted however you want. I've only grabbed the data I'm interested in, but you can easily alter the map to include any extra info.

You could run this each week once the auction results are posted and browse by price.

## Usage

```
git clone git@github.com:James-E-Adams/auction-results.git
cd auction-results
yarn
yarn do
```

You'll get a `results.csv` and a `results.json`.

Then you can open the CSV in google sheets and sort however you like.

## Notes:

- I've set the delay between calls to 100ms to avoid getting throttled. Seems to be fine. I haven't actually been throttled but from experience it's pretty easy for this to happen.
- The script just does it for VIC but could easily be modified to do other states/all states if you generate the suburbs list (instructions in `src/index.js`).
",5,5,2,3,real-estate,"[auction, australia, csv, node, property, real-estate]",0
ReLLL,Real-Estate-Data-Analysis-with-Machine-Learning,,https://github.com/ReLLL/Real-Estate-Data-Analysis-with-Machine-Learning,https://api.github.com/repos/Real-Estate-Data-Analysis-with-Machine-Learning/ReLLL,"Real Estate Data Analysis / Machine Learning on the data scraped from sahibinden.com (Python, Antalya)","# Real-Estate-Data-Analysis-with-Machine-Learning

This project does real-estate analysis on the data scraped from a class-ads site.
* Mainly tries to find out square meter prices and any outliers (bargain real estate objects?) grouped by neighboorhood.
* Corrolation analysis on real estate paramaters. 

Used Python, Pandas, Sklearn (sci-kit learn)
Data: Antalya Emlak

Example images from some of the analysis included in the Jupyter Notebook

![alt text](https://raw.githubusercontent.com/ReLLL/Real-Estate-Data-Analysis-with-Machine-Learning/master/img/img1.png)

![alt text](https://raw.githubusercontent.com/ReLLL/Real-Estate-Data-Analysis-with-Machine-Learning/master/img/img2.png)

![alt text](https://raw.githubusercontent.com/ReLLL/Real-Estate-Data-Analysis-with-Machine-Learning/master/img/img3.png)

![alt text](https://raw.githubusercontent.com/ReLLL/Real-Estate-Data-Analysis-with-Machine-Learning/master/img/img4.png)

",5,5,3,0,real-estate,"[analysis, data, machine-learning, ml, python, real-estate]",0
FeeSimple,data-manager,FeeSimple,https://github.com/FeeSimple/data-manager,https://api.github.com/repos/data-manager/FeeSimple,Scatter powered frontend the interacts with FeeSimple core smart contracts.,"# Development Instructions

For development, we need a testnet and node with http api endpoint enabled. You can run your own and edit the `start-react` script inside `package.json`, but for these instructions we will assume there is a node/http endpoint available at `138.197.194.220:8877` and connect to it. The chain Id used is: `1c6ae7719a2a3b4ecb19584a30ff510ba1b6ded86e1fd8b8fc22f1179c622a32`.

Remember to run `yarn format` to automatically tidy up javascript code with [standardjs](https://standardjs.com/).

On the project root:

1. `yarn`
2. Duplicate `.env.example` and rename it to `.env`. Set variables, if any.
3. `yarn start`

# Production Instructions

For production, run the `build` script with `yarn build`. Then, start the server by running the `prod` script with `yarn run prod`.
",5,5,3,25,real-estate,"[blockchain, eosio, eosjs, real-estate]",0
mminer237,metes-unbounded,,https://github.com/mminer237/metes-unbounded,https://api.github.com/repos/metes-unbounded/mminer237,Convert metes and bounds legal descriptions into a visible shape,"# [<img src=""/favicon.ico"" style=""image-rendering: pixelated; vertical-align: bottom; width: 32px;""> Metes Unbounded](https://metesunbounded.com/)
Convert metes and bounds legal descriptions into a visible shape

[![Netlify Status](https://api.netlify.com/api/v1/badges/2d428550-2bcb-48ef-a630-592c36655fd0/deploy-status)](https://app.netlify.com/sites/metes-unbounded/deploys)

‚ö†Ô∏è This tool is very much a work in progress and still under construction. üöß  
Most functions are still unimplemented so most legal descriptions will not be drawn.
",4,4,1,0,real-estate,"[legal, real-estate, website]",0
collinbarrett,rent-v-buy,,https://github.com/collinbarrett/rent-v-buy,https://api.github.com/repos/rent-v-buy/collinbarrett,A localized rent v. buy calculator with sensible defaults from public data sources.,"# Localized Rent v. Buy Calculator
A localized rent v. buy calculator with sensible defaults from public data sources.

## The Calculator (Under Construction)
The calculator is under construction over [here](https://docs.google.com/spreadsheets/d/15leNPqR-D0E16nTlrJLwrjyS8Q2ZzBjYXCK2ttQExyk/edit?usp=sharing). It has a long ways to go, but feel free to take a look.",4,4,1,0,real-estate,"[api, finance, google-apps-script, google-sheets, investing, investment, javascript, personal-finance, personal-finances, real-estate]",0
Deed3Labs,DeedProtocol,Deed3Labs,https://github.com/Deed3Labs/DeedProtocol,https://api.github.com/repos/DeedProtocol/Deed3Labs,"A Decentralized Protocol for the Registration, Purchase, Leasing and Management of Real Assets and other Property (e.g. land, real estate, vehicles, equipment, etc.) ","# The Deed Protocol - Universal Real Asset Registration & Management

## Overview

The Deed Protocol is a comprehensive, open-source blockchain framework built on Ethereum, allowing users to register, lease, and sell real-world assets such as properties, vehicles, and commercial equipment. Using Non-Fungible Tokens (NFTs) via ERC721 and ERC1155 standards, these assets are represented digitally as DeedNFTs. This groundbreaking protocol offers a blend of seamless digital transactions with rigorous legal compliance.

## Features

- **Universal Property Registration**: The Deed Protocol simplifies registration of any real-world asset, be it properties, vehicles, or commercial equipment. Every registered asset is represented by a unique DeedNFT, which legally signifies the ownership of the asset.

- **Efficient Leasing and Sales**: By leveraging blockchain technology, The Deed Protocol provides a secure, transparent and efficient platform for leasing and selling properties. It meticulously handles every transaction, including deposits, rent payments, and transfer of ownership.

- **Legal Compliance**: Ensuring utmost legality, each DeedNFT under The Deed Protocol represents a bona fide agreement between the involved parties. All transactions are further fortified with traditional off-chain agreements.

- **Interoperability**: DeedNFTs promote an inclusive ecosystem where they can be freely traded. Additionally, they are compatible with any platform that supports ERC721 or ERC1155 tokens.

- **Decentralized Governance**: The Deed Protocol is governed by a community-oriented Decentralized Autonomous Organization (DAO), where decisions are made collectively.

## Architecture

- **Blockchain-Based Smart Contracts**: The Deed Protocol employs blockchain-based smart contracts for transactions, including registration, leasing, and sales of properties, ensuring transparency and immutability.

- **Legal Framework**: The Deed Protocol integrates a legal framework comprising traditional off-chain agreements that supplement on-chain transactions, ensuring legal binding and compliance.

- **Royalties and Fees**: The Deed Protocol incorporates a robust system for managing transfer fees and royalties, securing a portion of all secondary sales for the original property registrant or the platform itself.

## Installation

As an Ethereum-based protocol, interacting with The Deed Protocol requires a compatible Ethereum wallet such as MetaMask.

1. **Install MetaMask**: Install the [MetaMask](https://metamask.io/download.html) extension on your browser.
2. **Connect to Ethereum Network**: Configure MetaMask to connect to the desired Ethereum network where The Deed Protocol is deployed.

## Usage

- **Interact with DeedNFTs**: Once you have MetaMask set up and connected, you can interact with DeedNFTs. Whether you're registering a new property or trading an existing one, all you need is to submit transactions through MetaMask following the instructions provided by The Deed Protocol interface.

- **For Developers**: Developers interested in contributing to The Deed Protocol can clone the repository, install the required dependencies, and start exploring. Make sure you have Node.js, npm, and Truffle installed and correctly set up.

## Contributing

The Deed Protocol encourages community participation and contribution. Check out our open issues and pull requests, and read more about contributing to The Deed Protocol in the [CONTRIBUTING.md](CONTRIBUTING.md).

## License
The Deed Protocol is licensed under a dual license structure:

- AGPL-3.0 License (see the [LICENSE](LICENSE) file in the repo) for non-commercial use.
- Commercial License for commercial use (please contact us for more details).

This means that you can clone, modify, and distribute the code for non-commercial purposes under the conditions of the AGPL-3.0 license. However, for commercial use, a separate license is required.
",4,4,3,7,real-estate,"[defi, lease-management, property-management, protocol, real-estate]",0
harundogdu,real-estate-nextjs,,https://github.com/harundogdu/real-estate-nextjs,https://api.github.com/repos/real-estate-nextjs/harundogdu,"This project is my real estate site application that I developed using Next.js, create-next-app and Chakra UI.","# Next.js ve Chakra UI ile Emlak Ugulamasƒ±

Bu proje [Next.js](https://nextjs.org/) , [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) ve [Chakra UI](https://chakra-ui.com/) kullanƒ±larak geli≈ütirdiƒüim emlak sitesi uygulamamdƒ±r.

## Kullanƒ±lan Paketler

<ul>
  <li>@chakra-ui/icons</li>
  <li>@chakra-ui/react</li> 
  <li>@emotion/react</li> 
  <li>@emotion/styled</li> 
  <li>@tatjsn/react-slick</li> 
  <li>html-react-parser</li> 
  <li>axios</li> 
  <li>framer-motion</li> 
  <li>nprogress</li> 
  <li>react-icons</li>
  <li>react-slick</li>
  <li>slick-carousel</li>
  <li>next</li>
</ul>

## Kurulum

ƒ∞lk olarak a≈üaƒüƒ±daki komutu kopyalanƒ±z. 
<br />
Ardƒ±ndan terminal ekranƒ±nƒ± a√ßarak, projenin kurulmasƒ±nƒ± istediƒüiniz bir alana gelerek yapƒ±≈ütƒ±rƒ±p √ßalƒ±≈ütƒ±rƒ±nƒ±z.

```
git clone https://github.com/harundogdu/real-estate-nextjs.git
```
<br />
Klonlama i≈üleminin ardƒ±ndan terminal ekranƒ±na istediƒüiniz projenin adƒ±nƒ± yazarak, a≈üaƒüƒ±da bulunan kodu yapƒ±≈ütƒ±rƒ±p √ßalƒ±≈ütƒ±rƒ±nƒ±z.

```
cd real-estate-nextjs && npm install 
```

## √áalƒ±≈ütƒ±rma

Proje dizininde a≈üaƒüƒ±daki komutu √ßalƒ±≈ütƒ±rarak projemizi ba≈ülatabiliriz.


```bash
npm run dev
# or
yarn dev
```

Uygulamayƒ± geli≈ütirme modunda √ßalƒ±≈ütƒ±rƒ±r.\
Projeyi tarayƒ±cƒ±da g√∂r√ºnt√ºlemek i√ßin [http://localhost:3000](http://localhost:3000) adresini a√ßar.

D√ºzenleme yaparsanƒ±z sayfa yeniden y√ºklenir.\
Herhangi bir hata veya log kaydƒ±nƒ± da anlƒ±k olarak konsol ekranƒ±nda g√∂rebilirsiniz.

## Daha fazlasƒ±

Daha fazlasƒ± ve aklƒ±nƒ±za takƒ±lan herhangi bir soru i√ßin i√ßin bana ki≈üisel [web sitem](https://harundogdu.dev/) √ºzerinden ula≈üabilir, ""Pull Request"" isteklerinde bulunabilirsiniz.
",4,4,1,0,real-estate,"[chakra-ui, nextjs, real-estate]",0
daattali,cashflow-calculation-extension,,https://github.com/daattali/cashflow-calculation-extension,https://api.github.com/repos/cashflow-calculation-extension/daattali,"Cashflow Calculator extension for Zillow, Trulia, and Redfin (works in Chrome/Firefox/Edge)","# Rental Cashflow Calculator Plugin for Zillow/Trulia/Redfin (Chrome / Firefox / Edge extension)

> *Copyright 2020 [Dean Attali](https://deanattali.com)*

_Install the [Chrome extension](https://chrome.google.com/webstore/detail/cashflow-calculator-for-z/oacadllhimmkndjnofmfoijbiimcmhni) or [Firefox add-on](https://addons.mozilla.org/en-CA/firefox/addon/rental-cashflow-calculator/) or [Edge add-on](https://microsoftedge.microsoft.com/addons/detail/cashflow-calculator-for-z/nelhihbndkjkfnegoakeomfnnbdclmdo)_

As an investor, when browsing on Zillow/Trulia/Redfin, you often want to analyze each deal to see how the monthly cashflow and yearly return would look like. This extension adds a button to each property that allows you to easily start analyzing that deal on [cashflowcalc.com](https://cashflowcalc.com/).

**If you enjoy my work (or just want to get special perks!), you should [support me on GitHub](https://github.com/sponsors/daattali).**


<p align=""center"">

<a style=""display: inline-block;"" href=""https://paypal.me/daattali"">
<img height=""35"" src=""https://camo.githubusercontent.com/0e9e5cac101f7093336b4589c380ab5dcfdcbab0/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f74776f6c66736f6e2f70617970616c2d6769746875622d627574746f6e40312e302e302f646973742f627574746f6e2e737667"" />
</a>
<a style=""display: inline-block; margin-left: 10px;"" href=""https://github.com/sponsors/daattali"">
<img height=""35"" src=""https://i.imgur.com/034B8vq.png"" /> </a>

</p>

## Installation

Go to the [Chrome extension store](https://chrome.google.com/webstore/detail/cashflow-calculator-for-z/oacadllhimmkndjnofmfoijbiimcmhni) or [Firefox add-ons page](https://addons.mozilla.org/en-CA/firefox/addon/rental-cashflow-calculator/) or [Edge add-on](https://microsoftedge.microsoft.com/addons/detail/cashflow-calculator-for-z/nelhihbndkjkfnegoakeomfnnbdclmdo) to instantly install with one click.

## Screenshots

[![](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/zillow1.png)](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/zillow1.png)

[![](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/zillow2.png)](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/zillow2.png)

[![](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/trulia.png)](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/trulia.png)

[![](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/cashflowcalc1.png)](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/cashflowcalc1.png)

[![](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/cashflowcalc2.png)](https://github.com/daattali/cashflow-calculation-extension/blob/master/img/doc/cashflowcalc2.png)

---

To see my other projects, visit [deanattali.com/projects](https://deanattali.com/projects)
",4,4,4,0,real-estate,"[chrome-extension, firefox-addon, real-estate]",0
fgrillo89,real-estate-scraper,,https://github.com/fgrillo89/real-estate-scraper,https://api.github.com/repos/real-estate-scraper/fgrillo89,"A library for scraping real estate websites built on asyncio, aiohttp, and Beautiful Soup ","# real-estate-scraper

Welcome to the Real Estate Scraper library! This library provides a simple and flexible way to extract real estate listings from a specified website. With just a few lines of code, you can customize a scraper for a specific website and start collecting data on properties in your desired location.

The library offers two modes of scraping: shallow and deep. Shallow scraping retrieves basic information on listings directly from the search results page of the website, such as the price, address, living area, and number of rooms. Deep scraping, on the other hand, retrieves the individual webpages dedicated to specific listings and extracts all the details from those pages, including the energy label, status, year of construction, and full description of the listings.

The Scraper class is the main interface for scraping data. It allows users to specify the necessary configurations for a specific website and provides functionality to limit the number of active requests and requests per second, as well as parse and save the scraped data. The library also includes utility functions for timing function execution and logging.

To use the library, you'll need to create a ScraperConfig object with the necessary configurations for the website you want to scrape. The ConfigObject class is a base class for objects representing configuration data, and the Item class represents a single item with a name and type. The WebsiteConfig class stores the settings for a specific website, such as its name, main URL, and a URL template for searching listings in a specific city. The NamedHouseItems class is a dictionary-like class for storing and accessing named items, which is used to store the items to be scraped from the website. Finally, the ScraperConfig class combines all of these components to store the configurations for a specific scraper.

For the time being, the library already provides a fully configured scraper for the Dutch and Italian real-estate markets. To use it, you can import the get_funda_scraper function from the funda_scraper.py module. This module includes all the necessary configurations and functions to scrape the listings from the website funda. Here is an example of how to use it:

```python
from real_estate_scraper.countries.netherlands.funda_scraper import get_funda_scraper

# create an instance of the Scraper class tailored to www.funda.nl
scraper = get_funda_scraper()

""""""
scrape 'deep' the first 3 results pages for the city of Rotterdam, 
and store the results in a DataFrame. Because there are 15 listings per results page, 
this will scrape 45 websites 
""""""
df = scraper.download_to_dataframe(city='Rotterdam', pages=[1, 2, 3], deep=True)

>>> df.columns
Index(['Address', 'LivingArea', 'Price', 'href', 'PostCode', 'PlotSize',
       'Rooms', 'HouseId', 'url_shallow', 'page_shallow', 'url_deep',
       'TimeStampShallow', 'PricePerSquareMeter', 'PriceDeep', 'OriginalPrice',
       'ListedSince', 'Status', 'Acceptance', 'HouseType', 'BuildingType',
       'YearOfConstruction', 'RoofType', 'LivingAreaDeep',
       'OtherSpaceInBuilding', 'ExteriorSpaceAttached', 'ExternalStorageSpace',
       'PlotSizeDeep', 'Volume', 'RoomsDeep', 'Bathrooms',
       'BathroomFacilities', 'Stories', 'Facilities', 'EnergyLabel',
       'Insulation', 'Heating', 'HotWater', 'Ownership', 'Location', 'Garden',
       'BackGarden', 'ShedOrStorage', 'ParkingFacilities', 'Neighbourhood',
       'Description', 'TimeStampDeep'],
      dtype='object')

>>> df.shape[0]
45

>>> df.Price[0:5]
0    ‚Ç¨ 375, 000 k.k.
1    ‚Ç¨ 775, 000 k.k.
2    ‚Ç¨ 465, 000 k.k.
3    ‚Ç¨ 359, 000 k.k.
4    ‚Ç¨ 400, 000 k.k.
Name: Price, dtype: object

# scrape 'deep' the first 3 results pages for the city of Rotterdam and store the results in a SQLite database
scraper.download_to_db(city='Rotterdam', pages=[1, 2, 3], shallow_batch_size=5, deep=True)
```
",4,4,1,0,real-estate,"[asynchronous-programming, data-science, python, real-estate, regex, scraper, sqlite]",0
pH-7,Free-Text-Search,,https://github.com/pH-7/Free-Text-Search,https://api.github.com/repos/Free-Text-Search/pH-7,This full-text search allows users to search real estate properties (present in Daft.ie) by just speaking or typing what their want. The engine will then parse and translate the words and return the correct data.,"# Simple Free Text Property Search


## Description

Free Text Search Engine for the Irish Estate Properties using the [Daft.ie API](http://api.daft.ie).

The Engine translates what the user are looking for and transforms the input string into a string requests and then will send that request to the Daft.ie API.

The script also offers the voice speech recognition thanks HTML5 & JavaScript speech-input.


In this script, I use:

* PSR0 to PSR4 coding standards
* Formatted/documented code
* DRY (Don't Repeat Yourself) principle
* OOP code (including PHP Interfaces & Traits (PHP 5.4 specification)
* *spl_autoload_register* (which is very useful with PHP namespaces)
* View/Controller pattern
* Singleton pattern (even if not necessary...)
* PHP alternative syntax for the template (which makes the visibility easier)
* Class member access on instantiation (PHP >= 5.4)
* Short Array syntax (PHP >= 5.4)
* Using SOAPClient


## Search Query Examples

* 2 or 3 bed to rent between 1000 and 2000
* 3 bedrooms to buy in Dublin
* 2 or 3 beds apartment to rent in Cork around 400 and 600 euro
* 4 bedroom house to let in Galway for 1000 around 900 and 14000 per month


## Specification

* Search Type (Rental/Sale)
* Price (Min-Max)
* Bedroom (Min-Max)
* Property Types (house, apartment, site)
* House Types (terraced, semi-detached, detached, end-of-terrace, townhouse)
* Retrieve Areas from the API
* Retrieve Counties from the API
* Each search term has its own Class and is getting back by the ""Parser"" class and included by *spl_autoload_register()* SPL function
* HTML5 **speech-input** search
* Displayed the property results thanks to Daft's API


## Other Coding Convention

In addition of using the **PSR** and **PHP Pear**, I use my own for the naming of the variables

Here are the variable prefixes:
* a = Array
* i = Integer
* f = Float, Double
* b = Boolean
* s = String
* o = Object
* m = Mixed
* r = Resource
* c = 1 Character (I used only sometime that, as char is not a PHP valid type)

Following the ""*letter type* lower case, the variable name is in UpperCamelCase (e.g., $a**MyVariable**)


## Server Requirements of the Web App

*Application Server* PHP 5.4.0 or higher.

*PHP Extension* SOAPClient


## Other Requirements

* A Valid [Daft API Key](https://github.com/pH-7/Free-Text-Search/blob/master/Engine/Config.php#L20)


## About Me

I'm **Pierre-Henry Soria**, IT developer and passionate about e-businesses and marketing.


## Where to contact me?

You can by email at **pierrehenrysoria [[AT]] gmail [[D0T]] com**


## License

The script is under [Creative Commons Attribution 3.0](http://creativecommons.org/licenses/by/3.0/) license or later; See the LICENSE.txt file.
",4,4,3,0,real-estate,"[api, daft, daftie, free-text, free-text-search, free-text-searching, freetext, full-text, full-text-search, ireland, listings, php, properties, properties-api, property, property-listings, real-estate, soap, speech, text-search]",0
juanidiaz,PropertyPal_2,,https://github.com/juanidiaz/PropertyPal_2,https://api.github.com/repos/PropertyPal_2/juanidiaz,FULL STACK site: a Real Estate solution for direct selling Owner-Client. App deployed in Heroku,"# PropertyPal
## Real Estate solution for direct selling Owner-Client ##
![FLIP.IMG](./public/images/property-pal-logo-horiz-blk.png)

See the project [live](https://idiaz-propertypal.herokuapp.com)!

> **Cretaed by**
- Tony Green (https://github.com/AnthonyVerde)
- Tariq Medina (https://github.com/TariqMedina)
- Juan I Diaz (jdi@idiaz.ca)

> **Date:** March 2019

> ## Project Description

This project is a fully functional and fully mobile responsive site deployed in [Heroku](https://idiaz-propertypal.herokuapp.com). The idea behind this site is to provide owners to post their properties in a place where potential buyers can look for them without the need of a third party (realtor).

The project is based on **node.js** and **express.js**. The back end is backed by a **MySQL Database** and **Sequelize** as the ORM. The aplication has been deployed in **Heroku** using their **JewsDB** database application.

> ## Building tools
- **FRONT END**
    - HTML, CSS
    - Javascript and jQuery
    - Bootstrap

- **BACK END**
    - node.js
    - Express
    - ORM
    - MySQL / JawsDB MySQL
    - Handlebars

- **Deployment**
    - Heroku

>**Screenshots**

*Landing page - Mobile*
![03](./other/mobile_landing.png)

*Landing page - Mobile*
![04](./other/mobile_search.png)

*Client login modal - Mobile*
![02](./other/mobile_clientModal.png)

*Client page - Mobile*
![01](./other/mobile_client.png)

*Client page - Web*
![07](./other/web_client1.png)

*Client page - Web*
![08](./other/web_client2.png)

*Site administrator's page - Web*
![05](./other/web_admin1.png)

*Site administrator's page - Web*
![06](./other/web_admin2.png)

*Owner edit page - Web*
![09](./other/web_editOwner.png)

*Property edit page - Web*
![10](./other/web_editProperty.png)


>## QUESTIONS OR COMMENTS
- Feel free to contact the developers:
    - Tony Green @ <anthony.green.creative@gmail.com>!
    - Juan I Diaz @ <jdi@idiaz.ca>!
- See the **depolyed** project [live](https://idiaz-propertypal.herokuapp.com)",4,4,1,0,real-estate,"[bootstrap4, example, express, fullstack, funtional, handlebars, heroku, javascript, jawsdb, mvc-framework, mysql, nodejs, npm, orm, portfolio, project, real-estate, realtorca, responsive-web-design, sequelize]",0
NilsOle,valuespots,,https://github.com/NilsOle/valuespots,https://api.github.com/repos/valuespots/NilsOle,Interactive map for spatial distance scores,"# Amsterdam value spots

With this app, you can easily find out where in Amsterdam the true valueable spots for housing are. 

Try the app:
[https://www.nilsole.net/valuespotter_app/index.html](https://www.nilsole.net/valuespotter_app/index.html)

![](screenshot.png)

## Distance scores

This works by measuring the distance between each building and certain value marks, such as the closest Starbucks store or the closest access to the motorway.

These ""distance scores"" tell you exactly which streets and buildings match your needs.

## Create your custom score

You can also combine your custom needs and create your individual score. By calculating the weighted mean distance for a multitude of value marks, the app will help you find your perfect spot to live.

## Data sources

[NL Extract](https://data.nlextract.nl/bag/csv/): The locations of houses and addresses were taken from this dataset (as of November 8, 2017).

## Future to-do's

* Include the code for generating the initial distance variables (such as Starbucks distance and NS IC train station distance).

* Add more data for the heatmap (currently limited to Amsterdam city).

* Increase app performance when using a high raster resolution.

* Make the UX more intuitive (particularly the creation of the custom score).

* Improve documentation.
",4,4,1,0,real-estate,"[amsterdam, gdal, geospatial, heatmap, kadaster, leaflet, maps, r, raster, real-estate, shiny]",0
manjurulhoque,laravel-real-estate,,https://github.com/manjurulhoque/laravel-real-estate,https://api.github.com/repos/laravel-real-estate/manjurulhoque,Laravel Real Estate Application,,4,4,2,0,real-estate,"[laravel, real-estate]",0
louistransfer,kajin,,https://github.com/louistransfer/kajin,https://api.github.com/repos/kajin/louistransfer,A simple Jinka wrapper written in Python.,,4,4,1,2,real-estate,"[api-wrapper, real-estate]",0
AbhiSaphire,Django-RealEstate-WebApp,,https://github.com/AbhiSaphire/Django-RealEstate-WebApp,https://api.github.com/repos/Django-RealEstate-WebApp/AbhiSaphire,Online Property Booking System,"# Django-RealEstate-WebApp

![GitHub issues](https://img.shields.io/github/issues/AbhiSaphire/Django-RealEstate-WebApp?style=for-the-badge)
![GitHub stars](https://img.shields.io/github/stars/AbhiSaphire/Django-RealEstate-WebApp?style=for-the-badge)

## Requirements
<li>Django==2.2.10</li>
<li>Pillow==5.2.0</li>
<li>psycopg2==2.7.5</li>
<li>psycopg2-binary==2.7.5</li>
<li>pytz==2018.5</li>

## Installation
<li>Create a virtual environment</li>
<li>Install requirements.txt file in your environment</li>
<li>Use the package manager [pip](https://pip.pypa.io/en/stable/) to install requirements file.</li>


```bash
  pip install -r requirements.txt
```

## Usage

```bash
python3 manage.py makemigrations
```


```bash
python3 manage.py migrate
```


```bash
python3 manage.py runserver
```

## NOTE
For detailed working and specification of this project check ProjectReport.

## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

Please make sure to update tests as appropriate.

## License
[MIT](https://choosealicense.com/licenses/mit/)
",4,4,1,1,real-estate,"[abhisaphire, django-project, psycopg2, real-estate, web-application]",0
imFORZA,re-pro,imFORZA,https://github.com/imFORZA/re-pro,https://api.github.com/repos/re-pro/imFORZA,"Real Estate Pro by imFORZA - Widgets, Badges, and tools for Real Estate Websites. ","# Real Estate Pro

Widgets, Badges, and tools for Real Estate Websites.

[![Code Climate](https://codeclimate.com/repos/5813d86e995ea7007d00340e/badges/915bd36495e2a0007e2c/gpa.svg)](https://codeclimate.com/repos/5813d86e995ea7007d00340e/feed)
[![Test Coverage](https://codeclimate.com/repos/5813d86e995ea7007d00340e/badges/915bd36495e2a0007e2c/coverage.svg)](https://codeclimate.com/repos/5813d86e995ea7007d00340e/coverage)
[![Issue Count](https://codeclimate.com/repos/5813d86e995ea7007d00340e/badges/915bd36495e2a0007e2c/issue_count.svg)](https://codeclimate.com/repos/5813d86e995ea7007d00340e/feed)
[![Build Status](https://travis-ci.org/imFORZA/re-pro.svg?branch=master)](https://travis-ci.org/imFORZA/re-pro)
[ ![Codeship Status for imFORZA/re-pro](https://app.codeship.com/projects/492614b0-d6d5-0134-dcb2-760971575778/status?branch=master)](https://app.codeship.com/projects/202882)
[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/imFORZA/re-pro/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/imFORZA/re-pro/?branch=master)
[![Code Coverage](https://scrutinizer-ci.com/g/imFORZA/re-pro/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/imFORZA/re-pro/?branch=master)
[![Build Status](https://scrutinizer-ci.com/g/imFORZA/re-pro/badges/build.png?b=master)](https://scrutinizer-ci.com/g/imFORZA/re-pro/build-status/master)
[![codebeat badge](https://codebeat.co/badges/8f63d134-7c17-4a7e-accd-4336bfe4656c)](https://codebeat.co/projects/github-com-imforza-re-pro)
[![Codacy Badge](https://api.codacy.com/project/badge/Grade/2c3a00a64b274e5a8d2240e282864f0c)](https://www.codacy.com/app/imFORZA/re-pro?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=imFORZA/re-pro&amp;utm_campaign=Badge_Grade)

## Features

### Zillow

With a Zillow module you can start to bring in Zillow features right into your website.

### Equal Housing

- Display the Equal Housing Logo

### Google Maps

- Display a single listing using a shortcode or a widget.
- Easy custom styling for maps.

### Homes.com

- Commute Time Widget
- Featured Listing Widget
- Home Values Widget
- Search Widget
- Mortgage Calculator Widget
- Simple Search Widget
- Tall Search Widget
- Check for widgets
",4,4,9,23,real-estate,"[plugin, real-estate, wordpress, wordpress-plugin, zillow]",0
senior-dev-1019,RealEstateReact,,https://github.com/senior-dev-1019/RealEstateReact,https://api.github.com/repos/RealEstateReact/senior-dev-1019,,"# Real Estate React client üèòÔ∏è

## What's this project is about

- [üî• Deployed Version üî•](https://desolate-refuge-17574.herokuapp.com/)

Real estate for sale & for rent website. Real estate website's visitors can easily filter their searches by type, location, price, and other predefined and custom criteria. Each property goes with a detailed description, community and property features, location, price, and a great image gallery.
Buyer of real estate can find contacts of seller. In case seller enabled online appointment feature for advertisement - buyer can fill in form to make online appointment request.

**Disclaimer:**
This project was merely a learning exercise as well as my first sizeable project delving into React, Redux & other used technologies.

## Readme Content

- [Technologies Used](https://github.com/senior-dev-1019/RealEstateReact/tree/feat/readme-update#technologies-used)
- [Terms & Conditions](https://github.com/senior-dev-1019/RealEstateReact#terms--conditions)
- [Project Goals](https://github.com/senior-dev-1019/RealEstateReact#main-goals-of-this-project)
- [Installation & Setup Guide](https://github.com/senior-dev-1019/RealEstateReact/tree/feat/readme-update#installation--setup-guide)
- [App Screens](https://github.com/senior-dev-1019/RealEstateReact/tree/feat/readme-update#app-screens)
- [Basic Mockups for Project](https://github.com/senior-dev-1019/RealEstateReact/tree/feat/readme-update#basic-mockups-for-project)
- [Datastructure for db](https://github.com/senior-dev-1019/RealEstateReact/tree/feat/readme-update#datastructure-for-db)

## Technologies Used

- [React](https://reactjs.org/)
- [Redux](https://redux.js.org/)
- [Redux-Thunk](https://github.com/reduxjs/redux-thunk)
- [GitHub](http://github.com)
- [Express](https://expressjs.com/)
- [PostgresQL](https://www.postgresql.org/)
- [Docker](https://www.docker.com/)
- [react-moment](https://github.com/headzoo/react-moment#readme)
- [Leaflet](https://leafletjs.com/)
- [Cloudinary](https://cloudinary.com/)
- [Cloudinary-React](https://cloudinary.com/documentation/react_integration)

## Terms & Conditions

This project was created in 2 and a half weeks. React Site & API Server was built as Portfolio project, after a Full-Stack Developer cource: [Codaisseur](https://codaisseur.com/).

## Main goals of this project:

- Create Full Stack App independently
  - Using new knowleges from Full Stack course
  - Finding and using new technologies for specific tasks
- Brainstorm idea
- Create Wireframes & Datastructure
- Train Git Usage
  - Work on different branches
  - Create regular PR
  - Write a small summary when you make a PR
  - Create regular commits
  - Make sure latest working version is always on the master branch
- Finish the exististing functionality and polish
- Style Project
- Deploy project

## Installation & Setup Guide

- git clone git@github.com:senior-dev-1019/RealEstateReact.git
- cd RealEstateReact
- npm install
- npm run start

**_To run on local machine, API server should run on same local machine, using port: 4000_**

- API server link: - [API server](https://github.com/senior-dev-1019/RealEstateServer)

## Deployment Guide

**_Before deployment API link should be changed in actions, and on payment page(CheckoutForm.jsx)._**

---

# Datastructure for db

#### Advertisement

![Advertisement data structure](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/advert-data-table.png?raw=true)

- isForSale: Boolean,
- isForRent: Boolean,
- realEstateType: TEXT - can select from categories

- adress
- postcode
- city
- price
- Year of construction
- year of last renovation
- Living space
- Number of rooms/bedrooms/bathrooms
- description
- Status: Available/sold
- Energy label
- Heating
- Warm water - Boiler/central
- Location Description
- Garden - optional
- Type of parking

Extras(especially for rent):
e.g.:
optical internet
free parking
city view/nature view / cannal view
air conditioner
bath

#### User

username: TEXT,
password: TEXT,
email: TEXT,
phoneNumber: Text,

#### User roles

![User Roles](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/user-roles-updated.png?raw=true)

## Calendar

Used to make a new appointment:

Each calendar event has:

- hasOne Customer
- hasOne Seller
- date: Date
- time: time
- message: TEXT
- customer PhoneNumber
- customer Email
- canceledByCustomer: Boolean
- canceledBySeller: Boolean



## App Screens

#### User Roles

![User Roles](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/ready-screens/manager-agent-roles.gif?raw=true)

- Manager of Company can activate and suspend accounts of company agents.
- Company Agent can not log in to site, after registration (while manager have not confirmed account)
- Company Agents can use Company Balance to add new advertisements
- Company manager can Top Up Balance for all company

#### Top Up Balance using Stripe

![Top Up Balance using Stripe](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/ready-screens/top-up-balance-stripe.gif?raw=true)

#### One step to add your Advertisement

![One step to add your Advertisement](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/ready-screens/Easy-to-add-advert.gif)

#### Upload Images to your Advertisement

![Upload Images to your Advertisement](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/ready-screens/image-upload.gif?raw=true)

#### Add Extras to your Advertisement & Check finished Advertisement

![Add Extras to your Advertisement & Check finished Advertisement](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/ready-screens/add-extras+overview.gif?raw=true)

#### Check Main Page & Search for Advertisements

![Check Main Page & Search for Advertisements](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/ready-screens/main-page&search.gif?raw=true)

## Basic Mockups for Project

#### Image of Single advertisement page

![Image of Single advertisement page](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/One_Advertisement_page.png?raw=true)

#### Image of Search Page

![Image of Search Page](https://github.com/senior-dev-1019/RealEstateReact/blob/master/images/Search_page.png?raw=true)
",4,4,1,0,real-estate,"[npm, postgresql, react, real-estate, redux]",0
Nasdin,GA_machine_learning_projects,,https://github.com/Nasdin/GA_machine_learning_projects,https://api.github.com/repos/GA_machine_learning_projects/Nasdin,"A collection of Machine learning projects provided by coursework in GA, 2017",,4,4,2,0,real-estate,"[data-science, housing-data, indeed, machine-learning, properties, real-estate, salaries]",0
finngreig,rentcheck,,https://github.com/finngreig/rentcheck,https://api.github.com/repos/rentcheck/finngreig,A tool for checking New Zealand residential rent prices,"# üèòÔ∏è Rent Check NZ
[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/B0B5L2WE9)

This project is a web application that helps users determine if their rent is too high compared to similar properties in their area. The app uses data from New Zealand's Ministry of Business, Innovation and Employment (MBIE) Tenancy Services and Addressfinder API to look up residential addresses.

## Table of Contents

- [Methodology](#methodology)
- [Features](#features)
- [Getting Started](#getting-started)
  - [Prerequisites](#prerequisites)
  - [Installation](#installation)
- [Usage](#usage)
- [Deployment](#deployment)
- [Built With](#built-with)

## Methodology

This web application conducts a comparison of a user's rent to the general rent levels in their area to determine whether their rent is higher than typical. Here is how it's achieved from a statistical perspective:

1. User inputs their current rent, the number of bedrooms, and their property address. The system identifies the property from its database using the input address.

2. A request is sent to the server with the user's information. The server then fetches comparable rental data for similar properties (same number of bedrooms) in the same geographical area. 

3. This comparable data is analyzed, and three primary statistics are calculated: 
    - The **upper quartile** (75th percentile), which is the value below which 75% of the data falls.
    - The **median** (50th percentile), which is the middle value of the data.
    - The **lower quartile** (25th percentile), which is the value below which 25% of the data falls.

4. For each of these statistics, a comparison is made between the user's rent and the calculated values. This is done by simply subtracting the user's rent from each of these values. This results in three differentials, one each for the upper quartile, median, and lower quartile. If the differentials are positive, this indicates the user's rent is below the corresponding value. If they're negative, the user's rent is above that value.

5. Another statistic calculated is the interquartile range above the upper quartile (IQR above UQ), which is the degree to which the user's rent exceeds the 75th percentile. An IQR above UQ of 1.5 or greater is considered significantly high and triggers a warning message suggesting the rent may be unusually high.

This way, users can compare their own rent to that of similar properties in the same area and understand whether they're paying an average, below average, or above-average rent. It's worth noting that the higher the user's rent is above the median and quartiles, the more they are paying compared to other renters in the area.

## Features

- Address autocomplete using Addressfinder API
- Rent comparison based on Tenancy Services data
- Visual presentation of the user's rent compared to the upper quartile, median, and lower quartile of similar properties in the area
- Display a message if the user's rent is significantly higher than the median rent, informing them that the Tenancy Tribunal might consider an application for rent adjustment

## Getting Started

Follow these instructions to set up the project on your local machine for development and testing purposes.

### Prerequisites

- Node.js (v14.x or later)
- npm (v6.x or later)

### Installation

1. Clone the repository:
   ```
   git clone https://github.com/your-username/rent-too-damn-high.git
   cd rent-too-damn-high
   ```

2. Install dependencies:
   ```
   npm install
   ```

3. Create a `.env` file in the root directory and add your API keys for MBIE Tenancy Services:
   ```
   ENVIRONMENT=development
   MBIE_CONSUMER_KEY=your_mbie_consumer_key
   MBIE_CONSUMER_SECRET=your_mbie_consumer_secret
   ```

4. Start the development server:
   ```
   npm run dev
   ```

The application should now be running on `http://localhost:3000`.

## Usage

Users enter their residential address, monthly rent, and the number of bedrooms in their property. The app then compares the user's rent to the upper quartile, median, and lower quartile of similar properties in the area, displaying the results in a table.

## Deployment

This project is deployed on [Vercel](https://vercel.com). To deploy your own instance, follow these steps:

1. Create a new project on Vercel and link it to your GitHub repository
2. Add the `MBIE_CONSUMER_KEY` and `MBIE_CONSUMER_SECRET` environment variables in your Vercel project settings
3. Trigger a deployment by pushing your changes to GitHub

## Built With

- [Tailwind CSS](https://tailwindcss.com/)
- [jQuery](https://jquery.com/)
- [jQuery UI](https://jqueryui.com/)
- [MBIE Tenancy Services API](https://www.tenancy.govt.nz/about-tenancy-services/data-and-statistics/)
- [Addressfinder API](https://addressfinder.nz/)
",4,4,1,0,real-estate,"[addressfinder, housing, jquery, new-zealand, real-estate, rent-analysis, rent-prices, statistics, tailwindcss, tenancy-services, web-app]",0
imhimansu28,real-e-state,,https://github.com/imhimansu28/real-e-state,https://api.github.com/repos/real-e-state/imhimansu28,This project is designed to manage the properties and realtors for a real estate company,"#  Real EState Project In Django

### Overview
This project is designed to manage the properties and realtors for a real estate company. The key features of this project are:

- Property Listing: Users can view all the available properties with their details like price, location, type, and other features.
- Realtor Management: Admin users can add, update, and delete realtors who are responsible for the properties.
- Property Management: Admin users can add, update, and delete properties with all their details.
- Buy and Sell Query: Users can send queries to the admin users for buying or selling properties.

### Installation
To clone this project from GitHub, follow these steps:

1. Open your terminal or command prompt.
2. Navigate to the directory where you want to clone the project.
3. Run the following command: `git clone https://github.com/imhimansu28/real-e-state.git`
4. Once the project is cloned, navigate to the project directory using `cd real-e-state`.
5. Create a virtual environment using `python -m venv env`.
6. Activate the virtual environment using `source env/bin/activate` on Linux/Mac or `.\env\Scripts\activate` on Windows.
7. Install the project dependencies using `pip install -r requirements.txt`.

### Usage
To run this project, follow these steps:

1. Navigate to the project directory using `cd real-e-state`.
2. Activate the virtual environment using `source env/bin/activate` on Linux/Mac or `.\env\Scripts\activate` on Windows.
3. Run the following command to migrate the database: `python manage.py migrate`.
4. Create a superuser account using `python manage.py createsuperuser`.
5. Run the development server using `python manage.py runserver`.
6. Open your web browser and navigate to `http://localhost:8000/admin` to access the admin panel.
7. Use your superuser account credentials to log in to the admin panel.
8. You can add, update, or delete realtors and properties from the admin panel.
9. To view the property listing page, navigate to `http://localhost:8000/listings`.
10. To send a query for buying or selling a property, navigate to `http://localhost:8000/contact`.
",4,4,1,1,real-estate,"[django, django-framework, linux, postgresql, python, pythondjango, real-estate]",0
mo7amedaliEbaid,housing-organizer,,https://github.com/mo7amedaliEbaid/housing-organizer,https://api.github.com/repos/housing-organizer/mo7amedaliEbaid,"A Flutter App for organizing real estates selling and renting, The user can make a post about his product or buy from what is available.","# Housing Organiser

A Flutter App for organizing real estates selling and renting, The user can make a post about his product or buy from what is available.

### Demo Video
<a href=""https://youtu.be/j4xNA7GwT2s?si=yBQzMbZxKteoZIKO""><img src=""https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Logo_of_YouTube_%282015-2017%29.svg/2560px-Logo_of_YouTube_%282015-2017%29.svg.png"" width=""170""></img></a>


### Backend

Firebase

",5,5,1,0,real-estate,"[cloud-firestore, dart, firebase, flutter, flutter-firebase, housing, image-picker, mvvm-pattern, real-estate]",0
hassan-ademola,Washington-Housing-Prices-Predictions,,https://github.com/hassan-ademola/Washington-Housing-Prices-Predictions,https://api.github.com/repos/Washington-Housing-Prices-Predictions/hassan-ademola,"A machine learning project that explores and predicts the prices of houses in Washington, USA","# Washington Housing Prices

<p align='center'><img src='images/houses.jpg' alt='houses'/></p>
The valuation of residential properties can take a huge chunk of time. Machine learning models can be used in production to assist real estate agents in swiftly estimating house values based on several house properties. On the consumer side, it promotes transparency by allowing home buyers to view current and historical property details.

## Objective
The goal of this project is to forecast house values in Washington based on the characteristics of these properties.

## About The Data
- The Data contains 4600 entries and 16 columns including the house prices
- There are 3 non-numerical columns and 13 numerical columns
- There are no missing values in the data
- The average house price in the dataset is 551,963
- The least price in the dataset is $0 while the most expensive house costs 26,590,000
- The oldest house was built in year 1900 while the newest house was built in 2014

## Data Preprocessing
The data was split into train and test sets (in the ratio 3 to 1) before passing the train set through the following proprocessing stages:
- Outliers Removal: two extreme values were removed
- Feature Extraction and Engineering: new features were created from existing features (e.g the **quadrant** and **road_type** columns were created from the **street** feature
- Feature Scaling: Skewed features were normalized while  wide-range features were simply scaled
- Category Encoding: Some categorical features were dummy encoded while ordinal categories were used directly
The whole preprocessing steps were bundled into a single pipeline

## Model Training and Evaluation
Linear and Tree-based models were trained on the preprocessed data. The gradient boosting algorithms produced encouraging results, with CatBoostRegressor outperforming the others on unseen data with an error of around 93,000. Most of the models suffered from overfitting.

## Conclusion
**Size, location, condition, and amenities** are some of the most important considerations for home purchasers when determining which property to buy.
<p align='center'><img src='images/top_features.png' alt='top_features'/></p>

## Next Steps
- The models could benefit from hyperparameters tuning
- Wrapping everything in docker to make the work reproducible
- Productionizing the final model
",4,4,2,0,real-estate,"[adaboost, catboost, extratreesregressor, house-price-prediction, housing, housing-data, housing-prices, lgbm, lightgbm, real-estate, regression, regression-models, washington, washingtondc, xgboost]",0
ibrahimtalaa04,Amaas,,https://github.com/ibrahimtalaa04/Amaas,https://api.github.com/repos/Amaas/ibrahimtalaa04,"A real estate development company that builds and sells a variety of properties with high quality, extended warranties and competitive prices.We strive to achieve the highest structural specifications and choose the best building materials to reach high community standards and win consumer satisfaction.",,3,3,2,0,real-estate,"[company, company-website, real-estate]",0
lutfullahcelenk,lutfullah-real-estate,,https://github.com/lutfullahcelenk/lutfullah-real-estate,https://api.github.com/repos/lutfullah-real-estate/lutfullahcelenk,It is a Real-Estate Site with TailwindCSS. Live Demo : https://lutfullah-realestate.netlify.app/,"Live Demo : https://lutfullah-realestate.netlify.app/

## A SHORT VIEW OF APPLICATON

<img src=""https://media.giphy.com/media/a9KSzZK7ni28Wi8VIm/giphy.gif"" width=""300"" height=""400m"" />
",3,3,2,0,real-estate,"[react-router, reactjs, real-estate, tailwindcss]",0
amajji,Streamlit-Dash,,https://github.com/amajji/Streamlit-Dash,https://api.github.com/repos/Streamlit-Dash/amajji, Streamlit Dashboard for visualizing U.S. real estate data and market trends,"# üî• Streamlit Dashboard for visualizing U.S. real estate data and market trends
Data scientist | [Anass MAJJI](https://www.linkedin.com/in/anass-majji-729773157/)
***

This Dashboard was developped using Streamlit. Several open-source packages are used to process the data and generate the visualizations, e.g.,[pandas](https://pandas.pydata.org/), [geopandas](https://geopandas.org), [leafmap](https://leafmap.org), [matplotlib](https://matplotlib.org/) and [pydeck](https://deckgl.readthedocs.io).



<p align=""center"">
 <img src=""streamlit.png"" width=""350"" />
</p>


# üöÄ Repository Structure

- **README.md :** The top level README for reviewers of this project.
- **static directory :**  The folder contains the input data for purchase and refinance loans as well as the files used to geocode the adresses of granted loans. 
- **multiapp.py :** The class multiapp is used to create many pages.
- **requieremnent :** all requiered packages to launch the dashboard. 
- **Others directory :** contains images/logos used in the readme.  

# üí• Demonstration 

You can find a deployed version of this app [here](https://amajji-streamlit-dash-streamlit-app-8i3jn9.streamlit.app/)


# :mailbox_closed: Contact
For any information, feedback or questions, please [contact me][anass-email]





[anass-email]: mailto:anassmajji34@gmail.com",3,3,2,0,real-estate,"[dashboard, real-estate, streamlit, streamlit-application, streamlit-dashboard, streamlit-webapp]",0
estated,api,estated,https://github.com/estated/api,https://api.github.com/repos/api/estated,,"# Real Estate API


### Usage

Build env:

```bash
make build
```

UP all in containers:
```bash
make dev
```

UP Node in host and deps in containers:
```bash
make start
```

Event to elastic
```bash
make event-consumer
```
```bash
make user-projections
```

### GraphQL example

`http://localhost:3001/graphiql`

**Get User**

```
{
  user(uuid: ""efa48501-e187-4f17-9c71-3ea9cdb4e795""){
    email
    uuid
  }
}
```
**Get Users**

```
{
  users {
    email
    uuid
  }
}
```

**Create User**

```
mutation {
  createUser(uuid:""efa48501-e187-4f17-9c71-3ea9cdb4e795"", email:""demo@demo.com"")
}
```

### Tools

- Rabbit Admin: http://localhost:15672
- Kibana: http://localhost:5601 
",3,3,2,0,real-estate,"[domain-driven-design, event-sourcing, graphql, nodejs, real-estate]",0
Ashutosh102,RealTor_real_Estate,,https://github.com/Ashutosh102/RealTor_real_Estate,https://api.github.com/repos/RealTor_real_Estate/Ashutosh102,"Find Real Estate on web using API with ReactJS, NextJS and Chakra UI","# Real Estate App

![Real Estate](https://i.ibb.co/jTW4bFC/image.png)
![image](https://user-images.githubusercontent.com/75971776/184678649-fe9ff5ff-a849-4735-aa1a-2850f3388472.png)
![image](https://user-images.githubusercontent.com/75971776/184679022-fdd037b2-fb6c-442a-acdf-71e0854239fb.png)
",3,3,1,0,real-estate,"[api, nextjs, nextjs-template, rapidapi, reactjs, real-estate, router]",0
jersonmartinez,RealEstate,,https://github.com/jersonmartinez/RealEstate,https://api.github.com/repos/RealEstate/jersonmartinez,This is a Real Estate project written in PHP.,"# RealEstate
This is a Real Estate project written in PHP.
",3,3,1,0,real-estate,"[bienes-raices, bootstrap, mysql, php, real-estate]",0
SudeepRed,Decentralised_Real_Estate_Marketplace,,https://github.com/SudeepRed/Decentralised_Real_Estate_Marketplace,https://api.github.com/repos/Decentralised_Real_Estate_Marketplace/SudeepRed,Decentralised Real-Estate Marketplace. People can buy/sell the property securely on the blockchain. They can also list their properties for rent.,,3,3,2,0,real-estate,"[blockchain-technology, ethereum-contract, real-estate]",0
stereopickle,real_estate_prediction,,https://github.com/stereopickle/real_estate_prediction,https://api.github.com/repos/real_estate_prediction/stereopickle,"Time Series Forecasting of the housing price in Queens using the SARIMA, Facebook Prophet, and the LSTM","# Queens Real-Estate Prediction
The main goal of this project is to identify areas in Queens with the highest real-estate investment potentials using time series forecasting.

## Structure
- `001.Data_Cleaning.ipynb` code to clean and subset data. Generate percent increase values
- `010.Exploratory_Data_Analysis.ipynb` code for basic EDAs
- `020.Model_Evaluation.ipynb` code to evaluate various models (SARIMA, Facebook Prophet, LSTM)
- `030.Forecasting.ipynb` steps to review the forecasts from the chosen model (SARIMA)
- `SCRIPT` a folder containing all scripts with functions used in notebooks
- `PNG` a folder containing all images used on this REAME

## Data
Data was sourced from [Zillow](https://www.zillow.com/research/data/). Our data contains location information along with the Zillow Home Value Index (ZHVI, $) for time series as old as 1996. (According to Zillow, ZHVI is ""A smoothed, seasonally adjusted measure of the typical home value (35th - 65th percentile range) and market changes across a given region and housing type."") Generally, the ZHVI is referred to as 'housing price' or 'average housing price' throughout this repo.

I capped the time periods to be since September 2003 because that's when all zipcodes in Queens started to provide data. Our final dataset had 203 monthly home values for each zipcode in Queens (September 2003 ~ August 2020). The last 40 months were used as a test set.

In order to compared the the growth trend across areas with different housing values, I used the percent increase of housing price at each time point instead of the actual housing price. 

![all_percent_increase.png](PNG/all_percent_increase.png)  
**Percent Increase (All Zipcodes)**

Out of 54 zipcodes in Queens, I selected 4 zipcodes that deviates the most from the overall average, and 1 zipcode that is closest to the overall average to represent the majority. The select zip-codes are '11101', '11693', '11692', '11694', '11103'. 

## EDA

![all_housing_price.png](PNG/all_housing_price.png)  
**Housing Price (All Zipcodes)**

We can see that the housing prices in Queens are generally following similar upward trend with a very few exceptions.  
Average percent increase is about 0.3%, average ranging from -1.85% to 2.09% depending on the zipcodes. Overall the minimum value is -2.76% and the maximum value is 3.12%.


![average price increase](PNG/avg_percent_increase.png)  
**Average Percent Increase**

This plot shows the average price increase (%) across all Queens. We can see that there was a price bubble early 2000s, then the prices started to drop during 2007-2008 recession. Since then it's been steadily growing at around 0.5% each month, until the recent COVID-19 outbreaks. 


![total_percent_increase](PNG/total_percent_increase.png)  
**Total Percent Increase**

This map shows overall the areas closer to Manhattan (e.g. LIC) have shown the higher total percent increase.


![price_growth_10_yrs.png](PNG/price_growth_10_yrs.png)  
**Price Growth in the Past 10 Years**

The fixed price growth in zipcodes bordering other boroughs reflect the recent developments in these areas.


## Model Evaluation
Our data overall showed a strong yearly seasonality. Some zipcodes had non-stationary data. All zipcodes showed tailing off ACF and PACF, so I decided to use SARIMA. Additionall, I looked at the Facebook Prophet and the stacked Long Short Term Memory (LSTM) deep learning neural network. For the baseline model, I used the historic average and the persistence algorithm, which predicts the last observed value to be the following value. 

Here are some example predictions from these models (for 11101, LIC)...
#### SARIMA
![11101_SARIMA](PNG/11101_SARIMA.png)

#### Facebook Prophet
![11101_FBP](PNG/11101_FBP.png)

#### LSTM
![11101_LSTM](PNG/11101_LSTM.png)

| zipcode | historic avg | persistence | SARIMA | FB_Prophet | LSTM | 
| --- | --- | --- | --- | --- | --- |
| 11101 | 0.552 | 0.209 | 0.170 | 0.242 | 0.280 | 
| 11693 | 1.116 | 0.801 | 0.589 | 1.550 | 0.676 |
| 11692 | 1.006 | 0.853 | 0.538 | 2.227 | 0.785 |
| 11694 | 0.491 | 0.228 | 0.201 | 1.602 | 0.231 |
| 11103 | 0.316 | 0.315 | 0.222 | 0.791 | 0.303 |
|**TOTAL** | 3.479 | 2.406 | **1.720** | 6.412 | 2.221 | 

SARIMA model had the least amount of RMSE, which was an improvement from the baseline model. (Average percent increase per month per zipcode is about 0.3%)

## Forecasting
Finally, I used the SARIMA model to forecast the percent increase of housing prices in these five zipcodes.

![forecast_percent_increase](PNG/forecast_percent_increase.png)

Our model is forecasting that the price for 11693 (Rockaway Beach) will likely to continue to stay increasing even though the rate of price increase might not stay as high as it currently is. On the other hand, the prices for 11103 (Astoria) and 11101 (LIC) are at a bit of plateau right now, but will start to increase going forward. Given how Astoria had the trend closest to the overall Queens, these two neighborhoods will likely to follow similar growth pattern as the overall Queens. On the other hand, the forecast shows that prices for areas right around the Rockaway Beach (11694 and 11692) but not the central rockaway beach will likely to drop for a while.

![forecast_housing_price](PNG/forecast_housing_price.png)

We can see that popular areas with already high housing price like LIC and Astoria are likely continue to go up at a similar rate so worth investing into if the budget is high. On the other hand, the rockaway beach area is a growing neighborhood with lower average housing price that will likely to do well in the future. But other rockaway areas that are not around the central rockaway beach is forecasted to decrease.


",3,3,1,0,real-estate,"[deep-learning, facebook-prophet, forecasting, lstm, real-estate, sarima, time-series]",0
simonlehmann,Group3-Real-Estate-Site,,https://github.com/simonlehmann/Group3-Real-Estate-Site,https://api.github.com/repos/Group3-Real-Estate-Site/simonlehmann,"Real Estate trading site - Diploma in Programming, Semester 1, 2016 @ North Metropolitan TAFE","# PropertyDome
## :clipboard: Project Information

The above project represents the semester 1 group project for the 2016 Diploma of Software Development class.

This project is live at [http://group3.centralapp.com.au](http://group3.centralapp.com.au)

## :copyright: Copyright

Copyright is held by North Metropoplitan TAFE, see the [license](https://github.com/slehmann36/Group3-Real-Estate-Site/blob/master/LICENSE.md)

",3,3,8,2,real-estate,"[ecommerce, nmtafe, real-estate, ruby-on-rails]",0
danielacraciun,scrape-rec,,https://github.com/danielacraciun/scrape-rec,https://api.github.com/repos/scrape-rec/danielacraciun,Real estate data gathering and notification,"## Quick get started guide:
1. Create your Python virtualenv
2. Run this:
```
docker run -e POSTGRES_USER=postgres -e POSTGRESS_PASSWORD=<pass> -e POSTGRES_DB=ads -p 5345:5432 -d postgres
```
3. (Optional) Get a Telegram Bot token & add it to `.env`
4. Complete the `.env` as needed. Run `export $(cat .env)`
5. Run your scraper with: `scrapy crawl <scraper_name>

## Quick note:
This makes use of a notification bot, through the `SpiderBotCallback`, you can disable it in the settings if you want no bot interaction (just data gathering).

# Deployment:
Remember to set database and bot specific variables as environment variable before starting! Open .env file and complete it, then run `source .env`

Database:
- POSTGRES_PASSWORD
- POSTGRES_HOST (if needed)
- POSTGRES_PORT (if needed)

Bot:
- BOT_USER_SETTINGS_FILE
- BOT_TOKEN


#### Zero to hero steps:
1. Install the following:
    * git
    * docker
    * run-one (optional)
2. Clone the repository
3. Build the scraper docker image
4. Create pgdata and httpcache docker volumes

Run scrapers manually:
1. Install:
    * pip
    * virtualenvwrapper
2. Create python3 virtualenvironment
3. Install requirements.txt

## Docker

### Create volumes:
    docker volume create pgdata
    docker volume create httpcache

### Build the docker image:
    # Build the image for all scrapers
    docker build -t scraper .
    
    # Build the image for running individual scrapers
    docker build -f Dockerfile-single-spider -t single_scraper .

### To run postgres only (on other port but same volume):

Please see the docker_env.list file and set the following:
    
    POSTGRES_USER=postgres
    POSTGRES_PASSWORD=<pass>
    POSTGRES_DB=realestate            // database name
    PGDATA=/var/lib/postgresql/data   // postgres docker volume mount point

Then, you can use this command to start the postgres instance with the path to the env file:

    docker run --env-file ""<path/to/docker_env.list>""  -p <exposed port>:5432 -d postgres

### To run scrapers only (make sure you have postgres and httpcache volume up first):
    docker run --network=host -v httpcache:/var/lib/httpcache/ scraper

### Restoring psql backups
    cat <dump_name>.sql | docker exec -i <docker-postgres-container> psql -U postgres -W -d realestate
    
### To rescrape all urls from httpcache (you need to edit the spider name in Dockerfile-only-httpcache first):
    docker build -t scraper_only_httpcache . -f Dockerfile-only-httpcache
    docker run --network=host -v httpcache:/var/lib/httpcache/ scraper_only_httpcache


## Crontab    

### Make sure the current user is in the docker group, add it if needed:
    sudo usermod -aG docker $USER

### Make sure you have run-one installed, this is used to ensure that only one instance of the scraper is running at any given time
    sudo apt-get install run-one

### Optional: If you have the virtualenv created you can run the python script
    python setup_crontab.py

### This is the crontab command, set this in a user's crontab (the user must be in the docker group):
    To run all scrapers you need only this line:
    * * * * * run-one docker run --network=host -v httpcache:/var/lib/httpcache/ scraper
    To run individual scrapers you'll need one of these for each scraper:
    * * * * * run-one docker run --network=host -v httpcache:/var/lib/httpcache/ -e spider_name=<spider name> single_scraper

    Don't forget the backup script!
    * * * * * run-one /path/to/backup.sh

### Disclaimer:

This software and the data gathered/being sent is for my personal use only. I am not responsible for any damages cause by proper/improper use of the software.
This software is in development phase and subject to change. 
Any data retrieved or stored does not contain any personal identifying information. Please contact me concerning data usage clarification/requests of removal.
",3,3,4,2,real-estate,"[docker, python, real-estate, scraping, telegram-bot]",0
bogatykh,estate-cms,,https://github.com/bogatykh/estate-cms,https://api.github.com/repos/estate-cms/bogatykh,Real Estate CMS built using ASP.NET Core,"# estate-cms
Real Estate CMS built using ASP.NET Core

[![Build Status](https://travis-ci.org/bogatykh/estate-cms.svg?branch=master)](https://travis-ci.org/bogatykh/estate-cms)
[![codecov](https://codecov.io/gh/bogatykh/estate-cms/branch/master/graph/badge.svg)](https://codecov.io/gh/bogatykh/estate-cms)
",3,3,2,0,real-estate,"[cms, real-estate]",0
mdcnuydt,data-science,,https://github.com/mdcnuydt/data-science,https://api.github.com/repos/data-science/mdcnuydt,Data science tools for real estate. Python focused.,"# Intro

I am a big believer in the potential of modern data science techniques to improve real estate investment analysis. Quantitative analysis is already being used by the biggest hedge funds and investment banks and I believe that, as more and more data becomes available, the biggest asset class in the world is ready to benefit from these same techniques. 

Sound judgement and expert financial modelling will always remain important (for that you can check [my other repo](https://github.com/mdcnuydt/financial-modelling)). However, more data driven assumptions are crucial to enhance that analysis.

This repo contains some datasets I've played around in my free time and are solely intended for personal use. A big thanks to the guys at [Property Quants](https://propertyquants.com) who's course taught me many of these techniques and provided some of the datasets. If you are interested in this kind of stuff make sure to check them out!

# Notebooks

Currently there are only a few notebooks online. More will follow once I've cleaned up the code a bit. Datasets can be found in the datasets folder.

- **avm_singapore.ipynb**: Compares ML techniques for building an automated valuation model for real estate in Singapore.
- **cl_countries**: Compares REIT performance of countries and clusters them in groups.
- **cl_london (WIP)**: Compares London house prices with UK macro economic indicators and clusters the time-periods.
- **cl_singapore (WIP)**: Builds on avm_singapore notebook. Investigates if we can improve our AVM by first clustering the data and building an AVM for each cluster.
- **ts_south_africa**: Makes forecasts based on time-series data from the South African housing market.

",3,3,2,0,real-estate,"[data-science, machine-learning, pandas, python, real-estate, sklearn, statsmodels]",0
qm994,Django-RealEstate,,https://github.com/qm994/Django-RealEstate,https://api.github.com/repos/Django-RealEstate/qm994,Deployed:A Django backend and React frontend: Real Estate Analysis Application,"# Django-RealEstate
A Django backend and React frontend: Real Estate Analysis Application: http://www.qmrealestate.co/

# TODO:

Configure the send email functionality and currently the send email not working in inquiry not working;
Containerized the app with docker;
Write tests for the app;
Build the Portfolio page about myself;


OPTIONAL: Build scrapers for the app;


# 1. A few of python manage.py commands: notes here for memory purpose

## Migrate the changes to databse
(1) `python manage.py makemigrations` -> Migrate the models to the `migrations` folder
(2)`python manage.py migrate` -> Migrate the changes to database
 (Whenever we change the models `models.py`, we need to run both)
 
## Show the sql query used to create tables
 `python manage.py sqlmigrate listings 0001`
 
## How to update the static files?

Firstly add/edit the static files in the core app `realestate` then run  `python manage.py collectstatic` to migrate the changes to the core statics folder!

## start a new app
(1) `python manage.py startapp <app-name>`
(2) add the new app to the core app settings.py under the `INSTALLED_APPS`

# 2. Production Instance Summary

VPS: Droplet Ubuntu 20.04 1GB/1CPU, 25GB Disk, 1000GB Transfer;

When we set the `DEBUG=True`, the nginx will take care of the static files;





",3,3,3,0,real-estate,"[django, django-admin, docker-compose, gcp, gunicor, python3, real-estate]",0
yasserius,dhaka-property-prices-map,,https://github.com/yasserius/dhaka-property-prices-map,https://api.github.com/repos/dhaka-property-prices-map/yasserius,"Interactive Map of Properties and Real Estate in Dhaka, Bangladesh, using data from BProperty.","# Dhaka Property and House Prices - Interactive Map and Dashboard
Interactive Map of Properties and Real Estate in Dhaka, Bangladesh, using data from BProperty.

<img src=""https://github.com/yasserius/dhaka-property-prices-map/blob/main/screenshot.PNG"" height=500>

## Demo

https://dhaka-property-prices.herokuapp.com/



## Data

The dataset was scrapped from bproperty.com. Total number of listing are ~5000. The information includes things such as area of property, number of bedrooms, price and address.

You can find the raw data [here](https://github.com/yasserius/dhaka-property-prices-map/blob/main/bproperty_data.csv).



## Tools
This app was made using [Plotly Dash](https://plotly.com/dash/)



## Related Projects

- [Bangladesh Interactive Map of Weather Data](https://github.com/yasserius/bd-interactive-weather-map)
- [Bangladesh District Statistics Dataset](https://github.com/yasserius/bd_district_statistics_dataset)
- [Bangladesh GeoJSON Shapefile](https://github.com/yasserius/bangladesh_geojson_shapefile)

",3,3,1,0,real-estate,"[bangladesh, bproprerty, dash, dashboard, dhaka, house-prices, interactive-map, map, plotly, property, real-estate]",0
Pycomet-zz,CraigslistScraper,,https://github.com/Pycomet-zz/CraigslistScraper,https://api.github.com/repos/CraigslistScraper/Pycomet-zz,This is scraper that extracts information from craigslist.com based on search results specified by User.,"<h1 align=""center"">Welcome to Craigslist Rental/Purchase Home Scraper üëã</h1>
<p>
</p>

> This is a python based web scraper built to extract information from craigslist's website by search criteria to a spreadsheet.

### üè† [Homepage](craigslist.org)

## Install

```sh
python craigslist_scraper.py
```

## Usage

```sh
In using this application to search houses, the criteria is based on the following;
```

## Author

üë§ **Alfred Emmanuel Inyang (Codefred)**

* Website: alfredemmanuel.herokuapp.com
* Github: [@Pycomet](https://github.com/Pycomet)

## Show your support

Give a ‚≠êÔ∏è if this project helped you!

***
_This README was generated with ‚ù§Ô∏è by [readme-md-generator](https://github.com/kefranabg/readme-md-generator)_",3,3,2,0,real-estate,"[craigslist, craigslist-scraper, extracts-information, purchase, python3, real-estate, rental, scraper, selenium]",0
KevvKo,real-estate-monitor,,https://github.com/KevvKo/real-estate-monitor,https://api.github.com/repos/real-estate-monitor/KevvKo,Real-estate-monitor is a webscraper to scraping information's about apartment-objects from different property market sites. It generates an automated market overview for real estates.,"# real-estate-monitor
## Requirements

### Languages
- Python 3++
- MySQL 

### Modules
- Scrapy
- geopy
- MySQLdb
- hashlib
- folium
- geopandas

## Getting Started
In the currently version, use the realEstateSpider.py to start the scraping process. Just pass a town for the scraping process, to collect informations from aparments in jena or berlin. 

 ```
 python3 realEstateSpider.py <town>
 ```
 ## Software-Description
 ### realEstateSpider
 The real-estate-monitor is a software, developed with the scraping framework scrapy. It was developed as a part of a scientific work, to create an automated markt overview for real estates in any town or location. The information would be scraped from the real estate markets  
    - [wg-gesucht](https://www.wg-gesucht.de)\
    - [immobilienscout24](https://www.immobilienscout24.de)\
    - [immonet](https://www.immonet.de)

The scraped informations are checked for duplicates and the, the apartments are stored in a database. Before storing the data, for every apartment will be computed the coordinates. 
Every apartment object containts the following information, if they are available:
- domain
- date
- expose
- coldrent
- sidecosts
- surface
- roomnumber
- street
- postcode
- town
- latitude
- longitude
- hashvalue

This software containing links with search-results for the town. So, you can adjust the realEstateSpider.py for your needs. Also the to be collected informations.

For every town, you the this code to use the real-estate-monitor. Just pass for every spider the corresponding link with search results for apartments, and run the process.

```python
process.crawl(WggesuchtScraper, url=""https://www.wg-gesucht.de/wohnungen-in-Jena.66.2.1.0.html?offer_filter=1&city_id=66&noDeact=1&categories%5B%5D=2&rent_types%5B%5D=0"", town = tn)

process.crawl(ImmonetScraper, url=""https://www.immonet.de/immobiliensuche/sel.do?&sortby=0&suchart=1&objecttype=1&marketingtype=2&parentcat=1&city=111924&locationname=Jena"", town = tn)

process.crawl(Is24Scraper, url=""https://www.immobilienscout24.de/Suche/de/thueringen/jena/wohnung-mieten"", town = tn)
```

### choropleth
The choropleth.py is an additional software to evaluate the collected informations for a town and creating a choropleth map.

![alt text](choropleth.png ""choropleth map for jena"")

In this example picture, choropleth.py takes the value **2** and creating for every district the average coldrent for apartmants with a roomnumber of two. For creating a choropleth map, the coordinates are necessary.

Further, in the repository you can find datasets for berlin and jena with collected informations, stored in a JSON-File.
",3,3,0,0,real-estate,"[automation, python, real-estate, scrapy, webscraping]",0
Leo-Chan01,real-estate-console-app,,https://github.com/Leo-Chan01/real-estate-console-app,https://api.github.com/repos/real-estate-console-app/Leo-Chan01,A Mini Realtor Console App,"# Real Estate Console Application

This is a console application that offers the interface for buying and selling properties

## Table of Contents
* [Title](#real-estate-console-application)
* [User Journey](#user-journey)
  * [Buyers](#buyer)
  * [Sellers](#seller)
* [Util Classes Usage](#util-classes-usages)
  * [HouseUtil class](#houseutiljava)
  * [OrderUtil class](#orderutiljava)
  * [MessageUtil class](#messageutiljava)
  * [UserUtil class](#userutiljava)
* [Model Classes Usage](#model-classes-usages)
    * [House class](#housejava)
    * [Order class](#orderjava)
    * [User class](#housejava)

## User Journey
### Buyer
- User is prompted to identify as either a buyer or seller
```txt
Hello, Welcome 

Are you a seller or Buyer [B-Buyer/S-Seller]
```
- User selects Buyer (B) and is presented with a list of already listed houses
```txt
Pick a House below, by it's House Number
1. Tarila's House (3000000)
2. Ephraim's House (10000000)
3. Mr. Success' House (5000000)
4. Mr Dubem's House (9000000)
5. Mr. John's House (2550000)
```
- Buyer selects any number, ```2``` for this example and is asked for confirmation of his decision
```txt
You selected Ephraim's House which costs: NGN 10000000. Do you want to continue? [Y/N]
```
- Buyer confirms order by pressing ""Y""
```
You just Purchased Ephraim's House at NGN10000000
```
- If buyer rejects, it would say: 
```
Thanks for your patronage
```
and then exit


### Seller
- Seller is prompted to identify as either a buyer or seller
```txt
Hello, Welcome 

Are you a seller or Buyer [B-Buyer/S-Seller]
```
- Seller makes input as ```s``` for buyer and gets a few prompts that take in certain information that concern the house, after which the house is listed once again to confirm to the user that the house has been listed
```
Please follow the prompt below to add your house
Input house name: 
My House
Input house location: 
The Location
Input number of Bedrooms: 
1
Input house price: 
1200000
Input number of Kitchens: 
1
Input number of Bathrooms: 
2
Input number of Sitting Rooms: 
1
Input number of Garage: 
1
Is there swimming pool? [Y/N]: 
y
You just Listed My House at NGN1200000
Tarila's House
Ephraim's House
Mr. Success' House
Mr Dubem's House
Mr. John's House
My House
```
- Seller is asked if he wants to continue or not

```
Want to list another house? [Y/N]
```
- If Continue it goes up to receive inputs again
- If Not continue, It asks if another transactions should be performed.
```
n
Want to perform another transaction? [Y/N]
```
- If the transaction should be performed it goes on and asks if the user is a buyer or seller basically repeating the whole process oer again

- If it shouldn't be performed, it exits and thanks the user

## Util Classes Usages
The util classes are in charge of everything that has to do with performing any transaction. They contain mostly static methods. this was used as an instance is not necessarily needed, to be created for each of the utility classes.

### HouseUtil.java
This includes worker static methods that perform listing Houses and getting the currently selected house

#### List of Houses
To get the list of manually stored Houses, call
```java
HouseUtil.getHouseList();
```
This is mostly used to initialize the list of houses and passed to the holding

#### List houses for buying transaction.

#### Single House
The user is to select by number the house he wishes to buy
```java
Scanner selectHouse = new Scanner(System.in);
int selection = selectHouse.nextInt();
House selectedHouse = HouseUtil.getSingleHouse(houseList, selection-1);
```
The `selection` variable is meant to hold the selected houses by number has a type of _int_

[//]: # (# TO BE CONTINUED)
### OrderUtil.java
This contains static classed that performs order specific duties

```java
OrderUtil.performHouseBuyingTransactions(houseList);
```

```java
OrderUtil.performHouseListing(houseList);
```

### MessageUtil.java
```java
MessageUtil.messenger(message);
```

```java
MessageUtil.writeInstruction(instruction);
```

```java
MessageUtil.giveUserFeedback(houseName, housePrice, transactionType);
```

### UserUtil.java
_Not implemented yet_
## Model Classes Usages
### House.java
Contains necessary house related members, including necessary getters and setters
### Order.java
Contains necessary Order related members, including necessary getters and setters
### User.java
Contains necessary User related members, including necessary getters and setters

",3,3,2,0,real-estate,"[console-application, java, java-8, learning, oop-principles, real-estate, teaching-materials]",0
qasem-talaee,django-real-estate,,https://github.com/qasem-talaee/django-real-estate,https://api.github.com/repos/django-real-estate/qasem-talaee,Real estate website with django,"# Real Estate website with django
Options:

- Properties in two status: Sell and Rent

- Search in properties

- News and Blog

- Contact page

- Add Agents

- Login agents with their own account to the admin area

- Contact us form


# Installing
Login as admin to admin area with admin as username and password.

Login as agent to admin area with agent as username and ghasemtalaee as password

# Website Screenshots:
## Home page
![alt text](screenshots/index.jpg)
## Property page
![alt text](screenshots/property.PNG)
## Property details page
![alt text](screenshots/property_detail.jpg)
## Blog page
![alt text](screenshots/blog.PNG)

# Admin area screenshots:
## Admin page
![alt text](screenshots/admin.PNG)
## Contact for agent
![alt text](screenshots/agent_contact.PNG)
## Blog page
![alt text](screenshots/blog_admin.PNG)
## Property admin
![alt text](screenshots/property_admin.PNG)
## Add Property page
![alt text](screenshots/property_add.PNG)",3,3,3,0,real-estate,"[django, estate, estate-agent, real-estate]",0
sethsandaru,ios-bds-real-estate,,https://github.com/sethsandaru/ios-bds-real-estate,https://api.github.com/repos/ios-bds-real-estate/sethsandaru,iOS Real Estate Application by Phat Tran,"# ios-bds-real-estate
## iOS Real Estate Application by Phat Tran
Mainly it's a project made by Nhom 6, but due to the members don't want/have enought specs to work with. 
So I made it alone before it reached the deadline.
Thankfully, I made it and got maximum score for this project.

## Description
An Real Estate project that allowed:
+ View newest real estate is current on sale.
+ Search real estate
+ View single real estate with full information, including:
  + Full post information
  + Location in map
  + Comments
  + Poster contact information 
+ Create a new real estate (need to approve before appear to see)

## Technologies:
+ iOS 9+
+ Swift 3
+ Client-side
+ Client - Server
+ Restful API Webservice
+ Firebase Cloud Storage

## Plugins using:
+ https://github.com/SwiftyJSON/SwiftyJSON
+ https://github.com/zvonicek/ImageSlideshow
+ https://github.com/Alamofire/Alamofire
+ ... many more
Special thanks to all!

## Server side:
Visit: https://github.com/sethsandaru/bds-real-estate-webapi

## Note:
Please use the newest XCode in order to open this project properly without any errors. Thanks



Copyright &copy; 2018 by Phat Tran aka Seth Phat aka Seth Sandaru. All right reserved!
",3,3,4,0,real-estate,"[ios, ios-app, real-estate, swift]",0
mbalcerzak,warsaw_flats_dashboard,,https://github.com/mbalcerzak/warsaw_flats_dashboard,https://api.github.com/repos/warsaw_flats_dashboard/mbalcerzak,Dashboard with real-time information about Warsaw real estate market,"# Dashboard with real-time information about Warsaw real estate market

Data flow:
1. Every hour a scraper set up on Raspberry Pi is gathering flat selling ads
2. Data is aggregated and statistics regarding each district and/or flat size is hosted as a [JSON file](https://raw.githubusercontent.com/mbalcerzak/warsaw_flats_api/main/json_dir/flats.json)
3. New aggregated data for the dashboard is generated avery day at 00:40 CEST
4. Dashboard was built usind Dash (Python3.9) and is hosted on Heroku [Link to the App](https://warsaw-flats.herokuapp.com/)
",3,3,2,0,real-estate,"[dash, dashboard, python, real-estate]",0
consulthys,logstash-input-rets,,https://github.com/consulthys/logstash-input-rets,https://api.github.com/repos/logstash-input-rets/consulthys,A Logstash input plugin for retrieving data from MLS RETS servers,"# Logstash Plugin

This is a plugin for [Logstash](https://github.com/elastic/logstash).

It is fully free and fully open source. The license is Apache 2.0, meaning you are pretty much free to use it however you want in whatever way.

## Documentation

The RETS input plugin can be configured very simply as shown below. Each `rets` input allows you to send as many queries as desired
against a single [MLS RETS server](www.reso.org/specifications).

The retrieved fields will be stored at the event root level by default (unless the `target` field is configured).

```
input {
  rets {
    url => ""http://mls.server.com/Login""
    username => ""retsuser""
    password => ""retspwd""
    user_agent => ""you/1.0""
    user_agent_password => ""uapwd""
    rets_version => ""RETS/1.5""
    # Supports ""cron"", ""every"", ""at"" and ""in"" schedules by rufus scheduler
    schedule => { cron => ""* * * * * UTC""}
    # The target field in which the RETS fields will be stored
    #target => ""rets_fields""
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    metadata_target => ""@rets_metadata""
    queries => {
      properties => {
        resource => ""Property""
        class => ""RE_1""
        query => ""(L_Status=|1_0,1_1,1_2)""
        select => """"
        limit => 1000
      }
      active_agents => {
        resource => ""Agent""
        class => ""Agent""
        query => ""(U_user_is_active=1)""
        select => """"
        limit => 1000
      }
    }
  }
}
output {
  stdout {
    codec => rubydebug
  }
}
```

Here is how a sample event will look like:

```
{
            ""L_ListingID"" => ""12345678"",
                ""L_Class"" => ""1"",
                ""L_Type_"" => ""7"",
                 ""L_Area"" => ""12"",
          ""L_SystemPrice"" => ""165000"",
          ""L_AskingPrice"" => ""165000"",
        ""L_AddressNumber"" => ""1234"",
  ""L_AddressSearchNumber"" => ""1234"",
     ""L_AddressDirection"" => """",
        ""L_AddressStreet"" => ""Main Street"",
                      ... => ...
           ""L_IdxInclude"" => ""0"",
        ""L_LastDocUpdate"" => """",
               ""@version"" => ""1"",
             ""@timestamp"" => ""2016-09-05T09:13:03.545Z"",
         ""@rets_metadata"" => {
                   ""host"" => ""iMac.local"",
        ""runtime_seconds"" => 3.504
             ""query_name"" => ""properties"",
             ""query_spec"" => {
               ""resource"" => ""Property"",
                  ""class"" => ""RE_1"",
                  ""query"" => ""(L_Status=|1_0)"",
                  ""limit"" => 10
             }
        }
}
```

### Configuration

The following list enumerates all configuration parameters of the `rets` input:

 * `url`: the Login URL to the MLS RETS server (required)
 * `username`: the username to log into the MLS RETS server (required)
 * `password`: the password to log into the MLS RETS server (required)
 * `user_agent`: the User-Agent to use when identifying to the MLS RETS server (required)
 * `user_agent_password`: the User-Agent password to use when identifying to the MLS RETS server (optional)
 * `rets_version`: the RETS version to use. Valid versions are `RETS/1.5`, `RETS/1.7`, `RETS/1.7.2`, `RETS/1.8` (required)
 * `schedule`: the [schedule specification](#scheduling) determining when the `rets` input must run (see below for details) (required)
 * `target`: the name of the field into which to store the pulled RETS fields (default: root) (optional)
 * `metadata_target`: the name of the field into which to store some metadata about the call (default: `@metadata` (optional)
 * `queries`: Any number of named queries mapped to a hash with the following parameters: (at least one required)
   * `resource`: the RETS resource to query (e.g. `Property`, `Agent`, etc)
   * `class`: the RETS class to query (e.g. `RE_1`, `LD_2`, `Agent`, etc)
   * `query`: the [DMQL query to send](https://www.flexmls.com/developers/rets/tutorials/dmql-tutorial/)
   * `select`: a comma-separated list of fields to pull, leave empty to pull all fields
   * `limit`: a number indicating how many records to pull at once

### Scheduling

This plugin must also be scheduled to run periodically according to a specific
schedule. This scheduling syntax is powered by [rufus-scheduler](https://github.com/jmettraux/rufus-scheduler).
The syntax is cron-like with some extensions specific to Rufus (e.g. timezone support ).

Examples:

```
* 5 * 1-3 *               | will execute every minute of 5am every day of January through March.
0 * * * *                 | will execute on the 0th minute of every hour every day.
0 6 * * * America/Chicago | will execute at 6:00am (UTC/GMT -5) every day.
```

Further documentation describing this syntax can be found [here](https://github.com/jmettraux/rufus-schedulerparsing-cronlines-and-time-strings).

## Need Help?

Need help? Try #logstash on freenode IRC or the https://discuss.elastic.co/c/logstash discussion forum.

## Developing

### 1. Plugin Developement and Testing

#### Code
- To get started, you'll need JRuby with the Bundler gem installed.

- Create a new plugin or clone and existing from the GitHub [logstash-plugins](https://github.com/logstash-plugins) organization. We also provide [example plugins](https://github.com/logstash-plugins?query=example).

- Install dependencies
```sh
bundle install
```

#### Test

- Update your dependencies

```sh
bundle install
```

- Run tests

```sh
bundle exec rspec
```

### 2. Running your unpublished Plugin in Logstash

#### 2.1 Run in a local Logstash clone

- Edit Logstash `Gemfile` and add the local plugin path, for example:
```ruby
gem ""logstash-filter-awesome"", :path => ""/your/local/logstash-filter-awesome""
```
- Install plugin
```sh
bin/logstash-plugin install --no-verify
```
- Run Logstash with your plugin
```sh
bin/logstash -e 'filter {awesome {}}'
```
At this point any modifications to the plugin code will be applied to this local Logstash setup. After modifying the plugin, simply rerun Logstash.

#### 2.2 Run in an installed Logstash

You can use the same **2.1** method to run your plugin in an installed Logstash by editing its `Gemfile` and pointing the `:path` to your local plugin development directory or you can build the gem and install it using:

- Build your plugin gem
```sh
gem build logstash-filter-awesome.gemspec
```
- Install the plugin from the Logstash home
```sh
bin/logstash-plugin install /your/local/plugin/logstash-filter-awesome.gem
```
- Start Logstash and proceed to test the plugin

## Contributing

All contributions are welcome: ideas, patches, documentation, bug reports, complaints, and even something you drew up on a napkin.

Programming is not a required skill. Whatever you've seen about open source and maintainers or community members  saying ""send patches or die"" - you will not see that here.

It is more important to the community that you are able to contribute.

For more information about contributing, see the [CONTRIBUTING](https://github.com/elastic/logstash/blob/master/CONTRIBUTING.md) file.
",3,3,4,0,real-estate,"[logstash, logstash-plugin, real-estate, rets, ruby]",0
indrekru,real-estate-scraper,,https://github.com/indrekru/real-estate-scraper,https://api.github.com/repos/real-estate-scraper/indrekru,Scrapes real estate website from time to time and figures out if anything worth looking at,"# Real Estate Scraper 
[![CircleCI](https://circleci.com/gh/indrekru/real-estate-scraper.svg?style=svg)](https://circleci.com/gh/indrekru/real-estate-scraper)

<img src=""https://raw.githubusercontent.com/indrekru/real-estate-scraper/master/img.png"" width=""200px"">

Scrapes real estate website, saves the records and lets me know if anything interesting worth looking at.
Runs on a scheduler to scrape periodically and clean up every midnight at least 5 days old properties.
Runs on free services (hopefully forever)

Self driving scraper, sometimes emails me.

## Services:
* Mailjet - mailing
* Heroku - Java + Postgres
* UptimeRobot - polls heroku health endpoint to keep it alive

Uptime pings:
https://real-estate-scraper1.herokuapp.com/api/v1/health

Returns last 100 properties with points:
https://real-estate-scraper1.herokuapp.com/api/v1/property

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running for notes on how to run the project on a system.

### Prerequisites

1. Clone the project to your local environment:
```
git clone https://github.com/indrekru/real-estate-scraper.git
```

2. You need maven installed on your environment:

#### Mac (homebrew):

```
brew install maven
```
#### Ubuntu:
```
sudo apt-get install maven
```

### Installing

Once you have maven installed on your environment, install the project dependencies via:

```
mvn install
```

## Testing

Run all tests:
```
mvn test
```

## Running

Once you have installed dependencies, this can be run from the `Application.java` main method directly,
or from a command line:
```
mvn spring-boot:run -Dspring.profiles.active=dev
```

Open browser and go to http://localhost:8080/api/v1/health and you should see health json response

## Deploy to heroku

To deploy new version to heroku:

```
git push heroku master
```

## Check heroku logs:

Check the prod logs:

```
heroku logs -tail -a real-estate-scraper1
```

## Built With

* [Spring Boot](https://spring.io/projects/spring-boot) - Spring Boot 2
* [Maven](https://maven.apache.org/) - Dependency Management

## Contributing

If you have any improvement suggestions please create a pull request and I'll review it.


## Authors

* **Indrek Ruubel** - *Initial work* - [Github](https://github.com/indrekru)

See also the list of [contributors](https://github.com/indrekru/design-patterns-spring-boot/graphs/contributors) who participated in this project.

## License

This project is licensed under the MIT License

## Acknowledgments

* Big thanks to Pivotal for Spring Boot framework, love it!
* Also check out my Spring Boot 2 Oauth2 resource server example: https://github.com/indrekru/spring-boot-2-oauth2-resource-server
",3,3,2,2,real-estate,"[real-estate, scraper, spring-boot-2]",0
jnguyen095,real-estate,,https://github.com/jnguyen095/real-estate,https://api.github.com/repos/real-estate/jnguyen095,Display data from crawler module https://github.com/jnguyen095/HomeLand,,3,3,1,0,real-estate,"[bootstrap, codeigniter, jquery, mysql, php, real-estate]",0
kechankrisna,LANDPMS,,https://github.com/kechankrisna/LANDPMS,https://api.github.com/repos/LANDPMS/kechankrisna,,"## About Laraveutify

Laraveutify is created in order to speed up production with laravel and vue. This application has been configed everything which need to done on using Laravel + Vue + Vuetify. It is also include other neccessary libray such chat, moment,... to complete a full application.

## Guide Line

Make sure you have composer and nodejs install on your computer otherwise you can go to install them first by the links [Install composer](https://getcomposer.org/) and [Install nodejs](https://nodejs.org/en/) or [Install yarn](https://yarnpkg.com/)

    open your terminal
    git clone https://github.com/kechankrisna/laravuetify.git
    cd laravuetify
    composer install
    npm install
    php -r ""file_exists('.env') || copy('.env.example', '.env');""
    go to .env to config your database
    php artisan key:generate
    php artisan migrate:reset
    php artisan migrate
    php artisan passport:install
    php artisan storage:link
    go to .env to update your ClIENT_KEY 1 and 2 and config your mail driver
    open file app/mail.php to config your mailing setup
    php aritan serve && npm run watch
    

## Future

I am planning to make this framework to work as full dashboard with metarial design supported by vuetify. So that developers can bring it to their production faster without worry about configuration anymore. Thank you.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Learning Vue && Vuex && Vue-router
Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome backers. 
For questions and support please use the official forum or community chat. The issue list of this repo is exclusively for bug reports and feature requests. [Vue documentation](https://github.com/vuejs/vue).

## Learning Vuetify
Vuetify is a Material Design Component Framework for the Vue framework. We believe that you shouldn't need design skills to build beautiful Vue applications. More information please visit [Vuetify documentation](https://github.com/vuetifyjs/vuetify)


## Laravuetify Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please contact me through email ke.chankrisna@mylekha.app


## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

    The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).

    Vue is MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome backers. [MIT license](https://opensource.org/licenses/MIT).

    Vuetify is a Material Design Component Framework for the Vue framework licensed under the [MIT license](https://opensource.org/licenses/MIT).",2,2,1,31,real-estate,"[land, pms, real-estate, vue, vuetify]",0
SebastianThomas1,king_county,,https://github.com/SebastianThomas1/king_county,https://api.github.com/repos/king_county/SebastianThomas1,House sales prices in King County,"# House sales prices in King County

A project on exploratory data analysis.

Sebastian Thomas @ neue fische Bootcamp Data Science<br />
(datascience at sebastianthomas dot de)

This was my first project at the neue fische Bootcamp Data Science. It was centered around exploratory data analysis techniques and simple predictive analysis using ordinary linear regression. After the bootcamp, the analysis was extended.

The instances in the data set represent house sales. The task is to describe the impact of the given features on the house sales prices resp. to predict the latter with machine learning methods.

## Results

We have the following key insights:
- The distribution of house sale prices is left modal, with a median of about 0.5 million US Dollars.

![distribution of price][price]

- Location has a big impact on house sale price as can be visualized by the median house sale prices grouped by the zipcode:

![median prices grouped by zipcode][zipcodes]

The area with the highest housesale prices is Medina with zipcode 98039, a city in Eastside in the metropol region of Seattle.

![zipcodes map][zipcodes_map]

- There is a rough linear relationship between the living space area and the house sales price.

![living space][living_space]

- While there is a rough linear relationship between house condition and the house sales price, the quality of the interior (design/materials) has an exponential impact on the house sales price.

![condition grade][condition_grade]

- The better the view, the higher the house sales price. Most properties don't have an extraordinary view.

![view][view]

- If the house is on a waterfront, the median house sale price increases about 1 million US Dollars.

![waterfront][waterfront]

- The average error of the predictive model is about 12% (mean absolute percentage error) resp. $ 37,000 (median absolute error).


[price]: figures/price.svg ""Distribution of price""
[zipcodes]: figures/zipcode.svg ""House sale price medians grouped by zipcode""
[zipcodes_map]: figures/zipcode_map.svg ""Map of zipcodes in King county, coloured by median house sale price""
[living_space]: figures/living_space.svg ""Living space vs house sale prices""
[condition_grade]: figures/condition_grade.svg ""House sale price medians grouped by condition resp grade""
[view]: figures/view.svg ""House sale price medians grouped by view""
[waterfront]: figures/waterfront.svg ""House sale price medians grouped by waterfront""


## Content

- [Part 1: Data mining](king_county_1_data_mining.ipynb)
- [Part 2: Data cleaning](king_county_2_data_cleaning.ipynb)
- [Part 3: Feature engineering](king_county_3_feature_engineering.ipynb)
- [Part 4: Exploratory data analysis](king_county_4_exploratory_data_analysis.ipynb)
- [Part 5: Predictive analysis](king_county_5_predictive_analysis.ipynb)
- [Part 6: Visualization](king_county_6_visualization.ipynb)


## Future work

- try more regression algorithms
- try more ensemble methods
- try more feature selection methods
- try artificial neural networks",2,2,1,0,real-estate,"[data-visualization, exploratory-data-analysis, house-price-prediction, real-estate]",0
mdcnuydt,financial-modelling,,https://github.com/mdcnuydt/financial-modelling,https://api.github.com/repos/financial-modelling/mdcnuydt,Financial modelling for real estate. Excel focussed.,"# Intro

As a professional real estate investor, financial modelling is my bread and butter. It is the primary tool I use to make investment decisions. It is also something I love to play around with in my free time.

This repo collects some of the financial models I played around with in my free time and are solely intended for personal use. Some of them will be based on projects I have been involved in, others on courses I've taken and still others simply on projects I am fascinated by. A big thank you to the guys at [Breaking Into Wall Street](https://www.breakingintowallstreet.com) who provide a brilliant course to learn this stuff.

The information used in these projects are based primarily on publicly available data, supplemented with 'reasonable assumptions' on my part.

Each project will have its own folder with a case description and a financial model. Where possible I will try to include the sources I have used to substantiate my assumptions.

# Models

Currently I have uploaded two projects yet. I will soon add others once I have cleaned them up a bit.

**Current projects**
- *100 Bishopsgate*: Major office development in central London.
- *Jumeirah Beach Hotel*: Luxury hotel in Dubai.

PS: This repo is mainly focussed on traditional financial modelling in Excel. If, like me, you are fascinated by the potential for data science and machine learning in real estate investing, make sure to also check out [my other repo](https://github.com/mdcnuydt/data-science).
",2,2,1,0,real-estate,"[excel, financial-modelling, real-estate]",0
lucastanger,realestate_investment_analysis,,https://github.com/lucastanger/realestate_investment_analysis,https://api.github.com/repos/realestate_investment_analysis/lucastanger,:chart_with_upwards_trend: Realestate price prediction using machine learning regression models,"# :chart_with_upwards_trend: :building_construction: DataScience Real Estate Investment Analysis

[![GitHub](https://img.shields.io/github/license/lucastanger/realestate_investment_analysis)](https://github.com/lucastanger/realestate_investment_analysis/blob/master/LICENSE)
![GitHub issues](https://img.shields.io/github/issues/lucastanger/realestate_investment_analysis)
[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)
[![Gitmoji](https://img.shields.io/badge/gitmoji-%20üòú%20üòç-FFDD67.svg?style=flat)](https://gitmoji.carloscuesta.me)

## About
This project emerged from the requirements of a study project. During the implementation we tried to use current best practices of software development and to get to know new ones. 

# Built with :hammer_and_wrench:

- [Pandas](https://pandas.pydata.org/) - Python Data Analysis Library
- [Colab](http://colab.research.google.com/) - Cloud based Jupyter Notebook 
- [Matplotlib](https://matplotlib.org/) - Visualization library for python
- [Seaborn](https://seaborn.pydata.org/) - Advanced visualization library based on Matplotlib
- [NumPy](https://numpy.org/) - Scientific computing in python
- [scikit-learn](https://scikit-learn.org/stable/) - Machine Learning in Python

# Authors :busts_in_silhouette:

-   **Luca Stanger** - Datascience Analysis - [Student @ DHBW Stuttgart](https://www.dhbw-stuttgart.de/home/)
-   **Hakim Assadi** - Datascience Analysis - [Student @ DHBW Stuttgart](https://www.dhbw-stuttgart.de/home/)

# Copyright :copyright:

Copyright :copyright: 2020 Hakim Assadi, Luca Stanger

# License :page_facing_up:

This project is licensed under the **MIT License** - see the [LICENSE.MD](https://www.github.com/lucastanger/realestate_investment_analysis/blob/master/LICENSE) files for details
",2,2,1,0,real-estate,"[colab, machine-learning, machine-learning-algorithms, pandas, prediction, python, real-estate, regression, regression-analysis, regression-models, seaborn, sklearn]",0
Pragati246,awaas-vishwa-fe,,https://github.com/Pragati246/awaas-vishwa-fe,https://api.github.com/repos/awaas-vishwa-fe/Pragati246,A property listing platform for buy sell and renting,"# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
",2,2,1,0,real-estate,"[react, reactjs, real, real-estate]",0
usametov,mls-node-script,,https://github.com/usametov/mls-node-script,https://api.github.com/repos/mls-node-script/usametov,MLS mini-scraper ,"The motivation 
================
To monitor real estate market in specific areas.
With this script you can see which properties are selling fast, and which properties stay on the market longer than others.
You can get insight into keywords. 



how to use this script:
=======================

* browse realtor.ca, run search for properties, using map mode.
* zoom in to specific area, make sure that you have less than 50 pages.
* open chrome developers tools
* switch to network tab
* select api call to api2.realtor.ca/Listing.svc/PropertySearch_Post
* right-click on it and choose ""copy as curl""
* open terminal (or command prompt)
* type node main.js &lt; paste your curl string from previous step &gt; 1 50 &lt;output dir of your choice &gt; 

The end result should look something like this:

<pre><code>
    node main.js curl 'https://api2.realtor.ca/Listing.svc/PropertySearch_Post' -H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Referer: https://www.realtor.ca/map' -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H 'Origin: https://www.realtor.ca' -H 'DNT: 1' -H 'Connection: keep-alive' --data 'ZoomLevel=11&LatitudeMax=43.6579334&LongitudeMax=-79.4340402&LatitudeMin=43.4588965&LongitudeMin=-80.1433450&CurrentPage=1&RecordsPerPage=12&PropertyTypeGroupID=1&PropertySearchTypeId=1&TransactionTypeId=2&PriceMin=200000&PriceMax=550000&BedRange=1-0&BathRange=1-0&ApplicationId=1&CultureId=1&Version=7.0' 1 50 .
</pre></code>

***

After you run the above script, you should see the new file in the output directory. The file name is made of ISO date format and page range.
You may want to save the above command as shell script and run it, say, once in 3 days. 
 
This script can download up to 50 pages of MLS listings. This is because of realtor.ca API limit, they don't allow more than 50 calls.
This works fine though if you want to monitor specific area. 
Remember, you have to use map mode, it allows to zoom in to specific area.


 
 
 


",2,2,1,0,real-estate,"[nodejs, real-estate, scraping-api]",0
KwameTaylor,kwames-zillow-zestimates-error-control,,https://github.com/KwameTaylor/kwames-zillow-zestimates-error-control,https://api.github.com/repos/kwames-zillow-zestimates-error-control/KwameTaylor,This project uses clustering to find drivers of error in Zestimates of single-unit Zillow properties in 2017. I will demonstrate how this data can be used for quality control and preventing errors in the future.,"### Clustering Project
**Kwame Taylor, Codeup Darden Cohort, Oct 2020**

---
<img src=""https://www.underconsideration.com/brandnew/archives/zillow_logo.png"">

# Kwame's Zillow Zestimates Error Control

Welcome to my data science clustering project: **Kwame's Zillow Zestimates Error Control**! This project will use clustering to find the drivers of error in the Zestimate of single-unit properties that were listed on Zillow in 2017. I will demonstrate how this data can be used for quality control and preventing more Zestimate errors in the future.

I plan to create an MVP and then iterate through the data science pipeline multiple times.

## Project Plan

|    Date    |                                Goal                               |     Finished?     |
|:----------:|:-----------------------------------------------------------------:|:-----------------:|
| 10/15/2020 | Project planning, start on outline/bones of project.              |<ul><li>- [x] </li>
| 10/17/2020 | Finish MVP of wrangle.py and preprocessing.py.                    |<ul><li>- [x] </li>
| 10/18/2020 | Finish MVP of explore.py and start model.py MVP.                  |<ul><li>- [x] </li>
| 10/19/2020 | Finish model.py MVP and iterate through data science pipeline 1x. |<ul><li>- [x] </li>
| 10/20/2020 | Practice presentation, 1x iteration, sleep.                       |<ul><li>- [x] </li>
| 10/21/2020 | Presentation day! (turn in project)                               |<ul><li>- [x] </li>

The project deliverables are the following: **Jupyter Notebook** data science pipeline walkthrough with **conclusions**, data **visualizations**, **README**, and **modules with functions** (```wrangle.py```, ```preprocessing.py```, ```explore.py```, and ```model.py```).

---

## Iterations through the Data Science pipeline

**Pipeline iteration 1:**
* Project plan and timeline
* README outline
* Structure project bones
* Reach the minimum/MVP for each stage to be able to move on to the next stage.

**Pipeline iteration 2:**
* Recalibrate project plan timeline
* Tidy the data a little further
* Put functions into modules
* Flesh out README
* Run one statistical test
* Explore and feature engineering with clustering

**Pipeline iteration 3 (to-do list):**
- [x] remove outliers with isolation forest
- [x] make README more thorough
- [x] add the data dictionary the hypotheses to README
- [x] review my notes and the project specs
- [x] turn cluster_area into dummy variables (i.e. is_cluster_area_1, is_cluster_area_2, etc.)
- [x] change statistical test to be better regarding the distribution of years
- [x] takeaways on how where to focus efforts to reduce log error
- [x] put remaining notebook code into functions
- [x] add two more models and test the best model on test data
- [x] copy comments from prepare code into presentation notebook
- [x] conclusions
- [x] practice presentation and make script/notes

**Things I'll save for future iterations for the sake of time:**
* title and label visualizations better
* plot centroids
* GeoPy implementation
* plot elevation's relation to latitude/longitude to see if log error has anything to do with topographical data
* make my module functions more generic and useful
* another hypothesis test

---

## Data Dictionary

| Term                         | Definition                                                                              |
|------------------------------|-----------------------------------------------------------------------------------------|
| parcelid (index)             | Unique identifier for parcels (lots)                                                    |
| bathcnt                      | Number of bathrooms in home including fractional bathrooms                              |
| sqft                         | Calculated total finished living area of the home                                       |
| latitude                     | Latitude of the middle of the parcel multiplied by 10e6                                 |
| longitude                    | Longitude of the middle of the parcel multiplied by 10e6                                |
| yearbuilt                    | The Year the principal residence was built                                              |
| value                        | The total tax assessed value of the parcel                                              |
| county (engineered)          | County in which the parcel is located                                                   |
| bathbedcnt (engineered)      | Number of bedrooms plus bathrooms in home                                               |
| decade (engineered)          | The Decade the principal residence was built                                            |
| century (engineered)         | The Century the principal residence was built                                           |
| cluster_area (engineered)    | Clusters based on latitude, longitude, and county                                       |
| logerror (prediction target) | The difference between log of Zestimate (prediction) and log of actual sales price of a property   |

| County encoded | County             |
|----------------|--------------------|
| 0              | Los Angeles County |
| 1              | Orange County      |
| 2              | Ventura County     |

---

## Hypotheses

ùêª0: There is no difference in Zestimate log error in properties built in the 1800s and the overall log error.<br>
ùêªùëé: There is a difference in Zestimate log error in properties built in the 1800s and the overall log error.

ùêª0: There is no difference in Zestimate log error in properties built in the 1960s and the overall log error.<br>
ùêªùëé: There is a difference in Zestimate log error in properties built in the 1960s and the overall log error.

---

Instructions for use and reproduction:
## Main notebook
To see and read through the main notebook, you can navigate to ```kwames-zillow-zestimates-error-control.ipynb``` in this GitHub repository.

You can explore the functions from the notebook more indepth in the ```wrangle.py```, ```preprocessing.py```, ```explore.py```, and ```model.py``` files.

## Setup

In order to run the code in this repository, you'll need:

1. An installation of python through anaconda
2. An ```env.py``` file that defines the following variables:
  - 'user'
  - 'host'
  - 'password'

The code in here was developed on MacOS, but should run fine anywhere you can install python + anaconda.

---

### Big thanks to the following resources for education and inspiration:
* <a href=""https://ds.codeup.com/"">Codeup curriculum</a>
* <a href=""https://towardsdatascience.com/simple-and-multiple-linear-regression-in-python-c928425168f9"">Simple and Multiple Linear Regression in Python</a>
* <a href=""https://geopy.readthedocs.io/en/stable/"">GeoPy</a>
* <a href=""https://machinelearningmastery.com/model-based-outlier-detection-and-removal-in-python/"">4 Automatic Outlier Detection Algorithms in Python</a>
* <a href=""https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html"">Isolation Forest documentation</a>
* <a href=""https://towardsdatascience.com/outlier-detection-with-isolation-forest-3d190448d45e"">Outlier Detection with Isolation Forest</a>
* <a href=""https://www.tablesgenerator.com/markdown_tables#"">Markdown Table generator</a>
* <a href=""https://jakevdp.github.io/PythonDataScienceHandbook/04.13-geographic-data-with-basemap.html"">Geographic Data with Basemap</a>
* <a href=""https://medium.com/@samchaaa/preprocessing-why-you-should-generate-polynomial-features-first-before-standardizing-892b4326a91d"">Preprocessing: why you should generate polynomial features first before standardizing</a>
* <a href=""https://apps.gis.ucla.edu/geodata/en/dataset/world_elevation_contours"">World Elevation Contours data from UCLA</a>
* <a href=""https://apps.gis.ucla.edu/geodata/dataset/california-public-schools"">California school districts data from UCLA</a>
* <a href=""https://www.cde.ca.gov/ds/si/ds/pubschls.asp"">California school districts from CA's DoE</a>
* <a href=""https://towardsdatascience.com/understanding-k-means-clustering-in-machine-learning-6a6e67336aa1"">Understanding K-means Clustering in Machine Learning</a>
* <a href=""https://dardenreviews.github.io/"">Faith's Darden reviews, of course!</a>
* And extra big thanks to my Codeup Darden cohort colleagues for being a constant source of knowledge, help, and motivation!
",2,2,1,0,real-estate,"[clustering, error, real-estate, zestimate, zillow]",0
mugabits,CapRateCalculator,,https://github.com/mugabits/CapRateCalculator,https://api.github.com/repos/CapRateCalculator/mugabits,Calculates the cap rate of a real estate property,"# CapRateCalculator
Calculate the 
",2,2,3,0,real-estate,"[cap-rate, javascript, real-estate]",0
TilarnaExdilika,sancity,,https://github.com/TilarnaExdilika/sancity,https://api.github.com/repos/sancity/TilarnaExdilika,"This is a website about real estate called Sancity, which utilizes  PHP Native MVC, Javascript, Ajax, Bootstrap, and MySQL.","Ôªø# sancity

Sancity real estate website system

Author: Pham Duy Sang

Github: [https://github.com/TilarnaExdilika](https://github.com/TilarnaExdilika)

Facebook: [https://www.facebook.com/profile.php?id=100069645099219](https://www.facebook.com/profile.php?id=100069645099219)

Linkedin: [https://www.linkedin.com/in/syva/](https://www.linkedin.com/in/syva/)

Email: phamduysang.work210@gmail.com
",2,2,1,0,real-estate,"[ajax, bootstrap, javascript, mysql, oop, php, php-mvc, real-estate]",0
SisankKotwal,Data-Analysis-to-Find-Homes-for-a-Quick-Profit---Ames-Iowa-Datset,,https://github.com/SisankKotwal/Data-Analysis-to-Find-Homes-for-a-Quick-Profit---Ames-Iowa-Datset,https://api.github.com/repos/Data-Analysis-to-Find-Homes-for-a-Quick-Profit---Ames-Iowa-Datset/SisankKotwal,"Using Python and Power BI, I conducted data analysis to predict home prices by developing an ordinary least squares regression model (multiple linear regression model) on the famous Ames, Iowa dataset, and created impactful visualizations to help strengthen the story behind my results which are briefly described below.  An ROI of 318.53% was achieved from the initial investment of $3.40M to capture $14.23M of profit without the need for any additional funding. My model allowed me to identify undervalued homes and build a strategy to achieve the above KPIs.","# Data Analysis to Find Homes for a Quick Profit - Ames Iowa Datset

An ROI of 318.53% was achieved from the initial investment of $3.40M to capture $14.23M of profit without the need for any additional funding. My model allowed me to identify undervalued homes and build a strategy to achieve the above KPIs.

Python and Power BI were used to conduct data analysis to predict home prices by developing an ordinary least squares regression model (multiple linear regression model) on the famous Ames, Iowa dataset and create impactful visualizations to help strengthen the story behind my results.

",2,2,0,0,real-estate,[real-estate],0
masreplay,google_maps_pagination,,https://github.com/masreplay/google_maps_pagination,https://api.github.com/repos/google_maps_pagination/masreplay,Pagination with list view and markers throw google map,"Pagination markers and cards on map with page view

## Features

Pagination throw google map smoothly

## Getting started

no pre requirements required

## Usage

```dart
class MapItem implements MarkerItem {
  // TODO: implement all fields
}

final GoogleMapController mapController = GoogleMapController();
final String? selectedItemId = null;

PaginationMap<MapItem>(
    initialCameraPosition: CameraPosition(target: LatLng(33.4176386794544, 44.34958527530844)),
    currentUserLocation: LatLng(33.4176386794544, 44.34958527530844),
    height: 200,
    pageViewController: PageController(),
    mapController: mapController,
    setMapController: (value) {
        setState(() {
            mapController = value;
        });
    },
    onItemsChanged: (int skip, CameraPosition cameraPosition) async {
        return getItem(skip, cameraPosition)
    },
    pageViewItemBuilder: (BuildContext context, MapItem item) {
        return MapItemListTile(item: item);
    },
    selectedItemId: selectedItemId,
    onSelectedItemChanged: (value) {
        setState(() {
            selectedItemId = value;
        });
    },
    labelFormatter: (String label) {
        return ""Hello, ${label}"";
    },
),

```

## Additional information

Drag map will change camera position and click next or previous will change pagination
",2,2,1,2,real-estate,"[android, flutter, google-maps, ios, markers, pagination, real-estate]",0
rimiti,property-occupancy,,https://github.com/rimiti/property-occupancy,https://api.github.com/repos/property-occupancy/rimiti,üè† Property occupancy rate calculator.,"# property-occupancy
[![Build][build-badge]][build]
[![License][license-badge]][license]
[![PRs Welcome][prs-badge]][prs]


## Description

This module provides a property occupancy (Airbnb, Booking, Real Estate..) calculator.

## Install

```bash
$ yarn add @rimiti/property-occupancy
```

## Features

- getOccupancyRateByDay: Get occupancy rate by day.
- getOccupancyRateByMonth: Get occupancy rate by month.

## Usage


### GetOccupancyRateByDay

```ts
import {getOccupancyRateByDay} from '@rimiti/property-occupancy';

const params: TOccupancyRateParams = {
    reservations: [
        {
            checkInAt: new Date('2023-05-01T00:00:00Z'),
            checkOutAt: new Date('2023-05-03T00:00:00Z'),
        },
        {
            checkInAt: new Date('2023-05-04T00:00:00Z'),
            checkOutAt: new Date('2023-05-06T00:00:00Z'),
        },
    ],
    startDate: new Date('2023-05-01T00:00:00Z'),
    endDate: new Date('2023-05-06T00:00:00Z'),
    numberOfProperties: 10,
};

const result = getOccupancyRateByDay(params);
```

```json
 [
     {
         ""date"": ""2023-05-01"",
         ""occupancyRate"": 10
     },
     {
         ""date"": ""2023-05-02"",
         ""occupancyRate"": 10
     },
     {
         ""date"": ""2023-05-03"",
         ""occupancyRate"": 0
     },
     {
         ""date"": ""2023-05-04"",
         ""occupancyRate"": 10
     },
     {
         ""date"": ""2023-05-05"",
         ""occupancyRate"": 10
     },
     {
         ""date"": ""2023-05-06"",
         ""occupancyRate"": 0
     }
 ]
```

### GetOccupancyRateByMonth

```ts
import {getOccupancyRateByMonth} from '@rimiti/property-occupancy';

const params = {
    reservations: [
        { checkInAt: new Date('2022-01-01'), checkOutAt: new Date('2022-01-03') },
        { checkInAt: new Date('2022-01-02'), checkOutAt: new Date('2022-01-04') },
        { checkInAt: new Date('2022-02-01'), checkOutAt: new Date('2022-02-03') },
        { checkInAt: new Date('2022-02-02'), checkOutAt: new Date('2022-02-04') },
    ],
    startDate: new Date('2022-01-01'),
    endDate: new Date('2022-02-28'),
    numberOfProperties: 2,
};

const occupancyRates = getOccupancyRateByMonth(params);
```

```json
 [
     {
         ""date"": ""2022-01"",
         ""occupancyRate"": 6.45,
     },
     {
         ""date"": ""2022-02"",
         ""occupancyRate"": 7.14
     }
 ]
```

## Scripts

Run using yarn run `<script>` command.

    clean       - Remove temporarily folders.
    build       - Compile source files.
    build:watch - Interactive watch mode, compile sources on change.
    lint        - Lint source files.
    lint:fix    - Fix lint source files.
    test        - Runs all tests with coverage.
    test:watch  - Interactive watch mode, runs tests on change.


## License
MIT ¬© [Dimitri DO BAIRRO](https://github.com/rimiti/property-occupancy/blob/master/LICENSE)

[build-badge]: https://github.com/rimiti/property-occupancy/workflows/Test/badge.svg
[build]: https://github.com/rimiti/property-occupancy/actions?query=workflow%3ATest+branch%3Amaster
[license-badge]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square
[license]: https://github.com/rimiti/property-occupancy/blob/master/LICENSE
[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square
[prs]: http://makeapullrequest.com",2,2,1,0,real-estate,"[airbnb, booking, calculator, calendar, real-estate, real-estate-management, vrbo]",0
laravel-liberu,real-estate,laravel-liberu,https://github.com/laravel-liberu/real-estate,https://api.github.com/repos/real-estate/laravel-liberu,Estate agency application backend written in Laravel 10 / PHP 8.2,"## Liberu - Laravel 10 / PHP 8.2 Backend
 ![Latest Stable Version](https://img.shields.io/github/release/laravel-liberu/genealogy.svg) 
[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/laravel-liberu/genealogy/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/laravel-liberu/genealogy/?branch=master)
[![Code Intelligence Status](https://scrutinizer-ci.com/g/laravel-liberu/genealogy/badges/code-intelligence.svg?b=master)](https://scrutinizer-ci.com/code-intelligence)
[![StyleCI](https://github.styleci.io/repos/135390590/shield?branch=master)](https://github.styleci.io/repos/135390590)
[![CodeFactor](https://www.codefactor.io/repository/github/familytree365/genealogy/badge/master)](https://www.codefactor.io/repository/github/familytree365/genealogy/overview/master)
[![codebeat badge](https://codebeat.co/badges/911f9e33-212a-4dfa-a860-751cdbbacff7)](https://codebeat.co/projects/github-com-modulargenealogy-genealogy-master)
[![CircleCI](https://circleci.com/gh/laravel-liberu/genealogy.svg?style=svg)](https://circleci.com/gh/laravel-liberu/genealogy)

<!--/h-->
### Description
<!--/h-->

## Demostration website
<!--/h-->

### Installation steps

1. Begin by downloading the project using the command `git clone https://github.com/laravel-liberu/genealogy.git`

2. Next, make a copy of the `.env.example` file and rename it as `.env`. Open the `.env` file and update the necessary details according to your specific configuration.

3. Run the command `composer install` to install the project dependencies. If you are using Windows, you may need to run `composer install --ignore-platform-reqs` instead.

4. Generate an application key by executing the command `php artisan key:generate`

5. Launch the project by running `php artisan serve`.

6. To set up the database tables and seed them with initial data, run the command `php artisan migrate --seed`

7. If needed, you can customize the configuration files located in config/enso/*.php according to your requirements.

8. For certain configurations, you may need to set up sanctum stateful domains and session domain in the `.env` file. Additionally, add your domains to the `config/cors.php` file.

9. Lastly, follow the installation steps for the client side by visiting the link provided: https://github.com/liberu-ui/genealogy.

10. Launch the site and log into the project using the following credentials:

User: `admin@familytree365.com`
Password: `password`


By following these steps, you will successfully download the project, configure the necessary environment variables, install dependencies, generate a key, run the project, migrate the database, customize configurations if needed, and set up the client-side application. You can then log in to the project with the specified user credentials and begin exploring its features.

<!--/h-->

### Contributions

We warmly welcome new contributions from the community! We believe in the power of collaboration and appreciate any involvement you'd like to have in improving our project. Whether you prefer submitting pull requests with code enhancements or raising issues to help us identify areas of improvement, we value your participation.

If you have code changes or feature enhancements to propose, pull requests are a fantastic way to share your ideas with us. We encourage you to fork the project, make the necessary modifications, and submit a pull request for our review. Our team will diligently review your changes and work together with you to ensure the highest quality outcome.

However, we understand that not everyone is comfortable with submitting code directly. If you come across any issues or have suggestions for improvement, we greatly appreciate your input. By raising an issue, you provide valuable insights that help us identify and address potential problems or opportunities for growth.

Whether through pull requests or issues, your contributions play a vital role in making our project even better. We believe in fostering an inclusive and collaborative environment where everyone's ideas are valued and respected.

We look forward to your involvement, and together, we can create a vibrant and thriving project. Thank you for considering contributing to our community!
<!--/h-->
### License

This project is licensed under the MIT license, granting you the freedom to utilize it for both personal and commercial projects. The MIT license ensures that you have the flexibility to adapt, modify, and distribute the project as per your needs. Feel free to incorporate it into your own ventures, whether they are personal endeavors or part of a larger commercial undertaking. The permissive nature of the MIT license empowers you to leverage this project without any unnecessary restrictions. Enjoy the benefits of this open and accessible license as you embark on your creative and entrepreneurial pursuits.
<!--/h-->
",2,2,2,23,real-estate,"[estate-agent, laravel, php, php8, property, property-management, real-estate, realestate, rightmove, zoopla]",0
kauredo,sofia_galvao,,https://github.com/kauredo/sofia_galvao,https://api.github.com/repos/sofia_galvao/kauredo,Website for a Personal Real-Estate agent,"# README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...
",2,2,1,9,real-estate,"[real-estate, ruby]",0
intnext-realestate,intnext-realestate.github.io,intnext-realestate,https://github.com/intnext-realestate/intnext-realestate.github.io,https://api.github.com/repos/intnext-realestate.github.io/intnext-realestate,"Get your luxurious,stylish,beautiful homes at IntNext, Elevate Your Living Experience: IntNext Real Estate, Redefining Modern Living.","<img src=""https://github.com/intnext-realestate/intnext-realestate.github.io/blob/master/screenshot1.png"" alt=""IntNext Real Estate"">

**Rent, Buy and Sell Homes**

Get your luxurious, stylish, beautiful homes at IntNext, Elevate Your Living Experience: IntNext Real Estate, Redefining Modern Living.

Learn more: 
https://intnext-realestate.github.io",2,2,1,0,real-estate,"[real-estate, real-estate-management, real-estate-platform, real-estate-rental, real-estate-website]",0
sean-hetzel,sunset-investing,,https://github.com/sean-hetzel/sunset-investing,https://api.github.com/repos/sunset-investing/sean-hetzel,Fractional Real Estate Investing Platform,"# Sunset Investing v1

Real estate investing platform where investors can buy/sell fractions of rental properties akin to buying stocks of companies. The advantages for buying just a fraction of rental properties are increased diversification and accessibility. You'll get a fraction of the rent and appreciation.

https://sean-hetzel.github.io/sunset-investing/

![Sunset Investing](sunset-investing-image.png)

# Usage

Users can:

1. View rental properties for sale. 
2. Create an account with Auth..
3. Invest a fraction of rental properties.
4. Sell fractions of their holdings.

# Roadmap

I'm not working on this anymore, but rather making a whole other second version v2 from scratch. This is so it can use a react compatible UI template instead. 

# Support

seanhetzel1@gmail.com

# Contributing

Contributions welcome

# Installation:

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br>
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br>
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br>
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br>
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br>
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can‚Äôt go back!**

If you aren‚Äôt satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you‚Äôre on your own.

You don‚Äôt have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn‚Äôt feel obligated to use this feature. However we understand that this tool wouldn‚Äôt be useful if you couldn‚Äôt customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting

### Analyzing the Bundle Size

This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size

### Making a Progressive Web App

This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app

### Advanced Configuration

This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration

### Deployment

This section has moved here: https://facebook.github.io/create-react-app/docs/deployment

### `npm run build` fails to minify

This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify
",2,2,2,26,real-estate,"[investing, react, real-estate, rental-properties]",0
arithescientist,real_estate_prediction,,https://github.com/arithescientist/real_estate_prediction,https://api.github.com/repos/real_estate_prediction/arithescientist,The goal of this research is to analyze past housing data in order to predict the sell prices of homes,"# Investigating the Housing Industry In Kings County

<img src='images/mapswithcountss.png' width='60%'/>

# Table Of Contents
* [Purpose](#purpose)
* [Data Files](#data-description)
* [Question 1](#question-1)
* [Question 2](#question-2)
* [Question 3](#question-3)
* [Future Work](#future-work)
  
<!---
# = h1
## = h2
### = h3
#### = h4
##### = h5
--->

# Purpose
The goal of this research is to analyze past housing data in order to predict the sell prices of homes and answer the following questions: 
   * Q1 - How are Houses in Kings County Distributed and the effect of Zipcodes on price?
   
   * Q2 - Does distance from the city have an effect on House Price?
   
   * Q3 - Are Waterfront properties more expensive?


# Data Description
Data files used:
   * cleaned_geodata.json
   * data_correlation_gone.csv
   * datawithnewcols.csv
   * kc_house_data.csv
   * Zip_Codes.geojson


## Question 1:
## How are Houses in Kings County Distributed and the effect of Zipcodes on price?

### [EDA](./Questions/Question1.ipynb)
#### Count by Zipcode
   <img src='images/mapwithcounts.png' width='60%'/> 

#### Price by Zipcode
   <img src='images/mapwithprice.png' width='60%'/>

### Conclusion
By analyzing the first map, we can see that zipcodes surrounding Bellevue have more houses than zipcodes further out. Upon closer look at the second map we can see the most expensive homes are concentrated in zipcodes North of the County closer to Bellevue and the cheaper homes are located south of the county. 

### Recommendation
The North of the County has some of the most expensive properties so I belive this region is in high demand so one could expect a good amount of return by investing in real estate within ths region.


# Question 2:
## Does distance from the city have an affect on House Price?

### [EDA](./Questions/Question2.ipynb)
#### Distance from closest city v Price
   <img src='images/distancexprice.png' width='60%'/>

#### Price v Size
   <img src='images/pricexsize.png' width='60%'/>

#### Distance from biggest city (Seattle) v Size
   <img src='images/seattlexsize.png' width='60%'/>

### Conclusion
By looking at the plot we can see houses above $1 milllion are located withing 20km of Bellevue. And for homes within 50km of Seattle, Although the price/house increases the bigger the sqft, the price/sqft reduces the the further away from Seattle a house is.

### Recommendation
I'll definitely recommend investing in homes 50km from Seattle which is also about 20km from Bellevue. By doing this you'll get more space for a less price which will also translate into higher returns.


# Question 3:
## Are Waterfront properties more expensive?

### [EDA](./Questions/Question3.ipynb)
   <img src='images/waterfront.png' width='60%'/>

### Conclusion
From analyzing the violin plots we can conclude that waterfront properties are more expensive than others with a mean and median price of $1.7 million and $1.5 million. Homes without a waterfront have a mean and median price of $532,000 and $450,000 respectively.

### Recommendation
Investing in waterfront properties would definitely be a smart move given there a difference of $1 million between the average home prices of a waterfront and no waterfront property.


# [Model 1](./models/model1.ipynb)
For the first model the independent variables I used were:
   * Grade
   * Area of inside home
   * Area of parking lot
   * Presence of waterfront
   * Age of home
   * Distance from Seattle
   * Distance from the airport

The equation for this model is:
    Price = (84890 * Area inside) + (-672.2227 * Area parking lot) + (341400 * Presence of waterfront) + (33230 * Age) + (-85020 * Distance from City) + (84890 * Distance from Airport) + (-44920 * Grade 5) + (-44720 * Grade 6) + (12400 * Grade 7) + (94390 * Grade 8) + (263600 * Grade 9) + (264300 * Grade 10) + (359800 * Grade 11)

### EDA
   <img src='images/model1.PNG' width='60%'/>

## Interpretion
The model uses the price of the home based on grade, then a positive adjustment is made for the area inside, presence of a waterfront, age, distance from airport, followed by a negative adjustment for area of the parking lot and distance from the city. The R2 score means theres a 71.7% variance in price.


# [Model 2](./model/model2.ipynb)
For the first model the independent variables I used were:
   * Grade
   * View
   * Area of inside home
   * Area of parking lot
   * Presence of waterfront
   * Age of home
   * Distance from Seattle
   * Distance from the airport

The equation for this model is:
    Price = (92650 * Area inside) + (-674.9984 * Area parking lot) + (226400 * Presence of waterfront) + (25930 * Age) + (-86480 * Distance from City) + (51940 * Distance from Airport) + (61750 * Grade) + (33280 * View) 

### EDA
   <img src='images/model2.PNG' width='60%'/>


## Interpretation
The model uses the price of the home based on grade, then a positive adjustment is made for the area inside, presence of a waterfront, age, distance from airport and view, followed by a negative adjustment for area of the parking lot and distance from the city. The R2 score means theres a 95.5% variance in price.


# [Final Model](./models/Final_Model.ipynb)
For the first model the independent variables I used were:
   * Grade
   * Area of inside home
   * Area of parking lot
   * Number of bedrooms
   * Number of bathrooms
   * Distance from closest city

The equation for this model is:
    Price = (84541 * Area inside) + (24190 * Area parking lot) + (-12510 * Number of bedrooms) + (3849.4898 * Number of bathrooms) + (-109100 * Distance from City) + (429646 * Grade 4) + (410804 * Grade 5) + (400781 * Grade 6) + (441474 * Grade 7) + (499282 * Grade 8) + (588835 * Grade 9) + (648431 * Grade 10) + (707515 * Grade 11)

### EDA
   <img src='images/Final.png' width='60%'/>


## Interpretation
The model uses the price of the home based on grade, then a positive adjustment is made for the area inside, area of parking lot, bathrooms, followed by a negative adjustment for bedrooms and distance from the city. The R2 score means theres a 70.1% variance in price.

# Future Work
   * Zip code Feature - Create a boundary selector to enable the model to predict price depending on zip code.

   * More Data - Collate data for the passed 20 years to see how the house prices have changed and also the distinct trends, such as malls, theatres, etc. in different zip codes and how they effect the prices of homes.
   
   * Explore the effects of the distance from a city on presence and size of a basement.
",2,2,1,0,real-estate,"[data-science, machine-learning, python, real-estate, statistics]",0
impmccaffrey,real-estate-market,,https://github.com/impmccaffrey/real-estate-market,https://api.github.com/repos/real-estate-market/impmccaffrey,MLS Real Estate Data Exploration and Forecasting,"# MLS Real Estate Data Exploration and Forecasting

This project explores real estate data trends and makes some prediction for future outcomes. Of particular interest is predicting active listings by month.

## Results
View the [fbprohpet notebook](fb-prophet-forecast.ipynb) for the current set of interesting results including the detailed predictions. Here's a look at the chart output:

![forecast](https://i.imgur.com/5VrXXa4.png)
![decomposition](https://i.imgur.com/8jMDKUK.png)

## Motivation
 It is at the present *very* difficult to purchase a house in the market I am interested in, which in my case are the exurbs of the Boston metro. Housing inventory seems to be nonexistent. It's a bad sign when you open Zillow in the morning to find every house has already been clicked on, and no new ones are being added.
 
 I'm mainly motivated by gathering some data on when I expect the housing inventory to pick, and by what magnitude will it increase by. I don't need to pick the time of year when prices are lowest. Instead, I want some idea of when the feeding frenzy might relax.
## Getting Started
This was developed with `jupyterlab v2.2.9` and `Python 3.8`.

Install the prerequisite Python packages by running in your terminal `pip -r requirements.txt`

Create your personal `zipcodes.csv` file, per the [instructions](#Data-Files) below in this readme.

Start by running [download-mls-data](download-mls-data.ipynb) notebook to get the data.

Then run the [fb-prophet-forecast](fb-prophet-forecast.ipynb) notebook to create your market predictions.

The R packages can be installed inside of the notebook.
## Data Files
Most of the data files are provided by [Realtor.com Research Data](https://www.realtor.com/research/data/). The inventory data dates back to July 2016 on a monthly basis.

The other data file you will need is `zipcodes.csv`. You will need to create this yourself. The schema is:
| Zipcode | City                |Rank
| --------| -----------         | ---
| 90210   | Beverly Hills, CA   | 2
| 03301   | Concord, NH         | 1
| 10017   | New York, NY        | 2

Where Rank is a an at this time unused ranking I gave the various zipcodes based on how desirable I think living in them in. It is unused but I have created in case I wish to implement certain weighted scores in the future.

This purpose of `zipcodes.csv` is to provide a filter on the original MLS dataset. Thus, the novelty here is to predict housing trends _only in the regions you are interested in_. From a modeling persepective, it makes sense if these are geographically adjacent. Think of it like creating your own personal county.

### Errata
I've noticed an error in the source Realtor.com data, notably that `postal_code` has the leading 0 stripped of it, for postal_codes that begin with 0.

## TODO
- [ ] Import the .csv files into a database
- [ ] Manage an ETL to append only the _new_ data into the appropriate DB table. I want to save the oldest data in case Realtor.com's csv files have a fixed row limit.
- [ ] Fix the data errata like stripping 0s from zipcodes upon data import
",2,2,1,0,real-estate,"[forecasting, real-estate, time-series]",0
arturlunardi,Coursera_Capstone,,https://github.com/arturlunardi/Coursera_Capstone,https://api.github.com/repos/Coursera_Capstone/arturlunardi,Applied Data Science Capstone Project for IBM Data Science Professional Certificate on Coursera.,"# IBM Data Science Professional Certificate | Applied Data Science Capstone

## Peer-graded Assignment: Capstone Project Notebook's

### Course Contents

### Week 1 - Introduction to Capstone Project

* Introduction to Capstone Project
* Learning about the capstone project and the different tools and skills that you will learn in this course.
* Learning about the different location data providers and what location data is composed of.
* Learning how to sign up on Watson Studio, and how to create a project, start a notebook, and share the notebook.
* Creating a project on Watson Studio, create a project, start a notebook and share it with your peers.
* Location Data Providers
* Signing-up for a Watson Studio Account
* Peer-review Assignment: Capstone Project Notebook

### Week 2 - Foursquare API

* Learning about Foursquare and its API.
* Learning how to create a Foursquare developer account.
* Creating a Foursquare developer account.
* Learning how to use the Foursquare API to search for a specific type of venues, explore a given venue, and search for trending venue around a location.
* Completing a lab to better understand how to make calls to the Foursquare API and retrieve location data from its database.
* Getting Foursquare API Credentials
* Using Foursquare API
* Lab: Foursquare API
* Quiz: Foursquare API

### Week 3 - Neighborhood Segmentation and Clustering

* Learning about clustering and k-means clustering in particular.
* Learning how to use the Foursquare API and clustering to segment and cluster the neighborhoods in New York City.
* Learning how to use the Beautifulsoup Python package to scrape websites and parse HTML code.
* Applying the skills acquired so far in this course to segment and cluster neighborhoods in the city of Toronto.
* Clustering
* Lab: Clustering
* Lab: Segmenting and Clustering Neighborhoods in New York City
* Peer-review Assignment: Segmenting and Clustering Neighborhoods in Toronto

### Week 4 - Capstone Project

* Define a problem for your capstone project.
* Discuss the data that you will use to solve the problem.
* Peer-graded Assignment: Capstone Project - The Battle of Neighborhoods (Week 1)

### Week 5 - Capstone Project (Cont'd)

* Carry out the remaining work to complete the capstone project.
* Submit a link to your project notebook and a complete project report.
* Peer-graded Assignment: Capstone Project - The Battle of Neighborhoods (Week 2)",2,2,1,0,real-estate,"[capstone, clustering, coursera, data-science, python, real-estate]",0
aniskchaou,PROPERTY-CRUST-CMS,,https://github.com/aniskchaou/PROPERTY-CRUST-CMS,https://api.github.com/repos/PROPERTY-CRUST-CMS/aniskchaou,"Property Crest is a web application that offer a basic but very essential feature to manage all the activity related to Real Estate business at single place. You can manage Clients, Leads, Sales and billing for your properties.",,2,2,3,0,real-estate,"[elementor, houzez, real-estate, real-estate-management, slider-revolution, wordpress]",0
kaiyungtan,ImmoEliza-API,,https://github.com/kaiyungtan/ImmoEliza-API,https://api.github.com/repos/ImmoEliza-API/kaiyungtan,"To create an API that will make price forecasts on houses according to certain parameters (postal code, number of rooms, surface area, etc.)","<img width=""1127"" alt=""Screenshot 2020-11-26 at 19 02 44"" src=""https://user-images.githubusercontent.com/69633814/100381811-15ebf400-301a-11eb-98b9-22263511e16a.png"">

# ImmoEliza-API

To create an API that will make price forecasts on houses or apartments according to certain parameters (postal code, number of rooms, surface area, etc.)

* Website (AI Dev) - https://immoeliza-real-estate.herokuapp.com/

* Github page - https://kaiyungtan.github.io/ImmoEliza-API/

* Website (Web Dev) - Under construction

* Github repo (Web Dev) - https://github.com/VieiraHenrique/testPhp (Under construction)

## Background

This project is a collaboration between BeCode AI and the BeCode Web 
Dev team.

The AI developers will create an API and the web developers will develop an interface for the client ""ImmoEliza"". 

The main process is about a collaboration between the AI and the web dev so that all have to be in sync in order to know how to construct the form.

Team Members consists of: 

* AI Dev  : Adam 

* Web Dev : Valentin, Henrique, Nathana√´l 

    
## Mission objectives  

* Be able to create a prediction model
* Be able to deploy model
* Be able to work in a team
* Be able to build an api

## The Mission

You need to create an API that will make price forecasts on houses or apartments according to certain parameters (postal code, number of rooms, surface area, etc...). This API will be used by web devs who will be able to use it to create an interface for the ImmoEliza agency.


## Use Case examples:
 
* to find out what is the predicted price of a house or apartment based on your selection criteria.
* to compare the asking price of what is posted on the real estate website i.e ImmoWeb with what is predicted price.
* to compare the price per square meter of the property with the average price per square meter of the city


### Must-have features

* The api must be functional 
* Your model must be functional


### Additional features

* to provide house/apartment average price (square per meter) for all cities in Belgium
* to show the difference (%) between house/apartment sq/m2 versus the average sq/m2 for the city


## Machine Learning Process Overview

![image](https://user-images.githubusercontent.com/69633814/100385145-1ab4a600-3022-11eb-9674-af2276a16f9e.png)

## Business Understanding 

* Getting a good estimate of the price of a house or apartment is hard even for the most seasoned real estate agents. It involves a lot of variables. The owner of the property can determine the price based on many factors. The property itself is of course the main factor to determine the price. However the location and facilities around the property can hugely impact the price. In addition, the inflation rate or personal reason can also play a part in influencing the price.

* In this project, we are using different machine learning algorithms to learn from the features of the real estate in order to predict the price. The models neither take into account of the facilities around the real estate , nor it include other external factors i.e COVID-19 effect on the housing prices.

* The price prediction is based on the price that posted on the website and not the actual transaction of the property. With this in mind, we can assume that when listing the property , most of the owner will probably put a higher price for room of negoatiation.

* According to [STATBEL](https://statbel.fgov.be/en/themes/housing/house-price-index#news):

	* The observed annual inflation rate for house prices amounts to 4.5 % in the second quarter of 2020 compared to 3.5 % in the previous quarter.

	* The average inflation rate for the last four quarters amounts to 4.3 %.

	* The house price index went up by 1.4 % in the second quarter of 2020 compared to the previous quarter.

	* The house price index can be broken down by new houses and existing houses. In the second quarter of 2020, annual inflation amounted to 5.3 % for new houses and 4.3 % for existing houses. 

note: The house price index measures the price evolution with the assumption that the characteristics of the property sold remain unchanged.


## Data Understanding

* The dataset for the real estate were scrapped form [Immoweb](https://www.immoweb.be/) probably the biggest real estate website in Belgium mid of September 2020 with more than 50,000 of properties including houses and apartments from a previous BeCode [Data Collecting Challenge](https://github.com/kaiyungtan/challenge-collecting-data).

* Initially the dataset have 52077 rows and 20 columns and after data cleaning it was reduced to 40395 rows (observations) and 18 columns.

* In order to get geographical informations about the data, Postal Codes dataset from [https://data.gov.be/](https://data.gov.be/fr/dataset/328ba4f140ba0e870dfc9c70635fe7c1840980b1) is merged with  the real estate dataset during a previous BeCode [Real Estate Data analysis](https://github.com/kaiyungtan/Real-Estate-data-analysis).


## Data Preparation

* After further data cleaning, the dataset was reduced to 24040 rows (observations) with 19 columns.(belgium_real_estate_2020_rev1_19.11.2020.csv)

* Then the dataset were seperated to 2 dataset seperately namely df_house for houses and df_apartment for apartements.[Belgium_Real_Estate_2020](https://github.com/kaiyungtan/ImmoEliza-API/blob/main/notebook/Belgium_Real_Estate_2020_Immoweb%20-%20House%20%26%20Apartment.ipynb)

	- df_house (10254 rows, 19 columns)(belgium_houses_20.11.2020.csv)
	- df_apartment (13207 rows, 18 columns) (belgium_apartments_20.11.2020.csv')

*  to compare predicted price square per meter with the average price square per meter of a city, a seperate dataset was prepared to have only 7 columns:[Price_Sqm](https://github.com/kaiyungtan/ImmoEliza-API/blob/main/notebook/Data_analysis%20%26%20Create%20Price_Sqm.ipynb)
		- city_name	
		- postal_code	
		- price_sqm	
		- region	
		- province	
		- longitude	
		- lattitude

* 2 folium map were created to show average price square per meter in each city for houses and apartement. 
	* [average_house_price](https://immoeliza-real-estate.herokuapp.com/map_average_house_price)
	* [average_apartment_price](https://immoeliza-real-estate.herokuapp.com/map_average_apartment_price)


### Features of the dataset:
<ol>
	<li> postal_code (str): Postal code of city.</li>
	<li> city_name (str): city names in Belgium.</li>
	<li> number_of_rooms (int): The number of rooms of the property.</li>
	<li> house_area (int): The area (m2) of the house (floors).</li>
	<li> fully_equipped_kitchen (str): yes/no </li>
	<li> open_fire (str): yes/no </li>
	<li> terrace (str): yes/no </li>
	<li> garden (str): yes/no </li>
	<li> number_of_facades (int): The number of facades (0 to 4). </li>
	<li> swimming_pool (str): yes/no </li>
	<li> state_of_the_building (str): as new/good/just renovated/to renovate/unknown </li>
	<li> construction_year (int): The property built's year. </li>
	<li> surface_of_the_land (int): The area (m2) of the land. (for house only) </li>
</ol>

### Target of the dataset:

<ol>
<li> price (float) : Price (‚Ç¨) of the property.</li> 
</ol>

## Modeling

*  The objective of machine learning is not a model that does well on training data, but one that demonstrates it satisfies the business need and can be deployed on live data.

* A machine learning model is a file that has been trained to recognize certain types of patterns. You train a model over a set of data, providing it an algorithm that it can use to reason over and learn from those data.

* Libraries used in this project as follow:
	<details>
	  <summary>Libraries</summary>
			<li> from sklearn.model_selection import train_test_split</li> 
			<li> from sklearn.preprocessing import StandardScaler,OneHotEncoder</li> 
			<li> from sklearn.compose import ColumnTransformer</li> 
			<li> from sklearn.pipeline import Pipeline</li> 
			<li> from sklearn.linear_model import LinearRegression</li> 
			<li> from sklearn.linear_model import Lasso,Ridge,ElasticNet</li> 
			<li> from sklearn.tree import DecisionTreeRegressor</li> 
			<li> from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor </li> 
			<li> from xgboost import XGBRegressor</li> 
			<li> from sklearn.metrics import mean_squared_error, r2_score </li>  
	</details>

* The following diagram shows the process of modeling. 

![image](https://user-images.githubusercontent.com/69633814/100377837-5778a100-3012-11eb-958d-5e5862ffb533.png)

* random search cross validation were used to find the best parameter setting that gave the best results on the hold out data.

* Libraries used as follow:
	* from sklearn.model_selection import RandomizedSearchCV
	* from sklearn.metrics import make_scorer


## Evaluation

*  After evaluating 8 different models on the test set plus various random search cross validation conducted on the test set:   

	* a ridge model (alpha=0.7) was selected for house price prediction with train accuracy: 0.77 and test accuracy: 0.73.

	* a XGboost model (n_estimators=700, max_depth= 4, learning_rate= 0.3) was selected for apartment price prediction with train accuracy: 0.88 and test accuracy: 0.77

* plot predicted vs actual overlay the regression line as show for ridge model.

![ridge](https://user-images.githubusercontent.com/69633814/100383137-36697d80-301d-11eb-8f7e-685246ba39b0.png)

* plot predicted vs actual overlay the regression line as show for Xgboost model.

![xgb_rs](https://user-images.githubusercontent.com/69633814/100444604-f8676a80-30ab-11eb-967c-ba73005aabd1.png)

* models was saved using joblib library.

* to test a new / live unseen data, an example of new immoweb were chosen:

* https://www.immoweb.be/en/classified/house/for-sale/averbode/3271/9040949?searchId=5fb6439b8044e

	<details>
	  <summary>House for sale</summary>
			<li> ‚Ç¨230,000</li> 
			<li> 4 bedrooms  226 m¬≤square meters</li> 
			<li> Bredestraat 70 3271 ‚Äî Averbode</li> 
			<li> Construction year 1930</li> 
			<li> Building condition To renovate</li> 
			<li> Facades 3</li> 
			<li> Kitchen type Installed</li> 
			<li> Surface of the plot 398 m¬≤square meters</li> 
			<li> Garden surface 150 m¬≤square meters</li> 
			<li> Terrace surface 25 m¬≤square meters</li> 
	</details>

* create X_new features for predictions
	* X_new = {
	'postal_code':'3271',
	'number_of_rooms': 4,
	'house_area' : 226,
	'fully_equipped_kitchen': 'yes',
	'open_fire':'no',
	'terrace':'yes',
	'garden':'yes',
	'number_of_facades': 3,
	'swimming_pool': 'no',
	'state_of_the_building': 'to renovate',
	'construction_year' : 1930,
	'surface_of_the_land' : 398}

* The result show predicted price for the house is ‚Ç¨ 228964.0
and -0.45 % difference compare to the posted asking price for the house.

![image](https://user-images.githubusercontent.com/69633814/100384970-b691e200-3021-11eb-9979-0cf1fb82e7f9.png)

## Deployment on Heruko

* Create web app using Flask as framework
	* Create a virtual environment called myenv 
	* pip install all libraries flask / numpy etc
	* pip freeze --local > requirements.txt to create list of libraries installed on myenv environment
	* Create a flask app -- named app.py
	* Add routes for api
	* create layout template
	* create Procfile -- web: gunicorn app:app
	* pip install gunicorn and update requirements.txt
* Commit code on github
* To deploy in heruko:
	* create account in heroku
	* link the github to heroku
	* using terminal:
		* heroku create
		* git push heroku HEAD:master
		* heroku ps:scale web=1
		* heroku open
* Deployment successful.  

* To test a new unseen data, an example from immoweb is chosen:

* https://www.immoweb.be/en/classified/apartment/for-sale/anderlecht/1070/9042073?searchId=5fb749cc3354c

	<details>
	  <summary>Apartment for sale</summary>
		<li>‚Ç¨320,000</li> 
		<li>3 bedrooms | 130 m¬≤ square meters</li> 
		<li> 1070 ‚Äî Anderlecht</li> 
		<li>Construction year	2017</li> 
		<li>Building condition	As new</li> 
		<li>Facades	2</li> 
		<li>Kitchen type	USA hyper equipped</li> 
		<li>Terrace surface	14 m¬≤ square meters</li> 
	 </details>

* Prediction with Postal Code - Apartment https://immoeliza-real-estate.herokuapp.com/apartment_postal_code

<img width=""1143"" alt=""Screenshot 2020-11-26 at 19 02 01"" src=""https://user-images.githubusercontent.com/69633814/100381998-9a3e7700-301a-11eb-8f40-7161681a2cf5.png"">

* Result the predicted price for the apartment is ‚Ç¨ 324,034 and 1.3 % difference compare to the posted asking price for the apartment.
<img width=""1166"" alt=""Screenshot 2020-11-26 at 19 00 59"" src=""https://user-images.githubusercontent.com/69633814/100381829-2308e300-301a-11eb-86d4-1296780b902c.png"">


## API for web dev

* two API routes were created for web dev to access the api namely:

	* https://immoeliza-real-estate.herokuapp.com/predict_house_tojson2
	* https://immoeliza-real-estate.herokuapp.com/predict_apartment_tojson2

* it returns a json file with 4 key value pairs:

	* ""1. predicted price"" : str(output)
    * ""2. predicted price_sqm"" : str(pricem2)
    * ""3. {city_name} average price_sqm"" : str(price_sqm)
    * ""4. difference(%)"" : str(difference_pct)


* tested api with [postman](https://www.postman.com)

![api_web_dev](https://user-images.githubusercontent.com/69633814/100384809-556a0e80-3021-11eb-968c-9deaeae8466f.png)


## Challenges

* time spent on training models
* deployment on heruko


## Limitation

* only for prediction price of general houses or apartments, it doesn't include subtype of property like villa,town-house,mansion,other exceptional property, country house.

* when unseen data is one of the subtype of property, the model predicted price will have higher difference of the price.


## Further Development

* To obtain more recent dataset from immoweb or other property websites  
* To include other features:

	*	Amenities : cellar? attic? parking?
	*	View of the property
	* 	Energy class
	*	Number of floors (for apartment)
	*	Elevator (for apartment)

* Explore other machine algorithms i.e CatBoost, LightGBM
* To propose related property on the website based on the inputs and predicted price
* To predict rental prices of houses or apartments
* Deployment model in virtual service in the cloud: 
	* Amazon Web Services (AWS) EC2 Instance   
	* Google Cloud platform 
	* Azure Cloud

* To include range of prediction i.e 10% lower or higher of the predicted price

<img width=""1155"" alt=""Screenshot 2020-11-27 at 14 17 39"" src=""https://user-images.githubusercontent.com/69633814/100453566-71ba8980-30bb-11eb-9823-8fd44b609d8a.png"">


",2,2,1,0,real-estate,"[deployment, flask, heroku, machine-learning, price-forecasts, real-estate]",0
brandonabela,Malta-Property-Analysis,,https://github.com/brandonabela/Malta-Property-Analysis,https://api.github.com/repos/Malta-Property-Analysis/brandonabela,Ranking real estate investment opportunities in Malta using multi-threaded scraping of rental features from multiple real estate agencies to identify the best investment options based on correlation and similarity.,"# Malta Property Analysis

This project aims to uncover the most profitable real estate opportunities in Malta by comparing and ranking properties for sale against similar rental properties. By analysing key features of each property, we are able to identify those with the highest potential return on investment (ROI).

## Dataset Compilation

For the analysis of the property market to occur, a dataset had to be compiled. The selenium python package was used for this purpose, with the implementation of multithreading to allow for concurrent scraping of multiple websites. The websites ```Alliance```, ```Belair```, ```Ben Estates```, ```Dhalia```, ```Frank Salt```, ```Remax```, ```Sara Grech``` were scraped for properties for sale and rental. In addition, ```Quicklets``` was scraped specifically for rental properties and ```Zanzi``` was scraped for properties for sale.

![Source Distribution](https://user-images.githubusercontent.com/23166383/215691494-a33f8c7a-3f80-44c5-93f2-80055c4457cc.png)


Every data source had its own unique logic to ensure that every feature was at a common baseline, and every data source was saved as a separate ```CSV```. The use of multithreading in the scraping process allowed for efficient and quick compilation of a comprehensive dataset containing information on properties for sale and rental from multiple sources, providing a thorough understanding of the current property market in the area.

The following details highlight the key features extracted from the website sources for both sale and rental properties.
- **Is_Sale**: This feature indicates whether the property is for sale or not. It is a boolean variable (e.g. True or False) where True indicates that the property is for sale and False indicates that it is not.
- **Source**: This feature indicates the source website where the information of the property was scraped from.
- **Reference**: The reference is a unique identifier that is specific to the website source and can be used to easily locate the property within that source.
- **Town**: This feature specifies the city where the property is located.
- **Type**: This feature indicates the type of property. Examples include house, apartment, villa, etc.
- **Stage**: This feature denotes the current stage of development of the property. It can be categorized as on plan, shell, finished, furnished, unconverted, or unclassified.
- **Bedrooms**: This feature indicates the number of bedrooms in the property.
- **Bathrooms**: This feature indicates the number of bathrooms in the property.
- **TotalSqm**: This feature indicates the total area of the property measured in square meters.
- **IntArea**: This feature indicates the internal area of the property measured in square meters.
- **ExtArea**: This feature indicates the external area of the property measured in square meters.
- **Price**: This feature specifies the cost of the property, denoted in Euro currency.

## Dataset Processing

After the data scraping has finished, the data processing starts by loading all the data sources and eliminating the types and towns that are not in the scope. The stage, type and town features are mapped to eliminate variations in wording. The town feature represents the province, latitude and longitude features. If any of the features: Is_Sale, Source, Reference, Town and Type are missing, the entire record is removed.

If the total square meter is not filled but the interior and external areas are provided, the total square meter can be implied. Furthermore, a statistical method of Z-score is applied to eliminate prices that have an absolute value greater than 1 based on the type.

The following are explanations of the implied features:
- **Province**: This feature specifies the region in which the property is located, such as North, East, South, West, Central and Gozo.
- **Latitude**: This feature denotes the geographical position of the town relative to the distance north or south of the equator.
- **Longitude**: This feature measures the town's geographical location in relation to the distance east or west of the Prime Meridian.

## Data Analysis

The dataset contains 86,906 rows and 16 columns. There are 75,291 missing values in the External Area and Internal Area columns, 56,168 missing values in the Total Square meter column, and 4,831 missing values in the Bathrooms column. All missing values in the dataset have been filled with the value ```unclassified```.

![City Plot](https://user-images.githubusercontent.com/23166383/215432109-0221dc71-7e99-4cc7-a3d3-27766bc2ad51.png)

The data reveals that Remax, Frank Salt, and Zanzi have the highest number of properties for sale, while Remax, QuickLets, and Frank Salt have the highest number of rental listings. In regards to property staging, Remax leads in properties on plan, shell, and finished stages. Meanwhile, Frank Salt has the most furnished properties. Additionally, Ben Estate has the largest number of properties without proper classification.

The top 10 towns in terms of combined property listings for sales and rental are ```Sliema```, ```Saint Julian's```, ```Gzira```, ```Swieqi```, ```Marsaskala```, ```Saint Paul's Bay```, ```Msida```, ```Qawra```, ```Mellieha```, and ```Mosta```. ```Saint Paul's Bay``` has the most property listings for sale, while ```Sliema``` has the most property listings for rent. For sale apartments, the 1st quartile is 225K, the median is 265K, and the 3rd quartile is 319K. For rental apartments, the 1st quartile is 900, the median is 1200, and the 3rd quartile is 1500.

![Top 10 Towns](https://user-images.githubusercontent.com/23166383/215691237-85a6c587-75e4-406d-8a6b-539f89f4242c.png)

When analysing the correlation between features and the sale price, it has been determined that the number of bedrooms, bathrooms, and external area are positively correlated with the sale price. This means that as these features increase, the sale price is likely to increase as well. On the other hand, the total square meter and internal area have no correlation with the sale price.

When analysing the relationship between various features and the rent price, no correlation was found. This may be due to a number of other factors playing a significant role in determining the rent price, such as the location of the property and the quality of its finishing. These factors, rather than the features mentioned, are likely to be the primary drivers of rent prices.

## Conclusions

The ```sale_price.csv``` file groups sale listings using the columns ```Type```, ```Province```, ```Town```, ```Bedrooms```, and ```Stage```. The ```rent_price.csv``` file groups rental listings using similar columns as ```sale_price.csv```, but excluding ```Stage```. Both outputs perform the following aggregations for each group:

- **Reference**: count of the number of references or listings in each group.
- **Bathrooms**: median of the number of bathrooms in each group.
- **IntArea**: median of the internal area (in square meters) in each group.
- **ExtArea**: median of the external area (in square meters) in each group.
- **Price**: minimum, maximum, and median of the price in each group.

The aggregations of both ```sale_price.csv``` and ```rent_price.csv``` were combined based on the rental columns, with a requirement for references to be greater than 2 for both sales and rental. This guaranteed that the grouping of properties would be meaningful and not include outliers in their ranking. This resulted in 1868 unique groups. Metrics such as downpayment amount, loan amount, repayment monthly, vacancy monthly, repairs monthly, management monthly, and cash on cash return were computed for each group. The top 5 groups, sorted by cash on cash return, were: penthouse in Kalkara with 3 bedrooms on plan, house of character in Birkirkara with 3 bedrooms unclassified, penthouse in Kalkara with 3 bedrooms finished, apartment in Ta' Xbiex with 3 bedrooms furnished, and apartment in Saint Julians with 3 bedrooms unclassified.

The ranking process of property sales is based on an aggregation per listing and the cash on cash return. The top 5 listings with the highest cash on cash return, ranging from 151 to 63, are as follows:

1. House of Character in Zebbug with 4 bedrooms and 3 bathrooms (unclassified)
2. House of Character in Zejtun with 3 bedrooms and 2 bathrooms (furnished)
3. House of Character in Birkirkara with 3 bedrooms and 2 bathroom (unclassified)
3. House of Character in Birkirkara with 3 bedrooms and 1 bathroom (unclassified)
4. House of Character in Birkirkara with 3 bedrooms and 1 bathroom (furnished)

These properties have been listed based on their cash on cash return, which is a financial metric used to evaluate the potential profitability of a real estate investment. The properties listed above offer a high return on investment, making them attractive options for potential buyers.
",2,2,1,0,real-estate,"[data-analysis, data-exploration, data-visualisation, python, real-estate, web-scraping]",0
SabujXi,Python-Scraper-and-Data-Analysts-Admin-Panel-in-Django,,https://github.com/SabujXi/Python-Scraper-and-Data-Analysts-Admin-Panel-in-Django,https://api.github.com/repos/Python-Scraper-and-Data-Analysts-Admin-Panel-in-Django/SabujXi,"A data scraper from texas govt site and a helping web app for managing, reviewing and editing the data","# Python Scraper and Data Analysts Admin Panel in Django
A data scraper from texas govt site and a helping web app for managing, reviewing and editing the data

A friend of mine taken data entry contract for for their farm. It was a lot of data.
You need to go the govt site of Texas, serch city one by one, go to the company/customer lists and copy those data to excel steet. It could take one mongth (two weeks if two person did this) for a single data entry operator or analyst to add those data and keep those data organized in excel steet.

In the middle of their work I told them to tell me all the problems they are facing and all the fetures/issues this site have.
I analyzed the source code of the site and also saw that there are some issue with sessions so it is not an easy task to make a scraper fot the site. But still after testing and tricking the site I made a very simple but perfect scraper. Mined all the data and then made an admin panel for the data entry operators and/or analysts.

It's no facncy work but it's a two pieces software that made their work very easy and some great amount of money with perfect data output and client satisfaction. I am uploading this project for those who may need such apps and may use my work as reference or helper to build theri project or may directly use this (with some variable value change) if their work is similar.

Note: I made this two pieces software for having the work done perfectly and deveoped it very quickly. So, I did not follow all the best practices of software development and good practices of python. Even regular expressions used here are perfect but not clean because it was made to have the work done perfectly not to make it a viral project.


You can contact me through http://sabuj.me or go to my linkedin account where my user name is SabujXi or also same user name on twitter or facebook.

Below are some screenshots - I haven't taken any screenshot during scraping, so the following screenshots are from the panel of data entry/analyst operator.

![Data in a city](screenshots/data-in-a-city.JPG?raw=true ""Data in a city"")

![Edit data](screenshots/edit-data.JPG?raw=true ""Edit data"")

![List cities](screenshots/list-cities.JPG?raw=true ""List cities"")
",2,2,2,3,real-estate,"[analyst, data, data-analysis, data-entry, data-scraper, django, django-application, python, python-scraper, real-estate, regex, scraper, texas]",0
enesbol,Colorado-Real-Estate-EDA-SARIMAX-Model,,https://github.com/enesbol/Colorado-Real-Estate-EDA-SARIMAX-Model,https://api.github.com/repos/Colorado-Real-Estate-EDA-SARIMAX-Model/enesbol,"The course of the Colorado real estate market, influencing financial and demographic factors, price projections for 2023.","# Colorado-Real-Estate-EDA-SARIMAX-Model


**Project Goal:**
Deciding which city in Colorado to invest in


**Project Description:**
Monthly median house prices data for Colorado's regions and cities were required, financial / macroeconomic and demographic factors and their effects on house prices were investigated. With the inferences made from these data and the Sarƒ±max model, the cities that will bring the highest profit after 1 year were determined.


****Project Steps****

1 - Data Gathering from Zillow and Redfin

2 - Data preparation for data analysis.

3 - Exploratory data analysis.

4 - Extra Financial and Demographic Data Gathering for improving model performance.

5 - Feature Engineering for investigating which factors affect house prices, selecting features.

6 - Building SARIMAX model for predicting 320 citys 2023 house prices.

7 - Model evaluating and comparison with EDA. 

**Datas:**

****1 - Median House Price Datas****

1.1 - Time Series - Seasonality Adjusted Home Values Data from Zillow : https://www.zillow.com/research/data/

1.2 - Monthly Median Sale Prices from redfin : https://www.redfin.com/news/data-center/


****2 - Financial / Macroeconomic Datas****

2.1 - The Consumer Price Index (CPI)
2.2 - Inflation

https://www.minneapolisfed.org/about-us/monetary-policy/inflation-calculator/consumer-price-index-1913-

2.3 - The US Dollar Index (DXY, DX, USDX)
https://finance.yahoo.com/quote/DX-Y.NYB/history/

2.4 - M1 Money Supply
https://fred.stlouisfed.org/series/M1SL

2.5 - Market Yield on U.S. Treasury Securities at 10-Year Constant Maturity
https://fred.stlouisfed.org/series/DGS10

2.6 - Velocity of M2 Money Stock
https://fred.stlouisfed.org/series/M2V#:~:text=The%20velocity%20of%20money%20is,services%20per%20unit%20of%20time


****3 - Demographic Datas****

3-1 Migration
https://gis.dola.colorado.gov/population/data/regional-data-lookup/

3-2 Colorado Annually Total Population
https://fred.stlouisfed.org/series/COPOP

****4 - Dependent Variable Colorado House Prices****

All-Transactions House Price Index for Colorado Thousand Dollars


****5 - Total Housing Units Data****
https://gis.dola.colorado.gov/population/data/regional-data-lookup/ 






<div style={{display:""flex"",flexWrap:""wrap"",gap:""20px"", alignItems:""center"", justifyContent:""center""}} >
   
   <h>Adjusting the frequency of missing data in some cities and filling the missing data.</p>
   <img src=""https://user-images.githubusercontent.com/76845631/192099868-30b1d8b1-3657-491a-8b4c-a375757b85ca.png"" width=""80%""  />
  
   
   <h>Some of the regions yearly ROI's until 2022<p>   
   <img src=""https://user-images.githubusercontent.com/76845631/192100116-edbabd9a-9942-4ba7-acfd-4c03d6508d43.png"" width=""80%"" />
   
   
   <h> Denver Median List Price Median Sale Price <p>      
   <img src=""https://user-images.githubusercontent.com/76845631/196011431-5c335aca-85ac-4dc6-a383-8e41643d0b3e.png"" width=""80%"" />     
   

   
   <h>Denver Median House Price Prediction for 2023 with confidence intervals<p>      
   <img src=""https://user-images.githubusercontent.com/76845631/192140262-04f3bf0c-7127-4373-8451-41bd00f96a3a.png"" width=""80%"" />
   
      
   <h>Cities with the highest ROI<p>      
   <img src=""https://user-images.githubusercontent.com/76845631/192101464-ac2a6d80-6176-439f-8a60-fbe2a41a078f.png"" width=""80%"" />


</div>

",2,2,1,0,real-estate,"[data-processing, prediction-model, real-estate, sarimax, time-series-analysis, time-series-forecasting]",0
zeit-ff,Real_Estate_UK,,https://github.com/zeit-ff/Real_Estate_UK,https://api.github.com/repos/Real_Estate_UK/zeit-ff,Compilation of web services related to UK real estate sector.,"# UK Real Estate

Compilation of web services related to UK real estate sector.

## Property portals

| Portal                                          | Ann. Revenue      | Traffic, Similarweb, Dec 22 | Comments                                 |
| ----------------------------------------------- | ----------------- | --------------------------- | ---------------------------------------- |
| [Rightmove](https://www.rightmove.co.uk/)       | ¬£304.9M (2021)    | 73.6M                       |
| [Zoopla](https://www.rightmove.co.uk/)          | ¬£317.3M (2018)    | 24.5M                       | Owned by ZPG Ltd. / Silver Lake Partners |
| [OnTheMarket](https://www.onthemarket.com/)     | \$15.0M - \$25.0M | 11.2M                       | 
| [PrimeLocation](https://www.primelocation.com/) | \$10.0M - \$15.0M | 3.5M                        | Owned by ZPG Ltd. / Silver Lake Partners |
| [OpenRent](https://www.openrent.co.uk/)         | \$2.0M - \$5.0M   | 3.4M                        |

## Property aggregators

Property aggregators - aggregate real estate listings from property portals and provides search to end users

| Aggregator                              | Ann. Revenue | Traffic, Similarweb, Dec 22 |
| --------------------------------------- | ------------ | --------------------------- |
| [placebuzz](https://www.placebuzz.com/) | -            | 869.0K                      |
| [Nestoria](https://www.nestoria.co.uk/) | -            | 649.4K                      |

## Social networks / web 2.0 platforms

| Network / platform                        | Comment                                                               |
| ----------------------------------------- | --------------------------------------------------------------------- |
| [Nextdoor](https://nextdoor.co.uk/)       | Neighborhood network                                                  |
| [Crystal Roof](https://crystalroof.co.uk/) | Location intelligence platform, with areas / postcodes review feature |
",2,2,2,0,real-estate,"[property-portal, proptech, real-estate, social-network, uk]",0
BooneTB,StiffMoney,,https://github.com/BooneTB/StiffMoney,https://api.github.com/repos/StiffMoney/BooneTB,Stiff Money's entry into Binance Hackathon: The Future Is Now event on https://gitcoin.co/hackathon/binance/projects/4302/stiff-money-deed,"# Stiff Money Token (DEED)

https://bscscan.com/token/0x919efd12babc1f93ad19330fbb35e9bb16fb89e9

#### Stiff Money DEED staking smart contract is still undergoing testing now, and we strongly advise not to deposit anything on the mainnet until we publicly launch the product. https://testnet.bscscan.com/address/0x6efead432cf746a44d39d368fcdf59a95f6c86f9

## Definition and description

$DEED tokens are governing tokens built on BEP20 Binance Smart Chain. The Staking Contract has a 10% APY LP rewards on $DEED staked into the Stiff Money smart contract.

$DEED tokens in circulation represent a $1 equivalent of $BNB swapped. $DEED can be staked on a smart contract that programmatically rewards LP providers with a fixed 10% APY paid in $DEED.

Those with $DEED staked on Stiff Money‚Äôs smart contract can vote on regions to acquire single family homes that are then resold on leased-to-own terms to homebuyers.

To acquire $DEED tokens intillay you can swap $BNB at https://stiffmoney.com/BNB-swap/ using a smart contract with zero fees until LP cap is reached.

## Stiff Money Governing Token

### Objective

Stable APY to attract liquidity providers who want to help others become homeowners. 
To provide $DEED stakers easy way to vote on where to buy real estate.
To provide PEOPLE more opportunities to own a home.

### Token model

-Initial market cap. $10,000,000 (10,000,000 $DEED)
-Stable model. 1 $DEED in circulation equals $1+ in real estate value
-Circulation. 10% increase in number of tokens each year based on #staked
-Fair launch. No pre-mine or team/advisors starting with any balances
-Zero Fees: No transaction cost or gas fees for staking or swapping 

## Governing Token Distribution

$5,000,000 worth of $BNB can be swapped at a 1 $DEED to $1.00 worth of $BNB exchange rate. Staking $DEED provides 10% APY based on the number of $DEED staked.

-50% of $DEED available for $BNB swap
-50% of $DEED available for Staking Rewards

Stiff Money has a model to use profits from the re-selling of real estate to buy back $DEED to keep a stable balance between staked $DEED and $DEED held for LP rewards, and maintain a greater than $1 per $DEED collateralization.

## Governing Token Framework

$DEED token holders can easily participate in shaping the decisions on where Stiff Money purchases single family homes using the platform.

Each $DEED token STAKED is counted as 1 vote.

Anyone with 100+ $DEED tokens staked can vote for any place in the world to be considered as a place to invest.

All proposals on where to invest are subject to a 60 day voting period, and any address with voting power can vote for or against the proposal. If a majority of votes are YES for the proposed region, it is added to the queue, and properties with profit potential will be searched for in that region. 

### Voting

All voting is done at https://stiffmoney.com/ with zero gas cost(no transaction fees).

### Quorum

At Least 51% of the total amount of $DEED staked needs to vote on a proposal for it to be valid, or else it will fail automatically. Also, at least 51% of the votes for it must be YES for it to pass.
",2,2,1,0,real-estate,"[blockchain, defi, real-estate, staking-pools]",0
Sabbirdiu,DjangoRealEstate,,https://github.com/Sabbirdiu/DjangoRealEstate,https://api.github.com/repos/DjangoRealEstate/Sabbirdiu,Real Estate application using Django  and rest API,,2,2,2,0,real-estate,"[backend, django, django-rest-framework, javascript, real-estate, realestate]",0
exodia-the-forbidden-one,realestate,,https://github.com/exodia-the-forbidden-one/realestate,https://api.github.com/repos/realestate/exodia-the-forbidden-one,Real Estate Management System based on spaghetti PHP :p,,2,2,1,1,real-estate,"[admin-dashboard, admin-panel, management-system, mysql, php, php7, real-estate, real-estate-website, real-estate-website-project, sql]",0
jerryshikanga,real_estate,,https://github.com/jerryshikanga/real_estate,https://api.github.com/repos/real_estate/jerryshikanga,A real estate management system built using python,"# real_estate
This is a simpe web app for real estate companies

To run this program your environment has to satisfy the following requirements 
* Python 3.5 or newer version
* Mysql server
---
Navigate into the root folder and run the following commands
1. pip install -r requirement.txt
2. python manage,py collectstatic
3. python manage.py makemigrations
4. python manage.py migrate
5. python manage.py shell


In the shell prompt enter the following code

>import init_script

>init_script.main()


In *real_estate/settings.py*
* look for allowed hosts an add your host name/ip
* change database settings to yours

",2,2,3,0,real-estate,"[python3, real-estate]",0
helloryosuke,japan-real-estate-data,,https://github.com/helloryosuke/japan-real-estate-data,https://api.github.com/repos/japan-real-estate-data/helloryosuke,Python Wrapper Library for Japan's Real Estate Transaction Prices API,"# Download Japan Real Estate Transaction Prices

## Disclaimer
It's an open-source tool that uses Japan Ministry of Land, Infrastructure, Transportation and Tourism (MLIT)'s publicly available APIs, and is intended for research and educational purposes.

Refer to MLIT's official documentation ([here](https://www.e-gov.go.jp/digital-government/api/webland.html)) for details on your rights to use the data downloaded.

## Quick Start

1. Construct a data field object using the `CityList` or `TradeList` class to specify the data to download.

2. Pass the data field object to `Request` class to construct the request.

3. Run the `.execute()` method to send request to download the data.

4. Reference the `Response` object data using `.json()` or `.df()`

```python
import jre

# city list for Tokyo (area code 13)
city_list = jre.data.CityList(13)

# make request
req = jre.Request(city_list)

# execute request
res = req.execute()

# get data in dict/json format
res.json()

# get data in pd.DataFrame format
res.df()

```

## Area Code List

| Area Code | Japanese Name | English Name |
| ---- | ---- | ---- |
| 01 | ÂåóÊµ∑ÈÅì | Hokkaido |
| 02 | ÈùíÊ£ÆÁúå | Aomori Prefecture |
| 03 | Â≤©ÊâãÁúå | Iwate Prefecture |
| 04 | ÂÆÆÂüéÁúå | Miyagi Prefecture | 
| 05 | ÁßãÁî∞Áúå | Akita Prefecture | 
| 06 | Â±±ÂΩ¢Áúå | Yamagata Prefecture | 
| 07 | Á¶èÂ≥∂Áúå | Fukushima Prefecture | 
| 08 | Ëå®ÂüéÁúå | Ibaraki Prefecture | 
| 09 | Ê†ÉÊú®Áúå | Tochigi Prefecture | 
| 10 | Áæ§È¶¨Áúå | Gunma Prefecture | 
| 11 | ÂüºÁéâÁúå | Saitama Prefecture |
| 12 | ÂçÉËëâÁúå | Chiba Prefecture |
| 13 | Êù±‰∫¨ÈÉΩ | Tokyo |
| 14 | Á•ûÂ•àÂ∑ùÁúå | Kanagawa Prefecture | 
| 15 | Êñ∞ÊΩüÁúå | Niigata Prefecture |
| 16 | ÂØåÂ±±Áúå | Toyama Prefecture |
| 17 | Áü≥Â∑ùÁúå | Ishikawa Prefecture |
| 18 | Á¶è‰∫ïÁúå | Fukui Prefecture |
| 19 | Â±±Ê¢®Áúå | Yamanashi Prefecture |
| 20 | Èï∑ÈáéÁúå | Nagano Prefecture |
| 21 | Â≤êÈòúÁúå | Gifu Prefecture |
| 22 | ÈùôÂ≤°Áúå | Shizuoka Prefecture |
| 23 | ÊÑõÁü•Áúå | Aichi Prefecture |
| 24 | ‰∏âÈáçÁúå | Mie Prefecture |
| 25 | ÊªãË≥ÄÁúå | Shiga Prefecture | 
| 26 | ‰∫¨ÈÉΩÂ∫ú | Kyoto Prefecture |
| 27 | Â§ßÈò™Â∫ú | Osaka Prefecture |
| 28 | ÂÖµÂ∫´Áúå | Hyogo Prefecture |
| 29 | Â•àËâØÁúå | Nara Prefecture |
| 30 | ÂíåÊ≠åÂ±±Áúå | Wakayama Prefecture |
| 31 | È≥•ÂèñÁúå | Tottori Prefecture |
| 32 | Â≥∂Ê†πÁúå | Shimane Prefecture |
| 33 | Â≤°Â±±Áúå | Okayama Prefecture |
| 34 | Â∫ÉÂ≥∂Áúå | Hiroshima Prefecture |
| 35 | Â±±Âè£Áúå | Yamaguchi Prefecture |
| 36 | Âæ≥Â≥∂Áúå | Tokushima Prefecture |
| 37 | È¶ôÂ∑ùÁúå | Kagawa Prefecture | 
| 38 | ÊÑõÂ™õÁúå | Ehime Prefecture |
| 39 | È´òÁü•Áúå | Kochi Prefecture |
| 40 | Á¶èÂ≤°Áúå | Fukuoka Prefecture |
| 41 | ‰ΩêË≥ÄÁúå | Saga Prefecture |
| 42 | Èï∑Â¥éÁúå | Nagasaki Prefecture |
| 43 | ÁÜäÊú¨Áúå | Kumamoto Prefecture |
| 44 | Â§ßÂàÜÁúå | Oita Prefecture |
| 45 | ÂÆÆÂ¥éÁúå | Miyazaki Prefecture |
| 46 | ÈπøÂÖêÂ≥∂Áúå | Kagoshima Prefecture |
| 47 | Ê≤ñÁ∏ÑÁúå | Okinawa Prefecture |",2,2,1,0,real-estate,"[api, japan, pandas, python, real-estate, statistical-data, wrapper]",0
trajceskijovan,Property-Prices-in-Hong-Kong,,https://github.com/trajceskijovan/Property-Prices-in-Hong-Kong,https://api.github.com/repos/Property-Prices-in-Hong-Kong/trajceskijovan,Analyzing Property Transaction Prices in Hong Kong in Python,"# Property-Prices-in-Hong-Kong
Analyzing Property Transaction Prices in Hong Kong in Python

# Data source
The hw.csv file contains Property Transaction price of Kowloon between Nov 2014 to Nov 2020. The data was extracted from the ""District Latest Deals"" from https://data.28hse.com/en/

# Jupiter notebook:
https://github.com/trajceskijovan/Property-Prices-in-Hong-Kong/blob/main/Property%20Transaction%20Prices%20in%20Hong%20Kong.ipynb

# Task:
1. Import and clean data
2. Merge datasets
3. Data Aggregation
4. Data Vizualization
5. Modeling
6. Data Insights

# Insights:
![](samples/1.png)

![](samples/2.png)

![](samples/3.png)

![](samples/4.png)

![](samples/5.png)

![](samples/6.png)

![](samples/7.png)

![](samples/8.png)

![](samples/9.png)

![](samples/10.png)

![](samples/11.png)

![](samples/12.png)

![](samples/13.png)

---
This code is free to use for academic purposes only, provided that a proper reference is cited. This code comes without technical support of any kind. Under no circumstances will the author be held responsible for any use of this code in any way.
",2,2,1,0,real-estate,"[aggregation, cleanup, eda, hongkong, insights, merging-data, plotly, price, real-estate, regression, seaborn, sklearn, vizualisation]",0
RichardNk24,rich_realestate,,https://github.com/RichardNk24/rich_realestate,https://api.github.com/repos/rich_realestate/RichardNk24,"This web app was built with Next.JS, React.JS, Chakra UI, Emotion, JavaScript and Rapid API. You have the ability to view properties based on particular filters that you can apply in order to find your potential new house, penthouse or apartment that you can call ""Home""","# Real Estate App

![Real Estate](https://i.ibb.co/jTW4bFC/image.png)

## Introduction

This project was created with NextJS, ReactJS, Chakra UI, JavaScript( ES11), Node.JS, Rapid API.

The goal was to create a platform that would allow users to search for a new space to live in, it could be a house, an apartment, a penthouse, etc. 

The application offers you the option to search for properties by applying certain filters according to your preferences: Price, location, type of property, etc. 
",2,2,1,1,real-estate,"[api, nextjs, programming-challenges, reactjs, real-estate, webapp]",0
farshadz1997,django-real-estate-project,,https://github.com/farshadz1997/django-real-estate-project,https://api.github.com/repos/django-real-estate-project/farshadz1997,Real estate website to sell or rent property using Django framework.,"# Real Estate Webstie

**Home Property** is a real estate website for listing properties to sell or rent. 

## Installation

Use the package manager [pip](https://pip.pypa.io/en/stable/) to install packages.

```bash
pip install -r requirements.txt
```
This project uses Gmail smtp service to request forget password and you need to change it in [settings](https://github.com/farshadz1997/real-estate-project/blob/d572149d11695d3bb7904ff4f04b2397288b2853/home_property_project/settings.py#L150) of project to use it.
create a new super user or use just mine with the following information:  
* Username: admin  
* Password: HomeProperty1234

## Features
* Properties
  * Up to 6 photos per property.
  * Users can add, edit, and delete owned properties.
  * Categorised properties.
  * Search properties by name, type, and category.
* Contact section.  
* Users dashboard.
  * Change password, email and profile picture.
* Blogs which controlled by admins.
  * Comments in blogs.
  * Search in blogs.

## Photos
### Home page
![Home page](https://user-images.githubusercontent.com/60227955/144056636-122642da-8417-499f-8826-45937a34bd0e.png)
### Properties 
![Properties page](https://user-images.githubusercontent.com/60227955/144057042-d3621f8e-28f8-4a16-855b-510e75e3c51c.png)
### Blogs page
![Blogs page](https://user-images.githubusercontent.com/60227955/144057397-48cae7ed-6f86-474d-8412-706c89bb22b2.png)
### User dashboard
![image](https://user-images.githubusercontent.com/60227955/144057555-501c4369-fae8-42f1-9504-2d00b768f8f3.png)
",2,2,2,0,real-estate,"[django, django-blog, django-framework, django-project, real-estate, website]",0
pbmena,real_state_app,,https://github.com/pbmena/real_state_app,https://api.github.com/repos/real_state_app/pbmena,Flutter - UI Real State,"## Flutter - UI Real State


## Image
<p align=""center"">
<img src=""assets/readme_screen/picture1.png"" width=150>
<img src=""assets/readme_screen/picture2.png"" width=150>
<img src=""assets/readme_screen/picture3.png"" width=150>
</p>



## Installation
To clone and run this project:
```sh
$ cd newProject
$ git clone https://github.com/pbmena/real_state_app.git
$ flutter run android|ios
```
## Design Inspiration
- https://dribbble.com/shots/9399345-Filter-Screen-Real-Estate-App
- https://dribbble.com/shots/13902653-Real-Estate-Mobile-App
",2,2,1,0,real-estate,"[dart, flutter, flutter-examples, flutter-ui, real-estate]",0
joshua-peck,housing-simulator,,https://github.com/joshua-peck/housing-simulator,https://api.github.com/repos/housing-simulator/joshua-peck,simulator for estimating housing returns,"# OVERVIEW

This simulation and model is devised as an attempt to discover actual returns an
investor should expect from residential real estate, assuming that future markets will
behave similarly to past markets.

I don't assume that future markets will __perform__ similarly to past markets,
but rather that they will be __behaviorally__ similar to past markets.

# USAGE
        usage: simulate.py [-h] [--years [Y]] [--file [F]] [--count [C]]

        Simulate performance of investment

        optional arguments:
          -h, --help   show this help message and exit
          --years [Y]  number of years to simulate
          --file [F]   filename containing housing data
          --count [C]  number of simulations to run

# DATA
All data provided by the St. Louis Federal Reserve (FRED).

S&P/Case-Shiller Home Price Indices (Percent Change)
https://fred.stlouisfed.org/series/SPCS10RSA/downloaddata

# NOTES:
If you download the `SPCS10RSA.csv` datafile again, make sure to set the first
row value for VALUE to `0.0`, otherwise it will interpret the entire column in the
.csv as `str()`

# AUTHOR
Josh Peck - jmp@joshpeck.org
",2,2,1,0,real-estate,"[machine-learning, real-estate, simulation]",0
camorales197,Renting_Price_Estimator,,https://github.com/camorales197/Renting_Price_Estimator,https://api.github.com/repos/Renting_Price_Estimator/camorales197,Prediction Model (Regression) for Renting Prices in Madrid. Source: Idealista API,"# idealista_renting
## Objective:

Thanks to Idealista API,  a dataset with information for many apartments in a certain area can be downloaded.

Using this dataset, this project aims to build a renting price prediction model. 

The use case is that once the user (myself, since I am looking right now for accommodation) has selected a few apartments in which he is interested. He passes them through the model, that will give an estimated price for the property. This price can be compared with the real one to detect bargains or overpriced properties. 


",2,2,1,0,real-estate,"[idealista, prediction-model, price, real-estate, renting]",0
TaviTruman,Open-Real-Estate-Ontologies,,https://github.com/TaviTruman/Open-Real-Estate-Ontologies,https://api.github.com/repos/Open-Real-Estate-Ontologies/TaviTruman,Open Real Estate Ontologies,"# OREO
Open Real Estate Ontologies

This project is just beginning to spin up. The call and invitation go our to real estate professionals, ontologist, information scientist, researchers, real estate developers, and just about anyone thats looking to help build ontolgies for real estate proper as well as those related domains of knowledge.
",2,2,2,0,real-estate,"[bfo, commercial-real-estate-cash-flow, house, iao, real-estate, reso]",0
PESchoenberg,Jcp_Inm,,https://github.com/PESchoenberg/Jcp_Inm,https://api.github.com/repos/Jcp_Inm/PESchoenberg,Real estate and pedestrian traffic dataset.,"# Jcp_Inm - Real estate and pedestrian traffic dataset.

[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3541132.svg)](https://doi.org/10.5281/zenodo.3541132)


## Overview:

This is a dataset based in Sqlite3 database format containing data on real 
estate values for the downtown area of the city of Jose C. Paz, Buenos Aires, 
Argentina, gathered in 2019.


## Dependencies:

* Sqlite3 ( See sources ).

* Sqlite3 API for the programming language of your choice



## Installation:

* Uncompress and copy the contents of this file wherever you want in your
system. Sqlite3 databases are self - contained and need no further action on
part of the user after being copied in order to be useable.


## Uninstall:

* Delete the folder containing the contents of this fiile from your system.


## Usage:

* You need any application capable of handling Sqlite3 databases, or you can 
use the program src/scheme/jcp_inm.scm to manage the dataset. Read the file 
doc/Jcp_Inm.pdf for more info.


## Credits and Sources:

* Sqlite.org. (2000). SQLite Home Page. [online] Available at: 
https://www.sqlite.org/index.html [Accessed 26 Aug. 2019].

Please let me know if I forgot to add any credits or sources.


## License:

* LGPL-3.0-or-later.


",2,2,2,0,real-estate,"[dataset, pedestrian, real-estate, sqlite3]",0
leoncai1999,ApartmentGate,,https://github.com/leoncai1999/ApartmentGate,https://api.github.com/repos/ApartmentGate/leoncai1999,An Android App for browsing apartment listings in San Francisco,"# ApartmentGate
ApartmentGate is an Android App for browsing apartment listings in San Francisco, with data from Apartments.com.
The app takes information about the user's work address, work hours, preferred method of commute, ideal budget,
apartment size, and preferred atmosphere, and uses this profile information to grade apartment listings based
on how closely they fit the user's criteria. The user's preferences can be changed anytime, and the grades of
apartment listings will be recomputed accordingly. In addition, the app uses information from all users to
show information regarding the most popular neighborhoods in San Francisco, and the average rent paid for
listings in those neighborhoods. To learn more about this project, see the writeup: https://docs.google.com/document/d/1ayQ5g0qbl4OtGOBDV0ITrwSb7HU9cpAF2meZeHnpJ0Q/edit?usp=sharing

## Screenshots
[![MapView](https://i.postimg.cc/5QXWDLmY/Screenshot-20191206-090910.png)](https://postimg.cc/5QXWDLmY)
[![OneListing](https://i.postimg.cc/hhvnJRqD/Screenshot-20191206-090935.png)](https://postimg.cc/hhvnJRqD)
[![Directions](https://i.postimg.cc/MMKSbhMY/Screenshot-20191206-090950.png)](https://postimg.cc/MMKSbhMY)
[![Trending Neighborhoods](https://i.postimg.cc/34SHLn2Q/Screenshot-20191206-091026.png)](https://postimg.cc/p9z2p8hM)
[![Favorites](https://i.postimg.cc/06CvS8QQ/Screenshot-20191206-090954.png)](https://postimg.cc/06CvS8QQ)

## Getting Started
To recreate this project on your local machine for development and testing purposes, start by cloning this
repository. Acquire API keys for the WalkScore API, Soundscore API, and the Google Maps APIs. Next, request
to get access as a contributor to our Firebase Cloud Firestore Database. Our database contains data of
apartment listings, the preferences of all user accounts registered with the app, and the popularity and
average rent of different neighborhoods.

## App Components
**Built With:** Android Studio and Kotlin

**APIs and SDKs used:** WalkScore API, HowLoud SoundScore API, Google Maps SDK, Google Maps Directions API,
Google Maps Street View Static API

**Database:** Cloud Firestore

**User Authentication:** Firebase Authentication

## Developers
* Jason Lihuang (jasonlihuang@utexas.edu)
* Leon Cai (leoncai197@gmail.com)
",2,2,2,0,real-estate,"[android, kotlin, real-estate]",0
ronit-bhati,bhaskarproperties,,https://github.com/ronit-bhati/bhaskarproperties,https://api.github.com/repos/bhaskarproperties/ronit-bhati,"Bhaskar Properties is a real estate website built using Django, vanilla JavaScript, HTML, and CSS. It provides a user-friendly interface for browsing and searching properties, displaying detailed information, and contacting property owners or agents. Bhaskar Properties offers a seamless experience for property seekers.","# Bhaskar Properties

Bhaskar Properties is a simple real estate website built as a practice project using Django, vanilla JavaScript, HTML, and vanilla CSS. The website offers a user-friendly interface and aims to provide a seamless experience for users searching for properties.

## Features

- Property Listings: Browse through a wide range of available properties, including houses, apartments, and commercial spaces.
- Advanced Search: Utilize the search functionality to filter properties based on location, price range, property type, and other relevant criteria.
- Property Details: View detailed information about each property, including images, descriptions, amenities, and contact information.
- Contact Form: Easily get in touch with the property owner or agent using the integrated contact form.
- Admin Dashboard: Access an admin panel to manage property listings, user accounts, and other website settings.

## Installation

1. Clone the repository:

   ```shell
   git clone https://github.com/ronit-bhati/bhaskarproperties.git
   ```

2. Change into the project directory:

   ```shell
   cd bhaskarproperties
   ```

3. Install the required dependencies. It is recommended to use a virtual environment for this:

   ```shell
   pip install -r requirements.txt
   ```

4. Apply database migrations:

   ```shell
   python manage.py migrate
   ```

5. Run the development server:

   ```shell
   python manage.py runserver
   ```

6. Access the website at `http://localhost:8000`.

## Usage

1. Create an admin account:

   ```shell
   python manage.py createsuperuser
   ```

2. Visit `http://localhost:8000/admin` and log in with your admin credentials.

3. Use the admin dashboard to manage property listings, user accounts, and other website settings.

## Contributing

Contributions are welcome! If you find any issues or have suggestions for improvements, please open an issue or submit a pull request.

## License

This project is licensed under the [GPL-3.0 License](LICENSE).

## Acknowledgments

- The project was developed as a practice exercise to enhance skills in Django, JavaScript, HTML, and CSS.
- Special thanks to [name] for inspiration and guidance during the development process.

## Contact

For any inquiries or feedback, please contact **ronitbhati.786@gmail.com**.

---
",2,2,1,0,real-estate,"[css, django, html5, javascript, project, python3, real-estate, website]",0
AlirezaGholamiii,Remax,,https://github.com/AlirezaGholamiii/Remax,https://api.github.com/repos/Remax/AlirezaGholamiii,"Remax is a real estate management system for Windows That is created by C# and uses Microsoft SQL Server Management Studio Database to store all the data.  Also, using  Guna UI Framework to create all the forms.","# Remax Real Estate management system
### Remax is a real estate management system for Windows That is created by C# and uses Microsoft SQL Server Management Studio Database to store all the data.  Also, using  Guna UI Framework to create all the forms.

## Preview of Login form
![Here is the Image](https://i.imgur.com/0587zNi.png) \
üëâ Developed By Alireza Gholami
# Getting Started with C# application

## After installing visual studio and SQL Server Management Studio then:
1-Download and install [Guna UI framework](https://gunaui.com/products/ui-winforms/) .\
2-Open SQL Server Management Studio and create new Database and name it Remax.\
3-Then add a new query to your database and run the SQL script file which is available in the DataBase folder.\
4-Open visual studio and add a new Microsoft SQL Server database to your visual studio and connect the Remax Database to your app.\
5-You are all set.\
6-Run the app.
",2,2,1,0,real-estate,"[access-database, csharp, guna-framework, guna-ui, login-system, management-system, microsoft-sqlserver-database, real-estate, remax, windows-app, windows-forms]",0
eugenechevski,diana-banchero-ra-agent,,https://github.com/eugenechevski/diana-banchero-ra-agent,https://api.github.com/repos/diana-banchero-ra-agent/eugenechevski,Real-estate agent personal website.,"# ra-personal-website

Description:
    The project represents a personal website for a real estate agent.  The goal of the website is to increase the exposure, strengthen the cridibility, and serve as a powerful client resource and referral tool.

",2,2,2,0,real-estate,"[real-estate, real-estate-website]",0
FawadJawaid,sqa-UEstates-real-estate-system,,https://github.com/FawadJawaid/sqa-UEstates-real-estate-system,https://api.github.com/repos/sqa-UEstates-real-estate-system/FawadJawaid,This is the project which has been done for Software Quality Assurance course. UEstates is a real estate system which helps Agents to add Customers and Properties. And helps Users to search properties. The software testing types and principles have been applied to this project.,"# Software Quality Assurance - UEstates Real Estate System
This is the project which has been done for Software Quality Assurance course. UEstates is a real estate system which helps Agents to add Customers and Properties. And helps Users to search properties. The software testing types and principles have been applied to this project.

As this is the project which fulfills all the *Software Quality Assurance* standards, therefore, different sets of documents have been created such as Method & Quality Planning Document, Testing Strategy & Acceptance Test Specification Documents, Control Document and User Manual.

A complete description of this project and the documents designed can been seen in **Term Project Details Handout II.pdf** document.
",2,2,3,0,real-estate,"[real-estate, real-estate-management, software-quality-assurance, sqa, testing, testing-practices]",0
alfonx,valueR,,https://github.com/alfonx/valueR,https://api.github.com/repos/valueR/alfonx,Access VALUE market data using R,"
<!-- README.md is generated from README.Rmd. Please edit that file -->

# valueR <img src=""inst/logo/hex.png"" align=""right"" height=""160""/>

The goal of valueR is to facilitate access to real estate market data
from VALUE AG‚Äôs Market Data team via our API interfaces with R.

## Development

This package emerged from our own analyses of VALUE market data using R
that we would like to make available to our users. The package is still
under active development and we are happy to receive hints on
enhancements to the functionality.

## Installation

You can install the development version of valueR from
[GitHub](https://github.com/) with:

``` r
# install.packages(""devtools"", dependencies = T)
devtools::install_github(""alfonx/valueR"")
```

## API

With valueR you can access two of our REST-APIs:

##### **ANALYST**

VALUE ANALYST is based on our real estate market database, which
provides up-to-date and comprehensive information on prices, rents and
yields of the German real estate market. Most users access our database
via our GUI ‚ÄúAnalyst‚Äù, we therefore refer to this access as ‚ÄúAnalyst‚Äù in
the context of valueR.

If you have a VALUE license with API/REST access, you can find the
Swagger documentation [here](https://api.value-marktdaten.de/api-docs/).

##### **AVM**

VALUE AVM is a fully comprehensive solution for automated value
indication and system-supported derivation of market and lending values.
With the AVM, different value indications and also object and location
parameters can be fetched. The latter are currently not yet implemented
in valueR.

If you have a VALUE license with AVM-API/REST access, you can find the
Swagger documentation
[here](https://avm-api.value-marktdaten.de/v1/api-docs/).

## USAGE

To access VALUE Analyst and VALUE AVM you need a license with individual
access data for each. Without valid credentials, the use of valueR is
pointless. Please contact us if you would like a [trial
license](https://www.value-marktdaten.de/en/contact/).

To load the package, run

``` r
library(valueR)
```

You will be asked to provide you credentials using `valuer_access()`:

``` r
#> Unable to connect to AVM.
#> Unable to connect to ANALYST.
#> Please connect with valuer_access() to AVM or ANALYST.
```

To avoid having to enter credentials every time, valueR recognizes the
following system variables:

-   VALUER_ANALYST_USER

-   VALUER_ANALYST_PW

-   VALUER_AVM_USER

-   VALUER_AVM_PW

It is highly recommended to set these variable using `Sys.setenv()` in
[.Renviron](https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf).

Developers with access to our testing-systems might also set
`VALUER_AVM_URL` and `VALUER_ANALYST_URL` which both default to our
live-systems if not provided.

Once you have provided your credentials, you will be logged in:

``` r
#> Connected to AVM: https://avm-api.value-marktdaten.de/v1
#> Connected to ANALYST: https://api.value-marktdaten.de/
```

## ANALYST EXAMPLES

First, you might check the system status by

``` r
analyst_status()
```

There are some information on your license, e.g.¬†the segments of your
license

``` r
analyst_segments() %>% dplyr::select(key, titleEn) %>% head(5)
#>        key                                                   titleEn
#> 1    WHG_M                                 Flats/apartments for rent
#> 2    WHG_K                             Flats/apartments for purchase
#> 3   EZFH_K                     Single/two-family houses for purchase
#> 4   EZFH_M                         Single/two-family houses for rent
#> 5 MFHWGH_K Multi-family houses, residential and commercial buildings
```

your licensed variables

``` r
analyst_vars() %>% dplyr::select(key, titleEn) %>% head(5)
#>                      key                         titleEn
#> 1             aadr_firma        Company name of provider
#> 2 aadr_gewerblich_janein             Commercial provider
#> 3           aadr_telefon    Telephone number of provider
#> 4             angebot_id                              ID
#> 5    anz_balkon_terrasse Number of balconies or terraces
```

or spatial information

``` r
analyst_spatial(type = 'municipalities') %>% head(5) %>% dplyr::select(municipalityCode,municipality)
#>   municipalityCode municipality
#> 1          1001000    Flensburg
#> 2          1002000         Kiel
#> 3          1003000       L√ºbeck
#> 4          1004000   Neum√ºnster
#> 5          1051001   Albersdorf
```

Each of these functions return a `data.frame()` inlcuding all available
descriptions.

To start a query, you must create a query on a given segment, with the
provided filter conditions using `analyst_id()`. The returned ID can be
used in subsequent API requests to access the data described by this
query. The ID is only valid for 6 hours, before it expires and has to be
posted again. A query must be provided as JSON, e.g.

``` r
id <- analyst_id(json = '{""segment"": ""WHG_K"",""administrativeSpatialFilter"": {""postalCodes"": [23558]}}',query_id = T)
id
#> [1] 17780526
```

To create a valid JSON, you can also create a query in our ANALYST GUI
and get the corresponding JSON output. Note that due to `query_id = T`,
`analyst_id()` will return only an integer that can be used for further
requests that return an object of class `analyst_class`.

This class is a structured list of objects from which you can choose. In
most cases, you probably want to refer to `values` that include a tidy
`data.frame()` of results. But you might also use the returned `JSON` to
start a new query. Let‚Äôs say, you want to create an ID for the
counterpart to your original request, you could than use
`analyst_queries()` to get the counterpart

``` r
counterpart <- analyst_queries(id = id, subquery = 'counterpart')
class(counterpart)
#> [1] ""analyst_class""
```

and then getting a new ID for that counterpart:

``` r
counterpart$json
#> {""segment"":[""WHG_M""],""administrativeSpatialFilter"":{""postalCodes"":[23558]}}

id_counter <- analyst_id(json = counterpart$json,query_id = T)
id_counter
#> [1] 17791137
```

You‚Äôre then ready to get all results of your original request and its
counterpart using `analyst_results()`. E.g. to get a timeline of both
requests, set `subquery = 'timeline'` and provide `yearParts`.

``` r

# Leave variable empty to get available variables:
analyst_results(id, subquery = 'timeline', yearparts = 2)$values$key
#> You will find available variables to get timeline results for your queryId 17780526 at values$keys.
#> [1] ""einnahmen_kaufpreisfaktor"" ""einnahmen_rendite""        
#> [3] ""kosten_je_flaeche""         ""kstn_kaufpreis""

orig <- analyst_results(id, subquery = 'timeline', variable = 'kosten_je_flaeche', yearparts = 2) 
orig_seg <- analyst_queries(id = id, subquery = 'queryId')$values$segment # get segment of ID
orig_v <- orig$values %>% dplyr::mutate(segment = orig_seg)

counter <- analyst_results(id_counter, subquery = 'timeline', variable = 'kstn_miete_kalt_pqm', yearparts = 2)
counter_seg <- analyst_queries(id = id_counter, subquery = 'queryId')$values$segment # get segment of counter ID
counter_v <- counter$values %>% dplyr::mutate(segment = counter_seg)

# combine both queries and compute index to plot results:

results <- orig_v %>% dplyr::bind_rows(counter_v) %>% 
    dplyr::group_by(segment) %>% 
    dplyr::mutate(index = value / value[date == min(date)] * 100)
```

<img src=""man/figures/README-plot-1.png"" width=""100%"" />

With `analyst_results()` and the corresponding ID, all predefined
results can be retrieved. You can also get all single offers of the
query by setting `subquery = 'offers'` to run your own statistics and
analysis.

Please note that due to technical reasons a maximum of 100,000
individual offers can be retrieved. Currently, valueR does not yet
contain an automated procedure to retrieve larger data sets. This
limitation will be fixed soon.

Please also note that the ANALYST API also includes an endpoint to
retrieve georeferencing of an address. Currently, this endpoint cannot
be accessed with valueR. This limitation should also be fixed soon.

## AVM EXAMPLES

coming soon‚Ä¶
",2,2,2,0,real-estate,"[api-wrapper, r, real-estate]",0
tszereny,real_estate_hungary,,https://github.com/tszereny/real_estate_hungary,https://api.github.com/repos/real_estate_hungary/tszereny,,"# Scrape real estates listed in Hungary
# What is it?
Python script, which scrapes the largest real estate website in Hungary. It extracts pieces of public information from website's source code.
# Features

Two languages:
1. English
2. Hungarian

Getting available real estate types on the website:
```python
from real_estate_hungary import RealEstateHungarySettings, RealEstateHungaryPageListings
```
```python
language='eng'
eng_settings=RealEstateHungarySettings(lang=language)
```
Listing types:
```python
eng_settings.listing_types
```
```python
['for-sale', 'for-rent']
```
Property types:
```python
eng_settings.property_types
```
```python
['apartment',
 'house',
 'land',
 'garage',
 'summer-resort',
 'industrial',
 'office',
 'catering-unit',
 'pension']
```

Setting up page parameters:
```python
capital_of_hungary='budapest'
page_params={'real_estate_hun_settings':eng_settings,
            'city':capital_of_hungary,
            'listing_type':'for-sale',
            'property_type':'apartment',
            'page_num':1}
real_estates_on_page=RealEstateHungaryPageListings(**page_params)
```

```python
print('Maximum number of pages: {:,}'.format(real_estates_on_page.max_page))
print('Maximum number of {property_type}s {listing_type} in {city}: {listings:,}'.format(**{**real_estates_on_page.params, 'listings':real_estates_on_page.max_listing}))
```
```python
Maximum number of pages: 1,116
Maximum number of apartments for-sale in budapest: 13,382
```

Scrape all real estates on the given page:
```python
listings_eng=real_estates_on_page.listings_to_df()
listings_eng.head()
```
|property_url|city_district|lat|lng|building_material|condition_of_real_estate|area_size|price_in_eur|price_in_huf|convenience_level|desc|floors|orientation|ownership_status|type_of_heating|year_built|
|-------------------------|-----------------------|---------|---------|-------------------|---------------|-------|--------|--------|--------|--------|--------|--------|--------|--------|--------|
|https://realestate.hu/...|Budapest, District XIII|47.525306|19.068548|Brick|Building in progress|88 square meter|209092	|67430000|NaN|Translated text...|1st floor|Yard|NaN|In-house with unique meter|Newly built
|https://realestate.hu/...|Budapest, District III|47.589843|19.065879|Brick|Building in progress|85 square meter|204397	|65915850|NaN|Translated text...|Ground floor|NaN|NaN|In-house with unique meter|	Newly built
|https://realestate.hu/...|Budapest, District V|47.509952|19.053077|Brick|Renovated|83 square meter|213650|68900000|NaN	|Translated text...|3rd floor|Street front|NaN|Termosifone|	50+ years
|https://realestate.hu/...|Budapest, District VIII|47.491388|19.070060|Brick|Average|101 square meter|178610|57600000|Modern convenience|Translated text...|NaN|NaN|NaN|Convector|NaN
|https://realestate.hu/...|Budapest, District XI|47.48377|19.051580	|Brick|Good|129 square meter|369004|119000000|Modern convenience|Translated text...|4th floor|Panoramic|NaN|Termosifone|50+ years
",2,2,1,0,real-estate,"[data-mining, data-science, hungary, real-estate, scrape, scraper]",0
pligor,real_estate_data_science,,https://github.com/pligor/real_estate_data_science,https://api.github.com/repos/real_estate_data_science/pligor,Answering Real Estate questions using Data Science,"# Feedback from AKQA company in London:
""Georgios Pligoropoulos has very strong technical skills and could bring this to the Data Science position"" - Jesus Rogel, Principal Data Scientist at AKQA

![image](https://s20.postimg.org/anccllla5/Data_Science_of_Real_Estate_data-0.png)
![image](https://s20.postimg.org/ewh2nr1e5/Data_Science_of_Real_Estate_data-1.png)
![image](https://s20.postimg.org/tsflvd7nx/Data_Science_of_Real_Estate_data-2.png)
![image](https://s20.postimg.org/e6yabf3fh/Data_Science_of_Real_Estate_data-3.png)
![image](https://s20.postimg.org/kkndemy0t/Data_Science_of_Real_Estate_data-4.png)
![image](https://s20.postimg.org/uhye7oxwt/Data_Science_of_Real_Estate_data-5.png)
![image](https://s20.postimg.org/6qz0plkv1/Data_Science_of_Real_Estate_data-6.png)
![image](https://s20.postimg.org/neqis3ncd/Data_Science_of_Real_Estate_data-7.png)
![image](https://s20.postimg.org/aakyffq5p/Data_Science_of_Real_Estate_data-8.png)
![image](https://s20.postimg.org/lzoy3eou5/Data_Science_of_Real_Estate_data-9.png)
![image](https://s20.postimg.org/73qevtl59/Data_Science_of_Real_Estate_data-10.png)
![image](https://s20.postimg.org/kxerkvlgd/Data_Science_of_Real_Estate_data-11.png)
![image](https://s20.postimg.org/neqis5d2l/Data_Science_of_Real_Estate_data-12.png)
![image](https://s20.postimg.org/rnv8ubvrh/Data_Science_of_Real_Estate_data-13.png)
![image](https://s20.postimg.org/5oou7477h/Data_Science_of_Real_Estate_data-14.png)
![image](https://s20.postimg.org/p6jhn2jkt/Data_Science_of_Real_Estate_data-15.png)
![image](https://s20.postimg.org/du6w5aqbh/Data_Science_of_Real_Estate_data-16.png)
![image](https://s20.postimg.org/d4o3sxxhp/Data_Science_of_Real_Estate_data-17.png)
![image](https://s20.postimg.org/f98gu16u5/Data_Science_of_Real_Estate_data-18.png)
![image](https://s20.postimg.org/9l2635a7h/Data_Science_of_Real_Estate_data-19.png)
![image](https://s20.postimg.org/mp7qfu9z1/Data_Science_of_Real_Estate_data-20.png)
![image](https://s20.postimg.org/860lefojx/Data_Science_of_Real_Estate_data-21.png)
",2,2,2,0,real-estate,"[data-analysis, data-science, jupyter-notebook, python, real-estate]",0
pedrocorma,airbnb-vacation-rental-market-analysis,,https://github.com/pedrocorma/airbnb-vacation-rental-market-analysis,https://api.github.com/repos/airbnb-vacation-rental-market-analysis/pedrocorma,"Portfolio project: Discovery project for a  Real Estate company. Analysed available public AirBnb data sources to find insights that help to understand the characteristics of the vacation rental market in Madrid city and guide the valuation team‚Äôs research work, especially in terms of rental prices, occupancy levels and purchase prices.","# AirBnb Vacation Rental Market Analysis

![Esta es una imagen](/Datos/Imagenes/featured.jpg)

- [Introduction](#introduction)
- [Objectives](#objectives)
- [Project results](#project-results)
- [Project structure](#project-structure)
- [Instructions](#instructions)

## Introduction <a name=""introduction""></a>
The client is a Real Estate company that invests in large cities by buying properties to later rent them out as vacation apartments.

The managers have made the decision to invest in Madrid, and are interested in analysing the data that the sector leader AirBnb makes public to try to find the types of properties that have the greatest commercial potential for vacation rental.

As a main deliverable, the management expects to receive the typology (or typologies) of properties that the valuation team should look for among the existing opportunities in the city and the main neighborhoods or geographic areas to focus on.

- [See a technical explanation of the project here.](https://pedrocorma.github.io/project/5realstate/)

## Objectives <a name=""objectives""></a>
Analysing available public data sources to find insights that help to understand the characteristics of the market in Madrid city and guide the valuation team‚Äôs research work, especially in terms of the main angles: rental prices, occupancy levels and purchase prices.

## Project results  <a name=""project-results""></a>
**1. 10 neighborhoods with a high investment potential have been identified**

- There are 10 neighborhoods that a priori can maximize the cost-income ratio.
- They can also be segmented by the type and quality of the property in which we are interested in investing in 4 main groups.
- These are the neighborhoods where to start looking for specific opportunities:
  - Low Investment: Simancas, Ambroz, Marroquina, San Juan Bautista.
  - Medium investment: El Plantio, Valdemar√≠n, Valdefuentes.
  - Medium-high investment: Jer√≥nimos, Fuentela reina.
  - High investment: Recoletos.

**2. It is recommended to search for one-bedroom properties that can accommodate 3 guests.**

- The number of guests that maximizes the purchase price paid is 3.

**3. It is recommended to search for properties in one of the identified neighborhoods that are not necessarily close to points of interest.**

- This properties are expected to have a lower purchase price.
- It appears that proximity to points of interest does not have a particular impact on rental prices.

**4. A new business model based on rentals for specific moments of high sporting interest, especially in the San Blas neighborhood should be explored.**

- It is advisable to look for opportunities in the San Blas neighborhood.
- The relationship between the purchase price and the rental price per night is quite good.
- There are still many rentals that are not exploiting this potential.

## Project structure <a name=""project-structure""></a>
- :file_folder: Datos: Project datasets.
  - :file_folder: Imagenes:  Contains project images.
- :file_folder: Notebooks
  - `01_Dise√±o del proyecto.ipynb`: Notebook compiling the initial design of the project.
  - `02_Analisis de ficheros y preparacion del caso.ipynb`:
  - `03_Creacion del Datamart Analitico.ipynb`: Notebook creating analitic datamart (loading and unifying data, applying data quality processes, ...).
  - `04_Preparacion de datos.ipynb`: Notebook compilling feature engineering processes.
  - `05_Analisis e Insights.ipynb`: Notebook used for the execution of the exploratory data analysis and which collects the business insights found as well as the recommended actionable initiatives.
  - `06_Comunicacion de resultados.ipynb`: Brief executive report for the communication of results using McKinsey's Exhibits methodology.

## Instructions  <a name=""instructions""></a>
- Unzip airbnb.rar under 'Datos' folder.
- Remember to update the `project_path` to the path where you have replicated the project.

",2,2,2,0,real-estate,"[airbnb, business-analytics, data-science, discovery, exploratory-data-analysis, insights, madrid, real-estate, vacation-rental]",0
rjNemo,villafleurie,,https://github.com/rjNemo/villafleurie,https://api.github.com/repos/villafleurie/rjNemo,Property management system written in python using Django framework,"# üè° Villafleurie

![header image](https://socialify.git.ci/rjnemo/villafleurie/image?description=1&font=Rokkitt&logo=http%3A%2F%2Fvillafleuriegp.com%2Fstatic%2Frental%2Fimg%2Fapple-touch-icon.png&owner=1&pattern=Charlie%20Brown&theme=Light)

![license](https://img.shields.io/github/license/rjNemo/villafleurie?style=for-the-badge)
![release tag](https://img.shields.io/github/v/release/rjNemo/villafleurie?style=for-the-badge)

## Demo

üöÄ [Live at this address](http://villafleuriegp.com)

### Screenshot

![Screenshot](docs/vf_home.png)

## Projet

Cr√©er un site vitrine pr√©sentant l'activit√© de Villafleurie :

- location de logements : T2 et T3
- navette entre l'a√©roport, la gare maritime et la r√©sidence
- d√©couverte de l'archipel

Le visiteur doit pouvoir :

- connaitre les disponibilit√© de chaque logement,
- leur tarif,
- pouvoir contacter les propri√©taires,
- et pouvoir r√©server

## Architecture

### Front-end

- [Bootstrap4](https://getbootstrap.com/) - The most popular HTML, CSS, and JS library in the world.
- [JQuery](https://jquery.com/)

### Back-end

- [Django](https://www.djangoproject.com/) - The Web framework for perfectionists with deadlines
- [PostgreSQL](https://www.postgresql.org/) - The world's most advanced open source database
- [Celery](http://www.celeryproject.org/) - Distributed Task Queue
- [RabbitMQ](https://www.rabbitmq.com/) - Messaging that just works
- [NginX](https://www.nginx.com/) - High Performance Load Balancer, Web Server & Reverse Proxy
- [Docker](https://www.docker.com/) - Empowering App Development for Developers

### H√©bergement

- VPS on Vultr at [this address](http://villafleuriegp.com)

## Pages

1. Page d'accueil

- Landing page
- CTA = ""R√©server""

2. Page logement

- photos,
- disponibilit√©s,
- tarif pour la p√©riode s√©lectionn√©e,

3. Page r√©servation

- Entrer ses coordonn√©es
- La r√©servation n'est valid√©e que si la p√©riode sp√©cifi√©e est libre
- Pr√©payer la r√©servation ou la caution,

4. Page remerciements

- Expliquer les prochaines √©tapes

5. Page contact
6. Page l√©gale
7. Page services

## Donn√©es

1. Logement :

- nom,
- photos,
- description,
- calendrier,
- tarif

2. Client :

- nom,
- mail,
- t√©l√©phone,
- _r√©servation_

3. R√©servation :

- _client_,
- _logement_,
- dates de calendrier,

4. T√©moignages :

- _client_,
- _reservation_,
- t√©moignage

## BUGS

- La synchro ne g√®re pas les heures dans le calendriers
",2,2,2,0,real-estate,"[bootstrap4, django, docker, nginx, postgresql, python, real-estate]",0
umairk-dev,Realestate-App-UI-React-Native,,https://github.com/umairk-dev/Realestate-App-UI-React-Native,https://api.github.com/repos/Realestate-App-UI-React-Native/umairk-dev,UI/UX for real estate app using React-Native,"# Realestate-App-UI-React-Native
UI/UX for real estate app using React-Native (in-progress)

<img src=""./assets/realestate.gif"" width=""250"">

Screens Created:
- Home Screen
- Filter Dialog
- Detail Page

",2,2,1,0,real-estate,"[android, react-native, real-estate]",0
FrancescoMariottini,residential-real-estate-analysis,,https://github.com/FrancescoMariottini/residential-real-estate-analysis,https://api.github.com/repos/residential-real-estate-analysis/FrancescoMariottini,"The real estate company ""ImmoEliza"" wanted to create a machine learning model to predict prices on Belgium's sales. A complete analysis and interpretation of the dataset was provided.","# Cleaning, preliminary analysis and interpretation of residential real estate sales in Belgium (What)
The real estate company ""ImmoEliza"" wanted to create a machine learning model to predict prices on Belgium's sales.
A complete analysis and interpretation of the dataset was provided. 

# The Mission (Why)
- Be able to use pandas
- Be able to use Data visualisation libraries.(Matplotlib or Seaborn)
- Be able to establish conclusions about a dataset. 

## Features 
Hereby follow the project results by section. The related presentation, including graphs obtained through Matplotlib/Seaborn is available here.

Everything need to be updloaded <ins>non-exhaustive</ins> Friday 23/10/20.

### A cleaned dataset
The provided dataset (available here) is cleaned of:
- duplicates
- blank spaces (ex: ``"" I love python  ""`` =>  ``""I love python""``)
- errors
- empty values

### Data analysis overview (QUESTIONS TO BE REPLACED WITH ANSWERS)
Hereby follow the main results from the preliminary data analysis:
- Which variable is the target ?
- How many rows and columns ?
- What is the correlation between variable/target ? (Why?)
- What is the correlation between the variables/variables ? (Why?)
- Which variables have the greatest influence on the target ?
- Which variables have the least influence on the target ?
- How many qualitative and quantitative variable is there ? How would you transform these values into numerical values ? 
- Percentage of missing values per column ?

### Data interpretation questions (<ins>non-exhaustive</ins> list)(QUESTIONS TO BE REPLACED WITH ANSWERS)
Hereby follow the main results from the data interpretation:
- Are there any outliers? If yes, which ones and why?
- Which variables would you delete and why ?
- In your opinion, which 5 variables are the most important and why?
- What are the most expensive municipalities in Belgium? (Average price, median price, price per square meter)
- What are the most expensive municipalities in Wallonia? (Average price, median price, price per square meter)
- What are the most expensive municipalities in Flanders? (Average price, median price, price per square meter)
- What are the less expensive municipalities in Belgium? (Average price, median price, price per square meter)
- What are the less expensive municipalities in Wallonia? (Average price, median price, price per square meter)
- What are the less expensive municipalities in Flanders? (Average price, median price, price per square meter)

### Presentation (26/10/20) 
Presentation is available here.

SY prepared the first draft of the presentation and the template. It was agreed to have 1 or 2 slides per person to kept the total presentation time within 5 minutes. No code was included in the presentation.


# Who did the project (Who):
Contributors : Joachim Kotek (JK), Francesco Mariottini (FM), Orhan Nurkan (ON), Saba Yahyaa (SY)

# Development (How)

## Communication and Management
Communication went mainly through live discussion on-site and, to a smaller extent, on Discord. Project management was mainly carried on Trello with each person adding indipendently the labels and tasks as well as involving other team members on them. 

## Merging datasets from different sources (How)
Different indipendent teams worked on a merged dataset to be used by all the team.
On the first day (21/10/20) CUDA team splitted the sources (5 was excluded not being good enough) as follows: JK worked on source 3 and 4, FM worked on source 1 and 7, ON worked on source 2, 3 and 6. Group 3 required collaboration. Additional cleaning work was carried on the 22/10/20 by JK to improve the merged dataset for all the teams.

## Pycharm & Github training (How)
At least 2 person days were spent on technical teaching (and installation) and clarifications about pycharm (FM), git (FM, JK) and statistics (FM) to allow everybody to work on the project. Additional self-training was spent by SY on understanding and replicating the code already developed by the team.

## Code merging (How)
JK toke sole responsibility for merging the code in order to effectively implement code from different sources (git and jupyter files) and eventually reviewing the code if necessary.

## Data formatting and values cleaning (How)
Data cleaning was splitted into two main groups: initial formatting for similar types of columns (FM) and additional specific formatting for particularly complex cleaning.
FM toke reponsibility for the overall cleaning including: formatting to the required types, identification of string representing na (and replacement by na), extraction of simple numbers from text. ON worked on cleaning and aggregating the categorical values with multiple text values like subtype of property, location and state of the building. JK cleaned the postcode and toke over on price cleaning.

The resulting dataset before the first analysis is the following:
information|column name|variable type|example(s) or description
---|---|---|---
Source (team)|source|int|from 1 to 7|
Hyperlink|hyperlink|str||
Locality|locality|str||
Postcode|postcode|int||
Type of property (House/apartment)|house_is|bool||
Subtype of property|property_subtype|str|Bungalow, Chalet, Mansion, ...|
Price|price|int||
Type of sale (Exclusion of life sales)|sale|str|
Number of rooms|rooms_number|int|
Area|area|int|
Fully equipped kitchen (Yes/No)|kitchen_has|bool|
Furnished (Yes/No)|furnished|bool|
Open fire (Yes/No)|open_fire|bool|
Terrace (Yes/No)|terrace|bool|
Terrace Area|terrace_area|int|
Garden (Yes/No)|garden|bool|
Garden Area|garden_area|int|
Surface of the land|land_surface|int|
Surface area of the plot of land|land_plot_surface|int|
Number of facades|facades_number|int|
Swimming pool (Yes/No)|swimming_pool_has|bool|
State of the building|building_state|str|(New, to be renovated, ...)

## Data interpretation
TBD

# Future improvements 
TBD

# Take over
1. Excel may be an effective solution on a single table analysis but joining different tables through pandas could be more effective.
1. Task(s) must be fully clarified and agreed to avoid overlaps.
1. Teaching and self-training (code undersanding and replication) should be limited in the amount of time and effort spent during a project.

# Collecting Data (When)
- Repository: `challenge-data-analysis`
- Type of Challenge: `Consolidation`
- Duration: ``4 people * 3 days ` plus out of hours working
- Deadline: `23/10/2020 17:00`
- Presentation: `26/10/2020 9:00`
- Team challenge : 4

",2,2,2,1,real-estate,"[analysis, belgium, price, real-estate, residential]",0
gumdropsteve,SmartRPA,,https://github.com/gumdropsteve/SmartRPA,https://api.github.com/repos/SmartRPA/gumdropsteve,Neighbor to neighbor real estate transactions. Started in Nevada.,"# SmartRPA
Neighbor to neighbor real estate transactions.

## Description
Selling a home can be a lot of fun. Selling a home can be a lot of not fun as well. Often, the difference is the ability of the most interested parties (Buyer and Seller) to know what is going on, and where they stand.

As a [ERC-721](https://docs.openzeppelin.com/contracts/2.x/api/token/erc721) Non-Fungible Token contract, SmartRPA enables secure transparency for both the Homeowner (Seller) and Potential Buyers by integrating Chainlink time enforcement ([Alarm Clock](https://docs.chain.link/docs/chainlink-alarm-clock)) with the trust of blockchain and existing document management systems (e.g. DocuSign).

It's really quite simple.
1. A Seller posts their listing on-chain by deploying a SmartRPA.
2. Potential Buyers submit the URL of their offer, and the number of days the Seller has to respond.
3. Each Potential Buyers' submission returns them a unique SRPA token that's linked to their offer. They can use this to check its status.
4. Once an offer is submitted, a Chainlink Alarm Clock is started with a clause check to see if it was accepted or countered within the offer's time limit.
   - If it was not, that offer's SRPA token is [burned](https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#ERC721-_burn-uint256-) (transfering ownership from the Potential Buyer to no one) as the offer is no longer active. 
   - If it was, a similar timer is started for the Counter Offer or for Close of Escrow and the token's offer URL becomes the SmartRPA's offer URL.

At any point, the Seller can see how many offers they have, when each expires, and securely access them through familiar standards. Listing on-chain also facilitates the use of cryptocurrencies or other digital assets as payment.

### Demo
#### Live Demo
https://nevada-smart-rpa.herokuapp.com/

#### Video
https://youtu.be/MEANYygidyE

### Architecture diagram
![Architecture diagram](https://lh4.googleusercontent.com/rmxWmaNei35p6Hm1zL5coNXkAVqQ3wVcd_7v4QpDv64G9YqRNo7x_RFmfDC6ilDalXj3KTjHq-kx73jynGYcY66WBo5VWmETTipeaLQnICCwqgc3DnIzbwQrDDSt6dd3-EeSkiMz)

## Getting Started
```
git clone https://github.com/gumdropsteve/SmartRPA

cd SmartRPA

npm install

truffle compile

truffle migrate --reset --network rinkeby -f 2

truffle run verify SmartRPA --network rinkeby --license MIT
```

### Using the Testnets
#### What is a testnet?
TLDR: building on blockchain for free.
> Since Ethereum is a protocol, this means there can be multiple independent ""[networks](https://ethereum.org/en/developers/docs/networks)"" conforming to this protocol that do not interact with each other.
> 
> Mainnet is the primary public Ethereum production blockchain, where actual-value transactions occur on the distributed ledger.
> When people and exchanges discuss ETH prices, they're talking about mainnet ETH.
> 
>  In addition to mainnet, there are public [testnets](https://ethereum.org/en/developers/docs/networks/#testnets). These are networks used by protocol developers or smart contract developers to test both protocol upgrades as well as potential smart contracts in a production-like environment before deployment to mainnet. Think of this as an analog to production versus staging servers. - [Etherium docs](https://ethereum.org/en/developers/docs/networks/)

To deploy and then interact with the contract, you'll need testnet LINK and testnet ETH tokens. We used the [Rinkeby](https://www.rinkeby.io/) testnet, which means those tokens will need to come from Rinkeby faucets.

> LINK tokens are used to pay node operators for retrieving data for smart contracts and also for deposits placed by node operators as required by contract creators. - [Chainlink docs](https://docs.chain.link/docs/link-token-contracts)

All of this info is related to your wallet. Here's a 4 minute video for setting up your wallet if you don't already have one: https://youtu.be/P7FX_1PePX0

#### Ethereum (Rinkeby)
- LINK faucet: https://rinkeby.chain.link
   - Address: 0x01BE23585060835E02B77ef475b0Cc51aA1e0709
- ETH faucet: https://faucet.rinkeby.io

SRPA Token address: 0x6da11450865C6cff248E29D7f64Ce285c94590dD

### Unit tests
To run the unit testing script

```
truffle test ./test/SmartRPA_test.js
```

The unit testing script will take you through each stage of the SRPA lifecycle. From initial offer creation from the buyer, to offer acceptance by the seller.

### Front end
Front end repo: https://github.com/eserilev/smart-rpa-frontend

## Long term vision
#### DAO and Revenue Generation
   - With enough utilization, small fees can be applied to Buyers or Sellers during the SRPA process. 
   - These fees can be distributed to users holding LAND tokens.
      - LAND is an ERC20 token capped at 100,000,000 LAND and minted via a set emission schedule.
      - LAND is a governance token with time-weighted voting and value accrual mechanisms.
      - LAND value is accrued through the fees collected by the SRPA process. Holders of the token can also vote lock their LAND and begin voting on various DAO proporsals.

#### Liquidity 
   - Users can provide liquidity to SmartRPA liquidty pools and accrue APY gains. APY rewards will be paid out via newly minted LAND tokens. 
   - With enough liquidity, SmartRPA may be able to begin offering collateralized loans and other financial services.

",2,2,4,11,real-estate,"[blockchain, chainlink, real-estate, smart-contracts]",0
eyayaw,cleaning-RWI-GEO-RED,,https://github.com/eyayaw/cleaning-RWI-GEO-RED,https://api.github.com/repos/cleaning-RWI-GEO-RED/eyayaw,R scripts for cleaning Immoscout24/RWI-GEO-RED data,"# Helpers for cleaning <a href=""https://www.rwi-essen.de/en/research-advice/further/research-data-center-ruhr-fdz/data-sets/rwi-geo-red/x-real-estate-data-and-price-indices"">Immoscout24/RWI-GEO-RED</a> housing data
This repo contains a set of R scripts for cleaning housing data provided by RWI-GEO-RED, and for constructing hedonic price/rent indexes. 

The data cleaning steps I followed in these scripts are ad hoc and thus you may need to adapt them to your need should you find them useful. 
Somes of the steps in the scripts might not be relevant for your particular use case, for example, extracting the zip files and parsing the variable/value labels, and translating variable names. You may read the scripts in the following order. 
## Steps
1. [parse-labels_from_Stata-log-files.R](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/parse-labels_from_Stata-log-files.R)
2. [prepare_prices-rents_data.R](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/prepare_prices-rents_data.R)
3. [clean_prices.R](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/clean_prices.R)
4. [clean_rents.R](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/clean_rents.R)
5. [hedonic-model_prices.R](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/hedonic-model_prices.R)
6. [hedonic-model_rents.R](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/hedonic-model_rents.R)

## Usage

### Requirements

- `R 4.2` or higher

- Development version of data.table (v 1.14.7) or higher:

  ```r
  install.packages(""data.table"")
  
  # latest development version
  data.table::update_dev_pkg()
  ```

### Preparation

Besides installing packages, you may need to create a `.Renviron` file for the location of the RWI-GEO-RED data and the desired start and end year, for example:

```bash
RED_FOLDER=C:/Users/x/RWI-GEO-RED_v6
YEAR_START=2007
YEAR_END=2021
```
> Note: Alternatively, you can define those constants inside the respective scripts. 

**Furthermore, you need to download additional data:**

- For the CPI to work, [download the monthly CPI from Destatis](https://www-genesis.destatis.de/genesis/online?sequenz=statistikTabellen&selectionname=61121&language=en#abreadcrumb) (make sure to select the years you need) and save it as `extra/cpi_61121-0002.csv`

## Features

[clean_prices.R](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/clean_prices.R) and [clean_rents.R](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/clean_rents.R) filter and clean the data for house/apartment prices and rents respectively. Furthermore, datasets for houses and apartments are combined, 

- Filtering:
  - [for each observation which is classified as 'likely duplicate' (`dupID_gen == 1`), drop the previous one](https://github.com/eyayaw/cleaning-RWI-GEO-RED/blob/main/clean_rents.R#L15)
  - rents: only keep observations with `grid_id > 0 & rent > 0 & floor_space > 0 & num_rooms > 0 & utilities > 0`
  - prices: only keep observations with `grid_id > 0 & price > 0 & floor_space > 0 & num_rooms > 0` 

- Combining rents for apartments and houses:
  - assign code `999L` to object properties that only apply to the other category (apartments/houses)

- Cleaning:
  - missing values (with FDZ codes < 0) are recoded to ""na""
  - `num_bedrooms`: limited between 1 and 7 bedrooms (`>=7` recoded to `7+`), missing recoded to ""na or 0""
  - `num_bathrooms`, `num_floors`: limited between 1 and 4 (rest see `num_bedrooms`)

Additional processing at the end of `clean_rents.R`:

- construction/renovation year
  - construction year <-> renovation year in case the other one is NA
  - drop construction years below 1900
    - if NA, impute construction year and drop imputations < 1900
- discard properties with
  - (i) a monthly rental price below 1e/m2 or above 50e/m2
  - (ii) floor space below 30m2 or above 500m2
  
And finally:

- the distance to the central business district (CBD) is computed and
- the consumer price index (CPI) is used to adjust rents/prices for inflation

### Open issues

- kategorie_Wohnung has label value ""11"" that has no label (neither Stata nor csv, in the csv the label is ""11"")

## A note on constructing a hedonic index

The data come with a rich set of property characteristics which enable us to compute a hedonic (price) index to quality-adjust house prices. I construct a mix-adjusted house price index from the following panel hedonic regression

$$
\ln P_{hit} = \textbf X_{hit}\boldsymbol\beta + \delta_{it} + \varepsilon_{hit}, \quad \quad \quad \quad (1)
$$

where $h$ indexes houses, $i$ districts and $t$ years, $P$ is the price of houses in euros per $m^2$, $\delta_{it}$ denotes district-year fixed effects that are of main interest to estimate, and $\textbf{X}$ includes a set of house characteristics. The estimated intercepts $\widehat{\delta_{it}}$ represent the quality adjusted prices for each district $i$ in every year $t$. After estimating (1) with fixed effects, the **log hedonic price index** per $m^2$ is given by $\widehat{\delta_{it}} = \ln P_{hit} ‚àí \textbf{X}_{hit}\widehat{\boldsymbol{\beta}}$. House prices are adjusted for inflation using the German [consumer price index (CPI)](https://www-genesis.destatis.de/genesis/online?sequenz=statistikTabellen&selectionname=61121&language=en#abreadcrumb).

Additionally, in the `extra/` folder, labor market regions ([Kosfeld and Werner (2012)](https://link.springer.com/article/10.1007/s13147-011-0137-8 ""German Labour Markets‚ÄîNew Delineation after the Reforms of German District Boundaries 2007‚Äì2011"")), the (1kmx1km) grid, municipality, and district information for Germany are provided. Note that the Kosfeld and Werner (2012)'s labor market regions are updated for the 2019 (end of the year) administrative structure ([Verwaltungsgliederung am 31.12.2019](https://www.destatis.de/DE/Themen/Laender-Regionen/Regionales/Gemeindeverzeichnis/Administrativ/Archiv/Verwaltungsgliederung/31122019_Jahr.html)) of districts.
",2,2,3,2,real-estate,"[germany, housing-data, housing-prices, real-estate]",0
anthonyattard,your-moving-companion,,https://github.com/anthonyattard/your-moving-companion,https://api.github.com/repos/your-moving-companion/anthonyattard,"Get information on places you're considering moving to. Type an address and city and get images from Google Maps, The New York Times, and Wikipedia. Know before you go!","# Your Moving Companion

Get information on places you're considering moving to. Type an address and city and get images from Google Maps, The New York Times, and Wikipedia. Know before you go!

## Getting Started

Either clone the repo or download the zip file. Navigate to the directory and open index.html in your browser of choice.

To enable New York Times functionality:
1. [Create an API key at the NYT](https://developer.nytimes.com/signup).
2. Create a file named config.js in the js folder with the following structure:

```javascript
var config = {
  NY_TIMES_API_KEY : 'INSERT_KEY_HERE'
}
```

## Authors

* **Anthony Attard** [Github](https://github.com/AnthonyAttard)

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details
",2,2,2,0,real-estate,"[ajax, jquery, real-estate, travel]",0
ADS-UB,rentCoach,ADS-UB,https://github.com/ADS-UB/rentCoach,https://api.github.com/repos/rentCoach/ADS-UB,Real Estate Price Estimator for Owners based on Xgboost,"# rentCoach
How much to ask for your property? Get a simple answer to a tricky question.

## Basic Layers:
- Crawling of a real state website (DB)
- Forecast of pricing data with ML
- Friendly frontend with easy information

## Staging and Production

The access for both, production and staging hosting is located in the slack channel: #hosting.
Due to copyright issues, the code do not have public access. Login credentials needed to access.
",1,1,8,0,real-estate,"[price-calculation, real-estate, xgboost]",0
eduarias,house_finder,,https://github.com/eduarias/house_finder,https://api.github.com/repos/house_finder/eduarias,House sites crawling,"# House finder
[![Codacy Badge](https://api.codacy.com/project/badge/Grade/600daa8612c243f5a5cf62b677a9e230)](https://www.codacy.com/app/eduarias/house_finder?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=eduarias/house_finder&amp;utm_campaign=Badge_Grade)

Find a house crawling real state portals.
Currently supporting Fotocasa and Habitaclia.

## To run it
```bash
docker-compose up -d
```
The crawling proccess will start and results can be view on http://ip:8000

To run again the crawler for updates just:
```bash
docker-compose up -d crawler
```
",1,1,2,1,real-estate,"[crawler, django, real-estate]",0
gumdum,real_estate,,https://github.com/gumdum/real_estate,https://api.github.com/repos/real_estate/gumdum,Dart/Flutter real estate app using real estate standards organization (RESO) json for MLS data,"Going off Techi Blossom's Movie App tutorial

Making a real estate app

For API dataset, using Bridge API data

https://bridgedataoutput.com/overview

Uses RESO Web API from reso.org for MLS json dataset.

",1,1,0,0,real-estate,"[dart, flutter, real-estate]",0
npagrawal,Regression-Analysis-Real-Estate,,https://github.com/npagrawal/Regression-Analysis-Real-Estate,https://api.github.com/repos/Regression-Analysis-Real-Estate/npagrawal,"Looking at real estate data from King County, WA, determine, through regression analysis, the best zip codes for an average family to purchase in. Made in partnership with @emgerber88","# Recommending ZIP Codes to a Family Moving to King County, WA

## Overview

Tasked with creating a predictive model for home prices in King County, Washington, we elected to focus our model on predicting prices with the goal of helping families that earn roughly the median income for a household in Seattle (~$100,000 per year) buy a home that is in their price range and in an area with good schools. 

We used housing sale data from the King County House Sales dataset, student test score data from Washington State's open data portal, and school address information from the Washington school directory to build our model. We tried a variety of approaches in building our model, including log transformations, RFE, and others. Using the strongest of these (r-squared of .71) we created predicted home sale prices for the dataset and compared those predictions to actual sale prices to determine in which zip codes homes are selling for less than we expect, and in which zip codes schools are better than average. 

Based on these factors, we recommend that families look to purchase housing in the 98004 zip code, which is in Bellevue, WA (10 minutes outside of Seattle by car).

## Business Problem

The Agrawal-Gerber Realty Firm assists families moving to King County, Washington in finding a market-rate home in an area with good schools for their kids. To inform our recommendations, we have created a model to predict the price of homes in King County (which comprises Seattle, Bellevue, Kent, and several other small- to mid-sized cities and towns). 

Housing in King County is very expensive (the median home in the dataset of sales county sold for $860,000), so families need to know that their investment represents a good value before they commit to buying a home.

By measuring our predictions against records of actual home sales from 2021 to 2022, we can recommend areas where we believe homes are selling for less than their true value - thus providing families with the ability to buy a home at a good price before the housing market catches up.

## Data Understanding

We used information from three datasets to build our model, all of which are saved in the data folder of our repository:
- Housing sale data from the [King County House Sales dataset](data/kc_house_data.csv), which includes the target variable for our models (price) and a wide range of continuous, discrete, and categorical predictor variables, such as zip code, square feet of living space, number of bedrooms, and more.
- Student test score data from [Washington State's open data portal](https://data.wa.gov/education/Report-Card-Assessment-Data-2021-22-School-Year/v928-8kke), which we used to build a composite measure of average school quality by zip code to use as a predictor for our model.
- School address information from the [Washington school directory](https://eds.ospi.k12.wa.us/directoryeds.aspx) to build our model, which we used to match schools to zip codes in the King County House Sales dataset.

We began with some exploratory data analysis which revealed a relationship between square feet of living space and price:

![heatmap](Images/heatmap.png)
![basic_linear_regression](Images/sqftliving_price_scatter.png)

It also revealed that the price of homes in the county has a significant right skew that we would need to account for in later modeling.

![prices](Images/prices_hist.png)

We used a single variable - square feet of living space - to construct our baseline model and iterated from there. We performed only cursory data cleaning before running our baseline; for example, we located and removed a record of a home that was incorrectly listed as being only 3 sq. ft. large, and we removed records for homes that were not located in King County by extracting ZIP code from the home address and matching it to a list maintained by the county.

## Modeling and Regression Results
### Model 1: Baseline model

We split our data into train and test sets and used the train set to iterate on our model.

The baseline model with train data had an adjusted r-squared of .393, and a mean absolute error of over $270,000. From there, we decided to process our data to incorporate more predictor variables and include the accuracy of our model.

### Data cleaning and processing

Because our clients are interested in school quality, we used data from Washington State's open data portal to develop a composite ZIP-code-level school quality rating using student test scores on standardized tests. We matched schools to ZIP codes using data from the Washington school directory. Then, we demonstrated that there is a simple relationship between average school quality for a ZIP code and average home price for a ZIP code using a scatterplot.

![prices](Images/schoolquality_price_scatter.png)

Having created and validated this metric, we moved on to processing our categorical variables. We created an ordinal scale for variables such as ""view"", ""condition"", and ""grade""; created a boolean column to differentiate homes that had been renovated vs. homes that had not by using the values in the 'yr_renovated' column; and created dummy variables for nominal variables such as waterfront, greenbelt, and nuisance so that we could see the impact they have on home price. We also dropped unnecessary columns from our data.

### Model 2: All Variable Model
When we ran our ""all variable model"" on our train data, we found that this model performed substantially better. The model is statistically significant, and our adjusted r-squared increased from 39% to 53.8%, which indicates that the model explains the variance in price about 15 percentage points better than the simple model did. But we recognized that there was still significant room for improvement.

### Transforming variables
We saw that some of our predictor variables (such as square feet of living space, square feet of space above ground, and years old) and our outcome variable had a rightward skew so we used a log transformation to normalize their distribution. You can see that compared to the distribution above, this data appears to have a more normal distribution.

![log_prices](Images/log_prices_hist.png)

We used these transformed variables, as well as the other non-transformed variables from our All Variable Model, to run our third model.

### Model 3: Log-transformed Model
This model didn't change much from the all-variable model. The model is still statistically significant, but our adjusted r-squared barely changed (.538 to .541) - suggesting that this model does not explain more variance in our outcome than did the previous model.

However, there is still one major place for improvements - we need to treat ZIP codes as the categorical variable they are, and not as a continuous numeric variable.

### 'Final' Model: One-Hot Encoded Zip Codes
Up to this point our model was treating ZIP codes as a numerical variable, but in reality they are a categorical variable. We needed to one-hot encode them to include them properly in our model.

We created dummy variables for each ZIP code, with 98021 as our reference.

Our model showed a significant jump in performance as a result of this change, reaching an adjusted r-squared of .707 on our train data.

### Validating the final model against test data
We tested our final model against previously unused test data by transforming that data using the same steps as we used in transforming our previous models, and got an adjusted r-squared of .687. This value was close enough to that for our train data that we felt comfortable moving forward with our analysis.

## Answering Our Business Question
After validating our model, we ran the full dataset through it to predict the value of each listing and compare it to the observed sale price to calculate our residuals. Our goal was to find a ZIP code where the average difference between the residual values were negative on average, which would indicate that our model thinks those homes sold for less than they ""should"" have. We also added information on school quality for each ZIP code to this dataset and standardized it so that we could determine which ZIP codes have homes that are a good value and have above average schools.

![schools_vs_prices](Images/schoolquality_price_recs.png)

Based on this analysis, we recommend that families begin their home search in one of three ZIP codes: 98004 (Bellevue), 98040 (Mercer Island), and 98033 (Kirkland).

![map](Images/map.png)

## Conclusions
Ultimately, we recommend that families begin their home search in one of three ZIP codes: 98004 (Bellevue), 98040 (Mercer Island), and 98033 (Kirkland). These areas have homes that our model suggests are undervalued (meaning they are a good investment), and have schools that are above average in terms of student performance on state tests.

Some limitations of our model: 
- We achieved an r-squared of around .7, but that still means that roughly 30% of the variation in price cannot be explained by our model.
- The model has some issues with multicollinearity and satisfying the other assumptions of linear regression.
- We don't have any information on housing types (i.e. single family vs. multifamily, standalone vs. condo, etc.) that may be important predictors of home value in our model.

In the future, we could improve and expand this model by:
- Incorporating additional data on school quality.
- Gathering more data from past home sales and future home sales to increase the size of our dataset and examine sales trends over time.
- Finding additional predictor variables such as home type and incorporating them into our model.

## Links to Materials
[Presentation](KingCounty_Slides.pdf)  
[Jupyter Notebook](King_County_Analysis_Notebook.ipynb)",1,1,2,0,real-estate,"[data-science, machine-learning, real-estate, regression-analysis, regression-models]",0
PetrovEvgeniy,HouseNet,,https://github.com/PetrovEvgeniy/HouseNet,https://api.github.com/repos/HouseNet/PetrovEvgeniy,"üè†HouseNet is my latest Android project, of the Mobile Application Development course, held in the third semester of THU. It was an OPTIONAL project and it was rated with 11/12 bonus points. ","<header>
<img src=""https://i.ibb.co/FDyWPHp/image001.jpg"" style=""width: 100%"" alt=""Header banner""  />  
<header/>

# üè†HouseNet
HouseNet is my latest Android project, of the Mobile Application Development course, held in the third semester of Technische Hochschule Ulm. It was an OPTIONAL project and it was rated with 11/12 points by Prof. Philip Graf.

## üí°Main Functionality 
The general purpose of the project is an Android application, which gives the opportunity to the user to see all available listed real estate properties.     Additionally, filter them out (search) by their property type and city, in which they are located.

## üì≤Other Functionalities
Another feature is to see more details about each individual property, for example, its description, price, picture, location, and telephone number for contact.

For better UX there exists a functionality to save and store individual properties into a list and display them to another ""Favorites"" view page.

Finally, there is a built-in error handling (in case of network error for example, or if no search results are found)
  
## üì∫Live Demonstrations
<div>
  <img src=""demo1.gif"" style=""width: 60%; float: right"" alt=""A GIF image displaying the app's main functionallity""  /> 
  <img src=""demo2.gif"" style=""width: 60%; float: right"" alt=""A GIF image displaying the app's other functionallities""  /> 
</div>
 
## üõ†Ô∏èAPI Used
Bayut API (real publically available Real Estate data for properties located in the United Arab Emirates)

LIMIT 500 requests per month (if you want more change the authorization token in the BackEndUrls.java file, or pay the premium RapidAPI subscription)
",1,1,2,0,real-estate,"[android, bayut-api, java, property-search, real-estate]",0
block-foundation,status,block-foundation,https://github.com/block-foundation/status,https://api.github.com/repos/status/block-foundation,Block Foundation Service Status,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/status/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/status)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Service Status</h1>
    <h3 align=""left"">Block Foundation</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/status/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/status/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/status/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/status/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/status/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to the Service Status Repository of the Block Foundation, your essential resource for up-to-date information regarding the operational health of our various services. We believe in the importance of transparency and consistent communication, and this repository is an embodiment of that commitment.**

## Introduction

Our aim is to provide a seamless experience to all stakeholders who interact with our systems, applications, and services. We understand that in order to achieve this, continuous monitoring and open communication about the performance of our services is crucial. This repository provides real-time updates, historical data, and incident reports regarding the status of all our key services.

Whether you are a contributor, a partner, an investor, or simply an interested party, you can check this repository for detailed information on the operational status of our services, from our blockchain-based platforms to our social media channels, web interfaces, and more.

Every entry in this repository provides insight into the performance of each service, whether they are fully operational, undergoing scheduled maintenance, or experiencing unforeseen disruptions. For any major incident, we'll provide ongoing updates from the initial report to the final resolution, so you're never left in the dark.

We encourage you to visit this repository whenever you need information about our services' status or if you encounter any issues while using our services. We're committed to keeping you informed and swiftly addressing any hiccups that may occur along our shared journey.

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, real-estate, service, status]",0
Danroyal001,kh-estate,,https://github.com/Danroyal001/kh-estate,https://api.github.com/repos/kh-estate/Danroyal001,"KH Estate is a Real Estate Development firm in Nigeria with an objective to deliver real estate services. We develop, manage and sell landed properties of different categories. We are creative, innovative and we provide high quality estate services to our clients","# kh-estate
KH ESTATE
",1,1,1,0,real-estate,"[digital-marketing, real-estate]",0
benofben,the_intelligent_property_investor,,https://github.com/benofben/the_intelligent_property_investor,https://api.github.com/repos/the_intelligent_property_investor/benofben,"Property is a marginal investment, it tracks inflation over the long term. We're in the midst of another round of property euphoria, the painful lessons of 2008 apparently completely forgotten. This book provides a rational analysis of the returns an investor can expect in the property market.","# The Intelligent Property Investor

This is a book I wrote.  You can buy a copy on Amazon [here](https://www.amazon.com/Intelligent-Property-Investor-Ben-Lackey-ebook/dp/B07PS63GWJ/).  Alternatively, you can read it as is on GitHub or even use the scripts here to build your own copy of it.  Pull requests and issues are greatly appreciated.

## Description

Property is a marginal investment, it tracks inflation over the long term.  We're in the midst of another round of property euphoria, the painful lessons of 2008 apparently completely forgotten.  This book provides a rational analysis of the returns an investor can expect in the property market.  

The method is simple, combine carefully chosen acquisitions with thoughtful management and leverage.  The goal should be ROE, not cash flow.  If you're lucky enough to encounter a rising market and low interest rates you'll do better.  This high level analysis is supported by real life examples from 2012 to present, including detailed cost analysis of actual rental properties.
",1,1,0,4,real-estate,"[books, investing, real-estate]",0
Shreya2001,REAL_ESTATE_APP,,https://github.com/Shreya2001/REAL_ESTATE_APP,https://api.github.com/repos/REAL_ESTATE_APP/Shreya2001,This is a simple system that will keep track of housing properties that are available for rent and sale and will serve as a connecting bridge between customers and property sellers. This project would serve as a marketplace for home line property sellers and buyers. ,,1,1,1,0,real-estate,"[dbms, java, mysql, real-estate]",0
Jeevan-Gharate,Real-Estate-Agent-Scraper,,https://github.com/Jeevan-Gharate/Real-Estate-Agent-Scraper,https://api.github.com/repos/Real-Estate-Agent-Scraper/Jeevan-Gharate,Scrapes the Real Estate Agents from all around the world from platform called Realtor,"# Real-Estate-Agent-Scraper
Scrapes the Real Estate Agents from all around the world from platform called Realtor
For Now Its really simple. 

<img align=""centre"" alt=""ss"" width=""800px"" src=""https://github.com/Jeevan-Gharate/Real-Estate-Agent-Scraper/blob/428f245716978a44a2027ce389dd4256d906234a/webscraper2.jpg"" />


<h5>TODO:</h5>
i.  Add Threading <br>
ii. Fix accurate Page Count
<br> 
<br>
<br>

BTW here are my wallet addresses incase u want to send eLove ü•∫üíñ üëâüëà <br>
<br>
BTC - bc1q3kt9cljwj5q406ywa4jyzwhwduzw63rs684zrs <br>
LTC - Lbw8jdX6mb4E7xDXn419szu7PnT9z7oe96 <br>
SOL - A99MxkeLWaaTmANJhGwhBnrLBZwiMqCZvQrfuykQaYKg <br>
<br>
MY DISCORD UwU : ZYRO#5643 [contact me if you have any work for meü§ë, yes i am unemployed üò≠üò≠üò≠üò≠üò≠üò≠üò≠]
",1,1,1,0,real-estate,"[agents, clean-code, python, real-estate, requests, selenium, web-scraper, web-scraping]",0
cmlohr,automated_realestate_research,,https://github.com/cmlohr/automated_realestate_research,https://api.github.com/repos/automated_realestate_research/cmlohr,This program uses BeautifulSoup and Selenium to scrape real-estate listings and compile the data to a spread sheet using Google Forms,"This is a webscraper and data complier.  It takes the data from zillow and complies it via google forms into a spread sheet.  Currently it's set to search in the Seattle, WA area and complie the address, cost and link to the listing.
",1,1,2,0,real-estate,"[beautiful-soup, data, google-forms, google-sheets, real-estate, selenium, selenium-webdriver, web-scraping]",0
kennymkchan,greater-toronto-area-housing-data,,https://github.com/kennymkchan/greater-toronto-area-housing-data,https://api.github.com/repos/greater-toronto-area-housing-data/kennymkchan,Data scraped from various sites for housing data around the greater Toronto area (GTA). Scrapes happen daily and data is in both JSON and CSV formats. Free to use for analysis. ,"[![Contributors][contributors-shield]][contributors-url]
[![Forks][forks-shield]][forks-url]
[![Stargazers][stars-shield]][stars-url]
[![Issues][issues-shield]][issues-url]
[![MIT License][license-shield]][license-url]
[![LinkedIn][linkedin-shield]][linkedin-url]


<!-- PROJECT LOGO -->
<p align=""center"">
  <h1 align=""center"">GTA (Greater Toronto Area) Housing Data</h1>

  <p align=""center"">
    Data scraped from various sites for housing data around the greater Toronto area (GTA). Scrapes happen daily and data is in both JSON and CSV formats. Free to use for analysis.
    <br />
    <a href=""https://github.com/kennymkchan/greater-toronto-area-housing-data""><strong>Explore the docs ¬ª</strong></a>
    <br />
    <br />
    <a href=""https://github.com/kennymkchan/greater-toronto-area-housing-data"">View Demo</a>
    ¬∑
    <a href=""https://github.com/kennymkchan/greater-toronto-area-housing-data/issues"">Report Bug</a>
    ¬∑
    <a href=""https://github.com/kennymkchan/greater-toronto-area-housing-data/issues"">Request Feature</a>
  </p>
</p>



<!-- TABLE OF CONTENTS -->
<details open=""open"">
  <summary><h2 style=""display: inline-block"">Table of Contents</h2></summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
    </li>
    <li><a href=""#contributing"">Contributing</a></li>
    <li><a href=""#license"">License</a></li>
    <li><a href=""#contact"">Contact</a></li>
  </ol>
</details>


<!-- ABOUT THE PROJECT -->
## About The Project

I have a scraper that currently scrapes sites for housing data around the GTA (Greater Toronto Area). The format of the data is in csv and JSON, and the frequency of scrapes is once per day at around 5pm noon EST. The information currently includes the address, price and misc. details about the property. Data can be found in the data file, and named in `mmddyyyy` format. Feel free to use this data to your liking.

<!-- CONTRIBUTING -->
## Contributing

Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are **greatly appreciated**.

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

<!-- LICENSE -->
## License

Distributed under the MIT License. See `LICENSE` for more information.

<!-- CONTACT -->
## Contact

Kenny Chan - [@github](https://github.com/kennymkchan)

Project Link: [https://github.com/kennymkchan/greater-toronto-area-housing-data](https://github.com/kennymkchan/greater-toronto-area-housing-data)


<!-- MARKDOWN LINKS & IMAGES -->
<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->
[contributors-shield]: https://img.shields.io/github/contributors/kennymkchan/greater-toronto-area-housing-data.svg?style=for-the-badge
[contributors-url]: https://github.com/kennymkchan/greater-toronto-area-housing-data/graphs/contributors
[forks-shield]: https://img.shields.io/github/forks/kennymkchan/greater-toronto-area-housing-data.svg?style=for-the-badge
[forks-url]: https://github.com/kennymkchan/greater-toronto-area-housing-data/network/members
[stars-shield]: https://img.shields.io/github/stars/kennymkchan/greater-toronto-area-housing-data.svg?style=for-the-badge
[stars-url]: https://github.com/kennymkchan/greater-toronto-area-housing-data/stargazers
[issues-shield]: https://img.shields.io/github/issues/kennymkchan/greater-toronto-area-housing-data.svg?style=for-the-badge
[issues-url]: https://github.com/kennymkchan/greater-toronto-area-housing-data/issues
[license-shield]: https://img.shields.io/github/license/kennymkchan/greater-toronto-area-housing-data.svg?style=for-the-badge
[license-url]: https://github.com/kennymkchan/greater-toronto-area-housing-data/blob/master/LICENSE
[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&logo=linkedin&colorB=555
[linkedin-url]: https://linkedin.com/in/kennymchan
",1,1,1,1,real-estate,"[contributions-welcome, csv, data, data-mining, data-scraping, datascraping, housing-data, housing-dataset, housing-prices, json, open-source, public-data, real-estate, toronto, toronto-open-data]",0
block-foundation,teal-rent-to-own,block-foundation,https://github.com/block-foundation/teal-rent-to-own,https://api.github.com/repos/teal-rent-to-own/block-foundation,Teal Smart Contract: Rent-to-Own,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/teal-rent-to-own/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/teal-rent-to-own)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Rent-to-Own</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Teal]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

...

## Quick Start

...

## Contract

The contract assumes a rental amount and total payments needed for ownership. It only allows the tenant to make payments, which must be the exact amount of the rent. Each payment is counted and stored in the global and local state of the contract. If the payment count reaches the total needed for ownership, the contract will mark the property as owned.

It's important to note that this contract is quite simplified compared to the Solidity version. Due to the differences in contract structure between Ethereum and Algorand, not all the functionality of the Solidity contract can be replicated in PyTeal. In particular, handling overpayments or adjusting the rental amount would need to be handled off-chain. Additionally, for more complex functionalities and interactions with other contracts, Algorand offers Atomic Transfers and Algorand Standard Assets (ASAs).

As with the Solidity version, this is a basic model and doesn't cover all possible edge cases or legal requirements. It's recommended to consult with a legal and financial advisor when creating real-world contracts.

## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[algo, algorang, block-foundation, blockchain, blockfoundation, home-ownership, pyteal, real-estate, rent, smart-contracts, teal]",0
alihadimoghadam,Dubai-Real-Estate-Price-Tracker,,https://github.com/alihadimoghadam/Dubai-Real-Estate-Price-Tracker,https://api.github.com/repos/Dubai-Real-Estate-Price-Tracker/alihadimoghadam,a Python script that scrapes real estate listings in Dubai from websites like Zillow or Dubizzle. The script can track changes in property prices and provide notifications to users when properties meeting their criteria become available.,"# Dubai Real Estate Price Tracker

## Overview

The Dubai Real Estate Price Tracker is a Python application that allows users to scrape and track real estate property listings and prices in Dubai. This program provides a user-friendly interface for entering the URL of a real estate listings page, fetching property data, and optionally storing and analyzing the data.

## Features

- **Web Scraping**: Scrapes property data from real estate listing websites.
- **Data Storage**: Stores scraped data in a structured format, such as a database.
- **Price Change Notifications**: Notifies users of significant price changes for selected properties.
- **Search and Filtering**: Allows users to search for properties based on various criteria.
- **User Profiles**: Supports user profiles with saved searches and favorite listings.
- **Data Visualization (Optional)**: Provides visualizations of property market trends.
- **Email Alerts**: Sends email notifications to users for new listings or price changes.
- **User Interface**: Offers a basic GUI for entering the URL of a real estate listings page.

## Getting Started

### Prerequisites

- Python 3.x
- Required Python libraries (specified in `requirements.txt`)

### Installation

1. Clone this repository to your local machine.
   ```bash
   git clone https://github.com/alihadimoghadam/dubai-real-estate-tracker.git


# Install the required Python libraries using pip.
`pip install -r requirements.txt`

# Usage
Run the program by executing the main script.

`python main.py`

The program will open a simple GUI dialog where you can input the URL of the real estate listings page.

After entering the URL, click the ""Fetch Data"" button to scrape property listings.

The program will display property details and offer various features, such as saving searches and receiving price change notifications.

# Configuration
You can configure email settings and database connections in the config.py file.

# Data Storage
Scraped property data is stored in a database (you can specify the database type in the configuration).
Data is organized into tables, including properties, users, and price history.

# Contributing
Contributions are welcome! If you'd like to contribute to this project, please follow the guidelines in the CONTRIBUTING.md file.

# License
This project is licensed under the MIT License.

# Acknowledgments
This project was inspired by the need to track real estate prices in Dubai.
We would like to thank the open-source community for the libraries and tools used in this project.

`Replace the placeholders with your specific project details, such as the repository URL, prerequisites, installation instructions, and usage guidelines. Additionally, you may want to include information on how to contribute to your project and any acknowledgments or credits you wish to provide.`",1,1,1,0,real-estate,"[beautifulsoup, dubai, python, real-estate, request, ui]",0
rashanjibowu,home_afford,,https://github.com/rashanjibowu/home_afford,https://api.github.com/repos/home_afford/rashanjibowu,Determine the maximum home you can afford,"# Home Afford

Use this simple command-line application to determine the maximum home you can afford.

## Installation

Just clone the repo and copy the executable file (`home_afford.R`) anywhere you like.

## Usage

Default values

```{r}
./home_afford.R
```

Change your **annual** income to $60,000

```{r}
./home_afford.R --income=60000
```

Change your interest rate to 5.5%

```{r}
./home_afford.R --rate=0.055
```

Remove the **monthly** condo fee (default is $400/mo)

```{r}
./home_afford.R --condo-fee=0
```

Change your **annual** property taxes (default is $10,000/yr)

```{r}
./home_afford.R --taxes=4500
```

Change the maximum loan-to-value (LTV) to 75% (default is 80%)

```{r}
./home_afford.R --ltv=0.75
```

Add other **monthly** debt payments, like credit cards or student loans (default is $0/mo.)

```{r}
./home_afford.R --debts=160
```

Any combination of these will work, too!

```{r}
./home_afford.R --income=55000 --debts=160 --rate=0.045 --condo-fee=250 --taxes=4750
```

If you need help...

```{r}
./home_afford.R --h
```

## Happy House Hunting!

If you have suggestions for improvement, [submit an issue](https://github.com/rashanjibowu/home_afford/issues/new)!",1,1,2,0,real-estate,"[home-purchase, mortgage, mortgage-calculator, r, real-estate]",0
mariobecerra,GLM_final,,https://github.com/mariobecerra/GLM_final,https://api.github.com/repos/GLM_final/mariobecerra,Bayesian multilevel modeling of real estate sales in NYC,"# Generalized Linear Models

Final project for GLM class at [ITAM](https://www.itam.mx/en), taught by [Luis Enrique Nieto](http://allman.rhon.itam.mx/~lnieto/).

We model real estate sales in NYC using a bayesian multilevel model in R and JAGS. Final report (written in Spanish) can be found [here](https://mariobecerra.github.io/files/school_projects/GLM_Becerra_Lopez.pdf).
",1,1,3,0,real-estate,"[bayesian-inference, bayesian-statistics, generalized-linear-models, glm, multilevel-models, nyc, real-estate]",0
Yodata,RealEstateSchema,Yodata,https://github.com/Yodata/RealEstateSchema,https://api.github.com/repos/RealEstateSchema/Yodata,Collaborative data model for vendor agnostic software integration in the real estate domain,"# Real Estate Integration Schema

An open source, vendor agnostic data model for integrating software in the real estate domain,
based on schema.org, RESO, linked-data-platform...

## Table of Contents


## About the Project

The main goal of this project is accelerating innovation in the real estate industry with collaboration and open source.

100% community driven. Feedback, suggestions and contributions are very welcome.

Please contact dave@yodata.io if you'd like to get invovled or get some help implementing the existing event model.

## Technical Foundatation & Inspiration

- http://schema.org - base vocabulay
- [Linked Data Platform](https://www.w3.org/TR/ldp/)
- [Linked Data Notifications](https://www.w3.org/TR/ldn/)
- [JSON-LD](https://json-ld.org/)
",1,1,4,0,real-estate,"[data-integration, data-interoperability, integration, linked-data, real-estate, schema-org, standards-ontology, standards-registry]",0
valentasgruzauskas,Kaggle-Sprint-Real-Estate-Price-Estimation,,https://github.com/valentasgruzauskas/Kaggle-Sprint-Real-Estate-Price-Estimation,https://api.github.com/repos/Kaggle-Sprint-Real-Estate-Price-Estimation/valentasgruzauskas,PyData Kaunas meetup - 2019-03-13,"# Kaggle-Sprint-Real-Estate-Price-Estimation
PyData Kaunas meetup - 2019-03-13

This github repository is prepeared for a workshop for PyData meetup.
The notebooks used in the workshop were assembled from existing github repositories and kernels:

https://github.com/LenzDu/Kaggle-Competition-Sberbank  
https://github.com/sauravkaushik8/Sberbank-Russian-Housing-Market  
https://www.kaggle.com/captcalculator/a-very-extensive-sberbank-exploratory-analysis

## Installation

This setup is tested with python 3.6

Install required packages:  
`cd to directory`   
`pip install -r requirements.txt`


## Usage

Launch a jupyter notebook server
`jupyter notebook`
",1,1,1,0,real-estate,"[machine-learning, python, real-estate]",0
ViniciusBessa,lyen-imoveis,,https://github.com/ViniciusBessa/lyen-imoveis,https://api.github.com/repos/lyen-imoveis/ViniciusBessa,Um projeto em Angular de um site de venda e aluguel de im√≥veis.,"# LyenImoveis
> Um site de uma imobili√°ria feito no framework Angular

Esse √© um projeto feito em Angular, de uma imobili√°ria fict√≠cia. O backend foi feito em Nodejs, com o framework Express e Mongoose, [o c√≥digo pode ser encontrado aqui](https://github.com/ViniciusBessa/real-estate-api).

[Clique aqui para visitar o site.](https://angular-lyen-imoveis.web.app/)
## Stack
As tecnologias utilizadas nesse projeto s√£o as seguintes:

- HTML
- CSS
- Angular

## Site
![Gif do site](https://media.giphy.com/media/dSMZnKsVqo98WgOv7v/giphy.gif)

## Imagens
![lyen-imoveis-1](https://user-images.githubusercontent.com/84992128/180879699-e382f815-4f96-4767-afb3-5adf4d1d4c6e.png)
![lyen-imoveis-2](https://user-images.githubusercontent.com/84992128/180879728-ae6e6424-c863-4f3a-b188-63af040b4437.png)
![lyen-imoveis-3](https://user-images.githubusercontent.com/84992128/180879764-39aaa590-814a-4a06-b766-46e2f97547cf.png)
![lyen-imoveis-4](https://user-images.githubusercontent.com/84992128/180879782-7391d7b4-32b4-4761-9da1-ed50f47c7dda.png)
",1,1,1,0,real-estate,"[angular, css, html, real-estate, website]",0
alofeoluwafemi,openland-contract-moonriver,,https://github.com/alofeoluwafemi/openland-contract-moonriver,https://api.github.com/repos/openland-contract-moonriver/alofeoluwafemi,A ERC721 Contract that mints a new NFT everytime a property is added. The minted NFT represent a property and is eventually locked in the vault and fractionalize further into ERC20,,1,1,1,0,real-estate,"[erc1155, erc20, erc721, nft, real-estate]",0
jha-ayush,Real-estate-price-predictor,,https://github.com/jha-ayush/Real-estate-price-predictor,https://api.github.com/repos/Real-estate-price-predictor/jha-ayush,Real estate price predictor using Machine Learning models,"<img
  src=""./Images/home.png""
  alt=""Real Estate price predictor""
  title=""Real Estate price predictor""
  style=""display: inline-block; margin: 0 auto; max-width: 60px"">

# Real-estate-price-predictor

Real estate price predictor using Machine Learning models - U.S. Mainland, Puerto Rico & U.S. Virgin Islands




## Preview


**Project flowchart**

<img
  src=""./Images/app_flowchart.png""
  alt=""App flowchart""
  title=""App flowchart""
  style=""display: inline-block; margin: 0 auto; max-width: 55px"">
  


**UI flow - screenshot 01**

<img
  src=""./Images/app_screenshot_01.png""
  alt=""App screenshot 01""
  title=""App screenshot 01""
  style=""display: inline-block; margin: 0 auto; max-width: 55px"">
  

**UI flow - screenshot 02**

<img
  src=""./Images/app_screenshot_02.png""
  alt=""App screenshot 02""
  title=""App screenshot 02""
  style=""display: inline-block; margin: 0 auto; max-width: 55px"">
  

**UI flow - screenshot 03**

<img
  src=""./Images/app_screenshot_03.png""
  alt=""App screenshot 03""
  title=""App screenshot 03""
  style=""display: inline-block; margin: 0 auto; max-width: 55px"">



## Table of contents

- [Objective](#objective)
- [Conformal prediction analysis](#conformal-prediction-analysis)
- [Preview](#preview)
- [Environment setup](#environment-setup)
- [Technologies](#technologies)
- [Deployment](#deployment)
- [Contributors](#contributors)
- [Next steps](#next-steps)
- [License](#license)



## Objective
[(Back to top)](#table-of-contents)

The objective of this project is to predict the future selling prices of houses for a real estate app. Static historical data was gathered from [Kaggle](https://www.kaggle.com/datasets), on past house sales, including the number of `bed`, `bath`, `acre_lot`, `house_size` and `state` or United States territory, along with the final selling price. 


By integrating multiple machine learning models in conjunction with Conformal prediction analysis, the app evaluates the ML performance against scoring metrics, to provide the user with model `price_predictions` future values and then evaluates via conformal analysis to inform the user whether the prediced future price has over 95% confidence level or not.



## Conformal prediction analysis
[(Back to top)](#table-of-contents)


**What is Conformal Prediction Analysis?**

[Conformal prediction analysis](https://medium.com/low-code-for-advanced-data-science/conformal-prediction-theory-explained-14a35226df80) is a machine learning framework that provides a way to assign confidence levels to individual predictions, in our case - real-estate future prices, based on a given level of significance.


**How is Conformal Prediction Analysis used in this repo?**

By using multiple regression models & scoring metrics via the [`lazypredict`](https://pypi.org/project/lazypredict/) python package, we first selected the top ML models results that were ranked based on their performance against `R^2` & `RMSE` scoring metrics, from `lazypredict` analysis.


After top ML model selection(s), the `nonconformist` python package assigned a confidence level to each prediction based on the error rate and the desired level of significance (95%).

By selecting the model with the highest confidence level for each prediction, we were able to provide price predictions and then assess those predictions against the 95% price prediction confidence level.




## Environment setup
[(Back to top)](#table-of-contents)

- `conda create -n [name] python=3.9`
- `conda activate [name]`
- `git init` inside a directory where you want to save this repo
- `git clone` repo
- `pip install -r requirements.txt`


## Technologies
[(Back to top)](#table-of-contents)

`python`, `anaconda`, `numpy`, `matplotlib`, `pandas`, `streamlit`, `sklearn`




## Deployment
[(Back to top)](#table-of-contents)


**Localhost**

- In Terminal `cd` into cloned repo
- `cd` to `src` directory where `home.py` file is located
- `streamlit run home.py`
- The app will run on `http://localhost:8501/`



## Contributors
[(Back to top)](#table-of-contents)

[Christine Pham](https://github.com/cpham35?tab=repositories) - `cpham35`

[Kranthi C Mitta](https://github.com/kranthicmitta?tab=repositories) - `kranthicmitta` 

[Ayush Jha](https://github.com/jha-ayush?tab=repositories) - `jha-ayush`



## Next steps
[(Back to top)](#table-of-contents)

- Initial data capture - better, more robust data sets, time series data, paid APIs.
- Include attributes like `sq_ft`, `price_per_sq_ft`, `address`, `date_sold`, etc.
- Use enhanced conformal prediction to find the best ranked sore for price predictions.
- `Blockchain` implementation: By recording real estate data on a blockchain, we can create a transparent and immutable record of real estate transactions to prevent fraud and corruption, as all transactions are publicly visible and immutable or can't be altered.
- Rental predictions based on `bed`, `bath` and `sq_ft`.
- Real-estate portfolio creation and management for investors.



## License
[(Back to top)](#table-of-contents)

**MIT License**

Copyright ¬©  [2023]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



<sub>**Note:** This app is for educational purposes only.</sub>",1,1,2,0,real-estate,"[conformal-prediction, css, jupyter-notebook, machine-learning, python, real-estate, regression-models, scikit-learn, streamlit]",0
PierreKimbanziR,belgium_housing_price_predictor,,https://github.com/PierreKimbanziR/belgium_housing_price_predictor,https://api.github.com/repos/belgium_housing_price_predictor/PierreKimbanziR,Machine learning model predicting the price of any property in Belgium. ,"# Belgium Real Estate Price Predicition

[Try it out](https://share.streamlit.io/pierrekimbanzir/belgium_housing_price_predictor/main/app.py)
## Objectives 

- Create a prediction model whose target is the price of a property located in any locality in Belgium. 
- Get the most accurate model possible in other terms the lowest mean absolute error possible on the prediciton of a given property.
- Implement an user interface to let anyone predict the price of a property.  

## Technologies
- Pandas
- Scikit-learn
- Seaborn
- Streamlit
- XgBoost
- Python 3.8.10  

## Dataset description
- The training and test dataset comes from data scrapped by myself from the site [Immoweb](https://www.immoweb.be/) and [LogicImmo](https://www.logic-immo.be/).
The cleaned dataset is available [here](https://raw.githubusercontent.com/PierreKimbanziR/belgium_housing_price_predictor/main/assets/data/housing_data.csv)

### Shape

- The dataset is initially composed of 60 000 entries and 17 features each.
#### Features list

1. Locality : The locality where the property is located.
2. Type of property : Either ""house"" or ""appartment"".
3. Price : A float number in euros.
4. Number of rooms : A float number.
5. Area : A float in square meter.
6. Fully equipped kitchen : A boolean either true or false.
7. Furnished : *Does the property come in with furniture ?* A boolean either true or false.
8. Open fire : *Does the property have an open fire ?* A boolean either true or false.
9. Terrace Area : A float number representing the size of the terrace in square meter. Is equal to 0.0 if the property has no terrace.
10. Garden Area : A float number representing the size of the garden in square meter. Is equal to 0.0 if the property has no garden.
11. Surface of the land : A float number representing th total surface of the property in square meter.
12. Number of facades : A float number representing the number of facades of the property.
13. Swimming pool : A boolean. Either true or false.
14. State of the building : Either 'medium', 'good', 'new', 'to renovate', regarding the state of the property.
15. Province : One of the ten Belgium provinces.
16. Region : One of the 3 Belgium region.
17. PriceperMeter : A float number in euros

## WorkFlow
The following steps will be explored in more details below

1. Data analysis
2. Data preprocessing
3. Determining the model baseline
4. Model selection
5. Model training
6. Hyperparameter tuning
7. Model evaluation
8. Results interpretation
## Data analysis
Some insights on the dataset. 

Price correlation with the other features : 

- Locality                 -0.130485  
- Price                     1.000000  
- Number of rooms           0.358333
- Area                      0.566414
- Fully equipped kitchen    0.130774
- Furnished                -0.021918
- Open fire                 0.172021
- Terrace Area              0.075740
- Garden Area               0.072211
- Surface of the land       0.090717
- Number of facades         0.148417
- Swimming pool             0.230451
- PriceperMeter             0.277311  

Heatmap :  

![heatmap](assets/images/heatmap.png)
## Data preprocessing

Some features needed to be transformed to be able to train and test our model with it. 
Here are the said transformation and the respective library used:

- One-Hot encoding the categorical columns => [One-Hot Encoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html)
- Scaling the numerical columns and the encoded categorical columns => [StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)
- Handle the missing data in the dataset => [SimpleImputer](https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html)
- Separating the data between the train and the test set => [train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html?highlight=train_test_split#sklearn.model_selection.train_test_split)

The preprocessing steps described above were carried through two separate pipelines. A numerical_pipeline for the numerical columns and a categorical_pipeline for the categorical values. 
I used the convenient [make_pipeline](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html) and [make_column_transformer](https://scikit-learn.org/stable/modules/generated/sklearn.compose.make_column_transformer.html) from Scikit-Learn to configure those pipelines.


## Determining a baseline for the model

In this step I calculated what the results of a prediction model would be if we only guessed at property prices. 
The purpose of this is to have a basis for better understanding the results of our future model.
I used the [DummyClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.dummy.DummyClassifier.html).

#### The baseline for our model

- Mean squared error : 159931446339.08014
- Mean absolute error : 173117.60024260395
- Explained variance score : 0.0
- r2 score : -0.10401510078632081


## Model selection

Trough multiple steps of trials I tested multiples models and configuration. 
The that gave me the best results was Xgboost with a BaggingRegressor.
[BaggingRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.BaggingRegressor.html)
[Xgboost](https://xgboost.readthedocs.io/en/latest/python/python_api.html)

## Model training
The full dataset was split with a proportion of 0.8 for the training dataset.

## Hyperparameter Tuning
I used [GridSearch](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html) to find the best hyperparameters.

## Model Evaluation
Here are the results of the model against the testing data : 

- Mean squared error : 31022727615.411995
- Mean absolute error : 86094.01882551557
- Explained variance score : 0.7577142613146228
- r2 score : 0.7574321295725

## Results interpretation

When estimating the price of something I think the main indicator to take into consideration is the MAE (Mean Absolute Error).  

*Why the MAE instead of the MSE?*  

Because it will give us on average the difference between our predicted price and the target price.
Moreover, it is much easier to interpret it in the scale of our real data. 
Another argument is that the size of an error is linear with its magnitude. 
In view of these points, it is more logical to rely on the MAE.   
It can be observed that the MAE have decreased significantly, its almost halved.  

On average there is a 80 000 euros difference between the price estimated by the model and the actual price. 
In reflexion to the prices available on the belgian market its still quite a high difference. 

## Possible improvements
As the data cleaning and hyperparameter tuning has already been done in depth, I think the main focus should be on adding new features.  

For example we could add the median price of the locality for each property. This information could be calculated by hand with the data already obtained but this could be dangerous. 
*Why? because the number of properties listed for sale per locality varies greatly. Let's say we compare 2 communes, commune A and commune B. 
In commune A there are 300 houses for sale while in commune B there is only one. The median price of commune A would be representative of the commune prices but the median price of commune B would be the exact price of the one property listed for sale in the commune.  

To remedy this we could incorporate the median prices per locality listed on [StatBel](https://statbel.fgov.be/en)
To go even deeper into the information available for each property, one could retrieve information on the neighbourhood in which the property is located. Here are some questions that could be interesting and determining in the price of a house or a flat.

*How far away is the nearest public transport?*  

*How far is it to the schools?*  

*How far is it to the nearest supermarket?*  

*How long does it take for the emergency services to get to the house?*  


## User Interface/Web app
The user interface has been programmed with [Streamlit](https://streamlit.io/). And can be found [here](https://share.streamlit.io/pierrekimbanzir/belgium_housing_price_predictor/main/app.py).

",1,1,2,2,real-estate,"[ai, machine-learning, real-estate, scikit-learn, xgboost]",0
alissongranemann,real-estate-api,,https://github.com/alissongranemann/real-estate-api,https://api.github.com/repos/real-estate-api/alissongranemann,API that collects real estate data,"# Real Estate API

## Local setup

### Local environment

First of all, you need to install poetry. To do that, run

```bash
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
```

To get started you need Poetry's bin directory (\$HOME/.poetry/bin) in your `PATH`
environment variable. Next time you log in this will be done
automatically.

To configure your current shell run `source $HOME/.poetry/env`

This project uses `black` as the code formatter and `flake8` as the linter.
To add git-hooks on your enviroment, so you can run `black` and `flake8` on your project for every commit, please execute `pre-commit install`.

Also, you need to configurate the enviroment variables accordingly. Create `env` file in the project's root folder and set the variables following the `.env.example`.

In order to have the poetry packages in a local virtual environment (in the project root directory), run:

```bash
poetry config virtualenvs.in-project true
make install
```

If you don't wanna a local virtual env, just run `make install` alone.

### Development

You can always use Docker (recommended) to get those things isolated, in a container.
To create and start the container running on background, execute:

```bash
docker-compose up -d
```

To run the migrations, execute the command:

```bash
docker-compose exec flasky make migrate
```

Check the running application on your browser with the `http://127.0.0.1:8000/api/v1` url.

This project uses `flasgger` and you can access the API documentation on `http://127.0.0.1:8000/apidocs`.
",1,1,2,6,real-estate,"[flask, flask-restful, flask-sqlalchemy, postgresql, real-estate]",0
kamalbuilds,Aurora-Estate,,https://github.com/kamalbuilds/Aurora-Estate,https://api.github.com/repos/Aurora-Estate/kamalbuilds,,"# üè¢ Aurora-Estate Platform

Aurora-Estate is a revolutionary real estate marketplace built on the Aurora blockchain. It enables users to tokenize their estate properties as non-fungible tokens (NFTs) and engage in various transactions within the platform.

## ‚ú® Features

- üè† Tokenize your property as an NFT
- üìù List your property for sale or rent on our marketplace
- ‚è±Ô∏è Set custom durations for property listings
- üõéÔ∏è Place your property on auction with a custom starting amount
- üè¢ Mint ERC-4907 rentable NFTs
- ‚ö° Built on the Aurora blockchain for fast and low-cost transactions

## üë¶üèªUser Flow Diagram

![image](https://github.com/legendarykamal/Aurora-Estate/assets/95926324/09ec5c5c-0919-4ecd-8c5b-948e086cf4c6)

## üí™ Benefits of Aurora Blockchain

The Aurora blockchain offers several advantages for our real estate platform:

- ‚ö° Fast transaction processing: Enjoy quick and efficient transaction processing powered by Aurora's high-speed blockchain.
  
  With the high-speed blockchain provided by Aurora, transactions within the Aurora Estate platform are processed quickly and efficiently. This ensures seamless tokenization, selling, renting, and other operations on properties without significant delays.
  
- üí∏ Low transaction fees: Experience affordable buying, selling, and renting of properties on our marketplace with Aurora's low transaction fees.

  Aurora's low transaction fees play a crucial role in making buying, selling, and renting properties on the marketplace more affordable. Leveraging the low-cost transactions enabled by Aurora, users can conduct real estate transactions without incurring exorbitant fees.
  
- üîí High security: Aurora's secure blockchain technology ensures the safety and transparency of all transactions, protecting the high-value real estate NFTs.

  Security is a top priority in the real estate industry, and Aurora's secure blockchain technology ensures the safety and transparency of all transactions. The high-value nature of real estate NFTs demands a robust security infrastructure, and the Aurora blockchain provides the necessary assurances.

## üè¢ ERC-4907 Rentable NFTs

Aurora Estate fully supports the ERC-4907 standard for rentable NFTs. This allows property owners to easily rent out their NFTs to users. By separating NFT ownership and usage rights, the platform efficiently implements rental agreements, automatically withdrawing usage rights upon expiration.

<img src=""https://github.com/legendarykamal/Aurora-Estate/assets/95926324/47b2dc66-ad6c-496a-8621-a62cddb3f686"" width=""400"">

## üöÄ Deployed Contracts

- Marketplace Contract: [Marketplace Link](https://explorer.testnet.aurora.dev/address/0x5815058d25e12CA54C4DA8203c403dCDDB7F9086)
- NFT Collection: [NFT Collection Link](https://explorer.testnet.aurora.dev/address/0x1f98CACca39b9310EBF9a35100A87f9dddd5513b)
- Rentable NFTs: [Rentable NFTs Link](https://testnet.aurorascan.dev/address/0x787641796556f17395C311E8917538461701cd64)
",1,1,1,0,real-estate,"[aurora, nextjs, nft, real-estate]",0
MillerAdulu,kensim,,https://github.com/MillerAdulu/kensim,https://api.github.com/repos/kensim/MillerAdulu,An improved version of the site at http://kensim.co.ke,,1,1,2,0,real-estate,"[algolia-search, eyewitness, laravel, laravel-framework, real-estate]",0
Victor-Okpukpan,realtor-clone-react,,https://github.com/Victor-Okpukpan/realtor-clone-react,https://api.github.com/repos/realtor-clone-react/Victor-Okpukpan,"A real estate website for renting and buying of homes created using React, Tailwind, and Firebase","# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
",1,1,1,0,real-estate,"[firebase, react, real-estate, tailwindcss]",0
block-foundation,charter,block-foundation,https://github.com/block-foundation/charter,https://api.github.com/repos/charter/block-foundation,Block Foundation Charter [WIP],"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/charter/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/charter)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Organisation Charter</h1>
    <h3 align=""left"">Block Foundation Governance</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/charter/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/charter/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/charter/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/charter/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/charter/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to the heart of the Block Foundation's principles and operational guidelines ‚Äì the Charter Repository. This is where you will find the foundational documents outlining our mission, vision, values, strategies, and operational processes, providing a comprehensive guide to the ethos and rules that govern our organization.**

## Introduction

The Charter of the Block Foundation is a living document that encapsulates our commitment to democratizing architecture through blockchain technology. It is the blueprint we follow in our quest to tackle housing mismatches, and to reshape traditional constraints to create a more inclusive and dynamic real estate market.

In this repository, you will find detailed sections covering our mission statement, vision, and the core strategies we adopt to bring about change. It also outlines the rights, roles, and responsibilities of our contributors, setting the tone for respectful, productive collaborations that uphold our shared values.

Transparency and collaboration form the bedrock of the Block Foundation. Therefore, this Charter is not just a rulebook but also a platform for dialogue. We encourage our community members to explore the document, provide input, and help us refine our processes and goals. After all, the Block Foundation is not just about the few but the many who believe in a more sustainable and equitable real estate landscape.

We hope this Charter Repository serves as a clear guide to what we stand for, what we aim to achieve, and how we plan to get there. It's a reflection of our commitment to the journey we're embarking on together, a journey that seeks to revolutionize architecture and housing for the betterment of all.

## Charter

### Article I ‚Äì Name

The name of the organization shall be the Block Foundation.

1.1 The official name of this organization, henceforth referred to in this document, shall be the ""Block Foundation"". This name should be used in all formal communications and official documents related to the organization's activities.

1.2 The organization may also be referred to by its abbreviated form, ""BF"". This abbreviation may be used for internal communication or in contexts where the full name of the organization is already clearly understood or stated.

1.3 The organization may also operate under different names, or ""doing business as"" (DBA) names, as needed for various initiatives, projects, or branches of the foundation. All such names must be officially registered and approved by the Board of Directors in accordance with local and international law.

1.4 Any name change, whether temporary or permanent, must be officially proposed, discussed, and approved by the Board of Directors. It must then be registered and made public in accordance with the relevant local and international regulations.

1.5 The Block Foundation will uphold the integrity and reputation of its name in all circumstances. Any misuse of the organization's name, whether it be for unauthorized, misleading, or fraudulent activities, will be strictly prohibited and may result in legal action.

1.6 All members, employees, partners, and stakeholders are expected to respect and uphold the name of the Block Foundation, using it responsibly and accurately in all relevant contexts. Misuse, misrepresentation, or unauthorized use of the organization's name is a breach of this charter and may result in disciplinary action or removal from the organization.

### Article II ‚Äì Mission

2.1 The Block Foundation is dedicated to empowering architects and other key stakeholders to drive innovative solutions to current housing issues. Our mission is to dismantle barriers within the housing sector, foster inclusivity and balance, and enable sustainable change.

2.2 The Foundation's approach is grounded in the novel application of blockchain technology, intending to reshape traditional practices within the housing market. The goal is to move beyond the binary of rent and traditional mortgage systems, fostering a more dynamic, flexible, and equitable landscape in real estate transactions.

2.3 To achieve this mission, the Foundation is committed to:

   2.3.1 Supporting Research and Development: We foster innovation by promoting and funding research in architecture, housing, and blockchain technology. This includes encouraging experiments and pilots that test new models of housing and home ownership.

   2.3.2 Establishing Collaborative Partnerships: We strive to form strategic alliances with architects, urban planners, project developers, service providers, research institutes, and governments to facilitate the exchange of ideas, resources, and expertise.

   2.3.3 Advocacy and Education: We actively engage in policy dialogues and advocacy efforts to promote the use of blockchain in architecture and housing. Additionally, we provide educational resources and training programs to equip architects and other stakeholders with the necessary skills and knowledge in blockchain technology.

   2.3.4 Developing Blockchain Solutions: We aim to create, test, and implement smart contract solutions that democratize property ownership, reduce barriers to market entry, and ensure fair transactions.

2.4 The mission serves as the guiding principle for all activities undertaken by the Foundation. All projects, partnerships, and initiatives will be aligned with the mission and seek to advance its objectives. The impact of the Foundation's activities will be regularly evaluated against the mission to ensure its ongoing relevance and effectiveness.

2.5 The Foundation is committed to inclusivity, sustainability, and innovation in all its endeavors, and is dedicated to maintaining a high level of ethical and professional standards in fulfilling its mission.

### Article III ‚Äì Objectives

3.1 The Block Foundation's primary objective is to fuel innovation in the architecture and housing sector through the utilization of blockchain technology. Our objectives serve as the roadmap guiding our mission and are integral to the strategies and actions we undertake.

3.2 Objectives of the Block Foundation include:

3.2.1 Empowering Architects: Our foremost objective is to empower architects and architectural entities to reclaim their role as primary drivers of social innovation. We strive to equip them with the tools, resources, and platforms necessary to explore, challenge, and reshape existing norms and practices in architecture and housing.

3.2.2 Establishing the Meta-Estate Lab: We aim to establish and support the Meta-Estate Lab, a pioneering initiative designed to challenge and reinvent existing architectural and housing practices. The lab will serve as an incubator for disruptive ideas, technologies, and models, bringing together architects, urban planners, researchers, and other stakeholders.

3.2.3 Rethinking Housing Finance: We are committed to transforming the traditional models of housing finance. We aspire to create a balanced system that merges the flexibility of rent with the stability of mortgages, effectively unlocking a middle ground that can accommodate diverse housing needs and financial capacities.

3.2.4 Creating an Inclusive Market Environment: We strive to blur the traditional boundaries within the real estate market. We seek to foster an ecosystem where the roles of initiator, creator, investor, and resident overlap and interact fluidly, cultivating a democratic and dynamic market.

3.2.5 Democratizing Investment Opportunities: We aim to democratize investment opportunities within the housing market. We envision a market where investments are not restricted to a privileged few but are accessible to a broader audience. Blockchain technology will be harnessed to facilitate fractional ownership, allowing individuals to invest according to their means.

3.2.6 Promoting Sustainable Practices: Sustainability is a fundamental principle that guides our actions. We aim to promote environmentally conscious practices within architectural design and real estate development, ensuring that the housing market contributes positively to the environment.

3.2.7 Fostering Knowledge and Skills Development: The Block Foundation recognizes the importance of continuous learning and skill development. We aim to facilitate knowledge exchange and skills development programs to equip stakeholders with the necessary competencies to navigate the evolving landscape of the housing market powered by blockchain technology.

3.2.8 Encouraging Transparency and Accountability: We believe in a market that operates with complete transparency and accountability. Through the use of blockchain technology, we aim to create a system where transactions are traceable, verifiable, and free from corruption.

3.2.9 Advocating for Policy Reforms: We will actively engage in advocacy for policy reforms that support the use of blockchain technology in the housing market. We aim to contribute to the creation of a legislative environment that fosters innovation and inclusivity.

3.2.10 Fostering Global Collaboration: Recognizing the global nature of housing challenges, we strive to foster international collaboration. We aim to build partnerships with organizations worldwide to share knowledge, best practices, and to jointly tackle housing issues.

3.2.11 Building Community Resilience: Our objective is not only to revolutionize the housing market but also to contribute to the resilience of communities. By ensuring fair access to housing and fostering inclusive growth, we aim to build communities that are robust and resilient.

3.3 The attainment of these objectives will be a constant focus for all members, employees, and partners of the Block Foundation. We will review our progress towards these objectives on a regular basis, adjusting our strategies and actions as necessary to ensure we are effectively pursuing our mission.

3.4 We commit to pursuing these objectives with a steadfast dedication to inclusivity, fairness, and sustainability. All initiatives undertaken in pursuit of these objectives must align with our values, uphold our mission, and contribute positively to the society we serve.

### Article IV ‚Äì Programs

4.1 To fulfill the mission and objectives of the Block Foundation, a series of programs have been established. These initiatives have been designed to directly address the areas of focus outlined in our mission and represent a concrete strategy to accomplish our goals.

4.2 The following are the primary programs initiated by the Block Foundation:

4.2.1 Stakeholder Symposia: Recognizing the importance of fostering a diverse and inclusive community, the Block Foundation will host a series of symposia. These gatherings will serve as a platform to bring together architects, urban planners, project developers, service providers, research institutes, governments, and other relevant stakeholders. Together, we will discuss challenges, opportunities, and innovative solutions in the housing market. These symposia aim to facilitate dialogue, build relationships, encourage collaboration, and form strategic alliances that advance the mission of the Foundation.

4.2.2 Research and Publication: The Block Foundation is committed to promoting research that explores the potential of blockchain technology in architecture and housing. As such, we will develop and publish a variety of research outputs including manifestos, academic papers, and technical whitepapers. These publications will provide insights, propose novel concepts, detail innovative practices, and serve as a foundation for further innovation in the field. They will be made freely accessible to encourage widespread dissemination and utilization of our findings.

4.2.3 Open-Source Codes: In our pursuit of a democratized and inclusive housing market, the Block Foundation will create and provide open-source codes. These codes represent the technical foundation of our vision, detailing blockchain-based solutions that can facilitate the transformation of the housing market. By providing these codes in an open-source format, we aim to encourage widespread adoption, facilitate customization and improvements, and stimulate the growth of a collaborative ecosystem around our practices.

4.3 Each program will be overseen by dedicated teams within the Foundation, which will ensure the effective planning, implementation, and evaluation of activities. The progress and impact of these programs will be regularly monitored and assessed to ensure they align with our mission, objectives, and strategic goals.

4.4 As the Foundation evolves, additional programs may be established to address emerging needs, capitalize on new opportunities, and respond to changes in the broader context. Any new programs will be consistent with the Foundation's mission and values, and will be established following consultation with stakeholders and approval by the Board of Directors.

### Article V ‚Äì Governance

5.1 The Block Foundation is governed by a Board of Trustees, which is the primary decision-making body responsible for the strategic oversight, direction, and effective functioning of the Foundation.

5.2 The Board of Trustees is composed of a diverse group of individuals, who bring a wide range of skills, expertise, and perspectives to the Foundation. These individuals are selected on the basis of their commitment to the Foundation's mission, their knowledge and experience in relevant fields, and their ability to contribute effectively to the governance of the Foundation.

5.3 Responsibilities of the Board of Trustees:

5.3.1 Oversee the Foundation's strategic direction: The Board of Trustees is responsible for setting the Foundation's strategic direction, aligning it with its mission and objectives, and ensuring it responds appropriately to changing circumstances and emerging opportunities.

5.3.2 Establish and govern the Meta-Estate Lab: The Board of Trustees will establish and oversee the governance of the Meta-Estate Lab, the Foundation's primary initiative to stimulate innovation in architecture and housing.

5.3.3 Appoint and supervise the Executive Director: The Board of Trustees appoints the Executive Director, who is responsible for the day-to-day management of the Foundation. The Board oversees the Executive Director's performance, provides guidance and support, and holds the Director accountable for achieving the Foundation's strategic goals.

5.3.4 Ensure fiscal responsibility: The Board of Trustees oversees the Foundation's finances to ensure its resources are used responsibly and effectively in pursuit of its mission. The Board approves the annual budget, reviews financial reports, and ensures appropriate financial controls are in place.

5.3.5 Monitor and evaluate the Foundation's performance: The Board of Trustees regularly reviews the Foundation's performance against its strategic goals and objectives, and ensures it is making effective progress towards its mission.

5.3.6 Promote the Foundation's mission and values: The Board of Trustees acts as ambassadors for the Foundation, promoting its mission, programs, and values to stakeholders, partners, and the wider community.

5.4 The Board of Trustees works in collaboration with a diverse group of stakeholders, including architects, urban planners, project developers, service providers, research institutes, and (semi-)governments. These collaborations enable the Foundation to benefit from a wide range of perspectives, expertise, and resources, and ensure it remains responsive to the needs and interests of those it serves.

5.5 The Board of Trustees meets regularly to discuss matters of strategic importance, make decisions, and review the Foundation's progress. The Board operates in a transparent and accountable manner, in line with best practices in non-profit governance.

5.6 The terms of office, procedures for appointment and removal, and other matters relating to the governance of the Board of Trustees will be set out in the Foundation's Bylaws.

### Article VI ‚Äì Membership

6.1 Open Membership: Membership in the Block Foundation is open to all individuals, organizations, and entities that are interested in supporting, advancing, and contributing to the mission and objectives of the Foundation. Our membership encompasses a diverse community that includes architects, urban planners, project developers, service providers, research institutes, and (semi-)governments, along with anyone else who has a vested interest in the intersection of architecture, housing, and blockchain technology.

6.2 Types of Membership: To accommodate the various levels of interest and involvement in the Foundation's mission, we offer several types of membership. These may include individual memberships, organizational memberships, partner memberships, and honorary memberships. The specific rights, benefits, and responsibilities associated with each type of membership will be defined in the Foundation's Bylaws.

6.3 Membership Responsibilities: All members are expected to adhere to the Foundation's mission, vision, and values, and to conduct themselves in a manner that reflects positively on the Foundation. Members are also expected to contribute to the Foundation's work in ways that are consistent with their abilities and interests. This may include participation in the Foundation's programs and initiatives, attendance at Foundation events, or advocacy for the Foundation's mission.

6.4 Membership Benefits: Members of the Block Foundation enjoy a range of benefits, which may include access to exclusive resources, opportunities to participate in Foundation programs and initiatives, eligibility to serve on committees or working groups, and the right to vote on matters of importance to the Foundation.

6.5 Membership Dues: The Foundation may require members to pay annual membership dues. The amount of these dues, and any exceptions or waivers, will be determined by the Board of Trustees and outlined in the Foundation's Bylaws.

6.6 Termination of Membership: Membership in the Block Foundation may be terminated by resignation of the member, non-payment of dues, or actions that are in violation of the Foundation's mission, values, or code of conduct. The procedures for termination of membership will be detailed in the Foundation's Bylaws.

### Article VII ‚Äì Finance

7.1 Sources of Funding: The Block Foundation is funded primarily through grants, donations, membership dues, corporate sponsorships, and other philanthropic contributions. We may also seek funding from other opportunities that align with our mission, such as contracts for services, endowments, fundraising events, and investment income.

7.2 Grant Applications: The Foundation actively applies for grants from a variety of sources, including governmental agencies, private foundations, and corporate giving programs. We focus on grants that support our mission and that are aligned with our strategic priorities.

7.3 Donations: The Foundation gladly accepts donations from individuals, organizations, corporations, and other entities who wish to support our mission. We may launch fundraising campaigns as needed to support specific programs or initiatives. All donations to the Foundation are tax-deductible to the extent allowed by law.

7.4 Financial Stewardship: The Foundation is committed to the highest standards of financial stewardship. We manage our resources prudently and strive to use our funds in a manner that maximizes their impact on our mission.

7.5 Transparency: The Foundation believes in transparency in all financial matters. We provide regular financial reports to our Board of Trustees and publish an annual report that includes a financial statement. This report is made available to the public and details our sources of income, our expenditures, and our financial position.

7.6 Financial Audits: The Foundation's financial records are subject to an annual independent audit conducted by a certified public accountant. The results of these audits are reviewed by the Board of Trustees and are made available to the public.

7.7 Fiscal Year: The fiscal year of the Foundation shall be defined in the Foundation's Bylaws.

7.8 Compliance: The Foundation is committed to full compliance with all financial reporting and tax requirements. We maintain a rigorous internal controls system to ensure the accuracy and legality of all financial transactions. All financial activities are conducted in accordance with applicable laws and regulations, as well as the ethical standards of the non-profit sector.

7.9 Asset Management: The Foundation is responsible for the prudent management of its assets. We have adopted an investment policy that provides guidelines for the investment of the Foundation's assets, with the goal of preserving capital, providing income, and supporting the Foundation's long-term financial stability.

### Article VIII ‚Äì Amendments

8.1 Proposal of Amendments: Any member of the Board of Trustees may propose an amendment to the Charter. This proposal must be written and submitted to the Board of Trustees for consideration. The proposed amendment must include the exact language of the amendment, the article it would alter, and a rationale for the change.

8.2 Review and Discussion: Once a proposed amendment has been submitted, the Board of Trustees will schedule a time for review and discussion. This review period allows Trustees to deliberate on the proposed change and its potential impact on the Foundation, considering both the immediate and long-term implications.

8.3 Voting on Amendments: Following the review period, the Board of Trustees will vote on the proposed amendment. A two-thirds majority of the Board must vote in favor of the amendment for it to pass. This supermajority requirement ensures that any changes to the Charter reflect a substantial consensus among the Board.

8.4 Notification of Amendments: In the event that an amendment is passed, the Foundation will promptly notify all members and stakeholders of the change. The notification will include a copy of the amended Charter and a summary of the changes.

8.5 Implementation of Amendments: Once passed, amendments to the Charter are binding and take immediate effect, unless a specific implementation date has been set. All operations, programs, and activities of the Foundation will comply with the amended Charter.

8.6 Record of Amendments: The Foundation will keep a detailed record of all amendments to the Charter, including the date of the amendment, the exact language of the change, and the vote tally. This record will be kept with the official copy of the Charter and will be made available for public review.

8.7 Regular Review of the Charter: The Board of Trustees will conduct a comprehensive review of the Charter at least once every five years to ensure that it remains current, relevant, and aligned with the Foundation's mission and objectives. This review may lead to additional amendments as the Foundation evolves and its needs change.

### Article IX ‚Äì Dissolution

9.1 Dissolution Procedure: Should the unfortunate need for dissolution of the Block Foundation arise, the process shall be carried out in accordance with the stipulations of the Foundation's bylaws and in compliance with all applicable laws and regulations.

9.2 Payment of Debts and Liabilities: The first responsibility of the Foundation, upon deciding to dissolve, will be to pay or make provision for the payment of all the liabilities and expenses of the Foundation, including but not limited to, the costs of dissolution and any outstanding debts.

9.3 Disposal of Assets: Once all outstanding debts and liabilities have been settled, the Foundation's remaining assets, if any, will be carefully disbursed. The disbursement of the Foundation's assets will be conducted in a manner that aligns with the Foundation's mission.

9.4 Beneficiaries: Assets will be distributed to one or more organizations that are organized and operated exclusively for charitable, educational, religious, or scientific purposes. The beneficiaries will be selected by the Board of Trustees, and ideally will have a mission and objectives similar to those of the Block Foundation, in order to continue the work the Foundation sought to achieve.

9.5 Compliance with IRS Regulations: Any organization(s) receiving the assets of the Block Foundation must qualify as exempt under section 501(c)(3) of the Internal Revenue Code, or corresponding section of any future federal tax code.

9.6 Documenting the Dissolution: The Foundation will file the necessary notices, reports, and returns to document the dissolution with the appropriate authorities, ensuring that it has met all legal requirements.

9.7 Archiving: Even after dissolution, the Foundation's records will be kept for a period as dictated by law to allow for any necessary audits or investigations. After this period, any remaining records will be disposed of in a secure manner.

9.8 Closure: After the dissolution is complete, the Foundation will cease all operations. The dissolution will be marked as a significant milestone in the history of the organization, acknowledging the impact the Foundation has had and expressing hope that the work can continue through other entities.

### Article X ‚Äì Adoption

10.1 Proposal for Adoption: Once the initial draft of the charter is completed, it shall be proposed for adoption to the Board of Trustees. The proposal shall outline the contents of the charter, the rationale behind it, and the impact it is expected to have on the Block Foundation.

10.2 Review and Discussion: The Board of Trustees shall be provided with adequate time to review the draft charter in depth, consider its implications, and prepare any questions or concerns. This period also allows for open discussion and deliberation, during which Trustees may suggest edits or revisions to the draft.

10.3 Voting for Adoption: Following the review and discussion period, the Board of Trustees will vote on the adoption of the charter. A two-thirds majority of the Board must vote in favor of the charter for it to be considered approved and adopted. This supermajority requirement ensures that the charter has broad support among the Board.

10.4 Adoption and Enactment: Upon approval by a two-thirds vote, the charter shall be officially adopted and put into force. The effective date of the charter will be the date of the successful vote, unless otherwise specified.

10.5 Notification of Adoption: Once adopted, the Foundation will promptly inform all members, stakeholders, and interested parties of the adoption of the new charter. This communication will include a copy of the charter and an explanation of its significance to the Block Foundation.

10.6 Compliance with Charter: From the moment of adoption, all operations, programs, and activities of the Block Foundation will be guided by the provisions outlined in the charter. All members and stakeholders of the Foundation are expected to adhere to the charter in fulfilling their roles and responsibilities.

10.7 Record of Adoption: The Foundation will keep a record of the charter's adoption, including the date of adoption, the final language of the charter, and the vote tally. This record will be kept with the official copy of the charter and made available for public review.

### Article XI ‚Äì Non-Discrimination Policy

11.1 Policy Statement: The Block Foundation strictly adheres to a policy of non-discrimination. We believe in equality, inclusivity, and fairness, recognizing the inherent worth and dignity of all individuals. We are committed to maintaining an environment that is free from discrimination, where all members are treated with respect and dignity.

11.2 Scope: This non-discrimination policy applies to all aspects of the Foundation's operations and activities, including but not limited to membership selection, grantmaking, hiring and employment practices, service provision, and organizational governance.

11.3 Protected Characteristics: The Block Foundation expressly prohibits discrimination based on an individual's race, color, religion, sex, age, national origin, physical or mental disability, sexual orientation, gender identity or expression, or any other characteristic protected under federal, state, or local law.

11.4 Promotion of Diversity: In addition to non-discrimination, the Foundation is committed to promoting diversity within its membership, staff, leadership, and beneficiaries. We value the variety of perspectives and experiences that a diverse community can bring, and strive to reflect this diversity in every aspect of our work.

11.5 Reporting Discrimination: The Block Foundation encourages members to report any instances of perceived discrimination or harassment related to the Foundation's activities. We are committed to investigating all such reports promptly and fairly, and to taking appropriate action to rectify any proven incidents of discrimination.

11.6 Policy Enforcement: Violations of this non-discrimination policy will be regarded as serious misconduct and may result in disciplinary action, up to and including termination of membership or employment, cessation of funding, or other relevant sanctions.

11.7 Policy Review: The Foundation will review this policy periodically to ensure that it remains relevant and effective in promoting a non-discriminatory and inclusive environment. This review will consider changes in law, best practices in non-profit governance, and feedback from Foundation members and stakeholders.

11.8 Awareness and Training: The Foundation will take steps to ensure that all members, employees, and stakeholders are aware of this policy, understand its provisions, and are equipped to uphold it. This may include providing information sessions, training, or other educational resources on discrimination and equality issues.

### Article XII ‚Äì Conflict of Interest

12.1 Definition: A conflict of interest arises when a member of the Board of Trustees, an officer, or a committee member has a personal or financial interest that could affect or appear to affect their decision-making within the Block Foundation. This includes, but is not limited to, any situation where such an individual might benefit personally or financially, either directly or indirectly, from a contract, transaction, or determination that is being presented for approval.

12.2 Disclosure: Any individual subject to this policy who has an actual or potential conflict of interest in a matter under consideration by the Board of Trustees or a committee thereof is required to disclose the conflict promptly, fully, and in good faith. This disclosure should include all relevant information about the nature and extent of the conflict.

12.3 Abstention from Voting: Following the disclosure of a conflict of interest, the conflicted individual shall not vote on, nor use their personal influence in, the decision-making process relating to the matter in question. They may, however, provide information or answer questions about the matter before leaving the meeting during the discussion and voting process.

12.4 Determination: The non-conflicted members of the Board or committee will discuss the potential conflict of interest and determine, by majority vote, whether a conflict of interest exists. The determination and its basis will be documented in the meeting minutes.

12.5 Annual Statements: To proactively manage potential conflicts of interest, each trustee, officer, and committee member will be asked to complete a statement annually identifying any relationships, positions, or circumstances in which they are involved that they believe could contribute to a conflict of interest.

12.6 Training and Education: The Block Foundation will provide training and educational resources to ensure that all trustees, officers, and committee members understand this policy and the underlying principles of independence and fiduciary duty.

12.7 Enforcement: Violations of this conflict of interest policy may result in disciplinary measures, up to and including removal from the Board of Trustees or committee, as deemed appropriate by a majority vote of the non-conflicted members of the Board.

12.8 Review of Policy: This Conflict of Interest Policy will be reviewed annually by the Board of Trustees to ensure that it continues to comply with applicable laws and regulations, and to make any updates or adjustments as needed.

### Article XIII ‚Äì Limitations

13.1 The Block Foundation is organized and operated exclusively for charitable and educational purposes as defined by section 501(c)(3) of the Internal Revenue Code. Our primary objective is to advance understanding and innovation in architecture and housing through the use of blockchain technology. All programs and initiatives of the Foundation are designed to support this mission.

13.2 No Private Inurement: The Block Foundation is committed to ensuring that no part of the net earnings of the organization inures to the benefit of any private individual. This prohibition extends to all individuals who have the ability to influence the actions of the Foundation, including trustees, officers, and key employees. Compensation for services rendered and reimbursement of expenses incurred in the conduct of the Foundation's activities are the only permissible financial transactions between the Foundation and its members.

13.3 Political Activity: The Block Foundation shall not directly or indirectly participate or intervene in any political campaign on behalf of (or in opposition to) any candidate for public office. The Foundation is committed to operating in a non-partisan manner, and will not engage in any activities that could compromise its status as a non-profit organization.

13.4 Compliance with Laws and Regulations: The Block Foundation will carry out its activities in accordance with all relevant federal, state, and local laws and regulations. The Foundation shall not carry out any activities not permitted by an organization exempt from tax under section 501(c)(3) of the Internal Revenue Code or corresponding provisions of any subsequent federal tax laws.

13.5 The Foundation will maintain a comprehensive compliance program to ensure adherence to these limitations. This program will include regular reviews of Foundation activities, training for trustees and staff, and procedures to address any potential non-compliance.

13.6 If any questions or uncertainties arise regarding the limitations placed on the Foundation's activities, the matter will be brought to the attention of the Board of Trustees. The Board will seek advice from legal counsel as needed and will make a decision in the best interest of the Foundation and in accordance with its legal and ethical obligations.

**Adopted by the Board of Trustees on [Date]**


---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, charter, housing, meta-estate, real-estate]",0
notarydepot,sitemap,notarydepot,https://github.com/notarydepot/sitemap,https://api.github.com/repos/sitemap/notarydepot,Notary Depot sitemap,"# Find a Notary Public on Notary Depot

https://www.notarydepot.com

Updated at 2022-01-05 12:48am
",1,1,2,0,real-estate,"[mortgage, notary, notary-near-me, notary-public, real-estate, signing-agent]",0
f1est,solidity,,https://github.com/f1est/solidity,https://api.github.com/repos/solidity/f1est,Smart-contract realizing the transaction of purchase and sale of real estate,"
–°–º–∞—Ä—Ç-–∫–æ—Ç—Ä–∞–∫—Ç —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Å–¥–µ–ª–∫—É –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ	 —Å —Ç–µ–º –∞–¥—Ä–µ—Å–æ–º –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –∞ —Ç–∞–∫–∂–µ —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ.	

**–í–ù–ò–ú–ê–ù–ò–ï: —ç—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ —è–∑—ã–∫–µ solidity!!!**

–°—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã —Å–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º:
1) –°–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Selling. 
2) –°–æ–∑–¥–∞—é—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Human –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:
	bytes32 salt - (–∫—Ä–∏–ø—Ç–æ—Å–æ–ª—å)
	address _trustee -	–∞–¥—Ä–µ—Å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞ –ø—Ä–æ–≤–æ–¥—è—â–µ–≥–æ —Å–¥–µ–ª–∫—É, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å—é–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ Selling, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞ —ç—Ç–∞–ø–µ 1. 
						–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ—Å—Ç–≤–∞ –∑–∞ –ø–æ–∫—É–ø–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç —Å –∞–¥—Ä–µ—Å–∞ buyer'–∞ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Selling –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.
2.1) –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è(—Ä–µ–∫–≤–∏–∑–∏—Ç—ã).
3) –°–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Object —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:
	bytes32 cadastr_num - –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –∫–ª—é—á–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–∞ —Å—Ä–µ–¥–∏ –ø—Ä–æ—á–∏—Ö —Å–¥–µ–ª–æ–∫. 
	address _trustee - –∞–¥—Ä–µ—Å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å—é–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ Selling, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞ —ç—Ç–∞–ø–µ 1 
3.1) –ó–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–±—ä–µ–∫—Ç–∞.
4) –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å–¥–µ–ª–∫–∞ (–≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –ü–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å):
4.1) –°–æ–∑–¥–∞–µ—Ç—Å—è —Å–¥–µ–ª–∫–∞ –º–µ—Ç–æ–¥–æ–º create() –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ Selling (—Å–æ–∑–¥–∞–Ω–Ω–æ–º –Ω–∞ —ç—Ç–∞–ø–µ 1), —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å–ª–µ–¥—É—é—â–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
	uint256 cost - —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞
	address seller - –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ (–∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —ç–∫–∑–µ–º–ª—è—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Human –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞) 
	address buyer - –∞–¥—Ä–µ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —ç–∫–∑–µ–º–ª—è—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Human –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
	address object - –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ (–∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —ç–∫–∑–µ–º–ª—è—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Object)
4.2) –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–ª—é—á–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–º set_signature(). –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Å–ª–µ–¥—É—é—â–∏–µ:
	address object - –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
	bytes32 ds_seller - –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –≠–¶–ü –ø—Ä–æ–¥–∞–≤—Ü–∞
	bytes32 ds_buyer - –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –≠–¶–ü –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
4.3) –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏ –º–µ—Ç–æ–¥–æ–º —Åhange_state_deal(). –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞:
	address object - –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
	–ú–µ—Ç–æ–¥ —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤ –∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:
	–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–¥–µ–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ""–í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è""
	–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Å–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ""–ò—Å–ø–æ–ª–Ω–µ–Ω"" –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞ –∞–¥—Ä–µ—Å–µ buyer –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω–µ –º–µ–Ω–µ–µ cost, —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ —ç—Ç–∞–ø–µ 4.1 –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏), –∫–æ—Ç–æ—Ä—ã–µ  –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å seller'–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –æ–±—ä–µ–∫—Ç–∞ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (buyer)
4.4) –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—è, –∞ –∏–º–µ–Ω–Ω–æ ""–≤–∏–¥, –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∞"" –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–∞ set_registration_for_rightholder() —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:
	address object - –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
	bytes32	_registration - —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è ""–≤–∏–¥, –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∞""
4.5) –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–∏ –∫ –æ–±—ä–µ–∫—Ç—É –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–∞ add_rightholder(). –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
	address object - –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
	address _human - –∞–¥—Ä–µ—Å –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —ç–∫–∑–µ–º–ª—è—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Human –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
	bytes32 _registration - —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è ""–≤–∏–¥, –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∞""
	bytes32 _restriction - —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –¥–∞–Ω–Ω—ã–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ (–æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–∏) –ø—Ä–∞–≤–∞ 

–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Selling:
deal_check() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–¥–µ–ª–∫–∏ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º. –í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–¥—Ä–µ—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Object, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞ —ç—Ç–∞–ø–µ 3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏.
deal_cancell() - –æ—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏. –°–¥–µ–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–π —Å—Ç–∞–¥–∏–∏ –¥–æ –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Å–º–µ–Ω–µ –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—è (—Ç.–µ. –¥–æ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ ""–ò—Å–ø–æ–ª–Ω–µ–Ω"").

–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ª–∏—Å—Ç–∏–Ω–≥—É –ø—Ä–æ–≥—Ä–∞–º–º—ã.


–ò–∑ –Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω–æ–≥–æ:
–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ (–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∂–∏–ª—å—Ü–æ–≤ –∏ —Ç.–ø), —Ç.–∫. –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–∞ blockchain'–µ.
–í –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bytes32 –≤–º–µ—Å—Ç–æ string. –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∫–∏—Ä–∏–ª–∏—Ü–µ
–ù–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —É–º—ã—à–ª–µ–Ω–Ω–æ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–ª–∏—Å—å, —Ç.–∫. –∑–∞–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–µ (–∫ –ø—Ä–∏–º–µ—Ä—É —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ bytes32 —Å –æ—Ç—Å–µ—á–µ–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –≤–º–µ—Å—Ç–∏–≤—à–∏—Ö—Å—è –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–∏–ø–∞ bytes32).

",1,1,0,0,real-estate,"[blockchain, ethereum-contract, real-estate, solodity]",0
nccharles,Pro-Lite-API,,https://github.com/nccharles/Pro-Lite-API,https://api.github.com/repos/Pro-Lite-API/nccharles,Property Pro Lite is a platform where people can create and/or search properties for sale or rent.,"[![Build Status](https://travis-ci.org/nccharles/Pro-Lite-API.svg?branch=develop)](https://travis-ci.org/nccharles/Pro-Lite-API)
[![Maintainability](https://api.codeclimate.com/v1/badges/5daa11aac53bf04a7ffa/maintainability)](https://codeclimate.com/github/nccharles/Pro-Lite-API/maintainability)
[![Coverage Status](https://coveralls.io/repos/github/nccharles/Pro-Lite-API/badge.png?branch=develop)](https://coveralls.io/github/nccharles/Pro-Lite-API?branch=develop)
# PropertyPro-lite
Property Pro Lite is a platform where people can create and/or search properties for sale or rent.

#### Technologies
This Project was created with:
- HTML - A markup language
- Cascading Stylesheet(CSS)
- JavaScript - Development Language
- NodeJS - A javascript server-side engine
- Express Library - A library built on Node JS
- Cloudinary - A file storage platform
- Pivotal Tracker - A project management platform
- Travis CI - A continuous integration and testing platform
- Coveralls - A continuous integration and testing platform
- Code Climate - A continuous integration and testing platform

#### Tools and Modules
The tools and modules employed in this project are:
- Git
- yarn
- A test suite e.g Mocha and Chai
- JSON Web Token
- express-fileupload
- swaggerUI
- bcryptjs
- JOI validation module

#### Development Setup
To start this project, install the required modules and dependencies locally using yarn:
##### Usage Example
##### git Clone this [Repository](https://github.com/nccharles/Pro-Lite-API.git)
```
yarn
yarn run db:create
yarn run db:migrate
yarn run start-dev
```

#### API URL
- https://pro-lite-api.herokuapp.com/

#### API Documentation
-  https://pro-lite-api.herokuapp.com/api-docs

#### User Access
Signing into the property-pro-lite platform will require a login details as:
- email: charles@example.com
- password: Passmein!

#### How to get a local copy and Use
**Clone repository**
- copy the link to the project from github website
- create a folder on local machine
- cd in to the folder and call a git init
- git clone repository
- yarn to install development dependencies


#### Endpoints
|Verb    | Endpoint                                                         | Description            |
|--------|------------------------------------------------------------------|------------------------|
|GET     |https://pro-lite-api.herokuapp.com/                               | Welcome Endpoint       |
|GET     |https://pro-lite-api.herokuapp.com/api-docs                       | API Documentation page |
|POST    |https://pro-lite-api.herokuapp.com/api/v3/property                | add property           |
| GET    |https://pro-lite-api.herokuapp.com/api/v3/property                | Get all properties     |
| DELETE |https://pro-lite-api.herokuapp.com/api/v3/property/2              |  Deletes a property    |
| GET    |https://pro-lite-api.herokuapp.com/api/v3/property?type=2-bedroom |Get Specific Properties |
| GET    |https://pro-lite-api.herokuapp.com/api/v3/property/2              | Get one Property       |
| PATCH  | https://pro-lite-api.herokuapp.com/api/v3/property/2             | Update property        |
| PATCH  | https://pro-lite-api.herokuapp.com/api/v3/property/2/Sold        |Mark as sold            |
| POST   | https://pro-lite-api.herokuapp.com/api/v3/auth/signup            | Endpoint of Signup.    |
| POST   | https://pro-lite-api.herokuapp.com/api/v3/auth/signin            | Endpoint of Sign in    |


#### Running Tests
Tests are run by calling 
```
yarn
yarn run test:db:migrate
yarn run test
```
 after installing and setting up testing suites:
- Mocha
- Chai
- Chai HTTP
##### Usage Example
```
  Testing welcome endpoints
    ‚úì should accept status 200
    ‚úì should insert user data to the memory (122ms)
    ‚úì should allow user to login if exist
```
#### Contributor(s)
- Charles NDAYISABA

#### Author(s)
- Charles NDAYISABA
",1,1,1,13,real-estate,"[api, express, javascript, joi-validation, nodejs, real-estate]",0
snjydas,EstateAgency,,https://github.com/snjydas/EstateAgency,https://api.github.com/repos/EstateAgency/snjydas,Application for online Real Estate buying/selling.,"# Real-Estate-Broker-Application
Application for online Real Estate buying/selling.

![](https://img.shields.io/github/repo-size/snjydas/Real-Estate-Broker-Application) ![](https://img.shields.io/github/license/snjydas/Real-Estate-Broker-Application?color=red)<br>
![](https://img.shields.io/github/issues/snjydas/Real-Estate-Broker-Application?color=green) ![](https://img.shields.io/github/issues-pr/snjydas/Real-Estate-Broker-Application?color=green) ![](https://img.shields.io/github/downloads/snjydas/Real-Estate-Broker-Application/total) ![](https://img.shields.io/github/last-commit/snjydas/Real-Estate-Broker-Application) ![](https://img.shields.io/github/contributors/snjydas/Real-Estate-Broker-Application)

## Content
- [Overview](#overview)
- [Setup](#setup)
- [Run](#run)
- [Output](#output)
- [Features](#features)
- [Reference](#reference)
- [License](#license)
- [Contributor](#contributor)



### **`Folder structure`**
<hr/>

üìÅ Real Estate Broker Application<br/>



## Overview

- In the present scenario due to Covid-19, one of the industry that has struggled to accept digital innovation is the traditionally paper-driven real estate industry. For instance, in India, it‚Äôs hard to find a well-functioning real estate platform that will satisfy the needs of both property owners and buyers. 

- There are some popular websites, but they don‚Äôt work properly. Listings only work if they‚Äôre posted by brokers. The service is free of charge for owners, but quite costly for buyers. Consequently, buyers lose money. So do owners, who could have sold their property at a higher price instead of paying a commission to somebody else. 

- Also, the existing platforms don‚Äôt provide property valuations. Owners don‚Äôt know how much their property actually costs, and have to accept the broker‚Äôs price. In turn, brokers tend to suggest more customer-friendly prices so the properties will sell faster. This problem was elegantly solved by Scoperty ‚Äì a service that connects owners, buyers and realtors, and provides up-to-date valuations.

#### The proposed system can be elegantly solved by "" Name Of the Application "" ‚Äì a service that connects owners, buyers and realtors, and provides up-to-date valuations.

## Setup

- Clone the repo and cd into the directory


```sh
$ git clone ""https://github.com/snjydas/Real Estate Broker Application""
$ cd Real-Estate-Broker-Application
```

## Run


## Output

<p align=""center"">

</p>

## Features

- Broker can add/update/delete properties.
- Customers can see the list of properties available for buying/renting based on various criterias.
- Customers can buy/rent a property listed by Broker.
- Once bought/rented property is no longer available for others.
- Customers can also see the properties he owned or rented.


## Reference



## License

Licensed under the [MIT License](LICENSE)

## Contributor

<p align=""center"">

|                                                                                                                                                                                                                   <a href=""https://github.com/snjydas""><img src=""https://avatars.githubusercontent.com/snjydas"" width=""150px"" height=""150px"" /></a>                                                                                                                                                                                                                    |
||
|                                                                                                                                                                                                                                                             **[Sanjay Das](https://github.com/snjydas)**                                                                                                                                                                                                                                                              |
| <a href=""https://twitter.com/snjy_das""><img src=""https://i.ibb.co/kmgQVyW/twitter.png"" width=""32px"" height=""32px""></a> <a href=""https://github.com/snjydas""><img src=""https://cdn.iconscout.com/icon/free/png-256/github-108-438008.png"" width=""32px"" height=""32px""></a> <a href=""https://www.facebook.com/snjydas251297""><img src=""https://i.ibb.co/zmYNW4p/facebook.png"" width=""32px"" height=""32px""></a> <a href=""https://https://www.linkedin.com/in/snjydas/""><img src=""https://i.ibb.co/Kx2GSrT/linkedin.png"" width=""32px"" height=""32px""></a> |

<hr/>

<p align=""center"">

|                                                                                                                                                                                                                   <a href=""https://github.com/rakshith212""><img src=""https://avatars.githubusercontent.com/rakshith212"" width=""150px"" height=""150px"" /></a>                                                                                                                                                                                                                    |
||
|                                                                                                                                                                                                                                                             **[Rakshith Vuppala](https://github.com/rakshith212)**
<hr/>
<p align=""center"">

|                                                                                                                                                                                                                   <a href=""https://github.com/roosa2000""><img src=""https://avatars.githubusercontent.com/roosa2000"" width=""150px"" height=""150px"" /></a>                                                                                                                                                                                                                    |
||
|                                                                                                                                                                                                                                                             **[Roosa Mazumdar](https://github.com/roosa2000)**

<hr/>

```bash
                                                      ‚ïî‚ïê‚ïó‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ï¶ ‚ï¶  ‚ï¶ ‚ï¶‚ïî‚ïê‚ïó‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó
                                                      ‚ïö‚ïê‚ïó ‚ïë ‚ï†‚ïê‚ï£‚ïö‚ï¶‚ïù  ‚ï†‚ïê‚ï£‚ïë ‚ïë‚ïë‚ïë‚ïë‚ïë‚ï£
                                                      ‚ïö‚ïê‚ïù ‚ï© ‚ï© ‚ï© ‚ï©   ‚ï© ‚ï©‚ïö‚ïê‚ïù‚ï© ‚ï©‚ïö‚ïê‚ïù
                                                      ‚ïî‚ïê‚ïó‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ï¶ ‚ï¶  ‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó
                                                      ‚ïö‚ïê‚ïó ‚ïë ‚ï†‚ïê‚ï£‚ïö‚ï¶‚ïù  ‚ïö‚ïê‚ïó‚ï†‚ïê‚ï£‚ï†‚ï£ ‚ïë‚ï£
                                                      ‚ïö‚ïê‚ïù ‚ï© ‚ï© ‚ï© ‚ï©   ‚ïö‚ïê‚ïù‚ï© ‚ï©‚ïö  ‚ïö‚ïê‚ïù
```

</p>
",1,1,2,0,real-estate,"[angular, html-css-javascript, java, java-8, mysql-database, real-estate, spring, typescript]",0
coding-gene,SCRAPING_DATA-RealEstateProperties,,https://github.com/coding-gene/SCRAPING_DATA-RealEstateProperties,https://api.github.com/repos/SCRAPING_DATA-RealEstateProperties/coding-gene,[INDEX.HR] Scrape Real-Estate Properties With Python And Create A Dashboard In Jupyter Notebook,,1,1,1,0,real-estate,"[beautifulsoup4, pandas, pandas-python, real-estate, web-scraping]",0
Crypto-Utopian,real-world-DAP,,https://github.com/Crypto-Utopian/real-world-DAP,https://api.github.com/repos/real-world-DAP/Crypto-Utopian,"The RealWorld Data Analytics Platform (rDAP) is an advanced data mart curreted for real estate (parcel) that layers several GIS collections with data from government agencies, real estate websites, buplic records, etc.","<h1> üåé RealWorld Data Analytics Platform (rDAP) </h1>


<h2> Overview </h2>
The **RealWorld Data Analytics Platform (rDAP)** is a data services framework that utilizes modern application development practices to deliver advanced real estate data to a core data mart which overlaps GIS sources with data from government agencies, Realestate websites, and public records. 

<h2> What's the ""Big Idea""? </h2>
The ""BIG"" idea is to develop a data source containg layered collections of Geographic Information [(GIS)](https://github.com/sshuair/awesome-gis) data with other public records (i.e. [county appraiser](https://downloads.hcpafl.org) , or [clerk of court](https://www.hillsclerk.com/Additional-Services/Official-Records), etc) so that devs, BI guys, and data scienctists can do their magic! <br/>
All contributers must work to **improve** and/or **automate** most of these proccesses:
<br/>

- Gather source data üìù 
- Map data elements from source üó∫Ô∏è 
- Buid flexible code for reusability ‚ôªÔ∏èüìú 
- Incorporate Test (automated?) scripts at key steps üîç
- Develop with End User in mind ü§∑‚Äç‚ôÇÔ∏è
- Ask questions and collaborate üßë‚Äçü§ù‚Äçüßë


<h2> But Why, tho? </h2><br/>
Purchasing a home, for most people, is the single largest financial decision of their life. Sadly, real estate ""buyers"" make their decisions based only on the **LIMITED** data exposed to them from simple search filters or after an open house. And even for ""buyers"" who want to do **thorough** research, the data points they want are often isolated and require experience with APIs, Databases, Webs Scraping, or ETL/ELT to extract it. However, I believe truely suffecient data should be easyily accessible and curated into one platform for all ""buyers"" in order to make a more informed purchasing decision.<br/><br/>


<h2> Who can Contribute and How </h2>
There are many types of ""contributers"" needed for this project, including those with experience as:<br/>

- **Home Buyers** ‚û°Ô∏è primary end users of the data who will help guide our requirments & provide feedback loops
- **Bloggers** ‚û°Ô∏è aka messenger birds - discuss our project vision thus attracting more users/contributers
- **Architects** ‚û°Ô∏è advise, build, and/or maintain architecture for developers (also create archetecture documents)
- **Data Engineers/Developers** ‚û°Ô∏è create scipts, databases, pipelines, tech docs including: data flow diagrams, erds, source data dictionaries, etc
- **Data Scientists** ‚û°Ô∏è analyze, process, and model data within the datamart & much more
- **Consultants** ‚û°Ô∏è data conultants can be helpful for discussing best practices, improvements, and general advice
- **Others** ‚û°Ô∏è really anyone who has interest, input, or feedback is welcome to join project discussions
 
",1,1,1,0,real-estate,"[analytics-platform, data-analysis, data-engineering, data-extraction, data-science, data-visualization, geographic-data, housing, real-estate, test-automation]",0
pthavarasa,Real_Estate_Paris_House_Price_Prediction,,https://github.com/pthavarasa/Real_Estate_Paris_House_Price_Prediction,https://api.github.com/repos/Real_Estate_Paris_House_Price_Prediction/pthavarasa,Real estate paris house price prediction 2022 (Immobilier paris prix prediction),"# Real Estate Paris House Price Prediction
![thumbnail paris](thumbnail.png)

Real estate paris house price prediction 2022 (Immobilier paris prix prediction)

Accuracy : 99.434095751513 %

```
MAE: 20390.9101285461
MSE: 1958656804.737834
RMSE: 44256.71479829738
```

#### Try online : 
https://thavarasa.name/heroku/?name=paris-house-price-prediction

[https://paris-house-price-prediction.herokuapp.com/](https://paris-house-price-prediction.herokuapp.com/)
#### Try locally
```
pip install --upgrade pip

pip install --no-cache-dir -r app/requirements.txt

uvicorn app.backend.api:app --host 0.0.0.0 --port 80 --reload
```
#### Try with Docker
```
# build
docker build -t mymodel -f Dockerfile .

# run
docker run -p 80:80 mymodel
```

#### Screenshots
![](screenshot.PNG)
",1,1,1,0,real-estate,"[fastapi, house-price-prediction, immobilier-paris-prix-prediction, machine-learning, python, real-estate, real-estate-house-price-prediction, real-estate-paris, real-estate-paris-price-prediction, xgboost]",0
vishalv91,capstoneproject-realestate,,https://github.com/vishalv91/capstoneproject-realestate,https://api.github.com/repos/capstoneproject-realestate/vishalv91,"Data: Boston Housing Dataset (HousingData.csv) Programming language(s): R Tool(s): RStudio  Business problem: To understand the drivers behind the value of houses in Boston and provide data-driven recommendation to the client on how they can increase the value of housing.The Boston housing dataset consisted of 506 observations and 14 variables.  Project challenge(s): MEDV (Median value of homes in Boston) was identified as the dependent variable. While the rest, were the independent variables. The goal was to find out which among the independent variables were statistically significant in driving the house prices (MEDV). The dataset consisted of missing values and outliers. Some of the variables had a skewed distribution. There was multicollinearity among few independent variables.  Our Approach: Prior to model building, we tidied up our dataset by eliminating the rows that contained missing values. Replacing the missing values with median and mean of those variables were also done. Considering the three approaches, median imputation(replacing missing values with mean) was found to be the best approach. As the dependent variable ""MEDV"" (median value of houses) was continuous(numerical) in nature, we implemented the Multiple linear regression to build our model. Additional models were built from Decision trees and Random forest. On further investigation, we discovered that the dependent variable had a skewed distribution. By log transformation of this variable, we were able to get a normal distribution. Post transformation, we found out that the model built from Multiple linear regression with log transformed MEDV was the best in terms of MSE (Mean squared error) value and Adjusted R^2. All the assumptions of linear regression were met.","# Capstone Project - Real Estate
Data: Boston Housing Dataset (HousingData.csv) 

Programming language(s): R 

Tool(s): RStudio  

Business problem: To understand the drivers behind the value of houses in Boston and provide data-driven recommendation to the client on how they can increase the value of housing.The Boston housing dataset consisted of 506 observations and 14 variables.  

Project challenge(s): MEDV (Median value of homes in Boston) was identified as the dependent variable. While the rest, were the independent variables. The goal was to find out which among the independent variables were statistically significant in driving the house prices (MEDV). The dataset contained missing values and outliers. Some of the variables had a skewed distribution. Presence of multicollinearity.  

Our Approach: Prior to model building, we tidied up our dataset by eliminating the rows that contained missing values. Replacing the missing values with median and mean of those variables were also done. Considering the three approaches, median imputation(replacing missing values with mean) was found to be the best approach. As the dependent variable ""MEDV"" (median value of houses) was continuous(numerical) in nature, we implemented the Multiple linear regression to build our model. Additional models were built from Decision trees and Random forest. On further investigation, we discovered that the dependent variable had a skewed distribution. By log transformation of this variable, we were able to get a normal distribution. Post transformation, we found out that the model built from Multiple linear regression with log transformed MEDV was the best in terms of MSE (Mean squared error) value and Adjusted R^2. All the assumptions of linear regression were met.
",1,1,0,0,real-estate,"[analytics, boston-housing-price-prediction, data-modeling, data-projects, data-science, housing-prices, linear-regression, model-building, multiple-linear-regression, r-programming, real-estate]",0
toluwanicareer,butterbind,,https://github.com/toluwanicareer/butterbind,https://api.github.com/repos/butterbind/toluwanicareer,"FAST AND FRIENDLY HOMEOWNERS INSURANCE BetterBind uses the latest technology which uses unique data sources to more accurately assess the risks to your home and property. In most cases, this enables us to provide a premium quote in a few seconds using just your address, and we can usually offer you a lower premium, too.",,1,1,1,3,real-estate,"[django, javascript, python, real-estate]",0
sumonst21,realhomes,,https://github.com/sumonst21/realhomes,https://api.github.com/repos/realhomes/sumonst21,DNG Galvin - RealEstate Auction Website,,1,1,2,0,real-estate,"[auction-website, real-estate, wordpress, wordpress-theme]",0
thomastrg,Real_Estate_predictions,,https://github.com/thomastrg/Real_Estate_predictions,https://api.github.com/repos/Real_Estate_predictions/thomastrg,Model predicts sale price of real estate,"# Real Estate sale price predictions

This study deals with the Sale price of real estate following a lot of features. The goal of this study is to model and tune algorithms in order to predict the price of the real estate. And to know the impact of a good feature selection on a model.

You can find the dataset necessary for the analysis on following link : [https://github.com/thomastrg/Real_Estate_predictions/blob/main/data%20immobilier.csv](https://archive.ics.uci.edu/ml/datasets/Seoul+Bike+Sharing+Demand#)
<br>


## This project is implemented in Python and gathers tasks of :  
* Data Exploration & visualisation : show correlations between the data and the target on the Jupyter Notebook
* Data processing with features importance selection
* Machine learning algorithm modelisation & tuning on the Jupyter Notebook
  
 
## You will find in this repositery :   
* A [LaTeX report of the study](https://github.com/thomastrg/Real_Estate_predictions/blob/main/TD2_advanced_ML.pdf)
* The [Jupyter Notebook](https://github.com/thomastrg/Real_Estate_predictions/blob/main/optimisation_td2.ipynb)

<br> 

## Conclusion : 
This study shows that models score metrics is better with a good features importance selection.
",1,1,1,0,real-estate,"[jupyter-notebook, machine-learning, optimization-algorithms, predictive-modeling, python, real-estate, sklearn]",0
chvieira2,housing_crawler,,https://github.com/chvieira2/housing_crawler,https://api.github.com/repos/housing_crawler/chvieira2,Web crawler to collect housing information,"## Welcome to [WG-prices](https://wgs-in-germany.streamlit.app/)! 
WG-prices is a free and intuitive webpage where anyone can analyse the market of shared flats (WGs) in Germany. It was created out of curiosity and desire to help people understand the housing market better. With this tool I want to help anyone answer questions like:
- Is the price for this WG fair?
- Are there similar offers that I should consider?
- How likely am I to find a similar offer, and how long would it take?

It's easy and intuitive! Visit the webpage and try it out: [WG-prices](https://wgs-in-germany.streamlit.app/)


## Why do we need WG-prices?
The price paid for a WG is somewhat related to the rental price of the flat. However, the WG market in Germany is saturated in several cities, making people living in WGs susceptible to accept WGs that charge more than they should. This is the case specially for younger adults and people coming from abroad that have little resources and knowledge to judge the fairness of an offer.

WG-prices is 100% free of charge for everyone. If you live or wants to live in a WG, WG-prices helps you judge if the values charged are in accordance to the current market, or if someone is trying to exploit you.


## How to use it?
Open the [link](https://wgs-in-germany.streamlit.app/) and select one of the tabs.
- If you already have an ad from wg-gesucht.de that you would like to investigate, open the tab ""Analyse WG from url link"", paste the link to the wg-gesucht ad and click ""submit"";
- If you would like to compare your own flat to the current market, open the tab ""Analyse my own WG"", insert the information about your WG and click ""submit"". Information submitted is only used for your analysis and is not saved anywhere;
- If you are instead only interested in a global overview of the current market, select the tab ""Overview of the WG market"", select the parameters of your choice and click ""Show results"";
- If you are interested in the predictive model of prices, select the tab ""The predictive model of WG prices"".


## Behind the curtains
Inside WG-prices I developed a webcrawler tool to collect data from wg-gesucht.de. This tool has been constantly running since August 2022 and I accumulated over 100.000 ads for WGs, single-room, multi-room flats and houses. [WG-prices](https://wgs-in-germany.streamlit.app/) is a platform for anyone to access all of this data without any coding knowledge.

Particularly, I used these data to generate a predictive model of prices. Please check the [wg_price_predictor](https://github.com/chvieira2/wg_price_predictor) repository if you are interested in the predictive model. This model is used to answer a simple question: **given the current market, how much should be charged for a WG with given specifications**. As the model is not perfect, the full analysis of the current market in the past 3 months in Germany is displayed in a dashboard format to help you form your own judgement.


## Finding similar offers
Another important use of this data is to identify similar offers. For that, I collect information on the room of interest (either an ad on wg-gesucht.de or your own) and compare it to the database of ads. Recently published, similar ads are found by identifying offers with similar price and at proximal similar locations. If less than 3 similar ads are found, I extend the search to the days before.


## How to use my webcrawler in your own project
If you are interested in using this webcrawler for your own project, please:
1) Download this repository.
2) In your terminal, go the project folder you just downloaded.
3) If you would like to use it as a module in your own code, install it by running run ""pip install -e .""
4) If you just want to run my code directly for a city of interest, simply run ""python main.py -l name_city"".

For an example on how this crawler could be used in your own project, please see [Livablestreets](https://github.com/chvieira2/livablestreets).


## About
WG-prices was created by [Carlos H. Vieira e Vieira](https://github.com/chvieira2). The code is written in Python, and the app is hosted and published with [Streamlit](https://streamlit.io/). Real estate market ads were scraped from [wg-gesucht.de](https://www.wg-gesucht.de/).
",1,1,1,0,real-estate,"[house-price-prediction, housing, housing-prices, machine-learning, machinelearning-python, python, real-estate, streamlit, streamlit-webapp]",0
mandarphatak,WHERE_TO_LIVE_IN_LONDON,,https://github.com/mandarphatak/WHERE_TO_LIVE_IN_LONDON,https://api.github.com/repos/WHERE_TO_LIVE_IN_LONDON/mandarphatak,This is a capstone project for Google data analytics professional certificate ,,1,1,1,0,real-estate,"[cost, cost-optimization, london, london-underground, real-estate]",0
BlockVisors,Flow-Estate,,https://github.com/BlockVisors/Flow-Estate,https://api.github.com/repos/Flow-Estate/BlockVisors,real estate marketplace on Flow,"# FlowEstate

![logoflow](https://user-images.githubusercontent.com/95926324/221815593-505a9b8a-f696-4d41-8040-effbd127247f.png)


# Introduction
FlowEstate aims to create a platform for buying and selling physical Real Estate assets using dynamic NFTs, which will upgrade based upon the property. This platform will allow for the purchase of property in the form of NFTs using credit cards, abstracting away the underlying blockchain technology's complexity using Flow Blockchain. FlowEstate seeks to create a more inclusive and efficient real estate market by leveraging Flow blockchain to offer a seamless buying and selling experience for physical Real Estate assets resulting in the mainstream adoption and onboarding.
 
 Published on NFT Catalog - https://www.flow-nft-catalog.com/catalog/testnet/RealEstate
 
 To chekc the NFT's on testnet - https://testnet.flowview.app/account/0x8add986bc5f20a17/collection
 
 to view the NFT's on the NFT Catalog - https://www.flow-nft-catalog.com/nfts/testnet/0x90049f012a6eba3e/NiftoryDapperSample/41
 
 Slides Link- https://docs.google.com/presentation/d/1BtGbyGJ0GE1Hh2u0qvtc9WmcDF1UEVoQako8FqWCKRw/edit?usp=sharing
 
# Features

1. Marketplace:
A one stop marketplace to check, buy and sell NFTs of Real Estate

2. WalletLess Onboarding
![image](https://user-images.githubusercontent.com/95926324/222019168-21c3657b-458a-4298-9ac7-20238bb65e00.png)

2. Create NFT:
Generate a unique digital asset of your Real Estate using blockchain technology

3. Check your collection:
view and manage set of owned NFTs + you can check other user's collection using his Flown address
![image](https://user-images.githubusercontent.com/95926324/221442058-60e360a4-5719-401e-aec5-a3cadf86c57f.png)

![image](https://user-images.githubusercontent.com/95926324/221573120-4f199065-59e6-45cc-979a-f5213d203e6b.png)

4. Own and Checkout Flovatars:
See, purchase and verify digital Flovatars 
We are Querying from the mainnet, for testing - https://www.flowty.io/listing/906283794 

5. Checkout Decentralized Domains Flown:
explore and potentially purchase Flown domain names.

## Pay with USDC using Circle Payment:
Hassle-free and simplified payment on blockchain without using web3 wallet and cryptocurrency

> <img src=""https://user-images.githubusercontent.com/95926324/221572205-dbe85d57-927e-4e95-9cc6-9024d89250f9.png"" alt=""circle"" width=""400px""></img>

> How it will work:
>> 1. Buyer does checkout

>> 2. Buyer verfies the payment

>> 3. Circle will send payment to seller

>> 4. Asset transfer to Buyer

>> 5. Buyer redirected to collection page

<img width=""964"" alt=""Screen Shot 2023-02-28 at 11 55 03 PM"" src=""https://user-images.githubusercontent.com/59703541/222048308-edd9f697-69ab-47bb-a771-5f616da1bec4.png"">

## Niftory
Niftory is a platform for building, launching, and tracking web3 application. It provide APIs needed to easily add NFTs into websites, apps, games and other experiences, without having to worry about smart contracts, gas fees or other esoteric blockchain infrastructure.

> Off-chain and on-chain data management in a single API, combining the reliability and persistence of the Flow blockchain with the speed and cost of traditional web2 data management
> User authentication using OAuth 2.0, as well as wallet management and verification
> Blazing-fast GraphQL APIs for querying, minting and transferring NFTs

<img width=""834"" alt=""Screen Shot 2023-03-01 at 12 05 55 AM"" src=""https://user-images.githubusercontent.com/59703541/222050274-b539a78b-5e79-4e11-ada0-dca9300f2784.png"">

## Advantages of Decenralizing Real Estate
 
‚Ä¢ Increased Transparency: Using blockchain technology can increase transparency and reduce the likelihood of fraud or disputes. This is because all the transactions and ownership details would be stored on a decentralized ledger, making it easier to verify the authenticity of the asset and its ownership.

‚Ä¢ Liquidity: NFTs can make it easier to buy and sell real estate assets because they can be fractionalized, meaning that they can be broken down into smaller portions, allowing more people to invest in them. This could potentially make real estate investment more accessible to a wider range of investors.

‚Ä¢ Speed: Traditional real estate transactions can be slow and require a lot of paperwork. Using NFTs on the blockchain could speed up the process by making it easier to transfer ownership of the asset.

‚Ä¢ Flowty Integration 

Take Loan , Rent it and Even List it for sale 

![image](https://user-images.githubusercontent.com/95926324/222017110-fb286250-4b7f-4907-99a7-c7132b923b05.png)

# Why we chose Flow to build the decentralized real estate platform FlowEstate
We found out Flow blockchain as a most suitable choice for building a real estate platform because of its scalability, high throughput, and ability to handle complex smart contracts.

Real estate platforms require high-speed transactions, data storage, and secure contracts to manage real estate transactions, such as buying and selling properties, rental agreements, and property management. Flow blockchain can provide fast and reliable transaction processing and storage, which can help to minimize the time and costs involved in real estate transactions.

Additionally, Flow's ability to support smart contracts can enable developers to create decentralized applications that can automate the processes involved in real estate transactions, such as escrow payments, title transfers, and property ownership verification. This can help to reduce the need for intermediaries and improve the efficiency and transparency of the real estate market.

Overall, Flow blockchain can provide a suitable foundation for building a secure and scalable real estate platform that can streamline the process of buying, selling, and managing real estate properties. 

## When selecting real estate properties to represent as NFTs, we are considering the following factors:

‚Ä¢ Location: Properties in prime locations with high demand are more likely to attract buyers, so it's a good idea to choose properties that are in popular areas.

‚Ä¢ Type of Property: Different types of properties have varying demand and appeal. For instance, residential properties such as apartments or houses, commercial properties like offices, retail shops, or industrial warehouses, or even land.

‚Ä¢ Condition: The condition of the property is also an essential factor to consider. A property that is in good condition and has been well-maintained is likely to have a higher value.

¬∞ Historical Significance: Properties that have historical or cultural significance might have more value and could potentially attract a broader audience.

¬∞ Market Value: The market value of the property is an important factor to consider when selecting properties to represent as NFTs. The value of the property should be high enough to make it an attractive investment for buyers.


# Tech Stack
> For Frontend:
- [Next.js](https://nextjs.org)
- [NextAuth.js](https://next-auth.js.org)
- [Prisma](https://prisma.io)
- [Tailwind CSS](https://tailwindcss.com)
- [tRPC](https://trpc.io)
> For Smart Contract:
- [Cadence](https://developers.flow.com/cadence)
",1,1,1,0,real-estate,"[blockchain, cadence, flow, real-estate]",0
block-foundation,teal-land-registry,block-foundation,https://github.com/block-foundation/teal-land-registry,https://api.github.com/repos/teal-land-registry/block-foundation,Teal Smart Contract: Decentralized Land Registry,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/teal-land-registry/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/teal-land-registry)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Decentralized Land Registry</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Teal]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/teal-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to the Decentralized Land Registry project, an open-source venture that aims to redefine land transactions with the power of blockchain. Leveraging advanced blockchain technology, this project introduces an innovative way to manage and conduct land transactions transparently, securely, and efficiently.**

## Introduction

The traditional land registry systems are often fraught with inefficiencies, potential for fraud, and lack of transparency. Our solution, a blockchain-based land registry, addresses these issues head-on by providing an immutable and public record of land transactions, drastically reducing the potential for fraud and manipulation. By combining cryptography and consensus algorithms, blockchain technology ensures that once data is added to the blockchain, it is virtually impossible to change.

This is an example of  a smart contract for a land registry system where an owner can register their land, update the land details, and even transfer ownership in a secure way. This contract makes land transactions more transparent and trustworthy.

The primary functionalities include:

1. Registration: When a user first registers a parcel of land, they are recorded as the owner of that parcel in the global state of the smart contract.

2. Land Update: The owner can update the details of their registered land. Any updates are recorded in the global state, ensuring that a history of changes is kept.

3. Ownership Transfer: If the owner decides to transfer their land, the contract allows for a seamless and secure transfer of ownership.

This Decentralized Land Registry project is set to revolutionize how we view land transactions, bringing about a new level of transparency and security. We're excited to embark on this journey towards a more efficient, reliable, and secure system for land transactions, and we warmly invite you to explore, contribute, and grow with us in this endeavor.

## Quick Start

...

## Contract

This PyTeal code defines a basic smart contract for a land registry. The contract allows an ""owner"" (the account that created the contract) to update a ""land"" global variable. Any other account that tries to call the contract will have their transaction rejected.

Please note that this is a simplified example and may not cover all potential security vulnerabilities or complex needs of a real-world land registry system. The contract code should be audited by a professional before being used in a production environment.

- This ccontract has a `transfer_ownership` function that allows the owner to transfer ownership of the land to a new owner.
- The owner can call the contract with the first argument as `update_land`, followed by the new land details as the second argument, and the landID as the third argument to update land information.
- The owner can also call the contract with the first argument as `transfer_ownership`, followed by the new owner's address as the second argument to transfer the ownership.
- Non-owner transactions are still rejected.

## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[algo, algorand, architecture, block-foundation, blockfoundation, dapp, land, land-registry, pyteal, real-estate, smart-contract, teal]",0
hermitex,makazi,,https://github.com/hermitex/makazi,https://api.github.com/repos/makazi/hermitex,"Makazi is a Real Estate web application that allows Agents to manage properties. It also allows Users to access, and browse through properties as they make decisions about which to buy.","# Makazi

Makazi is a Real Estate web application that allows Agents to manage properties. It also allows Users to access, and browse through properties as they make decisions about which to buy. Watch a live demo on [Youtube Video](https://youtu.be/LUx2aZwh64I).

### By Tiberius Mairura, 31/07/2022

## Landing Page

![image](./src/assets/images/listings-home.png)


## Signup Page

![image](./src/assets/images/signup.png)

## Login Page

![image](./src/assets/images/login.png)

## Listings Page

![image](./src/assets/images/listings.png)

## Listings Details Page

![image](./src/assets/images/listing-details.png)

## Listings Update Page

![image](./src/assets/images/listing-update.png)

## 


Demo on youtube

Watch on [Youtube Video](https://youtu.be/LUx2aZwh64I)

## Table of Content

- [Makazi](#makazi)
    - [By Tiberius Mairura, 31/07/2022](#by-tiberius-mairura-31072022)
  - [Landing Page](#landing-page)
  - [Signup Page](#signup-page)
  - [Login Page](#login-page)
  - [Listings Page](#listings-page)
  - [Listings Details Page](#listings-details-page)
  - [Listings Update Page](#listings-update-page)
  - [Live Demo on](#live-demo-on)
  - [Table of Content](#table-of-content)
  - [Description](#description)
  - [Features](#features)
    - [Requirements](#requirements)
    - [Installation Process](#installation-process)
    - [Live Link](#live-link)
    - [Technology  Used](#technology--used)
  - [Known Bugs](#known-bugs)
  - [Licence](#licence)
  - [Author's Details](#authors-details)

## Description

****
Makazi allows real estate agents to manage their listings. The agents can post, list, edit, and delete properties. Users can also access property information, browse through properties and make purchase of properties of their choice. Users can also make personal accounts to personalize their experiences.
****

[Go Back to the top](#Makazi)

## Features

As an Agent you should be able to:

1. `Register`  an agent account
2. `Upload` new listing
3. `Update` listings
4. `Delete` listings

As User you should be able to:

1. `Register`  a user account
2. `View`  listings
3. `View` agent profiles and contact information

[Go Back to the top](#Makazi)

### Requirements

- Access to  a computer, mobile phone or any other garget
- Internet access

### Installation Process

****

- Clone to this repo by running the command : `git clone https://github.com/hermitex/makazi.git`
- Unzip the downloaded files in a folder of choice.
- Open the folder with your favorite CLI tool.
- Run `npm install` on your terminal from inside the root folder of the project
- Run `node server.js` on your terminal from inside the root folder of the project to run the server
- The server should run on `http://localhost:3000` by default
- If the port is busy, kindly feel free to change the port inside the server.js file
- Once the server is up and running, visit the link  `http://localhost:3000` to access the application
- You can also check out the app's API at [Makazi API](https://github.com/hermitex/makazipopote-api)
  
 ****
[Go Back to the top](#Makazi)

### Live Link

- [Makazi popote live link](https://makaziproperties.herokuapp.com/)
  
****

### Technology  Used

- HTML -to develop the structure off the page

- CSS - to style the User Interface
- Java (Spring Boot) - To build a RESTful API
- ReactJS - Building component based UI
  

[Go Back to the top](#Makazi)

****

## Known Bugs

- N/A

****

## Licence

MIT License
Copyright (c) [2022] [Tiberius Mairura]
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

[Go Back to the top](#Makazi)
****

## Author's Details

Feel free to reach out via:

- StackOverflow Profile - [Tiberius Mairura](https://stackoverflow.com/users/11869442/tiberius)
- Linked - [Tiberius Mairura](https://www.linkedin.com/in/tiberius-mairura/)
- Dev.to - [Tiberius Mairura](https://dev.to/hermitex)

[Go Back to the top](#Makazi)
****
",1,1,1,2,real-estate,"[real-estate, real-estate-website]",0
block-foundation,solidity-self-owning-building,block-foundation,https://github.com/block-foundation/solidity-self-owning-building,https://api.github.com/repos/solidity-self-owning-building/block-foundation,Solidity Smart Contract: Self-Owning Building,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-self-owning-building/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-self-owning-building)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Self-Owning Building</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-self-owning-building/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-self-owning-building/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-self-owning-building/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-self-owning-building/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-self-owning-building/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

Blockchain Autonomous Building Management!

Welcome to our revolutionary project - an autonomous building management system built on the Blockchain. The project integrates a unique blend of real estate management and blockchain technology, creating an ecosystem where a building can effectively ""own"" itself. This concept is a stepping stone to decentralized autonomous organizations (DAOs) and a significant leap forward for blockchain applications in real estate.

Our autonomous building management system employs smart contracts to manage and oversee a building's fundamental operational aspects, including rent collection, maintenance costs, and ownership transfers. The smart contracts, which are blockchain's primary building blocks, are immutable, transparent, and verifiable pieces of code that automatically execute transactions when predefined conditions are met.

In the context of our project, these smart contracts come to life as entities managing a building. They collect rent from tenants, pay maintenance costs, and can even transfer ownership when the building is bought. We implement penalty mechanisms for late payments, ensuring all stakeholders are held accountable.

This system can have profound implications for reducing administrative overhead, increasing efficiency, and fostering a new level of transparency in the real estate sector.

Please note, this project showcases the potential of blockchain technology. As with any significant technology implementation, thorough testing is required before actual use. Blockchain and smart contract technology is complex, and mistakes can lead to severe consequences, including loss of funds. Always consult with experts when interacting with such systems.

## Quick Start

> Install

``` sh
npm i
```

> Compile

``` sh
npm run compile
```

## Contract

This is an example of a Solidity smart contract that represents a building that owns itself. This contract can be used to manage funds, pay for maintenance, collect rent, and sell ownership.

This contract should be deployed by sending a transaction with enough value to cover the initial price, rent, and maintenance costs. The contract includes a timestamp for the last rent payment and the last maintenance payment, and it checks that the payments are not overdue before transferring ownership or withdrawing funds. The contract also requires an extra fee for late payments.

It includes functionalities to:

- Introduce a mechanism to penalize or evict tenants if they do not pay rent.
- Prevent the building from falling into disrepair if the maintenance costs are not paid.
- Handle outstanding rent payments or maintenance costs before the building can be sold.

*Please note that this is still a simplified model, and real-world applications would require additional functionality and security measures. Also, the contract should be thoroughly tested before it's used in production. Always consult with a knowledgeable expert in blockchain and smart contract technology before deploying or interacting with smart contracts.*

## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |


---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, building, eth, ethereum, hardhat, real-estate, smart-contract, sol, solidity, typescript]",0
block-foundation,solidity-land-registry,block-foundation,https://github.com/block-foundation/solidity-land-registry,https://api.github.com/repos/solidity-land-registry/block-foundation,Solidity Smart Contract: Decentralized Land Registry,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-land-registry/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-land-registry)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Decentralized Land Registry</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-land-registry/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to Block Foundation's Decentralized Land Registry project as part of our Smart Contract Series. It leverages the full potential of smart contracts to deliver a secure and transparent system for land transactions.**

## Introduction

Land registries have long been known for their lack of transparency and the potential for fraud, with numerous cases of illegal land acquisition and property disputes marring their history [^1]. Our solution, a Decentralized Land Registry, built on the foundation of blockchain technology, addresses these issues by providing a public, transparent, and immutable record of land transactions.

With our smart contract for the land registry system, an owner can register their land, update the land details, and even transfer ownership in a seamless and secure manner. Not only does this bring about a new level of trust and reliability to land transactions, but it also significantly reduces the potential for fraudulent activities.

This smart contract for a land registry system in which land transactions are more transparent and trustworthy, and allows an owner to register their land, update the land details, and  transfer ownership in a secure way.

The primary functionalities include:

1. Registration: When a user first registers a parcel of land, they are recorded as the owner of that parcel in the global state of the smart contract.

2. Land Update: The owner can update the details of their registered land. Any updates are recorded in the global state, ensuring that a history of changes is kept.

3. Ownership Transfer: If the owner decides to transfer their land, the contract allows for a seamless and secure transfer of ownership.

## Quick Start

Before you dive in, make sure you have Node.js and npm installed. You can then proceed to install the necessary dependencies:

> Install

``` sh
npm i
```

> To compile the smart contract:

``` sh
npm run compile
```

## Contract

This is a simple implementation and can be expanded to include more complex features, like adding permissions to prevent unauthorized people from registering or transferring land.

### Class Overview

``` mermaid
classDiagram 

    class LandRegistry {
        -Land lands
        +registerLand(string, string, uint256)
        +transferLand(address, string)
        +sellLand(address, string)
        +verifyLand(string)
    }

    class Land {
        -address owner
        -string location
        -string parcelID
        -uint256 price
    }


    LandRegistry ""1"" -- ""*"" Land: has

    note for LandRegistry ""can register\ncan transfer\ncan sell\ncan verify""
    note for Land ""can be owned\nhas a location\nhas a name\nhas a price""


```

### Class Flow

``` mermaid
flowchart TD

    registerLand[""(mehod)
    registerLand""]:::class_dark
    transferLand[""(mehod)
    transferLand""]:::class_dark
    sellLand[""(mehod)
    sellLand""]:::class_dark

    LandRegistered[""(event)
    LandRegistered""]:::class_light
    LandTransferred[""(event)
    LandTransferred""]:::class_light

    lands[""(mapping)
    lands""]:::class_neutral
    ownerToLands[""(mapping)
    ownerToLands""]:::class_neutral

    verifyLand[""(mehod)
    verifyLand""]:::class_dark

    registerLand --> LandRegistered
    transferLand --> LandTransferred
    sellLand --> LandTransferred
    LandRegistered --> lands
    LandTransferred --> lands
    LandRegistered --> ownerToLands
    LandTransferred --> ownerToLands
    lands <--> verifyLand
    ownerToLands <--> verifyLand

    classDef class_light fill:#FFFFFF,color:#041B26,stroke:#041B26,stroke-width:2px;
    classDef class_neutral fill:#E1E4E5,color:#041B26,stroke:#041B26,stroke-width:2px;
    classDef class_dark fill:#041B26,color:#FFFFFF,stroke:#041B26,stroke-width:2px;

```

- `registerLand()` allows an address to register a new parcel of land with its location and a unique parcel ID. Emits a `LandRegistered` event when land is registered.
- `transferLand()` allows the current owner of a land parcel to transfer it to a new owner. Emits a `LandTransferred` event when land is transferred.
- `sellLand()` allows a landowner to sell their land to a buyer. This also involves the transfer of Ether (the currency on Ethereum) from the buyer to the seller, representing the payment for the land.
- `verifyLand()` allows anyone to verify the details of a land parcel.
- `listLandsByOwner()` allows for querying all land parcels owned by a specific `address`, making it easier to get an overview of one's properties

Moreover:

- `price` on the `Land struct` handles selling land parcels.
- `onlyLandOwner` modifier to ensures that only the owner of a land parcel can perform certain actions.

*There is also a [PyTeal version](https://github.com/block-foundation/teal-land-registry) of this smart-contract, which offers similar functionality for the Algorand blockchain.*

## Background

### Evolving Land Management Systems

As we move deeper into the 21st century, traditional methods of managing land registries have proven to be insufficient, vulnerable to fraud, and fraught with red tape. In response, our project introduces a pioneering vision for the future of land management ‚Äì the Decentralized Land Registry. By marrying the infallible security of blockchain with the expansive realm of property management, we're reshaping how property transactions are executed and recorded. This transformative project strives to make property transactions as seamless and as transparent as possible, thereby fortifying trust among parties involved.

### Incorporating Advanced Technologies

Our Decentralized Land Registry project employs advanced technologies, such as Ethereum's blockchain and Solidity, to craft a robust and secure framework for land transactions. The project is part of our Smart Contract Series that aims to demonstrate how blockchain can revolutionize various sectors and industries. The contract allows landowners to register land parcels, update details, and transfer ownership in a tamper-proof, transparent, and efficient manner.

### A Step towards Greater Transparency

Transparency is the cornerstone of any trusted system. Our project ensures complete transparency in land transactions, thereby minimizing disputes and fraudulent activities. By recording transactions on the blockchain, we provide a public and immutable ledger, thus instilling a greater level of confidence in the process. As a result, the Decentralized Land Registry is set to change the way we perceive land transactions, ushering in a new era of trust, transparency, and efficiency.

### Open Source and Community Oriented

As an open-source project, the Decentralized Land Registry encourages community participation and contribution. We believe that the combined efforts and creativity of the global developer community can accelerate the evolution of our project and bring innovative solutions to the fore. We warmly welcome developers worldwide to join our mission, contribute to our codebase, and help us build a more transparent, efficient, and secure system for land transactions.

## Development Resources

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Other Repositories

- https://github.com/vrii14/Land-Registration-with-Blockchain

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |

## Academic Resources

### Citation

> A sample citation (APA 6th edition) might look like:  

``` txt
van Vianen, L. B. (2023). solidity-land-registry (Version 0.0.1) [Computer software].
```

> BibTeX

``` bib
@misc{van_vianen_solidity-land-registry_2023,
	title = {solidity-land-registry},
	copyright = {CC-BY-SA-4.0},
	url = {https://github.com/block-foundation/solidity-land-registry},
	abstract = {Solidity Smart Contract: Decentralized Land Registry},
	urldate = {2023-07-25},
	author = {van Vianen, Lars Bastiaan},
	month = jul,
	year = {2023},
	note = {original-date: 2023-07-23T22:52:59Z},
}

```

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,1,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, eth, ethereum, hardhat, land, land-ownership, land-registration, land-registry, real-estate, smart-contracts, sol, solidity, typescript, urbanism]",0
dotnetbuilt,Bayt,,https://github.com/dotnetbuilt/Bayt,https://api.github.com/repos/Bayt/dotnetbuilt,"Marketplace Platform that helps users  purchase, sell and rent real estates ","# Bayt - Your Home Shopping Solution

Bayt is a comprehensive home shopping platform that offers an easy and convenient way to buy,sell,rent real estate.

## Features

- **Product Listings:** Browse a wide range of home-related products, from furniture to decor and appliances.
- **Seller Accounts:** Easily set up your seller account to start showcasing your products.
- **User Authentication:** Securely manage your account with user authentication.
- **Search Functionality:** Find products quickly and efficiently with our search feature.
- **Buying and Selling:** Seamlessly buy products you love or list your own for sale.
- **Messaging:** Communicate with buyers and sellers directly through the platform.
- **Payment Integration:** Secure payment processing for buying and selling transactions.

## Getting Started

To get started with Bayt, follow these simple steps:

1. **Clone the Repository:** `git clone https://github.com/nebula-inc/bayt.git`
2. Open folder then open solution file
3. Open NugetPackage Manager Console and write : `Update-Database`
4. Don't forget to set `Bayt.Api` as Startup project

## Contributing

We welcome contributions from the community to make Bayt even better. If you'd like to contribute, please follow our [contributing guidelines](CONTRIBUTING.md).

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Special thanks to our development team for their hard work and dedication to creating Bayt.
- We appreciate the open-source community for their valuable contributions and feedback.

Enjoy shopping, selling, and enhancing your home with Bayt! üè°üõãÔ∏èüåº
",1,1,0,0,real-estate,[real-estate],0
a7ul,VRDemo,,https://github.com/a7ul/VRDemo,https://api.github.com/repos/VRDemo/a7ul,Demo VR project in real estate context,"#VRDemo

Demo VR project in real estate context

Visit: 

http://atulr.com/VRDemo
",1,1,1,0,real-estate,"[experiment, real-estate, virtual-reality, vr, webvr]",0
TheDMSGroup,realtag,TheDMSGroup,https://github.com/TheDMSGroup/realtag,https://api.github.com/repos/realtag/TheDMSGroup,A PHP Client for the iLeads RealTag API,"![RealTag](https://i.imgur.com/0VCpK2F.png)

A PHP Client for the iLeads RealTag API ([Website](https://www.realtag.com/))

![Build Status](https://travis-ci.org/westonwatson/realtag.svg?branch=master)
![MIT License](https://img.shields.io/github/license/westonwatson/realtag.svg)
![Release](https://img.shields.io/github/release/westonwatson/realtag.svg)
![GitHub tag](https://img.shields.io/github/tag/westonwatson/realtag.svg)
![Download Count](https://img.shields.io/github/downloads/westonwatson/realtag/total.svg)
![GitHub contributors](https://img.shields.io/github/contributors/westonwatson/realtag.svg)
![GitHub issues](https://img.shields.io/github/issues/westonwatson/realtag.svg)

### Contributing

Please read the Contribution Guide [here](https://github.com/westonwatson/realtag/blob/master/CONTRIBUTING.md) if you wish to help out. All Pull requests require at least 1 approval from a Project Owner. Approvals from other developers will help get the attention of project owners. This is a great way to help promote important and beneficial changes sooner.

### Code of Conduct

Read our Code of Conduct [here](https://github.com/westonwatson/realtag/blob/master/CODE_OF_CONDUCT.md).

### Notes
* If you don't already use an autoloader and don't require the classes manually, the RealTag PHP Client will attempt to use Composer's Autoloader. So, if you're not using this library via Composer, make sure you include both the Client class and the Helper Class manually (`require`, `require_once`).
* You can request any attribute of the API response, realtag will lookup the requested property in all API Response Sections (ie- Property, EstimatedData, Forclosure, etc).
* The client library will trigger a PHP `E_USER_NOTICE` if something isn't configured correctly or an invalid property attribute is requested.
* The PHP RealTag Client defaults to Production Mode `$devMode == false`. Make sure to enable `$devMode` if you don't want to hit the production service.
* If you have any questions or comments, feel free to open a Github Issue, or submit a pull request with your proposed changes. Any/All Help is greatly appreciated! üòÉ 

### Available Attributes

##### Success
##### Error
##### Product
##### Version
##### LeadID
##### Requested

##### OriginalRequest (stdClass)
> ""FullName"",
""AddressLine1"",
""AddressLine2"",
""City"",
""State"",
""Zip"",
""ExternalID"",
>>##### AllFields (stdClass)
>> ""FullName"",
""AddressLine1"",
""City"",
""State"",
""Zip"",
""ExternalID"",
""AVM"",
""ConfidenceScore"",
""HighValue"",
""LowValue"",
""Value"",

##### Foreclosure (stdClass)
> ""NODorForeclosure"",
""DefaultAmount"",
""DefaultDate"",

##### Property (stdClass)
> ""IsHomeOwner"",
""OwnerName"",
""IsOwnerOccupied"",
""Address"",
""UnitNumber"",
""City"",
""State"",
""Zip"",
""APN"",
""County"",
""CensusTract"",
""FIPSCode"",
""FIPSCensusCombo"",
""PropertyUse"",
""LandUseDescription"",
""CountyUse"",
""StateLandUseDescription"",
""Bathrooms"",
""Bedrooms"",
""BasementSqFt"",
""Fireplaces"",
""CentralCooling"",
""ParkingType"",
""GarageSqFt"",
""GarageTotalCars"",
""LandValue"",
""LotAreaSqFt"",
""Pool"",
""TotalAssesedValueAmount"",
""RoofSurfaceDescription"",
""TotalLivingAreaSqFt"",
""GrossLivingAreaSqFt"",
""TotalAdjustmentLivingSqFt"",
""TotalRooms"",
""TotalStories"",
""YearBuilt"",
""Schooldistrict"",
""Realestatetotaltaxamount"",
""LastSaleDate"",
""LastSalePrice"",
""PricePerSquareFoot"",
""Improvementvalue"",
""Zoning"",
""Taxyear"",
""Totaltaxablevalueamount"",
""PhoneNumber"",
""MailingAddress"",
""MailingCity"",
""MailingState"",
""MailingPostalCode"",
""PlusFourPostalCode"",
""HouseNumber"",
""DirectionPrefix"",
""StreetName"",
""StreetSuffix"",
""DirectionSuffix"",
""ApartmentOrUnit"",
""SiteInfluenceDescription"",
""FloodZoneIdentifier"",
""RoofTypeDescription"",
""FoundationMaterialDescription"",
""ConditionsDescription"",
""ConstructionQualityTypeDescription"",
""OtherPropertyImprovementsDescription"",
""ExteriorWallsIdentifier"",
""ConstructionTypeDescription"",
""ImprovementValueAmount"",
""BasementType"",
""BasementDescription"",
""BasementFinishedAreaSqFt"",
""LenderName"",
""TitleCompanyName"",
""OpenLienAmount"",
""OpenLienCount"",
""LastLoanDate"",

##### Liens (array)

> ""TransactionNumber"",
""TransactionType"",
""SaleDocumentNumberIdentifier"",
""SaleDeedTypeDescription"",
""SaleDeedTypeDamarCode"",
""SaleRecordingDate"",
""SaleDate"",
""OneSaleTypeDescription"",
""SaleStampAmount"",
""SalesPriceAmount"",
""SaleSellerName"",
""SaleBuyerNames"",
""SaleTitleCompanyName"",
""SaleTransferDocumentNumberIdentifier"",
""SaleOwnerTransferIndicator"",
""CorporateBuyer"",
""Borrower1Names"",
""VestingDescription"",
""LastSaleIndicator"",
""MortgageAmount"",

##### EstimatedData (stdClass)
> ""MortgageTerm"",
""MortgageInterestRate"",
""MortgagePayment"",
""MortgageAgeInMonths"",
""MortgageBalance"",
""LTV"",
""Equity"",


### Example(s)

```
<?php

namespace Example\RealTagImplementation;

use westonwatson\realtag\RealTagHelper;

class RealTagUsage
{
    const MY_API_TOKEN = 'bqJNaoN98hNx/wDFDcZUEjkdsnKJN87Y8BBH8D8SKzoyQ5iCHyzg==';

    /**
     * @var bool
     */
    private $devMode = false;

    /**
     * @var RealTagHelper
     */
    private $realtag;

    /**
     * @var \stdClass
     */
    private $response;

    /**
     * RealTagUsage constructor.
     *
     * @param bool $devMode
     */
    public function __construct($devMode = false)
    {
        $this->realtag = new RealTagHelper(self::MY_API_TOKEN, $devMode);
    }

    public function getHomeEquityInfo()
    {
        $this->realtag->setProperty([
            ""FullName""     => ""Barack Obama"",
            ""AddressLine1"" => ""1600 Pennsylvania Ave., NW"",
            ""City""         => ""Washington"",
            ""State""        => ""DC"",
            ""Zip""          => ""20500"",
            ""ExternalID""   => ""change20500"",
        ]);
    }

    public function showRoomCount()
    {
        echo ""This property has {$this->realtag->Bedrooms} bedrooms and {$this->realtag->Bedrooms} bathrooms.\n"";
    }

    public function showMortgageTerm()
    {
        echo ""The owner of this property pays an estimated \${$this->realtag->MortgagePayment}, {$this->realtag->MortgageTerm} times a year.\n"";
    }
}

$realtagUsage = new RealTagUsage(true);
$realtagUsage->getHomeEquityInfo();
$realtagUsage->showMortgageTerm();
$realtagUsage->showRoomCount();
```

##### Contributors:
> [Weston Watson](http://github.com/westonwatson)
",1,1,3,0,real-estate,"[api, api-client, composer-package, mortgage, mortgage-disclosure, mortgages, php, phpunit, real-estate, travis-ci]",0
Drinkler,Real-Estate-Analysis,,https://github.com/Drinkler/Real-Estate-Analysis,https://api.github.com/repos/Real-Estate-Analysis/Drinkler,:house: Real Estate Analysis and Price Prediction based on fictitious data,"# Real-Estate-Analysis :house:

[![GitHub](https://img.shields.io/github/license/Drinkler/Real-Estate-Analysis)](https://github.com/Drinkler/Real-Estate-Analysis/blob/main/LICENSE)
[![GitHub issues](https://img.shields.io/github/issues/Drinkler/Real-Estate-Analysis)](https://github.com/Drinkler/Real-Estate-Analysis/issues)
[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)
[![Gitmoji](https://img.shields.io/badge/gitmoji-%20üòú%20üòç-FFDD67.svg?style=flat)](https://gitmoji.carloscuesta.me)

## About
This project emerged from the requirements of a study project. During the implementation we tried to use current best practices of software development and to get to know new ones.

Data analysis and price prediction based on fictitious data using different regression models.

# Installation
```
pip install -r requirements.txt
```

# Built with :hammer_and_wrench:

- [Pandas](https://pandas.pydata.org/) - Python Data Analysis Library
- [Colab](http://colab.research.google.com/) - Cloud based Jupyter Notebook 
- [Matplotlib](https://matplotlib.org/) - Visualization library for python
- [Seaborn](https://seaborn.pydata.org/) - Advanced visualization library based on Matplotlib
- [NumPy](https://numpy.org/) - Scientific computing in python
- [scikit-learn](https://scikit-learn.org/stable/) - Machine Learning in Python
- [skipy](https://www.scipy.org/) - Scientific computing
- [statsmodels](https://www.statsmodels.org/stable/index.html) - Statistical models, hypothesis tests, and data exploration

# Authors :busts_in_silhouette:

-   **Florian Drinkler** - Datascience Analysis - [Student @ DHBW Stuttgart](https://www.dhbw-stuttgart.de/home/)
-   **Luca Fischer** - Datascience Analysis - [Student @ DHBW Stuttgart](https://www.dhbw-stuttgart.de/home/)

# Copyright :copyright:

Copyright :copyright: 2020 Luca Fischer, Florian Drinkler

# License :page_facing_up:

This project is licensed under the **GNU General Public License v3.0** - see the [LICENSE.MD](https://github.com/Drinkler/Real-Estate-Analysis/blob/main/LICENSE) files for details",1,1,0,0,real-estate,"[colab-notebook, data-science, jupyter-notebook, machine-learning, python3, real-estate, regression, regression-analysis, regression-models, student-project]",0
marcolino,quiccasa,,https://github.com/marcolino/quiccasa,https://api.github.com/repos/quiccasa/marcolino,"A simple SPA to subscribe to quiccasa service, a slick interface to *Italian* real estate world (from ""Immobiliare.it"").","# quiccasa
",1,1,2,0,real-estate,"[real-estate, real-estate-agencies, real-estate-platform, realestate]",0
salmaayad0,RealState,,https://github.com/salmaayad0/RealState,https://api.github.com/repos/RealState/salmaayad0,React Responsive real estate website,"https://realstate-7r3.pages.dev/

![image](https://github.com/salmaayad0/RealState/assets/117774174/4d41f7d2-a7e6-4d2e-8a03-489db494bcf4)

",1,1,1,0,real-estate,"[reactjs, real-estate, responsive-web-design]",0
reaperdragon,estatio-app,,https://github.com/reaperdragon/estatio-app,https://api.github.com/repos/estatio-app/reaperdragon,"A real estate app called Estatio is created using the Rapid API, Next JS, and Chakra UI. With this, you can search or filter content according to your needs. Check out the relevant Properties Info. üè†","# Estatio 
A real estate app called Estatio is created using the Rapid API, Next JS, and Chakra UI. With this, you can search or filter content according to your needs. Check out the relevant Properties Info.

[Demo](https://estatio-app.vercel.app/)


## Getting Started

First, setup the .env file and get your api key from Rapid API:

```
RAPID_API_HOST=YOUR_API_KEY
RAPID_API_KEY=YOUR_API_KEY
```

Second, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

### Screenshots

> Dashboard

![Dashboard](https://user-images.githubusercontent.com/67114280/177991269-1482bd22-a502-49f1-8c94-fe8b6cd667c1.png)

> Search Or Filter

![Search Or Filter](https://user-images.githubusercontent.com/67114280/177991421-680fd81f-0124-462c-b5e4-92789331ca48.png)

> Buy 

![Buy](https://user-images.githubusercontent.com/67114280/177991494-3eff959b-018b-4691-8049-50cc03d46c29.png)





",1,1,1,0,real-estate,"[chakra-ui, nextjs, rapidapi, react-hooks, reactjs, real-estate]",0
wynander,spark,,https://github.com/wynander/spark,https://api.github.com/repos/spark/wynander,"Financial Modeling tool to plan real estate purchases, investments, and a retirement timeline. ","# spark
**spark** is a projected portfolio application that aims to help those interested in FI/RE (Financial independence, retire early). 

Default functionality includes the ability to predict portfolio value over time based on a few key variables such as net income, percentage of net income saved, and time horizon to retirement. Advanced functionality allows users to modify default assumptions on portfolio returns (10% for S&P500 average returns), yearly inflation (3% based on a conservative YoY inflation rate.), and yearly raise percentage (3% based on national averages). 

spark has the functionality to add and remove assets from your portfolio using simple variables that are standard to most asset investors; whether it is real estate, motor vehicles, or gold, spark can project the asset's performance over time and how it may influence the user's retirement plans. 

The frontend is developed using **React**, **Chart.js**, **Semantic UI**, along with some homemade CSS to tune things for the components not covered by SUI. Spark uses Firebase **Firestore** as its NoSQL database for storing user details, asset characteristics, and handling authentication/login. 

Future additions: 'how it works' explaining the method of projection, refactoring large functions -> smaller, maintainable functions
",1,1,1,0,real-estate,"[financial-analysis, modeling, portfolio, react, real-estate]",0
Heba-WebDev,Minimum-Living,,https://github.com/Heba-WebDev/Minimum-Living,https://api.github.com/repos/Minimum-Living/Heba-WebDev,"A web app for a real estate company built with React, React Router, Framer motion and TailwindCSS","# Minimum Living Cost

An application to show rental real estates in UAE [LIVE DEMO](https://incandescent-profiterole-345c12.netlify.app).

![Design preview for the Minimum-Living-Cost application](https://github.com/Heba-WebDev/Minimum-Living/blob/main/public/preview.png?raw=true)

## Langauges and technologies

This application was built with React Js, React router, Framer Motion and Tailwind CSS. Other libraries used: React icons.  Warrning: the data that is shown is a dummy data.

## Application Features 

- User can search for a rental property based on the type of the property (apartment, villa, penthouse etc) and based on the city as well.
- User can view all the properties regadless of the location and type.
- User can add an owned property after filling a form and uploading pictures of said property.

## Functionalities implmented 

- Drag and drop with the HTML drag and drop API 
- After droping or uploading an image, a preview of the image is shown
- After droping an image, said image can be deleted before submting the form (add property form)
- Pagination in the page that shows all the properties 



",1,1,1,0,real-estate,"[framer-motion, netlify, react, reactrouter, real-estate, tailwindcss]",0
ubeevn,Real-Estate-HTML5-Template,ubeevn,https://github.com/ubeevn/Real-Estate-HTML5-Template,https://api.github.com/repos/Real-Estate-HTML5-Template/ubeevn,,,1,1,2,0,real-estate,"[bootstrap4, furniture, html, real-estate]",0
Novik-data-analyst,Data-Analyst-career-portfolio-projects,,https://github.com/Novik-data-analyst/Data-Analyst-career-portfolio-projects,https://api.github.com/repos/Data-Analyst-career-portfolio-projects/Novik-data-analyst,Practical projects showing my capabilities. ,"# Data Analyst career portfolio projects

Practical experience in various spheres such as finance, marketing, product analysis.
Graduation diploma : [link](https://www.dropbox.com/s/u91j52qh0w1l5ll/Diploma%20number.pdf?dl=0) 

## Project summary

This projects were complited during Data Analyst internship at Practicum. 
Please reach out to me at aleknv@gmail.com if you have and questions or open job opportunities. 

| Project name | Description | Anaysis area | Used skills | 
| :---------------------- | :---------------------- | :---------------------- |:---------------------- |
| [Client reliability research](https://github.com/Aleknv/yandex-praktikum-projects/tree/main/Credit%20Scoring ) | Based on clients payment history, detetmine, whether martial status and number of kids affect on-time loan payoff.  | Banking, finance | *pandas* , *PyMystem3* , *python*, *lemmatization* , *ETL* |
|[Researching apartment listings](https://github.com/Novik-data-analyst/Data-Analyst-career-portfolio-projects/tree/main/Real%20estate%20Market%20and%20Fraud%20analysis) | From the dataset of archived ads for the sale of apartments in St. Petersburg and nearby area, we need to determine the market value of real estate properties. | Real estate, fraud analysis | *Matplotlib* , *Pandas* , *python* , *Data Visualization* , *Exploratory Data Analysis* , *Data Preprocessing* |
|[Determine promising tariff for telecom company](https://github.com/Novik-data-analyst/Data-Analyst-career-portfolio-projects/tree/main/Telecom%20analysis) | Analyze customer data for Megaline's ""Smart"" and ""Ultra"" tariffs from 500 customers to determine the more profitable plan, guiding marketing and pricing strategies. | Telecom | *pandas* , *python*, *ETL* , *Matplotlib* , *NumPy* , *SciPy* , *Descriptive Statistics* , *Statistical Hypothesis Testing* |
",1,1,1,0,real-estate,"[banking, fitness, real-estate, retail, telecom]",0
booleanbites,houzi-rest-api,,https://github.com/booleanbites/houzi-rest-api,https://api.github.com/repos/houzi-rest-api/booleanbites,Enhanced Rest Api for Houzi mobile app.,"
![Houzi Real Estate App for Houzez](images/banner.jpg)

This is rest api plugin for for Houzi Flutter App.

Houzi a real estate mobile application that connects with Houzez Wordpress theme. Its build with Flutter so it can be deployed to Android and iOS.

Visit website here: https://houzi.booleanbites.com


Read documentation about Houzi here:

### [Tools](https://houzi-docs.booleanbites.com/tools/xcode_setup)

This section addresses all the tools and other environment configurations you need to do get the development started.

#### [App Setup](https://houzi-docs.booleanbites.com/app-setup/change_url)

This section guides through all the steps related to app setup and customization.

#### [Houzi Config Builder](https://houzi-docs.booleanbites.com/houzi-config-builder/introduction)

This section talks about designing and generating configuration with Houzi Builder, that can be used in the app.

### Try the demo app here:

 [![Houzi real estate app for Houzez](images/apple_store.png)](https://apps.apple.com/us/app/id1598357211)  [![Houzi real estate app for Houzez](images/google_play.png)](https://play.google.com/store/apps/details?id=com.booleanbites.houzez)
",1,1,3,0,real-estate,"[android, flutter, houzez, ios, real-estate]",0
nimeshnischal,real_estate_ms,,https://github.com/nimeshnischal/real_estate_ms,https://api.github.com/repos/real_estate_ms/nimeshnischal,A backend service prototype for managing real estate properties and requirements,"# Real Estate Management System

A backend service prototype for managing real estate properties and requirements

## Features
#### Property
* ##### Upload 
    ###### Request:
    Clients can upload their property using the api:
    ```
    [POST] http://localhost:9090/property/    
    ``` 
    With request body (all fields mandatory):
    ```
    {
    	""name"": <String>,
    	""latitude"": <Float>,
    	""longitude"": <Float>,
    	""price"": <Float>,
    	""bedroom_count"": <Float>,   // to support 2.5, 3.5 BHKs (Weird, right?)
    	""bathroom_count"": <Integer>
    }
    ```
    ###### Validations:
    * Basic validations on each field
    * Bedroom count can only be multiples of 0.5, i.e., 1, 2, 2.5, 3.5, etc. 
    * An already existing property cannot be uploaded again.  
    If done so, an error message with existing properties' id is given as response.
    
    ###### Response:
    ```
    201
    {
        ""property_id"": <Integer>,
        ""requirements"": [
            {
                ""id"": <Integer>,
                ""latitude"": <Float>,
                ""longitude"": <Float>,
                ""min_budget"": <Float>,
                ""max_budget"": <Float>,
                ""min_bedrooms"": <Float>,
                ""max_bedrooms"": <Float>,
                ""min_bathrooms"": <Integer>,
                ""max_bathrooms"": <Integer>
            }, ...
        ],
        ""offset"": <Integer>,
        ""total_count"": <Integer>
    }
    ```
    ###### Note:
    In the response, 'requirements' are paginated. Max 10 requirements can be served.  
    Property's matching requirements search api can be used to fetch the next set of requirements.
    
* ##### Search matching requirements
    ###### Request:
    Clients can search matching requirements for their uploaded property using the api and uploaded property's id:
    ```
    [GET] http://localhost:9090/property/<property_id>/requirements?offset=<Integer>&page_size=<Integer>
    ``` 
    Default offset: 0 and default page size: 10
    ###### Response:
        ```
        200
        {
            ""requirements"": [
                {
                    ""id"": <Integer>,
                    ""latitude"": <Float>,
                    ""longitude"": <Float>,
                    ""min_budget"": <Float>,
                    ""max_budget"": <Float>,
                    ""min_bedrooms"": <Float>,
                    ""max_bedrooms"": <Float>,
                    ""min_bathrooms"": <Integer>,
                    ""max_bathrooms"": <Integer>
                }, ...
            ],
            ""offset"": <Integer>,
            ""page_size"": <Integer>,
            ""total_count"": <Integer>
        }
        ```

#### Requirement 
* ##### Upload    
    ###### Request:
    Clients can upload their requirement using the api:
    ```
    [POST] http://localhost:9090/requirement/    
    ``` 
    With request body (all fields mandatory):
    ```
    {
    	""latitude"": <Float>,
    	""longitude"": <Float>,
    	""min_budget"": <Float>,
    	""max_budget"": <Float>,
    	""min_bedrooms"": <Float>,
    	""max_bedrooms"": <Float>,
    	""min_bathrooms"": <Integer>,
    	""max_bathrooms"": <Integer>
    }
    ```
    ###### Validations:
    * Basic validations on each field
    * Min & max bedrooms can only be multiples of 0.5, i.e., 1, 2, 2.5, 3.5, etc.
    * Any one of min/max values is mandatory, i.e., client can send either min budget or max budget, or both
    
    ###### Response:
    ```
    201
    {
        ""requirement_id"": <Integer>,
        ""properties"": [
            {
                ""id"": <Integer>,
                ""name"": <String>,
                ""latitude"": <Float>,
                ""longitude"": <Float>,
                ""price"": <Float>,
                ""bedroom_count"": <Float>,
                ""bathroom_count"": <Integer>
            }, ...
        ],
        ""offset"": <Integer>,
        ""page_size"": <Integer>,
        ""total_count"": <Integer>
    }
    ```
    ###### Note:
    In the response, 'properties' are paginated. By default, 10 properties can be served.  
    Requirement's matching properties search api can be used to fetch the next set of properties.
* ##### Search matching properties
    ###### Request:
    Clients can search matching properties for their uploaded requirement using the api and uploaded requirement's id:
    ```
    [GET] http://localhost:9090/requirement/<requirement_id>/properties?offset=<Integer>&page_size=<Integer>
    ``` 
    Default offset: 0 and default page size: 10
    ###### Response:
        ```
        200
        {
            ""properties"": [
                {
                    ""id"": <Integer>,
                    ""name"": <String>,
                    ""latitude"": <Float>,
                    ""longitude"": <Float>,
                    ""price"": <Float>,
                    ""bedroom_count"": <Float>,
                    ""bathroom_count"": <Integer>
                }, ...
            ],
            ""offset"": <Integer>,
            ""page_size"": <Integer>,
            ""total_count"": <Integer>
        }
        ```
        
## Matching Rules
Out of 100% match, the division of weightage is as follows:
* distance: 30%
* budget: 30%
* bedroom: 20%
* bathroom: 20%

A successful match is one which has a total match of more than 40%

Requirements for distance match:
* distance should me within 10 miles
* distance < 2 miles, match: full 30%
* 2 miles < distance < 4 miles, distance match: 24%
* 4 miles < distance < 6 miles, distance match: 18%
* 6 miles < distance < 8 miles, distance match: 12%
* 8 miles < distance < 10 miles, distance match: 6%

Requirements for budget match:
* if only one of min or max is provided, min budget = 0.9 * budget and max budget = 1.1 * budget
* if both min and max both are provided
    * min budget < property price < max budget, budget match: full 30%
    * approx. min budget * 0.94 < property price < max budget * 1.06, budget match: 24%  
    * approx. min budget * 0.88 < property price < max budget * 1.12, budget match: 18%  
    * approx. min budget * 0.81 < property price < max budget * 1.19, budget match: 12%  
    * approx. min budget * 0.75 < property price < max budget * 1.25, budget match: 6%  
    * else, budget match: 0%

Requirements for bedroom/bathroom match:
* if only one of min or max is provided, min number of bathroom/bedroom = max number of bathroom/bedroom
* if min and max both are provided
    * min < property bedroom/bathroom count < max, bedroom/bathroom match: full 20%
    * min - 1 < property bedroom/bathroom count < max + 1, bedroom/bathroom match: 13.33%  
    * min - 2 < property bedroom/bathroom count < max + 2, bedroom/bathroom match: 6.67%  
    * else, bedroom/bathroom match: 0%
 


## Built with
* Spring Boot
* MySQL

## Note
This is a prototype. Upgrades needed:
* Use MySQL's spatial extensions to store laitude & longitude and to calculate distances.  

Suggestions and tips will be highly appreciated.
",1,1,2,0,real-estate,"[java, mysql, real-estate, spring-boot]",0
SirTingling,Trillo,,https://github.com/SirTingling/Trillo,https://api.github.com/repos/Trillo/SirTingling,"Trillo, your all in one booking app (design interface only)","# Trillo
### Trillo, your all in one booking app (design interface only)

![trillo post](https://user-images.githubusercontent.com/67347117/89110207-06fb8900-d40e-11ea-9bf0-a9526f62eb60.jpg)






These are the starter files and stepped solutions to accompany Trillo project. Trillo is made for booking
hotel, resorts, spa etc.




# Pull Requests
If you found a different / better way to solve problems in the application, great! Let me know what you have in mind.

Enjoy!
",1,1,0,10,real-estate,"[banking-applications, hotels, real-estate]",0
tuw-eeg,real-estate-scrapers,tuw-eeg,https://github.com/tuw-eeg/real-estate-scrapers,https://api.github.com/repos/real-estate-scrapers/tuw-eeg,"An extensible Scrapy project collecting Real Estate data from the web, piping it into a Postgresql database","# Real Estate Data Scraper Python Package

This Python package serves to collect real estate data from the web. It takes advantage of [Scrapy](https://scrapy.org/)
to scrape data from the web, in combination with [web-poet](https://web-poet.readthedocs.io/en/stable/)
and [scrapy-poet](https://scrapy-poet.readthedocs.io/en/stable/) to decouple the scraping logic (the HTML structure of
different real estate websites) abd the spider logic (the logic to collect the data).

## Docker Setup

Configure the environment variables to be used by the Docker services:

```shell
cp .env.example .env
```

You can either continue with the default variable values, or modify them to your liking.

Build the images using `docker-compose`:

```shell
docker-compose build
```

Start the services:

```shell
docker-compose up db -d && docker-compose run --rm scraper bash
```

A Bash session inside the container will be opened, in which you can interact with the `scrapy` project. For example, to
start the scraper on all support websites, you can execute the following command:

```shell
scrapy crawl real_estate_spider
```

## Local Development Setup

### Installation

This project uses [Poetry](https://python-poetry.org/) to manage Python packaging and dependencies. To install `poetry`
itself, please refer to the [official docs](https://python-poetry.org/docs/#installation).

Kindly install the dependencies using the following command:

```shell
$ poetry install
```

### Configuration

In order to persist the scraped items into a PostgreSQL database, please create `src/db.cfg` with the following
contents:

```ini
[connection]
database =
host =
port =

[credentials]
user =
password =
```

If you decide not to use the PostgreSQL pipeline, kindly edit `src/real_estate_scrapers/settings.py` accordingly:

```python
# src/real_estate_scrapers/settings.py
ITEM_PIPELINES = {
    # ""real_estate_scrapers.pipelines.PostgresPipeline"": 300,
}
```

### Usage

As this package is a valid Scrapy project at its core, you can use it as you would use any other Scrapy project.

For the concrete use-case of our organization, we use the following command to run the project:

```shell
make run
```

This will run the project locally, and will persist the scraped items into the configured PostgreSQL database.

## Supported Real Estate Websites

The currently supported real estate websites are:

- https://www.immowelt.at/

### Adding support for a new website

Thanks to `web-poet` and `scrapy-poet`, it is possible to add support for a new website with minimal effort. One needs
to create a new `.py` file in the `src/real_estate_scrapers/concrete_items` directory, and implement
the `RealEstateListPage` and `RealEstatePage` classes. That's it! The registration of the implementation to the spider
is done auto-magically.

### Crawling items only from a specific website

In order to avoid re-running the crawling for every single supported website, one can pass the `-a only_domain=<domain>`
argument to the spider. For example, if one wants to crawl items only from the `immowelt.at` website, then the command
to be executed from the `src` directory is:

```shell
scrapy crawl real_estate_spider -a only_domain=immowelt.at
```
",1,1,1,0,real-estate,"[poetry-python, postgresql, real-estate, scrapy, scrapy-crawler, scrapy-poet, scrapy-spider, web-poet]",0
bhojpur,pms,bhojpur,https://github.com/bhojpur/pms,https://api.github.com/repos/pms/bhojpur,The Bhojpur PMS is a property management system based on the Bhojpur.NET Platform for application delivery.,"# Bhojpur PMS - Property Management System

The `Bhojpur PMS` is a comprehensive *property management* system applied within
the [Bhojpur.NET Platform](https://github.com/bhojpur/platform/) ecosystem for
delivery of distributed `applications` or `services`. It is based on a scalable,
micro-services architecture.

## Key Features

- Launch a *web portal* or *marketplace8 for Realtor's (e.g. Builder, Broker)
- Provides virtual tour of listed properties to propspective clients
- Booking Management of Properties (e.g. Studio, Apartment, Office, Store)
- Ability to manage construction Projects, Financial, and Resources
- IoT/M2M enabled Building Automation and Remote Management solution
- Document Assembly for  legal agreements, leases, contracts, etc
- Store information of rented Properties and the Tenants in one place
- Create and modify rent leases from document templates
- Follow the rent payments and manage the rent overdues
- Create custom documents to communicate with Tenants
- Manage real estate business with several collaborators and in different organizations

## Simple Usage

### Rental Management

You need to have `Bhojpur PMS` command line interface tool (i.e. [pmsutl](./bin/pmsutl))
installed on the target system. After that, you can run the server using following command.

```bash
pmsutl start
```

then, open `http://localhost:8080/app` in a web-browser to access frontend application.
It runs different services as a collection of `Containers` in your cluster. To stop the
Bhojpur PMS rental server instance, type the following

```bash
pmsutl stop
```

### Project Management

To start the `Bhojpur PMS` - *Project Office* frontend web application, issue the
following commands in a new Terminal window.

```bash
cd pkg/project
yarn start
```

The project server requires access to MySQL database instance. After project server has
started succeffully, you can issue the following command.

```bash
cd pkg/builder
yarn start
```

then, open `http://localhost:8081/` URL in your web-browser to access application.

## Pre-requisites

You must have the following software installed on the target computer.

- [Docker](https://www.docker.com/) container engine
- [Docker Compose](https://docs.docker.com/compose/install/) for building images
- [Node.js](https://nodejs.org/) runtime engine
- [Yarn](https://yarnpkg.com/) package manager
- [MySQL](https://www.mysql.com/) database
- [MongoDB](https://www.mongodb.com/) NoSQL database engine
- [Redis](https://redis.io/) *in-memory* data caching engine
- [Express](https://expressjs.com/) web application framework
- [NGINX](https://www.nginx.com/) proxy server

Also, please install the `pkg` tool globally using the following command.

```bash
npm install -g pkg
```

### Database Configuration

You need to create a database (namely `bhojpur`) in your MySQL server instance. Type
the following commands to create the database and grant required level of access.

```bash
mysql -u root -p
mysql> create database bhojpur;
mysql> grant all on bhojpur.* to 'root'@'localhost';
mysql> exit;
```

## Build Source Code

You can issue the following commands in a new Terminal window to install the
`Yarn` package manager and `Node.js` package dependencies.

```bash
ncu -u
yarn install
task install-packages
```

### Command Line Interface

Simply issue the following commands (e.g., `task build-tools`) in a new Terminal
window to creates [pmsutl](./bin/pmsutl) command line interface utility for your
operating system.

```bash
cd cmd/tools && npm i
pkg cmd/tools/package.json --output bin/pmsutl
mv bin/pmsutl-macos bin/pmsutl
mv bin/pmsutl-win.exe bin/pmsutl.exe
```

### Microservices Container

All the container images could be built automatically by [pmsutl](./bin/pmsutl)
tool using following command.

```bash
pmsutl build
```
",1,1,1,0,real-estate,"[mongodb, nodejs, property-management, real-estate]",0
leonjovanovic,ml-real-estate,,https://github.com/leonjovanovic/ml-real-estate,https://api.github.com/repos/ml-real-estate/leonjovanovic,Python application of machine learning algorithms in real estate price prediction.,"# Machine learning application in predicting prices of real estate

## Summary
&nbsp;&nbsp;&nbsp;&nbsp;The goal of this project is to predict prices of real estates for sale in Belgrade, Serbia. Learning process was done by [linear regression](https://en.wikipedia.org/wiki/Linear_regression) and [kNN](https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm) algorithms.
  * First, it was necessary to create web crawler which will scrape real estates from various websites. 
  * Secondly, we needed to write a Python scripts to preprocess data. 
  * Thirdly, we used MySQL and Python scripts to generate queries and plots. 
  * Finally, we used Python to create linear regression and kNN and generate prediction.

## Web crawler & scraper
&nbsp;&nbsp;&nbsp;&nbsp;The data was scrapped from two websites ([4zida.rs](https://www.4zida.rs/) and [nekretnine.rs](https://www.nekretnine.rs/)) using [Scrapy framework](https://scrapy.org/) written in Python. Data, which was scrapped, has a total of **over 100,000 different real estates** over whole country. For each real eastate following features were scraped: price, type, city, address, square footage, year built, land area (for houses), floor, registration, heating type, number of rooms, number of bathrooms, parking, elevator, terrace. Since each real estate ad is manually added by user, many features were often missing. Output for each website was [json file](https://en.wikipedia.org/wiki/JSON) where each element had one real estate and its features.

## Preprocessing data
&nbsp;&nbsp;&nbsp;&nbsp;First step in preprocessing data was merging all data we got from different website into single json file. After that it was necessary to convert all characters and strings to integers or floats. Some ads were written in cyrillic and they had to be converted to latin. There were 5 special cases where user wrongly inserted information that was hard coded. Numerous real estates were deleted because of feature value error (very low/high price, very high number of rooms etc.).
Goal of this project is to predict prices of flats for sale in Belgrade, therefore separate json was created with real estates belonging to that category.

---
Address was separately converted to number because of its complexity. Because location is often key factor in predicting price of real estate, [Google Maps API](https://cloud.google.com/maps-platform/maps) was used to convert addresses to coordinates. After that [Geopy library](https://geopy.readthedocs.io/en/stable/) was used to calculate distance between [center of Belgrade](https://www.google.com/maps/place/%D0%A2%D0%B5%D1%80%D0%B0%D0%B7%D0%B8%D1%98%D1%81%D0%BA%D0%B0+%D1%87%D0%B5%D1%81%D0%BC%D0%B0/@44.8133536,20.4593651,18z/data=!4m13!1m7!3m6!1s0x0:0x0!2zNDTCsDQ4JzQ3LjkiTiAyMMKwMjcnMzEuMiJF!3b1!8m2!3d44.8132984!4d20.4586731!3m4!1s0x475a7b05667b6193:0x4a1ff6d1eae390cd!8m2!3d44.8132192!4d20.4604688) and given coordinate.

## Visualization
&nbsp;&nbsp;&nbsp;&nbsp;To get more general sense of real estates, six graphs were created.
- Top 10 most popular districts in Belgrade by number of avaliable real estates

![Plot1](visualisation/a/izgradjene_nekretnine.png)

- [Flats by number of square footage](visualisation/b/stanovi_po_kvadraturi.png)
- [Real estates by year of construction](visualisation/c/izgradjene_nekretnine.png)
- [For sale/rent by city](visualisation/d/prodaja_iznajmljivanje.png)
- [Price of real estates divided in six groups](visualisation/e/cene_po_opsegu.png)
- [Real estate with/without parking in Belgrade](visualisation/f/izgradjene_nekretnine.png)

## Linear regression
&nbsp;&nbsp;&nbsp;&nbsp; Since not every real estate has every feature, we had to remove some features that had very high amount of real estates ad with empty field. Remaining features which were chosen for linear regression features were **address, square footage, floor, number of rooms, parking, elevator and terrace**. Before learning data had to be normalized and shuffled. Learning was done by **nested 10-fold cross validation** with train and dev set so we can find best hyperparameters. There are two hyperparameters: **learning rate** and **mini-batch size**.

---

After finding best hyperparameters, **10-fold cross validation** was done on test and train (now train set is equal to train and dev set from previous step) set. This was first time evaluation is done on test set. Performanse was calculated with [average root mean squared error](https://en.wikipedia.org/wiki/Root-mean-square_deviation) and [average mean absolute error](https://en.wikipedia.org/wiki/Mean_absolute_error). Next step was training linear regression on whole data using chosen hyperparameters to get best parameters which were exported to [JSON file](\linear_regression\model_parameters.json) for future use.

## kNN
&nbsp;&nbsp;&nbsp;&nbsp;Since kNN is lazy learner, it does not have learning part but there was normalization as hyperparameter to find out does normalization helps in this case or not. K can be manually imputed or automatically calculated as square root of number of real estates. Distance from imputed real estate was calculated with two different methods. First was [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance), where distance between two points is calculated using the [Pythagorean theorem](https://en.wikipedia.org/wiki/Pythagorean_theorem). Second method was [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry) where distance between two points is the sum of the absolute differences of their [Cartesian coordinates](https://en.wikipedia.org/wiki/Cartesian_coordinate_system). kNN does not have any parameters but for algorithm to predicts it needs to run throughout every real estate in data each time.

## Results
&nbsp;&nbsp;&nbsp;&nbsp; Output of each algorithm should be number from range from 0 to 4, where 0 represents price of real estate is under 50,000e, 1 is price between 50 and 100,000e and 4 is over 200,000e. At the evaluation linear regression sees test data for the first time and evaluates its parameters on that data. kNN on other hand just compares each real estate with rest of the data.

- ***Linear regression achieved ~67% accuracy***
- ***kNN achieved 64% without normalization*** and 60% with normalization

## Future improvements
&nbsp;&nbsp;&nbsp;&nbsp;Both linear regression and kNN proved not so efficient against complex problem, which means we should use algorithms that are more suited for solving very complex problems like [polynomial regression](https://en.wikipedia.org/wiki/Polynomial_regression), [SVM](https://en.wikipedia.org/wiki/Support-vector_machine), [neural networks](https://en.wikipedia.org/wiki/Artificial_neural_network) or [deep learning](https://en.wikipedia.org/wiki/Deep_learning).
",1,1,2,0,real-estate,"[knn, linear-regression, machine-learning, python, real-estate]",0
FredericGodest,Immo-insights,,https://github.com/FredericGodest/Immo-insights,https://api.github.com/repos/Immo-insights/FredericGodest,Insights sur l'immobilier dans Rouen.,"# Documentation #

Bienvenue dans Immo Insight Rouen !

Dans cette documentation je vais vous expliquer le fonctionnement de chaque outils en allant jusqu'aux d√©monstrationx math√©matiques.

Le projet se d√©compose en 3 outils :

1. **Global Insights** qui vous donnera des donn√©es globales sur la ville de Rouen et ses quartiers.

2. **Simulateur** qui vous donnera des donn√©es plus local en fonction du quartier et qui estimera le loyer en fonction du quartier et de la surface.

3. **Rapport** qui vous permettra d'aller dans le d√©tail du calcul de rentabilit√© afin de consolider votre projet immo.


L'ensemble de ces fonctions sont d√©taill√©es dans la documentation disponible ici : https://immo-insight.herokuapp.com/",1,1,1,0,real-estate,"[data-analysis, data-science, data-visualization, investment, machine-learning, python, real-estate, streamlit]",0
xXxF0RR35TC4MPxXx,RealEstateSalesPortal_EngineeringThesis,,https://github.com/xXxF0RR35TC4MPxXx/RealEstateSalesPortal_EngineeringThesis,https://api.github.com/repos/RealEstateSalesPortal_EngineeringThesis/xXxF0RR35TC4MPxXx,"A real estate sales portal with agency support. This web application was written as part of my engineering thesis for university. It was written using .NET 6.0, Blazor WebAssembly, MSSQL Server and many additional libraries such as SwaggerUI, Radzen.Blazor, MatBlazor and more. The credentials for the email account are missing (in EmailService.cs)",,1,1,1,0,real-estate,"[blazor-webassembly, dotnet, real-estate]",0
Odiambo,html-Mustawa,,https://github.com/Odiambo/html-Mustawa,https://api.github.com/repos/html-Mustawa/Odiambo,Beta Mustawa in pre-Dev mode,"# Mustawa-Dev
Beta Mustawa in code mode
This project is an outfacing dev experiment for projects built from scratch.
",1,1,1,0,real-estate,"[estate-data-anlaysis, investing, mobility, real-estate, upward]",0
infinit3labs,property_data_extractor,,https://github.com/infinit3labs/property_data_extractor,https://api.github.com/repos/property_data_extractor/infinit3labs,Extract past sales data for properties in a given suburb from Allhomes website.,"These modules are developed for adhoc property research.  It explores historical sales data for properties
in a given suburb.  The data is saved in a format ready for analysis.  There is no provision for finding
new data over a time period, but it would be a useful feature.

Data is only retained for properties that have historical sales.  It does not extract data on all listings.

Unfortunately there is no API on Allhomes so these scripts are fragile to any CSS changes.  Thankfully they
have used some unique class codes which helps to target specific data on the page.

This does generate a reasonable amount of site traffic but there is no parallel processing which should make
the crawler more palatable to the IT team.  Nevertheless, best to run late at night in off-peak times.

This is a private project.  I have no association with Allhomes and it is not intended for commercial use.
",1,1,1,0,real-estate,"[property, python, real-estate]",0
infinit3labs,property_database,,https://github.com/infinit3labs/property_database,https://api.github.com/repos/property_database/infinit3labs,Personal project to scrape property data and save to a database with track changes over time.,"## Allhomes Property Database

This is a learning project to extract property data from Allhomes listing pages based on a pre-defined query and then save it to an SQL Server database.

The code tracks changes so that every time the script is run old rows are expired and new details added.

Future work:
* adding average transit times from Canberra Civic to the property by public transport and car
* improve formatting of email
* include database DDL to re-create
* add modules to check other property sites and save to database
",1,1,1,0,real-estate,"[property, python, real-estate, sql-server]",0
CyrilConter,paris-real-estate-sales-ml,,https://github.com/CyrilConter/paris-real-estate-sales-ml,https://api.github.com/repos/paris-real-estate-sales-ml/CyrilConter,"Build a real estate price prediction, focused on Paris, based on open data.","![](assets/paris.jpg)
# Paris - Real estates price prediction

## Project
Build a price prediction model focused a real estates sold at [Paris](https://www.paris.fr/) (France), using open data.

The project is divided in two sub-projects:
* [Step 1](01_BuildModel): Build a price prediction model for real estates sold at Paris.
* [Step 2](): Create an API or web app to infer the model produced.

<!-- ## Lessons learned -->



## Credits
Image by <a href=""https://pixabay.com/fr/users/edmondlafoto-7913128/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3296269"">edmondlafoto</a> from <a href=""https://pixabay.com/fr/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3296269"">Pixabay</a>

Data used from [Open platform for French public data](https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres/)
",1,1,1,0,real-estate,"[data-analysis, machine-learning, notebook, paris, python, real-estate]",0
shakti1590,real-estate-website,,https://github.com/shakti1590/real-estate-website,https://api.github.com/repos/real-estate-website/shakti1590,"This is real estate website , this website for sell , buy & loan.","# real-estate website
 
",1,1,1,0,real-estate,"[bootstrap, css, html, javascript, real-estate, website]",0
AniMilina,Research-for-the-Yandex-Real-Estate-service,,https://github.com/AniMilina/Research-for-the-Yandex-Real-Estate-service,https://api.github.com/repos/Research-for-the-Yandex-Real-Estate-service/AniMilina,,"# Research-for-the-Yandex-Real-Estate-service

–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

–í –Ω–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å ‚Äî –∞—Ä—Ö–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–µ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö.
–ù–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑—É—á–∏—Ç—å –∏—Ö, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
–û –∫–∞–∂–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤ –±–∞–∑–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –¥–≤–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –∫ –ø–µ—Ä–≤–æ–º—É —Ç–∏–ø—É –æ—Ç–Ω–æ—Å—è—Ç—Å—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã, –µ—ë —ç—Ç–∞–∂ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–∫–æ–Ω–æ–≤, –∫–æ –≤—Ç–æ—Ä–æ–º—É ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞, –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–∞—Ä–∫–∞.

–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

airports_nearest ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–º)  
balcony ‚Äî —á–∏—Å–ª–æ –±–∞–ª–∫–æ–Ω–æ–≤  
ceiling_height ‚Äî –≤—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)  
cityCenters_nearest ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–º)  
days_exposition ‚Äî —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—ã–ª–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–æ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ —Å–Ω—è—Ç–∏—è)  
first_day_exposition ‚Äî –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏  
floor ‚Äî —ç—Ç–∞–∂  
floors_total ‚Äî –≤—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ  
is_apartment ‚Äî –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã (–±—É–ª–µ–≤ —Ç–∏–ø)  
kitchen_area ‚Äî –ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–º¬≤)  
last_price ‚Äî —Ü–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–Ω—è—Ç–∏—è —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏  
living_area ‚Äî –∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–º¬≤)  
locality_name ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞  
open_plan ‚Äî —Å–≤–æ–±–æ–¥–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ (–±—É–ª–µ–≤ —Ç–∏–ø)  
parks_around3000 ‚Äî —á–∏—Å–ª–æ –ø–∞—Ä–∫–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 3 –∫–º  
parks_nearest ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–∞—Ä–∫–∞ (–º)  
ponds_around3000 ‚Äî —á–∏—Å–ª–æ –≤–æ–¥–æ—ë–º–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 3 –∫–º  
ponds_nearest ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ–¥–æ—ë–º–∞ (–º)  
rooms ‚Äî —á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç  
studio ‚Äî –∫–≤–∞—Ä—Ç–∏—Ä–∞-—Å—Ç—É–¥–∏—è (–±—É–ª–µ–≤ —Ç–∏–ø)  
total_area ‚Äî –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö (–º¬≤)  
total_images ‚Äî —á–∏—Å–ª–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏  
",1,1,1,0,real-estate,"[real-estate, sales]",0
Raghav-Sahai,HouseStatistics,,https://github.com/Raghav-Sahai/HouseStatistics,https://api.github.com/repos/HouseStatistics/Raghav-Sahai,Chrome extension that calculates real estate property metrics,"# Real Estate Calculator

Calculate return on investment (ROI) for any Real Estate investment property - useful for real estate agents and investors

## Development

- This project uses [node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/)
- Install dependencies

  ```sh
  npm install
  ```

- Run the project

  ```sh
  npm run dev
  ```

- Go to [Google Chrome Extension](chrome://extensions/) dashboard and activate  `Developer Mode`.
- Click `Load Unpacked` button and point it to `/dist` folder, the extension will be hot reload on code changes.

## Build Extension

- After installing dependencies, build the project

  ```sh
  npm run build
  ```

- Uncompressed build can be found in `/dist` folder, compressed build is `roicalculator.zip`
- Go to Chrome Extensions page and activate the Developer Mode.
- Click `Load Unpacked` button and point it to `/dist` folder.

## Publish Extension

- Once final extension has been build, navigate to the [chrome developer dashboard](https://chrome.google.com/webstore/developer/dashboard)
- Navigate to the HouseStatistics extension
- Navigate to the `package` tab
- Click `Upload new package`
- Upload `HouseStatistics.zip` file that was created after build.  Validate timestamp to ensure it is latest.
",1,1,1,0,real-estate,"[chrome-extension, real-estate]",0
alik604,realEstateAPPraisal,,https://github.com/alik604/realEstateAPPraisal,https://api.github.com/repos/realEstateAPPraisal/alik604,valuation of real estate,"# realEstateAPPraisal
Valuation of real estate
 
 ## Current state
Currently this is an unnused dateset, which I am not happy with. To do what I consider a good job, I would need past date, square feet, and a lot of other infor.  

Maybe I will circle back to this project idea if I need it for a data mining course. Right now im focusing on Biologically Plausible ML & (complex) Bayesian models 
",1,1,2,0,real-estate,"[real-estate, real-estate-price, real-estate-price-prediction, toronto-housing-dataset, vancouver-housing-dataset]",0
Uplace,android,Uplace,https://github.com/Uplace/android,https://api.github.com/repos/android/Uplace,Uplace android aplication,"# Uplace - Android

The android application of uplace.es

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.

```
Give examples
```

### Installing

To install Uplace for Android go to this **link**

## Running the tests

Explain how to run the automated tests for this system

### Break down into end to end tests

Explain what these tests test and why

```
Give an example
```

### And coding style tests

Explain what these tests test and why

```
Give an example
```

## Deployment

Add additional notes about how to deploy this on a live system

## Built With

* [Kotlin](https://kotlinlang.org/) - The language used
* [Gradle](https://gradle.org/) - Dependency Management
* [Retrofit](http://square.github.io/retrofit/) - Used to make HTTP requests

## Versioning

We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags). 

## Authors

* **Nicos Fabro** - *Initial work* - [GitHub](https://github.com/NicosFabro)

See also the list of [contributors](https://github.com/uplace/android/contributors) who participated in this project.

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details

## Acknowledgments

* Hat tip to anyone who's code was used
* Inspiration
* etc
",1,1,1,11,real-estate,"[android, gradle, java, kotlin-android, real-estate]",0
guillaumedufour,immo-symfo,,https://github.com/guillaumedufour/immo-symfo,https://api.github.com/repos/immo-symfo/guillaumedufour,A real estate web app in symfony 4,"# immo-symfo
A real estate web app in symfony 4
",1,1,1,0,real-estate,"[real-estate, symfony]",0
DanielFarahani,corelogic_pyclient,,https://github.com/DanielFarahani/corelogic_pyclient,https://api.github.com/repos/corelogic_pyclient/DanielFarahani,python client for coreLogic API,"# Corelogic API Python client

## Overview

This is a Python client for the [CoreLogic API](https://developer.corelogic.asia/apis/docs/overview-au).  
Makes interfacing with the API much easier.

I haven't seen any clients/ wrappers for Python, so this is a start. 

## install
```bash
pip3 install corelogic-pyclient
OR
pip install corelogic-pyclient
```

## Usage 
1. create an account on [developer.corelogic](https://developer.corelogic.asia/user) for a API credentials
2. add **Client ID** and **Secret** to enviroment variable  
> bash script to run everytime
```bash
#E.g. create setup.sh (Then chmod +x setup.sh)
#!/bin/bash
client_id='<Your Client_id>'
secret='<Your secret_code>'
```
> OR manual process
```bash
#or export in the terminal
export client_id='<Your Client_id>'
export secret='<Your secret_code>'
```
3. Import
```python
>>> import corelogic.property as prop
>>> details = prop.Details()
>>> details.property_attributes(<property_id>)
{'beds': 2, 'baths': 1, ...}

>>> suggestions = prop.Suggest()
>>> suggestions.suggest_properties('1 ahern place monash')
```



### Endpoints

The structure of the package is similar to the Postman [collection provided](https://documenter.getpostman.com/view/7051651/S1EJWfxt) by CoreLogic.  
You can import class/folder of the API separately and use the endpoint through the methods.

* Suggestion
* Search
* Property Detail
* Automatic Valuation model (AVM)



## Tasks
Pull requests and collaboration is greatly welcomed!

- build out the endpoints of interest
- Refactor to better form factor
- Complete Health check
- Complete Tests

## Goals
- Given the API is $ per request scheme it would be good to cache
- reduce the API endpoints from the website to minimal set as there is alot of overlap in response data
- Better error handling
- Look for API version updates
- Better messaging for the response payload
",1,1,1,0,real-estate,"[api-wrapper, proptech, real-estate]",0
jackhebb,Real-Estate-Tycoon,,https://github.com/jackhebb/Real-Estate-Tycoon,https://api.github.com/repos/Real-Estate-Tycoon/jackhebb,Machine learning regression analysis to predict home values using real estate data.,"# Real Estate Tycoon
 My first repository where I am putting some of the machine learning projects which I am using to learn the ropes.
",1,1,1,0,real-estate,"[machine-learning, python3, real-estate, regression-analysis]",0
Santhin,real-estate,,https://github.com/Santhin/real-estate,https://api.github.com/repos/real-estate/Santhin,Real estate crawler with ML on scraped data,"
---

## üßê About <a name = ""about""></a>

Project was created for ""SKNS Warsztaty z Pythona"". <br>
Consists crawler for scraping real estate data from gumtree and jupyter notebook with ML.

## üèÅ Getting Started <a name = ""getting_started""></a>

To clone repository type:
```
git clone https://github.com/Santhin/real-estate
```
To run crawler locally:
```
pip install -r requirements
python app.py
```

### Project structure
```
.
‚îú‚îÄ‚îÄ crawler
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ app.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ aps_asyncio.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gumtree
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ items.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ middlewares.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pipelines.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ settings.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ spiders
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ gumtree_crawler.py
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ stack.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ install_asyncio.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Procfile
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requirements.txt
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ scrapy.cfg
‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ ml
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ features
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ rankingcen.xlsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Ranking\ Dzielnic\ 2020\ Warszawa.pdf
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ranking_dzielnic_warszawy_pod_wzgledem_atrakcyjnosci_warunkow_zycia_2017.pdf
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ranking_otodom.csv
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ranking.txt
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ranking.xlsx
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ notebooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ML\ endgame\ floydhub.ipynb
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ML\ endgame.ipynb
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ NLP\ eda\ etc.ipynb
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Pipeline\ mongoRaw\ to\ clean\ before\ EDA.ipynb
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ real\ EDA.ipynb
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ pictures
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ images.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ml_map.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ simple-house-exterior-white-background_1308-50195.jpg
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ unnamed.jpg
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ white-house-background-check-democratic-party-republican-party-house-png.jpg
‚îî‚îÄ‚îÄ README.md

6 directories, 32 files
```


## üöÄ Deployment <a name = ""deployment""></a>
The crawler was deployed on Heroku and in 15min intervals was activated with advanced python scheduler.

## ‚õèÔ∏è Built Using <a name = ""built_using""></a>

- [Scrapy](https://scrapy.org/) - Crawler
- [MongoDB](https://www.mongodb.com/) - Database
- [Heroku](https://www.heroku.com/) - Deployment
- [Floydhub](https://www.floydhub.com/) - Traning model


## üõ†Ô∏è Todo
- add requirements.txt to ML folder",1,1,2,0,real-estate,"[crawler, jupyter-notebook, ml, real-estate, scrapy]",0
Timex19,realestate_web-app,,https://github.com/Timex19/realestate_web-app,https://api.github.com/repos/realestate_web-app/Timex19,A simple real estate web application made with next.js and rapid api.,"# Realestate Web App
This is a simple real estate web application made with Next.js and Rapid API.
### [Live Site](https://realestate-website.vercel.app/) 

![real-estate2](https://user-images.githubusercontent.com/88297303/159173039-098c40c1-208a-4797-80af-746986f128f9.png)

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",1,1,1,0,real-estate,"[api, nextjs, react, real-estate]",0
doruirimescu,helsinki-apartment-finder,,https://github.com/doruirimescu/helsinki-apartment-finder,https://api.github.com/repos/helsinki-apartment-finder/doruirimescu,A python framework for apartment finding in Helsinki,"# helsinki-apartment-finder

# A python framework for apartment finding in Helsinki

**Selects desired apartments, normalizes their parameters based on given [ranges](https://github.com/doruirimescu/helsinki-apartment-finder/blob/8abe2a75ad1df3cc9058ebffed8f2147758115aa/parameters.py#L10), classifies them based on [weighted sum](https://github.com/doruirimescu/helsinki-apartment-finder/blob/8abe2a75ad1df3cc9058ebffed8f2147758115aa/parameters.py#L19) of apartment [parameters](https://github.com/doruirimescu/helsinki-apartment-finder/blob/8abe2a75ad1df3cc9058ebffed8f2147758115aa/apartment.py#L64).**

With this tool, you can scrape apartment information from [oikotie asunnot](https://asunnot.oikotie.fi/).

For changing the considered locations, modify the [locations_url](https://github.com/doruirimescu/helsinki-apartment-finder/blob/8efa101e6b135a926ac184956de5c76dbc4bdcc7/parameters.py#L24) parameter

The top candidate apartments can be plotted on a radar chart:
![Selection_103](https://user-images.githubusercontent.com/7363000/153774509-d248c7be-fc3c-4001-aeba-afc7c4fc1dc8.png)

The top candidate apartments are sorted based on their ranks:
![Selection_105](https://user-images.githubusercontent.com/7363000/153774865-5f4c42e4-cd12-469b-87cf-67b1444734ce.png)

**Before running:** 
* Install [chromedriver](https://chromedriver.chromium.org/downloads)
* Configure [parameters](https://github.com/doruirimescu/helsinki-apartment-finder/blob/master/parameters.py)

**Running:**
```python3 scraper.py```

Inspired from: https://github.com/jarvijaakko/Apartment_hunting
",1,1,3,0,real-estate,"[apartment, apartment-finder, apartment-hunt, apartments, asunnot, finland, oikotie, real-estate, scraper, scraping-python]",0
lealcastillo1996,Housing-Price-Estimator,,https://github.com/lealcastillo1996/Housing-Price-Estimator,https://api.github.com/repos/Housing-Price-Estimator/lealcastillo1996,"The objective of this project is to create an accurate sale price calculation tool for a Real State company, developing in the process a full Data Science Project","# Price sale for housing regressor

The **objective** of this project is to create an accurate sale price calculation tool for a Real State company, developing in the process a full Data Science Project

![alt text](https://www.investopedia.com/thmb/FsaVFaKYsbEVzCG1lrQ-MpwdUGY=/425x282/filters:fill(auto,1)/housecalculator-56a7dc723df78cf7729a0745.jpg)

## Overview
### - Exploratory Data Analysis of housing data (Insights):

- Missing values handling
- All numerical variables
- Distribution of numerical variables
- Categorical variables
- Cardinatily of categorical variables
- Outliers
- Relationships between dependent and independent features


### - Feature engineering framework:

- Splitting data into train and test set with stratified sampling tecnique to preserve distributions found in the housing data
- Creation of an advanced custom transformation pipeline with helpfull tools such as: median imputer, log normalization, custom column modifiers, rare category handler, NaN dropper, categoric variable encoder and variables scaler. (to clean and transform in a fast way future raw sets)

*Note: I could have used ScikitLearn tools such as imputer or Ordinal Encoder, however to add more value to the project and have more control I defined my own cleaning functions*

### - Feature selection framework:

-Use filter algorithms simple methods such as Chi square and Correlation matrix methods to have an initial visualization.

- Different regression embeded methods will be used to determine feature importance and select the best features to feed our models:
- Linear Regression
- Decision Tree Regression
- Random Forest Regression
- XgBoost Regression
- Permutation Regression

*I propose 2 ways of selecting best features, one is simply selecting the top occurrences total sum of the counts, the second one is selecting the the features that appeared as a top in at least 2 different models*

### - Model selection, training and tunning:
Diferent algorithms to find the one with the best metrics and results for this problem

Models proposed:
- Linear Regressor
- Decision Tree Regressor
- Random Forest Regressor
- Support vector machine regressor
- KG-Boost Regressor
- K-n Neighbor regressor
- Lasso Regressor

### - Results summary

A regressor tool for estimating housing sale price was developed from scrath with excelent results, reaching a 88% accuracy in test set. All steps and assumptions were important to reach this result

![alt text](https://cdn.discordapp.com/attachments/1007513651705561101/1007513720576016424/Captura_de_Pantalla_2022-08-11_a_las_23.55.46.png)
![alt text](https://media.discordapp.net/attachments/1007513651705561101/1007513720907374642/Captura_de_Pantalla_2022-08-11_a_las_23.55.52.png)

",1,1,1,0,real-estate,"[data-science, machine-learning, python, real-estate, regression-models]",0
victoriaEssien,real-estate-web-app,,https://github.com/victoriaEssien/real-estate-web-app,https://api.github.com/repos/real-estate-web-app/victoriaEssien,Real Estate Web Application,"# real-estate-web-app

With this real estate application, users can browse through properties available and book a tour to see the house in person.
The admin can upload property details from the dashboard, search for properties, update and delete them and view scheduled tours.

This is a project I was given during my IT

# Screenshots

![Screenshot (119)](https://user-images.githubusercontent.com/79677353/188461251-e2804a0a-1b4b-47d5-b8f3-f165896248ef.png)



![Screenshot (110)](https://user-images.githubusercontent.com/79677353/188461324-1abb8881-6773-4fc5-a0da-725b256e6a23.png)



![Screenshot (120)](https://user-images.githubusercontent.com/79677353/188461314-2260db84-45bc-4ff1-b25d-7078daee031d.png)



![Screenshot (121)](https://user-images.githubusercontent.com/79677353/188461317-31339e53-da70-4aa5-ac5d-704b7b6c3a93.png)



![Screenshot (122)](https://user-images.githubusercontent.com/79677353/188461321-bef73ca4-84c4-4c03-af3c-ed08010d4bec.png)
",1,1,1,0,real-estate,"[css3, database, full-stack-web-development, html5, javascript, mysqli, php, real-estate, real-estate-platform]",0
PXMYH,helios,,https://github.com/PXMYH/helios,https://api.github.com/repos/helios/PXMYH,Real Estate Rental Info Data Collector,"# helios

[![Build Status](https://travis-ci.org/PXMYH/helios.svg?branch=master)](https://travis-ci.org/PXMYH/helios)
[![codecov](https://codecov.io/gh/PXMYH/helios/branch/master/graph/badge.svg)](https://codecov.io/gh/PXMYH/helios)
[![Known Vulnerabilities](https://snyk.io/test/github/PXMYH/helios/badge.svg)](https://snyk.io/test/github/PXMYH/helios)

Scrapy spider to crawl and fetch information about real estate information

This project uses pipenv for package/dependency and virtualenv management, to learn more about how to use [pipenv](https://pipenv.readthedocs.io/en/latest/)

Requirements:

## Setup

### workspace

```bash
brew install pipenv
pipenv --two
pipenv lock
pipenv install
```

### Setup attached resources

Redis cluster for local dev (Celery):

```bash
brew install redis
brew services start redis
```

Postgres cluster for local dev (Backend database):

```bash
brew install postgres
brew services start postgres
```

## Run app

run the following command from root directory

### run craiglist bot spider only

```bash
cd services/craigslist
scrapy crawl craigbot_all -o craigslist_result.csv
```

### run scheduled bot spider

```bash
cd services
export POSTGRES_DB_URI=""postgres://postgres@localhost:5432/helios""; python bots.py
```

### run app with bot manual trigger

```bash
export FLASK_ENV=development
export POSTGRES_DB_URI=""postgres://postgres@localhost:5432/helios""
FLASK_APP=app.py flask run --debugger
# to trigger the bot, run
curl http://localhost:5000
```

### run app with bot autostart

```bash
export POSTGRES_DB_URI=""postgres://postgres@localhost:5432/helios""
python app.py

```

## Development

### Database

#### local development

```bash
# connect to database
psql postgres -U postgres
\c helios
# execute create_initial_schema.sql script

# To test postgres database CRUD operations
cd services/postgres
export POSTGRES_DB_URI=""postgres://postgres@localhost:5432/helios""
python postgres.py
```

## Deployment

helios system is set up to be in continous deployment to Heroku platform at https://dashboard.heroku.com/apps/beast-helios tracking `master` branch

```bash
# deploy to Heroku, just check in/ merge into master branch

# restart app
heroku restart

# set/unset environment variables
heroku config:set <env_var>
heroku config:unset <env_var>

# check logs
heroku logs --tail
```

_Note_
Commits are associated with GPG signing key
",1,1,1,52,real-estate,"[craigslist, docker, flask, mls, pipenv, postgresql, python, real-estate, scrapy]",0
devpro,yanport-dotnet-client,,https://github.com/devpro/yanport-dotnet-client,https://api.github.com/repos/yanport-dotnet-client/devpro,.NET Core client for Yanport,"Ôªø# Yanport .NET Client

[![Build Status](https://dev.azure.com/devprofr/open-source/_apis/build/status/libraries/yanport-dotnet-client-ci?branchName=master)](https://dev.azure.com/devprofr/open-source/_build/latest?definitionId=35&branchName=master)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=devpro.yanport.dotnetclient&metric=alert_status)](https://sonarcloud.io/dashboard?id=devpro.yanport.dotnetclient)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=devpro.yanport.dotnetclient&metric=coverage)](https://sonarcloud.io/dashboard?id=devpro.yanport.dotnetclient)

.NET client for [Yanport](https://www.yanport.com/), provider of real estate data.

Package | Version | Type
------- | ------- | ----
`Devpro.Yanport.Abstractions` | [![Version](https://img.shields.io/nuget/v/Devpro.Yanport.Abstractions.svg)](https://www.nuget.org/packages/Devpro.Yanport.Abstractions/) | .NET Standard 2.1
`Devpro.Yanport.Client` | [![Version](https://img.shields.io/nuget/v/Devpro.Yanport.Client.svg)](https://www.nuget.org/packages/Devpro.Yanport.Client/) | .NET Standard 2.1

## How to use

- Have the [NuGet package](https://www.nuget.org/packages/Devpro.Yanport.Client) in your csproj file (can be done manually, with Visual Studio or through nuget command)

```xml
<Project Sdk=""Microsoft.NET.Sdk"">
  <ItemGroup>
    <PackageReference Include=""Devpro.Yanport.Client"" Version=""X.Y.Z"" />
  </ItemGroup>
</Project>
```

- Make the code changes to be able to use the library (config & service provider)

```csharp
// implement the configuration interface (for instance in a configuration class in your app project) or use DefaultYanportClientConfiguration
using Devpro.Yanport.Client;

public class AppConfiguration : IYanportClientConfiguration
{
    // explicitely choose where to take the configuration for Yanport REST API (this is the responibility of the app, not the library)
}

// configure your service provider (for instance in your app Startup class)
using Devpro.Yanport.Client.DependencyInjection;
using Microsoft.Extensions.DependencyInjection;

var services = new ServiceCollection()
  .AddLogging()
  .AddYanportClient(Configuration);
```

- Use the repositories (enjoy a simple, yet optimized, HTTP client)

```csharp
using Devpro.Yanport.Client;

private readonly IPropertRepository _propertyRepository;

public MyService(IPropertRepository propertyRepository)
{
    _propertyRepository = propertyRepository;
}

public async Task GetProperties()
{
    var properties = await _propertyRepository.FindAllAsync();
}
```

## How to build

Once the git repository has been cloned, execute the following commands from the root directory:

```bash
dotnet restore
dotnet build
```

## How to test

For integration tests, to manage the configuration (secrets) you can create a file at the root directory called `Local.runsettings` or define them as environment variables:

```xml
<?xml version=""1.0"" encoding=""utf-8""?>
<RunSettings>
  <RunConfiguration>
    <EnvironmentVariables>
      <Yanport__Sandbox__BaseUrl>https://api.yanport.com</Yanport__Sandbox__BaseUrl>
      <Yanport__Sandbox__Token>xxx</Yanport__Sandbox__Token>
    </EnvironmentVariables>
  </RunConfiguration>
</RunSettings>
```

And execute all tests (unit and integration ones):

```bash
dotnet test --settings Local.runsettings
```

## References

- [API Documentation](https://www.yanport.com/data/api/documentation)
",1,1,2,20,real-estate,"[dotnet-core, nuget, real-estate, rest-client, yanport]",0
c-o-l-i-n,wch-frontend,,https://github.com/c-o-l-i-n/wch-frontend,https://api.github.com/repos/wch-frontend/c-o-l-i-n,üè† Frontend for the Williams Custom Homes website,"<h1 align=""center"">Williams Custom Homes Website Frontend</h1>

<div align=""center"">
  <a href=""https://github.com/c-o-l-i-n/wch-frontend/actions/workflows/build.yml"">
    <img alt=""Github Build Status"" src=""https://img.shields.io/github/actions/workflow/status/c-o-l-i-n/wch-frontend/build.yml?logo=github&logoWidth=12"">
  </a>
  <a href=""https://williamscustomhomes.com"">
    <img alt=""Website Monitoring Status"" src=""https://img.shields.io/website?url=https%3A%2F%2Fwilliamscustomhomes.com"">
  </a>
</div>

<br />

<div align=""center"" >
  <a href=""https://williamscustomhomes.com"">
    <img src=""public/images/logo.svg"" alt=""Logo"" />
  </a>
</div>

## About

Williams Custom Homes is a family-owned custom home building business in Stark County, Ohio.

The website frontend is a [Next.js](https://nextjs.org/) static site hosted on [Cloudflare Pages](https://pages.cloudflare.com/).

### Technology Stack

[![Next.js](https://img.shields.io/badge/Next.js-black?style=for-the-badge&logo=next.js&logoColor=white)](https://nextjs.org/)
[![TypeScript](https://img.shields.io/badge/typescript-%23007ACC.svg?style=for-the-badge&logo=typescript&logoColor=white)](https://www.typescriptlang.org/)
[![Cloudflare Pages](https://img.shields.io/badge/Cloudflare%20Pages-F38020?style=for-the-badge&logo=Cloudflare%20Pages&logoColor=white)](https://pages.cloudflare.com/)

## Getting Started

### Prerequisites

- [Git](https://git-scm.com/)
- [Node.js](https://nodejs.org/) v18

### Install

```sh
git clone https://github.com/c-o-l-i-n/wch-frontend.git
cd wch-frontend
npm install
```

### Run

```sh
npm run dev
```

## Author

<a href=""https://github.com/c-o-l-i-n"">
  <img src=""https://images.weserv.nl/?url=avatars.githubusercontent.com/u/40863449?v=4&w=140&fit=cover&mask=circle&maxage=7d"" style=""width: 70px"" align=""left""/>
</a>

**Colin A. Williams**

Website: [colinaw.com](https://colinaw.com)
<br>
Github: [@c-o-l-i-n](https://github.com/c-o-l-i-n)

## License

Copyright ¬© 2023 [Williams Custom Homes, LLC](https://williamscustomhomes.com)<br />All rights reserved.",1,1,1,2,real-estate,"[business, github-actions, github-pages, headless-cms, home-building, jamstack, nextjs, react, real-estate, realestate, sass, static-site, strapi, typescript]",0
nehaagarwal0719,DemoProject,,https://github.com/nehaagarwal0719/DemoProject,https://api.github.com/repos/DemoProject/nehaagarwal0719,"A Decentralized Application(DApp) on Ethereum for transparent, easy, and efficient property management. We can sell, rent and buy properties through this DApp",,1,1,2,13,real-estate,"[blockchain, dapps-development, ethereum, real-estate]",0
raaaouf,real-estate-analysis-regression-with-python-,,https://github.com/raaaouf/real-estate-analysis-regression-with-python-,https://api.github.com/repos/real-estate-analysis-regression-with-python-/raaaouf,,# real-estate-analysis-regression-with-python-,1,1,1,0,real-estate,"[analysis, data-analysis, data-science, python, real-estate, regression]",0
xiaojie-qian,WS_Real_Estate_Data_Analytics,,https://github.com/xiaojie-qian/WS_Real_Estate_Data_Analytics,https://api.github.com/repos/WS_Real_Estate_Data_Analytics/xiaojie-qian,"Watershed Property Management, Inc. Watershed is responsible for managing thousands of residential rental properties throughout the United States. The target of this project is to persuade Watershed‚Äôs management team to pursue a new strategy for managing its properties that will increase their profits.","# Real_Estate_Data_Analytics
1. Watershed Property Management, Inc. Watershed is responsible for managing thousands of residential rental properties throughout the United States. 
2. The target of this project is to persuade Watershed‚Äôs management team to pursue a new strategy for managing its properties that will increase their profits.

# Description of the project
- Watershed Properties is a residential property management company. We manage several thousand properties in more than 60 different neighborhoods around the United States.
- Watershed currently has a time-sensitive opportunity to explore the short-term rental market with one of its top property owners?
- Watershed wants to know: 
  1. calculate how much it would cost to convert and maintain each of this client‚Äôs properties as a short-term rental.
  2. determine the nightly rental price that would maximize the profits from each of these properties, if they were converted to short-term rentals.
  3. calculate which properties would have increased profits as short-term rentals.
  4. determine how profitable, overall, it would be if Watershed converted some of this client's properties into short-term rentals. 
  5. need to determine how much cash Watershed would need in order to realize any potential profits from converting the properties.

# Database description
1. the current monthly rent Watershed charges for all of their client‚Äôs 244 properties, as well as the property type and geographic location of those properties.
2. some general information about examples of short-term rental properties. This information can be used to get a sense of what kind of nightly rental price Watershed‚Äôs client‚Äôs properties could be listed for, if they were converted to short-term rentals.
3. records about when those short-term rental properties were rented out, so that you can calculate their occupancy rates.

# Dashboard for analysis use 

<img align=""Middle"" alt= ""Dashboard"" width=""1000px"" src= ""https://user-images.githubusercontent.com/58776067/172017927-37328707-04f1-4ac0-8ab8-a780eeb31b68.png"" /> 
<br /> 
:link: (Interactive Dashboard) : https://xiaojie-qian.github.io/WS_Real_Estate_Data_Analytics/ 

",1,1,1,0,real-estate,"[jupiter, modeling, mysql, normalization, real-estate, reallifeproject, spreadsheet, tableau]",0
jFrisks,real-estate-history,,https://github.com/jFrisks/real-estate-history,https://api.github.com/repos/real-estate-history/jFrisks,"Chrome extension that automatically saves history of real estate from websites. Keep track of sold properties and view images and details of real estate, even when sold. ","
[![Issues][issues-shield]][issues-url]
[![MIT License][license-shield]][license-url]
[![LinkedIn][linkedin-shield]][linkedin-url]


<!-- PROJECT LOGO -->
<br />
<p align=""center"">
  <a href=""https://github.com/jFrisks/real-estate-history"">
    <img src=""src/chrome_extension/images/icon@128w.png"" alt=""Logo"" width=""128"" height=""128"">
  </a>

  <h3 align=""center"">Hi Bost√§der - Real Estate History</h3>

  <p align=""center"">
    Chrome extension that automatically saves history of real estate from websites. Keep track of sold properties and view images and details of real estate, even when sold. 
    <br/>
    <br/>
    It uses jFrisks (my) <a href=""https://github.com/jFrisks/real-estate-history-server"">Real Estate Image API - REPO</a>
    <br />
    <a href=""https://chrome.google.com/webstore/detail/mclndpdogncpmdahpdglcfmhcknijldk/publish-accepted?authuser=1&hl=sv""><strong>Add Extension to Chrome! ¬ª</strong></a>
    <br />
    <br />
    <a href=""https://github.com/jFrisks/real-estate-history/tree/master/src"">Explore the code ¬ª</a>
    ¬∑
    <a href=""https://github.com/jFrisks/real-estate-history/issues"">Request Feature ¬ª</a>
  </p>
</p>




<!-- ABOUT THE PROJECT -->
## About The Project

[![Save listings and see images even when sold][product-screenshot]](https://lh3.googleusercontent.com/FYNB8Z12rdCa1LEVZW7Da3XolLC2H70C7f5fK1fvIBl5cz3AhaW0CmjUPHnGzHZ7G_fJzd0-sA=w640-h400-e365)

Chrome extension that automatically saves history of real estate from websites. Keep track of sold properties and view images and details of real estate, even when sold.

WHY NEED IT?
* Compare the condition of the house/apartment with images, not just numbers.
* Compare neighbourhood.
* Save your dream home for later.

What you can't do, yet:
* Get images of every sold real estate property. For legal reasons we do not store data online. Each extension stores the data locally synced with their Chrome Browser.


### Built with
Built as two projects:
* [**Server**](https://github.com/jFrisks/real-estate-history-server) - Scrapes image / info and allows REST API endpoints. Built with Javascript.
* **Chrome Extension** - Helps you save and view real estate info. Calls the server. Built with javascript, HTML and CSS and follows [Google Chrome Extension Development best practices](https://developer.chrome.com/docs/extensions/).



<!-- GETTING STARTED -->
## Getting Started
This is very simple to use. Just install by following instructions below. 


### Install to your Chrome Browser
1. [Install Extension in Google Web Store](https://chrome.google.com/webstore/detail/mclndpdogncpmdahpdglcfmhcknijldk/publish-accepted?authuser=1&hl=sv)
2. Install it

### Clone Repo & Develop

1. Clone the repo
```sh
git clone https://github.com/jFrisks/real-estate-history.git
```

### Prerequisites

There is no prerequisites to develop the code. Only javascript and a code editor.

<!-- CONTRIBUTING -->
## Contributing

Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are **greatly appreciated**.

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/YourFeature`)
3. Commit your Changes (`git commit -m 'Add some YourFeature'`)
4. Push to the Branch (`git push origin feature/YourFeature`)
5. Open a Pull Request



<!-- LICENSE -->
## License

Distributed under the MIT License. See `LICENSE` for more information.



<!-- CONTACT -->
## Contact

Jonathan Frisk - [![LinkedIn][linkedin-shield]][linkedin-url] - jonathan.frisk.tech(at)gmail.com

Project Link: [https://github.com/jFrisks/real-estate-history](https://github.com/jFrisks/real-estate-history)



<!-- ACKNOWLEDGEMENTS -->
## Acknowledgements - Used for this project
* [Hemnet](https://www.hemnet.se/)
* [Chrome Extension Developer Guide](https://developer.chrome.com/extensions/devguide)
* [Loading.IO - Pure CSS](https://loading.io/css/)



<!-- MARKDOWN LINKS & IMAGES -->
<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->
[contributors-shield]: https://img.shields.io/github/contributors/othneildrew/Best-README-Template.svg?style=flat-square
[contributors-url]: https://github.com/othneildrew/Best-README-Template/graphs/contributors
[forks-shield]: https://img.shields.io/github/forks/othneildrew/Best-README-Template.svg?style=flat-square
[forks-url]: https://github.com/othneildrew/Best-README-Template/network/members
[stars-shield]: https://img.shields.io/github/stars/othneildrew/Best-README-Template.svg?style=flat-square
[stars-url]: https://github.com/othneildrew/Best-README-Template/stargazers
[issues-shield]: https://img.shields.io/github/issues/othneildrew/Best-README-Template.svg?style=flat-square
[issues-url]: https://github.com/jFrisks/real-estate-history/issues
[license-shield]: https://img.shields.io/github/license/othneildrew/Best-README-Template.svg?style=flat-square
[license-url]: https://github.com/jFrisks/real-estate-history/blob/master/LICENSE.txt
[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=flat-square&logo=linkedin&colorB=555
[linkedin-url]: https://linkedin.com/in/jonathanfrisk
[product-screenshot]: https://lh3.googleusercontent.com/FYNB8Z12rdCa1LEVZW7Da3XolLC2H70C7f5fK1fvIBl5cz3AhaW0CmjUPHnGzHZ7G_fJzd0-sA=w640-h400-e365
",1,1,2,2,real-estate,"[apartment, chrome-extension, hemnet, house, image, javascript, real-estate]",0
mollyretter,walkscore_ex,,https://github.com/mollyretter/walkscore_ex,https://api.github.com/repos/walkscore_ex/mollyretter,An Elixir wrapper for the WalkScore API,"# WalkscoreEx

An Elixir API client for the WalkScore API.

## Installation

This hex package can be installed by adding `walkscore_ex` to your list of dependencies in `mix.exs`:

### mix.exs
```elixir
def deps do
  [
    {:walkscore_ex, ""~> 0.0.1""}
  ]
end
```

### config.exs
```elixir
config :walkscore_ex, walkscore_api_key: ""YOUR_API_KEY_FROM_WALKSCORE""
```

## Example

### Sample Request
```
latitude = ""38.897675""
longitude = ""-77.036547""
address = ""1600 Pennsylvania Avenue NW, Washington, DC, USA""

response = WalkscoreEx.get_score(latitude, longitude, address)
```

### Sample Response
```
%{
  ""description"" => ""Very Walkable"",
  ""help_link"" => ""https://www.redfin.com/how-walk-score-works"",
  ""logo_url"" => ""https://cdn.walk.sc/images/api-logo.png"",
  ""more_info_icon"" => ""https://cdn.walk.sc/images/api-more-info.gif"",
  ""more_info_link"" => ""https://www.redfin.com/how-walk-score-works"",
  ""snapped_lat"" => 38.898,
  ""snapped_lon"" => -77.037,
  ""status"" => 1,
  ""updated"" => ""2023-02-13 03:39:18.898986"",
  ""walkscore"" => 83,
  ""ws_link"" => ""https://www.walkscore.com/score/1600-Pennsylvania-Avenue-NW-Washington-DC-USA/lat=38.897675/lng=-77.036547""
}
```

## Documentation

### Local
Documentation can be generated with [ExDoc](https://github.com/elixir-lang/ex_doc) by running `mix docs`. To view the docs locally, make sure you have the latest NPM install and run `npx serve doc/`.

### Hex Docs
The docs can be found here on [HexDocs](https://hexdocs.pm/walkscore_ex).",1,1,1,0,real-estate,"[elixir, elixir-wrapper, real-estate, walkscore, walkscore-api]",0
navreeetkaur,named-entity-recognition,,https://github.com/navreeetkaur/named-entity-recognition,https://api.github.com/repos/named-entity-recognition/navreeetkaur,Named Entity Recognition for Real Estate Text | COL772 (NLP) @ IIT Delhi,"# Named Entity Recognition for Real Estate Text
### Assignment 3 - COL772(Spring'19): Natural Language Processing
#### Creator: Navreet Kaur[2015TT10917]
 
#### Motivation:
The motivation of this assignment is to get practice with sequence labeling tasks such as Named Entity Recognition. More precisely you will experiment with the BiLSTM-CRF model and various features on real estate text.

#### Scenario: 
Different real estate agents share noisy text messages on a real estate platform to inform buyers about new properties available for sale. We will call these text messages, shouts. As a company interested in automating real estate information, our first step is to perform NER on these shouts so that important and relevant information can be extracted downstream.

#### Problem Statement: 
The goal of the assignment is to build an NER system for shouts. The input of the code will be a set of tokenized shouts and the output will be a label for each token in the sentence. Labels will be from 8 classes:
- Locality (L)
- Total Price (P)
- Land Area (LA)
- Cost per land area (C)
- Contact name (N)
- Contact telephone (T)
- Attributes of the property (A)
- Other (O)

#### The Task: 
You need to write a sequence tagger that labels the given shouts in a tokenized test file. The tokenized test file follows the same format as training except that it does not have the final label in the input. Your output should label the test file in the same format as the training data.
",1,1,2,1,real-estate,"[conditional-random-fields, crf, named-entities, named-entity-recognition, ner, nlp, real-estate]",0
Astrogeek77,Real_Estate_App,,https://github.com/Astrogeek77/Real_Estate_App,https://api.github.com/repos/Real_Estate_App/Astrogeek77,A Real Estate App built using nextjs framework and chakra UI.,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",1,1,2,1,real-estate,"[api, charka-ui, javascript, nextjs, reactjs, real-estate, scalable, vercel-deployment]",0
dan-was,gumtree,,https://github.com/dan-was/gumtree,https://api.github.com/repos/gumtree/dan-was,"Analysis of apartment rental and sale prices in Warsaw, Poland","## Room and apartment gumtree ad analysis for Warsaw, Poland

This repository contains class Ads with a variety of methods that allows to download and format/filter content of ads posted on gumtree.pl. It currently supports rooms and apartments for rent as well as apartments for sale. 

The notebooks contain a descriptive analysis of data gathered in Q4 2017 for all three types of ads. They also contain pricing models prepared for all districts with a comparison of model accuracy.


![alt text](/districts_box.png)
",1,1,0,0,real-estate,"[ads, data-analysis, data-science, poland, python, real-estate, warsaw]",0
shscampbell,saleawhen,,https://github.com/shscampbell/saleawhen,https://api.github.com/repos/saleawhen/shscampbell,A Flask web app that provides time-of-sale estimates for home listings in the Calgary market. The model used by Sale A-When is the result of a survival analysis carried out on a large sales data set.,"# Sale A-When?
## Predicting the time to sell your home in the Calgary, Alberta, Canada market. Receive data-based forecasts of days-on-market for your Calgary listing at <a href=""http://saleawhen.site/"">http://saleawhen.site/</a>

This is the source code for a webapp I created as an <a href=""http://www.insightdatascience.com/"">Insight Data Science Fellow</a>. This was part of a consulting project for a Canadian real-estate startup. The company was interested in creating a model that could predict how long a listed house would take to sell. They provided a proprietary data set of over 50 000 sold homes since 2010, including detailed information about each property and their neighborhoods. That data resulted in the predictive model used by Sale A-When.

The webapp is a webform that queries users for relevant details about their listing and for the level of confidence that they want to have about how long it will take their property to sell. For example, if the user selects a confidence level of 99, the resulting output would be the number of days required for 99% of similar listings to sell.

## Motivation
An accurate prediction of the number of days expected for a home to sell is valuable information for anyone planning to sell their home. It helps sellers make appropriate moving plans and it helps them pinpoint the best time to put their property on the market.

This information is also important to property investors who need to understand the liquidity of their assets. Home flippers who buy properties to upgrade and re-sell them at a profit need to estimate how much holding costs will eat into their profit margins, such as mortgage interest, property insurance, and maintenance.

Sale A-When provides information about how different upgrades to a property could impact the days-on-market. Information about the full days-on-market distribution is also provided so that sellers can make appropriate contingency plans for every eventuality.

## Screenshot

<img src=""saleawhen_screenshot.png"" />

## Tech/framework used

<b>Built with</b>
- [Python](https://www.python.org/)
- [Flask](https://flask.pocoo.org/)

## License
GNU General Public License v3

GNU ¬© [Sheldon Campbell](https://www.github.com/shscampbell/)",1,1,1,0,real-estate,"[calgary, real-estate, sales, survival-prediction, webapp]",0
ayanmaity93,real-estate-demo,,https://github.com/ayanmaity93/real-estate-demo,https://api.github.com/repos/real-estate-demo/ayanmaity93,Real Estate Sample,"React JS Real Estate Sample Project

Live Demo: https://master.d1pp3vl5jt9see.amplifyapp.com/


Alternate Link: https://ayanmaity93.github.io/real-estate-demo/

Recommended Softwares
----------------------------
1) Git
2) Node.js
3) create-react-app
4) Microsoft Visual Studio Code (IDE)
",1,1,1,3,real-estate,"[hooks, react-burger-menu, react-countup, react-responsive-carousel, react-router-dom, reactjs, real-estate]",0
thanhdtnguyen,Tokyo-House-Prices-Analysis-Project,,https://github.com/thanhdtnguyen/Tokyo-House-Prices-Analysis-Project,https://api.github.com/repos/Tokyo-House-Prices-Analysis-Project/thanhdtnguyen,"Analyzing and predicting the value of houses in Tokyo, Japan using machine learning techniques.","# Tokyo-Real-Estate-Analysis-Project 

Tokyo is the capital and the most populus city of Japan. The price of residential area in Tokyo has an average increase of 2.5% for the past 7 consecutive years. Specifically, Toshima-ku's land price increased by 10.9% compared to 1 year before. It is the second-highest increase in price among Tokyo's residential areas. _(Reference: https://www.realestate-tokyo.com/news/standard-land-prices-tokyo-2019/)_

This project is a part of my undergraduate seminar in data science. In this project, I used the data from the Land General Information System of the Japanese Ministry of Land, Infrastructure, Transport, and Tourism to analyze the real estate landscape of two wards of Tokyo, Toshima Ward and Suginami Ward. 

The goal is to predict house prices by training various ML models and selecting the one with the best performance. 

### Data Source: https://www.land.mlit.go.jp/webland_english/servlet/MainServlet

### What I did in this project:
1. Data collection and cleaning.
2. Exploratory data analysis.
3. Feature engineering.
4. Statistical analysis and visualization.
5. Data analysis with multiple machine learning algorithms.

### Suginami Models' Performances - Prediction Errors 
![image](https://user-images.githubusercontent.com/36881258/112401891-cfe83800-8d4e-11eb-8434-e7264900b4e3.png)

(Mar 25, 2021)
",1,1,1,0,real-estate,"[data-analysis, machine-learning, price-prediction, real-estate, tokyo]",0
anant-357,DBMS_IIITG_Project,,https://github.com/anant-357/DBMS_IIITG_Project,https://api.github.com/repos/DBMS_IIITG_Project/anant-357,Real Estate Website made with flask as a project,"# **Nimbus Aurora**
#### **`Your sanctuary in the clouds`**
Together, ""Nimbus Aurora"" can be interpreted as a name that combines the meanings of both words to evoke a sense of natural beauty and wonder. Our real estate project aims to provide a tranquil and inspiring environment with a focus on eco-friendlieness and sustainable design.

## Entity Relationship Diagram

![alt text](https://github.com/anant-357/DBMS_IIITG_Project/blob/main/documentation/ER.png?raw=true)


## Relationship Schema

![alt text](https://github.com/anant-357/DBMS_IIITG_Project/blob/main/documentation/RS.png?raw=true)

## Execution
1. Clone the repository
```
   git clone https://github.com/anant-357/DBMS_IIITG_Project.git
   cd DBMS_IIITG_Project
```
   
2. Source
``` 
    source .RealEstateWebsite-env/bin/activate 
```
3. Run
``` 
    python main.py 
```

## Contribution
To Contribute, click on the 'fork' option in the top right corner.
Make your changes in the forked repository.
Pull request.

### Contirbutors
  ADITI AGARWAL\
  AMAN YADAV\
  AMRITJOT KAUR CHAWLA\
  ANANT SHARMA\
",1,1,1,0,real-estate,"[dbms, iiitg, project, real-estate]",0
rahulguptagzb09,Scraping-Real-Estate-Property-Data-From-Web-Using-Python,,https://github.com/rahulguptagzb09/Scraping-Real-Estate-Property-Data-From-Web-Using-Python,https://api.github.com/repos/Scraping-Real-Estate-Property-Data-From-Web-Using-Python/rahulguptagzb09,"Scraping Real Estate Property Data From Web Using Python, BeautifulSoup","# Scraping-Real-Estate-Property-Data-From-Web-Using-Python
Scraping Real Estate Property Data From Web Using Python, BeautifulSoup
",1,1,1,0,real-estate,"[beautifulsoup, pandas, python, real-estate, requests, scraping-websites]",0
qaninjas,upnest-automation,,https://github.com/qaninjas/upnest-automation,https://api.github.com/repos/upnest-automation/qaninjas,Real Estate web application automation in java,"### Selenium Framework with Cucumber

BDD framework for automation using Selenium Cucumber and TestNg

The framework has following features 

1. Modular Design
2. Maven based framework
3. Log4j enabled for logging
4. Report Generation (cucumber-reporting) 
5. Helper class to handle web component such as (Button,Link etc)
6. Centralized Configuration (Using Properties file)
7. POM
8. Hooks for different browser support (using tag @chrome,@firefox...)

### Here is the basic code:

To use the class for handling the web component create the object and use it

```java
	GridHelper grid = new GridHelper(driver);
	grid.typeInGrid(item,GridLocator.cartId,1,1,qty);
```

### Add the Feature file 

Add the feature file under `test\resources\featurefile`

```java
Feature: Adding a laptop to the Cart

  @chrome
  Scenario: Search Laptop and add it to the cart
    Given : I am at the home page
    When : I click on the ""Laptops"" search filter
    Then : I should be at the ""Laptops"" search page with ""35 items""
    And : The title should be ""Laptops"" search page
    Then : I select the ""APPLE MacBook Pro Retina"" with description as ""15-inch, 256GB""
    And : Add it to the cart
    Then : Navigate to user details page and provide the following details
      | Destination | Singapore  |
      | Airline     | AirAsia    |
      | FlightNo    | A089       |
      | FlightDate  | 24/08/2016 |
      | FlightTime  | 5:00       |
      | Terminal    | Terminal 1 |
      | FirstName   | Selenium   |
      | LastName    | Java       |
      | Email       | sq@j.com   |
      | Phone       |  121212121 |
```

use the tag `@chrome` to launch the specific browser or no-tag to use the browser form the `config.properties` file

### Create the Runner

```java
/**
 * @author krana
 *	
 */
package com.cucumber.framework.runner;

import cucumber.api.CucumberOptions;
import cucumber.api.testng.AbstractTestNGCucumberTests;

@CucumberOptions(features = { ""classpath:featurefile/Search.feature"" }, glue = {
		""classpath:com.cucumber.framework.stepdefinition"",
		""classpath:com.cucumber.framework.helper"" }, plugin = { ""pretty"",
		""json:target/SearchFeatureRunner.json"" })
public class SearchFeatureRunner extends AbstractTestNGCucumberTests {
}
``` 

### Use the testng.xml file to run the test cases

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE suite SYSTEM ""http://testng.org/testng-1.0.dtd"">
<suite name=""Suite"">
	<listeners>
		<listener
			class-name=""com.cucumber.framework.listeners.reportlistener.CucumberReport"" />
	</listeners>
	<test name=""Test - 1"">
		<classes>
			<class name=""com.cucumber.framework.runner.SearchFeatureRunner"" />
			<class name=""com.cucumber.framework.runner.LaptopFeatureRunner"" />
			<class name=""com.cucumber.framework.runner.TabletFeatureRunner"" />
			<class name=""com.cucumber.framework.runner.SearchWithFilterRunner"" />
		</classes>
	</test>
</suite> 
```

### To see this whole thing running simply checkout this project and run this command:

`mvn clean generate-sources test`

### Cucumber Report

There is a feature overview page:

![feature overview page](https://github.com/damianszczepanik/cucumber-reporting/raw/master/.README/feature-overview.png)

And there are also feature specific results pages:

![feature specific page passing](https://github.com/damianszczepanik/cucumber-reporting/raw/master/.README/feature-passed.png)

And useful information for failures:

![feature specific page passing](https://github.com/damianszczepanik/cucumber-reporting/raw/master/.README/feature-failed.png)

If you have tags in your cucumber features you can see a tag overview:

![Tag overview](https://github.com/damianszczepanik/cucumber-reporting/raw/master/.README/tag-overview.png)

And you can drill down into tag specific reports:

![Tag report](https://github.com/damianszczepanik/cucumber-reporting/raw/master/.README/tag-report.png)


",1,1,2,1,real-estate,"[automation-framework, cucumber-framework, cucumber-java, real-estate, selenium-java, selenium-webdriver]",0
sunxysharma,Real-Estate,,https://github.com/sunxysharma/Real-Estate,https://api.github.com/repos/Real-Estate/sunxysharma,Real Estate ,"# Real-Estate

Site link https://realproperty.herokuapp.com/
",1,1,2,0,real-estate,"[django, django-application, django-framework, django-project, python3, real-estate]",0
karthikmprakash,Mysore-Real-Estate-Analysis,,https://github.com/karthikmprakash/Mysore-Real-Estate-Analysis,https://api.github.com/repos/Mysore-Real-Estate-Analysis/karthikmprakash,Real-Estate analysis and house evaluation for Mysore City," # Mysore Real-Estate Analysis and House Price Prediction
The aim was to analyse the real estate market and predict the house prices in Mysore, Karnataka. A streamlit web-app is built for better visualization and prediction.

<p align=""center""> <img align=""middle"" width=600px src=""./Images/photo_2021-06-30_14-01-51.jpg"" /></p>

### Data Extraction
* The data is extracted from websites https://housing.com and https://99acres.com
* Only houses and apartment prices were considered leaving behind empty lands and commercial properties

### Data Cleaning
* The raw data is further cleaned resulting in five columns in the file `combined_cleaned.csv` are `Location`, `Beds`, `Price`, `Area`, `PricePerSqft`

### Model Building
* The data features were one-hot encoded for `location` and `Number of beds` and fed to the model.
* Linear Regression performed the worst as expected for a small dataset
* `gridsearchcv` was performed and was inferred that decision tree algorithm performed the best among `linear, lasso, decisionTree` algorithms. Later, `randomforestRegressor` was used to increase the accuracy.

### Deployment
Streamlit offers a great platform to host webapps easily. 

### REFERENCES
* https://www.geeksforgeeks.org/random-forest-regression-in-python/ 
* https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html 
* https://medium.com/analytics-vidhya/predicting-house-prices-using-classical-machine-learning-and-deep-learning-techniques-ad4e55945e2d 
* https://housing.com/ 
* https://99acres.com 
",1,1,1,0,real-estate,"[house, machine-learning, prediction-model, random-forest, real-estate]",0
RezaAmd,House-Agency,,https://github.com/RezaAmd/House-Agency,https://api.github.com/repos/House-Agency/RezaAmd,Personal Real Estate website with asp.net core 6.,"# House Agency (Api Service)
An personal Real-Estate webservice with asp.net 6.
",1,1,1,0,real-estate,"[house-agency, personal-website, real-estate]",0
mohph197,IGL-Backend,,https://github.com/mohph197/IGL-Backend,https://api.github.com/repos/IGL-Backend/mohph197,TP IGL: A Web application for the publication and consultation of real estate advertisements,"# Real Estate Web App Backend (TP IGL)

## Requirements

1. To run the project you need to have **[Python 3.x](https://www.python.org/downloads/)**
1. To host the database install mysql in your machine and import/run **[This File](./db_structure.sql)**
1. For google authentication you need to download the file **client_secret.json** associated to your google app and place it in the following path:
   > /app/auth/client_secret.json
1. To run functional tests you need the following:
   1. Make sure you have **[Google Chrome Browser](https://www.google.com/chrome/)** installed in your environment
   1. Download the chrome driver with a version similar to your chrome version\
      Download link: **[Chrome Drivers](https://chromedriver.chromium.org/downloads)**

## Environement Variables

1. Create the **.env** file:
   ```bash
   cp .env.example .env
   ```
1. Add the following variables to your **.env** file:
   - **GOOGLE_CLIENT_ID**: The client id of your google app (for google login)
   - **HOST_URL**: The url where your backend app is hosted
   - **DATABASE_URL**: The url of your database
   - **SECRET_KEY**: A secret key of your choice
   - **JWT_ALGORITHM**: The algorithm used to encode the jwt token (HS256, RS256, etc...)
   - **CHROME_WEB_DRIVER_PATH**: The path to the chrome driver we downloaded earlier
   - **FRONTEND_URL**: The url of your frontend app
   - **TEST_TOKEN**: A valid jwt token to be used in functional tests (you can generate one using the **/auth** endpoint)

## Install Dependencies

```bash
pip install -r requirements.txt
```

## Run The App

```bash
python run.py
```

## Run Tests

- Make sure your backend and frontend apps are running (for functional tests)
- This command will run all the tests (unit and functional):

```bash
pytest -v
```
",1,1,1,0,real-estate,"[flask, mysql, real-estate, selenium, socket-io, unit-testing]",0
alt-sandip-baikare,contentstack-realestate,,https://github.com/alt-sandip-baikare/contentstack-realestate,https://api.github.com/repos/contentstack-realestate/alt-sandip-baikare,This is project with build with contentstack headless css and frontend is build with Nextjs. ,"This is real estate project I have created for POC to integrate the Contactstack with NextJS.
This project covers most of the fields provided in Contactstack and tried to integrate that with the frontend.

## Tech Stack
- Contactstack Headless CMS (Backend)
- NextJS - 13.1.2 (Frontend)
- Bootstrap - 5.2 (UI)

## About Contenstack

Contentstack is a headless CMS that touts itself a platform that can build the best digital experience for web, mobile, IoT, AR and VR."" It was crafted by Built.io, the vendor behind an API-first enterprise suite of products including Flow, a Platform-as-a-Service, Backend, a Mobile-Backend-as-a-Service, and Contentstack, the headless CMS

For more information you can read the [contenstack documentation](https://www.contentstack.com/docs/)


## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```
## NextJS


Open [http://localhost:3010](http://localhost:3010) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Screenshots
#### Home Page
![Home Page]( ./public/Home.png?raw=true ""Home Page"")

#### Properties
![All-Properties]( ./public/All-Properties.png?raw=true ""All-Properties"")


#### Properties Details
![Real-Estate-Details-page]( ./public/Sunshine-Paradise-Real-Estate-Details-page.png?raw=true ""Real-Estate-Details-page"")

#### About
![About Page]( ./public/About.png?raw=true ""About Page"")

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",1,1,1,0,real-estate,"[bootstrap5, cms, contentstack, contentstack-github, enterprisecms, headless-cms, nextjs, real-estate, real-estate-website]",0
RichieGarafola,Redfin-NewYorkHousingMarket,,https://github.com/RichieGarafola/Redfin-NewYorkHousingMarket,https://api.github.com/repos/Redfin-NewYorkHousingMarket/RichieGarafola,"This is a large dataset of nearly 7 million rows! Is the Housing Market crashing? Housing market data is most useful at the zip code level. The housing market data will include features such as sale price, homes sold, new listings, days on market, and price drops. This project includes a Tableau Dashboard (link is attached to the readme!)  ","# New York Housing Market - Redfin

![NYC Counties](Images/NYSRegionalMap.jpg)

*How do you know if it is a good time to buy or sell real estate?*

There are numerous factors that contribute to the health of a real estate market including median sale price, homes sold, new listings, median days on market, price drops, etc.

The housing market data is stored in the MLS (multiple listing services). Access to the MLS requires a real estate license for that particular region.

*How do we get monthly housing data if we are not licensed agents?*

We can use online brokerages, such as Redfin, that consolidate housing market data nationwide on a monthly basis down to the zip code level.


Redfin is a real estate brokerage, meaning we have direct access to data from local multiple listing services (MLS), as well as insight from our real estate agents across the country. That‚Äôs why we‚Äôre able to use the earliest and most reliable data on the state of the housing market. Using these tools, we can visualize and download housing market data for metropolitan areas, cities, neighborhoods and zip codes across the nation.

The first part of this project we will get housing market data for a list of zip codes using Python. 

The data will then be visualized in Tableau.

---

**Problem Statement**

We need to answer whether the housing market is crashing or not?

We understand housing market data is most useful at the zip code level, therefore we need up-to-date data for all zip codes in our districted county.

The housing market data will include features such as sale price, homes sold, new listings, days on market, and price drops.

The data should be updated on weekly basis and be computed on a 12-week window.

**This will allow us to gauge whether our housing market is shifting to a buyer‚Äôs or seller‚Äôs market!**

---

## Data Source

We will use the Zip Code Region Data from Redfin‚Äôs Data Center.
    
    'https://redfin-public-data.s3.us-west-2.amazonaws.com/redfin_market_tracker/zip_code_market_tracker.tsv000.gz'

---    
    
## 1. Import Libraries

First, import the required libraries.

    - pandas
    - datetime
    - time
    - warnings
    
---    
    
## 2. Data
Read in Housing Data File

The Redfin monthly housing data file is broken out into seven regions: National, Metro, State, County, City, Zip Code, and Neighborhood.

For our use case, we will focus on the zip code dataset.


To locate the file navigate to Redfin‚Äôs Data Center. 

https://www.redfin.com/news/data-center/

Right-click ""Zip Code"" to locate the link address.

![Zip code data](Images/zipCodeData.png)

---

## 3. Data Loading

In the notebook, we will read the file within memory. This allows us to read our file from within our environment without having to download the file locally.

The zip code dataset is in a tsv000.gz format. We use pandas to read in the file from our URL.
we can use the pandas read_csv() function to accomplish this.

![Read in Data](Images/readInData.png)

The file taakes nearly 6 minutes to load! 
The dataset includes: **6.6+ million rows of data and 50+ columns!**

---

Below is the comprehensive list of the features in our dataset:


**median_sale_price:** The final home sale price covering all homes with a sale date during a given time period where 50% of the sales were above this price and 50% were below this price.

**median_list_price:** The most recent listing price covering all homes with a listing date during a given time period where 50% of the active listings were above this price and 50% were below this price.

**median_ppsf:** The median list price per square foot of all active listings.

**homes_sold:** Total number of homes with a sale date during a given time period.

**pending_sales:** Total homes that went under contract during the period. Excludes homes that were on the market longer than 90 days.

**new_listings:** Total number of homes with a listing added date during a given time period.

**inventory:** Total number of active listings on the last day a given time period.

**months_of_supply**: When data are monthly, it is inventory divided by home sales. This tells you how long it would take supply to be bought up if no new homes came on the market.

**median_dom:** The number of days between the date the home was listed for sale and when the home went off-market/pending sale covering all homes with an off-market date during a given time period where 50% of the off-market homes sat longer on the market and 50% went off the market faster. Excludes homes that sat on the market for more than 1 year.

**avg_sale_to_list:** The mean ratio of each homes sale price divided by their list price covering all homes with a sale date during a given time period. Excludes properties with a sale price 50%

**sold_above_list:** The percent of homes sales with a sale price greater than their latest list price covering all homes with a sale date during a given time period. Excludes properties with a sale price 50% above the listing price or with a sale price 50% below the list price.

**price_drops:** How many listings dropped their price in a given time period.

**off_market_in_two_weeks:** The total number of homes that went under contract within two weeks of their listing date.

Source: Redfin Data Center Metrics Definitions
https://www.redfin.com/news/data-center-metrics-definitions/

---

Let‚Äôs filter down our dataset on a state of interest. Here we select ""NY"" for New York.
![State Filter](Images/stateFilter.png)

*This reduces our dataset by ~93%! Our dataset is now much easier to work with.*

---

## 4. Data Merging

For our use case, we will select a handful of zip codes to review. Therefore, we read in the geography dataset from Github to map zip code, county, and state.

It is best practice in data analysis to start with a sample set before applying logic to an entire dataset.

![Sample Data](Images/SampleDataset.png)

For our analysis, let‚Äôs imagine our market is Suffolk County, on Long Island in New York. Therefore, we only want to focus in on counties that include and surround the city.

![NYC Counties](Images/NYSRegionalMap.jpg)

Now we filter down the geography dataset to only include zip codes within the counties of interest.

![Filtered Zipcodes](Images/filteredZips.png)
![Invalid Zipcodes](Images/invalidZips.png)


Remove the invalid zip codes to produce a clean dataset of geographies within our interested counties.
![clean Zipcodes](Images/cleanZips.png)


Next, we add a feature zipcode from our housing dataset to extract zip code from the region field.

This allows us to join our housing dataset to our geography dataset of zip codes we care about.

![Zipcode Feature](Images/zipFeature.png)

---

## 5. Data Cleansing

Best practice in data analysis is to review and sample data at the granular level to confirm validity.

Here we filter on a single zip code and property type.
![Isolate Singular Zipcode](Images/11763.png)

---

## 6. Features

There are three features that we add to our dataset:

**latest_period:** Flag for the latest time period in our dataset.
**city:** Drop duplicate columns from the DataFrame merge
**median_dom_mom:** Recalculating median days on market MoM to fix bad data.

![Add Features](Images/addFeatures.png)

--- 

### We have officially cleansed and filtered our dataset that is ready to be analyzed through visualizations!


### Tableau Visualization :

https://public.tableau.com/app/profile/richie6436/viz/RealEstateMarketAnalysis_16694993803010/Dashboard1?publish=yes

![Tableau](Images/tableauDashboard.png)

---

## Conclusion

Redfin‚Äôs free housing market dataset is an incredible resource to analyze data at the zip code level.

Using housing market datasets alongside visualization tools like Tableau can provide insight on how your real estate market is performing and what future trends exist.",1,1,1,0,real-estate,"[big-data, housing-market, new-york, python, real-estate, tableau]",0
CHUKWUKA-EMI,PropertyForagerApp,,https://github.com/CHUKWUKA-EMI/PropertyForagerApp,https://api.github.com/repos/PropertyForagerApp/CHUKWUKA-EMI,"Property forager is a platform where prospective tenants search for properties available for rent, and connect with property owners and agents. The platform also makes it easy for Property owners/agents to manage leasehold, tenants, and payments.","This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",1,1,1,1,real-estate,"[leasehold, nextjs, properties, react, real-estate, real-estate-management, rentals]",0
argjv,eth-realtor,,https://github.com/argjv/eth-realtor,https://api.github.com/repos/eth-realtor/argjv,,"# eth-realtor (FrontEnd)

The project aims to simplify the process of managing real estate properties by using ethereum smart contracts to replace paper trail and legacy processes.

## Requirements

* Truffle
* Ganache
* NodeJS

## Run the project

1. Start ganache and verify it is serving in http://127.0.0.1:7545
2. Go to the root folder and compile and upload the ethereum contracts into the test network managed by Ganache:

```shell
truffle compile
truffle migrate
```

3. Start the server:

```shell
npm run start
```

This will start a server in http://localhost:3001 or in the next available port if it's in use.

> NOTE: Make sure that api-realtor is running on port 3000, clone the repository from https://github.com/argjv/api-realtor
",1,1,4,1,real-estate,"[ethereum, real-estate]",0
dmpe,django-wohn,,https://github.com/dmpe/django-wohn,https://api.github.com/repos/django-wohn/dmpe,Property portal in Django 3 for CZ - Documentation @ https://dmpe.github.io/django-wohn/,"[![image](https://img.shields.io/github/license/dmpe/django-wohn)](https://github.com/dmpe/django-wohn/LICENSE)
[![Build Status](https://johnmalc.visualstudio.com/DJango-Wohn/_apis/build/status/dmpe.django-wohn?branchName=master)](https://johnmalc.visualstudio.com/DJango-Wohn/_build/latest?definitionId=7&branchName=master)
[![CircleCI](https://circleci.com/gh/dmpe/django-wohn/tree/master.svg?style=svg)](https://circleci.com/gh/dmpe/django-wohn/tree/master)
![GitHub language count](https://img.shields.io/github/languages/count/dmpe/django-wohn)
[![Requirements Status](https://requires.io/github/dmpe/django-wohn/requirements.svg?branch=master)](https://requires.io/github/dmpe/django-wohn/requirements/?branch=master)
![GitHub repo size](https://img.shields.io/github/repo-size/dmpe/django-wohn)
![Docker Pulls](https://img.shields.io/docker/pulls/f789gh/django-wohn)
![Docker Automated](https://img.shields.io/docker/automated/f789gh/django-wohn)
[![Docker Repository on Quay](https://quay.io/repository/dmpe/django-wohn-frontend/status ""Docker Repository on Quay"")](https://quay.io/repository/dmpe/django-wohn-frontend)
[![GitHub closed pull requests](https://img.shields.io/github/issues-pr-closed-raw/dmpe/django-wohn)](https://github.com/dmpe/django-wohn/pulls?q=is%3Apr+is%3Aclosed)
[![HSTS Domain](https://img.shields.io/hsts/preload/monitor.melive.xyz)](https://dev.ssllabs.com/ssltest/analyze.html?d=monitor.melive.xyz&hideResults=on)
![Mozilla HTTP Observatory Grade](https://img.shields.io/mozilla-observatory/grade-score/monitor.melive.xyz?publish)
![GitHub commit activity](https://img.shields.io/github/commit-activity/w/dmpe/django-wohn)

[![Quality gate](https://sonarcloud.io/api/project_badges/quality_gate?project=dmpe_django-wohn)](https://sonarcloud.io/dashboard?id=dmpe_django-wohn)

# Python 3 / Django 2-based real-estate website

:heavy_exclamation_mark: This has been developed for learning Django 2+ & Python 3+ & Microsoft Azure & DevOps (Docker, Traefik, etc.) and many other new technologies.
This project is in the state of development.

:triangular_flag_on_post: To create something akin to <https://www.wg-gesucht.de> which would provide students and landlords a way to advertise their free rooms.

The ""source of creating such web application"" was an article <https://www.respekt.cz/sousede/nekolik-nezavislych-lidi-bydli-v-jednom-pronajatem-byte>.

**Briefly:** In the Czech Republic, there are a lot of real-estate portals but very few exist which are dedicated to just student housing.
Facebook/Social media and university forums are addressing the need in this space.

Compared to <https://www.wg-gesucht.de> (in Germany), in a similar form and scale there is nothing* and thus the objective is to create a web application which fills the gap.

`*` Never say never.
",1,1,2,29,real-estate,"[apartment, azure-devops, azure-functions, azure-pipelines, bootstrap4, django, django2, docker, nginx, postgresql, real-estate, real-estate-portals, students, traefik, vuejs, wg-gesucht]",0
apehex,adspying,,https://github.com/apehex/adspying,https://api.github.com/repos/adspying/apehex,:dart: Find the most relevant ads among a range of web sources,,1,1,2,0,real-estate,"[ads, real-estate, scraping, scrapy-crawler, second-hand, vanlife]",0
tlemenestrel,France_Real_Estate_Prices_Prediction,,https://github.com/tlemenestrel/France_Real_Estate_Prices_Prediction,https://api.github.com/repos/France_Real_Estate_Prices_Prediction/tlemenestrel,A Machine Learning Model to predict real estate prices in France using XGBoost Regression in Python.,"![Image of a scraper](https://github.com/tlemenestrel/France_Real_Estate_Prices_Prediction/blob/master/Images/bordeaux.jpg)

# Predicting real estate prices in France using XGBoost 

This project is a Machine Learning model to predict real estate prices of properties across France. It is a supervised regression task. The model used for this project is XGBoost.

## Dataset

The dataset contains the data of 350+ real-estate properties across France. The features are:

* the city where the property is located (Aix-En-Provence, Vincennes, Toulouse, Paris, Marseille, Manosque, Lyon, Issy-Les-Moulineaux, Gif Sur Yvette, Enghien Les Bains or Bourg La Reine)

* the region (Paca, Ile de France or Sud Ouest)

* the type (F1, F2, F3, F4, F5, F6, F7)

* the area in square metres 

* the rent per year in ‚Ç¨  

* the price of the property in ‚Ç¨

## Features importance

![Image of features importance](https://github.com/tlemenestrel/France_Real_Estate_Prices_Prediction/blob/master/Images/xgboost_features_importance.png)

For this dataset, the two most dominant features are clearly the annual rent and the area of the property, which is expected for a regression model on real estate prices. The other features help to fine-tune the accuracy of the model.

## How to download a copy of the project

To download a copy of the project, just go on the main page of the project on GitHub, click on **""Clone or download""** and then **""Download ZIP""**. 

After this, you should be able to run the project using Jupyter Notebook.

## Libraries to install

* [Jupyter Notebook](https://jupyter.org/install)
* [pandas](https://pandas.pydata.org/pandas-docs/stable/getting_started/install.html)
* [numPy](https://numpy.org)
* [Seaborn](https://pypi.org/project/seaborn/)
* [Matplotlib](https://matplotlib.org/users/installing.html)
* [scikit-learn](https://scikit-learn.org/stable/install.html)
* [XGBoost](https://xgboost.readthedocs.io/en/latest/build.html)
* [graphviz](https://pypi.org/project/graphviz/)

## Author

* **Thomas Le Menestrel** 

## License

This project is licensed under the MIT License - see the [LICENSE](https://github.com/tlemenestrel/France_Real_Estate_Prices_Prediction/blob/master/LICENSE) file for details
",1,1,2,0,real-estate,"[machine-learning, matplotlib, numpy, pandas, python, real-estate, regression, scikit-learn, seaborn, xgboost]",0
YasserElsedawy,real_estate_scraping,,https://github.com/YasserElsedawy/real_estate_scraping,https://api.github.com/repos/real_estate_scraping/YasserElsedawy,COVID-19 impacts on the real estate market in Milan and Italy,"# real_estate_scraping

How COVID-19 will impact the real estate market in Italy is hard to predict. The real estate industry is being hit by the coronavirus, and it‚Äôs going to get worse before it gets better. The effects on real estate will vary by sector and market, and the extent of the effects will depend upon the duration of the economic shutdown.

The sectors of real estate that have been hit hardest so far are hotels, restaurants, bars and other entertainment destinations followed closely by retail and housing.

In this project we will be investigating the trend of residential real estate sector in Milan, Italy, before and after the coronavirus outbreak, in particular before and after Feb 21st. The residential sector focuses on the buying, selling and rental of properties used as homes or for non-professional purposes. The residential real estate sector is comprised of single-family homes, apartments, condominiums, planned unit developments, and more.

We will be scrapping the data from kijiji.it for all the available renting apartments offerings or postings on the platform from January 1st until April 15th. kijiji is an online advertising service fully owned subsidiary of eBay launched in February 2005. Kijiji websites are available for more than 100 cities in Canada and Italy.

 
",1,1,1,0,real-estate,"[italy, milano, real-estate, realestate, scraping, webscraping]",0
ellenrud84,RealEstateApp,,https://github.com/ellenrud84/RealEstateApp,https://api.github.com/repos/RealEstateApp/ellenrud84,"A website that allows the user to assess real estate opportunities in Houston, TX on the neighborhood level, based on their inputs regarding crime, sq-ft, school ratings, acreage, etc.","# Real Estate Investment Dashboard

## Project Goal
Real Estate investment research is time consuming because of the lack of a single place to find all the information related to home value tendencies, school ratings, flood zones, crime rate and amount of transactions happening per zip code in Houston. The following dashboard responds to an investor with a ranking of neighborhoods in 9 Zip Codes in the Houston area to invest in. The ranking depends on the investor preferences in terms of budget and importance of 7 parameters: tolerance to crime, tolerance to risk, home sales, school ratings, acreage, % of value increase of the property and SQ-FT.

## General Workflow
The coding approach was divided in 4 main components:
* 1-	Database: Postgres Database was used to store 9 tables with a total of 150,000 rows where data related to single family properties in 9 selected Zip_Codes in Houston is stored. The data contains property description such as address, latititude, longitude, value, sq_ft, acreage, flood zone, crime risk and schools ratings. This database runs in Heroku cloud server.
* 2-	Python: Python calls the SQL database, where most of the data is filtered and merged in SQL. Then, calculations are done to generate a ranking of the neighborhoods to invest in depending on users criteria.
* 3-	Python Flask: the development of the web application is done thru the Flask web framework. 2 routes were created: 1 for the main page and a second one for the results page.
* 4-	Visualization: HTML and CSS files were generated to create the visualization of the results, using a combination of bootstrap, leaflet and d3.

## Data Used
* School Ratings: 
Source: https://texasschoolguide.org/school-rankings/ 
Download: CSV file
* National Flood Data: 
Source: http://nationalflooddata.com/flood/floodapi/ 
Web request API using street addresses from HCAD dataset
* Harris County Appraisal District (HCAD): 
Source: https://pdata.hcad.org/download/2019
Download: ZIP folders comprised of text files and csv files
* Crime:
Source: https://www.houstontx.gov/police/cs/Monthly_Crime_Data_by_Street_and_Police_Beat.htm
Download: CSV file
* Shape files for layers: https://cohgis-mycity.opendata.arcgis.com/


## Detailed Description

### Database
A Heroku-Postgres database was created based on the following ETL diagram. The data consisted of 9 tables with a total of 150,000 row swhere data related to single family properties in 9 selected Zip_Codes in Houston is stored. The data contains property description such as address, latititude, longitude, value, sq_ft, acreage, flood zone, crime risk and schools ratings. This database runs in Heroku cloud server.
![Figure1](Images/ETL.png)

## Python layer
Python processes the data to calculate the 5 top neighborhoods for investment based on the users selected preferences. Python outputs a json file.

## Flask web framework
Python Flask was used for the development of the web application. 2 routes were created, one for the home page and another one for the process of the results.

## Visualizations
### Homepage
* The main part of the screen shows a map with the location of the 9 zip codes of interest.
* The user can view the boundaries and popup information of each of these parameters in a layer.
* The banner in the left, allows the user to go thru the preferences for max budget and the importance for decision about sales frequency, school ratings, crime, flood, value increase of the property, acreage and sq_ft.
* The user presses submit, which triggers the Python processing layer.
* The code then accesses the database and pulls only the data relevant to properties less than the users selected budget.
* The code further processes this data based on the users other input preferences and ranks the neighborhoods.
* The results visualizations are triggered.

![Figure2](Images/Page1.GIF)

### Results Page
The code outputs visualizations of the top 5 neighborhoods in the ZIP Codes available and ranked based on the user criteria.

While the data is processing from the user inputs a progress bar is shown.  The duration of the progress bar animation is based on average load time for the program.

Once the data is ready, the visualizations are loaded.

The visualizations consist of:
1) A map showing the top 5 nieghborhoods locations, with popups for more info about each neighborhood
2) A horizontal bar chart showing the total scores of each neighborhood based on the users inputs.  This chart shows more info when the user hovers over each bar.
3) An interactive bar chart, where the output is determined by the users choice in a dropdown menu.  The bars show more information when the user hovers over them.
4) A table showing the scores for each parameter of each of top 5 neighborhoods calculated from the database information and the users ranks of parameter preference.

The user can also access the raw json data from the api through a multi parameter or budget route.  The accessible API routes are listed when
the user clicks the ""APIs"" tag on the top navigation menu.

![Figure3](Images/Page2.jpg)
",1,1,1,0,real-estate,"[acreage, crime, houston, real-estate, schools-ratings, sq-ft]",0
SoniSiddharth,ML-Decision-Trees-from-scratch,,https://github.com/SoniSiddharth/ML-Decision-Trees-from-scratch,https://api.github.com/repos/ML-Decision-Trees-from-scratch/SoniSiddharth,Machine Learning - Decision tree model implementation from scratch,"# Decision Trees and Random Forests ‚≠êüå≥‚≠ê

## Directory Structure: üìÅ

```
‚îÇ   ADABoost_test.py
‚îÇ   assignment_q4_subjective_answers.md
‚îÇ   Bagging_test.py
‚îÇ   estate-experiments.py
‚îÇ   experiments.py
‚îÇ   iris-experiments.py
‚îÇ   Makefile
‚îÇ   metrics.py
‚îÇ   Random_forest.py
‚îÇ   random_forest_iris.py
‚îÇ   README.md
‚îÇ   realestate.csv
‚îÇ   usage.py
‚îÇ
‚îú‚îÄ‚îÄ‚îÄensemble
‚îÇ       ADABoost.py
‚îÇ       bagging.py
‚îÇ       __init__.py
‚îÇ
‚îú‚îÄ‚îÄ‚îÄimages
‚îÇ
‚îî‚îÄ‚îÄ‚îÄtree
        base.py
        randomForest.py
        utils.py
        __init__.py

```


## Instructions to run üèÉ 

```make help```
```make decision_tree```
```make iris```
```make real_estate```
```make experiments```
```make adaboost```
```make bagging```
```make random_forest```
```make random_forest_iris```


## Time and Sampling plots: ‚è∞ 

### DIDO Training

![alt text](images/experiments_train_DIDO.png?raw=true)

### DIDO Prediction

![alt text](images/experiments_predict_DIDO.png?raw=true)

### DIRO Training

![alt text](images/experiments_train_DIRO.png?raw=true)

### DIRO Prediction

![alt text](images/experiments_predict_DIRO.png?raw=true)

### RIDO Training

![alt text](images/experiments_train_RIDO.png?raw=true)

### RIDO Prediction

![alt text](images/experiments_predict_RIDO.png?raw=true)

### RIRO Training

![alt text](images/experiments_train_RIRO.png?raw=true)

### RIRO Prediction

![alt text](images/experiments_predict_RIRO.png?raw=true)

## Adaboost: üí•

### Decision Tree Estimator Plot
![alt text](images/ADABoostpart1tree.png?raw=true)

### All Estimators Individual Decision Surface
![alt text](images/ADABoost_estimators_surfacepart1.png?raw=true)

### Combined Decision Surfaces
![alt text](images/ADABoost_combined_surfacespart1.png?raw=true)

- IRIS Dataset

### Decision Tree Estimator PLot
![alt text](images/ADABoostpart2_iristree.png?raw=true)

### All Estimators Individual Decision Surface
![alt text](images/ADABoost_estimators_surfacepart2_iris.png?raw=true)

### Combined Decision Surfaces
![alt text](images/ADABoost_combined_surfacespart2_iris.png?raw=true)

## Bagging: üëä

### Decision Tree Estimator Plot
![alt text](images/Bagging_estimators.png?raw=true)

### All Estimators Individual Decision Surface
![alt text](images/Bagging_combined_surfaces.png?raw=true)

## Random Forest: üå≥üå≥

### Decision Tree Estimator Structure
![alt text](images/Random_forest_tree_structure.png?raw=true)

### All Estimators Individual Decision Surface
![alt text](images/random_forest_individual.png?raw=true)

### Combined Decision Surfaces
![alt text](images/random_forest.png?raw=true)
",1,1,1,0,real-estate,"[adaboost, bagging, decision-trees, iris, machine-learning, ml, random-forest, real-estate]",0
jkaho,inspecti,,https://github.com/jkaho/inspecti,https://api.github.com/repos/inspecti/jkaho,An Australian real estate application built using the MERN stack,"# Inspecti

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## Description

*Inspecti* is an Australian residential real estate application to help users keep up with the property market. Users can search for property listings, take notes on properties, rate properties and share reviews, as well as keep track of past and future property inspections. 

## Table of Contents

- [Motivations](#Motivations)
- [What you can do with Inspecti](#What-you-can-do-with-Inspecti)
- [Testing](#Testing)
- [Technologies used](#Technologies-used)
- [Link to Deployed App](#Link)
- [Screenshots](#Screenshots)
- [License](#License)
- [Questions](#Questions)

## Motivations

This project was made for real estate enthusiasts and anyone else involved in the real estate market who would benefit from having a platform to keep personal notes and records about properties they've inspected, as well as to be able to view other peoples' opinions about certain properties.

## What you can do with Inspecti

**Everyone can:** 
- Search for property listings (for sale)
- View property reviews

**Only members can:** 
- Access a personalised profile/stats page
- Use Inspecti's property note-taking and review-sharing functionality
- Keep a schedule of property events (inspections and auctions)
- Keep a table of previously inspected properties

## Testing 

Use the following login credentials for functionality testing purposes: 

- **Email**: `bobby@email.com`
- **Password**: `password`

## Technologies Used

- React / [Create React App](https://reactjs.org/docs/create-a-new-react-app.html) / JSX 
- JavaScript
- [Node.js](https://nodejs.org/en/)
- [Express](https://expressjs.com/)
- SQL / [Sequelize](https://sequelize.org/)
- [Material-UI](https://material-ui.com/)
- [react-draft-wysiwyg](https://www.npmjs.com/package/react-draft-wysiwyg)
- [DOMPurify](https://www.npmjs.com/package/dompurify)
- [Passport.js](http://www.passportjs.org/)
- [bcrypt](https://www.npmjs.com/package/bcrypt) 
- [FullCalendar React](https://www.npmjs.com/package/@fullcalendar/react)
- [Chart.js](https://www.chartjs.org/docs/latest/)
- [number-abbreviate](https://www.npmjs.com/package/number-abbreviate)
- [Canva](https://www.canva.com/)

## Link 

Link to deployed application: [inspecti.herokuapp.com/](https://inspecti.herokuapp.com/)

## Screenshots

### Homepage
![Inspecti homepage](screenshots/homepage.png)

### Reviews
![Inspecti reviews page](screenshots/review.png)

### Profile (members only)
![Inspecti profile page](screenshots/profile.png)

### Notes & Reviews (members only)
![Inspecti notes page](screenshots/notes.png)

### Inspection Schedule (members only)

#### Monthly View
![Inspecti monthly schedule page](screenshots/monthly.png)

#### Daily View
![Inspecti daily schedule page](screenshots/daily.png)

### Inspected Properties (members only)
![Inspecti inspected properties page](screenshots/inspected.png)

## License

This application is covered under the MIT license.
For more information, [click here](https://opensource.org/licenses/MIT).

## Questions 

**My GitHub Profile:** [jkaho](https://www.github.com/jkaho/inspecti)

If you have any further questions, feel free to email me at [j.h_7@yahoo.com](j.h_7@yahoo.com)
",1,1,1,3,real-estate,"[domain-api, inspected-properties, inspecti, mern-stack, real-estate]",0
rajan-31,HF-Real_Estate_Tx,,https://github.com/rajan-31/HF-Real_Estate_Tx,https://api.github.com/repos/HF-Real_Estate_Tx/rajan-31,"Source code for project ""Blockchain-Based Web Framework for Real Estate Transactions"".","# Blockchain-Based Web Framework for Real Estate Transactions

This repo contains source code for the project ""[Blockchain-Based Web Framework for Real Estate Transactions](https://link.springer.com/chapter/10.1007/978-981-19-3035-5_44)"".

__The research paper was presented in [ICCNCT 2022](http://icocnct.com/2022/), and it later got published in Springer, see [here](https://link.springer.com/chapter/10.1007/978-981-19-3035-5_44).__

As the project was developed progressively in independent parts which were later integrated, in this repo those parts are included as git sub modules.

---
### Authors and Affiliations
Department of IT Engineering, A. P. Shah Institute of Technology, Thane, India

Rajan Khade, Amit Pandey, Aditya Shinde & Neha Deshmukh

### Abstract

The onset of blockchain generation within Bitcoin has generated significant interest by showing an opportunity to eliminate the middle ground need and transform communication between people and machines by increasing trust. Initially restricted to the integrated currency domain, people began to see the power of a generation beyond just the cryptocurrencies, which brought the acceptance of the blockchain era to erase the world‚Äôs problems. One such situation is problems for e-governance companies in other areas of the public sphere. In the scope of this thesis, we have specifically addressed the issues within the traditional property registration system. This thesis discusses the new design and architecture for real estate transactions and implements it using a blockchain-based solution and addressing issues including record integrity, privacy, and most importantly the lack of common platforms among concerned government organizations. The advent of the blockchain era led to the creation of blockchain-enabled platforms like Hyperledger Fabric. It is one of the most popular open-source permissioned blockchain frameworks, created and supported by the Linux Foundation and IBM, used in many industrial scenarios. So, it is used to create a network with one ordering organization with an ordering node and one peer organization with two peer nodes to prove the concept. Chaincode similar to Ethereum‚Äôs smart contract contains the logic to perform all operations and modify the ledger data. All the methods of chaincode are accessed using the Fabric gateway in the web application to perform various operations.",1,1,1,0,real-estate,"[chaincode, hyperledger, hyperledger-fabric, land-records, real-estate]",0
imeleges,REMA_Dubai,,https://github.com/imeleges/REMA_Dubai,https://api.github.com/repos/REMA_Dubai/imeleges,Real Estate Market Analysis in Dubai,"# REMA Dubai

## Residential Rental Real Estate Market Analysis in Dubai, UAE.

**DIFC** (Financial Centre) and **Downtown** areas apartments analysis.

[![Data Analyst](https://img.shields.io/static/v1?label=trend&message=Data%20Analyst&color=218c74)](#) [![Data Scientist](https://img.shields.io/static/v1?label=trend&message=Data%20Scientist&color=706fd3)](#)  

[![Pandas](https://img.shields.io/static/v1?label=tool&message=Pandas&color=40407a)](#) 
[![Python](https://img.shields.io/static/v1?label=tool&message=Python&color=33d9b2)](#) 
[![Matplotlib](https://img.shields.io/static/v1?label=tool&message=Matplotlib&color=706fd3)](#) 
[![Scikit-learn](https://img.shields.io/static/v1?label=tool&message=Sklearn&color=ff793f)](#) 
[![Seaborn](https://img.shields.io/static/v1?label=tool&message=Seaborn&color=ff5252)](#)  

[![Data visualization](https://img.shields.io/static/v1?label=skill&message=Data%20visualization&color=F97F51)](#) 
[![Exploratory data analysis](https://img.shields.io/static/v1?label=skill&message=Exploratory%20Data%20Analysis&color=82589F)](#) 
[![Data preprocessing](https://img.shields.io/static/v1?label=skill&message=Data%20Preprocessing&color=B33771)](#)  

**Problem statement:**  
It is not straight forward for a newcomer to Dubai to understand how prices are assigned to listings. E.g. at first glance several listings of studio and 1 bedroom apartments in the given two areas of Dubai have approximately same yearly price while square area is quite different. Is studio a good value for its money in comparison to 1 bedroom flat?

Questions to answer:  
 - How many options by number of bedrooms are there to choose from? 
 - Do studios, 1 and 2 bedroom flats differ significantly in their square areas and features, what is different about them?
 - ...
  - ...


Data was scraped from **Bayut** website on **August 9, 2022** and saved as **.CSV** file.

## Table of contents
- [About Dataset](#about-dataset)
	- [Content](i#content)
	- [Dataset Glossary](#dataset-glossary-column-wise)
- [Data preprocessing](#data-preprocessing)
- [Exploratory Data Analysis](#exploratory-data-analysis)
	- [Adding new features](#adding-new-features)
	- [Number of uniques per feature](#number-of-unique-values-per-feature)
	- [Prices](#prices)
	- [Area](#area)
	- [Bedrooms](#bedrooms)
- ...


## About Dataset

### Content

In this dataset we have information about **4800+** apartments available for rent in Downtown and DIFC areas of Dubai in August 2022. Listing have different parameters like:  
*rental price, address, number of bedrooms, area in sq.ft., description, building info, amenities, etc.*

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/dataframe.png?raw=true"">
	<sub>Dataset preview</sub>
</p>


### Columns / Features

`price` -  Listed in AED  
`address` - Including the name of the building or/and complex, district, city  
`beds` - Number of bedrooms  
`baths` - Number of bathrooms  
`area-sqft` - Area of the apartment in square feet  
`description-title` - Title of the listing  
`description` - Additional information  
`reference-no` - Reference number on the website  
`date-added` - Publishing date (day, month and year)  
`balcony-size-sqft` - Area of the balcony in square feet  
`parking` - Yes/No   
`building-info-name` - Building name  
`building-info-floors` - Building hight in number of floors  
`building-info-year` - Year when the building was constructed   
`building-info-area-sqft` - Total building area in square feet  
`furnishing` - Furnished/Unfurnished   
`features-amenities` - Additional building/flat features  


<details>
<summary>Dropped columns (click to expand)</summary>

These columns were dropped at the beginning of analysis:

`apartmet-link-href` -  unnecessary for analysis   
`rent-frequency` - only Yearly listings were parsed  
`web-scraper-order` -  unnecessary for analysis   
`web-scraper-start-url` -  unnecessary for analysis   
`pagination` -  unnecessary for analysis   
`apartmet-link` -  unnecessary for analysis but could be added back later   
`building` -  only one name value and the rest is missing values  

</details>

*** 

### Data preprocessing
What was done:
- Many columns contained **missing values** (e.g. number of bathrooms, balcony size, building info, furnishing, etc.) Some had only a few values missing while others a lot. Thos were either filled or the column was dropped altother as it didn't bring value.
- **Data types** were changed to decrease memory usage, e.g price and area columns were converted from object (text) to number and date column - from object to date type.  
- All columns were renamed and blanks were filled with relevant values.

***

### Exploratory Data Analysis

Below is data analysis using visualization to discover trends and patterns, and validate hypothesises.

#### Adding new features

Data enrichment step here is to append or enhance collected data with relevant context obtained from other columns.

`Address` - column containing listing address was split into columns: city, area, building name and tower complex name.  
`Date` - column split into Year, Month, Day and Weekday.   
`Price per square foot` - calculated from listing rental price divided by the area.  
Text containing listing title, description and features/amenities contains keywords some of which were converted into new features:  
`Chiller` - assigned **1** when chiller is free, **0** otherwise. Same for `Parking` and `Bills`.

#### Number of unique values per feature

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/num_of_uniq_pfeature.png?raw=true"">
	<sub>Number of unique values per feature</sub>
</p>

On the diagram above some columns have a high number of unique values ex. **759 options for area in sqrt** while others have much fewer variations ex. **chiller free Yes/No**

#### Prices 

Prices range: 
- start at minimum of 40,000 AED 
- and goes up to 3,000,000 AED, 
- with median value of 180,000 AED.

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/prices_all.png?raw=true"">
	<sub>Prices for all listings</sub>
</p>

Outliers start from price 500,000 and spread up to 3,000,000. Most likely it's a huge apartment with many rooms and that is more luxurious or it's an error.<br><br>

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/prices_logs.png?raw=true"">
	<sub>Log scaled prices</sub>
</p>

Logarithmically scaled prices display data over a very wide range of values in a compact way.<br><br>

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/prices_700_000.png?raw=true"">
	<sub>Prices up to 700,000</sub>
</p>

Look into most common range of prices for every number of bedrooms shows that majority of all listings are between 90,000 and 300,000 AED. With a very noticeable spike for one bedroom apartments at approximately 100,000 AED. This means with budget of 100k there's a much higher number of one bedroom options to choose from than with budget even 5k lower. Also adding nother 5k would not increase number of options much.<br><br>

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/all_bdr_prices_boxplot.png?raw=true"">
	<sub>Prices boxplot</sub>
</p>

Boxplot demonstrates spread and skewness of rental prices by number of bedrooms. This diagram indicates variability outside of the upper and lower quartiles.  

One very noticeable thing is that four-bedroom apartments not only have huge interquartile range, but also very long whiskers on both sides, where left whisker overlaps with median price of three-bedroom listings. This could be another error, possibly smaller total area or a building on the edge of the district.

Interestingly interquartile range for studios and 1 bedroom apartments is almost the same. Studios prices have nearly symmetrical distribution, while 1 bedroom listings distribution has a heavier right tail. That discovery raises a new question, why rent a studio if it's in the same price range as one bedroom listings? Perhaps those studios has larger areas, are located in more prestigious buildings or are furnished. At teh same time, if lower rental price is a prioriy, rgere are studios to choose from. 


#### Area

Area range: 
- start at minimum of 37 sq.ft.,
- and goes up to 6,792 sq.ft.,
- with median value of 1,346 sq.ft.

Area of 37 sq.ft. is obviously an error. Largest areas could be an error too or a misplaced listings that were supposed to be under a commecial category (offices, shops, etc).

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/area_4_500.png?raw=true"">
	<sub>Area in sq.ft. up to 4,500</sub>
</p>

On the diagram above difference in total areas is clearly visible, with just a minor overlap of 1,700-2,000 sq.ft. for 2 and 3 bedroom apartments.<br><br>

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/all_bdr_area_boxplot.png?raw=true"">
	<sub>Area of each bedroom boxplot</sub>
</p>

Even though there're some studios with area above 750 sq.ft., still most of them are well apart from 1 bedroom listings.
Interesting fact: areas have less ranges in each category which makes sense - apartments in tall buildings tend to be alike by size and floorplan.
Another thing is that areas are much more apart from one another than rental prices which means price heavily depends on additional facts, not square area alone.

#### Bedrooms

After all data preprocessing there're 4,802 listings left:  

- Studio: 435
- 1 Bedroom: 1474
- 2 Bedrooms: 1983
- 3 Bedrooms: 832
- 4 Bedrooms: 75
- 5 Bedrooms: 3

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/number_of_bdrs.png?raw=true"">
	<sub>Number of bedrooms</sub>
</p>

**TOP-3** most listed options would be 2, 1 and then 3-bedroom apartments respectively.  

***

## 1 & 2 bedroom apartments analysis
For further analysis only 1 and 2 bedroom listings will be reviewed.

Earlier, while [checking for unique values](#number-of-unique-values-per-feature), **2204** were found in the description and **2219** by the description title. Manual processing would be time consuming, so finding most commonly used words / phrases would be much more efficient. TOP-30 phrases should be enough.

<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/wordclouds.png?raw=true"">
	<sub>Word cloud for description (left) & description title (right)</sub>
</p>

There are few common phrases such as `Real Estate`, `Burj Khalifa`, `Downtown` and etc. that should be ignored as they bring no value.  
Meanwhile useful phrases like `Fully Furnished`, `Fitted Kitchen`, `Chiller free`, `Swimming pool`, `Bills included` etc. may affect prices, so could be useful.

### Prices

|Prices range |1 Bedroom| 2 Bedrooms|
|:--- | :---: | :---:|
|Count|1,474|1,983|
|Min|59,998|76,990|
|Median|115,000|225,000|
|Max|280,000|600,000|


<p align=""center"">
	<img src=""https://github.com/imeleges/REMA_Dubai/blob/main/img/1_2_bdr_prices.png?raw=true"">
	<sub>1 & 2 bedroom prices from 60,000 to 450,000</sub>
</p>

In the most common range of prices from 60,000 to 450,000, 1-bedroom apartments are concentrated between 80,000 and 130,000, where 2-bedrooms are distributed much wider across the range.

...

***
<!-- 
### Trends
[![Data Analyst](https://img.shields.io/static/v1?label=trend&message=Data%20Analyst&color=218c74)](#)
[![Data Scientist](https://img.shields.io/static/v1?label=trend&message=Data%20Scientist&color=706fd3)](#)

### Tools and Skills
[![Pandas](https://img.shields.io/static/v1?label=tool&message=Pandas&color=40407a)](#) 
[![Python](https://img.shields.io/static/v1?label=tool&message=Python&color=33d9b2)](#) 
[![Matplotlib](https://img.shields.io/static/v1?label=tool&message=Matplotlib&color=706fd3)](#) 
[![Scikit-learn](https://img.shields.io/static/v1?label=tool&message=Sklearn&color=ff793f)](#) 
[![Seaborn](https://img.shields.io/static/v1?label=tool&message=Seaborn&color=ff5252)](#)  

[![Data visualization](https://img.shields.io/static/v1?label=skill&message=Data%20visualization&color=F97F51)](#) 
[![Exploratory data analysis](https://img.shields.io/static/v1?label=skill&message=Exploratory%20Data%20Analysis&color=82589F)](#) 
[![Data preprocessing](https://img.shields.io/static/v1?label=skill&message=Data%20Preprocessing&color=B33771)](#)  

***
 -->",1,1,1,0,real-estate,"[analytics, jupyter-notebook, pandas, python, real-estate]",0
CrazyCCBlog,real-estate-data-analysis,CrazyCCBlog,https://github.com/CrazyCCBlog/real-estate-data-analysis,https://api.github.com/repos/real-estate-data-analysis/CrazyCCBlog,Scrapping and data analysis of properties in websites.,"# Real estate price analysis
Scrapping and data analysis of properties in websites.

![Gr√°fico do pre√ßo m√©dio de im√≥veis de aluguel na cidade de Goi√¢nia](./doc/regioes_aluguel.png)

## Functionalities:

Crawler:
- Data collection per region
- Select sells or rents
- Schedule the time for scrapping run

Data analysis with jupyter notebook:
- Map with statistics per district
- Histogram of average price of sell/rent
- Histogram of advertisement time in platform 

Data visualization with kibana

(In progress)

## Installation:

First, install the Python libraries requirements executing:

```bash
pip3 install -r requirements.txt
```
To import and visualize the data with Kibana:

```bash
# Install filebeat
chmod +x install_filebeat.sh
./install_filebeat.sh
# Run containers with Kibana/Elasticsearch/Logstash
```

## Crawler execution:

You can select the region to scrapy.

In the folder imoveis_crawling execute:

```bash
scrapy crawl IMOVEIS -a category=venda -a region=grande-goiania-e-anapolis -a state=go
```

You can create a task that runs in background and download daily the ads: 

```bash
python3 tasks.py
```

Obs.: If you shut down the machine you need execute the crawler again. 

## Data analysis with Kibana:

(In progress)


## Data analysis with Jupyter Notebook:

We collect the data of Goi√¢nia(BR) city between November' 19 and February' 20, The example of plots are showed bellow.  

Average of price of properties rent:

![alt text](./doc/preco_medio_aluguel.png)


Type of properties:

![alt text](./doc/tipo_imovel_aluguel.png)

Average time of advertisement in the website:

![alt text](./doc/tempo_anuncio_no_ar_aluguel.png)
",1,1,2,0,real-estate,"[crawler, data-analysis, python, real-estate, scrapy]",0
aldringordon,property-scraper,,https://github.com/aldringordon/property-scraper,https://api.github.com/repos/property-scraper/aldringordon,Scrapers for Australian RealEstate websites,"# property-scraper
Scrapers for Australian RealEstate websites

realestate.com.au ‚úÖ

domain.com.au ‚ö†Ô∏è

re88.com.au ‚ö†Ô∏è

daveyrealestate.com.au ‚ö†Ô∏è

allhomes.com.au ‚ö†Ô∏è

---

## Setting up Python Virtual Environment

**0. Create a virtual environment**

To create a virtual environment simply generate the contents in the repositories source directory called `env` using the following command:

```
$ python -m venv env

```

**1. Setup env:**

Activate python virtual env (shouldnt even really be anything in it but just in case i do use some other non native libraries)

```
for bash/zsh:
$ source env/bin/activate
(env) $

for Windows:
PS .\env\Scripts\Activate.ps1
(env) PS
```


**2. Teardown env**

Deactivate python environment ~~pls~~

```
(env) $ deactivate
$
```
",1,1,1,2,real-estate,"[data-collection, python, real-estate, webscraper]",0
KazunguDev,HouseRent,,https://github.com/KazunguDev/HouseRent,https://api.github.com/repos/HouseRent/KazunguDev,A complete real estate management syatem built in laravel framework and mysql.,"It's a web-based platform where anyone can rent house within a few seconds where Landlords can post about their empty houses.
**Technology: Html, CSS, Bootstrap, JavaScript, PHP, Laravel Framework
**Database: MySQL

<ul>
<h2>Core Features:</h2> 
    <li><b>Multiauth role (Admin/ Landlord/ Renter)</b></li>
    <li><b>Booking System</b> (house booking)</li>
    <li>Google Login using Socialite Package</li>
    <li><b>SMS</b> System (When booking is confirmed by admin then confirmation sms sends to renter)</li>
    <li>Social media sharing (available house)</li>
    <li>Price Filter (search a house using price range)</li>
    <li>Admin, Landlord, Renter Panel </li>
    <li><b>Email Verification</b>, Forget Password, Reset Passwrod</li>
    <li>Landlord and Renter are supervised by admin</li>
    <li>Booking history</li>
    <li>Cancel Booking Request</li>
    <li>Awesome overview show in <b>Dashboard</b></li>
    <li>Searching System (search by rooms, toilet, rent, area.)</li>
    <li>Category wise data handling</li>
    <li><b>Login/Register</b></li>
    <li>Update profile information</li>
</ul>


##  Activities
<ul>
<h2>For Admin:</h2>
<li>See all areas and ability to add new area and edit/delete them</li>
<li>See all areas created by landlords and ability to delete them.</li>
<li>Manage all landlords & renter.</li>
<li> See all the houses information and ability to delete them</li>
<li>See all booked houses, booking history.</li>
<li>Admin can change his profile information & reset password</li>
<li>Admin can share house details through social media</li>
<li>Sign in/sign out.</li>
</ul>



<ul>
<h2>Landlord Panel</h2>
<li>Sign in/ sign out.</li>
<li>Landlord can create, edit, delete <b>Area</b> (own created)</li>
<li>Landlord can view all areas.</li>
<li>Landlord can add, edit, delete his owm created <b>house</b>. </li>
<li>Landlord can see his own created houses information.</li>
<li>Landlord can handle the status of his houses (available or not available)</li>
<li>Landlord can change his profile information</li>
<li>Have option to reset his password</li>
<li>Landlords has ability to approve and reject his pending booking requests.</li>
<li>Landlord can share house details through social media</li>
<li>Landlord can manage the status of his booked houses when renter leaves</li>
<li>Have a nice dashboard where he sees the summary of his activity</li>
</ul>


<ul>
<h2>Renter User</h2>
<li>Sign in/sign out. </li>
<li>Renter can view all areas.</li>
<li>Renter can view all houses information</li>
<li>Renter can change his profile information.</li>
<li>Renter can apply booking for rent a house.</li>
<li>Renter can see his own booking history</li>
<li>Renter can see his own pending booking requests. </li>
<li>Renter has ability to cancel his booking request</li>
<li>Renter can get the booking approval/rejection sms in their cell phones</li>
<li>Renter can share house details through social media.</li>
<li>Has ability to reset password</li>
</ul>

<ul>
<h2>Guest User</h2>

<li>User can see all available houses</li>
<li>User can search houses by location, number of rooms, bathrooms, rent amount, price range</li>
<li>User can view houses by sorting prices as high to low Or low to high price.</li>
<li>User can view area wise houses.</li>
<li>User can share house details through social media.</li>
</ul>

 ## Screenshots

![Screenshot 2023-10-07 073543](https://github.com/KazunguDev/HouseRent/assets/88532016/5ab7180d-3c4c-42cc-b830-0d477644e1ae)

![Screenshot 2023-10-07 074217](https://github.com/KazunguDev/HouseRent/assets/88532016/182f9c6c-d0d9-4bc4-8017-35c8ddbde2d0)
",1,1,1,0,real-estate,"[laravel, mysql-database, php8, real-estate]",0
sguduguntla,Commutaire-SVHacks,,https://github.com/sguduguntla/Commutaire-SVHacks,https://api.github.com/repos/Commutaire-SVHacks/sguduguntla,"Commute is a Web and iOS application that allows to connect with the community in such a way that finding real-estate was much easier along with connecting to education that is heavily important for advancements in society. This allows us to quickly grab details about a certain place, get directions, details about a community, schools near by, and the opportunities to expand the community as a whole in a better shape.","# Commutaire-SVHacks: 

http://www.sriharshaguduguntla.com/commutaire

Built at SV Hacks 2016 with Jai Sankar and Mitesh Malaviya.

#Inspiration

In our community we lacked a lot of connection to each other, so we decided to develop Commute. Commute was based of the many requests that we got from high school students, teachers, and various mentors. We believed that in order to reach the community in a strong way, we not only needed to connect with them virtually, but also physically through transportation. Along with this issue, also arose education which is a high priority in our generation today which was also another key factor that led us to this endeavor.

#What it does

Commute is an application that allows to connect with the community in such a way that finding real-estate was much easier along with connecting to education that is heavily important for advancements in society. This allows us to quickly grab details about a certain place, get directions, details about a community, schools near by, and the opportunities to expand the community as a whole in a better shape.

#How we built it

We used various libraries such as numerous Google API's, Firebase, Node,js, Uber, Zwillo, and many more frameworks were used to provide much more functionality. We also included as a double platform through iOS and web.

#Challenges we ran into

We ran into various challenges when having to write algorithms based on the users location and what preferences would fit them based of their society. Getting a valid list of school near a community was definitely a challenge for us overall, and having to work with various backend issues was also another plus.

#Accomplishments that we're proud of

Some accomplishments we are proud of are writing complex/machine-learning algorithms to better enhance the user experience by providing with relevant details toward the user. Functions such as implementing Uber/Zwillo was also another major key learning experience that we are proud of because we found the opportunity to learn various backend languages and frameworks.

#What we learned

We learned new types of programming including OOP programming, backend programming logic, writing server side code, and much more through the various issues we faced. We enjoyed the entire program as it provided us manny opportunities to grow as programmers

#What's next for Commute

We would love to see an android app in the future.

![alt tag](https://github.com/sguduguntla/Commutaire-SVHacks/tree/master/www/images/commutaire-icons/apple-touch-icon-180x180.png)
",1,1,4,0,real-estate,"[commute, nodejs, real-estate]",0
temitayo315,offcampus-accommoddation-booking,,https://github.com/temitayo315/offcampus-accommoddation-booking,https://api.github.com/repos/offcampus-accommoddation-booking/temitayo315,A real estate website for student accommodation booking off campus.,"# offcampus-accommoddation-booking
A real estate website for student accommodation booking off campus.
",1,1,1,0,real-estate,"[accommodation, real-estate, student]",0
leonardocalizaya,CX4242-RealEstateVisualization,,https://github.com/leonardocalizaya/CX4242-RealEstateVisualization,https://api.github.com/repos/CX4242-RealEstateVisualization/leonardocalizaya,Creation of a real estate data visualization that allows users to investigate trends of historical and forecasted data.,"## DESCRIPTION:
This is a group project created by Team The Underdogs for Georgia Tech class CX 4242. The goal of our team was to create a real estate data visualization that allows users to investigate trends historical and forecasted data. Our team trained a machine learning model, ARIMA, that forecasts prices into future years based on the historical trends in our dataset.
The visualization is a web-based chloropleth map that allows users to quickly see which states are the most and least expensive in a given year. Users may input the parameters year and number of bedrooms to change the chloropleth map.

## INSTALLATION:

Once the CX4242-Housing directory is on your machine, you will need to run a http server in the directory to view the web tool. Luckily, if you have Python installed, it is easy to run a server in the command-line. Simply navigate to the root directory of the project in the command line and then enter the command ""python -m http.server"". The server will start running and you may go to 0.0.0.0:8000 in your web browser of choice (we recommend Chrome since we are using D3). You should see now the contents of our project directory in your browser. To open the web visualization tool navigate to the Visualization directory and then click chloropleth.html. The tool should open in a new tab and you will see our final product!

## EXECUTION:
The user may select the year and number of bedrooms that they are interested in. The default when the tool is opened is 1 bedroom in the year 2010. When the user hovers their mouse over any state, a tooltip should appear displaying the state name, median rental price, and median property price for that year and number of bedrooms. There also should appear two line charts below the map when the mouse hovers over a state showing the time-series data for these two variables including our model's predictions for future months. The user may select a future year from the dropdown to see a forecasted chloropleth map. We suggest that the user should choose several different combinations of year and number of bedrooms to start getting a feel for the data and how the web tool works. The most expensive states according to the user's parameters are always shown in dark green while the least expensive states are showin in light green. When there is no data that state will appear gray.  

DEMO:
https://www.youtube.com/watch?v=5Y-NjrOu8vA&ab_channel=MichaelCho

City_data:
https://drive.google.com/drive/folders/1Uwbfgghemsf_fQbzvBXBux_4wEawY8mx?usp=sharing
This link contains city data sets and city housing price prediction. City forecast data can be obtained through ARIMA Forecast_city.ipynb through the same way that was describe in the demo video to obtain the state forecast data.
",1,1,1,0,real-estate,"[arima, arima-forecasting, d3, d3js, data-science, html-css-javascript, javascript, python, real-estate, visualization, zillow-api]",0
schmidt-jake,mortgage_mage,,https://github.com/schmidt-jake/mortgage_mage,https://api.github.com/repos/mortgage_mage/schmidt-jake,Model leveraged real estate transactions easily!,"# mortgage_mage

Model leveraged real estate transactions easily with `mortgage_mage`! Helps you answer questions such as:

- What size down payment maximizes my expected IRR?
- What's the highest interest rate I could accept before my NOI is unacceptable?

## Key Features

- Convenient pro-forma framework makes it easy to evaluate investments
- Pulls the latest mortgage interest rate data from multiple market sources
- Computes useful metrics, such as cash-on-cash return and IRR
- Factors in your personal tax situation

## Installation

```bash
pip install git+https://github.com/schmidt-jake/mortgage_mage.git
```

## Getting Started

TBD

## Feature Roadmap

1. Tax ‚Äî record tax deductible transactions, compute final tax liability given marginal income tax bracket, compute metrics on after-tax P&L
1. Stochastic modeling ‚Äî create an MCMC interface to model the variation of P&L
1. Data layer ‚Äî enhance the mortgage market data sourcing, add sources for rental market and housing market

## Notes

The median interest rate (computed from `rate_scraper.get_rate_distribution`) isn't very sensitive to changes in LTV.

Input distributions:

- Rental revenue
- Property tax rate
- Property appreciation/depreciation rate

We'll also need:
A mortgage rates function that relates interest rate with loan-to-value and loan amount, accounting for PMI and second lien.
",1,1,2,0,real-estate,"[data-science, finance, real-estate]",0
carolmoraescruz,case_seazone,,https://github.com/carolmoraescruz/case_seazone,https://api.github.com/repos/case_seazone/carolmoraescruz,Case for Junior Data Analyst position at Seazone. Author: Caroline Moraes da Cruz,"# Case Seazone Data Analyst

This project encompasses a real data case for a junior data analyst job opportunity at Seazone.
Seazone uses OTAs (Online Travel Agencies) like Airbnb, Booking and Expedia, as well as its own
website, to find guests interested in booking a short stay - usually lasting less than a month
per reservation. Each property is advertised as a ‚ÄúListing‚Äù. For this analysis, I used two databases
related to the listings and the booked rooms to answer a few business questions. The description of the project can be found in [references/seazone_challenge.pdf](https://github.com/carolmoraescruz/case_seazone/blob/master/references/seazone_challenge.pdf) and the final report is the file [reports/final_report.pdf](https://github.com/carolmoraescruz/case_seazone/blob/master/reports/final_report.pdf).


## Running Application

### Basics Dependencies

- The project requires Python 3.7.4 or greater.
- It is assumed that the `virtualenv` library is properly installed. If it is not, just run:

```bash
pip install virtualenv
```

1. The first step is to clone the repository to local machine

```bash
git clone https://github.com/carolmoraescruz/case_seazone.git
```

2. Set a virtual environment to install the requirements in their respective versions

```bash
virtualenv -p python3 venv
```

3. Activate the virtual environment

- Windows

```bash
venv\Scripts\activate.bat
```

- Linux and MacOS

```bash
source . venv/bin/activate
```

4. Install the dependencies, running

```bash
pip install -r requirements.txt
```

5. Run the application:

```bash
python main.py
```

## Screenshot
![Code screenshot](https://github.com/carolmoraescruz/case_seazone/blob/b08ab969f6227e0761db19fc8e614defac2a1e81/reports/figures/code_screenshot.png)

## Project Organization

    ‚îú‚îÄ‚îÄ LICENSE
    ‚îú‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ main.py
    ‚îú‚îÄ‚îÄ data
    ‚îÇ   ‚îú‚îÄ‚îÄ external
    ‚îÇ   ‚îú‚îÄ‚îÄ interim
    ‚îÇ   ‚îú‚îÄ‚îÄ processed
    ‚îÇ   ‚îî‚îÄ‚îÄ raw
    |       ‚îú‚îÄ‚îÄ daily_revenue.csv
    ‚îÇ       ‚îî‚îÄ‚îÄ listings-challenge.csv
    ‚îú‚îÄ‚îÄ docs
    ‚îú‚îÄ‚îÄ models
    ‚îú‚îÄ‚îÄ references
    ‚îÇ   ‚îî‚îÄ‚îÄ seazone_challenge.pdf
    ‚îú‚îÄ‚îÄ reports
    ‚îÇ   ‚îú‚îÄ‚îÄ figures
    ‚îÇ   ‚îî‚îÄ‚îÄ final_report.pdf
    ‚îú‚îÄ‚îÄ requirements.txt
    ‚îî‚îÄ‚îÄ src
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îú‚îÄ‚îÄ commons.py
        ‚îú‚îÄ‚îÄ data
        ‚îÇ   ‚îî‚îÄ‚îÄ make_dataset.py
        ‚îú‚îÄ‚îÄ features
        ‚îÇ   ‚îî‚îÄ‚îÄ build_features.py
        ‚îú‚îÄ‚îÄ models
        ‚îÇ   ‚îú‚îÄ‚îÄ preprocessing.py
        ‚îÇ   ‚îî‚îÄ‚îÄ train_model.py
        ‚îú‚îÄ‚îÄ reports
        ‚îÇ   ‚îî‚îÄ‚îÄ reports.py
        ‚îî‚îÄ‚îÄ visualization
            ‚îî‚îÄ‚îÄ visualize.py

---

<p><small>Project based on the <a target=""_blank"" href=""https://drivendata.github.io/cookiecutter-data-science/"">cookiecutter data science project template</a>. #cookiecutterdatascience</small></p>
",1,1,1,0,real-estate,"[booking, data-analysis, data-science, machine-learning, predictive-modeling, real-estate, seazone]",0
ednakatani,Real-Estate-Prediction,,https://github.com/ednakatani/Real-Estate-Prediction,https://api.github.com/repos/Real-Estate-Prediction/ednakatani,Train different models using various techniques to determine the best predictive model for the current dataset.,"# Real Estate Prediction Model

### Description

Train different models using various techniques to determine the best predictive model for the current dataset.

### Dataset

This dataset contains Real Estate listings in the US broken by State and zip code.
Data was collected via web scraping using python libraries.

Kaggle Link: [USA Real Estate Dataset](https://www.kaggle.com/datasets/ahmedshahriarsakib/usa-real-estate-dataset)

#### Content
* status
* price
* bed
* bath
* acre_lot
* full_address
* street
* city
* state
* zip_code
* house_size
* sold_date
",1,1,1,0,real-estate,"[data-science, database, kaggle, machine-learning, predictive-modeling, python, real-estate]",0
fraineralex,RealEstate-App,,https://github.com/fraineralex/RealEstate-App,https://api.github.com/repos/RealEstate-App/fraineralex,"Real estate application that manages different roles each with different functionalities and interactions in the system, with an integrated restful API to consume all the functionalities. It is developed under the ONION architecture in C# ASP .Net Core following the SOLID principles.","# Real Estate App

Real estate application that manages different roles each with different functionalities and interactions in the system, with an integrated restful API to consume all the functionalities. It is developed under the ONION architecture in C# ASP .Net Core following the SOLID principles.

##### Test the demo [HERE]( ""HERE"")
<br><br>
## Technologies 

- Frontend
	- html
  - css
    - Bootstrap
  - js
  - ASP.NET Razor


- Backend
	- C# ASP.NET Core (6.0)
      - Microsoft Entity Framework Core
      - Microsoft Entity Framework Core Relational
      - Microsoft Entity Framework Core SqlServer
      - Microsoft Entity Framework Core Tools
      - Microsoft Entity Framework Core Design
      - Microsoft Entity Framework Code First
      - Microsoft.AspNetCore.Mvc.NewtonsoftJson
      - Microsoft.AspNetCore.Mvc.Versioning
      - Microsoft.VisualStudio.Web.CodeGeneration.Design
      - Swashbuckle.AspNetCore.Swagger
      - Swashbuckle.AspNetCore.Annotations
      - Swashbuckle.AspNetCore
      - Microsoft.AspNetCore.Authentication.JwtBearer
      - Microsoft.AspNetCore.Identity.EntityFrameworkCore
      - CQRS Pattern
      - Mediator Pattern

- ORM
  - Entity Framework
  
- DB
  - SQL Server
  
 <br><br>
 ## Project images
 
 - Login 
 
[![login.png](https://github.com/fraineralex/RealEstate-App/blob/master/RealEstateApp.Presentation.WebApp/wwwroot/Images/login.png)](https://github.com/fraineralex/RealEstate-App/blob/master/RealEstateApp.Presentation.WebApp/wwwroot/Images/login.png)
<br>
 - Dashboard 
 
[![dashboard.png](https://github.com/fraineralex/RealEstate-App/blob/master/RealEstateApp.Presentation.WebApp/wwwroot/Images/dashboard.png)](https://github.com/fraineralex/RealEstate-App/blob/master/RealEstateApp.Presentation.WebApp/wwwroot/Images/dashboard.png)
<br>
 
<br><br>
## What do you need to run this project ?

- Visual Studio 2022 onwards
- ASP.NET - v6.0 onwards
- SQL Server - v3.39.2 onwards

<br><br>
## Installation

- Download the project or clone it
   - download [CLICK AQUI](https://github.com/fraineralex/RealEstate-App/archive/refs/heads/master.zip)
   - clone [CLICK AQUI](https://github.com/fraineralex/RealEstate-App.git)

- You need to open the project where is located using Visual Studio 2022.
```js
 //C:\Users\Frainer Alexander\Desktop\RealEstate-App>  - take this path whit example
```

- Now you need to open the file called ""appsettings.json"" and put the name of your server or computer where it belongs, example:
```cmd
Server=Lenovo-8517;
```

- Then in Visual Studio go to:
```cmd
Tools/NuGet packages manager/Package management console
```

- When you are in the console type the following command:
```cmd
Update-Database -Context ApplicaionContext
```
and
```cmd
Update-Database -Context IdentityContext
```

- Now run the project and the application will run in your default browser. 

<br><br>
## Developers
- Frainer Encarnaci√≥n -> [Github](https://github.com/fraineralex) 
- Ronal Cadiz -> [Github](https://github.com/Ronaldcdz) 
- Cristopher Zaiz -> [Github](https://github.com/zaizo01) 





",1,1,1,0,real-estate,"[cqrs-pattern, identity-management, jwt-authentication, mediator-pattern, mvc-architecture, onion-architecture, real-estate, restful-api, solid-principles]",0
booleanbites,houzi-doc,,https://github.com/booleanbites/houzi-doc,https://api.github.com/repos/houzi-doc/booleanbites,"Documentation for Houzi, a real estate app for Houzez Theme","---
title: Welcome
---

![Houzi real estate](images/banner.jpg)

This is setup documentation for Houzi Flutter App.

Houzi a real estate mobile application that connects with Houzez Wordpress theme. Its build with Flutter so it can be deployed to Android and iOS.

Visit website here: https://houzi.booleanbites.com


This documentation consist of three parts.

#### [Tools](tools/tools_setup)

This section addresses all the tools and other environment configurations you need to do get the development started.

#### [App Setup](app-setup/change_app_url)

This section guides through all the steps related to app setup and customization.

#### [Custom Widgets](hooks-widgets/add_item_in_drawer)

We have designed many hooks to provide way of customise styles, designs, designs and provide additional info to the app.

#### [Houzi Config Builder](houzi-builder/intro)

Houzi Builder is visual config builder. This section talks about designing and generating configuration with Houzi Builder, that can be used in the app.

### Try the demo app here:

 [![Houzi real estate](images/apple_store.png)](https://apps.apple.com/us/app/id1598357211)  [![Houzi real estate](images/google_play.png)](https://play.google.com/store/apps/details?id=com.booleanbites.houzez)
",1,1,2,0,real-estate,"[app, flutter, houzez, real-estate]",0
jlondonobo,eterna-primavera,,https://github.com/jlondonobo/eterna-primavera,https://api.github.com/repos/eterna-primavera/jlondonobo,"Una aplicaci√≥n en Streamlit para analizar el mercado de propiedad ra√≠z en Medell√≠n, Colombia üá®üá¥","<p align=""center"">
  <img src=""https://user-images.githubusercontent.com/43001823/231056521-0fd37b1e-bb5e-48d6-91f0-263d88373cf9.jpg"" width=""100%"" alt=""Medell√≠n, Ciudad de la Eterna Primavera""
  style=""border-radius: 30px;""
  ></a>

<h1 align=""center"">Eterna Primavera üå¨üè°</h1>

</p>
<div align=""center"">
  <a href=""https://eterna-primavera.streamlit.app/"">
    <img src=""https://static.streamlit.io/badges/streamlit_badge_black_white.svg"" alt=""Streamlit App""/>
  </a>
</div>

> La forma m√°s r√°pida de entender el **Mercado Inmobilidario** de Medell√≠n!

## üìñ Descripci√≥n

Este proyecto comenz√≥ como una entreada al [Concurso de Streamlit en Espa√±ol](https://discuss.streamlit.io/t/anunciando-el-concurso-de-streamlit-en-espanol/40274). El objetivo es permitir a todos los interesados en el mercado inmobiliario de Medell√≠n üá®üá¥, poder explorar los datos de manera interactiva y sencilla.

## üìä Datos

Referescamos los datos de Eterna Primavera diariamente (comenzando a finales de Abril de 2023). Por el momento son est√°ticos.
",1,1,1,0,real-estate,"[dashboard, medellin, real-estate, spanish, streamlit]",0
Srijan-1-3,Real_Estate_Price_Prediction,,https://github.com/Srijan-1-3/Real_Estate_Price_Prediction,https://api.github.com/repos/Real_Estate_Price_Prediction/Srijan-1-3,Data Science Project,"# Real_Estate_Price_Prediction
![image](https://github.com/Srijan-1-3/Real_Estate_Price_Prediction/assets/102429782/a48e4c0e-0575-4e9e-887c-1fca120fc7a2)

This data science project series walks through step by step process of how to build a real estate price prediction website. We will first build a model using sklearn and linear regression using banglore home prices dataset from kaggle.com. Second step would be to write a python flask server that uses the saved model to serve http requests. Third component is the website built in html, css and javascript that allows user to enter home square ft area, bedrooms etc and it will call python flask server to retrieve the predicted price. During model building we will cover almost all data science concepts such as data load and cleaning, outlier detection and removal, feature engineering, dimensionality reduction, gridsearchcv for hyperparameter tunning, k fold cross validation etc. Technology and tools wise this project covers,

1. Python
2. Numpy and Pandas for data cleaning
3. Matplotlib for data visualization
4. Sklearn for model building
5. Jupyter notebook, visual studio code and pycharm as IDE
6. Python flask for http server
7. HTML/CSS/Javascript for UI

# Deploy this app to cloud (AWS EC2)

1. Create EC2 instance using amazon console, also in security group add a rule to allow HTTP incoming traffic
2. Now connect to your instance using a command like this,
```
ssh -i ""C:\Users\Viral\.ssh\Banglore.pem"" ubuntu@ec2-3-133-88-210.us-east-2.compute.amazonaws.com
```
3. nginx setup
   1. Install nginx on EC2 instance using these commands,
   ```
   sudo apt-get update
   sudo apt-get install nginx
   ```
   2. Above will install nginx as well as run it. Check status of nginx using
   ```
   sudo service nginx status
   ```
   3. Here are the commands to start/stop/restart nginx
   ```
   sudo service nginx start
   sudo service nginx stop
   sudo service nginx restart
   ```
   4. Now when you load cloud url in browser you will see a message saying ""welcome to nginx"" This means your nginx is setup and running.
4. Now you need to copy all your code to EC2 instance. You can do this either using git or copy files using winscp. We will use winscp. You can download winscp from here: https://winscp.net/eng/download.php
5. Once you connect to EC2 instance from winscp (instruction in a youtube video), you can now copy all code files into /home/ubuntu/ folder. The full path of your root folder is now: **/home/ubuntu/BangloreHomePrices**
6.  After copying code on EC2 server now we can point nginx to load our property website by default. For below steps,
    1. Create this file /etc/nginx/sites-available/bhp.conf. The file content looks like this,
    ```
    server {
	    listen 80;
            server_name bhp;
            root /home/ubuntu/BangloreHomePrices/client;
            index app.html;
            location /api/ {
                 rewrite ^/api(.*) $1 break;
                 proxy_pass http://127.0.0.1:5000;
            }
    }
    ```
    2. Create symlink for this file in /etc/nginx/sites-enabled by running this command,
    ```
    sudo ln -v -s /etc/nginx/sites-available/bhp.conf
    ```
    3. Remove symlink for default file in /etc/nginx/sites-enabled directory,
    ```
    sudo unlink default
    ```
    4. Restart nginx,
    ```
    sudo service nginx restart
    ```
7. Now install python packages and start flask server
```
sudo apt-get install python3-pip
sudo pip3 install -r /home/ubuntu/BangloreHomePrices/server/requirements.txt
python3 /home/ubuntu/BangloreHomePrices/client/server.py
```
Running last command above will prompt that server is running on port 5000.
8. Now just load your cloud url in browser (for me it was http://ec2-3-133-88-210.us-east-2.compute.amazonaws.com/) and this will be fully functional website running in production cloud environment



",1,1,1,21,real-estate,"[ec2-instance, feature-engineering, flask, machine-learning, outlier-removal, price-prediction, real-estate]",0
bushmusi,odoo-real-state-module,,https://github.com/bushmusi/odoo-real-state-module,https://api.github.com/repos/odoo-real-state-module/bushmusi,This is my opensource module for making Real State Module. Here I implement odoo docs beginner tutorial in estate and estate_account and also advanced topics in property and property_account,"# Odoo Real State module

Tutorial https://www.odoo.com/documentation/11.0/howtos/backend.html

## VCode plugins

- Python
- XML Tools

## Resources

**Deploy**

- üìÑ How to deploy Odoo 11 on Ubuntu 18.04 https://linuxize.com/post/how-to-deploy-odoo-11-on-ubuntu-18-04/
- üìÑ Instalar Odoo 11 Ubuntu Server 18.04 LTShttps://odooerpcloud.com/instalar-odoo-11-ubuntu-server-18-04-lts
- üìÑ Install an Odoo 11 Stack on Ubuntu 16.04 https://www.linode.com/docs/websites/cms/install-an-odoo-11-stack-on-ubuntu-16-04/#before-you-begin
- üìÑ Install Odoo version 11 in Docker containerhttps://unkkuri.com/blog/unkkuri-blog-1/post/install-odoo-version-11-in-docker-container-21

**Docker**
- https://blog.desdelinux.net/instalar-odoo-docker-anadir-modulos-externos/
- https://hub.docker.com/_/odoo/
- https://github.com/odoo/docker

**Module**

- üé• How To Install Custom Module In Odoo  https://www.youtube.com/watch?v=-sTtSG6m2z4
- üé• Tutorial - Develop an App with the Odoo Framework - Odoo Experience 2017 https://www.youtube.com/watch?v=Q2mQTXghc4o
- üìÑ How to Create a Module in Odoo https://www.cybrosys.com/blog/how-create-module-odoo https://www.cybrosys.com/blog/how-to-create-module-in-odoo12
- üìÑ A step by step guide to creating Odoo Addon Modules https://www.google.com/amp/s/hub.packtpub.com/step-by-step-guide-to-creating-odoo-addon-modules/amp/
- üìÑ How to install new module in Odoo 11  https://www.odoo.com/es_ES/forum/ayuda-1/question/how-to-install-new-module-in-odoo-11-129844
- üìÑ  Odoo.sh Your first module  https://www.odoo.com/documentation/user/11.0/odoo_sh/getting_started/first_module.html


## Scaffolding

```bash
$ odoo-bin scaffold openacademy addons
```

Add custon addons path

- Go to location: /etc/odoo/odoo-server.conf
- Add path in that file: addons_path = /opt/odoo/enterprise,/opt/odoo/addons,/opt/odoo/custom-addons

```bash
$ ./odoo-bin --addons-path=enterprise/,../custom-addons/,../odoo/addons/
```

```
my_module
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ __manifest__.py
‚îú‚îÄ‚îÄ controllers
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ controllers.py
‚îú‚îÄ‚îÄ demo
‚îÇ   ‚îî‚îÄ‚îÄ demo.xml
‚îú‚îÄ‚îÄ models
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ models.py
‚îú‚îÄ‚îÄ security
‚îÇ   ‚îî‚îÄ‚îÄ ir.model.access.csv
‚îî‚îÄ‚îÄ views
    ‚îú‚îÄ‚îÄ templates.xml
    ‚îî‚îÄ‚îÄ views.xml
```

## Manifest

__manifest__.py 

The manifest ofthe module, including for instance its title, description and data files to load.

```xml
{ 
    'name': ""Title"", 
    'summary': ""Short subtitle phrase"", 
    'description': """"""Long description"""""", 
    'author': ""Your name"", 
    'license': ""AGPL-3"", 
    'website': ""http://www.example.com"", 
    'category': 'Uncategorized', 
    'version': '11.0.1.0.0', 
    'depends': ['base'], 
    'data': ['views.xml'], 
    'demo': ['demo.xml'], 
}
```

![Module](/img/01_module_manifest.png)

![Module](/img/01_module_technical_data.png)

![Module](/img/01_module_installed_features.png)

## Models

models/models.py

Business objects are declared as Python classes extending Model which integrates them into the automated persistence system. Models can be configured by setting a number of attributes at their definition.


```python
    # Strings
    name = fields.Char(string=""Title"", required=True)
    description = fields.Text()

    # Date
    start_date = fields.Date()
    start_datetime = fields.Datetime('Start time', default=lambda self: fields.Datetime.now())
    
    # Numbers
    duration = fields.Float(digits=(6, 2), help=""Duration in days"")
    seats = fields.Integer(string=""Number of seats"")
    active = fields.Boolean(default=True) # Boolena

    # Relational fields
    responsible_id = fields.Many2one('res.users', ondelete='set null', string=""Responsible"", index=True)
    instructor_id = fields.Many2one('res.partner', string=""Instructor"")
    course_id = fields.Many2one('openacademy.course', ondelete='cascade', string=""Course"", required=True)
    session_ids = fields.One2many('openacademy.session', 'course_id', string=""Sessions"")
```

When a new fields are adding is necessary to restart Odoo and upgrading the module.

```bash
$ service odoo restart
```

### Computed fields

```python
    taken_seats = fields.Float(string=""Taken seats"", compute='_taken_seats')

    @api.depends('seats', 'attendee_ids')
    def _taken_seats(self):
        for r in self:
            if not r.seats:
                r.taken_seats = 0.0
            else:
                r.taken_seats = 100.0 * len(r.attendee_ids) / r.seats
```

### Inheritance

```python
# -*- coding: utf-8 -*-
from odoo import fields, models

class Partner(models.Model):
    _inherit = 'res.partner'

    # Add a new column to the res.partner model, by default partners are not
    # instructors
    instructor = fields.Boolean(""Instructor"", default=False)

    session_ids = fields.Many2many('openacademy.session',
        string=""Attended Sessions"", readonly=True)
```

### Onchange

The ‚Äúonchange‚Äù mechanism provides a way for the client interface to update a form whenever the user has filled in a value in a field, without saving anything to the database.

```python
    @api.onchange('seats', 'attendee_ids')
    def _verify_valid_seats(self):
        if self.seats < 0:
            return {
                'warning': {
                    'title': ""Incorrect 'seats' value"",
                    'message': ""The number of available seats may not be negative"",
                },
            }
        if self.seats < len(self.attendee_ids):
            return {
                'warning': {
                    'title': ""Too many attendees"",
                    'message': ""Increase seats or remove excess attendees"",
                },
            }
```

### Constrains

- Python constraints
- SQL constraints

```python

from odoo import models, fields, api, exceptions

....

    @api.constrains('instructor_id', 'attendee_ids')
    def _check_instructor_not_in_attendees(self):
        for r in self:
            if r.instructor_id and r.instructor_id in r.attendee_ids:
                raise exceptions.ValidationError(""A session's instructor can't be an attendee"")
```
## Views

views/views.xml

Tree and a form views, with the menus opening them. Actions and menus are regular records in database, usually declared through data files. Actions can be triggered in three ways:

- by clicking on menu items (linked to specific actions)
- by clicking on buttons in views (if these are connected to actions)
- as contextual actions on object


**Basics views*

- Tree views <tree>. List views, display records in a tabular form.
- Form views <form>. Forms are used to create and edit single records. 
- Search views <search>. Search views customize the search field associated with the list view (and other aggregated views).

Adding in __manifest__.py

```xml
    # always loaded
    'data': [
        # 'security/ir.model.access.csv',
        # 'views/views.xml',
        'views/templates.xml',
        'views/openacademy.xml',
        'views/partner.xml',
        'reports.xml',

    ],
```
## Menus and actions 

```xml
<record model=""ir.actions.act_window"" id=""course_list_action"">
        <field name=""name"">Cursos</field>
        <field name=""res_model"">openacademy.course</field>
        <field name=""view_type"">form</field>
        <field name=""view_mode"">tree,form</field>
        <!-- Personalizaci√≥n de B√∫squedas -->
        <field name=""context"" eval=""{'search_default_my_courses': 1}""/>
        <field name=""help"" type=""html"">
            <p class=""oe_view_nocontent_create"">Crea el primer curso
            </p>
        </field>
    </record>

    <!-- top level menu: no parent -->
    <menuitem id=""main_openacademy_menu"" name=""Open Academy""/>
    <!-- A first level in the left side menu is needed before using action= attribute -->
    <menuitem id=""openacademy_menu"" name=""Open Academy"" parent=""main_openacademy_menu""/>
    <!-- the following menuitem should appear *after* its parent openacademy_menu and *after* its
             action course_list_action -->
    <menuitem id=""courses_menu"" name=""Courses"" parent=""openacademy_menu"" action=""course_list_action""/>
    <!-- Full id location: action=""openacademy.course_list_action""  It is not required when it is the same module -->

```

![Module](/img/02_menus.png)

## Tree views

```xml
    <record model=""ir.ui.view"" id=""course_tree_view"">
        <field name=""name"">course.tree</field>
        <field name=""model"">openacademy.course</field>
        <field name=""arch"" type=""xml"">
            <tree string=""Course Tree"">
                <field name=""name""/>
                <field name=""responsible_id""/>
            </tree>
        </field>
    </record>
```

![Module](/img/03_tree.png)

![Module](/img/03_tree2.png)

## Form views

```xml
    <!-- Sesi√≥n Formulario -->
    <record model=""ir.ui.view"" id=""session_form_view"">
        <field name=""name"">session.form</field>
        <field name=""model"">openacademy.session</field>
        <field name=""arch"" type=""xml"">
            <form string=""Session Form"">
                <sheet>
                    <group>
                        <group string=""General"">
                            <field name=""course_id""/>
                            <field name=""name""/>
                            <field name=""instructor_id""/>
                            <field name=""active""/>
                        </group>
                        <group string=""Schedule"">
                            <field name=""start_date""/>
                            <field name=""duration""/>
                            <field name=""seats""/>
                            <!-- Computed fields -->
                            <field name=""taken_seats"" widget=""progressbar""/>
                        </group>
                    </group>
                    <label for=""attendee_ids""/>
                    <field name=""attendee_ids""/>
                </sheet>
            </form>
        </field>
    </record>
```

![Module](/img/04_form02.png)

## Search views
```xml
    <record model=""ir.ui.view"" id=""course_search_view"">
        <field name=""name"">course.search</field>
        <field name=""model"">openacademy.course</field>
        <field name=""arch"" type=""xml"">
            <search>
                <field name=""name""/>
                <field name=""description""/>
                <!-- Advanced search-->
                <filter name=""my_courses"" string=""My Courses"" domain=""[('responsible_id', '=', uid)]""/>
                <group string=""Group By"">
                    <filter name=""by_responsible"" string=""Responsible"" context=""{'group_by': 'responsible_id'}""/>
                </group>

            </search>
        </field>
    </record>
```

![Module](/img/05_search.png)

![Module](/img/05_search_personalizado.png)

## Calendar

![Module](/img/06_calendar.png)

## Graph

![Module](/img/07_graph.png)

## Report

- https://github.com/OCA/reporting-engine
- https://www.cybrosys.com/blog/basic-qweb-operations
- https://www.cybrosys.com/blog/qweb-reports-in-odoo12
- 

```xml
<odoo>

    <report
        id=""report_session""
        model=""openacademy.session""
        string=""Session Report""
        name=""openacademy.report_session_view""
        file=""openacademy.report_session""
        report_type=""qweb-pdf"" />

    <template id=""report_session_view"">
        <t t-call=""web.html_container"">
            <t t-foreach=""docs"" t-as=""doc"">
                <t t-call=""web.external_layout"">
                    <div class=""page"">
                        <h2 t-field=""doc.name""/>
                        <p>From <span t-field=""doc.start_date""/> to <span t-field=""doc.end_date""/></p>
                        <h3>Attendees:</h3>
                        <ul>
                            <t t-foreach=""doc.attendee_ids"" t-as=""attendee"">
                                <li><span t-field=""attendee.name""/></li>
                            </t>
                        </ul>
                    </div>
                </t>
            </t>
        </t>
    </template>

</odoo>
```

![Module](/img/08_report02.png)

## Controllers

controllers/controllers.py

## Demos
demo/demo.xml, demo records for the above example model

Define demonstration data. The content of the data files is only loaded when a module is installed or updated.After making some changes, do not forget to use *odoo-bin -u openacademy* to save the changes to your database.

## Security

## Links

- üìï Odoo Development Essentials Book https://fundamentos-de-desarrollo-en-odoo.readthedocs.io/es/latest/capitulos/comenzando-con-odoo.html
- https://www.odoo.yenthevg.com
- http://odoowikia.com/blog





",1,1,2,0,real-estate,"[odoo, odoo-13, odoo-tutorials, python, real-estate, xml]",0
sinisterstuf,REcardo,,https://github.com/sinisterstuf/REcardo,https://api.github.com/repos/REcardo/sinisterstuf,Automatic Real Estate meta-data for Trello cards,"# REcardo
Automatic Real Estate meta-data for Trello cards
",0,0,2,2,real-estate,"[nodejs, real-estate, trello]",0
jacobgarcia,real-estate,,https://github.com/jacobgarcia/real-estate,https://api.github.com/repos/real-estate/jacobgarcia,Academic web app project for real estate. Using old technology (PHP) so you know I can program this old stuff.,"casas_web
=========
",0,0,2,0,real-estate,"[academic-project, php, real-estate]",0
jleffert,ruby_rets,,https://github.com/jleffert/ruby_rets,https://api.github.com/repos/ruby_rets/jleffert,Ruby library for parsing RETS server responses,"# RubyRets
Ruby library for parsing RETS server responses
",0,0,2,0,real-estate,"[real-estate, rets, ruby]",0
tbarlow12,Real-Estate-Prediction,,https://github.com/tbarlow12/Real-Estate-Prediction,https://api.github.com/repos/Real-Estate-Prediction/tbarlow12,Project for Machine Learning course at the University of Utah - Using Zillow data https://www.zillow.com/research/data/,,0,0,4,0,real-estate,"[data-cleaning, prediction, python, real-estate]",0
RoanFourie,rea,,https://github.com/RoanFourie/rea,https://api.github.com/repos/rea/RoanFourie,"To learn Ruby on Rails. (http://larsgebhardt.de) build-your-own-real-estate-listing-service-with-ruby-on-rails-and-sphinx-part-1, 2 and 3","# A Simple Real Estate Tutorial by Lars Gebhardt
## Done to learn Ruby on Rails
[http://larsgebhardt.de/build-your-own-real-estate-listing-service-with-ruby-on-rails-and-sphinx-part-1/](Build Your Own Real Estate Listing Service with Ruby on Rails and Sphinx Part 1)
[http://larsgebhardt.de/build-your-own-real-estate-listing-service-with-ruby-on-rails-and-sphinx-part-2/](Build Your Own Real Estate Listing Service with Ruby on Rails and Sphinx: Part 2)
[http://larsgebhardt.de/user-authentication-with-ruby-on-rails-rspec-and-capybara/](RELS Part 3: User Authentication with Ruby on Rails, RSpec and Capybara)

I ommitted the Sphinx and the Test portions of the tutorial.
The tutorial is outdated, I used a newer version of Ruby and Rails.
I also used MySQL instead of PostgreSQL.
Maybe in future I create my own tutorial based on this tutorial but with updated code.

## System Configuration
* Ruby 2.2.5p319
* Rails 5.0.1
* Used MySQL57 instead of PG
* Git 2.10.2.windows.1
",0,0,2,2,real-estate,"[learning-exercise, rails, real-estate, ruby, tutorial]",0
madis,flatcrawl,,https://github.com/madis/flatcrawl,https://api.github.com/repos/flatcrawl/madis,Clojure app for crawling apartment information from http://kv.ee,"# flatcrawl

[![CircleCI](https://circleci.com/gh/madis/flatcrawl.svg?style=svg)](https://circleci.com/gh/madis/flatcrawl)

Clojure app for crawling apartment information from http://kv.ee

> Using this project to learn more about Clojure with the possibility that it
> might grow into something more useful

## Example

Search results look like:
![Small search results](doc/images/small-search-results.png)

Flatcrawl gives you:

```clojure
flatcrawl.import-test=> (take 3 (get-titles (html/html-resource ""fixtures/search_results_page-1.html"")))
(""1. Harjumaa, Tallinn, Kristiine, S√µpruse pst 29""
 ""2. Harjumaa, Tallinn, Kristiine, Lillek√ºla, Kuldnoka 13""
 ""3. Harjumaa, Tallinn, Kesklinn, P√§rnu mnt 135"")
```
",0,0,3,0,real-estate,"[clojure, crawler, real-estate, webapp]",0
anthonyjdella,real-estate-notes,,https://github.com/anthonyjdella/real-estate-notes,https://api.github.com/repos/real-estate-notes/anthonyjdella,:department_store: Notes for real estate investing.,"# Bank Account Churning:
* Get bonuses for openining new checking/savings accounts
* Must have minimum balance
* Deposit a certain amount
* Chase Checking/Savings Account
* Citi Bank
* Capital One 360
* PNC Bank

# RE TIPS
* Dont try to time the market
* The source of the deal doesn't matter (on MLS vs off MLS)
* Hire a good real estate agent
* Get pre-qualified before buying a house
* Vacancy is about 8-10% because 8% of 365 days is almost 1 month. A 4% vacancy means you can find a new tenant in 2 weeks.
* Leasing fee is charged when managment company finds a new tenant. Usually 50% of first months rent.
* A class property: Appreciation
* B class property: Both
* C class property: Cash Flow
* Look for around ~12% cash on cash ROI and $200 cashflow for SFH
* Leverage is (Debt Owed / Value of Real Estate)
    * Good leverage is 65-70%
    * So if you have a $300,000 house, your debt on that house would be $195,000 and your equity at 105,000)

# FINDING DEALS:
* Look at the county's home appraisal value. This will be the county's assessment of the home price.
    * Dallas County : http://www.dallascad.org/SearchAddr.aspx
    * Look at the home owners, tax history. See how much they pay in Taxes and if they have any outstanding tax payments.
    * https://www.dallasact.com/act_webdev/dallas/searchbyproperty.jsp
    * If someone has outstanding payments, they may be more likely to accept a deal lower than the asking price.
* To estimate rent rates in your area:
    * Go to https://www.rentometer.com/
* Look for ~12% Cash on Cash ROI
* Use Rental Property Caluculator on Bigger Pockets
    * https://www.biggerpockets.com/real-estate-investment-calculator
* If offer is rejected, set a reminder to follow up with them x weeks later, to see if they changed their mind.
    * Set a reminder in via biggerpockets calculator
* If property has been on market for a long time, dont give your best deal. Offer less and negotiate.
* If property is a good deal and hot, you may want to not lowball.


# LESSONS FROM HUSTLE4LIFE (https://www.linkedin.com/in/antonaivanov/)
* 32 years old, bought first property (duplex) when he was 26
* Makes $150k from regular job and $150k from DealCheck
* He messaged local investors on Bigger Pockets to learn more
* He works non stop (6hrs/day on weekends)
* Likes to buy 5 4-plex rather than 20 SFH
* Uses conventional financing (30 year mortgage) with FlagStar
* Has 2.5 million in debt, and 65% leverage
* He and wife bought properties separately with their own names to get more of a loan
* Had a 70% savings rate for 10 years
* After building enough equity in 1 property, he would immediately cash out refinance (switch his currently mortgage with a new one and taking the home equity out as cash to use for another down payment) them to purchase new properties
    * If his equity goes over 40%, he will refinance to get it back down to 20% and use the other 20% for another down payment
* Buys in Atlanta (1), Birmingham (3), Kansas City (28 in Missouri)
    * One location was in Raytown, Kansas City (north of river)
    * Most of his are in Riverside (north of river and downtown)
    * Good link to best areas of Kansas City (https://www.biggerpockets.com/forums/48/topics/276800-kansas-city-missouri-zip-codes?page=1)
* Purchases at $50-80k per unit (Usually duplexes and fourplexes)
    * $100,000 - $160,000 for duplex   <- best for cash flow and returns
    * $200,000 - $320,000 for fourplex
* Averages $250-300 per unit in cash flow
* Don't buy under $200 per unit cash flow
* Build a local team of agents, property managers, and lenders
    * Meet them in person before buying
    * Always flies out see the property (2-3 day trips)
        * View other properties in that time, meet with team, view property wanting to buy
* Look for multiple property managers (8% cost is good. Shouldn't cost more than 10%).
    * View his checklist here (https://gallery.mailchimp.com/8b7931e477fd5142f0f163ee5/files/5b132b47-1afa-4f9e-a864-e0c65c38b460/Property_Manager_Interview_Questions_Turnkey_Rentals_101.pdf)
    * Talk with them about the target rent. Discuss that your rent estimates are accurate
    * What are their leasing guidelines? Pets or no pets, 6 month, 1 year, 2 year leases. Section 8?
    * Ask them what their fee sheet is
    * Ask them what their current rent roll is and copies of all current leases
    * Operating/income statements for the last 2 years
    * Have there been any insurance claims/losses in the last 5 years?
    * How do they handle late payments and evictions?
    * Any receipts/warranties for any appliances purchased by the current owner that convey with the property
    * Scope of work/dates of any rehab work done by the current/past owners
    * Property manager does everything including screening tenants (background check, criminal history, income verification, rent collection, etc)
* If hard to get tenant, move-in incentive. Maybe first month of rent is 1/2 price.
* Analyzing markets is especially important for out of state
    * Look at climate, population, economy, job growth, economic diversity, median home price, rent value ratios, landlord laws
    * Then call brokers, agents, property managers, lenders, investors in that area to learn about that market
    * http://www.city-data.com/
    * https://www.zillow.com/research/local-market-reports/  
    * https://www.forbes.com/sites/erincarlyle/2016/03/08/americas-fastest-growing-cities-2016/#30f370b11aac
    * http://www.best-cities.org/2016/best-performing-cities-report-2016.pdf
    * https://www.bls.gov/sae/
    * http://capstonecapitalusa.com/the-most-friendly-8-landlord-states/
* After getting some conventional loans (allowed a maximum of 8-10 conventional loans but sometimes cant get more than 3-5), he got commercial loans from Bank of the West for 2-4 unit properties. This is rare but if you build a relationship they can lend you money on residential properties.
    * Bank of the West gave him 25 year amortization, 10 year terms, and good interest rates
* Does 2-4 units per year
* Buys value-add properties that need 5,000 - 10,000 of work (this is used out of pocket)
    * Keeps existing tenant there, then when they leave, rehab it to raise rents and re-lease
* Get a realtor to create a MLS feed that matches your criteria, this is better than using Zillow, Trulia, etc
    * Find agent with investment background, not a regular agent
* Driving for dollars works
    * Sent 100 letters, got 10 responses
    * Letter contained personalized info (like owners name, house picture, and offer in details)
        * Pick a reasonable price, decide how to finance it (Cash is best, but he didnt do this)
        * Skip agents and offer to pay their closing costs
    * Send them a letter every 6 months if no contact
    * Lowball the offer because you cant see the inside and it will require work
* He estimates 10-15% vacancy
* Keeps 5-6 months of expenses for each owned property as a emergency fund per property
* He raises rents because he thinks its a business
* Likes B class areas
* Doesnt like buildings over 50-60 years old (1950s), prefers newer than that
* Avoid flood zones
* Review monthly reports that property manager will send you
* Keep record of all maintenance, even small things because it may lead to more problems (drain clogs up a lot, etc)
* At the end of the year the property manager should do a walk-through inspection to see if everything looks good
* Likes 10-12% cap rate. But when estimating extremely conservative (12% vacancy, 15% repairs, etc), 6-7% works too.
* When analyzing a deal, don't just give estimates.
    * Rent
        * Look at the current lease for the current rate
        * Use Craigslist to find similar properties in the area
        * Use Rentometer
        * Contact local property managers in the area and ask what the rent should be (send them the address of your property)
    * Vacancy
        * Multifamily will have higher vacancy
        * Dense populations will have less vacancy
    * Property Tax
        * Look it up online
        * Be careful of homestead exemption, which means if the owners family dies, they may get less taxes. So if I buy, my taxes would be different
        * Check if your state re-assesses the property tax after a sale (some states do this)
    * Insurance
        * Usually doesnt cost $1,000/year for a SFH
        * A good rate is about $500/year for a $200k condo
* 3 most important metrics for him are:
    * Cash Flow (looks for $250/unit)
    * Cash on Cash (looks for 15%)
    * Internal Rate of Return (looks for 20-25%)
    * Cap Rate Not as Important~~~ (looks for 10-12%, or worse if strict estimates)
* Maintenance estimates:
    * A class - $1,200/year
    * B class - $2,400/year (maybe)
* Cap ex estimates (break them down individually):
    * Break down each major appliance:
        * Example: Roof, current age 5, Projected lifespan of 20 years, $4,000 replacement cost
        * Example: HVAC, current age 10, Projected lifespan of 15 years, $2,500 replacement cost
    * Make a schedule based on those estimates and divide their costs by 12 months.
* Buy in primary/secondary cities that have 1,000,000+ population.
    * Basically the largest cities in a state, not smaller ones
* How to calculate IRR (https://www.reddit.com/r/realestateinvesting/comments/8rdp2j/how_to_calculate_the_internal_rate_of_return_of_a/e0r2brh/)
* Look at flood risk and dont buy flood areas (http://floodtools.com/Home.aspx)
* Doesnt buy properties with structure, electrical, plumbing issues
* Only looks for houses that need paint job, new flooring, new appliances, maybe new kitchen cabinets, maybe bathroom work
* Big fan of Dallas and Houston, it was top 5 list of his market analysis (but couldn't afford the market)
* Other cities on his list were Charlotte & Nashville 
* Had a hard time finding good deals on the MLS.
    * Spent 10 months doing direct mail (sent 100 personal letters to MFH and got 4 to sell)
* Plans on selling his worst performing SFHs in the future
    * Possible opportunity to buy???
* Driving for Dollars:
    * Since it was ""as-is"" he got financing via commercial loans, since residential loans needed inspections and valuation
        * His lenders didnt care about the condition of the property, only the loan to value ratio (LTV and LTV after rehab)
            * The most important thing lenders try to look at is debt coverage ratio, so sell them on this number.
            * Debt coverage ratio (DSCR) is NOI / annual mortgage debt service (principle and interest payments)
    * Visited 2 neighborhoods he was interested in with MFH
    * Got each address in a spreadsheet
    * Looked up each owners tax info, etc 
    * Wrote one page letter with intro, offer terms (include ""no agent"", ""no commissions"", ""as-is condition""), and contact info
        * No agent means no sales commission but only do this is you have a good escrow company and dont mind writing purchase contracts yourself (or hire a lawyer)
        * Told them he was serious and gave an introduction about himself
    * Attached a picture of the property
    * Wrote price of property on front of letter (big and bold)
    * One accepted his as-is offer
    * One negotiated extra $5k
    * Another wouldnt budge until he offered to pay closing costs and property taxes
    * He offered below market price and well below if it was slightly rehabed and rented at market price
    * He assures them that he has financing, funds, team lined up and doesnt try to act too sales-ie
    * If looking at a $200,000 property, he would offer $150,000 - $175,000
    * If worried about issues with the house (not being able to see inside), keep the contingency there so you can potentially back out during escrow and potentially negotiate a lower price.
* Always fixes things that are broken like HVAC, water heater, holes in walls, etc
    * Doesnt worry about too many cosmetic things that are over the top (nice carpet, stainless steel, etc)
* Look for a nice property with a specific type. Then find what it rents for. See what his current property looks like compared to that property and determine how much rehab it needs to meet the nice properties standards and rent.
* 1 KC property:
    * $3,000 gross rent ($750/unit)
    * 8% vacancy
    * $1,100 taxes/year
    * $1,000 insurance/year
    * 8% property management
    * $2,400/year gross maintenance
    * $600/year cap ex
    * $25/month landscaping
    * $150/month utilities
    * $821/month total expenses
    * NOI $1,940 ($485/unit)
    * $757/month loan payment
    * Cash Flow: $1,182/month ($296/unit)
* 5% maintenance expectations are low, try to project for around 10%?
* 1 Property:
    * Purchased for $190,000 as a 4 plex (added $12,000 in rehab)
    * $3,000 gross rent ($750/unit)
    * 8% vacancy ($240/month)
    * $895 in expenses/month ($1,100/year in taxes, $950/year in insurance, 8% in property management, $200/month maintancence, $100/month cap ex, $150/month water and trash, $50/month in landscaping and snow)
    * NOI $1,868/month ($467/unit)
    * Loan payments: 789/month (30% down, 25 year amortization, 5.15% rate)
    * Cash flow: $1,079 ($270/unit)
* In Kansas City, he likes Grandview and Lee's Summit (especially down south)
    * Zip code 64110 is ok, but too expensive
    * Never buy in 64128 or 64129/64130
    * Hyde Park is ok if its north/west, closer to 71 is sketchy
* Best way to find good property managers is from referrals, make sure investors say they are good to work with. Don't go with smaller companies, go with bigger ones.    ",0,0,1,0,real-estate,"[investing, notes, real-estate]",0
nekomamoushi,home-finder,,https://github.com/nekomamoushi/home-finder,https://api.github.com/repos/home-finder/nekomamoushi,A snake bot that will find your new home !!!,"# Home Finder

This bot will scrape different apartment provider and find results matching your criteria.
It has to be run periodically and if he finds new results, you will be notify.

## Settings

First, you need to fill the settings with your criterias.
You can use this [sample](samples/settings.yml).

### Search

* `price`:
  * `MIN`
  * `MAX`
* `surface`:
  * `MIN`
  * `MAX`
* `rooms`
* `bedrooms`
* `cities`

### Notification

* `name`: the notifier name
* `type`: the type of notification
* `trigger`: the trigger

## Limitation

For now, there is only:

* One provider: [SELOGER](www.seloger.com)
* One notifier: [IFTTT](www.ifttt.com)
  * One type: `webhook`


## Setup

Before using this bot, you'll need an account on Dropbox and IFTTT

* Dropbox
  * Create an acccount if you don't have on
  * create a directory named `home-finder`
  * put your `settings.yml` in this directory
  * `export DROPBOX_TOKEN=your-dropbox-token`

* IFTTT
  * Create an acccount if you don't have on
  * Create a webhook service
  * update your `settings.yml`
  * `export NOTIFIER_TOKEN=your-notifier-token`

## Usage

The entry point:

```
python src/roof_boot/cli.py
```

The first time you will run the bot, it will create a database of all the results.
It will return the search url used for getting all the result (you can see the results on your favorite browser).

Then the second time you run it, it will notify you by mail if there are new results compare to the first search.

",0,0,0,0,real-estate,"[python3, real-estate]",0
amorehead,realtor-estate-py,,https://github.com/amorehead/realtor-estate-py,https://api.github.com/repos/realtor-estate-py/amorehead,A Python web scraper written to help collect probate real estate data in an automated manner.,"# realtor-estate
A Python web scraper written to help collect probate real estate data in an automated manner.",0,0,2,0,real-estate,"[automation, probate, python, real-estate, web-scraping]",0
y-yamamoto-yworks,VasyworksLIST,,https://github.com/y-yamamoto-yworks/VasyworksLIST,https://api.github.com/repos/VasyworksLIST/y-yamamoto-yworks,"„ÄêË≥ÉË≤∏‰∏çÂãïÁî£ÁÆ°ÁêÜÊ•≠ËÄÖÂêë„Åë„Äë""Vasyworks Listing Project with Django"" Vasyworks is a series title of systems for registering and publishing vacancy information in the japanese rental house management industry.",,0,0,1,0,real-estate,"[django, openstreetmap, python, real-estate, real-estate-management, realestate, rent-house, vuejs, webapp]",0
stivenramireza,real-estate-data-transformation,,https://github.com/stivenramireza/real-estate-data-transformation,https://api.github.com/repos/real-estate-data-transformation/stivenramireza,Real estate data transformation using Pandas DataFrames.,"# Real Estate Data Transformation

Real estate data transformation using Pandas DataFrames.

<p align=""center"">
<img src=""https://www.cdn.geeksforgeeks.org/wp-content/uploads/creating_dataframe1.png"">
</p>
",0,0,1,0,real-estate,"[aiohttp, asyncio, pandas, python, real-estate]",0
szig97,trulia-real-estate,,https://github.com/szig97/trulia-real-estate,https://api.github.com/repos/trulia-real-estate/szig97,"The 2019 Trulia Real Estate Dashboard explores the distribution of real estate sales in the United States listed on Trulia.com in the period between September 1st, 2019 and October 31st, 2019.","# 2019 Trulia Real Estate Dashboard

![2019 trulia real estate dashboard](https://user-images.githubusercontent.com/73489414/118370635-2cf1b480-b56e-11eb-8469-9900671bd784.png)

Group Members: Andy McRae, Anthony Njuguna, Jeannaej Yambing, Sam Ziegler

Link to Heroku Server: https://trulia-real-estate-dashboard.herokuapp.com/

# Overview:
The 2019 Trulia Real Estate Dashboard explores the distribution of real estate sales in the United States listed on Trulia.com. 
 The data comes from the period between September 1st, 2019 and October 31st, 2019. The interactive map displays the price, square feet, and the number of beds and baths in each unit. 
 In addition, there is a bar graph that explores which unit size is the most popular,
 and a donut graph that shows the distribution of units that were built in each decade.

# How to Populate the Database:
1.	Clone the 'trulia-real-estate' repository onto your computer.
2.	Open pgAdmin and create a new database called 'real_estate_db'.
3.	Open a query tool in 'real_estate_db' and navigate to the ETL folder in the 'trulia-real-estate' repository.
4.	Select the file 'queries.sql'.
5.	Run the create table code to create the 'trulia_real_estate' table. 
6.	Run the create table code to create the 'locations' table.
7.	Run `select * from trulia_real_estate` and `select * from locations` to ensure that the tables were created.
8.	Open a Jupyter Notebook in the 'trulia-real-estate' repository. 
9.  In the ETL folder, create a text file called 'config.py'. In this file, write down your pgAdmin username, password, localhost, and port.
10.	Open ‚Äòreal_estate_etl.ipynb.' and run all cells.

# How to Set Up the Leaflet Map:
1. Navigate to the static folder and select the 'js' folder.
2. In the js folder, create a file called 'config.js'. In this file, write down your API_KEY from mapbox.com so that the leaflet map can run.

# How to Run the Flask:
1. At the base level in the 'trulia-real-estate' repository, create a config.py that contains your pgAdmin password, username, localhost, and port.
2. Open GitBash in the 'trulia-real-estate' repository.
3. In GitBash, write `source activate PythonData`.
4. Write `python app.py` to get the flask running.
5. In Google Chrome, write `http://127.0.0.1:5000/` and then you will have the Flask running. 

# Datasets: 
https://www.kaggle.com/promptcloud/real-estate-data-from-trulia 

https://developers.google.com/public-data/docs/canonical/states_csv

",0,0,1,0,real-estate,"[css, dashboard, etl, flask, html, javascript, python, real-estate, sql]",0
fivearm,Phase_4_Project,,https://github.com/fivearm/Phase_4_Project,https://api.github.com/repos/Phase_4_Project/fivearm,Best Five Residential Real Estate Zip Codes,"# Phase_4_Project
 
**Authors**: *Nina Vergara, Manav Kahlon, Ben Bowman*
  
## Overview
- [Business Problem](#Business-Problem)
- [Data](#Data)
   - [Zillow and Realtor](./data)
- [Methods](#Methods)
- [EDA Results: Notable Features](#EDA-Results-Notable-Features) 
- [Modeling Results](#Modeling-Results)
- [Conclusions](#Conclusions)
- [For More Information](#For-More-Information)
- [Repository Structure](#Repositroy-Structure)
  

## Business Problem
A real estate investment company has asked us to select the top five US zip codes to invest in.  
 
## Data
We examined more than 30,000 records from Zillow that included house prices across different zip codes from 1997-2021. We found additional data from Realtor.com that was used in the selection of the top 5 zip codes. The Zillow dataset contained 316 columns most of which were different dates from 1996 to 2021 with house prices in that zip code. We compressed the dataset into only 10 columns with the time becoming the index column and the values melting into a single column based on their zip code. To create the dataset used for zip code selection, the Zillow and Realtor.com datasets were merged on zip code and record dates. In order to select the zip codes that would yeild the largest ROI, we considered both market and housing characteristics. 


 #### Data from Zillow
    * new_zillow_data.csv
 #### Data from Realtor 
    * Downloaded from: https://www.realtor.com/research/data/
   
## Methods

### Zip Code Selection

For market evaluation, we considered the average pending ratio and average number of days a listing is on the market for. Pending ratio is the ratio of number of listings pending (listings that have accepted an offer) divided by the total number of active listings for a given month. For listing evaluation, we considered the average house value and the number of listings that underwent a price increase. 

For each of these characteristics, we chose to account for the percent change in these averages from one month to the next. This would allow us to choose zip codes that continuously showed growth in the pending ratio, average house value, and number of listings. We counted against houses that showed monthly growth in the number of days on the market.

We weighted the average of these columns for each zip code with the following equation:

zip code score = 0.4(house value change) + 0.2(pending ratio change) + 0.2(price increase change) - 0.2(days on market change)
We selected the top 5 zipcodes with the highest scores.
    
## EDA Results Notable Features


### House Value and Price Increase Count

![image](./images/house_value_and_price_increase_count.png)

4/5 selected zipcodes contain houses with higher values than the other zipcodes combined. Zip code 28546 has homes with lower values, but a very high price increase rate of change. This indicates an 'up and coming' zip code, where the homes have consistently garnered value throughout time. 

### Pending Ratio and Days on Market
![image](./images/pending_ratio_and_days_on_market.png)
 
The average days a property is on the market is not a sufficient indicator of consumer demand, because pending properties, or properties that have accepted offers, are still considered 'on the market'. To judge consumer readiness, we selected zipcodes that outpreformed the other zipcodes for increased the number of pending houses while having comparitavely lower days on market increases. 

 
## Modeling Results
We build multiple time series models ranging from a simple naive model to a Facebook Prophet model. The metric we chose was `RMSE` since we want the lowest error between the actual and predicted price of houses in the five recommended zip codes. For two of the zip codes, we used SARIMAX since it not only produced a low RMSE but was better at capturing recent trends in the data and using those trends to make predictions five years into the future. For the other three zip codes, we used a Facebook Prophet model. This model was able to get the lowest `RMSE` while still capturing the recent trends in the data and making future predictions based on this. Here are the top 5 zip codes along with their `RMSE` values:

![image](./images/zipcodes.PNG)  
    
## Conclusions
Using our custom score for determination, we selected five US zip codes for the best real estate investments: 84045 (Saratoga Springs, UT), 98642 (Ridgefield, WA), 28546 (Jacksonville, NC), 80016 (Aurora, CO), and 80516 (Erie, CO).  The current and five-year projected prices and ROI‚Äôs are as follows:

![image](https://user-images.githubusercontent.com/82840623/131015478-355f1d18-a6d9-4531-9653-0e51d47bd56f.png)

For the best projected ROI, we suggest Aurora, CO, with a current median home price of just over $300k and a projected 2026 median price of $439k (for an expected ROI of nearly 45%).  For investors looking for a less capital-intensive opportunity, we suggest Jacksonville, NC, where current average home prices are only around $179k, and expected five-year ROI is almost 27%.

    
    
## For More Information
Please review our full analysis in different notebooks [Aurora, CO](./notebooks/Aurora_CO_80016.ipynb), [Erie, CO](./notebooks/Erie_CO_80516.ipynb), [Jacksonville, NC](./notebooks/Jacksonville_NC_28546.ipynb), [Functions to model](./notebooks/Phase_4_functions.py), [Saratoga Springs, UT](./notebooks/Saratoga_Springs_UT_84045.ipynb), and our [Data Prep Notebook](./notebooks/zip_code_selection_and_one_model.ipynb), or our [Presentation](./Presentation.pdf).    
    
## Repositroy Structure
```
‚îú‚îÄ‚îÄ data                                  <- Sourced from an external source
‚îú‚îÄ‚îÄ images                                <- Images that were used in the presentation and notebooks
‚îú‚îÄ‚îÄ Notebooks                             <- The notebooks that we made
    ‚îî‚îÄ‚îÄ Aurora_CO_80016.ipynb                  <- Data Prep Notebook
    ‚îî‚îÄ‚îÄ Erie_CO_80516.ipynb                    <- Erie, CO, 80516 Notebook
    ‚îî‚îÄ‚îÄ Jacksonville_NC_28546.ipynb            <- Jacksonville, NC, 28546 Notebook
    ‚îî‚îÄ‚îÄ Phase_4_functions.py                   <- Phase 4 functions Notebook
    ‚îî‚îÄ‚îÄ Ridgefield_WA_98642.ipynb              <- Ridgefield, WA, 98642 Notebook
    ‚îî‚îÄ‚îÄ Saratoga_Springs_UT_84045.ipynb        <- Saratoga Springs, UT, 84045
    ‚îî‚îÄ‚îÄ zip_code_selection_and_one_model.ipynb <- Data Prep Notebook
‚îú‚îÄ‚îÄ gitignore                             <- python files to ignore 
‚îú‚îÄ‚îÄ Presentation.pdf                      <- PDF of our project presentation  
‚îî‚îÄ‚îÄ README.md                             <- The README.md
```
",0,0,1,0,real-estate,"[real-estate, timeseries, zipcode]",0
elmahdiouhssain,Sjpromoteur,,https://github.com/elmahdiouhssain/Sjpromoteur,https://api.github.com/repos/Sjpromoteur/elmahdiouhssain,Web application for managing real estats agancy with all necessary documents and print,"<p align=""center""><a href=""https://laravel.com"" target=""_blank""><img src=""https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg"" width=""400""></a></p>

<p align=""center"">
<a href=""https://travis-ci.org/laravel/framework""><img src=""https://travis-ci.org/laravel/framework.svg"" alt=""Build Status""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/dt/laravel/framework"" alt=""Total Downloads""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/v/laravel/framework"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/l/laravel/framework"" alt=""License""></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[OP.GG](https://op.gg)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
",0,0,1,0,real-estate,"[data-structures, household, managment-system, real-estate]",0
gianantoniopini,sales-activity-reporting,,https://github.com/gianantoniopini/sales-activity-reporting,https://api.github.com/repos/sales-activity-reporting/gianantoniopini,Sales activity reporting,"# Sales Activity Reporting

The [back-end][1] provides a REST API to retrieve the sales activity data. It is where the data aggregation (grouping, filtering, counting, etc.) takes place.  
The [front-end][2] provides a single-page application to visualize the sales activity data.

## Requirements

- [Node.js][3]
- [npm][4]

## Setup

### 1. back-end setup

#### 1.1 Switch into the back-end directory

```sh
cd back-end
```

#### 1.2 Install NPM packages

```sh
npm install
```

#### 1.3 Create your `.env` file

See file [.env.example][5] for an example

#### 1.4 Compiles and hot-reloads for development

```sh
npm run start
```

### 2. front-end setup

#### 2.1 Switch into the front-end directory

```sh
cd front-end
```

#### 2.2 Install NPM packages

```sh
npm install
```

#### 2.3 Create your `.env` file

See file [.env.example][6] for an example.

#### 2.4 Compiles and hot-reloads for development

```sh
npm run serve
```

<!-- MARKDOWN LINKS -->

[1]: ./back-end
[2]: ./front-end
[3]: https://nodejs.org/en/download/current/
[4]: https://nodejs.org/en/download/current/
[5]: ./back-end/.env.example
[6]: ./front-end/.env.example
",0,0,1,0,real-estate,"[axios, bootstrap, coding-challenge, expressjs, nodejs, real-estate, reporting, rest-api, sales, typescript, vue]",0
Developer-Zahid,groupe-verlaine,,https://github.com/Developer-Zahid/groupe-verlaine,https://api.github.com/repos/groupe-verlaine/Developer-Zahid,,,0,0,1,0,real-estate,"[home-service, insulate-and-restore, insulation, real-estate]",0
HomerHousemen,Hoam,,https://github.com/HomerHousemen/Hoam,https://api.github.com/repos/Hoam/HomerHousemen,A Peer-to-Peer Residential Real Estate System,,0,0,1,2,real-estate,"[bitcoin, cryptography, p2p, real-estate, web3]",0
MuktiSingh,LT_DEC2021_MUKTI_SINGH,,https://github.com/MuktiSingh/LT_DEC2021_MUKTI_SINGH,https://api.github.com/repos/LT_DEC2021_MUKTI_SINGH/MuktiSingh,"A real estate website using HTML, CSS and JavaScript","# Internship-Project
<h2>A Real Estate website using HTML, CSS and JavaScript</h2>
<br/>
<br/>
<img src=""Result/1.png"" alt=""1st"">

<br/>
<br/>
<img src=""Result/2.png"" alt=""1st"">

<br/>
<br/>
<img src=""Result/3.png"" alt=""1st"">

<br/>
<br/>
<img src=""Result/4.png"" alt=""1st"">

<br/>

",0,0,1,0,real-estate,"[real-estate, realestate-landing-page, realestate-sample-website]",0
manelfideles,a-tua-casa-nao-me-e-estranha,,https://github.com/manelfideles/a-tua-casa-nao-me-e-estranha,https://api.github.com/repos/a-tua-casa-nao-me-e-estranha/manelfideles,Plataforma de avalia√ß√£o de casas conforme a quantidade de e dist√¢ncia √†s facilidades que as rodeiam.,,0,0,1,0,real-estate,"[d3-js, map-visualization, mapbox-gl-js, real-estate]",0
HeySreelal,VintageRealEstateUI,,https://github.com/HeySreelal/VintageRealEstateUI,https://api.github.com/repos/VintageRealEstateUI/HeySreelal,Flutter Everyday - Day 3 ü¶Ñ Real Estate App Design by @uk_designer7970! üé®,"# Real Estate App UI
![](https://img.shields.io/badge/FlutterEveryday-Day%203-blue.svg)

Real Estate UI Design By [@uk_designer7970](https://www.instagram.com/uk_designer7970/).


## ü¶Ñ Design 
Here's the original design:

[![Original Design](/assets/git/Design.jpg)](https://www.instagram.com/p/CcKGz8dJoXd/)


I'm pretty sure that this one is clean, and nice looking UI. Kudos to UK Designer once again. üéâ

## ü¶Ñ Results

The project contains two screens given in the `screens/` directory, one for the home screen and the other for Getting Started page.

I'm aware of the change in font, but I think it's okay.

![](/assets/git/Result.jpg)

I'm so happy to keep this going! ü¶Ñ

## üí¨ Note
The release build for Android (apk) is available on the Release tab.
<br>

## üõ∏ Credits
- Complete UI is done by [@uk_designer7970](https://www.instagram.com/uk_designer7970/)
- The Bed Icon is from [Freepik](https://www.flaticon.com/premium-icon/double-bed_2284001?term=bed&page=1&position=1&page=1&position=1&related_id=2284001&origin=search)
- The Bath Tub Icon is also from [Freepik](https://www.flaticon.com/free-icon/bath-tub_333447?term=bath%20tub&page=1&position=1&page=1&position=1&related_id=333447&origin=search) 

## üåö Contact 

You can connect me on [Telegram](https://t.me/heysreelal) all the time or on [Twitter](https://twitter.com/HeySreelal) or [Instagram](https://instagram.com/heysreelal).

I always prefer Telegram over Instagram or Twitter. I'm always open to new ideas and suggestions. ü¶Ñ

# Thank You ‚ù§Ô∏è
Show your support by sharing or starring the repo. ‚≠êÔ∏è
",0,0,2,0,real-estate,"[app, flutter, flutter-everyday, real-estate, ui]",0
dubrovin-sudo,house-prediction,,https://github.com/dubrovin-sudo/house-prediction,https://api.github.com/repos/house-prediction/dubrovin-sudo,Testing MLOps approach to predict houses' prices in Saint-Petersburg,"# House price prediction for real estate in Saint-Petersburg

Status of Last Deployment: <br>
<img src=""https://github.com/dubrovin-sudo/house-prediction/workflows/Flake8/badge.svg?branch=feature""><br>
<img src=""https://github.com/dubrovin-sudo/house-prediction/workflows/Test/badge.svg?branch=feature""><br>

## About

![](https://wallpaperaccess.com/full/508402.jpg)

The dataset consists of lists of unique objects of popular portals for the sale of real estate in Russia. More than 540 thousand objects.
The dataset contains 540000 real estate objects in Russia.

### Content

The Russian real estate market has a relatively short history. In the Soviet era, all properties were state-owned; people only had the right to use them with apartments allocated based on one's place of work. As a result, options for moving were fairly limited. However, after the fall of the Soviet Union, the Russian real estate market emerged and Muscovites could privatize and subsequently sell and buy properties for the first time. Today, Russian real estate is booming. It offers many exciting opportunities and high returns for lifestyle and investment.
The real estate market has been in a growth phase for several years, which means that you can still find properties at very attractive prices, but with good chances of increasing their value in the future.

### [Dataset](https://www.kaggle.com/datasets/mrdaniilak/russia-real-estate-20182021)

The dataset has 13 fields.

- date - date of publication of the announcement;

- time - the time when the ad was published;

- geo_lat - Latitude;

- geo_lon - Longitude;

- region - Region of Russia. There are 85 subjects in the country in total;

- building_type - Facade type. 0 - Other. 1 - Panel. 2 - Monolithic. 3 - Brick. 4 - Blocky. 5 - Wooden;

- object_type - Apartment type. 1 - Secondary real estate market; 2 - New building;

- level - Apartment floor;

- levels - Number of storeys;

- rooms - the number of living rooms. If the value is ""-1"", then it means ""studio apartment"";

- area - the total area of the apartment;

- kitchen_area - Kitchen area;

- price - Price. in rubles;

  Also we mine additional data from [OpenStreetMap](https://maps.mail.ru/osm/tools/overpass/):

  - subways;
  - parks;
  - restaurants;
  - museums

### Goal

Our job to predict the sales price for each house. For each Id in the test set,  we must predict the value of the SalePrice variable. 

### Metric

Submissions are evaluated on [Root-Mean-Squared-Error (RMSE)](https://en.wikipedia.org/wiki/Root-mean-square_deviation) between the logarithm of the predicted value and the logarithm of the observed sales price. (Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.)



## Stack

We are testing MLOps approaches to predict houses' prices in Saint-Petersburg:

- Lint Flake8;
- Pytest;
- DVC;
- Docker;
- MLFlow;
- LightGBM;
- CI/CD Github

## Pipeline
![](reports/figures/Pipeline.png)



",0,0,3,0,real-estate,"[data-science, docker-compose, dvc-pipeline, fastapi, machine-learning, mlflow, mlops, real-estate, workflow]",0
Jainlo,Landlords,,https://github.com/Jainlo/Landlords,https://api.github.com/repos/Landlords/Jainlo,An exploration of a web scraped real estate data,"# Landlords
In this project we studied the real estate rental market of the four major cities in Saudi Arabia: Jeddah, Riyadh, Alkhobar and Dammam. We explored the relationships of prices with other features. The dataset used is found on kaggle <a href = ""https://www.kaggle.com/datasets/lama122/saudi-arabia-real-estate-aqar"">Saudi Arabia Real Estate (AQAR) dataset</a> It was collected and scrapped from <a href =""https://sa.aqar.fm"">Aqar.fm</a>
This report will help officials from the Ministry of Housing understand the current rental landscape for the average consumer (families and singles) in each city. 
A report of the initial <a href=""https://jainlo.github.io/Landlords""></a>[data exploration](./report.html)

## Main features discussed in our report
- City: location of the house
- Price: monthly rent (by building an assumption and performing needed calculations)
- Front: which way is the house front facing; north, west, east, south, south-east, south-west, north-eat and north-west
- Districts: which district the house is located in
## Main issues
After exploring the dataset we found significant issues with it
- Not many observations (total of 1500 units after deleting duplicates)
- District distribution is not fair
- Price periods are ambiguous 
## Solutions
- Combining the dataset with additional datasets to get more complete answers to our questions
- Build an assumption for the price period based on research done on the website ""aqar""
## Main questions
- Which feature is more prominent in expensive real estate?
- Is there a preferred front?
- Is there a front that is more expensive?
- Which side of each city is considered more expensive?
## Key conclusions
- Real estate has higher prices in Jeddah compared to Riyadh, Dammam and Alkhobar (on the date of data collection)
- The features that are more prominent in expensive real estate in order are:
    1. house includes a driver's room
    2. house has a frontyard
    3. house has a garage
- The most expensive front out of the 4 main directions is ""East"", while ""North-east"" is the most expensive overall


",0,0,2,0,real-estate,"[eda, real-estate]",0
omar-elmaria,wine_and_real_estate_listings_r_scraper,,https://github.com/omar-elmaria/wine_and_real_estate_listings_r_scraper,https://api.github.com/repos/wine_and_real_estate_listings_r_scraper/omar-elmaria,"This repo contains two Rmd files. The first file scrapes wine listings under the brand name ""m√∂venpick"" using the rvest package. The second scrapes Javascript-rendered apartment listings on the Swiss real estate website (homegate.ch) using RSelenium","# crawling_with_r_rvest_and_rselenium
This repo contains two Rmd files. The first file scrapes wine listings under the brand name ""m√∂venpick"" using the rvest package. The second scrapes Javascript-rendered apartment listings on the Swiss real estate website (homegate.ch) using RSelenium

# 1. Objective of the First Part of the Project (Crawling M√∂venpick Wine)
The goal of the first part of the project is to crawl this [website](https://www.moevenpick-wein.com/de/rotweine?p=1) and extract the data points shown below
- product_title
- product_name
- product_url
- rating_score (out of 100 or 20)
- reviewer (could be a person, a magazine, or simple a displayed ""Score"")
- country
- city
- price (in CHF)
- image_url

![image](https://user-images.githubusercontent.com/98691360/202925388-aac7ba63-2bca-44fd-9d47-00add9d2aefd.png)

## 1.2. Analysis of the Website
The website is simple to crawl as it does **not** use Javascript to render its content and does not employ sophisticated anti-bot mechanisms. Therefore, The ‚Äúrvest‚Äù package in R is sufficient to crawl the content of the website. In addition to the ```rvest``` package, we use the ```dplyr``` and ```stringr``` libraries to **wrangle** and **clean** the crawled data.

The URL ```https://www.moevenpick-wein.com/de/rotweine``` returns **2177** results. There are **24 results** on each page, which means there are ~ **91 pages** to scrape. The website is **paginated** https://www.moevenpick-wein.com/de/rotweine**?p=1**, meaning we can create a **for** loop to scrape the results from every page by changing the numeric parameter at the end of the URL.

## 1.3. Crawling Process
We start by defining the **CSS/XPath** selectors of **each data point** we want to crawl. The website is well-structured, so every item is stored in a ""list"" with a class ""item"" as shown below.

![image](https://user-images.githubusercontent.com/98691360/202925458-e9d5dc30-0e42-4738-a042-08119412f16e.png)

The CSS/XPath selectors of the nine data points are as follows:
- **product_title**
  - `span.product-name-1` --> `span` with a class `product-name-1`
- **product_name**
  - The product name is composed of two parts, so we extract them separately and combine them into one variable afterward
  ![image](https://user-images.githubusercontent.com/98691360/202925544-4a7bcc9f-c2ff-47d6-bd82-190f6acffdbf.png)
  - `p.product-name > span.product-name-part:first-child` --> The CSS selector of the first part of the product_name. `p` with a class `product-name` AND a first child of `span` with class `product-name`
  - `p.product-name > span.product-name-part:nth-child(2)` --> The CSS selector of the second part of the product_name. `p` with a class `product-name` AND a second child of `span` with class `product-name`
  - After extracting both parts separately, we combine them into one variable using the `paste0` function --> `paste0(product_name_p1, "" "", product_name_p2)`
- **product_url**
  - `h2.product-name > a %>% html_attr(""href"")` --> `h2` with a class `product-name` AND a child `a`. Since this is a URL, we extract the `href` attribute using the `html_attr` method in R
- **rating_score and reviewer**
  - The rating score is a composite string that consists of **two parts**
  - **Part 1** is the person/magazine that reviewed the wine bottle
  - **Part 2** is the score out of 100 or 20
  - In the example below, the person who reviewed the wine is ""Tim Atkin"". He gave the bottle a score of 98/100
  - Since the score can be out of 100 or 20, we crawl the raw score in **string format** and also the individual components to calculate a percentage (e.g., 98/100 = 0.98 or 15/20 = 0.75)
  
  ![image](https://user-images.githubusercontent.com/98691360/202926510-db9154a0-1f40-4d71-b3a8-47bcee6f003f.png)
  - The CSS selector of the **composite review (reviewer + score)** is `p.rating-score` --> `p` with class `rating-score`
  - **Part one** can be extracted using this regex --> `[a-zA-Z]+`. This regex extracts any characters from A-Z in the string (lowercase or uppercase)
  - **Part two** as a whole can be extracted using this regex --> `\\d+\\/\\d+`. This regex extracts any part of the string that matches this pattern **number/number**
  - The **left part of the raw score** (before the division sign) can be extracted using this regex --> `""\\d+(?=\\/\\d+)`. This regex extracts any digit **before** a division sign that is followed by numbers
  - The **right part of the raw score** (after the division sign) can be extracted using this regex --> `(?<=\\/)\\d+`. This regex extracts any digit **after** the division sign
  - To check how these regular expressions work, one can use this [website](https://regex101.com/). Please note that in R, a double backslash is required. On this website, only one backslash is used
- **country & city**
  - The country and city are displayed together and separated by pipe ‚Äú|‚Äù
  - `p.cellar-name` is the CSS selector of this composite string --> `p` of class `cellar-name`
  - To extract the **country**, one can use this regex --> `\\w+(?=\\s\\|)`. It extracts any word characters **before** "" |""
  - To extract the **city**, one can use this regex --> `(?<=\\|\\s)\\w+`. It extracts any word characters **after** ""| ""
- **price**
  - The XPATH selector of price is `//span[@data-price-type = 'finalPrice']/span` --> `span` with attribute `data-price-type = 'finalPrice'` AND a `span` child
price is displayed as a composite string with the currency symbol (e.g., CHF 950.00)
  - In addition, wines that have 4-digit prices are displayed with an **apostrophe** (e.g., CHF 1,150.00)
  - To handle the **first case**, we can use this regex --> `(?<=CHF\\s).*`. It extracts any alphanumeric character **after** (CHF )
  - To handle the **second case**, we can use the `str_replace` method to replace the apostrophe with a blank character
- **image_url**
  - The CSS selector of image_url is `img.product-image-photo` --> `img` with class `product-image-photo`
  - The URL of the image is stored under an attribute called `src`. We can extract it with the `html_attr` method

After extracting these data points, we can place them in a data frame using the `data.frame` method in R. Since we loop over each page, we can define an **empty data frame** before the ""for"" loop. This data frame will grow over time because we will append the results of each crawling iteration to it. We can use a **temporary data frame within the ‚Äúfor‚Äù loop** to store the results of iteration ""i‚Äôs"", and then bind the results to the data frame we created before the ‚Äúfor‚Äù loop. In code form, this looks something like this...

![image](https://user-images.githubusercontent.com/98691360/202926210-ac8de620-e70d-4100-b293-74abcfec09dc.png)

## 1.4. Throttling Our GET Requests
To **stay polite** to the server, we need to throttle our GET requests to prevent our scraper from getting blocked. We can create a function to produce **random time values** and use the `Sys.sleep()` function to **slow down the scraper** in a random fashion. In code form, this looks something like this‚Ä¶

![image](https://user-images.githubusercontent.com/98691360/202926552-58e4cb95-cb2a-4ba2-84f6-173cdd04bd2b.png)

## 1.5. Further Automating the Scraper
To fully automate the scraper, we can extract the **last page number** from the first page and set it as the end of the ""for"" loop‚Äôs range. The first page does not display the last page number, but rather the **total number of products**, as shown below.

![image](https://user-images.githubusercontent.com/98691360/202926338-e2a583a1-a1dd-4937-843e-ac4c9054fb19.png)

Since there are 24 results on each page, we can calculate the total number of pages using this formula --> `ceiling(last_page ‚Äú2177‚Äù / 24) = 91`

The CSS selector of this number is `div.filter-results-count > strong` --> `div` with class `filter-results-count` AND child `strong`

## 1.6. Bonus Part
The dataset contains the **""price""** and **""country""** fields, we can use these two fields to construct a price histogram per country, as shown below. The code is included in the last section of the .Rmd file

![image](https://user-images.githubusercontent.com/98691360/202926405-cd3603c3-42e7-464a-baa5-bf78be9c90d1.png)

# 2. Questions?
If you have any questions or wish to build a scraper for a particular use case (e.g., Competitive Intelligence or price comparison), feel free to contact me on [LinkedIn](https://www.linkedin.com/in/omar-elmaria/)
",0,0,1,0,real-estate,"[crawling, data-mining, e-commerce, homegate, moevenpick, real-estate, rselenium, rstudio, rvest, spider, web-scraping, wine-listings]",0
clemsims,appart-finder,,https://github.com/clemsims/appart-finder,https://api.github.com/repos/appart-finder/clemsims,Scrap Module for my personal usage because I'm desperate to find a new appartment,"# appart-finder
Scrap Module for my personal usage because I'm broke and desperate to find a new appartment and the market is hella tense... :(
",0,0,1,0,real-estate,"[chromedriver, db, real-estate, scraping, selenium]",0
jamie-mh,estimmo-api,,https://github.com/jamie-mh/estimmo-api,https://api.github.com/repos/estimmo-api/jamie-mh,üó∫Ô∏è French real-estate estimation and history API,"![Estimmo API](./doc/logo.png)
<br/>

High-performance French real-estate estimation and history API built with ASP.NET and PostGIS. Using open data, Estimmo provides a visualisation of national property values and sale history.

[Website](https://estimmo.jmh.me)

[API Documentation](https://estimmo-api.jmh.me/swagger)

## Running

No data is provided and must be downloaded and imported.

### Requirements

- .NET 7
- PostgreSQL 14+ database with PostGIS and tdigest extensions
- cURL
- gzip
- Mapshaper

### Generating the database

Update the `appsettings.[env].json` files as required.

The init script will download the required data and process it.

```
./init.sh
```

## Data sources

- [France GeoJSON](https://github.com/gregoiredavid/france-geojson)
- [Etalab G√©o API](https://geo.api.gouv.fr)
- [Etalab Cadastre](https://cadastre.data.gouv.fr/datasets/cadastre-etalab)
- [Base Adresse Nationale](https://adresse.data.gouv.fr)
- [Etalab DVF](https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres-geolocalisees/)
",0,0,2,0,real-estate,"[cadastre, cartography, dvf, postgis, real-estate]",0
datawithyounes,zillow_home_value_analysis_2023,,https://github.com/datawithyounes/zillow_home_value_analysis_2023,https://api.github.com/repos/zillow_home_value_analysis_2023/datawithyounes,Zillow's home value analysis using SQL,"# Zillow Home Value Data: An SQL Exploration

<strong>In this project, I used SQL to explore Zillow's home value data. I was interested in learning more about how home values have changed over time, and what factors might be driving these changes.

For more : [Medium Article](https://httpsyns.medium.com/exploring-zillows-home-value-data-unveiling-trends-and-factors-shaping-the-real-estate-market-fc02fb147be9)

I used SQL to answer these questions :

- [Questions](https://github.com/httpyns/zillow_home_value_analysis_2023/blob/main/questionnaire/README.md)
  
I also used SQL to create visualizations of the data. These visualizations helped me to better understand the data and to communicate my findings to others.
- [Tableau visualizations ](https://public.tableau.com/app/profile/younes.a/viz/zillow_dashboard/Dashboard1) </strong>


## Used Datasets

 ### Five key [datasets](https://github.com/httpyns/zillow_home_value_analysis_2023/tree/main/csv) for this case study

  - <strong>home_v_state.csv</strong>: A measure of the typical home value and market changes across a given region and in quarters.
- <strong>city_rental_prices.csv</strong>: A measure of the typical observed market rate rent across a given region in quarters.
- <strong>homes_sold_above_list.csv</strong>: Ratio of sales where Sale Price above the final list price and excludes homes sold for exactly the list price.
- <strong>homes_sold_below_list.csv</strong>: Ratio of sales where Sale Price below the final list price and excludes homes sold for exactly the list price.
- <strong>median_days_to_close.csv</strong>: Number of days between the listing going pending and the sale date.



## Author

  - **Younes AGEGAL**
       ##### Email : contact@datawithyounes.tech
       ##### [LinkedIn](https://www.linkedin.com/in/younesagegal/)
       ##### [UpWork](https://www.upwork.com/workwith/younesa11)
       ##### [Twitter](https://twitter.com/datawithyounes)
       ##### [Portfolio](https://datawithyounes.tech/)


## Datasets Source
- [Zillow Public Data](https://www.zillow.com/research/data/)

",0,0,1,0,real-estate,"[data-analysis, data-visualization, eda, real-estate, sql]",0
ignacypolak1,house-price-prediction,,https://github.com/ignacypolak1/house-price-prediction,https://api.github.com/repos/house-price-prediction/ignacypolak1,The project aimed to demonstrate the capabilities of data analysis and machine learning in the context of real estate price estimation.,"
# Real Estate Price Estimation Application Project Using Machine Learning Methods
![](image.png)

## Description:
The project aimed to demonstrate the capabilities of data analysis and machine learning in the context of real estate price estimation.

## Dependencies:

``` python
ipykernel = ""==6.23.1""
pandas = ""==1.5.3""
scikit-learn = ""==1.2.2""
seaborn = ""==0.12.2""
graphviz = ""==0.20.1""
pyflowchart = ""==0.3.1""
notebook = ""==7.0.3""
```

## Installation and Launch Instructions:
1. Install Python version 3.9.x.
2. Install pipenv using the command: ""**python -m pip install pipenv**"".
3. Create a virtual environment and install the dependencies using the command: ""**pipenv install**"", executed in the main project folder.
4. Open the file model_training.ipynb using Jupyter Notebook, Jupyter Lab, or any environment or software that allows for cell execution. Remember to choose the interpreter from the virtual environment created in the previous step.
5. Run the cells in the file sequentially. The *kc_house_data.csv* dataset will be analyzed and processed, and based on the extracted data, selected machine learning models will be trained and saved.
6. Run the last cell - it will launch a simple GUI application that loads the previously saved machine learning model and, based on the features provided in the text fields, will estimate the property price.

## Sources:
 - Dataset used in the project: [kc_house_data.csv](https://www.kaggle.com/datasets/shivachandel/kc-house-data)
",0,0,1,0,real-estate,"[data-science, decision-trees, gradient-boosting-regressor, jupyter, linear-regression, machine-learning, python, real-estate]",0
ajhammond12345,ReCo,,https://github.com/ajhammond12345/ReCo,https://api.github.com/repos/ReCo/ajhammond12345,,"# ReCo
This app allows landlords and tennants to communicate and manage their renting related needs,
and allows both parities to track and save their expenses and paperwork, significantly simplifying
the rental market.
",0,0,1,0,real-estate,"[hackathon, hackathon2017, hackgt, real-estate]",0
lasellers,AtlasGrove,,https://github.com/lasellers/AtlasGrove,https://api.github.com/repos/AtlasGrove/lasellers,"AtlasGrove takes Tiger/Line shapefiles from the US Census Bureau and renders them into usable images, suitable for maps. (PHP/Symfony 3)","# AtlasGrove v2.0.9
## By Lewis Sellers (aka Min)
## Intrafoundation Software

[**NOTE**: Currently being Developed/Refactored. CLI commands are almost complete. At some point thereafter once that has settled, a proper web admin will be made. See TODO.]

AtlasGrove takes Tiger/Line shapefiles from the US Census Bureau and renders them into usable images.

Version 2.x of this software is a Symfony 3.x rewrite of older bespoke/framework-less software.

![AtlasGrove](https://github.com/lasellers/AtlasGrove/blob/master/screenshot1.png)
![AtlasGrove](https://github.com/lasellers/AtlasGrove/blob/master/screenshot2.png)
![AtlasGrove](https://github.com/lasellers/AtlasGrove/blob/master/screenshot3.png)
![AtlasGrove](https://github.com/lasellers/AtlasGrove/blob/master/screenshot4.png)

## CLI

This software uses both a CLI and web interface. Do php bin/console list to see complete list. Some examples are:

    php bin/console atlasgrove/status
    php bin/console atlasgrove/cache
    php bin/console atlasgrove/render
    php bin/console atlasgrove/download
    php bin/console atlasgrove/downloads
    php bin/console atlasgrove/dbf
    php bin/console atlasgrove/shx
    php bin/console atlasgrove/shp`

    php bin/console atlasgrove/status

Shows basic settings information.

    php bin/console atlasgrove/download

Downloads Tiger/Line data from the US Census FTP site. You must specify the state number to be downloaded. For example:

    php bin/console atlasgrove/download 47

downloads the data related to Tennessee.

By default all downloaded data is stored out of project/public (and out of vagrant/git/auto-backup paths) one directory above the project down in the cache folder, though there are parameter settings to have it show up in /var/cache. 

    php bin/console atlasgrove/cache

Runs through all downloaded Tiger/Line data and generates a simple intermediate data output file that is used for actual rendering.

    php bin/console atlasgrove/cache --all

or 

    php bin/console atlasgrove/cache

will cache all downloaded data.

You may also specific a single geo region like:

    php bin/console atlasgrove/cache 47
    php bin/console atlasgrove/cache 47001

Optionally the use of the --force flag will cause previously generated data to be overwritten.

Other options are:

    php bin/console atlasgrove/cache --states
    php bin/console atlasgrove/cache --counties

    php bin/console atlasgrove/render

Actually renders data. There are several options here.

    php bin/console atlasgrove/render --all --8k

This for instance, renders all the regions of interest (state and county bounded regions) at 8k resolution. The current resolutions are --vga, --1080p, --4k, --8k and --16k.
You may use the --force option to force regenerating an image even if one already exists. You may also specify a geo region id like:

    php bin/console atlasgrove/render 47 --8k --force
    php bin/console atlasgrove/render 47001 --8k --force

or a bound latitude/longitude region such as:

    php bin/console atlasgrove:render -86,34,-85,35 -v --8k 

    php bin/console atlasgrove/render 47 --roi --8k --force

Adding the --roi flag causes the roi of state 47 to be looked up and then rendered as a bound lat/long region.

JPG or PNG [Todo: SVG]

    php bin/console atlasgrove:render 47 --png
    php bin/console atlasgrove:render 47 --jpg

The layers that are rendered can be selected by a csv list such as:

    php bin/console atlasgrove:render 47001 --roi --layers=water,road,rail,landmark,area
    php bin/console atlasgrove:render 47001 --roi --layers=area,rail

    php bin/console atlasgrove:render 47 aspect=Width

    php bin/console atlasgrove:render 47 region=Clip
    php bin/console atlasgrove:render 47 region=Roi
    php bin/console atlasgrove:render 47 width=999 height=888

    php bin/console atlasgrove:render --states
    php bin/console atlasgrove:render --counties

    php bin/console atlasgrove:render test=tn
    php bin/console atlasgrove:render test=us

    php bin/console atlasgrove:render test=tn --steps
    php bin/console atlasgrove:render test=us --steps

    php bin/console atlasgrove:render 0 --roi --layers=area,road,rail
    php bin/console atlasgrove:render --roi --layers=area,road,rail


## Web Interface

Under Construction


## Installation

    composer update
    composer install

    php bin/console assets:install


## Versions

For detailed version history see git logs.

* 2.0.9 April 1 Semi-stable
* 2.0.8 March 28 2017 Semi-stable 2.x version
* 2.0.0 March 2017 Rebuild
* 1.x  Legacy Framework-less version built 10 years ago


# Todo
* Add SVG export
* Add JSON Export
* Add more text options: All text, County names, City Names, State names
* Make ""rendered by"" text more flexible.
* Add text sizing options
* Add ""tiles"" export option -- To render series of n tiles and n zoom layers
* Add to the state + region select a Zipcode select
* Add black/white color option
* Add multiple color sheet options
* Create a limited front-end interface with 1) Views options and 2) Map generation options
* Do more code review looking things to eliminate
* Make the Readme/wiki screenshots JPG
* Add the US shape map to the mix as 0 and add layer toggle for it
* Add layer toggle for country lines
* Add layer toggle for US
* Test all Tiger/Lines from 2007 to 2017 (some of the later maps don't currently work as-is)
* What did SHX do? Review it and delete if it isn't useful anymore

",0,0,1,6,real-estate,"[gis, mapping, real-estate, symfony3]",0
Yookye,smart-contracts,Yookye,https://github.com/Yookye/smart-contracts,https://api.github.com/repos/smart-contracts/Yookye,This repository contains all Smart Contracts for ICO and pre ICO,"# smart-contracts
This repository contains all Smart Contracts for ICO and pre ICO
",0,0,1,0,real-estate,"[crypto, cryptocurrencies, cryptocurrency, erc20, erc20-tokens, real-estate, real-estate-rental, smart-contracts, solidity, yookye]",0
soumen-sarkar,vetere,,https://github.com/soumen-sarkar/vetere,https://api.github.com/repos/vetere/soumen-sarkar,Website for exceptional service in all areas related to real estate :- https://soumen-sarkar.github.io/vetere/,,0,0,1,0,real-estate,"[bootstrap, css3, html5, javascript, jquery, real-estate]",0
MajhiRockzZ,exceptional-realty,,https://github.com/MajhiRockzZ/exceptional-realty,https://api.github.com/repos/exceptional-realty/MajhiRockzZ,üßô‚Äç‚ôÇÔ∏è A website for a fake real estate company called 'Exceptional Realty Group.',"# Exceptional Realty üßô‚Äç‚ôÇÔ∏è

![Version](https://img.shields.io/badge/version-0.0.1-blue.svg?cacheSeconds=2592000) [![Documentation](https://img.shields.io/badge/documentation-yes-brightgreen.svg)](https://github.com/MajhiRockzZ/exceptional-realty/README.md) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/MajhiRockzZ/exceptional-realty/LICENSE) [![Twitter: MajhiRockzZ](https://img.shields.io/twitter/follow/MajhiRockzZ.svg?style=social)](https://twitter.com/MajhiRockzZ)

## üè† [Homepage](https://github.com/MajhiRockzZ/exceptional-realty)  ‚ú® [Demo](https://majhirockzz.github.io/exceptional-realty/)

## Author

üë§ **Sumesh Majhi**

- Twitter: [@MajhiRockzZ](https://twitter.com/MajhiRockzZ)
- Github: [@MajhiRockzZ](https://github.com/MajhiRockzZ)

## ü§ù Contributing

Contributions, issues and feature requests are welcome!<br />Feel free to check [issues page](https://github.com/MajhiRockzZ/exceptional-realty/issues).

## Show your support

Give a ‚≠êÔ∏è if this project helped you!

## üìù License

Copyright ¬© 2019 [Sumesh Majhi](https://github.com/MajhiRockzZ).<br />
This project is [MIT](https://github.com/MajhiRockzZ/exceptional-realty/blob/master/LICENSE) licensed.

---

_This README was generated with ‚ù§Ô∏è by [readme-md-generator](https://github.com/kefranabg/readme-md-generator)_
",0,0,1,0,real-estate,"[basic-learning, css, html, real-estate]",0
YavichMaxim,coursework,,https://github.com/YavichMaxim/coursework,https://api.github.com/repos/coursework/YavichMaxim,My project (XGBoost.ipynb) using the gradient boosting algorithm for evaluating real estate objects in St. Peresburg on the example of the XGBoost library based on collected dataset (deals_dataset.csv). This dataset is colleted from https://portal.rosreestr.ru/wps/portal/p/is/cc_informSections/ais_mrn during 2016-2017 years for training a model predicting housepricing.,,0,0,1,0,real-estate,"[data-mining, dataset, house-price-prediction, predictive-modeling, real-estate]",0
holguinea,C-Users-Usuario-Documents-UCAMP-Proyecto-LandigPage-Proyecto-1,,https://github.com/holguinea/C-Users-Usuario-Documents-UCAMP-Proyecto-LandigPage-Proyecto-1,https://api.github.com/repos/C-Users-Usuario-Documents-UCAMP-Proyecto-LandigPage-Proyecto-1/holguinea,Landing page Real estate,"# landing page HR Soluciones Inmobiliarias esta dividida en Seccion  de Registro en Catalogo, Seccion de Servicios, Seccion de Nosotros, Una Seccion de Catalogo de inmuebles, Una Seccion de Conctacto, cuenta con una barra de menu y footer donde se deja ver los iconos a las redes Sociales, es una pagina responsiva y se puso todo el conocimiento aprendido en clase y el estudio de la herramienta Boostrap
",0,0,1,0,real-estate,"[real, real-estate]",0
juli-amezquita,Analisis-Mercado-Inmobiliario,,https://github.com/juli-amezquita/Analisis-Mercado-Inmobiliario,https://api.github.com/repos/Analisis-Mercado-Inmobiliario/juli-amezquita,EDA Mercado Inmobiliario Argentina,"# An√°lisis Mercado Inmobiliario
EDA Mercado Inmobiliario Buenos Aires

Este proyecto corresponde a la primera entrega para aprobar el curso intensivo de Data Science en Ac√°mica. La finalidad de este proyecto es reproducir los pasos que har√≠a un/a Data Scientist cuando se enfrenta a una problem√°tica real. Por eso, consta de tres secciones:

* Parte 1: se presenta la problem√°tica y el objetivo sobre el que se va a trabajar. En esta secci√≥n se pensar√° qu√© datos ayudar√°n a resolver este problema.
* Parte 2: se realizar√° un An√°lisis Exploratorio de Datos utilizando el dataset de la empresa [Properati](www.properati.com.ar), el cual puede ser descargado del siguiente [link](https://drive.google.com/uc?export=download&id=1Ugbsw5XbNRbglomSQO1qkAgMFB_3BzmB). 
* Parte 3: se crear√° un modelo de Machine Learning para predecir la variable de inter√©s.

### Objetivo: 

Ayudar a los tasadores/as a valuar las propiedades, a trav√©s de un modelo de Machine Learning que, dadas ciertas caracter√≠sticas de la propiedad, prediga su precio de venta.


Este proyecto se escribi√≥ en un Jupyter Notebook y puede visualizarse haciendo click [aqu√≠](https://nbviewer.jupyter.org/github/juli-amezquita/Analisis-Mercado-Inmobiliario/blob/main/2_Proyecto%20Ana%CC%81lisis%20del%20Mercado%20Inmobiliario.ipynb).
",0,0,1,0,real-estate,"[data-science, eda, exploratory-data-analysis, machine-learning, real-estate]",0
davidtstill,Pyviz_RE_Dashboard,,https://github.com/davidtstill/Pyviz_RE_Dashboard,https://api.github.com/repos/Pyviz_RE_Dashboard/davidtstill,Examining the real estate data for various neighborhoods in San Francisco and creating a dashboard to examine the characteristics of these submarkets.,"# Pyviz_RE_Dashboard

The analysis looks at real estate data for various neighborhoods in San Francisco. After gathering the data, a dashboard was created that would allow potential real estate investors to examine the characteristics of these submarkets. 

The first file, rental_analysis.ipynb, pulls in in the real estate information for the San Francisco real estate market. I created a DataFrame that groups the data by year and neighborhood and examined sales price/sqft, number of housing units, and gross rent. 

The second file, dashboard.ipynb, converts the plot objects to a Panel pane. I then create functions that Panel can use to create an interactive dashboard. 
",0,0,2,0,real-estate,"[analysis, dashboard, panel, real-estate]",0
SaharaStreetPlatform,On-the-Press-English-Version,,https://github.com/SaharaStreetPlatform/On-the-Press-English-Version,https://api.github.com/repos/On-the-Press-English-Version/SaharaStreetPlatform,"Press Releases and Media Reports of the Blockchain Real-Estate Platform, Sahara Street ","# On-the-Press-English-Edition

Sales of a second house through ‚ÄòNFT‚Äô at Sahara Resort, the host site 
of the 2018 Pyeongchang Winter Olympics


Sahara Issues Property Rights as NFTs and Trades in Bitcoin
15% cheaper than cash purchase price hosted by online sales

 

Sahara Street LLC announced that the second house of the Pyeongchang Sahara Resort, the host city of the 2018 Winter Olympics, will be sold next month as a non-fungible token (NFT).

NFT refers to a token that represents a digital asset with scarcity and utilizes blockchain technology. Unlike existing virtual assets, digital assets are not interchangeable by giving them a separate, quiet recognition value.

According to Sahara Street LLC, the second house to be sold through NFT is located in Pyeongchang, the host city of the Pyeongchang Winter Olympics. It features a view overlooking the golf course.

Sahara resort
It is operated by Sahara Street, a blockchain-based real estate technology company headquartered in St. Louis, Missouri, USA, and will issue property rights as NFTs to conduct online sales. The sale price is about 400 million won, but it is possible to buy and sell it at about 15% cheaper when trading with Bitcoin or Sahara tokens.

With the advantage of being the host of the Winter Olympics, the company explains that it is possible to generate additional revenue by providing accommodations to ski enthusiasts and seasonal visitors in winter.


The operator, Sahara Street, said: ""Issuing real estate titles as NFTs will allow homeowners to sell their homes as quickly as an online shopping transaction.""

Sahara Street said that it is developing a platform using original technology that allows digital real estate assets to form a higher value than traditional real estate asset values through the platform while operating a meta Sahara resort using GPS in the metaverse space. .
",0,0,1,0,real-estate,"[blockchain, metaverse, nfts, real-estate]",0
ale-ch,nyc-re-data,,https://github.com/ale-ch/nyc-re-data,https://api.github.com/repos/nyc-re-data/ale-ch,Create a dataset with sale price estimates for over 700k buildings in New York City.,"# New York City - Real Estate Data
The scripts collect and clean data from various sources to create a dataset with sale price estimates for over 700 thousand properties in New York City. 

The `scripts` folder contains the following scripts:
- `rolling_sales.R`: cleans and joins NYC real estate sales data of the past 12 months. 
- `prices_scraping.R`: scrapes real estate market trends estimates for each NYC borough from Property Shark. For residential properties, the estimates are taken from the table at the bottom of the page. For the other property categories, the estimates are taken from the orange exagons at the beginning of the page (Edit: 4/3/2022). 

The above scripts are used to calculate the variable `est_sale_pr_sqft`. The final sale price estimates are calculated simply by multiplying `est_sale_pr_sqft` by `bldgarea`. 

- Link to NYC land use data (at tax lot level): https://www1.nyc.gov/assets/planning/download/zip/data-maps/open-data/nyc_pluto_21v4_csv.zip
- Link to NYC sales data: https://data.cityofnewyork.us/dataset/NYC-Citywide-Rolling-Calendar-Sales/usep-8jbt
- Links to Property Shark pages:
    - https://www.propertyshark.com/mason/market-trends/residential/nyc/ + borough name
    - https://www.propertyshark.com/mason/market-trends/commercial/nyc/ + borough name
    - https://www.propertyshark.com/mason/market-trends/multifamily/nyc + borough name
    - https://www.propertyshark.com/mason/market-trends/retail/nyc/ + borough name
    - https://www.propertyshark.com/mason/market-trends/office/nyc/ + borough name
    - https://www.propertyshark.com/mason/market-trends/industrial/nyc/ + borough name
",0,0,1,0,real-estate,"[dataset-generator, nyc-opendata, real-estate]",0
korkridake,realestate-us-zillow,,https://github.com/korkridake/realestate-us-zillow,https://api.github.com/repos/realestate-us-zillow/korkridake,Understanding Real Estate Market Through Zillow Economic Data: a Time-Series and Machine Learning Approach ,"# Understanding Real Estate Market Through Zillow Economic Data: a Time-Series and Machine Learning Approach

## Abstract

Zillow is an online real estate database company storing data on 110 million homes across the United States not just those homes currently for sale. In particular, Zillow‚Äôs economic research team has been collecting and publishing the housing and economic data from a variety of public and proprietary sources filled with local municipalities, deeds, property facts, parcel information, and transactional histories. This article takes a data-driven approach to analyzing the US real estate market, attempting to use forecasting algorithms like Prophet and Long Short-Term Memory Network (LSTM) to anticipate home and rent values.

**Keywords**: Zillow, Zillow API, Real Estate, Machine Learning, AI, Deep Learning, Time Series, Forecasting, LSTM Neural Network

## Research Questions and Hypothesis

1. How do different types of housing in different regions vary in home value, rent value, and other important indices? 
2. What are the important factors and metrics in determining Zillow Home Value Index as well as Zillow Rent Value Index? How reliable is Zillow Estimate?

## Data

Zillow publishes a gigantic amount of variables useful in better understanding the housing market with timely, accurate, and unbiased manner. Zillow Home Value Index (ZHVI) is a smoothed, seasonally adjusted measure of the median estimated home value across a given region and housing type. It is a dollar-denominated alternative to repeat-sales indices. Zillow also publishes home value and other housing data for local markets, as well as a more detailed methodology and a comparison of ZHVI to the S&P CoreLogic Case-Shiller Home Price Indices. Zillow provides data on sold homes, including median sale price for various housing types, sale counts and a normalized view of sale volume, referred to as turnover. Foreclosures also are provided as ratio of housing stock and as a share of all sales in which the home was previously foreclosed upon. There are current and historical for-sale listings data, generally from 2012 to current, ranging from median list prices and inventory counts to share of listings with a price cut, median price cut size, age of inventory, and the days a listing spent on Zillow before the sale was final. Moreover, I also have Zillow Rent Index (ZRI), which is a smoothed, seasonally adjusted measure of the median estimated market rate rent across a given region and housing type. ZRI is a dollar-denominated alternative to repeat-rent indices. 

For housing type definitions, All Homes: Zillow defines all homes as single-family, condominium and co-operative homes with a county record. Unless specified, all series cover this segment of the housing stock. Condo/Co-op: Condominium and co-operative homes. Multifamily 5+ units: Units in buildings with 5 or more housing units, that are not a condominiums or co-ops. Duplex/Triplex: Housing units in buildings with 2 or 3 housing units.Tiers: By metro, I determine price tier cutoffs that divide the all homes housing stock into thirds using the full distribution of estimated home values. I then estimate real estate metrics within the property sets, Bottom, Middle, and Top, defined by these cutoffs. When reported at the national level, all Bottom Tier homes defined at the metro level are pooled together to form the national bottom tier. The same holds for Middle and Top Tier homes. 

In terms of regional availability, Zillow metrics are reported for common US geographies including Nation, State, Metro (2013 Census Defined CBSAs), County, City, ZIP code, and Neighborhood. I provide a crosswalk between colloquial Zillow region names and federally defined region names and linking variables such as County FIPS codes and CBSA codes. Cities and Neighborhoods do not match standard jurisdictional boundaries. Zillow city boundaries reflect mailing address conventions and so are often visually similar to collections of ZIP codes.

## Model Training

* [Prophet | Forecasting at scale.](https://facebook.github.io/prophet/) - a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.
* LSTM Recurrent Neural Networks - a recurrent neural network that is trained using backpropagation through time and overcomes the vanishing gradient problem in search of the state-of-the-art forecasting result.

## Model Evaluation

For this forecasting task, I rely upon Root Mean Squared Error (RMSE), which is a measure of how the residuals are spreaded out. 

## Additional Resources

* [Housing Data - Zillow Research](https://www.zillow.com/research/data/)
* [Home - Zillow Research](https://www.zillow.com/research/)
* [Prophet | Forecasting at scale.](https://facebook.github.io/prophet/)",0,0,3,0,real-estate,"[ai, deep-learning, forecasting, lstm-neural-networks, machine-learning, real-estate, time-series, time-series-forecasting, zillow, zillow-api]",0
ednakatani,buscar_imoveis,,https://github.com/ednakatani/buscar_imoveis,https://api.github.com/repos/buscar_imoveis/ednakatani, Real estate properties web scraping,,0,0,1,0,real-estate,"[beutifulsoup, python, real-estate, webscraping]",0
emekambachu,atlantic-residents-properties,,https://github.com/emekambachu/atlantic-residents-properties,https://api.github.com/repos/atlantic-residents-properties/emekambachu,Real estate property inspections and bookings,"<p align=""center""><a href=""https://laravel.com"" target=""_blank""><img src=""https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg"" width=""400""></a></p>

<p align=""center"">
<a href=""https://travis-ci.org/laravel/framework""><img src=""https://travis-ci.org/laravel/framework.svg"" alt=""Build Status""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/dt/laravel/framework"" alt=""Total Downloads""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/v/laravel/framework"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/l/laravel/framework"" alt=""License""></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[OP.GG](https://op.gg)**
- **[WebReinvent](https://webreinvent.com/?utm_source=laravel&utm_medium=github&utm_campaign=patreon-sponsors)**
- **[Lendio](https://lendio.com)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
",0,0,1,0,real-estate,"[laravel, real-estate, vue]",0
mikelarrieta,real-state-nextjs,,https://github.com/mikelarrieta/real-state-nextjs,https://api.github.com/repos/real-state-nextjs/mikelarrieta,Real Estate application example with Next.js,"# Next.js course source code
A full-stack real estate application, built using `Next.js`.

Built following the [Javascript Mastery](https://www.youtube.com/c/JavaScriptMastery)'s ""Build and Deploy a Modern Real Estate App | React Website Tutorial
"" course.

## Screenshots

Home page showing some properties
![Application screenshot 1](/public/screenshot1.png)

Search page with different filters applied
![Application screenshot 2](/public/screenshot2.png)

Details page showing details of one property
![Application screenshot 3](/public/screenshot3.png)

## Usage

**Clone** the project using `git clone` command:

```bash
git clone https://github.com/mikelarrieta/real-state-nextjs.git
```

Then, in the root folder of the project, **install** the dependencies using npm:

```bash
npm install
```

To **run** the application in development mode:

```bash
npm run dev
```

To **build** the application for production:

```bash
npm run build
```

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",0,0,1,0,real-estate,"[api, example, nextjs, react, real-estate]",0
julio-rod,Real-Estate-Market-Tech,,https://github.com/julio-rod/Real-Estate-Market-Tech,https://api.github.com/repos/Real-Estate-Market-Tech/julio-rod,"This repository showcases potential investment opportunities in San Francisco real estate using aggregation, interactive visualizations, and geospatial analysis.","# Real Estate Market Technology
This repository showcases potential investment opportunities in the San Francisco real estate market using aggregation, interactive visualizations, and geospatial analysis.

# Dataset
The dataset used in this analysis was collected through Proptech, which is the integration of technology into the real estate market and is a cutting-edge sector in the financial technology industry. Using this youre able to see information on the following features:

- Sale price
- Rental income
- Square footage
- Number of bedrooms and bathrooms
- Neighborhood

# Data Collection 
The following trends were observed in the San Francisco housing market:

- The trend in rental income growth is generally positive but varies across neighborhoods.
- The trend in sales prices is generally positive and also varies across neighborhoods.

# Libraries
`import pandas as pd`

`import hvplot.pandas`

`from pathlib import Path`

`import warnings`
`warnings.filterwarnings(""ignore"") `  -  This is used to ignore random warnings from cells, this will not affect any of the code.

# Sources

[Bootcamp Spot](https://courses.bootcampspot.com/courses/2916/assignments/47568?module_item_id=871794)

[Google](https://www.google.com/)

[AskBCS Learning Assistant](https://courses.bootcampspot.com/courses/2916/external_tools/125)",0,0,1,0,real-estate,"[aggregation, geospatial-analysis, interactive-visualizations, jupyter-notebook, python, real-estate]",0
PrachetShah,Karla-Bot,,https://github.com/PrachetShah/Karla-Bot,https://api.github.com/repos/Karla-Bot/PrachetShah,Email Automation Bot for Real Estate Business Owners to identify whether a client mail is potential lead to them or not based on NLP and reply them accordingly using SMTP. It also verifies documents submitted by them using OCR and checks the eligibility of client to purchase real estate and identity verifification,"# Karla-Bot
Open-Source Email Automation Bot/Tool generalised for Real Estate Business Owners 
to identify whether a client mail is potential lead to them or not based on NLP and reply them accordingly using SMTP. 
It also verifies documents submitted by them using OCR and checks the eligibility of client to purchase real estate and identity verifification


# Structure
1. <b><u>Flagging of Email</b></u> - Flow and Criteria mentioned in (Email Flagging) Subdirectory <br>
Based on flow and criteria email is flagged as potential Lead or Not using NLP by fetching all the emails from real estate agent's inbox

2. <b><u>Email Automation</b></u> <br>
Based on Lead or Not, it does identity checks through given documents in mail and based on response, it sends relevant mail to potential buyers and asks to 
submit more docs and gives them a confirmation
",0,0,2,0,real-estate,"[machine-learning, nlp, ocr, python, python3, real-estate, smtp]",0
theipster,property-data,,https://github.com/theipster/property-data,https://api.github.com/repos/property-data/theipster,"Tooling to track real estate / property market events, analyse trends and generate insights.","# Property data

Tooling to track real estate / property market events, analyse trends and generate insights.

## Usage

Run `./deploy-all.sh` to deploy all services.

This uses [Serverless Framework](https://www.serverless.com/) and assumes your environment is already set up for executing `serverless deploy`.

Deployment logs are written to `./logs/deployment-<date>-<time>/<service>.log`.
",0,0,1,4,real-estate,"[data, property, real-estate]",0
Shabari02,Real-Estate-filtering,,https://github.com/Shabari02/Real-Estate-filtering,https://api.github.com/repos/Real-Estate-filtering/Shabari02,Implementing Single Page Real Estate ‚ÄúRent a Property‚Äù web app with filtering mechanism.,"# Real-Estate-filtering
Implementing Single Page Real Estate ‚ÄúRent a Property‚Äù web app with filtering mechanism.

![image](https://user-images.githubusercontent.com/83392438/219922429-532ec7f9-f244-4c0d-8792-e9a2dad0f079.png)

",0,0,1,0,real-estate,"[filter, filter-products, react, real-estate, vite]",0
jodiambra,Ivory-Realty-EDA,,https://github.com/jodiambra/Ivory-Realty-EDA,https://api.github.com/repos/Ivory-Realty-EDA/jodiambra,Using Zillow datasets to investigate the current state of the housing market to make data-driven decisions on single-family property investments,"# Ivory Realty Group EDA

![image](https://github.com/jodiambra/Ivory-Realty-EDA/assets/115895428/b190cd8f-0d30-4bcb-b58b-a8fc5e51ca7b)


## Project Plan
Collect data from zillow on the housing market and conduct exploratory data analysis to determine optimal business strategy. Between renting and flipping, which strategy works for the current state of the market, and what areas of the nation provide the best opportunities to increase the return of the company. 


# Website can be accesed at : [IRG](https://ivory-realty-group-q1-2023.onrender.com)
",0,0,1,0,real-estate,"[data-science, eda, plotly-express, real-estate, streamlit, zillow-historical-data]",0
ejpallippurath,apartment-sales,,https://github.com/ejpallippurath/apartment-sales,https://api.github.com/repos/apartment-sales/ejpallippurath,Build machine learning model to predict whether a house will sell or not based on a set of features. The results will be presented in the form of interactive widgets in jupyter notebook for technical audience that can be used to make informed decision about selling their properties.,"## Predicting House Sales Using Machine Learning

### Overview 
In this project, we aim to build a machine learning model to predict whether a house will sell or not based on a set of features. This is a binary classification problem where the target variable is a binary variable indicating whether the house sold or not. We will analyze and visualize the data to gain insights into the features that influence house sales.

### Data 
The dataset used in this project contains information about various houses including the number of rooms, hospital beds, hotel rooms, parks, rainfall, the location of the house, and other important features. The dataset also includes a binary variable indicating whether the house sold or not.

### Approach 
We will use a supervised learning approach to train a binary classification model using various machine learning algorithms such as logistic regression, decision trees, and random forests. We will evaluate the performance of each model using metrics such as accuracy, score. The best-performing model will be selected and used for prediction.

### Results 
The trained machine learning model will be used to predict whether a house will sell or not based on the given set of features. The results will be presented in the form of a interactive widgets in jupyter notebook that can be used by technical audience. The end output will help real estate agents and homeowners to make informed decisions about selling their properties.


![output](https://user-images.githubusercontent.com/84701560/227161009-953ec0c3-2ffa-4b9f-ac9e-7703786cc365.png)
",0,0,1,0,real-estate,"[binary-classification, category-encoder, data-analysis, data-visualization, data-wrangling, imputer, ipywidgets, jupyter-notebook, logistic-regression, machine-learning, matplotlib, metrics, model-evaluation, model-selection, numpy, pandas, pipeline, python, real-estate, supervised-learning]",0
nathanyaqueby,hackupc2023,,https://github.com/nathanyaqueby/hackupc2023,https://api.github.com/repos/hackupc2023/nathanyaqueby,Streamlit interface developed during the HackUPC,"# Re-Estate üè†
Streamlit interface for a hackathon project developed during the HackUPC 2023 by team MLheads.
For more details on the project check out our official [GitHub repository](https://github.com/diaa-shalaby/HackUPC2023).
",0,0,2,0,real-estate,"[ai, hackathon, hackupc, nlp, real-estate, regression, streamlit]",0
korkridake,URA-SG-DataScience,,https://github.com/korkridake/URA-SG-DataScience,https://api.github.com/repos/URA-SG-DataScience/korkridake,Analyse and Visualize Home Buying and Home Rental for Different Areas in üá∏üá¨,"# URA Data Science: Visualizing Property Trends in Singapore

Analyse and Visualize Home Buying and Home Rental for Different Areas in SG üá∏üá¨

## Tools used in this project

* [Poetry](https://python-poetry.org/): Dependency management - [article](https://towardsdatascience.com/how-to-effortlessly-publish-your-python-package-to-pypi-using-poetry-44b305362f9f)
* [Prefect](https://www.prefect.io/): Orchestrate and observe your data pipeline - [article](https://medium.com/the-prefect-blog/orchestrate-your-data-science-project-with-prefect-2-0-4118418fd7ce?sk=552f3e60344175768dabbbf033776ce7)
* [Pydantic](https://docs.pydantic.dev/): Data validation using Python type annotations - [article](https://towardsdatascience.com/build-a-full-stack-ml-application-with-pydantic-and-prefect-915f00fe0c62?sk=b1f8c5cb53a6a9d7f48d66fa778e9cf0)
* [pre-commit plugins](https://pre-commit.com/): Automate code reviewing formatting  - [article](https://towardsdatascience.com/4-pre-commit-plugins-to-automate-code-reviewing-and-formatting-in-python-c80c6d2e9f5?sk=2388804fb174d667ee5b680be22b8b1f)
* Makefile: Create short and readable commands for repeatable tasks - [article](https://the-turing-way.netlify.app/reproducible-research/make/make-examples.html)
* [GitHub Actions](https://docs.github.com/en/actions): Automate your workflows, making it faster to build, test, and deploy your code - [article](https://pub.towardsai.net/github-actions-in-mlops-automatically-check-and-deploy-your-ml-model-9a281d7f3c84?sk=d258c20a7ff7a1db44327c27d3f36efb)
* [pdoc](https://github.com/pdoc3/pdoc): Automatically create an API documentation for your project

## Project structure
```bash
.
‚îú‚îÄ‚îÄ data            
‚îÇ   ‚îú‚îÄ‚îÄ final                       # data after training the model
‚îÇ   ‚îú‚îÄ‚îÄ processed                   # data after processing
‚îÇ   ‚îú‚îÄ‚îÄ raw                         # raw data
‚îú‚îÄ‚îÄ docs                            # documentation for your project
‚îú‚îÄ‚îÄ .flake8                         # configuration for flake8 - a Python formatter tool
‚îú‚îÄ‚îÄ .gitignore                      # ignore files that cannot commit to Git
‚îú‚îÄ‚îÄ Makefile                        # store useful commands to set up the environment
‚îú‚îÄ‚îÄ models                          # store models
‚îú‚îÄ‚îÄ notebooks                       # store notebooks
‚îú‚îÄ‚îÄ .pre-commit-config.yaml         # configurations for pre-commit
‚îú‚îÄ‚îÄ pyproject.toml                  # dependencies for poetry
‚îú‚îÄ‚îÄ README.md                       # describe your project
‚îú‚îÄ‚îÄ src                             # store source code
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py                 # make src a Python module
‚îÇ   ‚îú‚îÄ‚îÄ config.py                   # store configs 
‚îÇ   ‚îú‚îÄ‚îÄ process.py                  # process data before training model
‚îÇ   ‚îú‚îÄ‚îÄ run_notebook.py             # run notebook
‚îÇ   ‚îî‚îÄ‚îÄ train_model.py              # train model
‚îî‚îÄ‚îÄ tests                           # store tests
    ‚îú‚îÄ‚îÄ __init__.py                 # make tests a Python module 
    ‚îú‚îÄ‚îÄ test_process.py             # test functions for process.py
    ‚îî‚îÄ‚îÄ test_train_model.py         # test functions for train_model.py
```

## Resources

* [chengguan/ura_api](https://github.com/chengguan/ura_api)
* [khuyentran1401/data-science-template: Template for a data science project](https://github.com/khuyentran1401/data-science-template)
* [Introduction ‚Äì API Reference](https://www.ura.gov.sg/maps/api/)",0,0,2,0,real-estate,"[house-price-prediction, housing-prices, property, real-estate, rental, singapore]",0
kevinjunseokim,Syndication,,https://github.com/kevinjunseokim/Syndication,https://api.github.com/repos/Syndication/kevinjunseokim,Syndication Analyzer,"Real Estate Syndication Analyzer

By Kevin Kim",0,0,1,0,real-estate,"[investment-analysis, property-management, real-estate, rental-property-calculator]",0
giladt,tsabar.next,,https://github.com/giladt/tsabar.next,https://api.github.com/repos/tsabar.next/giladt,"One-bedroom, fully furnished, all inclusive appartments for rent in Moabit - Berlin","# Le Petit Moabit
## Fully furnished apartments in Berlin - Moabit

A lending page and booking inquiry app for family-owned apartments in Berlin.

## Tech
NextJS 13, ReactJS, Marked, Nodemailer.

Pages content markdown is taken from a seperate GH-repo.


## Installation
* clone this repo
* run `npm ci`

## Environment variables:
* ICAL_ID_APT_4=\< airbnb ical id \>
* ICAL_SECRET_APT_4=\< airbnb ical secret \>
* ICAL_ID_APT_7=\< airbnb ical id \>
* ICAL_SECRET_APT_7=\< airbnb ical secret \>
* GA_MEASUREMENT_ID=\< G-.... \>
* GOOGLE_MAPS_API_KEY=\< AI.... \>
* GITHUB_CONTENT_BRANCH=\< development|staging|production \>
* GITHUB_CONTENT_TOKEN=\< gh... \>
* GITHUB_CONTENT_OWNER=
* GITHUB_CONTENT_REPO=\< Github repo name \>
* NODEMAILER_TRANSPORTER_USER=
* NODEMAILER_TRANSPORTER_PASSWORD=

## Run:
`npm run dev`
## Build
`npm run build`
## Serve
`npm start`

## Insights
### Desktop
<img src=""https://github.com/giladt/tsabar.next/assets/2517870/502841bb-51a2-4c0b-84c8-562e002541c4"" width=""400"" alt=""Page speed desktop"" />

[View](https://pagespeed.web.dev/analysis/https-www-tsabar-net/0gdnkz90tm?hl=DE&form_factor=desktop)

### Mobile
<img src=""https://github.com/giladt/tsabar.next/assets/2517870/b495e1b9-2365-49a4-9d19-f972613388f1"" width=""400"" alt=""Page speed desktop"" />

[View](https://pagespeed.web.dev/analysis/https-www-tsabar-net/0gdnkz90tm?hl=DE&form_factor=mobile)
",0,0,1,0,real-estate,"[berlin, moabit, one-bedroom, real-estate, rental]",0
peter571,real-estate-app,,https://github.com/peter571/real-estate-app,https://api.github.com/repos/real-estate-app/peter571,A Realtors Web App,"A real estate listing web app venture that aims to connect people searching for properties with available properties. Realtors get to list their properties and customers can search and contact realtors.

#### Client
>Frontend built with react-typescript, react query and tailwind CSS.
#### Server
> Backend microservices serving the frontend with api endpoints. Built with Flask and PostgreSQL.

",0,0,1,0,real-estate,"[flask-application, flask-sqlalchemy, postgresql, react, reactquery, real-estate]",0
pmultani2,tamishmultani,,https://github.com/pmultani2/tamishmultani,https://api.github.com/repos/tamishmultani/pmultani2,"A website for Tamish Multani, a real estate agent in Toronto, Ontario.",,0,0,1,0,real-estate,"[real-estate, website]",0
h3rodev,aquaproperties,,https://github.com/h3rodev/aquaproperties,https://api.github.com/repos/aquaproperties/h3rodev,Real Estate Website With Backend Admin Using Laravel and Voyager,"<p align=""center""><img src=""https://res.cloudinary.com/dtfbvvkyp/image/upload/v1566331377/laravel-logolockup-cmyk-red.svg"" width=""400""></p>

<p align=""center"">
<a href=""https://travis-ci.org/laravel/framework""><img src=""https://travis-ci.org/laravel/framework.svg"" alt=""Build Status""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://poser.pugx.org/laravel/framework/d/total.svg"" alt=""Total Downloads""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://poser.pugx.org/laravel/framework/v/stable.svg"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://poser.pugx.org/laravel/framework/license.svg"" alt=""License""></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[OP.GG](https://op.gg)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
",0,0,2,0,real-estate,"[admin-dashboard, laravel, laravel7x, real-estate]",0
realestatecynthia,PNP-Property-Management,,https://github.com/realestatecynthia/PNP-Property-Management,https://api.github.com/repos/PNP-Property-Management/realestatecynthia,Property Management Services,"# PNP-Property-Management
Property Management Services
",0,0,1,0,real-estate,"[homeownership, investors, management, property, real-estate]",0
JackLacey18,South-Eastern-Station-Properties,,https://github.com/JackLacey18/South-Eastern-Station-Properties,https://api.github.com/repos/South-Eastern-Station-Properties/JackLacey18,Scraper for properties listed on Rightmove around stations on the South-Eastern Network,"# PROPERTIES LOCAL TO RAILWAY STATIONS ON THE SOUTH-EASTERN NETWORK

The aim of this script is to scrape all properties listed on Rightmove (a popular housing website) within 3 miles of a 
train station on the South-Eastern railway network in the south of England. The properties will range from ¬£100,000 to ¬£350,000 and will try to
exclude retirement properties and shared ownership schemes that are specifically listed on the website as such.

Firstly the script will scrape all stations listed on the railway network. This information will be found on Wikipedia.
Rightmove has a unique set of characters within the URL that direct the user to a specific location. The script finds and scrapes all
area codes for each station that will be used for the scraping of properties later on. These area codes are written to a text file with the
name of each station. This script will run if that file is not already in the same folder as the script.
This file is called Station_Data.txt.

Commute times from each station will be important when considering where to buy. So the script gathers commute times from each station to
London Bridge. Google maps with Selenium is used to collect all commute times if people were to start their commute on the next working day
at 6:30am. The data was written again to a text file and only initiated if the file doesn't already exist.
This file is called Commute_Times.txt.

When we finally have all this data, we can then scrape properties listed within a 3 mile radius of each station with the stations scraped and
the area codes of each station.

Once all the properties for each station have been scraped, the script appends the commute time of each property to the listing, cleans the data
and writes the data to a CSV file called Rightmove_South-Eastern_Station_Properties_DATA_TIME.csv, date and time being the date and time the file
was written.
",0,0,1,0,real-estate,"[commute, property, real-estate, stations, trains]",0
jenzhng,farm-app,,https://github.com/jenzhng/farm-app,https://api.github.com/repos/farm-app/jenzhng,.NET Core MVC App that lets users sign up for appointments to view farm real estate,"# farm-app
.NET Core MVC App that lets users sign up for appointmets to view farm real estate
",0,0,2,0,real-estate,"[asp, asp-net-core, bootstrap, crud, dotnet-core, jwt, mvc, real-estate]",0
isaacLabrieBoulay,HousePricePredictor,,https://github.com/isaacLabrieBoulay/HousePricePredictor,https://api.github.com/repos/HousePricePredictor/isaacLabrieBoulay,Final Project for ENSE 411: Artificial Intelligence. A study into the performance of different machine learning techniques for estimating the price of houses.,,0,0,1,0,real-estate,"[machine-learning, machine-learning-algorithms, real-estate, regression-models]",0
EverleighMonaco,EverleighMonaco,,https://github.com/EverleighMonaco/EverleighMonaco,https://api.github.com/repos/EverleighMonaco/EverleighMonaco,"Real Estate, on STEROIDS","![screenshot][screenshot]

# Welcome to Everleigh Monaco

## What is Everleigh Monaco?

Everleigh Monaco is real estate platform made of an Erlang/OTP application server, an API, and clients.

Everleigh Monaco is currently experimental, so put on your hardhat and expect lots and lots of changes.

The application server is written in Erlang and Lisp Flavoured Erlang. The ReactJS web front-end client is written in Clojure and ClojureScript. The cross-platform mobile client is also written in Clojure, leveraging ClojureDart and the Flutter framework.

Requirements (experimental)
* Erlang/OTP 24
* Rebar3
* Clojure 1.11
* Leiningen
* Java 16
* NodeJS v12


## Setting up

Make a local copy of the repo and create a log directory.

```
$ git clone https://github.com/EverleighMonaco/EverleighMonaco.git
$ cd EverleighMonaco
$ mkdir log
```

Get the deps and compile.

```
$ rebar3 deps
$ cd priv/everleighmonaco.com-cljs
$ lein deps

# compile the css
$ lein garden once

# compile the front end
$ npx shadow-cljs compile app
```

## Acknoledgements

[Robert Virding](https://github.com/rvirding), [Duncan McGreggor](https://github.com/oubiwann), and the late [Joe Armstrong](https://en.wikipedia.org/wiki/Joe_Armstrong_(programmer)), along with the entire LFE community. You all sold me on the power of OTP, Erlang and LFE. Also The countless LFE libraries that Duncan made in particular [(we're using a bunch)](https://github.com/lfex).

re:

* [LFE: A Real Lisp in the Erlang Ecosystem by Robert Virding](https://www.youtube.com/watch?v=x2ysisqgd2g)

* [Rackspace takes a look at the ERLANG programming language for distributed computing](https://www.youtube.com/watch?v=u41GEwIq2mE)

## License [&#x219F;](#table-of-contents)

Everleigh Monaco is released under the [GNU Affero General Public License v3.0](https://github.com/EverleighMonaco/EverleighMonaco/blob/main/LICENSE)

<!-- Named page links below: /-->

[screenshot]: images/screenshot.jpg 
[logo]: images/screenshot.jpg 
",0,0,1,0,real-estate,[real-estate],0
WordPress-Guru-Org,dawildagent.com,WordPress-Guru-Org,https://github.com/WordPress-Guru-Org/dawildagent.com,https://api.github.com/repos/dawildagent.com/WordPress-Guru-Org,Wordpress based real estate website,,0,0,0,0,real-estate,"[php, real-estate, wordpress]",0
sushrutshitoot,Housing-Market-Price-Prediction,,https://github.com/sushrutshitoot/Housing-Market-Price-Prediction,https://api.github.com/repos/Housing-Market-Price-Prediction/sushrutshitoot,Build a predictive model for the sale prices of homes in a city and explore potential equity issues with the real-estate assessment process,"# Housing-Market-Price-Prediction
Build a predictive model for the sale prices of homes in a city and explore potential equity issues with the real-estate assessment process
",0,0,1,0,real-estate,"[data-science, exploratory-data-analysis, feature-engineering, feature-extraction, feature-selection, insights, machine-learning, machine-learning-algorithms, machinelearning, prediction, prediction-algorithm, prediction-model, real-estate, real-estate-analysis, supervised-learning, supervised-machine-learning, variable-importance]",0
MiladSadeghi,Homelun,,https://github.com/MiladSadeghi/Homelun,https://api.github.com/repos/Homelun/MiladSadeghi,"Homelun - MERN real estate app featuring integrated CMS, TypeScript, Tailwind, React-Query.","<p align=""center"">
  <a href="""" rel=""noopener"">
 <img src=""https://s8.uupload.ir/files/homelun_b6jy.png"" alt=""Bot logo""></a>
</p>

<h3 align=""center"">Homelun</h3>

<div align=""center"">

[![Netlify Status](https://api.netlify.com/api/v1/badges/e80f95f9-c7e7-46b0-9398-0a10f1f2d3ca/deploy-status)](https://app.netlify.com/sites/lustrous-truffle-d8dafa/deploys)
[![Langugae](https://img.shields.io/github/languages/top/miladsadeghi/homelun)]()
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)

</div>

---

<p align=""center"">Homelun, A MERN, TypeScript, React-Query, and Tailwind powered app for browsing, filtering, and connecting with real estate properties.
    <br>
</p>
<h2 align=""center"">
<a href=""https://homelun.miladsdgh.ir"">DEMO</a>
<br></h2>

## üìù Table of Contents

- [About](#about)
- [Getting Started](#getting_started)
- [Deploying](#deployment)
- [Built Using](#built_using)
- [Authors](#authors)
- [Acknowledgments](#acknowledgement)

## üßê About <a name = ""about""></a>

Homelun is a cutting-edge real estate application designed to make property searches easy and efficient. Built using the MERN stack (MongoDB, Express, React, and Node.js), TypeScript, React-Query, and Tailwind, Homelun provides a seamless and user-friendly experience for those looking to buy, sell, or rent properties.

With Homelun, users can browse through various properties and apply filters to narrow down their search based on criteria such as the number of bedrooms, bathrooms, or square footage. The app allows users to request tours of properties and stay in touch with agents for a smooth and hassle-free experience. Homelun's intuitive interface and powerful search capabilities make it the go-to solution for all your real estate needs.

## üèÅ Getting Started <a name = ""getting_started""></a>

To get started with Homelun, you'll need to set up the server and client environments. First, navigate to the server folder in your project directory and create an .env file. Use the provided env.example file as a reference to fill in the required information. Once your .env file is set up, you can install the necessary dependencies by running the following commands:

```
npm install
or
yarn install
```

After setting up the server, move on to the client folder and repeat the process. Create an .env file using the env.example as a guide, and then install the required dependencies like previous way.

then run both separately with

```
npm run dev
or
yarn dev
```

## üöÄ Deploying <a name = ""deployment""></a>

In order to deploy the Homelun, we are utilizing two powerful platforms: Netlify for the frontend and Fly.io for the backend.

## ‚õèÔ∏è Built Using <a name = ""built_using""></a>

<div style=""display: flex; flex-wrap: wrap;"">
<img src=""https://img.shields.io/badge/Express.js-404D59?style=for-the-badge"" />
<img src=""https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white"" />
<img src=""https://img.shields.io/badge/Node.js-43853D?style=for-the-badge&logo=node.js&logoColor=white"" />
<img src=""https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB"" />
<img src=""https://img.shields.io/badge/Tailwind_CSS-38B2AC?style=for-the-badge&logo=tailwind-css&logoColor=white"" />
<img src=""https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white"" />
<img src=""https://img.shields.io/badge/React_Router-CA4245?style=for-the-badge&logo=react-router&logoColor=white"" />
<img src=""https://img.shields.io/badge/MongoDB-4EA94B?style=for-the-badge&logo=mongodb&logoColor=white"" />
</div>

## ‚úçÔ∏è Authors <a name = ""authors""></a>

- [@MiladSadeghi](https://github.com/MiladSadeghi) - MiladSadeghi

## üéâ Acknowledgements <a name = ""acknowledgement""></a>

- thanks <a href=""https://www.vektora.studio/"">Vektora Studio</a> for design
",0,0,1,0,real-estate,"[cms, express, mern, mongodb, nodejs, react, react-ts, real-estate, tailwindcss, typescript]",0
harikrishnait,awaas-Vishwa-fe,,https://github.com/harikrishnait/awaas-Vishwa-fe,https://api.github.com/repos/awaas-Vishwa-fe/harikrishnait,"A Property listing platform for buy, sell and rent","# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
",0,0,1,0,real-estate,"[react, reactjs, real-estate, real-estate-website]",0
AlperMulayim,LeaseSoftPro,,https://github.com/AlperMulayim/LeaseSoftPro,https://api.github.com/repos/LeaseSoftPro/AlperMulayim,LeaseSoftPro.,,0,0,1,0,real-estate,"[angular, angularcli, database, databasedesign, demo-app, figma, fullstack, google-maps, google-maps-api, jpa, leasesoft, leasing, mysql, pdf-generation, rabbitmq, real-estate, rest-api, simple, spring-boot, swagger]",0
archi-craft,archi-craft.github.io,,https://github.com/archi-craft/archi-craft.github.io,https://api.github.com/repos/archi-craft.github.io/archi-craft,ArchiCraft Official Website,"# archi-craft.github.io
ArchiCraft Official Website

On this website you can explore
ArchiCraft's projects, customers reviews,
blog, etc.

The Source Code of website is provided

If you want to print your dream-house,
mail me there: <mcsmrnff@gmail.com>
",0,0,1,0,real-estate,"[3d-printing, css, house, html, js, real-estate, web]",0
SchillingEnterprises,JBS-Properties,SchillingEnterprises,https://github.com/SchillingEnterprises/JBS-Properties,https://api.github.com/repos/JBS-Properties/SchillingEnterprises,,"[![Board Status](https://dev.azure.com/gavinschillingmarketing/fbf5310e-9847-42c1-9818-deaecf699bbe/d1a1e127-2f58-4f14-b407-932e269fb000/_apis/work/boardbadge/47b38693-de18-4988-a38f-af74165d5ca6)](https://dev.azure.com/gavinschillingmarketing/fbf5310e-9847-42c1-9818-deaecf699bbe/_boards/board/t/d1a1e127-2f58-4f14-b407-932e269fb000/Microsoft.RequirementCategory/)
",0,0,2,1,real-estate,"[inventory-management, real-estate, rentals]",0
fridex,real-estate,,https://github.com/fridex/real-estate,https://api.github.com/repos/real-estate/fridex,My machine learning in real estate,"# My machine learning in real estate
",0,0,2,0,real-estate,"[data, machine-learning, real-estate]",0
mahbubur-87,de.hs-fulda.informatik.biig,,https://github.com/mahbubur-87/de.hs-fulda.informatik.biig,https://api.github.com/repos/de.hs-fulda.informatik.biig/mahbubur-87,"Its a native iOS app using Swift 4 and individual part of team project in Master's course work of Global Distributed Software Development, HS-Fulda University of Applied Sciences.","# de.hs-fulda.informatik.biig

# Description:

Our web application BiiG alleviates customers and listing agents to find/rent most suitable properties.It will be exclusively used by real estate agents from the following three local real estate companies SFStateHome, SJStateRealtors and CSURealEstate. They can post content and receive contacts/request from customers/buyers. The title BiiG expresses the following component. Each team member comes from another country. ‚ÄúB‚Äù stand for Bangladesh , ‚Äúi‚Äù for india, ‚Äúi‚Äù for Iran and ‚ÄúG‚Äù for Germany. Diversity and the courage to think big are important features in our team that we also want to reflect with BiiG.

In addition to our unique features,our website is based on the functional range of known real estates sites: For example this includes the search for specific properties by price,size or number of rooms.Afterwards,the interested consumer/buyer can contact directly the corresponding listing agents for the property.BiiG is based on the most up to date technologies and thus offers,with regard to performance at the state of the art.

# Teamwork:
Application Url: https://evening-waters-97508.herokuapp.com/

Teamwork consists of few milestones those include planning, analysis, design, implementation and testing. I work in analysis, design, implementation phases. My role is Backend developer and also perform few development in Frontend as per professor's guidance to switch roles. My contributions in the project as a team member are given bellow:
1. Database design and normalization
2. Create store procedure for creating customer
3. Write some util SQL queries to load data in frontend such as in drop-down menu, checkboxes etc.
4. Create dynamic search, sort SQL query for searching and sorting properties as per user input or filter criteria.
5. Create MVC structure of property search at the beginning of the project so that other members can follow the data-flow of MVC for further development.
6. Worked on the following features:
        property search, 
        add favorite properties, 
        agent dashboard including SQL queries, UI design.

# Individual Part:
Swift 4, Xcode 9.2, Google Maps API, Google Direction Web Service, BiiG Heroku Cloud API.

# How to run the project in Xcode 9:
1. This project has 3 dependencies. All are exist within biig-ios-mahbub/Pods directory.

2. If anyone wants to update these, please remove NavigateMe/Pods directory and Podfile.lock

3. Then please enter inside the directory biig-ios-mahbub/ using ""cd"" where Podfile exists.

        cd biig-ios-mahbub/

4. After that, please run command ""pod install""

        If CocoaPods is not install in machine then please install it using ""sudo gem install cocoapods"" command.

5. The above command will install all dependencies mentioned in the Podfile.

6. After successful dependecies installation, please run BIIG.xcworkspace instead of BIIG.xcodeproj

7. Finally, please check followings:

        please click ""Project Navigator"" tab in left pannel, then
                BIIG(Top in 1st Tree) Targets -> BIIG -> Build Settings -> Enable Bitcode -> Yes

   If ""Enable Bitcode"" is set to ""No"", then please change the value to ""Yes"".

",0,0,1,18,real-estate,"[fulda, germany, google-direction-api, google-maps-api, hs-fulda-university, ios, real-estate, swift, swift4]",0
michal-wrzosek,real-estate-price-prediction,,https://github.com/michal-wrzosek/real-estate-price-prediction,https://api.github.com/repos/real-estate-price-prediction/michal-wrzosek,WREPPA - Warsaw Real Estate Price Prediction App (Machine Learning),"# Warsaw's Real Estate Price Prediction Neural Network
*by Michal Wrzosek from Wrzosek Real Estate Agency*

This repository keeps in one place files used to scrape real estate data, analyze data, create a prediction model and simple web app to serve as a simple website where you can interact with the model.

Stack:
- Python
- Scikit Learn
- Jupyter Notebook
- Node.js
- Flask

[Model Development Notebook](jupyter-notebook/dataOnMap.ipynb)

## Building a Neural Network
In order to build my own network I was following mostly those resources.

Links:
- [GitHub](https://github.com/cloudxlab/ml/blob/master/machine_learning/end_to_end_project.ipynb)
- [YouTube](https://www.youtube.com/watch?v=_zZFm90AwDs&list=PLFhNzVKP1pVrNU8cTL_t-8YzPLF8i8PaS&index=11)


## Docker image
We're using Jupyter Notebook + Tensorflow & Keras image: `tensorflow-notebook:5ed91e8e3249`
Based on this image we're building our image where we're adding some more useful packages.

To build: `npm run build`
To start: `npm run start`

Navigate to `http://localhost:8888` and paste `token` that was printed in your console.

Links:
- https://github.com/jupyter/docker-stacks
- https://github.com/jupyter-widgets/ipyleaflet
- https://ipyleaflet.readthedocs.io/en/latest/
",0,0,1,0,real-estate,"[flask, jupyter-notebook, machine-learning, neural-network, node-js, real-estate, scikit-learn]",0
sachinsingh24,shiv-home,,https://github.com/sachinsingh24/shiv-home,https://api.github.com/repos/shiv-home/sachinsingh24,,"This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br />
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br />
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br />
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br />
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br />
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can‚Äôt go back!**

If you aren‚Äôt satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you‚Äôre on your own.

You don‚Äôt have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn‚Äôt feel obligated to use this feature. However we understand that this tool wouldn‚Äôt be useful if you couldn‚Äôt customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).",0,0,1,0,real-estate,"[real-estate, shiv]",0
AReburg,Austrian-Real-Estate-Analysis,,https://github.com/AReburg/Austrian-Real-Estate-Analysis,https://api.github.com/repos/Austrian-Real-Estate-Analysis/AReburg,Austrian housing market information deployed as Dash web app.,"<div align=""center"">
  <h3 align=""center"">Austrian Housing Market Analysis</h3>
  <p align=""center"">
    A data-driven analysis using Austrian real estate online platform data
    <br />
    <a href=""https://medium.com/@arlin.gruber/how-data-science-can-give-you-an-edge-in-real-estate-investing-1849255d7c33"">Summary</a>
  </p>
</div>

<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
    </li>
    <li>
      <a href=""#getting-started"">Getting Started</a>
      <ul>
        <li><a href=""#installation"">Installation</a></li>
        <li><a href=""#view-notebook"">View Notebook</a></li>
      </ul>
    </li>
    <li><a href=""#results"">Results</a></li>
  </ol>
</details>


### 1. About The Project
Real estate information of a particular region or location is not 
easy to come by. In this notebook we investigate an Austrian real estate data set which has been mined
extracted over the course of a week from a large online portal. The data has already been 
pre-processed and can be geospatial investigated.

This app can be viewed live on Heroku at [https://austrian-housing.herokuapp.com/](https://austrian-housing.herokuapp.com/)


<img src=""img/dash-app-screenshot.png"" alt=""Rental prices Austria"" width=""550""/>

### 2. File Structure

`app.py` main dash app <br>
`requirements.txt` python modules that will be installed for the web application at build. <br>
`/assets` this directory is to serve the CSS files and images for the app. `charts.py` is used for generating the figures. <br>
`layout.py` defines the html web layout, `callbacks.py` handles all the callbacks and `data_wrangling.py` is used
for all the data queries and date manipulation. <br>
`/data` contains the raw data files.<br>
`/data/geojson/vienna.geojson` geojson files with the geospatial data of Austria.<br>
`/nb` notebook used for data exploration and analysis. <br>
`runtime.txt` tells (the Gunicorn HTTP server) which python version to use (only needed for Heroku deployment)<br>
`Procfile` defines what type of process is going to run (Gunicorn web process) and the Python app entrypoint
(only needed for a deployment on Heroku) <br>
`.gitignore`<br>

### 3. Installation

#### Getting Started

- Change the current directory to the location where you want to clone the repository and run:

`$ git clone https://github.com/AReburg/Austrian-Real-Estate-Analysis.git`
- Make sure that the app is running on the local webserver before deployment.
Setup your virtualenv (or don't) and ensure you have all the modules installed before running the app. 


#### Requirements
Install the modules from the `requirements.txt` with pip3 or conda from a terminal in the project root folder:

`pip install -r requirements.txt` <br>
`conda install --file requirements.txt` (Anaconda)
<br>


#### Jupyter Notebook
Executing the notebook is tested on *anaconda distribution 6.4.12.*  with 
*python 3.9.13*.
To view the rendered geospatial charts of the Jupyter notebook go to [nbviewer](https://nbviewer.org/) and
copy the link.

### 4. Usage

#### Local Web Application
- Run the app from your IDE direct, or from the terminal in the projects root directory: `python app.py`

- It should be accessible on the browser `http://127.0.0.1:8050/`


### 5. Results
The main findings are summarized in a [post](https://medium.com/@arlin.gruber/how-data-science-can-give-you-an-edge-in-real-estate-investing-1849255d7c33).
Feel free to contact me if you have any questions or suggestions.

",0,0,1,0,real-estate-website,"[azure-functions, geospatial-data, heroku-app, house-price-prediction, housing-market, housing-market-analysis, investing-python, plotly-dash, real-estate-website]",0
pabasar,real_estate,,https://github.com/pabasar/real_estate,https://api.github.com/repos/real_estate/pabasar,Sample e-commerce application for a real-estate business ,,0,0,1,0,real-estate,"[crud-application, real-estate]",0
Ankit152,Real-Estate-Dataset,,https://github.com/Ankit152/Real-Estate-Dataset,https://api.github.com/repos/Real-Estate-Dataset/Ankit152,Dragon Real Estate - Price Predictor,"# Real Estate Dataset

**Dragon Real Estate - Price Predictor**

Dataset link: https://www.kaggle.com/arslanali4343/real-estate-dataset

## Context:

Concerns housing values in suburbs of Boston.

* Number of Instances: 506
* Number of Attributes: 13 continuous attributes (including ""class"" attribute ""MEDV""), 1 binary-valued attribute.
* Attribute Information: CRIM per capita crime rate by town
* ZN proportion of residential land zoned for lots over 25,000 sq.ft.
* INDUS proportion of non-retail business acres per town
* CHAS Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)
* NOX nitric oxides concentration (parts per 10 million)
* RM average number of rooms per dwelling
* AGE proportion of owner-occupied units built prior to 1940
* DIS weighted distances to five Boston employment centres
* RAD index of accessibility to radial highways
* TAX full-value property-tax rate per $10,000
* PTRATIO pupil-teacher ratio by town
* B 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town
* LSTAT % lower status of the population
* MEDV Median value of owner-occupied homes in $1000's


Missing Attribute Values: None.
",0,0,2,0,real-estate,"[business, ensemble, machine-learning, real-estate, regression]",0
Selimology,SoftwareEngineeringProject,,https://github.com/Selimology/SoftwareEngineeringProject,https://api.github.com/repos/SoftwareEngineeringProject/Selimology,CEN 302 - Software Engineering Project,"
# Grand Real Estate
## Real Estate Management System

### Project Description
This is a web platform which would help buyers to look at the available properties with photographs, description and necessary specifications. Since any website that isn‚Äôt UX friendly may push potential buyers away, we‚Äôll be focusing on providing easy to use and attractive interface for both the seller and the buyer. Not only that, after quite a through market research we have noticed is that the majority of the Albanian real estate sites do not provide an accurate search engine. We‚Äôll be focusing on developing a powerful search engine that provides accurate GPS location and listing details. Apart from this features, we‚Äôll like to make sure everything is automated as much as possible. We‚Äôll like to make the process of renting/selling a house only a click away. On top of it, we will also be ensuring a quick support availability. This will ensure the both buyers and sellers a way to communicate to someone when they are needing help. 

### Members
- Enes Vrana
- Kamil Ertekin
- Ervis Sako
- Anxhelo Sara√ßi
- Egi Jonuzaj
- Elvis Murati
",3,3,2,0,real-estate-management,"[booking-system, real-estate-management, software-engineering]",0
anshumansinha18,q-estate-crio,,https://github.com/anshumansinha18/q-estate-crio,https://api.github.com/repos/q-estate-crio/anshumansinha18,A react-based web app where we can browse through the different properties and get the contact details of the concerned real-estate agent.,"# Q-Estate: Real-Estate Web Application

A react-based web app where we can browse through the different properties and get the contact details of the concerned real-estate agent.


## Demo

You can try out the Application by visiting the [live demo](https://q-estate-crio.vercel.app/).

Please wait for few moments before the data loads up. Backend usually takes some time to fetch the data.

Backend Repository: https://github.com/anshumansinha18/q-estate-backend

## Screenshot

**Landing Page:**
![screencapture-q-estate-crio-netlify-app-2023-08-31-18_08_41](https://github.com/anshumansinha18/q-estate-crio/assets/39727166/80ff5607-6fbe-404c-8b9d-9693e9086bab)

**Explore Page:**
![screencapture-q-estate-crio-netlify-app-listings-2023-08-31-18_12_11](https://github.com/anshumansinha18/q-estate-crio/assets/39727166/c3ab31da-87e1-4971-b837-41e8c473e0ce)

**Listing Details Page:**
![screencapture-q-estate-crio-netlify-app-detail-3-2023-08-31-18_14_57](https://github.com/anshumansinha18/q-estate-crio/assets/39727166/1ef1bdd1-cf63-4206-8036-ce48dc45744c)
",0,0,0,0,real-estate,"[javascript, react, react-js, real-estate, real-estate-website]",0
rheamazing888,discoverph,,https://github.com/rheamazing888/discoverph,https://api.github.com/repos/discoverph/rheamazing888,"My Project PORTFOLIO (lifestyle e-magazine that has search engine for places,food & activities, can book travels, shop deals & coupons and set real estate appointments. It also contains blogs, forums,articles & trending news.",,0,0,1,0,real-estate,"[articles-recommendations, blog, blog-engine, e-magazine, food, portfolio-website, project, real-estate, shop, travel]",0
tropicalisle,tropicalisle.github.io,,https://github.com/tropicalisle/tropicalisle.github.io,https://api.github.com/repos/tropicalisle.github.io/tropicalisle,Godrej Tropical Isle - Godrej Sector 146 Noida. New launch 3BHK / 4BHK apartments by Godrej in Sector 146 Noida.,"# Godrej Tropical Isle - Godrej New Launch in Sector 146 Noida
Godrej Properties, a renowned name in the real estate industry, has unveiled its latest residential project, Godrej Tropical Isle located in Sector 146 Noida.

For details and information, please visit :: [Godrej Sector 146 Noida - Godrej Tropical Isle](https://tropicalisle.github.io)

__________


### New Launch Real Estate Project - Noida 
Luxury apartment project in Sector 146 Noida.

__________


## Godrej Tropical Isle, New Project in Sector 146 Noida

Godrej Properties, a renowned name in the real estate industry, has unveiled its latest residential project, Godrej Sector 146 Noida. Situated in the thriving city of Noida, this development offers a diverse range of apartments designed to cater to the unique needs and preferences of its residents.

Godrej Sector 146 Noida spans across a vast area of land and seamlessly integrates open spaces, lush greenery, and modern luxurious homes. The apartments are thoughtfully designed to embrace the modern lifestyle, offering spacious and well-lit rooms that invite ample natural light and ventilation. With high-quality finishes, each unit exudes elegance and sophistication. Home automation and security systems ensure the safety and comfort of every resident.

Residents of Godrej Sector 146 Noida can indulge in a world-class living experience with an array of amenities at their fingertips. The project boasts a well-equipped gymnasium, a refreshing swimming pool, a dedicated kids' play area, a community hall, and various other recreational facilities. Ample parking space and round-the-clock security provisions ensure a secure and peaceful living environment for all.

The strategic location of Godrej Sector 146 Noida offers excellent connectivity to the rest of the city, placing it in close proximity to top schools, colleges, hospitals, shopping malls, and other essential civic amenities. Moreover, the project is designed with a strong commitment to eco-friendliness, incorporating sustainable materials and technologies to reduce the carbon footprint and promote a healthier living environment.
",0,0,1,0,real-estate,"[bootstrap5, html, real-estate, website]",0
petercr,real-estate-mockup,,https://github.com/petercr/real-estate-mockup,https://api.github.com/repos/real-estate-mockup/petercr,A Sample Real Estate Page with Material CSS ,"# real-estate-mockup
**A Sample Real Estate Page with Material CSS**

This project is based on an original project by [Brad Traversy](https://www.youtube.com/redirect?redir_token=Gu5Tz3rLaW-FcU0A6mUHG6bBTtV8MTUyNDc1NzE0OUAxNTI0NjcwNzQ5&q=http%3A%2F%2Fwww.twitter.com%2Ftraversymedia&v=MaP3vO-vEsg&event=video_description) and you can view the full original [project here](https://www.youtube.com/redirect?redir_token=Gu5Tz3rLaW-FcU0A6mUHG6bBTtV8MTUyNDc1NzE0OUAxNTI0NjcwNzQ5&q=http%3A%2F%2Ftraversymedia.com%2Fdownloads%2Ftravelville.zip&v=MaP3vO-vEsg&event=video_description)

My idea was to change it over to a mock real estate company in order to use it for my portfolio. Feel free to fork this repo and make any changes that would better suit you. 

If you have any questions or comments you can find me here on GitHub or on Twitter at [@PeteCapeCod](https://www.twitter.com/PeteCapeCod)

Thanks for checking out my project :smiley: :+1: :dog:",0,0,1,0,real-estate,"[css-framework, html, javascript, materialize-css, real-estate]",0
AnastasiaZA,Anastasia,,https://github.com/AnastasiaZA/Anastasia,https://api.github.com/repos/Anastasia/AnastasiaZA,REAL_ESTATE,"# REAL 
REAL_ESTATE
",0,0,1,0,real-estate,[real-estate],0
devbobinci,houseit,,https://github.com/devbobinci/houseit,https://api.github.com/repos/houseit/devbobinci,"React app providing listing houses, creating users & sorting user data","# houseit
React app created with Vite providing listing houses, creating users &amp; sorting user data

Node version 18.14.1
React version: 18.2
Vite version: 4.3.9

To run this project -> clone repo, then in terminal `npm install`, `npm run dev`

Dependecies i used:
@heroicons
@react-icons
@country-state-city
@formik
@firebase
@framer-motion
@moment
@react-currency-input-field
@react-datepicker
@react-dopzone
@react-fast-marquee
@react-firebase-hooks
@react-intersection-observer
@react-spinners
@react-time-picker
@vercel
@yup & @yup-password
@react-helmet
@react-calendar
",0,0,1,0,real-estate,"[firebase-storage, framer-motion, house, react, react-dropzone, real-estate, typescript]",0
luccalb,zvg-portal,,https://github.com/luccalb/zvg-portal,https://api.github.com/repos/zvg-portal/luccalb,A Python wrapper for the german foreclosure portal at https://www.zvg-portal.de,,0,0,2,0,real-estate,"[foreclosure, real-estate, scraping, wrapper-library]",0
NickolasAbad,casa_trancoso,,https://github.com/NickolasAbad/casa_trancoso,https://api.github.com/repos/casa_trancoso/NickolasAbad,"üè† Landing Page para a aluguel de uma casa de luxo inigual√°vel. Design completo, desde o Figma at√© uma p√°gina totalmente responsiva com React, Styled-Components, MaterialUI e mais!","# üè† Landing Page | Casa de Luxo üåü

Bem-vindo √† casa dos seus sonhos! üåÖ Esta √© a p√°gina de destino para a aluguel de uma casa de luxo inigual√°vel. Desenvolvida com paix√£o, esta p√°gina tem tudo o que voc√™ precisa para atrair e cativar seus futuros h√≥spedes.

![Imagem da Casa de Luxo](./src/images/Comodidades/Exterior_01.jpeg)

## üé® Design

O design foi meticulosamente criado no Figma, resultando em uma apar√™ncia deslumbrante e luxuosa. A p√°gina inclui:

* **Cabe√ßalho no Estilo ""Hero"":** Uma primeira impress√£o de tirar o f√¥lego!
* **Quatro Se√ß√µes com Automa√ß√µes:** Rea√ß√µes din√¢micas gra√ßas ao React.js e Hooks.
* **Se√ß√£o ""Sobre"":** Uma bela apresenta√ß√£o com texto e imagem, contando a hist√≥ria da casa.
* **Comodidades:** Utilizando Cards, mostramos tudo o que a casa tem a oferecer, com uma galeria para cada c√¥modo.
* **Dicas:** Um guia √∫til com um accordion interativo, gra√ßas ao MaterialUI.

## üõ†Ô∏è Tecnologias Utilizadas

* **HTML:** A espinha dorsal da web.
* **Styled-Components:** Estiliza√ß√£o elegante e reutiliz√°vel.
* **JavaScript:** Tornando a p√°gina din√¢mica e interativa.
* **React:** Componentiza√ß√£o e manuten√ß√£o eficientes.
* **React-Router:** Navega√ß√£o suave entre as p√°ginas.
* **MaterialUI:** Componentes modernos e interativos.
* **Vite:** Ferramenta de compila√ß√£o incrivelmente r√°pida.

## üöÄ Como Come√ßar

Quer conferir o c√≥digo? Siga estes passos:

1. **Clone o Reposit√≥rio**

- git clone https://github.com/NickolasAbad/casa_trancoso.git

3. **Instale as Depend√™ncias**

- npm install

5. **Rode o Projeto**

- npm run dev

7. **Aproveite!** üéâ Abra o navegador e visite `http://localhost:3000`.

## üåê Live Demo

[Visite a Landing Page](https://odaratrancoso.com.br/) e explore esta maravilhosa casa de luxo!

## ü§ù Contribuindo

Tem uma ideia brilhante? Sinta-se √† vontade para abrir uma issue ou enviar um pull request.

## üìú Licen√ßa

Este projeto est√° sob a licen√ßa MIT. Veja o arquivo [LICENSE](LICENSE) para mais detalhes.

---

Feito com üíñ e um toque de luxo! üåü
Substitua seu-link-aqui pelo link para a p√°gina de destino, se desejar incluir uma demonstra√ß√£o ao vivo. Espero que este README atenda √†s suas necessidades! Se houver mais ajustes, estou aqui para ajudar.
",0,0,1,0,real-estate,"[aluguel, casa-de-luxo, figma, javascript, landing, landing-page, luxury, material-ui, page, react, react-router, real-estate, responsive, styled-components, vite, web-design]",0
bopith,JPRealEstateAnalysis,,https://github.com/bopith/JPRealEstateAnalysis,https://api.github.com/repos/JPRealEstateAnalysis/bopith,A comparison of real estate prices in Tokyo and Saitama,"# Japan Real Estate Analysis with SQL and Tableau
[![LinkedIn](https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&logo=linkedin&colorB=555)](https://www.linkedin.com/in/bopithbun/) [![Tableau](https://img.shields.io/badge/Tableau-E97627?style=for-the-badge&logo=Tableau&logoColor=white&colorB=555)](https://public.tableau.com/app/profile/bopith.bun) [![GitHub](https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white&colorB=555)](https://github.com/bopith) <img alt=""GitHub"" src=""https://img.shields.io/github/license/bopith/JPRealEstateAnalysis?style=for-the-badge""> 

This repository contains SQL queries for the analysis on Japan real estate price from 2005 to 2021.
Withing the scope of this project, only real estates in Tokyo and Saitama prefectures are analysed as
they are the major prefectures. Also, since they are located closed to each other, it is intereting
to see if there is any differences in terms of their price and the number of transactions.

## Data
The dataset used in this analysis is a record of real estate transaction prices in Japan from 2005 to 2021, surveyed by the 
MLIT(Ministry of Land, Infrastructure, Transport and Tourism of Japan). contains real estate transaction prices for 47 prefectures in Japan,
yet only Tokyo and Saitama prefectures are included in this study. 

Original dataset can be found on this link: https://www.land.mlit.go.jp/webland_english/servlet/MainServlet

## SQL Queries
- `jp_real_estate_data_cleaning.sql`: a query for data preparation
- `jp_real_estate_data_exploration.sql`: a query for data exploration
- `Tableau Project Queries.sql`: a query for data visualization in Tableau

## Tableau for Data Visualization

The query outputs from `Tableau Project Queries.sql` were transformed and 
saved as excel files for importing into Tableau.

Screenshots of the project visualization are found in `Dashboard Screenshots` folder.

Sample dashboard:
![Dashboard](/DashboardScreenshots/1-dashboard_saitamavstokyo.png?raw=true)

For a complete presentation of the data visualization, please visit the following link:
[JP Real Estate Visualization Dashboard](https://public.tableau.com/app/profile/bopith.bun/viz/TableauProject-JPRealEstate/saitamavstokyo)

## Results of the Analysis
Our findings are summarized as follows:
- Both number and average price of real estates in Tokyo are significantly higher than those in Saitama.
- In Saitama, residential land (land and building) has the largest share, while pre-owned condominiums has the largest share in Tokyo.
- Average price of condominiums does not fluctuate much comparing to those of residential lands in both prefectures.
",0,0,1,0,real-estate,"[dashboard, data-analysis, data-visualization, japan, real-estate, sql, tableau, visualization]",0
serveta,emlak-proje,,https://github.com/serveta/emlak-proje,https://api.github.com/repos/emlak-proje/serveta,Real estate e-commerce website. It was one of my graduation projects.,"# emlak-proje
It was one of my individual graduation projects.

# The goal of the project
I was asked to build a real estate e-commerce website like a full-stack developer.

# Used in the project
- PHP
- HTML
- CSS
- Bootstrap
- JavaScript
- MySQL

# Live link of the project
- Note: The link may be broken. If so please alert me!
- [http://emlakproje.rf.gd](http://emlakproje.rf.gd/proje/)

# Learned with this project
- I saw what I could do if I was a full-stack developer for the first time.
- I realized the importance of using a comment line.
- I used Bootstrap for the first time.
- In a short time (I had three months), I learned how to take action and how to behave.

# ScreenShot
![Ekran Alƒ±ntƒ±sƒ±](https://user-images.githubusercontent.com/17321075/153261658-211bca71-864f-4abd-9acb-ec39ec384dbe.JPG)
![Ekran Alƒ±ntƒ±sƒ±5](https://user-images.githubusercontent.com/17321075/153262123-9283e925-009c-4336-b6f8-fa09d65bf013.JPG)
![Ekran Alƒ±ntƒ±sƒ±4](https://user-images.githubusercontent.com/17321075/153262144-760ad864-1da9-4d29-a623-488e908faada.JPG)

## Admin Panel
<img width=""1262"" alt=""Ekran Resmi"" src=""https://user-images.githubusercontent.com/17321075/187620163-8546f7ff-0fbf-42e3-ae87-8f5c787a796f.png"">
",0,0,1,0,real-estate,"[bootstrap, css, e-commerce, emlak, emlakproje, html, javascript, php, proje, real-estate]",0
raqeebAKhan,RealEstateReactApp,,https://github.com/raqeebAKhan/RealEstateReactApp,https://api.github.com/repos/RealEstateReactApp/raqeebAKhan,This website is a Real Estate application with search feature in order to find any properties.,"# RealEstateReactApp

##Website Link

https://rak-real-estate.netlify.app/
",1,1,1,1,real-estate-website,"[react-app, react-js, real-estate-website, tailwind-css, web-development]",0
devvanu,real-estate-website,,https://github.com/devvanu/real-estate-website,https://api.github.com/repos/real-estate-website/devvanu,"Built a Real Estate Website using React, React Router & Chakra UI. You can search houses using given search filter. You can view full details of house by clicking it.","## Real Estate Website
- Tech used: React, React Router & Chakra UI.
- You can search houses using given search filter.
- You can view full details of house by clicking on it.

### Preview

[![Real Estate Website]](https://user-images.githubusercontent.com/93486013/187375292-920f2665-af07-43b9-9b5b-d403270d6797.mp4
)
",15,15,1,1,real-estate-website,"[chakra-ui, context-api, react, react-router-dom-v6, real-estate-website]",0
ashleshsortee,fabric-property-registration,,https://github.com/ashleshsortee/fabric-property-registration,https://api.github.com/repos/fabric-property-registration/ashleshsortee,"Property registration over a Hyperledger Fabric blockchain network which will be use to register, view, purchase or sale properties which will comply with the legal process and will maintain the tamper proof property deeds, transfer of property transactions to avoid any conflicts.","# Fabric Property Network

> **Note** - The development was done on macOS. So, all the bin files for fabric network is for macOS. These bin files need to be replaced in case if the network is tested on other OS.

#### Network Bootstrap -
1. Download the project folder.
2. cd to /network path
    ```sh
    $ cd network
    ```
3. Tear down running network and containers for safer side
    ```sh
    $ sh ./fabricNetwork.sh down
    ```
4. Bootstrap the network
    ```sh
    $ sh ./fabricNetwork.sh up
    ```
5. Open 2 new tabs in terminal and bash into 2 chaincode container. For making development and testing seamless, 2 chaincode containers are configured one for registrar org and other for user org. 
    ```sh
    $ docker exec -it registrar.chaincode /bin/bash
    $ docker exec -it user.chaincode /bin/bash
    ```
6. Start the nodejs service in the respective chaincode container.
    a) In registrar chaincode tab -
    ```sh
    $ npm install
    $ npm run start-dev-registrar
    ```
    b) In user chaincode tab -
    ```sh
    $ npm install
    $ npm run start-dev-user
    ```
7. Install and intantiate the chaincode from the /network directory
    ```sh
    $ sh ./fabricNetwork.sh install
    ```
8. Network set up completed.


#### Property Registration test flow -

> Note - Two cli will be used, one for registrar and other for user to support initiator validation. Registrar cli will connect to peer0 of registrar and user cli will connect to peer0 of the user. That way the request will have the respective initiator MSP id. So, user can not invoke the registrar functionality and vice versa. 

1. Bash into registrar and user cli.
    a) Registrar tab -
    ```sh
    $ docker exec -it cli /bin/bash
    ```
    b) User tab -
     ```sh
    $ docker exec -it user.cli /bin/bash
    ```
2. Two users Ashlesh and Harshit requests for registration. 
    From user cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:requestNewUser"",""Ashlesh"", ""sorteeashlesh@gmail.com"", ""9994293900"", ""12345""]}'
    
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:requestNewUser"",""Harshit"", ""harshit@gmail.com"", ""8894293900"", ""54321""]}'
    ```
3. Registrar accepts both the user‚Äôs registration request. 
    From registrar cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.registrar:approveNewUser"",""Ashlesh"", ""12345""]}'
    
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.registrar:approveNewUser"",""Harshit"", ""54321""]}'
    ```
4. User Ashlesh raise the request for property registration. 
    From user cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:propertyRegistrationRequest"",""Ashlesh"", ""12345"", ""001"", ""100""]}'
    ```
5. Registrar view and verify the property registration request by Ashlesh. 
    From registrar cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.registrar:viewPropertyRequest"",""Ashlesh"", ""12345"", ""001""]}'
    ```
6. Registrar accepts property registration request by Ashlesh. 
    From registrar cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.registrar:approvePropertyRegistration"",""001""]}'
    ```
7. Ashlesh lists his property for sale. 
    From user cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:updatePropertyStatus"",""Ashlesh"",""12345"",""001"",""onSale""]}'
    ```
8. Harshit recharges his account with 500 propCoins. 
    From user cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:rechargeAccount"",""Harshit"", ""54321"", ""txn500""]}'
    ```
9. Harshit wish to buy the property of Ashlesh and initiate the purchase. 
    From user cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:purchaseProperty"",""001"",""Harshit"",""54321""]}'
    ```
10. Harshit view his purchase property. 
    From user cli tab-
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:viewProperty"",""Harshit"",""54321"",""001""]}'
    ```
11. Now there is no property under Ashlesh‚Äôs name. So, when Ashlesh tries to view the property, he gets the error. 
    From the user cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:viewProperty"",""Ashlesh"",""12345"",""001""]}'
    ```
12. Ashlesh and Harshit both verify their propCoins after transaction. Ashlesh has 100 propCoins now and Harshit has 400 propCoins now. 
    From user cli tab -
    ```sh
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:viewUser"",""Ashlesh"", ""12345""]}'
    
    $ peer chaincode invoke -o orderer.property-registration-network.com:7050 -C registrationchannel -n regnet -c '{""Args"":[""org.property-registration-network.regnet.user:viewUser"",""Harshit"", ""54321""]}'
    ```
    ",3,3,2,0,property-management,"[blockchain, chaincode, docker, hyperledger-fabric, nodejs, property-management, shell]",0
jayendramadaram,Hyperledger-Based-real-estate,,https://github.com/jayendramadaram/Hyperledger-Based-real-estate,https://api.github.com/repos/Hyperledger-Based-real-estate/jayendramadaram,Complete decentralized Application Based on HYPERLEDGER FABRIC ,,0,0,1,0,real-estate,"[chaincode, docker, docker-compose, golang, hyperledger-explorer, hyperledger-fabric, nextjs, postgres, real-estate, tailwindcss, typescript, wsl]",0
dearvn,wp-land-lite,,https://github.com/dearvn/wp-land-lite,https://api.github.com/repos/wp-land-lite/dearvn,A plugin to manage real estate for any agency. It is very simple and able scale.,"# WP Land Lite
A simple project to manage real estate for agency to work in WordPress plugin development using WordPress Rest API, WP-script, React, React Router, Tailwind CSS, PostCSS, Eslint, WP-Data, WP-Data Store, React Components, React CRUD, i18n, PHPUnit Test, JestUnit Test, e2e Test, Gutenberg blocks and PHP OOP plugin architecture easily in a minute.

----

## What's included?

1. WordPress Rest API
2. WP-script Setup
3. React
4. React Router
5. TypeScript
6. Tailwind CSS [Nested + ]
7. Scss
8. PostCSS
9. Eslint
10. WP-Data
11. WP-Data Redux Store [Redux Saga, Generator function, Thunk, Saga Middleware]
12. React Components
13. React CRUD Operations - Create, Reade, Update, Delete, Status changes and so many...
14. Internationalization - WP i18n
15. PHPUnit Test [Test + Fix]
16. JestUnit Test
17. Jest-Pupetter e2e Test
18. PHP OOP plugin architecture [Traits + Interfaces + Abstract Classes]
19. Gutenberg blocks

### Quick Start
```sh
# Clone the Git repository
git clone https://github.com/dearvn/land-lite.git

# Install PHP-composer dependencies [It's empty]
composer install

# Install node module packages
npm i

# Start development mode
npm start

# Start development with hot reload (Frontend components will be updated automatically if any changes are made)
npm run start:hot

# To run in production
npm run build
```

After running `start`, or `build` command, there will be a folder called `/build` will be generated at the root directory.

### Activate the plugin
You need activate the plugin from plugin list page.
http://[domain]/wp-admin/plugins.php

### Zip making process [Build, Localization, Version replace & Zip]
```sh
# One by one.
npm run build
npm run makepot
npm run version
npm run zip

# Single release command - which actually will run the above all in single command.
npm run release
```

After running `release` command, there will be a folder called `/dist` will be generated at the root directory with `wp-land-lite.zip` project files.


### Run PHP Unit Test

```sh
composer run test
```

### Run all tests by single command - PHPCS, PHPUnit

```sh
composer run test:all
```

### Run Jest Unit Test

```sh
npm run test:unit
```

### Run Jest-Pupeteer e2e Test

WordPress core doc link: https://make.wordpress.org/core/2019/06/27/introducing-the-wordpress-e2e-tests/

**Requirements:**
- Must have docker installed and running by ensuring these commands -
```
npm run env:stop
npm run env:start
```

**Normal e2e test**
```sh
npm run test:e2e
```

**Interactive e2e test**
```sh
npm run test:e2e:watch
```

### PHP Coding Standards - PHPCS

**Get all errors of the project:**
```sh
composer run phpcs
```

**Fix all errors of the project:**
```sh
composer run phpcbf
```

**Full Composer test run:**
```sh
composer run test:all
```

### Browse Plugin

http://[domain]/wp-admin/admin.php?page=landlite#/

### REST API's

#### REST API Documentation

1. **Product Types**
    - Method: `GET`
    - URL: http://[domain]/wp-json/product-real-estate/v1/product-types
1. **Cities dropdown**
    - Method: `GET`
    - URL: http://[domain]/wp-json/product-real-estate/v1/cities/dropdown
1. **Product Lists**
    - Method: `GET`
    - URL: http://[domain]/wp-json/product-real-estate/v1/products
1. **Product Details**
    - Method: `GET`
    - URL By ID: http://[domain]/wp-json/product-real-estate/v1/products/1
    - URL By Slug: http://[domain]/wp-json/product-real-estate/v1/products/first-product
1. **Create Product**
    - Method: `POST`
    - URL: http://[domain]/wp-json/product-real-estate/v1/Products
    - Body:
    ```json
    {
        ""title"": ""Simple Product Post"",
        ""slug"": ""simple-product-post"",
        ""description"": ""Simple product post description"",
        ""city_id"": 1,
        ""product_type_id"": 2,
        ""is_active"": 1
    }
    ```
1. **Update Product**
    - Method: `PUT`
    - URL: http://[domain]/wp-json/product-real-estate/v1/products/1
    - Body:
    ```json
    {
        ""title"": ""Simple Product Post Updated"",
        ""slug"": ""simple-product-post-updated"",
        ""description"": ""Simple product post description"",
        ""city_id"": 1,
        ""product_type_id"": 2,
        ""is_active"": 1
    }
    ```
1. **Delete Products**
    - Method: `DELETE`
    - URL: http://[domain]/wp-json/product-real-estate/v1/products
    - Body:
    ```json
    {
        ""ids"": [1, 2]
    }
    ```

**Detailed Documentation** -
[View Detailed documentations with parameters and responses of the REST API](https://github.com/dearvn/land-lite/blob/main/Rest-API-Docs.MD)

### Version & Changelogs
**v0.0.1 - 05/12/2022**

1. New Feature : Product Create.
2. New Feature : Product Update.
3. New Feature : Product Delete.
4. New Feature : Product Status change.
5. New API: City dropdown list.
6. New: Updated logo icon and plugin name.
7. New Components: Input Text-Editor, Improved design.
8. Refactor: Refactored codebase and updated docs.
9. New: Product type seeder.
10. Chore: Zip file generator.
11. Chore: i18n localization generator.

<details>
    <summary>Options for specific files:</summary>

**Get specific file errors of the project:**
```sh
vendor/bin/phpcs product-real-estate.php
```


**Fix specific file errors of the project:**
```sh
vendor/bin/phpcbf product-real-estate.php
```
</details>

### Versions
<details>
    <summary>Simple Version with raw PHP</summary>

https://github.com/dearvn/land-lite/releases/tag/vSimple
</details>

<details>
    <summary>Version with EsLint and i18n Setup</summary>

https://github.com/dearvn/land-lite/releases/tag/vSimpleEslint
</details>


<details>
    <summary>Version with EsLint, i18n and React Router Setup</summary>

https://github.com/dearvn/land-lite/releases/tag/vReactRouter
</details>

<details>
    <summary>Version with PostCSS and Tailwind CSS Setup</summary>

https://github.com/dearvn/land-lite/releases/tag/vTailwindCss
</details>

<details>
    <summary>Version with PHPCS setup</summary>

https://github.com/dearvn/land-lite/releases/tag/vPHPCS
</details>

<details>
    <summary>Version with PHP OOP Architecture</summary>

https://github.com/dearvn/land-lite/releases/tag/vPhpOOP
</details>

 ## Gutenberg blocks
 Inside `src/blocks` you'll find gutenberg block for ready block setup -


## Contribution

Contribution is open and kindly accepted. Before contributing, please check the issues tab if anything in enhancement or bug. If you want to contribute new, please create an issue first with your enhancement or feature idea.
Then, fork this repository and make your Pull-Request. I'll approve, if everything goes well.

## Contact
Find me at donald.nguyen.it@gmail.com
",0,0,1,0,real-estate,"[batdongsan, reactjs, real-estate, rest-api, wordpress]",0
RocketJas,zoopla_scraper,,https://github.com/RocketJas/zoopla_scraper,https://api.github.com/repos/zoopla_scraper/RocketJas,A program to scrape zoopla for housing data,"# zoopla_scraper
 A program to scrape zoopla for housing data
",3,3,1,0,property-management,"[investment-analysis, property-management, webscraping]",0
albertomonari,Dubai-Real-Estate-Transactions-R-Shiny-App,,https://github.com/albertomonari/Dubai-Real-Estate-Transactions-R-Shiny-App,https://api.github.com/repos/Dubai-Real-Estate-Transactions-R-Shiny-App/albertomonari,,"# Dubai Real Estate Transactions
![dubai](https://www.costacroisieres.fr/content/dam/costa/costa-asset/c_037/place/costa-crociere_dubai-e-emirati.jpg.image.750.563.low.jpg)

It is well known that Dubai has experienced exponential growth over the last 30 years: both in terms of population and construction. 
In fact, only 10% of Dubai's population is indigenous: 90% is made up of immigrants, a large proportion of whom are construction workers.

The aim of this project is to build a basic interactive application to explore the development of the Dubai real estate market from 1995 to 2020.

The application is developed entirely in the R language, with the R Shiny graphical interface.

To open it locally, just run the script [dubai_real_estate_app.R](dubai_real_estate_app.R) in R Studio, while on the server it is uploaded [here](https://albertomonari.shinyapps.io/real_estate_dubai/).

The [dataset](https://www.kaggle.com/andresgtn/dubai-real-estate-transactions) used is freely available on Kaggle.

The application offers two graphs showing the price trend and the price per square metre over time. The user can modify various parameters such as the neighbourhood of Dubai, 
the property type, the property subtype, the payment procedure,  whether or not the property purchased already existed, the range of time and the range of square metres.
",0,0,2,0,real-estate,"[dubai, r, real-estate, shiny-apps]",0
MarkisTheAnalyst,PortfolioProjects,,https://github.com/MarkisTheAnalyst/PortfolioProjects,https://api.github.com/repos/PortfolioProjects/MarkisTheAnalyst,Real Estate (Home Prices) Datasets/Analysis,,0,0,1,0,real-estate,"[banking, investment, real-estate]",0
Hashuudev,Elite-Engineers,,https://github.com/Hashuudev/Elite-Engineers,https://api.github.com/repos/Elite-Engineers/Hashuudev,"Elite Engineers üèó: Buy, sell, and build with confidence. Quality service and options that fit. Join us in redefining property transactions.","# Elite-Engineers
Dedicated guidance & assisting sellers, buyers in marketing, selling & purchasing property. Our experienced professionals are dedicated to providing you with quality services and products. Our team is experienced in a variety of construction projects, so we can offer you a wide range of options to choose from. We are committed to providing quality workmanship and customer service.

# About
Buy, sell, and build with confidence. Quality service and options that fit. Join us in redefining property transactions.

# Technology-Used
* HTML
* CSS
* JavaScript
* Bootstrap
* SCSS
* Php
* Swiper Bundle ( Library )
* VenoBox ( Library )
* Wow & Way Point ( Library )

# Screenshot

![Engineers Enterprises](https://github.com/Hashuudev/Elite-Engineers/assets/94761963/3e0a7258-125c-4e02-bb9f-bf767ff47429)
",1,1,1,0,real-estate-website,"[css, elite-engineers, engineer-enterprises, front-end-development, html, javascript, jquery, junior-developer, mixtup, php, real-estate, real-estate-website, scss, swiper-js, ui-design, ui-ux, united-elite-group-of-companies, venobox, waypoint, wow]",0
jabezdubale,Tariya-Real-Estate-backend,,https://github.com/jabezdubale/Tariya-Real-Estate-backend,https://api.github.com/repos/Tariya-Real-Estate-backend/jabezdubale,Tariya Real-estate project,,0,0,1,0,real-estate,"[java, mapping, postgresql, real-estate, rest-api, spring-boot, webapp]",0
propertyshelf,plone.mls.listing,propertyshelf,https://github.com/propertyshelf/plone.mls.listing,https://api.github.com/repos/plone.mls.listing/propertyshelf,Plone support for MLS Listings.,,0,0,4,1,real-estate,"[plone, plone4x, plone5x, python, real-estate]",0
fintech-lex,housing-rental-analysis,,https://github.com/fintech-lex/housing-rental-analysis,https://api.github.com/repos/housing-rental-analysis/fintech-lex,Interactive visualization of San Francisco Real Estate rental market analysis,"# housing-rental-analysis

Demonstration of data visualization skills, including aggregation, interactive visualizations, and geospatial analysis, to find properties in the San Francisco market that are viable investment opportunities.


_**Special Thank You to the phenomenal leadeship and education provided by professors and Academy Success Manager alongside the resources, tutoring, AskBCS Slackbot team and everything else Columbia University: School of Engineering has afforded to me in the last two-months of development.**_
",0,0,1,0,real-estate,"[real-estate, rental, sanfrancisco]",0
Nocturna1Developer,The-Estate-Website,,https://github.com/Nocturna1Developer/The-Estate-Website,https://api.github.com/repos/The-Estate-Website/Nocturna1Developer,A basic real estate website that I made to showcase my understanding of frontend development. ,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",0,0,1,0,real-estate,"[front-end-development, javascript, reactjs, real-estate, webdevelopment]",0
levin-mutai,easyhouse-booking,,https://github.com/levin-mutai/easyhouse-booking,https://api.github.com/repos/easyhouse-booking/levin-mutai,A website to enable users to view and book rentals and hostels,"# easyhouse-booking

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

### Lints and fixes files
```
npm run lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).
",0,0,1,0,property-management,"[hostel-management-system, property-management, renting-services]",0
shaikhalamin,property-finder-be,,https://github.com/shaikhalamin/property-finder-be,https://api.github.com/repos/property-finder-be/shaikhalamin,"Backend for property finder web application. Built using Node.js,Nestjs,Typescript,Typeorm,Postgres,Authentication,Docker","# property-finder-be
",0,0,2,0,property-management,"[authentication, docker, docker-compose, nestjs, nodejs, postgresql, property, property-management, rest-api, restapi, typeorm, typescript]",0
imhemantchaubey-zz,sublimehomes,,https://github.com/imhemantchaubey-zz/sublimehomes,https://api.github.com/repos/sublimehomes/imhemantchaubey-zz,"a real estate website built using html, css and javascript","# sublimehomes
a real estate website built using html, css and javascript
",0,0,0,0,real-estate,"[css, html, javascript, real-estate, sublimehomes]",0
Egdem,real_estate_market_analysis,,https://github.com/Egdem/real_estate_market_analysis,https://api.github.com/repos/real_estate_market_analysis/Egdem,–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ,"# real_estate_market_analysis


–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
-----------------------------------------------------------------
–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–ò–º–µ–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ú–æ—Å–∫–≤–µ (–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏,–≤—Ç–æ—Ä–∏—á–∫–∏).

–¶–µ–ª—å:
–û—Ü–µ–Ω–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ú–æ—Å–∫–≤–µ.


",0,0,1,0,real-estate,"[analysis, estate-data-anlaysis, matplotlib, matplotlib-pyplot, openpyxl, pandas, python, python3, real-estate, real-estate-market]",0
Jesserc,ChainStateProtocol,,https://github.com/Jesserc/ChainStateProtocol,https://api.github.com/repos/ChainStateProtocol/Jesserc,,"# ChainStateProtocol
",0,0,2,0,real-estate,"[blockchain, real-estate, smart-contracts]",0
smartdev0322,real-estate-management-system,,https://github.com/smartdev0322/real-estate-management-system,https://api.github.com/repos/real-estate-management-system/smartdev0322,,"## Overview ##
This is a SQL based real estate management system.

## SQL Database Design ##
- **[ER Diagram](./ER-Diagram.pdf)**
- **[Relational Design](./Relational-Design.pdf)**

## Routes  ##
Navigate to the following routes to preview the pages directly (I am not preventing page access as per auth for now) :-
<ul>
  <li>
    <a href=""https://real-estate-management-system.vercel.app/buyer"" target=""_blank"">Buyer Page</a>
  </li>
  <li>
    <a href=""https://real-estate-management-system.vercel.app/seller/100"" target=""_blank"">Seller Page</a>
  </li>
  <li>
    <a href=""https://real-estate-management-system.vercel.app/agent/1000"" target=""_blank"">Agent Page</a>
  </li>
  <li>
    <a href=""https://real-estate-management-system.vercel.app/office"" target=""_blank"">Admin Page</a>
  </li>
  <li>
    <a href='https://real-estate-management-system.vercel.app/office/1000'>Sample Report</a>
  </li>
</ul>

**Note** 
- Documentation is in progress. Checkout the [Wiki](https://github.com/mynameisankit/real-estate-management-system/wiki) of the project for any updates.
- The project is still under development and breaking changes / UI and UX improvements will be made gradually.

## Tech Stack ##
- Next.js
- React.js
- MySQL
- Node.js
- Material-UI
- Axios (Will be changed to SWR library for data fetching)

## Install Dependencies ##
```bash
$ cd real-estate-managament-system
# or
$ cd your-folder-name

# using yarn or npm
$ yarn 
# or
$ npm install
```

## Getting Started (Development Mode) ##

First, run the development server:

```bash
$ npm run dev
# or
$ yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file. The project will be documented soon.

API routes can be accessed on `http://localhost:3000/api/route_name` where `route_name` is the endpoint of the api.


## Production Build ##
```bash
$ yarn build
# or
$ npm run build
# or
$ pnpm run build
```

## Some Screenshots ##
<img src='/docs/log-in.png' alt='Log-In Page' />
<img src='/docs/properties-list.png' alt='List of Properties' />
<img src='/docs/report-1.png' alt='Agent Report - 1' />
<img src='/docs/report-2.png' alt='Agent Report - 2' />
",0,0,1,0,real-estate,"[nextjs, real-estate]",0
dearvn,real-estate-os,,https://github.com/dearvn/real-estate-os,https://api.github.com/repos/real-estate-os/dearvn,"This is a project to study Wordpress Hooks, Filters, Actions.","# WordPress Plugin Real Estate OS 
* A standardized, organized, object-oriented foundation for building high-quality WordPress Plugins
* A project to train about Wordpress Hooks, Actions and Filters

**If you like this plugin please support me a coffee (https://www.patreon.com/donaldit) or need implement a plugin contact donald.nguyen.it@gmail.com**

## Wordpress Coding Standards - Check and Fix issues before deploy on wordpress.org

**Install package to check Wordpress standard:**

```sh
composer install
```

**Get all errors of the project:**

```sh
vendor/bin/phpcs --standard=WordPress .
```

**Fix all errors of the project:**

```sh
vendor/bin/phpcbf --standard=WordPress .
```

or fix manually

## Training
### Create Admin Setting
* Create a page admin setting parameters

### Create custom taxonomy

### Create custom post

### Create custom field category

### Create custom field of custom post

### Hook metabox in post create/edit

### Hook filter in custom post list

### Create ajax action

### Modify fields in post list

### Create wp command


Learn hooks:
* `hook taxonomy`. Created new taxonomy and add to post refs `class-toxonomy.php`
* `hook category`. Created custom field and show on list refs `class-category.php`
* `hook posttype`. Created new posttype refs `class-post.php`
* `hook meta_box_cb`. Created multi dropdown as child parent and use ajax change list of childs refs `scripts.js` and `class-real-estate-ajax.php`

## Study Cases
* 1. I want to add custom field to category and show on list in admin
* 2. I want to add new post type
* 3. I want to add custom taxonomy and add custom field to this one
* 4. I want to add meta box when add/edit custom post type
* 5. I want to add new filter in list post type
* 6. I want to create command to execute on terminal
* and more ...

Other I created wp cmd to import sample data to testing
* `wp wds run_migrate`

## Features
* Create new real estate post by location, price, category, type...

## TODO
* Create filter on list of real estate by location, price, category on admin
* Create tag by conjunction between location, category
* Can add multi images
* Create new template detail of real estate type
* Auto post to fanpage, zalo
* Auto post to batdongsan website
* Peformance images

## Installation

Run command to import sample data
* `wp wds run_migrate`


## License

The WordPress Plugin Real Estate OS is licensed under the GPL v2 or later.

> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License, version 2, as published by the Free Software Foundation.

> This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

> You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

A copy of the license is included in the root of the plugin‚Äôs directory. The file is named `LICENSE`.

## Important Notes

### Licensing

The WordPress Plugin Real Estate OS is licensed under the GPL v2 or later; however, if you opt to use third-party code that is not compatible with v2, then you may need to switch to using code that is GPL v3 compatible.

For reference, [here's a discussion](http://make.wordpress.org/themes/2013/03/04/licensing-note-apache-and-gpl/) that covers the Apache 2.0 License used by [Bootstrap](http://twitter.github.io/bootstrap/).

### Includes

Note that if you include your own classes, or third-party libraries, there are three locations in which said files may go:

* `includes` is where functionality where you can put all your admin code, custom classes.
* `assets` is where you can add your site assets i.e images, js, css.
* `temlates` is for all view templates.


## Supports for custom development.

If you‚Äôre interested in custom plugin development or website customization please contact us. donald.nguyen.it@gmail.com
",0,0,1,0,real-estate-platform,"[batdongsan, deploy-plugin, real-estate, real-estate-platform, wordpress-actions, wordpress-filters, wordpress-hooks, wordpress-real-estate, wordpress-standards]",0
RaulSimpetru,RentVisualiser,,https://github.com/RaulSimpetru/RentVisualiser,https://api.github.com/repos/RentVisualiser/RaulSimpetru,An experiment to see how you can make an interactive matplotlib plot,"# RentVisualiser
This is a python script that can produce an interactive matplotlib plot in order to visualize rental property in a city.  
The properties are shown as dots of varied sizes and colors based on the average size and price form the given data. 

The script takes a .csv file as an input. The file must contain 4 columns: **Rent** (the price for the property for a month), **Area** (the size of the property), **Name** (can be left out but must be present as a column => use ;; ... it can help to identify the property) and **Address** (exact address - use google maps or something)

At the start, the script will ask if you would like to provide one or more orientation points like in New York the Statue of Liberty or something like that. You also must add the exact address (google maps can help)
### Prerequisites
pandas, geocoder, numpy, matplotlib
### Example
I have provided a test file called data.csv which holds fictive information but can be used to see the script in action
![](Example.gif)
",0,0,1,0,real-estate,"[interactive-visualizations, matplotlib-pyplot, python, real-estate]",0
Okiki-Olugunna,KXNG-Estates,,https://github.com/Okiki-Olugunna/KXNG-Estates,https://api.github.com/repos/KXNG-Estates/Okiki-Olugunna,real estate app built with Next.js & Chakra UI ,"# KXNG Estates

_Real estate app built with Next.js &amp; Chakra UI_

<b>*Website*</b>: https://kxng-estates.vercel.app/
",0,0,1,0,real-estate,"[chakra-ui, next-js, react-js, real-estate]",0
jsyllu,cupola-client-react,,https://github.com/jsyllu/cupola-client-react,https://api.github.com/repos/cupola-client-react/jsyllu,Real Estate Brokerage Website - Front-end with React,"#  Cupola

[Objectives in Google Doc](https://docs.google.com/document/d/1xnUKw2niSWqDqxQmwM2skHvlqD3SRDRYzhVD4Wq67i0/edit)

## Description

The objective of this project is to connect home buyers to sellers and tenants to renters directly to <u>facilitate services including home trading and residential leasing without the intervention of local real estate agency</u> as mostly they add no value to the transactions but substantially cost for both parties. 

This web application is a third-party real estate broker platform providing real-time real estate listings and services to promote transparent home trading and leasing transactions for home buyers, sellers, renters, and tenants.

### API

+ Zillow
+ Yelp Fusion
+ Google Maps API
+ LocalSchoolDirectory or GreatSchools.org
+ CrimeoMeter Crime Data


### User Roles

Home Buyer

- **search** home for sale in a specific area
- **view** and/or **mark** home listings for sale
- **deposit to schedule** a home tour (refundable)
- **make an offer** with proportional advance deposit
- **mortgage calculator**

Home Seller

- **post** home listing for sale
- **compare listing price** with other homes in the same area (below/on/above average)
- **respond to appointments** (confirm / reschedule / reject) of home tour
- **pick an offer**
- **buy home inspection package** (bundle of standard property inspection reports for better decision-making of buyers)

Renter

+ **post** home listing for rent
+ **compare listing price** with other homes in the same area (below/on/above average)
+ **respond to appointments** (confirm / reschedule / reject) of home tour
+ **pick an offer** 

Tenant

+ **search** home for rent in a specific area
+ **view** and/or **mark** home listing for rent
+ **respond to appointments** (confirm / reschedule / reject) of home tour
+ **make an offer** with proportional advance deposit

Admin

+ **manage** users
+ **edit** and/or **delete** all users' data",4,4,2,1,real-estate-website,"[frontend-web, google-maps-api, react, real-estate-website, redux, sass, webdevelopment, yelp-api, zillow-api]",0
akhilgkrishnan,GekayRealEstate,,https://github.com/akhilgkrishnan/GekayRealEstate,https://api.github.com/repos/GekayRealEstate/akhilgkrishnan,GekayRealEstate is a Django based realestate management system web application. The user can easily book any villa or homes that listed in the website.,"# GekayRealEstate
GekayRealEstate is a realestate management system. The user can easily book any villa or homes that listed in the website.

## Prerequisites

* Python 3.7 +
* Django 2.0 or more 
* PostgreSQL 

![Gekay Real Estate](https://github.com/akhilgkrishnan/GekayRealEstate/assets/22231095/9f3b629b-9dff-4d00-8a7e-6ad3bec7c961)

",6,6,1,0,real-estate-website,"[bootstrap, django, django-app, hacktoberfest, postgresql, python, real-estate-management, real-estate-website, realestate]",0
arv-anshul,99acres-scrape,,https://github.com/arv-anshul/99acres-scrape,https://api.github.com/repos/99acres-scrape/arv-anshul,Scrape 99scrape.com with python using asyncio and export data as CSV.,"# Scrape 99Acres

> [!IMPORTANT]
>
> **DISCLAIMER:** This project is only for education purpose.

### Why this project?

I am working on a real estate project. So I need real-time data for that so I write a program to gather the data for this project and convert it into a web-app using streamlit.

Check out my Data Analysis on the scrapped data [here](https://github.com/arv-anshul/campusx-project-notebooks).

### Techs

1. Python>=3.11
2. Asynchronous Programming
3. Streamlit
4. Http Requests
5. Pydantic

### Setup

1. Install all the required packages.

```sh
pip install -r requirements.txt
```

### Usage

1. Run the streamlit app.

```sh
streamlit run app.py
```

2. Goto URL `http://localhost:8501/`.
3. Fill the form: **Select the city** which you want to scrape and submit.
4. After some backend processing; **a download button** will appear, click it to download the scrapped data.

### Disclaimer

As I wanted to scrape the data from 99Acres website. I am ensuring that I am not performing any illegal activity using this data. I used this data in my project to build some ML model and perform some data analysis.
",0,0,1,0,real-estate-website,"[99acres, api, asynchronous-programming, asyncio, project, python3, real-estate, real-estate-website, web-scraping]",0
tmchuynh,firstgalaxy,,https://github.com/tmchuynh/firstgalaxy,https://api.github.com/repos/firstgalaxy/tmchuynh,,"# firstgalaxy [![NPM version](https://badge.fury.io/js/firstgalaxy.svg)](https://npmjs.org/package/firstgalaxy) [![Build Status](https://travis-ci.org/tmchuynh/firstgalaxy.svg?branch=master)](https://travis-ci.org/tmchuynh/firstgalaxy)

> A real estate website for FirstGalaxy.inc to display the benefits of joining the company, helpful resources to start a real estate career, as well as how to get in touch with agents within the company to find listings.

The code is a demonstration of how to filter data. The first line imports the agents object from the ./data.js file. The next line declares that we are using strict mode, which means that all variables must be declared before they are used. The third line gets the element with id myDropdown and sets it as a variable named filterOptions. Next, we create an event listener on the filter button, which listens for when the button is clicked and then calls toggle() on filterOptions to show or hide its classList property depending on whether it's showing or hiding at this time in order to change what content is shown in our drop-down menu.

The code starts by importing the glossary module from a file called data.js, which is in the same directory as this code. The next line of code creates an empty div with id parent-container and sets its children to be an array that contains all of the terms in the glossary. Next, for each term in the glossary, it iterates through all of its children and adds them to another array called term_container. Finally, it loops through all of those arrays (term_container and parent-container) and prints out each one on separate lines so you can see what's going on better.

",0,0,1,0,real-estate,"[real-estate, real-estate-website, website]",0
enzogsierra,bienes-raices,,https://github.com/enzogsierra/bienes-raices,https://api.github.com/repos/bienes-raices/enzogsierra,"P√°gina web para la venta de propiedades e inmuebles. La p√°gina principal muestra informaci√≥n, propiedades en venta y sus caracter√≠sticas, contacto y blog. Con sistema de registro y panel administrativo, entre otros.",,0,0,1,0,real-estate,"[jpa-hibernate, mysql, real-estate, spring-boot, spring-security, spring-validation, thymeleaf]",0
MahmudulHassan5809,DjangoHousingSellingProject,,https://github.com/MahmudulHassan5809/DjangoHousingSellingProject,https://api.github.com/repos/DjangoHousingSellingProject/MahmudulHassan5809,,,2,2,1,0,real-estate-website,"[boostrap4, django, postgresql, python3, real-estate-website]",0
tousif-k,airbnb-nyc,,https://github.com/tousif-k/airbnb-nyc,https://api.github.com/repos/airbnb-nyc/tousif-k,Machine Learning model predicting the price of airbnb rentals in nyc,"# NYC Airbnb Price Prediction

Using data from [Airbnb Open Data](http://insideairbnb.com/get-the-data.html)
",0,0,1,0,real-estate,"[airbnb, data-science, machine-learning, nyc, nyc-opendata, real-estate, realestate, sklearn]",0
nathannahn,realestatetrends,,https://github.com/nathannahn/realestatetrends,https://api.github.com/repos/realestatetrends/nathannahn,A statistical paper discussing real estate trends in Connecticut and whether or not there was a significant impact in real estate sales during the COVID-19 pandemic,,0,0,1,0,real-estate,"[dunns-test, heatmap, kruskal-wallis, pandas-dataframe, paper, python, real-estate, shapiro-wilk, statistical-analysis, visualization]",0
tix320,kiwi,,https://github.com/tix320/kiwi,https://api.github.com/repos/kiwi/tix320,Reactive streams library.,"# kiwi
Utility library.
",2,2,1,4,property-management,"[property-management, reactive]",0
cbonoz,graph22,,https://github.com/cbonoz/graph22,https://api.github.com/repos/graph22/cbonoz, PropGraph: A graph database comparable model for real estate.,"<p align='center'>
    <img src=""./img/logo.png"" width=400/>
</p>

## Contributors and Contact Information:

Chris Buonocore<br/>
linkedin.com/in/chrisbuonocore<br/>
chrisdistrict@gmail.com


## Problem Statement addressed:

PropGraph: Find undervalued and comparable properties using graph-based relationships powered on TigerGraph.

Going after the TigerGraph Graph For All Million Dollar Challenge.

### Presentation 

Demo: https://youtu.be/iJ6QIgsZwts

Slides: https://docs.google.com/presentation/d/1UGDiIgigPEodtkFg_F-mBde0eaogOYEyHCJ-S14rk3M/edit?usp=sharing


<!--
PropGraph: A property graph database.
Template: https://github.com/TigerGraph-DevLabs/graph-for-all-submission-template
 -->



**Description**:


With real estate at a recent all time demand high, the need for determining valuations effectively is important as ever. Often comparables for real estate valuation are derived at the discretion of the real estate agent, or simply based off the zestimate or redfin estimate for a property.

These methods can also be extremely opaque - with little to no visibility into the exact parameters that influence the price.

When an agent picks comparables, often this goes one layer deep - ex: the property is compared to three adjacent properties.

PropGraph provides a graph based solution that allows querying a given property and finding deeper relationships against recently sold properties. With PropGraph, you can take many 1-layer graphs (ex: one agent doing a comparable on a property) and go N layers deep instead by mapping across all comparables shared by multiple agents. With this strategy you can compare a property in Boston to a property that recently sold in the UK for example via a transitive graph  that previously wasn't visible.

Key graph elements:

- Descriptive words (renovated, new kitchen, new bathroom, flooring, etc.)

Standard quantitative fields:

- Bedrooms
- Bathrooms
- Square footage

- Relationships between different property keywords.
- Find corresponding properties based on graph relationships matching multiple criteria simultaneously.
- Helps reduce bias in real estate pricing.
- Ingests and graphs data through several mainstream real estate websites, including Redfin, Zillow, and Trulia.
- Creates a valuation and visualization model in real time and serves it to the front end application.

## Data

Example dataset in `./data/sample.csv`.
More could be exported in basic searches from Redfin (redfin.com).

## Technology Stack:

- ReactJS
- Python
- pyTigerGraph

## Visuals

<p>Map view of uploaded properties</p>
<img src='./img/home.png' width=800/>
<p>Upload page for submitting property data to database.</p>
<img src='./img/upload.png' width=800/>
<p>Example csv download used for data hydration.</p>
<img src='./img/data.png' width=800/>
<p>Network page for visualizing related properties</p>
<img src='./img/network.png' width=800/>
<p>Calculating comparables based on in-view properties.</p>
<img src='./img/comparable.png' width=800/>
<p>TG Cloud instance</p>
<img src='./img/tgcloud.png' width=800/>
<p>Graph creation</p>
<img src='./img/graph.png' width=800/>
<p>Comparable network query</p>
<img src='./img/query.png' width=800/>

## Dependencies

State any dependencies and their versions needed to be installed to test this project. This may include programming languages, frameworks, libraries, and etc.

## Installation

Clone this repo and follow the steps below for the backend and frontend configuration locally.

### Structure

`./propgraph`: Client-side code.
`./server`: Jupyter notebook to configure the graph DB and backend server code.
`./data`: Example property data.
`./img`: Example screenshots of the application.

#### Backend

1. Set up a tigergraph cloud instance at tgcloud.io, set the credentials to access that instance via the following environment variables.

<pre>
    TIGER_HOST={YOUR_TIGERGRAPH_HOST}
    TIGER_USER={YOUR_TIGERGRAPH_USER}
    TIGER_PW={YOUR_TIGERGRAPH_PASSWORD}
    TIGER_TOKEN={YOU_TIGERGRAPH_TOKEN} # optional, fetched at runtime if unset.
</pre>

2. To bootstrap base/empty graph for PropGraph, run a jupyter notebook from the `./server` directory and open `graphsetup.ipynb`. Install dependencies in first cell and run all cells below.
3. `chmod 755 run.sh`
4. Run `./run.sh`

The server should now be running on port 8000.

### Bootstrap the Database

You'll want jupyter to run the DB-setup commands.
From the `./server` folder:
`jupyter-notebook` (or lab).

Run the commands to the end; if successful, the graph should be a created and a few sample queries should execute.

#### Frontend

From the `./propgraph` folder:

<pre>
yarn
yarn start
</pre>

The PropGraph frontend should now be running on port 3000.

You'll want to load up the DB with some properties from the 'Upload' page of the app to begin using PropGraph with your Tigergraph database.

## Known Issues and Future Improvements

- Include in-app visualization for comparable graph (currently capture-able in the notebook for further/future analysis)
- In-app search

## Reflections

Tigergraph has a unique value prop to do 'Nth' comparable level queries against properties to yield deeper insight than what could easily be done with a traditional database.

## References

- Tigergraph solutions: https://tgcloud.io/app/solutions
- More credits: https://docs.google.com/forms/d/e/1FAIpQLSdoK6wIj4iFJtzeFWFl4yPQK6h8TzmQMsYnG6upZiM1A8W5VQ/viewform
- Notebook: https://github.com/pyTigerGraph/pyTigerGraph/blob/master/examples/GSQL101%20-%20PyTigerGraph.ipynb
",0,0,1,0,real-estate,"[real-estate, tigergraph, valuations]",0
taivop,kvee,,https://github.com/taivop/kvee,https://api.github.com/repos/kvee/taivop,,"# Ad scraper for the Estonian real estate portal kv.ee
",0,0,2,1,real-estate,"[real-estate, scraper]",0
CoreMarkHomes,public,,https://github.com/CoreMarkHomes/public,https://api.github.com/repos/public/CoreMarkHomes,CoreMark¬Æ is full service real estate company that delivers extraordinary value for our community and investors through the acquisition and development of distressed or undervalued residential and mixed-use projects.,,0,0,1,0,real-estate,"[investment, portfoloio, property, real-estate, realestate, rental, rentals, turn-key]",0
azizoglu,RealEstate,,https://github.com/azizoglu/RealEstate,https://api.github.com/repos/RealEstate/azizoglu,A School Project Real Estate MVC Web App,"# Real Estate
A School Project Real Estate MVC Web App

http://www.gokhanazizoglu.com/emlak-projesi/

# Features
- **Login and Register** 
- **Property Publishing with Map Location**  
- **Property Matching:** 
- **Sale and Rent Property:**

# Screen
![RealEstate1](https://github.com/azizoglu/RealEstate/blob/master/Screens/Screen1.PNG)
![RealEstate2](https://github.com/azizoglu/RealEstate/blob/master/Screens/Screen2.PNG)
![RealEstate3](https://github.com/azizoglu/RealEstate/blob/master/Screens/Screen3.PNG)
",0,0,1,0,real-estate,"[mvc-framework, mvc-real-estate, real-estate]",0
MobinaJafarian,DeluxeRealProperty,,https://github.com/MobinaJafarian/DeluxeRealProperty,https://api.github.com/repos/DeluxeRealProperty/MobinaJafarian,This is an Open Source Real estate management system written with php mvc,"# Deluxe Real Property

An Open Source Real estate management system written with php mvc.

## Table of Contents
* [General Info](#general-information)
* [Technologies Used](#technologies-used)
* [Features](#features)
* [Screenshots](#screenshots)
* [Setup](#setup)
* [Usage](#usage)
* [Project Status](#project-status)
* [Contact](#contact)
<!-- * [License](#license) -->


## General Information

This is an Open Source Real estate management system written with php mvc that helps agents to manage rentals and properties.<br>
In this project, you can post an article about the property. and manage article comments.

## Technologies Used
- PHP 7.4.32
- Composer 2.4.3


## Features
List the ready features here:
- Advertising Page
- Blog Page
- Details Ad Page
- Best Ads
- Admin Panel
- Ads Gallery
- Slideshow
- Categories Management 

## Screenshots
![Deluxe Real Property screenshot](public/images/screenshots/Screenshot-Deluxe%20Real%20Property.png)

![blog page screenshot](public/images/screenshots/Screenshot-Blog%20Page.png)

![latest blog screenshot](public/images/screenshots/Screenshot-Deluxe%20Latest%20Blog.png)

![post page screenshot](public/images/screenshots/Screenshot-Admin%20Post.png)

![all ads screenshot](public/images/screenshots/ScreenshotAdmin_ads.png)

![create ad screenshot](public/images/screenshots/Screenshot-admin_ads.png)



## Setup
1. Install XAMPP or WAMPP

2. Open XAMPP Control panal and start [apache] and [mysql] .

3. Download project from github(https://github.com/MobinaJafarian/DeluxeRealProperty)  
    OR follow gitbash commands
    
    i>cd C:\\xampp\htdocs\
    
    ii>git clone https://github.com/MobinaJafarian/DeluxeRealProperty.git
    
4. extract files in C:\\xampp\htdocs\.

5. open link localhost/phpmyadmin

6. click on new at side navbar.

7. give a database name as (new-mvc) hit on create button.

8. after creating database name click on import.

9. browse the file in directory
[project/database/new-mvc.sql].

10. after importing successfully.

11. in terminal type `php -S localhost:8000 -t public` .

12. open any browser and type http://localhost:8000/

13. first register and then login

14. admin login details: 
- Email = admin@gmail.com 
- Password = 123456789


## Usage

`php -S localhost:8000 -t public`


## Project Status
Project is: _complete_




## Contact
Created by [@MobinaJafarian](https://github.com/MobinaJafarian) - feel free to contact me!


<!-- Optional -->
<!-- ## License -->
<!-- This project is open source and available under the [... License](). -->
",4,4,1,0,property-management,"[composer, model-view-controller, mvc, mvc-php, php, php-mvc, php7, php8, property, property-management, real-state, real-state-site, real-state-website, realestate, rental-housing]",0
Atamyrat2005,Estate-agency,,https://github.com/Atamyrat2005/Estate-agency,https://api.github.com/repos/Estate-agency/Atamyrat2005,Estate-agency website is built in php and Laravel. This website can be searched using filters. ,"<div align=""center"">

Estate-agency powered by Atamyrat
======
  This Estate agency website backend is built in php and Laravel. This website can be searched using filters. And website has dynamic admin panel that can add, edit and delete estate and read the sended messages of users. **Estate-agency PRO** version is private if you want see or know about utilities of the website you can contact with me or chekout websites navbar has pro link there are have wideo of **Estate-agency PRO** or scroll down and look screenshots of pro website.
  
### Languages and Tools
![HTML](https://img.shields.io/badge/-HTML-000000?style=for-the-badge&logo=html5)
![CSS](https://img.shields.io/badge/-CSS-000000?style=for-the-badge&logo=css3)
![bootstrap](https://img.shields.io/badge/-Bootstrap-000000?style=for-the-badge&logo=Bootstrap) 
![js](https://img.shields.io/badge/-JavaScript-000000?style=for-the-badge&logo=Javascript)
![jquery](https://img.shields.io/badge/-Jquery-000000?style=for-the-badge&logo=jquery)
![pwa](https://img.shields.io/badge/-pwa-000000?style=for-the-badge&logo=pwa)
![PHP](https://img.shields.io/badge/-PHP-000000?style=for-the-badge&logo=PHP) 
![Laravel](https://img.shields.io/badge/-Laravel-000000?style=for-the-badge&logo=Laravel)
![pgsql](https://img.shields.io/badge/-postgres-000000?style=for-the-badge&logo=postgresql)
![pgsql](https://img.shields.io/badge/-mysql-000000?style=for-the-badge&logo=mysql)


Requirements
------
1. PHP min v.8
2. DB server (Recommended:MySQL or PgSQL)
3. [composer min v.2](https://getcomposer.org/)
4. Please check other requirements of  [Laravel](https://laravel.com/)

Setup Directions
------
1. ```composer install```
2. Please clone .env.example and copied file name change from .env.example to .env
3. Create a clean db table
4. Set database infos in the .env
5. ```php artisan migrate --seed```
6. ```php artisan key:generate```
7. ```php artisan serve```

## Partners and Sponsors

#### If you want to support me, you can contact with me via
<a href=""https://atamyrat2005.github.io/"">![ATAMYRAT](https://img.shields.io/badge/-ATAMYRAT-000000?style=for-the-badge&logo=user)</a>
<a href=""https://www.instagram.com/sukurow_atamyrat"">![Instagram](https://img.shields.io/badge/-Instagram-000000?style=for-the-badge&logo=Instagram)</a>
<a href=""https://tiktok.com/@atamyrat05"">![tiktok](https://img.shields.io/badge/-tik%20tok-000000?style=for-the-badge&logo=tiktok)</a>
<a href=""https://join.skype.com/invite/LgyAGTDhpykv"">![skype](https://img.shields.io/badge/-skype-000000?style=for-the-badge&logo=skype)</a>
<a href=""https://twitter.com/atamyrat2005"">![twitter](https://img.shields.io/badge/-twitter-000000?style=for-the-badge&logo=twitter)</a>
<a href=""https://www.facebook.com/atamyrat.sukurow"">![facebook](https://img.shields.io/badge/-facebook-000000?style=for-the-badge&logo=facebook)</a>
<a href=""https://t.me/programmist_hacker"">![telegram](https://img.shields.io/badge/-telegram-000000?style=for-the-badge&logo=telegram)</a>
<a href='https://github.com/atamyrat2005'>![github](https://img.shields.io/badge/-github-000000?style=for-the-badge&logo=github)</a>
<a href=""mailto:shukurovatamyrat@gmail.com"">![gmail](https://img.shields.io/badge/-Gmail-000000?style=for-the-badge&logo=gmail)</a>
<a href=""https://gitlab.com/Atamyrat2005"">![gitlab](https://img.shields.io/badge/-Gitlab-000000?style=for-the-badge&logo=gitlab)</a>
<a href=""https://codepen.io/Atamyrat-k-row"">![codepen](https://img.shields.io/badge/-codepen-000000?style=for-the-badge&logo=codepen)</a>

## ""Estate-agency PRO"" Home page

![home1](public/img/pro/1.png)
![home2](public/img/pro/2.png)
![home3](public/img/pro/3.png)
![home4](public/img/pro/4.png)

## ""Estate-agency PRO"" Dashboard page

![admin](public/img/pro/5.png)

About Pro version of estate agency
------
The Estate-agency PRO version name is Realtor and the website has own private logo that designed by Atamyrat in this website not only estates or estate agents also has service providers. The website can change background theme dark and light or auto choose your browsers or devices bacground theme and this website more responsive and dynamic. In PRO version website users after register can add estate and service. The users have statuses and there are ""Start-up"", ""Professional"" and ""Enterprise"". Start-up is free they can post only 5 posts. Professionals they can post 20 posts and professionals posts automatically adding to VIP post that ordering in first place and top-right automatically appears badge that Premium with yellow color and finally Enterprise users they can post infinity posts and they posts are ordered first all other posts and this also appears top-right  automatically badge that Premium with yellow color and admin first checks and answers the enterprise users and after checks professional users and finally checks start-up users posts. *If you want know more about this PRO version site you can watch video in the website and can contact with me* @Atamyrat2005

![logo](public/img/Realtor.png)
</div>
",4,4,1,1,real-estate-website,"[aos-animation, bootstrap5, estate, estate-agent, html-css-javascript, laravel, php, real-estate-management, real-estate-website, splidejs, videojs]",0
colias-palaeno,londonmove,,https://github.com/colias-palaeno/londonmove,https://api.github.com/repos/londonmove/colias-palaeno,"The best areas to live in London, with the stats!","# LondonMove
The best areas to live in London, with the stats!

LondonMove is an open-source projectmade to gather data on the best areas to live in London by house prices and other factors.

For this, it utilises Land Registry data.

## Credits

Many thanks to [SumberRejeki](https://www.flaticon.com/authors/sumberrejeki) for the [arrow](https://www.flaticon.com/premium-icon/up-arrow_4493897) [icons](https://www.flaticon.com/premium-icon/down_4493905).
",0,0,1,0,real-estate,"[london, real-estate]",0
saklis,property-manager,,https://github.com/saklis/property-manager,https://api.github.com/repos/property-manager/saklis,"Configuration tool, which automatically finds and sets any fields or properties based on provided data.","# Property Manager
A configuration tool, which automatically finds and sets any fields or properties based on provided data. It comes bundled with providers to read and write ini files as well as pair of simple interfaces to let you easily write your own.

## Features
* Can set values of fields and properties using Reflection.
* Supported types: bool, int, float, string
* Supports static variables.
* Option to save changes through editable data provider.

## Compatibility
* C# 7.0 and greater

## Installation
With Visual Studio NuGet Package Manager: `PM> Install-Package PropertyManager`

or download library from https://www.nuget.org/packages/PropertyManager/

## Getting started with Property Manager
Most common way of using Property Manager is by invoking static API of `PropertyManager` class. This is used for batch application of all values.

### Applying values through static call
When you get used to it, applying values through static call is quite easy:
```c#
PropertyManager.Apply(this, new PropertyProvider.FilePropertyProvider(""fileWithValues.ini""));
```

This one line is a bit deceptive, though, as it does have quite a bit of things happening. Two main topics are Context and providers.

### Providers
Providers are classes implementing `IPropertyProvider` or `IEditablePropertyProvider` interface. The job of a provider is to supply Property Manager with List of `PropertyEntry` objects through implementation of `GetPropertyEntries()` method. Aditionally, `IEditablePropertyProvider` provides `Save()` method, which should be used to saving changes done through Property Manager.

Propery Manager by default contains two providers - `FilePropertyProvider` and `FileEditablePropertyProvider` which implement simple support \*.ini files with line-long comments.

An example of `fileWithValues.ini` file:
```ini
private field id = 42
Name = ""Adams""

# Is Adams user of our system?
IsUser = true
```

You may notice that there are two qualificators before `id` variable. Each variable is, by default, treated as public property, so if you're trying to set a private property or a field you need to add proper qualifier.

You can create and configure both providers using an initializer. Here's an example based on `FilePropertyProvider` class:
```c#
var provider = new FilePropertyProvider(""fileWithValues.ini"") {
  CommentSign = ""#"",
  Encoding = System.Text.Encoding.UTF8,
  Culture = CultureInfo.InvariantCulture,
  AllValuesAsString = false
};
```

Methods `GetPropertyEntries()` and `Save()` in the providers are for internal use for Property Manager and don't need to be called manualy.

### Context
Context is a starting point for Property Manager from which the system will look for fields and propertis.

Check out this example that expands on static call line from above:
```c#
class User {
  private int id;
  public string Name { get; set; }
  public bool IsUser { get; set; }
    
  public User() { }
}

internal class Program {
  private static void Main(string[] args) {
    User userObject = new User();
    
    PropertyManager.Apply(userObject, new PropertyProvider.FilePropertyProvider(""fileWithValues.ini""));
  }
}
```

The context of the call is userObject object, which means that all lines from the files will be applied to this userObject object. In this example after the calls of `Apply()` method values stored in userObject object will be 42, ""Adams"" and true for id, Name and IsUser respectively.

This approach, while quick and convinient, is a read-only approach. To make full use out of editable providers you'll need...

### Instance of Property Manager
Creating an editable instance of Property Manager is as strightforward as any other class.

```c#
var manager = new PropertyManager(new PropertyProvider.FileEditablePropertyProvider(""fileWithValues.ini""));
```

A Property Manager instance give you access to `Apply()` method that can be used exactly the same way as the static version. Aside of that, you can also use `GetValue()` method or indexer to retrive value from particular key.
```c#
string name = manager.GetValue<string>(""Name"");
string sameName = manager[""Name""];
```

### Editable values
To change value under key you can use `SetValue` method.
```c#
manager.SetValue<string>(""Name"", ""Duglas"");
```

And to update source file just call `Save()` method that's provided by the instance.
```c#
manager.Save();
```

## Concurrency
Property Manager is thread-safe in non-editable mode. It's no when editable provider is used.
",2,2,2,0,property-management,"[c-sharp, c-sharp-library, csharp, csharp-library, properties, property-management, reflection]",0
briancrink,tinyspace,,https://github.com/briancrink/tinyspace,https://api.github.com/repos/tinyspace/briancrink,,"# tinyspace
",0,0,0,0,property-management,"[property-management, real-estate, tinyliving]",0
iamanandsoni,desirehouse,,https://github.com/iamanandsoni/desirehouse,https://api.github.com/repos/desirehouse/iamanandsoni,"Rent, Sell and Buy Your Property in South Delhi Only.Visit Now","# desirehouse
Rent, Sell and Buy Your Property in South Delhi Only.
",0,0,2,0,real-estate,"[properties, real-estate, rent, villas]",0
BetaProg,MPRTS,,https://github.com/BetaProg/MPRTS,https://api.github.com/repos/MPRTS/BetaProg,An expense sharing responsive web application,"# MPRTS
A responsive web application for an all-round tenant and property management features

Highlights:
<ul>
  <li>User Registration</li>
  <li>Multiple types of users and responsibilities</li>
  <li>Device and size independant</li>
  <li>Real time dashboard for admin control</li>
  <li>Payment Report generations</li>
  <li>Email Notifications on payments</li>
  <li>Chat feature coming soon</li>
</ul>
",2,2,1,0,property-management,"[angularjs, bootstrap, css3, email-notification, html5, material-ui, mysql-database, php, property-management, responsive-web-design]",0
youngprofessionalsnetwork,millennials-careers,,https://github.com/youngprofessionalsnetwork/millennials-careers,https://api.github.com/repos/millennials-careers/youngprofessionalsnetwork,Learn Professional Training and Career Development Skills Online,"# millennials-careers
Learn Professional Training and Career Development Skills Online
",0,0,0,0,real-estate,"[marketing-automation, marketing-cloud, marketing-emails, marketing-statistics, marketing-tools, marketing-web-ops, mortgage, mortgage-calculator, real-estate, realestate, realestatecloud, realestatestandards, t, training, training-materials, trainingapp, website]",0
projectfinalaudio,homesearch,,https://github.com/projectfinalaudio/homesearch,https://api.github.com/repos/homesearch/projectfinalaudio,Homesearch is a Real Estate Application that makes searching for Rentals easy and less time consuming.,"# Homesearch
Homesearch is a Real Estate Application that makes searching for Rentals easy and less time consuming.

## Dev
```bash
$ node .
```

## Preview
![App preview](https://github.com/projectfinalaudio/homesearch/blob/master/preview.png?raw=true)

",0,0,2,0,real-estate,"[android, app, reactnative, real-estate, ui-design, webview-app]",0
karlru,kv-scraper,,https://github.com/karlru/kv-scraper,https://api.github.com/repos/kv-scraper/karlru,Scrape data from kv.ee real-estate site,,0,0,1,3,real-estate,"[python, real-estate, web, webscraping]",0
isra-st,NewPoPUpStore,,https://github.com/isra-st/NewPoPUpStore,https://api.github.com/repos/NewPoPUpStore/isra-st,The Goal of this repository is about oppening a new Pop Up Store for a Furniture Retailer in the center of Madrid- We will get these insight from scraping a real-state websiste to find the amount of empty appartments for renting and sale.,"# NewPoPUpStore
The problem to resolve of this repository is about opening a new Pop Up Store for a furniture Retailer in the center of Madrid. We will get this insight through the analysis of empty apartments for renting and selling in Madrid.

# Presentation
If you want to see the presentation click on the below picture.
[![Web Scraping](https://user-images.githubusercontent.com/73388089/113903665-82011480-97d1-11eb-8392-933861f8a530.png)](https://github.com/isra-st/NewPoPUpStore/files/6273112/New.PopUpStore.pptx)

# The insights: 
1. Chamberi, Tetuan and Chamart√≠n are adjacent districts. Together, they have the 18.03% of flats on sale and 26,6 % of renting flats. A location between the three districts will be suitable. 
2. The neighborhoods with the highest number of apartments for sale and renting are Center (Sol) and Salamancas. The price per meter is expensive in both locations, the hypothesis is that these areas have not a regular turnover. This hypothesis needs to be validated with other kind of data. 
3. Carabanchel and Puente de Vallecas are two areas with potential but the average squared meters and the number of rooms are smaller than the same values in the above districts. 

![Circle_map_Git_hub](https://user-images.githubusercontent.com/73388089/113903562-6990fa00-97d1-11eb-805f-2235ace54e5c.png)


# Steps of this project: 
1. Select one of the top real estate web sites in Madrid:
   URL: www.fotocasa.es
2. Design and preparation of the projects.
3. Web Scraping all rent and sale apartments in Madrid center. 
4. Clean the data. 
5. Import the data to MySQL Workbench.
6. Analyze the data.
7. The insights

# Design and preparation of the project: 
1. I have used Miro to create a visualization of the data I need to get from website. Here the Miro link: https://miro.com/app/board/o9J_lT6lKyU=/
2. I have used Trello as a productive tool to register the requirements needed to the project. https://trello.com/b/jU4yORwC

# Web Scrapping:
After the analysis www.fotocasa.es I have seen that the website is API based.
1. Check if the request to the site web is allowed (get 200).
2. Find the right headers of the site. 
3. Create a function to iterate through the different pages and recollect all the data in two json files. One for selling apartments and another for renting apartments. I've got around 18000 rows and 58 columns of selling apartments and 2300 rows and 8 columns of renting apartments.

# Clean the data: 
1. Get rid of the duplicated rows. I have discovered that half of the flats for selling where duplicated. So, I finalized with 9000 rows of selling flats.
2. The json files were dictionaries oriented and I have normalized all the dictionaries to extract all the values related to the Price, Squared meters, Rooms, Location, terrace, parking, elevator, description of the announce and the links of the flat pictures.
3. I have dropped all the unnecessary columns.
4. I have searched the outliers through boxplot, IQR and Z-Score.
5. I have removed the extreme values. 
6. I have created a new column with the price per squared meter. 
7. Same process for the Rent apartments. 
8. Export the files to CSV. 

# Import to MySQL
1. Create a new schema. ""Madrid""
2. Import table sale
3. Import table rent.
4. I have prepared some queries in MySQL Workbench to be used in the analysis of the data. 

# Analyze the data.
1. I've analyzed the places were the business competition has some locations in the center of Madrid. 
2. I have imported to Jupyter notebook the tables and I've filtered and group them base on Qty of apartments, neighborhood, price, surface, rooms and percentage of apartments per districts.

# Conclusions: 
Based in the data and the analysis of the real state current situation. An adjacent location between Chamberi, Tetuan and Chamartin will be the most suitable location to open a PopUpStore for the furniture retailer. 
",0,0,1,0,real-estate,"[beutifulshoup, real-estate, webscraping]",0
error418,markdown-properties,,https://github.com/error418/markdown-properties,https://api.github.com/repos/markdown-properties/error418,Load Java Properties from a Markdown file,"# markdown-properties 

Store application properties along with their documentation in a neat Markdown file and load them using this library.

[![Build Status](https://travis-ci.org/error418/markdown-properties.svg?branch=master)](https://travis-ci.org/error418/markdown-properties)
[![Code Climate](https://codeclimate.com/github/error418/markdown-properties/badges/gpa.svg)](https://codeclimate.com/github/error418/markdown-properties)
[![Maven Central](https://img.shields.io/maven-central/v/com.github.error418.properties/markdown-properties.svg?maxAge=2592000)](http://search.maven.org/#search%7Cga%7C1%7Ccom.github.error418.properties.markdown-properties)

## Intention

Comments in property files tend to be not that appealing to the eye. The main reason is the lack of possibilities
to format the text written in these files. A different approach would be to write a separate documentation supporting
these features, which has the downside, that the location and prescense of these files needs to be known by users and developers.

The question is: Why should a property file not be configuration and well-readable documentation at the same time?
Markdown supports a easy-to-learn and powerful way to write nicely formatted text. Storing, reading and configuring
properties could be done with any text editor.

For a small example and giving you an idea of what this project is about you can view the project's
[Example Properties](examples/example-properties.md) file.

### TL;DR

> Storing documentation and the property values in one file (which supports text formatting) saves the developer
> and the user time and configuration errors.


## Usage

This library is written to support the `CommonMark` Markdown specification.

### Markdown Layout

To embed your property configuration inside a Markdown file you specify a code block like this:

	```property:here.goes.the.property.key
	And here goes the value
	```

For a more detailled example you can view the [Example Properties](examples/example-properties.md)

### Loading Properties

Loading Properties in your code can then be done like this:

```java
Properties mdProperties = new MarkdownProperties();
mdProperties.load(ClassLoader.class.getResourceAsStream(""/example-properties.md""));
```

You may notice `MarkdownProperties` extends `java.util.Properties` and can be used like a ""normal"" `Properties` instance.

### Storing Properties

Storing Properties is not supported by this library. Calling `store` or `storeAsXML` methods will behave like the standard `Property` class methods.

## Get it

You can get the library via Maven

```xml
<dependency>
  <groupId>com.github.error418.properties</groupId>
  <artifactId>markdown-properties</artifactId>
  <version>0.0.2</version>
</dependency>
```
",0,0,2,0,property-management,"[markdown, property-management]",0
vargovema,real-estate-demand-ml,,https://github.com/vargovema/real-estate-demand-ml,https://api.github.com/repos/real-estate-demand-ml/vargovema,Predicting the Demand for Real Estate Listings in Austria,"# Predicting the Demand for Real Estate Listings in Austria

- [About](#about)
- [Abstract](#abstract)
- [Development of median prices over time among Austrian states](#development-of-median-prices-over-time-among-austrian-states)
- [Comparison of the final models](#comparison-of-the-final-models)
- [Non-disclosure agreement](#non-disclosure-agreement)

## About

This project was conducted as a bachelor thesis research and the repository was created to show some snippets of the research.

## Abstract

Predicting the behaviour of the housing market has always been a challenging task of great significance since real estate affects the whole economy and individuals to a profound extent. This thesis explores the different aspects that impact the demand for real estate properties, focusing on Austrian real estate listings advertised online. The properties are mainly described by physical characteristics such as the price, area or the number of rooms. These are the primary variables used in this research to predict the real estate demand measured as the number of users expressing interest in the given property through an online platform. The secondary part of the research explores the macroeconomic factors that influence the housing market based on the available literature.
Machine learning methods are implemented for predicting the demand using four models: OLS regression, regression trees, random forests, and XGBoosted trees. Furthermore, different types of division regarding geographical hierarchy are specified in the models to see how well the details about the location contribute to the performance of the models.
The results suggest that random forests with Austrian states as the location specification perform the best in the purchase and rental segments. The crucial influences in the rental segment are the price per square meter and whether the listing was advertised privately. On the other hand, while the price per square meter also matters in the purchase segment, factors such as the online duration of the listing and the Covid 19 pandemic appeared to play a substantial role in this segment.

Keywords ‚Äî housing demand, real estate, Austria, machine learning

## Development of median prices over time among Austrian states

Rent segment (3-month moving average) | Purchase segment (3-month moving average)
--- | ---
![](figs/price_dev_bun_rent.png) | ![](figs/price_dev_bun_buy.png)

## Comparison of the final models

Rent segment | Purchase segment
--- | ---
![](figs/modelstraincomp_rent.png) | ![](figs/modelstraincomp_buy.png)

## Non-disclosure agreement

Since this bachelor thesis was written under non-disclosure agreement, the code, results, and further details of the research cannot be shared publicly. However, I am happy to share the methodology and the models used in the thesis if requested. Moreover, I could possibly share code snippets as well.
",0,0,1,0,real-estate,"[cross-validation, linear-regression, random-forest, real-estate, regression-trees, xgboost-regression]",0
stevenzych,housing-project,,https://github.com/stevenzych/housing-project,https://api.github.com/repos/housing-project/stevenzych,"Linear regression identifying homes in Seattle, WA suitable for first-time buyers. Blog linked below explores the underlying racial and socioeconomic disparity evident in Seattle's housing.","# *King County Housing Prices: Linear Regression For First-Time Buyers*
**Steven Zych - July 2020**

# Introduction

This project looks at housing prices in King County, Washington--which includes Seattle, Bellevue, Renton, Tacoma, and a handful of smaller cities and countryside. Housing data was sourced from [Kaggle](https://www.kaggle.com/harlfoxem/housesalesprediction), manipulated and cleaned in Python as a Pandas dataframe, and ultimately modelled in an iterative approach using StatsModels and Scikit-learn.

More specifically, this project looks at best choices for first-time buyers in the Seattle area, and aims to answer the question:
> ""What factors bring down the price of a house the most, with least impact to overall quality?""

Obviously, this is a fairly subjective question, but categories will be posited later that aim to answer which variables count as having ""least impact"" on the quality of a home.

All in all, the following packages were used:
- Pandas
- NumPy
- Matplotlib
- Seaborn
- StatsModels
- Scikit-Learn
- Warnings
- Datetime

# EDA and Cleaning 

## Column Names

The first (and perhaps most important) part of cleaning this data was sorting through the columns, identifying their meaning, and determining their usefulness to the project. The full list is as follows:
`['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15']`
Columns with `15` at the end refer to the values for the nearest 15 neighbors, waterfront is a yes-no column of whether or not you're on it, and view *claims* to represent whether or not the home has been viewed, yet the values range from 0-4. (Almost every value was 0, and this column was later dropped.)

## Data Types, Duplicates, And Missing Values

The `date` column was changed from strings to datetimes, `sqft_basement` was purged of an erroneous `?` value in many of its rows, and `date` was further manipulated into being represented as `day_of_year` (1-365) so that the model could use it better for predictions (as opposed to interpteting `02-15-2011`, for example).

There were no fully-duplicated rows in the data that needed to be expunged, but there were 117 rows with duplicate ID's--likely homes that were resold. These rows were dropped from the data as they represented only 0.01% of it.

The columns `waterfront` and `yr_renovated` contained thousands of missing values each, both sets of which were replaced with the most likely outcome--0. This indicated ""Not on the waterfront"" and ""Never been renovated"" respectively.

With the data cleaned, a baseline model could be built.

# Baseline Model

The first model takes all the data as-is, and uses every non-price column to predict the `price` column. No special modifications made, just plain and simple. The model's R-squared value was **0.692.** For the uninitiated, an R-squared value of **1** would mean that the linear regression model matches onto the predicted value (`price` here) *perfectly.* This is pretty unheard of. The next key metric, RMSE (root mean squared error, or, give-or-take how far off the model's guesses are) is **$213,446.**  For a baseline model however, the R-squared of 0.692 is *not bad,* but we *can* do better. The following models aim to do just that.

![Scatter Plot Of Predicted And Actual Price For Baseline Model](/readme_images/model_base.PNG)

# Model 2: Mean Normalization of Continuous Variables

For this model I first sorted out the continuous variables from the categorical ones. The continuous variables were `['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'sqft_basement', 'yr_built', 'lat', 'long', 'sqft_living15', 'sqft_lot15', 'day_of_year']`. For each of these variables, a histogram was plotted to observe whether or not the data showed a normal distribution. In this case, only `['price', 'sqft_living15', 'sqft_living']` were deemed ""normal enough,"" and the remaining columns were all mean-normalized (transformed such that their means were now 0, and their minimums and maximums were roughly -1 and 1 respectively).

This model produced a dip in R-squared, down to **0.689,** and I suspected it may have been due to outliers in the data affecting the mean normalizations. Take a look at this plot to further see what I mean. Those lonely dots far down to the left are our price outliers, multi-million-dollar homes whose mere presence in the data throws the model into a tailspin.

![Scatter Plot Of Predicted And Actual Price For Mean Model 2](/readme_images/model_cont_var.PNG)

This impacted the RMSE of the model ever so slightly, bringing it down just a hair to **$213,306.** That's still a pretty massive margin. The subsequent models attempt to address these concerns.

# Model 3: Removing Outliers

It wasn't just `price` that had some extreme outliers. The columns `['price', 'bedrooms', 'sqft_lot', 'sqft_living', 'sqft_basement', 'sqft_lot15']` all had outliers as well (I'm looking at *you,* house with 33 bedrooms). Rows containing an outlier in any of these columns were dropped, and the model was reran with everything else unchanged.

It produced an R-squared value of **0.693** and and RMSE of **$137,906.** This was a considerable improvement on RMSE, and teh R-squared returned to where it was in the baseline.

![Scatter Plot Of Predicted And Actual Price For Model 3](/readme_images/model_remove_outlier.PNG)

# Model 4: Categorical Variables As Dummies

This model was based on the previous model, and involved data manipulation opposite that in model 2. IN other words, I focused on organizing the *categorical variables* in the dataset. Things like `condition`, `grade`, and `waterfront` that were either a binary category or didn't make sense on their own. (A grade of 3 has no meaning when abstracted from whatever rubric it's based on. Is it good? Bad?)

In short, the variables `condition` and `grade` were made into multiple columns of dummy variables (with the first column dropped of course) and `zipcode` was replaced altogether by sorting `lat` and `long` variables into 4 city sectors, where their converging point sits just south of Mercer Island.

This produced a bump in R-squared, up to **0.721** (which can be expected when we're adding so many variables to the model) and an RMSE of **$133,961.** The R-squared was definitely better, and the RMSE hardly changed. This model was kept moving forward.

![Scatter Plot Of Predicted And Actual Price For Model 4](/readme_images/model_cat_vals.PNG)

# Model 5: Selective Predictors

Unsure of a novel change to apply to the data, I modelled it with a twist: I only fed in a variable if its coefficient in the model was at least 6 digits long. In other words, I only modelled that which had a massive impact on price. I though this would strengthen the model, but it didn't at all. R-squared was dropped to **0.675** (worse than the baseline) and RMSE was brought back up some to **$144,649.** Seeing no significant value to this model, it was scrapped. It did, however, produce interesting clumping in the prediction data (as seen in the horizontal clouds below). I did not have time to investigate this behavior.

![Scatter Plot Of Predicted And Actual Price For Model 5](/readme_images/model_selected_predictor.PNG)

# Model 6: Only P-Values Under 0.05

This final model was based on model 4, and was mostly born out of the premise that none of your model's predictors should have a p-value over 0.05. It performed similarly to model 4, with an identical R-squared of **0.721** and a slightly-higher RMSE of **$135,925.** Seeing as this model was effectively the same as the previous best model, and it showed reduced complexity from dropping those low-p-value columns, it was kept, and bestowed the honor of **final model.**

![Scatter Plot Of Predicted And Actual Price For Model 6](/readme_images/model_p_above_005.PNG)

# Recommendations

After iterating through all these models, we return to the initial question:
> ""What factors bring down the price of a house the most, with least impact to overall quality?""

I've done the dirty work behind the scenes, and can offer you this summary. The following conditions all have *negative* correlations with price, meaning that if they are met, that house will be a  better deal. Here's what to do:

1. **Buy south of Mercer Island,** which puts you outside of the downtown region, into sectors 3 and 4.
1. **Buy where the neighbors have big yards.** Generally, these homes are in less urban areas (again, not downtown) and consequently can spread out. This is based on `sqft_lot15`.
1. **Buy new within reason.** Interestingly enough, `yr_built` has a negative correlation with price as well. Many older homes may be prized for their more aesthetic architecture or history.
1. **Don't get a basement.** This one surprised me, but basement-having correlates positively with price, so.
1. **Don't live on the waterfront,** but you should know that.

# Future Research

When next I aid first-time buyers in house-hunting in the greater Seattle area, I'd like to devote more time to feature-engineering and/or data-scraping, to get a better assessment of location's effect on price, especially proximity to areas of high cultural significance.

In this research, the only spatial data points used to predict price were latitude and longitude which--while salient--only provide broad strokes of information. Predicting instead by zipcodes and aggregated zipcodes (such that they represent whole neighborhoods, suburbs, and discrete cities) would potentially be a greater predictor of price since similar areas would be grouped with similar areas. In other words, the reputation of ""living in Renton"" vs. ""living in Bellevue,"" whatever that may mean, would be more present in the data when these spatial groups are recreated in it.

Two final spatial considerations would be proximity to cultural institutions and main streets. Does living next to Pike Place Market drive the price of your house up? What about the Olympic Sculpture park? How about if you live on Pine Street near all the cool restaurants? Intuition says ""Yes"" to all these, but the data has yet to speak.

# Conclusion

Thank you for lending me your time and consideration, and--more importantly--your trust. It is my sincere hope that the predictions and models set forth in this paper are beneficial to all the first-time buyers reading. Happy house hunting!",0,0,0,0,real-estate,"[house, linear-regression, machine-learning, real-estate]",0
valentinesamuel,archi-portfolio,,https://github.com/valentinesamuel/archi-portfolio,https://api.github.com/repos/archi-portfolio/valentinesamuel,A website to show my architectural designs,"# ArchiPortfolio

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 11.2.5.

",0,0,1,0,real-estate,"[3d-graphics, 3ds, architecture, autocad, real-estate, sketchup]",0
chauanphu,mt-eastmark,,https://github.com/chauanphu/mt-eastmark,https://api.github.com/repos/mt-eastmark/chauanphu,"A simple real estate web describes the MT EAST MARK project in district 9, HCM City, Vietnam",,0,0,1,0,real-estate,"[mui, reactjs, real-estate, website]",0
boonreal,EstateApp,,https://github.com/boonreal/EstateApp,https://api.github.com/repos/EstateApp/boonreal,,,0,0,1,0,real-estate,"[javascript, react-native, real-estate]",0
TonyTrotter711,projects,,https://github.com/TonyTrotter711/projects,https://api.github.com/repos/projects/TonyTrotter711,,,0,0,1,0,real-estate,"[finance, financial-modeling, quantitative-finance, real-estate]",0
pawlovskiii,real-estate-website,,https://github.com/pawlovskiii/real-estate-website,https://api.github.com/repos/real-estate-website/pawlovskiii,"My demo project of real estate agency, located in Warsaw.","<p align=""center"">
<img src=""https://www.euractiv.pl/wp-content/uploads/sites/6/2019/07/kamil-gliwinski-xcPw1-5OHTk-unsplash-800x450.jpg"" alt=""two large trees with many branches"">
</p>
<h1 align=""center"">
    Real Estate Agency
</h1
<p> </p>

## Github Pages
https://pawlovskiii.github.io/real-estate-website/

## Table of contents
* [General info](#general-info)
* [Technologies](#technologies)
* [Setup](#setup)

### General info 
My website project of real estate agency located in Warsaw.

### Technologies
It was mainly created with CSS library called Bootstrap and SaSS as a CSS preprocessor.
Name  | Versions
--- | --- 
Node.js  | 16.4.0
### Setup
To clone and run this application, you'll need [Git](https://git-scm.com) and [Node.js](https://nodejs.org/en/download/) (which comes with [npm](http://npmjs.com)) installed on your computer. From your command line:

```bash
# Clone this repository
$ git clone https://github.com/pawlovskiii/real-estate-website

# Go into the repository
$ cd real-estate-website

# Install dependencies
$ npm install 

# Run the app
$ npm start
```",0,0,1,0,real-estate,"[real-estate, warsaw]",0
MikaSoftware,py-mortgagekit,MikaSoftware,https://github.com/MikaSoftware/py-mortgagekit,https://api.github.com/repos/py-mortgagekit/MikaSoftware,Python library for mortgage calculations.,"# py-mortgagekit
## Build Status
[![Build Status](https://travis-ci.org/MikaSoftware/py-mortgagekit.svg?branch=master)](https://travis-ci.org/MikaSoftware/py-mortgagekit)
[![PyPI version fury.io](https://badge.fury.io/py/py-mortgagekit.svg)](https://pypi.python.org/pypi/py-mortgagekit)
[![Coverage Status](https://coveralls.io/repos/github/MikaSoftware/py-mortgagekit/badge.svg?branch=master)](https://coveralls.io/github/MikaSoftware/py-mortgagekit?branch=master)

## Description
Python library for mortgage calculations.

## Installation
### Requirements
* Python 3.6++

### Instructions
  ```bash
  pip instll py-mortgagekit
  ```

## Usage
### Development
Here is an example of using the using the library in your code.

  ```python
  from mortgagekit.constants import *
  from mortgagekit.calculator import *

  # Define our variables.
  total_amount = Money(amount=250000.00, currency=""USD"")
  down_payment = Money(amount=50000.00, currency=""USD"")
  amortization_year = 25
  annual_interest_rate = Decimal(0.04)
  payment_frequency = MORTGAGEKIT_MONTH # see calculator.py for more options.
  compounding_period = MORTGAGEKIT_SEMI_ANNUAL
  first_payment_date = '2008-01-01'

  # Feel free to use an alternate currency type by first checking to see if your
  # your currency is supported here:
  # https://github.com/limist/py-moneyed/blob/master/moneyed/localization.py#L348
  currency='USD'

  # Load up our calculator.
  calc = MortgageCalculator(total_amount, down_payment, amortization_year,
               annual_interest_rate, payment_frequency, compounding_period,
               first_payment_date, currency)

  # Perform computations.
  payment_schedule = calc.mortgage_payment_schedule()

  # You can now inspect the results and use it for your purposes.
  print(payment_schedule)
  ```

### Quality Assurance
#### Unit Tests
If you want to run the unit tests, you can run the following.

Here is how you run the unit tests.

```bash
python setup.py test
```

#### Code Coverage
Here is how you run code coverage. The first command runs the code coverage
and the second command provides a report. If you would like to know more about ``coverage`` then click to [here to read](http://coverage.readthedocs.io/en/latest/).

```bash
coverage run --source=mortgagekit setup.py test
coverage report -m
```

## License
This library is licensed under the **BSD** license. See [LICENSE.md](LICENSE.md) for more information.
",0,0,1,0,real-estate,"[accounting, finance, mortgage, python, real-estate]",0
saksham1991999,HomePlanify-Django,,https://github.com/saksham1991999/HomePlanify-Django,https://api.github.com/repos/HomePlanify-Django/saksham1991999,,,0,0,1,9,real-estate-website,"[django, real-estate, real-estate-website]",0
jacobday,home-scope,,https://github.com/jacobday/home-scope,https://api.github.com/repos/home-scope/jacobday,Discover your dream home with a clear view of the market.,"[![Home Scope Banner](./readme/readme-header.png)](https://github.com/jacobday/home-scope)

<h2 align=""center"">Home Scope</h2>

<div align=""center"">

<h4>Discover your dream home with a clear view of the market.</h4>

  <p>
    <a href=""https://github.com/jacobday/home-scope/releases/latest"">
        <img alt=""latest release"" src=""https://badgen.net/github/release/jacobday/home-scope"">
    </a>
  </p>

  <div>
    <a href=""#features"">Features</a> ‚Ä¢
    <a href=""#customer-demo-v100"">Customer Demo</a> ‚Ä¢
    <a href=""#technologies-used"">Technologies Used</a> ‚Ä¢
    <a href=""#getting-started"">Getting Started</a>
  </div>

</div>

## Features
- Property Listings: View a list of available properties with details such as images, address, and price.
- Property Search: Search for properties based on address, city, or zipcode.
- Admin Dashboard: Access an admin interface to manage properties, including creating, editing, and deleting them.

## Customer Demo (v1.0.0)

[![Home Scope Demo Video](./readme/video-thumbnail.png)](https://youtu.be/3-bj9XmvFo0 ""Home Scope Demo Video"")

## Technologies Used
- Ruby on Rails: Framework for the web application.
- MongoDB: Database system used to store property data.
- CSS: Custom styling for a modern user interface design.
- dotenv: Used to manage environment variables, such as database credentials.

## Getting Started
To set up the development environment and run the application locally, follow these steps:

1. Clone the repository: `git clone https://github.com/jacobday/home-scope`
1. Install dependencies: `bundle install`
1. Set up the MongoDB connection details in the `.env` file.
1. Start the Rails server: `rails server`
1. Access the application in your web browser at `http://localhost:3000`
",0,0,1,1,real-estate,"[mongodb, mvc, real-estate, ruby, ruby-on-rails]",0
mdfahim-rsm,realstate_website,,https://github.com/mdfahim-rsm/realstate_website,https://api.github.com/repos/realstate_website/mdfahim-rsm,,"# realstate_website
https://mdfahim-rsm.github.io/realstate_website/
",0,0,1,0,real-estate,"[real-estate, realstate-website]",0
Ceasar15,nss_accom,,https://github.com/Ceasar15/nss_accom,https://api.github.com/repos/nss_accom/Ceasar15,"NSS_Accom is a real estate platform where users who are owners of the house can post their rental ads and also users who are tenants can look for the homes based on the location, price and dates.","## Hostel Management Application

NSS_Accom is a real estate platform where users who are owners of the house can post their rental ads and also users who are tenants can look for the homes based on the location, price and dates.


## Features
Users are categorized into two types Landlord and Tenant in this WebApplication

##### Landlord
  - Can post the Rent ads without any charges
  - Choosing the geo location, Amenities, Pictures and various facilities of house while posting the ad
  - Owner can delete the ads when they are occupied houses by tenants 
##### Tenant 
  - Can choose the desired house based on location, check in and out dates, facilites avialable with the house with free of cost
  - Contact details will be available to contact the Landlord to check in
  
## Authentication
Users can sign up using the popular methods and NSS_Accom saves only the minimal data of user like username and email id.
    Google
    Facebook
 

## Installation

Clone the repository, run the virtual environment and install all requirements.
```bash
git clone https://github.com/Ceasar15/BestBuy.git
pip install virtualenv
virtualenv venv
source venv/Scripts/activate
pip install requirements.txt
```
Run migrations commands and manage.py to start the development server.

```bash
python manage.py makemigrations
python manage.py migrate
python manage.py runserver
```

## Visuals
![Home Page ](https://user-images.githubusercontent.com/42820626/156565887-0c722940-0d3c-496a-916a-592899dc2a09.png)
![Student Dashboard Page](https://user-images.githubusercontent.com/42820626/156565905-0872c42f-3766-4a8f-b085-8b6d2d92fdcf.png)
![Apartment Listings Page](https://user-images.githubusercontent.com/42820626/156565913-bc0fb414-af88-425f-954d-21c6a89cacc1.png)
![Details Page ](https://user-images.githubusercontent.com/42820626/156565920-962ccf4e-4d88-4361-a8e4-a56ddbe97a2e.png)
![Landlord Index Page](https://user-images.githubusercontent.com/42820626/156565937-e3e6690d-f624-41ca-8285-a666b1e69559.png)
![Post Products Page](https://user-images.githubusercontent.com/42820626/156565953-97216cde-94c1-4997-8226-c9d64f10c334.png)
![Landlord HomePage ](https://user-images.githubusercontent.com/42820626/156565961-6983435f-f2ea-4620-bc83-cb5c49515f89.png)


## Skills
##### Back-end Technology

    Django Framework
    PostgreSQL

##### Front-end Technology
    HTML5
    CSS3
    BULMA
    Jquery
    JavaScript
    MapBOX

## Demo
Want to take a look at this site.. ? Here is the link [NSS_Accom](https://nss_accom.herokuapp.com/disp), application is deployed on heroku.

## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

Please make sure to update tests as appropriate.

## Project status
This project is not under development anymore. 

## License
[MIT](https://choosealicense.com/licenses/mit/)",0,0,2,1,real-estate,"[javascript, postgresql, real-estate]",0
pedrollamas,Hawaii_app,,https://github.com/pedrollamas/Hawaii_app,https://api.github.com/repos/Hawaii_app/pedrollamas,Este proyecto se trata de un an√°lisis de los datos proporcionados por insideairbnb.com del archipi√©lago hawaiano.,"# An√°lisis Airbnb Hawaii üèñ

## Estructura del proyecto:
Este proyecto se trata de un an√°lisis de los datos proporcionados por insideairbnb.com del archipi√©lago hawaiano. 

Dentro de la app de streamlit encontrar√°s diferentes p√°ginas:
* üåã Hawaii: aqu√≠ encontrar√°s una serie de informaci√≥n relevante acerca del archipi√©lago, un poco de su historia, lugares que visitar en mapas interactivos y m√°s informaci√≥n √∫til.
* üìä EDA: en el an√°lisis exploratorio de datos recorro los datasets utilizados y gr√°ficamente ver√°s el an√°lisis realizado. Incluye mapas interactivos, an√°lisis por vecindarios, tipos de propiedades y mucho m√°s.
* üßë‚Äç‚öñÔ∏è Legal: aqu√≠ habiendo estudiado la normativa hawaiana en referencia a los alquileres a corto plazo, se muestra un peque√±o an√°lisis relacionandolo con los anuncios publicados en las diferentes islas.
* üå™Ô∏è Seguridad: obteniendo un dataset de opendata.hawaii.gov se realiza un mapa interactivo de los diferentes emplazamientos de refugios en el archipi√©lago.
* üó∫Ô∏è Turismo: an√°lisis por islas de la oferta de Airbnb con mapas extraidos y gr√°ficas de barras ilustrativas de los datos.
* üìà Valoraciones: an√°lisis del dataset de reviews proporcionado por Insideairbnb.
* üí´ Agradecimientos. algunas de las p√°ginas consultadas para la realizaci√≥n del proyecto.

## Gu√≠a de Uso:
* Accede a la app de streamlit a trav√©s de este enlace ‚û°Ô∏è https://pedrollamas-hawaii-app-hawaii-z01sd1.streamlit.app/
* Si te aparece desactivada no te preocupes, act√≠vala de nuevo y en unos minutos podr√°s verla.

## Contacto:
  * üì¨ M√°ndame un email at pedrollamaslopez@hotmail.com
  * üë®‚Äçüíºü§ù A√±√°deme en Linkedin at https://www.linkedin.com/in/pedrollamaslopez/
  * üëÄ Si eres recruiter, aqu√≠ tienes una app que te interesar√° para facilitar tu trabajo https://pedrollamas-entrevistame-pedro-llamas-737gfx.streamlit.app/
",0,0,1,0,real-estate,"[airbnb, data-analysis, hawaii, real-estate]",0
Dial-Stephanie,ruraldevops,,https://github.com/Dial-Stephanie/ruraldevops,https://api.github.com/repos/ruraldevops/Dial-Stephanie,"Rural Development Opportunity from Georgia's Historic Heartland with Dial Stephanie, Dover Realty, & Team",,0,0,1,0,real-estate-website,"[branding, dial-stephanie, georgia, help-wanted, partners, real-estate-website, rural-areas, rural-communities, rural-development, undercontract-dot-dev, user-experience, web-development, withwind]",0
ijanhv,Real-Estate-App,,https://github.com/ijanhv/Real-Estate-App,https://api.github.com/repos/Real-Estate-App/ijanhv,,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

Screenshots
![image](https://user-images.githubusercontent.com/90978757/207508398-0ceb81e4-e09a-4c0f-bed1-5f226c0fb505.png)
![image](https://user-images.githubusercontent.com/90978757/207508495-80e20cac-1fd9-4564-b0e9-027767acd723.png)
![image](https://user-images.githubusercontent.com/90978757/207508538-f1ba0421-d7f9-4913-b33a-dcc1467e53ff.png)


## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",0,0,1,0,real-estate,"[chakra-ui, nextjs, rapidapi, real-estate]",0
dmytros09,pillar-landing-page,,https://github.com/dmytros09/pillar-landing-page,https://api.github.com/repos/pillar-landing-page/dmytros09,"Pillar is a commercial real estate investment platform developed with React / Next.js and designed to facilitate discovery, diligence, execution, and ongoing management of direct deals for institutional CRE investors. ","# Pillar 

Pillar is a commercial real estate investment platform designed to facilitate discovery, diligence, execution, and ongoing management of direct deals for institutional CRE investors (e.g. pensions/endowments/family offices/RIAs) and help sponsors efficiently manage capital throughout the lifecycle of an investment.
",0,0,1,0,real-estate,"[landing-page, nextjs, react, real-estate, typescript]",0
alexferrer17,ZafiroGolfProperty,,https://github.com/alexferrer17/ZafiroGolfProperty,https://api.github.com/repos/ZafiroGolfProperty/alexferrer17,This is my example of website for my contract,"# ZafiroGolfProperty
This is my example of website for Zafiro Golf properties

",0,0,1,0,real-estate,"[real-estate, website-template]",0
james-muriithi,dees-estates,,https://github.com/james-muriithi/dees-estates,https://api.github.com/repos/dees-estates/james-muriithi,Just practicing tailwind and using vite üòâ,"# Dee's Estates
This is a real estate landing page to showcase available properties. A design i decided to implement to get my hands on Tailwind and Vite.

## Demo
https://dees-estates.web.app/

## Technologies used
1. Vue3
2. Tailwind css

## Design
![Design](./design.png)

**Design Credit**

https://www.figma.com/@graceadekoya

**Design Link**
https://www.figma.com/community/file/1110614564390895992

## Licence
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](./LICENSE)
",0,0,1,0,real-estate,"[real-estate, tailwindcss, vite, vitejs, vue]",0
IHARNAZAROV,real-estate,,https://github.com/IHARNAZAROV/real-estate,https://api.github.com/repos/real-estate/IHARNAZAROV,Real Estate Agent portfolio,"# portfolio
real-estate-portfolio
",0,0,0,0,real-estate,"[javascript, portfolio-website, real-estate]",0
KirinyetBrian,Atlantis-Search-Group,,https://github.com/KirinyetBrian/Atlantis-Search-Group,https://api.github.com/repos/Atlantis-Search-Group/KirinyetBrian,"Have you ever gone through piles of resumes, called people for interviews and spent time, money and effort on candidates that just didn‚Äôt fit the portfolio that you needed? The answer is a Search Firm that exclusively specializes in the Structural Design industry, and that can identify talented candidates that fit your firm‚Äôs requirements and specifications. We attract and identify a range of talented industry professionals that match a variety of job descriptions within the Structural Design industry  We‚Äôve built our business on adding value for our clients far beyond the traditional, transactional hiring process. We accomplish this by providing market feedback and networking activities. We combine vigorous analysis, interviewing and candidate profiling with a partnership-based approach aimed at understanding a business‚Äôs needs and culture, and the position to be filled. . We have a proven track record of fulfilling roles from Designer to mid- and senior management positions, using our exclusive industry research capabilities and years of experience.","<p align=""center""><a href=""www.atlantissearchgroup.com"" target=""_blank""><img src=""https://github.com/KirinyetBrian/Atlantis-Search-Group/blob/main/public/img/logo-removebg-preview.png"" width=""400""></a></p>



## About Atlantis Search Group

Have you ever gone through piles of resumes, called people for interviews and spent time, money and effort on candidates that just didn‚Äôt fit the portfolio that you needed? The answer is a Search Firm that exclusively specializes in the Structural Design industry, and that can identify talented candidates that fit your firm‚Äôs requirements and specifications. We attract and identify a range of talented industry professionals that match a variety of job descriptions within the Structural Design industry

We‚Äôve built our business on adding value for our clients far beyond the traditional, transactional hiring process. We accomplish this by providing market feedback and networking activities. We combine vigorous analysis, interviewing and candidate profiling with a partnership-based approach aimed at understanding a business‚Äôs needs and culture, and the position to be filled. . We have a proven track record of fulfilling roles from Designer to mid- and senior management positions, using our exclusive industry research capabilities and years of experience.

## CANDIDATES:

When you contact our consultants and recruiters, you will experience our high level of professionalism that is matched with our desire to see you succeed in your job search.
You are recognize

You will experience an individualized approach at a Atlantis Search Group

Advisers who listen to you and understand the role you are seeking
A wide range of positions available on a casual or permanent basis;
We are involved in the hiring process long after your hire. We stay in contact with you to ensure a smooth transition long after the hiring process is complete.


## CONTACT US:

 USA +1 703-537-5081
Suite 101-22587 Armstrong Terrace
Ashburn VA 20148

 United Kingdom +44 113 328 0567
40 West Grange Rd.
Leeds, West Yorkshire
LS10 3AW

 Canada + 1 703-537-5081
106-12 Elm Grove Ave
Toronto ON
M6K 2J1",0,0,1,0,real-estate,"[construction-company, real-estate, structural-engineering]",0
MathysGoncalves,DataViz_Project,,https://github.com/MathysGoncalves/DataViz_Project,https://api.github.com/repos/DataViz_Project/MathysGoncalves,Data Visualisation course - M1BDIA at Efrei Paris ,"# DataViz Project - Mathys Goncalves M1BDIA

## Before...

I invite you to download this project locally to be able to use the prediction functionality by running the ""Regression.ipynb"" and using the comments relating to predictions in ""Project.py"". 

## Objectif

The objective of this project is to create a Streamlit application on the open data ""Demandes de valeurs foncieres"" obtained on the government site.

The visualizations used in this project allow the user to quickly obtain all the essential information about this dataset.

The ability to search on the ID is offered to the user.

The strong point of this project is the possibility of making a prediction according to certain criteria to obtain the land value. The model used is the one coded in ""regression.ipynb"" which is an ExtraTrees. 

The project is NOT focused on Machine Learning so the model is NOT accurate!


",0,0,1,0,real-estate,"[python, real-estate, streamlit]",0
jorgeabrahan,inmozuniga,,https://github.com/jorgeabrahan/inmozuniga,https://api.github.com/repos/inmozuniga/jorgeabrahan,"Have you ever wanted to easily find the right house in the right place and that fits your budget? This real estate agency website is what you're looking for (if you live in Honduras); It was built in using JavaScript, Firebase, REST APIs, and other interesting technologies such as Cookies, Google Analytics and Intersection Observer","<a name=""readme-top""></a>

# üìó Table of Contents

- [üìó Table of Contents](#-table-of-contents)
- [üìñ hello-react-front-end ](#-metrics-)
  - [üõ† Built With ](#-built-with-)
    - [Tech Stack ](#tech-stack-)
    - [Key Features ](#key-features-)
  - [üöÄ Live Demo ](#-live-demo-)
  - [üíª Getting Started ](#-getting-started-)
    - [Prerequisites](#prerequisites)
    - [Setup](#setup)
    - [Install](#install)
    - [Usage](#usage)
    - [Run tests](#run-tests)
    - [Deployment](#deployment)
  - [üë• Authors ](#-authors-)
  - [üî≠ Future Features ](#-future-features-)
  - [ü§ù Contributing ](#-contributing-)
  - [‚≠êÔ∏è Show your support ](#Ô∏è-show-your-support-)
  - [üôè Acknowledgments ](#-acknowledgments-)
  - [‚ùì FAQ ](#-faq-)
  - [üìù License ](#-license-)

# üìñ SuperHeroes <a name=""about-project""></a>

Website developed for ""Inmobiliaria Z√∫niga y Asoc."" a real state agency, integrating analytics, cookies (for storing the user preferences), and politics. 
I implement tools from Firebase like hosting, storage, and firestore database. I built an appointment scheduling tool and a tool for making quotes. The quotes tool allows the user to know which projects and properties can buy just by entering his average salary.

IntersectionObserver API was used to set the menu bar size depending on the scroll of the user because adding the 'scroll' event listener to the window consumes too much resources.
Cookies were used to store user preferences related to the webpage interface. 

As my first big project for a company, I focused on improving the loading time and SEO. I optimized the code as much as possible and minified every document to improve performance.

Tests running
![tests running](./repo_images/tests-running.png)

## üõ† Built With <a name=""built-with""></a>

### Tech Stack <a name=""tech-stack""></a>

<details>
  <summary>Client</summary>
  <ul>
    <li><a href=""https://www.w3schools.com/html/"">html</a></li>
    <li><a href=""https://www.w3schools.com/css/"">css</a></li>
    <li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview"">JavaScript/ES6</a></li>
    <li><a href=""https://firebase.google.com/docs/auth"">Firebase authentication</a></li>
  </ul>
</details>

<details>
  <summary>Server</summary>
  <ul>
    <li><a href=""#"">N/A</a></li>
  </ul>
</details>

<details>
  <summary>Database</summary>
  <ul>
    <li><a href=""https://firebase.google.com/docs/firestore"">Firebase firestore</a></li>
  </ul>
</details>

### Key Features <a name=""key-features""></a>

- **Public and private routes**
- **Mock of routes authentication**
- **Preserve last visited page when the user logs out**

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## üöÄ Live Demo <a name=""live-demo""></a>

[https://superheroes-1ut5.onrender.com/](https://superheroes-1ut5.onrender.com/)

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## üíª Getting Started <a name=""getting-started""></a>

To get a local copy up and running, follow these steps.

### Prerequisites

In order to run this project you need:

- Git SCM
- Visual Studio Code
- Live Server extension

### Setup

Clone this repository to your desired folder:

```
git clone https://github.com/jorgeabrahan/inmozuniga.git
```

Or download the ZIP folder.

### Install

Once you've cloned the repository simply run:

```
cd inmozuniga
npm i
```

And if you want to analyze the code you can run:

```
code .
```

To open the project in VScode

### Usage

To run the project, if you are on the hello-react-front-end folder path on your terminal you can execute the following command:

```
npm start
```

### Run tests

To run tests:

```
npm run test
```

### Deployment

```
npm run build
```

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## üë• Authors <a name=""authors""></a>

üë§ **Jorge Abrahan**

- GitHub: [@jorgeabrahan](https://github.com/jorgeabrahan)
- LinkedIn: [Jorge Abrahan](https://www.linkedin.com/in/jorge-siguenza/?locale=en_US)

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## üî≠ Future Features <a name=""future-features""></a>

- [ ] **Improve UI and UX experience**

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## ü§ù Contributing <a name=""contributing""></a>

Contributions, issues, and feature requests are welcome!

Feel free to check the [issues page](../../issues/).

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## ‚≠êÔ∏è Show your support <a name=""support""></a>

If you like this project you can just cheer me up with a comment üôÇ!

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## üôè Acknowledgments <a name=""acknowledgements""></a>

No acknowledgments are needed so far!

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## ‚ùì FAQ <a name=""faq""></a>

- **What is this project's main purpose?**

  - To create a useful website for customers in San Pedro Sula, Honduras to search for their dream house easily that fits their budget and without having to deal with an agent, at least not at first glance. Is basically for those who prefer navigating through the internet to find whatever they want.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## üìù License <a name=""license""></a>

This project is [MIT](./LICENSE) licensed.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>
",10,10,1,0,real-estate-website,"[house, house-prices, real-estate-agency, real-estate-website, rent, sale]",0
Muhlex,notiflat,,https://github.com/Muhlex/notiflat,https://api.github.com/repos/notiflat/Muhlex,Get notified of new real estate advertisements.,"<img src=""https://user-images.githubusercontent.com/21311428/194729516-d0bf84dd-7300-49fc-b8a2-3239e82131cc.png"" alt=""Example Telegram notification"" align=""right"">

# Notiflat

This small Node.js tool written in TypeScript allows users to receive instant notifications (currently Telegram only) for new real estate listings on online platforms (currently German ""eBay Kleinanzeigen"" and ""WG-Gesucht.de"").

## Usage
- Use Node.js version 16 or above
- Set your configuration options in `src/config.json`
	- Provide a Telegram bot HTTP token and chat IDs to send the notifications to (https://core.telegram.org/bots#how-do-i-create-a-bot). When not providing Telegram data, only unformatted output will be sent to console.
	- Provide search query URLs (the address of the search results page) for the services and search filters you want to be notified of. Make sure they are sorted by newest listings first. Examples are already setup.
	- Use the `detailed` option to allow an extra HTTP request to fetch extended data of a listing.
- Start the tool:
```shell
npm install
npm run start
```
- While the script is running, notifications will be sent to the specified Telegram chats.
",0,0,1,0,real-estate,"[notifications, real-estate, scraping]",0
AlaaNabil98,Scrape_Property_Data,,https://github.com/AlaaNabil98/Scrape_Property_Data,https://api.github.com/repos/Scrape_Property_Data/AlaaNabil98,Scraping Daft.ie Real Estate Property Data,,0,0,1,0,real-estate-website,"[daft, pandas, python, real-estate-website, scraping-python, scraping-websites, selenuim, webdriver]",0
kishibe-rohan,abode,,https://github.com/kishibe-rohan/abode,https://api.github.com/repos/abode/kishibe-rohan,NextJS real estate site with filtering and other API features ,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",0,0,1,0,real-estate,"[api, nextjs, real-estate]",0
lyesds,challenge-api-deployment,,https://github.com/lyesds/challenge-api-deployment,https://api.github.com/repos/challenge-api-deployment/lyesds,API returning the estimated price of a property in Belgium using AI/ML.,"## API to get the estimated price of a property in Belgium


#### Welcome
Welcome to my API that will return the estimated price of a property!

Please visit https://challenge-api-lyes.herokuapp.com/predict to send your *own* data describing a real estate property (location, number of rooms, area, ...) and receive back an
estimate of its price in euros.

Your data will be processed with a state-of-the-art machine learning model (https://github.com/Misterkadrix/challenge-regression) trained on real world data coming from Immoweb.com.

Please see below for the input data to submit. Contact me if you need help.

#### Available routes

Two routes are available:
- A route at `/` that accept a GET request and returns ""alive"" if the server is alive.
- A route at `/predict` that accept:
  - GET request returning a short description of the goal and the format.
  - POST request that receives the data of a property in JSON format.

#### Accepted format for the POST request

```
{
  ""0"": {
    ""location"": int,
    ""type"": str ""APARTMENT"" | ""HOUSE"",
    ""area"": int,
    ""room_number"": int,
    ""kitchen_equipped"": bool 0 | 1,
    ""furnished"": bool 0 | 1,
    ""garden"": bool 0 | 1,
    ""garden_area"": int,
    ""terrace"": bool 0 | 1,
    ""terrace_area"": int,
    ""facade_count"": int 1 | 2 | 3 | 4,
    ""swimming_pool"": bool 0 | 1,
    ""fireplace"": bool 0 | 1,
    ""land_surface"": int,
    ""building_condition"": ""AS_NEW"" | ""GOOD"" | ""TO RENOVATE"" | ""JUST RENOVATED"" | ""TO_BE_DONE_UP"" | ""TO_RESTORE""
  }
}
```
",0,0,1,0,real-estate,"[ai, api, belgium, immoweb, machine-learning, real-estate, regression]",0
benhammondmusic,littlecabin,,https://github.com/benhammondmusic/littlecabin,https://api.github.com/repos/littlecabin/benhammondmusic,Securely share your family's get-away and memories. Fullstack Python App with Django,"# [Little Cabin App](https://littlecabin.herokuapp.com)

![Securely share your family's get-away and memories](little-cabin-meta.png)

### Little Cabin is a single web app that provides multiple management tools such as:

- Shared Group Calendar
- Private Social Media Network
- Collaborative To-Do List
- Info Center

## Project Planning

My initial planning started by writing out my user stories, and conceptually working through all of the actions I personally had wished I could do in an app to help manage our family's camp.

_As A User (Not Logged In) I Want To:_

- View information about the app itself, and understand why I would want to make an account for an existing managed property, or use the app for my own property
- View app in a variety of themes (dark, light, eventually forest, beach, mountain, etc)

_As An Authorized User I Want To:_

**Account**

- Register a new account, and be automatically pre-approved based on an admin ""whitelist""
- Log in to my existing account, using the email address I registered with
- Log out of an account
- View the current weather conditions at my family property

**Postcards**

- View existing postcards, with the most recent at the top
- Create a new postcard (greeting and message)
- Upload a photo to my postcard
- Delete one of my existing postcards
- Edit one of my existing postcards

**Calendar**

- See existing property schedule as list
- See integrated Google Calendar to allow syncing to personal calendar
- Offer to swap one of my weeks for another family's week

**Requests**

- Add a request
- Mark a request as completed
- Hide completed tasks
- See completion progress of my requests and all requests in the last year

**Info**

- View emergency, legal, and other information about the property
- View nearby business info
- View my family tree

**UI/UX**

- Report a bug to the property admin
- View app on a variety of devices responsively

**Stretch Goals**

- Log in using Facebook, Google, etc
- Signup for notifications (text, email) when actions occur such as a request for one of my weeks is made, or a family member reacts to one of my postcards
- Sort the businesses by family recommendations, dynamically load via API
- Recommend a business on the list
- Upload a photo for my leaf of the tree
- ""Agree"" with an existing request to prioritize it
- Offer one of my weeks up for sale
- Request to purchase another family's week
- Add an emoji reaction to someone's post

### Structure

After the stories were in place, I categorized those stories, leaving me with the general navigation structure of the entire site and its pages. The Home page (not logged in) would display info mainly about Little Cabin, the app. All other pages would be private and only available if logged in; those would display and manipulate information about the property itself.

### Open Access Pages (Not Logged In / Unauthorized Users)

- Home
  - About (Public info about Little Cabin App)
- Login
- Register

### Authorized Access Pages

- Postcards
- Calendar
- Requests
- App Info

### Wireframes

On [Chuck](https://github.com/chuckchoiboi)'s recommendation, I used [Mockflow](https://mockflow.com/) to quickly and easily sketch some initial wireframes for these main page views.

![Wireframe Mockup Images](wireframes.png)

### Pitch Deck

I then used Google Slides to create a [pitch deck](https://docs.google.com/presentation/d/1wABAwaZubhI4hExwqxWG6zBW7y5OyL_w92NW8NEWQnM/edit#slide=id.gd480e80180_0_52) to present to my stakeholders, and receive their feedback on project scope, tech and design pattern suggestions, and field initial questions and concerns.

## Building

I intentionally started this project from the _user_ perspective; getting an attractive frontend built as quickly as possible (using Bootstrap) to help make the project ""real"" and inspire ideas for features at an early stage. In previous large projects I had started by building backend instead (API, and databases models), however using a new framework (Django) and new database (PostgreSQL) for this project meant it would be easiest to have the schema conceptually as complete as possible before starting to actually write to the database.

### ERD

To assist in developing the data models, I sketched an ERD (entity relationship diagram) to help visualize the way the various objects would interact. This working sketch also made it simple to conceptualize new features, and adapt the models' properties before committing them to database tables.

![Entity Relationship Diagram ERD](erd.svg)

### Style Guide

Since I was creating this project on my own, the function of my style guide was more to help me keep track of design and copy ideas that I liked, rather than to strictly guide team members on a unified style. The choices certainly evolved and shifted as the app expanded, but updating the guide as the ""source of truth"" was essential to the workflow, even when working alone. It saves time to be able to copy/paste HEX color codes, font styles, terminology and slogans, etc, and reduces executive function required to make all of those tiny decisions over and over.

### Colors:

![Hex Colors](colors.png)

Light Mode (default)

- white: #ffffff
- flash: #ffc107
- grey: #e1d7bc
- dark: #2c333a
- color: #29461a
- wood: #5e0b15

[data-theme='dark']

- white: #0c1445
- flash: #5c54a4
- grey: #f8e48b
- dark: #ffffff
- color: #4c408e
- wood: #6ab0f1

### Fonts:

- Main Text: Montserrat
- Accent Headings: Raleway

### Terminology

- **Property**: the family location and structure being managed. Might refer to a ""camp"", ""cabin"", ""lake house"", ""vacation home"", ""cottage"", or other regional terms
- **Request**: a ToDo-style item including maintenance requests, etc
- **Week**: the unit of time a particular user or users has exclusive access to the property
- **Postcard**: a social media post including a written note and an optional photograph

### Copy

- **Title**: Little Cabin App
- **Subtitle**: Securely share your family get-away
- **Tagline**: Make Memories, Not Spreadsheets
- **Summary**: Little Cabin is a single web app that provides multiple management tools such as:
  - A shared schedule with permissions-based week swapping and Google Calendar integration
  - A micro social media network allowing family members to share virtual ""postcards"" (short notes with accompanying photos uploaded from their device)
  - A collaborative list collecting requests from members on maintenance items, purchase ideas, and other helpful suggestions. Members can edit or complete anyone's request, hide completed tasks, and view real-time reports on task completion rates
  - A knowledge repository with helpful information including contact info for local businesses and emergency protocols, historical information about the property, a family tree to see members, and (coming soon) legal trust information, weekly chores, dues schedule, and more

## Tech Used

- Python
- Django
- HTML / CSS / Bootstrap
- PostgreSQL
- Amazon AWS
- Google Calendar API
- Google Cloud Service Account
- Open Weather API
- Random User API
- Heroku

### Django

I followed [my own blog post](https://blog.benhammond.tech/django-getting-started) to get a ""Hello World"" Django application running locally, and then again followed my post [part 2 to deploy to Heroku](https://blog.benhammond.tech/deploying-django-to-heroku). I wanted the simplest possible app deployed early, so that eventual troubleshooting would be easier to pinpoint.

## Accessibility

Following the ethos of ""accessibility is not a feature"", I am making an effort to improve my projects by making and keeping them accessible from the very start. I have _much_ to learn in this space, but to start I frequently run the Lighthouse report tool in Chrome Dev Tools. This is not a complete testing, but it helps with the lowest hanging fruit:

- including a brief, descriptive `alt` attribute to add alternate text to your `<img>` tags. For _decorative_ images (those which are simply aesthetic or redundant based on adjacent text) it is recommended to set `alt=""""` so that screen readers will know to skip it
- setting an `aria-label` attribute on any links or buttons that don't include descriptive text. In my case, the template's hamburger menu was an svg file, so it made sense to also label that image as `aria-hidden=""true""` to let the screen reader know it didn't need to interpret that graphic
- organizing your headings hierarchy (`<h1>`-`<h6>`); in general there should only by one `<h1>`, and all subheadings should be in order (e.g. don't skip `<h3>` by going directly from an `<h2>` to an `<h4>`)
- ensuring the color contrast every bit of text and its background is high enough to be read

## Testing

This project was my first experience integrating unit testing. I utilized Django's existing `test.py` file and created class-based tests which extend the `TestCase` class. This allowed me to use methods such as `assertEquals`, `assertGreater`, `assertLess`, and `assertIn` to test the returned values from some of my more ""pure"" functions that were handling the business logic. The first places I've added tests were in functions that access external API services including fetching weather info and generating random user information as part of my demo feature. Adding tests is always important, but is particularly so for 3rd-party data such as an API call where one isn't in control of the response object and the structure or typing could change without warning.

It became very clear in this process how important it is to keep your functions as small and focused as possible; in some cases it's difficult to add tests because my functions are too sprawling and touch too many parts of the code at once. My goal going forward will be to unitize the functions and write the tests alongside the functions, to keep ideas clear and extensible.

## Problems Solved

> This Section will be formatted and split off into multiple blog posts and tweets in hopes of savings fellow devs and future me from making the same mistakes

- Building the project from the user's perspective, i.e. getting a working frontend displayed as quickly as possible. integrating an existing design into an extensible Django base template
- integrating css variables (custom properties) with existing design to make future changes as simple as possible
- extending Django's `UserCreationForm`; requiring `first_name`, `last_name`, and `email`, and removing the field for `username`; actually presented `username` as **Email** to user for all account related services (Register, Login, etc), since all the solutions recommended creating a custom user model _before starting the project_..... too late.
- custom pagination (view one year at a time). sending value out from form btn into the views. saving fetched data in big chunk into db, and reading from there unless data is stale then refetching
- [Extending UserCreationForm](https://dev.to/yahaya_hk/usercreation-form-with-multiple-fields-in-django-ek9)
- use template filters to calculate previous and subsequent years for buttons and post request values. conditionally rendering ""previous year"" button to deny viewing past years.
- different colors of icon/favicon/logo
- Manually pivoting a table lookup; each Postcard contained an owner username, but I needed to get `first_name` and `last_name`; in the `view` method I looped through the postcards, and then built a context dictionary which contained a list of Postcards bundled with their User authors. This was I was able to easily access the Postcard info in the template using `{{ card.author.first_name }}`
- naming collisions: bug with view method named ""postcards"" and list of objects from the database ""postcards"". Also, named my to-do items ""Request"" objects, which is confusing with the built in request keyword from Django's HTTP request/response framework
- adding checkbox _inside_ the to-do item; required using `<button>` instead of `<input />` to place the svg graphic inside each generated form.
- todo list: conditional rendering of ""hide completed"" button; calculating completion rates in the view method and then sending through to display as progress bars.
- learned that Heroku config vars are ALWAYS strings, meaning when I had set `DEBUG` to `False` for production, it was actually reading the string `""False""` which it was evaluating as `True`. I was able to fix this by simply setting a different config var for development and production and then assign `DEBUG` as needed. This was resulting in a 500 Error; which took significant debugging to fix. First, followed [this stack overflow](https://stackoverflow.com/questions/52311724/500-error-when-debug-false-with-heroku-and-django) and set up detailed logging to discover the real issue that was causing the 500 error. It turns out it was a `ValueError: Missing staticfiles manifest entry for` one of my images. To remedy this error, I went into my terminal with the virtual environment activated, and ran `python3 manage.py collectstatic`. Still not entirely sure what this did, other than make copies of almost all of the images I had used in the project which increased my deploy and push times. But it basically hooked everything up image-wise for Django, and fixed the 500 error.
- Conditionally render the ""edit"" and ""delete"" buttons as accessible icons; even though the two variables were displaying the same, the current username was returning `False` when compared against the postcard owner. I was able to fix this by using a Django template tag to convert them to the same type of string `{% if card.postcard.owner|stringformat:""s"" == user.username|stringformat:""s"" %}`
- Needed to extend the builtin DeleteView class, and also to my detail function (for create and update) to lookup the Photo(s) that contained the currently detailed Postcard. This allowed all of these views to display the postcard along with its photos, even though the relationship is 1 POSTCARD->MANY PHOTOS, and therefor it's the Photo class that contains a Postcard foreign key. Had to overwrite the `get_context_data()` method to do the lookup, and then bundle those Photos into the returned `context`.
- Decided not to limit CRUD on the shared to do requests; this way anyone is able to edit an existing request (and fix a spelling error, or add details), complete a request, and then hide all complete requests. This only works since the view is for screened, authorized users. I decided to skip the pencil icon and instead make clicking the text of the request item the ""edit"" function, and then the complete/incomplete would be handled by the checkbox. I have some concerns that the way I've designed it might be less accessible than if I had relied on the browsers built-in check box.
- Make the postcards feel more ""real world"" by adding a tiny bit of random tilt to their display, and having them straighten and expand when hovering with mouse.
- Limit access to the app to users who have been approved; to do this I used the Group property of Django's built in User model. This creates a many-to-many relationship, and allows filter() and get() requests to the database to delegate functionality based on the group. I created a ""member"" group who's users have full create/read/update/destroy (CRUD) access to postcards, requests and weeks, and an ""admin"" group who's users will see and approve new member requests. Specifically, the admin `home` view queries the database for all users expect those who are already in the ""member"" group: `User.objects.all().exclude(groups__name='member')`, and then displays that list with associated ""approve"" buttons:
  ```django
  {% for pending_user in pending_users %}
    <li>
      <span>{{pending_user.first_name|title}} {{pending_user.last_name|title}} ({{pending_user.username}})</span>
      <a href=""{% url 'approve_user' pending_user.id %}"">Approve</a>
    </li>
  {% endfor %}
  ```
- implementing Swap objects (pending offers to swap Week objects between Groups, initiated and approved by Users). LOTS OF STUFF. this was hard
- error after adding ""created""; used default value of `1` which didn't make sense, and wasn't able to run `migrate` even after dropping and recreating the db. Had to manually go into the migrations folder and alter the value of `default=1` to `default=django.utils.timezone.now`.
- setting up automatic creation of `owner_group`s in the db using a data migration.
- ordering my groups, decided to append a number so they were sortable
- avoiding name collisions; used `import calendar as calendar_lib` since I was already using `calendar` as a view method
- displaying a dropdown `<select>` with every pending user displayed to an admin; admin can then choose the correct owner_group and approve, or deny the user and delete the uncredentialed user. This was also complex; mainly in deciding between using Django's built-in form handling, and digging through obscure and tangential examples. I decided to implement it myself, changing my approve button from being an `<a>` to being a `<button>` inside of a `<form`>, and then adding a hidden `<input>` to contain the `user.id` . I also placed the `<select>` inside the same form, and then made `home/` intercept post requests and process the incoming data by finding the User, finding the Group, then adding the user to that group.
- ""Approve"" buttons stay disabled until the admin selects a Group; I
- calculating an end date required adding a dateTime delta of 7 days, and then rendering that dateTime as a string to be sent to Google API
- aligning automatically generated forms in Django; required displaying them as a table instead of `<p>` elements, and then adding my bootstrap classes to the table surrounding the template tag.
- adding a ""Demo Login"" button to allow people quickly just checking out the app to have a useable account and populated data from other auto-generated users. Not every person is going to create an account just to check out your little project, so making it as easy as possible to see what's behind the login screen
- adding a theme switcher; I adapted a light/dark mode tutorial to just adjust the colors. Eventually it would be great to have a lake theme, mountain theme, beach theme, and other relevant vacation vibes. The theme switcher relies on CSS variables which I was already using, so it would pretty quick to set up. It also records the user's preference in localstorage, so the theme persists between sessions. I learned several things throughout this process, including the benefits of naming your variables based on their role or context, rather than their general color. Also, learned how to place bootstrap color utility classes `bg-dark` on containing `<div>`s to cascade that color class to all the contained text elements(`<p>`, `<a>`, etc) rather than adding classes to every element
- I wanted a visual representation of the family, not only for the historical and social aspect, but also to represent to people viewing the app exactly how complicated managing so many user in sub-families can be. If I were building in React I would have created a dynamic, component based family tree, and I still may. But for now, I decided to just create a static image and to use the tree as an exercise in learning Figma, which I have recently been exploring.
- I wanted to let members view the current weather conditions at the property; this turned out to be significantly more involved than anticipated. I first need to make a call to the weather api, which was straightforward, particularly compared to the Google Calendar API. Next I needed a way of displaying the info, and settled on the side nav menu since it would be available on every page. However, the API is rate-limited and there would be no need to recall the API every time the page loaded, but instead every several minutes. To accomplish this, I created a model `WeatherReport` which stored the temp, conditions, and timestamp. Then, whenever the page is reloaded, it checked the freshness of the weather report in the database and repings the API as needed. Also significantly tricky was sending variable data (the weather conditions) to my `base.html` template which was providing my nav and footer for every page. To do this, I created another custom template tag (similar to how I was able to add anchor links partway down my home page). This allowed me to run the logic needed in a python file, and then call and retrieve the string answer in my template using `{% current_weather %}
- template I used has a slide-in side menu for smaller screen sizes, and by default the only way to close that menu (without clicking an item) is a tiny little ""x"" in the corner. Modern UX seems to trend towards clicking ""off the popup"" will work to close a menu, so I was able to understand how the template's JavaScript was working, and apply the same ` closeSidenavFunc()` in an event listener attached to the grayed out background that was covering the rest of the screen already.
- [Connecting Google Cal API and Django on Heroku](https://blog.benhammond.tech/connecting-google-cal-api-and-django)

## Tools and Libraries

- [Font Awesome](https://fontawesome.com/) - Icons
- [Metatags.io](https://metatags.io/) - Meta Tags
- [Mockflow](https://mockflow.com/) - Wireframes
- [Figma](https://www.figma.com/) - Graphics
- [Favicon.io](https://favicon.io/) - Favicon
- https://www.remove.bg/
- [Random User API](https://randomuser.me/api/)
- [Open Weather API](https://openweathermap.org/)

## Resources

- [PngItem](https://www.pngitem.com/) - Icon
- Unsplash: [Cabin Photo](https://unsplash.com/@olivier_twwli?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText), [Firewood Photo](https://unsplash.com/@markuswinkler?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText), [Watering Can Photo](https://unsplash.com/photos/uWfYjWM8oGM?utm_source=unsplash&utm_medium=referral&utm_content=creditShareLink)
- http://clipart-library.com/
- [Koka](https://angrystudio.com/themes/koka-free-bootstrap-5-website-template/) - Bootstrap Template
- [Route Back To Section IDs](https://engineertodeveloper.com/a-better-way-to-route-back-to-a-section-ids-in-django/) - Blog Post
- [Extending UserCreationForm](https://dev.to/yahaya_hk/usercreation-form-with-multiple-fields-in-django-ek9) - Blog Post
- [Quickstart Google Calendar API - Python](https://developers.google.com/calendar/quickstart/python) - Guide
- [Accessibility for Hamburger Menu](https://medium.com/@linlinghao/accessibility-for-hamburger-menu-a37fa9617a89) - Blog Post
- [Adding Google Cloud Credentials To Heroku](https://devdojo.com/bryanborge/adding-google-cloud-credentials-to-heroku) Blog Post
- Stack Overflow: [500 Error When Debug False With Heroku And Django](https://stackoverflow.com/questions/52311724/500-error-when-debug-false-with-heroku-and-django), [Getting last Monday of a month](https://stackoverflow.com/questions/12796389/python-get-last-monday-of-july-2010/12796542), [Using Service Account with Google API](https://stackoverflow.com/questions/49480930/django-server-rw-access-to-self-owned-google-calendar)
- [Intro to Google Developer Service Account](https://www.daimto.com/google-developer-console-service-account/) - Blog Post
- [Google Cal Integration Django](https://stackoverflow.com/questions/37754999/google-calendar-integration-with-django)
- [Light/Dark Mode with CSS Variables](https://dev.to/ananyaneogi/create-a-dark-light-mode-switch-with-css-variables-34l8) - Blog Post

## Blog Posts on [blog.benhammond.tech](https://blog.benhammond.tech)

- [Connecting Google Cal API and Django on Heroku](https://blog.benhammond.tech/connecting-google-cal-api-and-django)

## Repo

- [GitHub](https://github.com/benhammondmusic/littlecabin/)

## Deployed Website

- [littlecabin.herokuapp.com](https://littlecabin.herokuapp.com)
",1,1,1,0,property-management,"[django, property-management, social-media, summer-camp, vacation-management]",0
SamPetering,city-data-crawler,,https://github.com/SamPetering/city-data-crawler,https://api.github.com/repos/city-data-crawler/SamPetering,Tool for aggregating REI data from city-data.com,"# city-data-crawler
Tool for aggregating REI data from city-data.com

`git clone https://github.com/SamPetering/city-data-crawler.git` to clone the repository

`cd city-data-crawler` to enter the directory

`yarn` to install dependencies

configuration:
- uncomment the states you want to crawl in `states.ts`
- set the `POPULATION_LIMIT` constant in `index.ts` to whatever your personal threshold is
- save changes

`yarn dev` to run

`ctrl+c` once the script has completed

the results will be written to `./results/`
",0,0,1,0,real-estate,"[city-data, crawler, real-estate]",0
Midle68,s_petersburg_real_estate,,https://github.com/Midle68/s_petersburg_real_estate,https://api.github.com/repos/s_petersburg_real_estate/Midle68,Analysis of the Saint-Petersburg real estate market,"# –ü—Ä–æ–µ–∫—Ç ""–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∫–≤–∞—Ä—Ç–∏—Ä""

## –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ø–Ω–¥–µ–∫—Å –ü—Ä–∞–∫—Ç–∏–∫—É–º–∞ - –∞—Ä—Ö–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç. –ù—É–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. 
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–ª–∏—è—é—â—É—é –Ω–∞ —Ü–µ–Ω—É. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É: –æ–Ω–∞ –æ—Ç—Å–ª–µ–¥–∏—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å. 

## –ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã:

1. [–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö](#import)
2. [–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö](#preprocessing)
    - ['cityCenters_km'](#cityCenters_km)
    - ['ceiling_height'](#ceiling_height)
    - ['living_area'](#living_area)
    - ['is_apartment'](#is_apartment)
    - ['kitchen_area'](#kitchen_area)
    - ['floors_total'](#floors_total)
    - ['balcony'](#balcony)
    - ['locality_name'](#locality_name)
    - ['days_exposition'](#days_exposition)
    - ['first_day_exposition'](#first_day_exposition)
    - ['parks_around3000'](#parks_around3000)
    - ['ponds_around3000'](#ponds_around3000)
    - ['last_price'](#last_price)
    - ['rooms'](#rooms)
3. [Feature Engineering](#feature_engineering)
4. [–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö](#eda)
5. [–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è](#research)
    - [–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ 1](#research_one)
    - [–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ 2](#research_two)
    - [–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ 3](#research_three)
6. [–û–±—â–∏–π –≤—ã–≤–æ–¥](#conclusion)

## –†–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:

1) –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö;
2) –ü—Ä–æ–≤–µ–¥–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö;
3) –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ;
4) –û–±–æ–±—â–µ–Ω—ã –≤—ã–≤–æ–¥—ã.

## –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:

`matplotlib`, `pandas`
",0,0,1,0,real-estate,"[data-science, eda, exploratory-data-analysis, matplotlib, pandas, real-estate]",0
itsrobli,depreciation-rate-classifier,,https://github.com/itsrobli/depreciation-rate-classifier,https://api.github.com/repos/depreciation-rate-classifier/itsrobli,This program uses machine learning to predict the tax depreciation rate and category when given an arbitrary text description of an asset/capital expenditure (capex).,"# Automatic tax depreciation rate tagger/classifier

This program uses machine learning to predict the tax depreciation rate and category when given an arbitrary text description of an asset/capital expenditure (capex).

## Goal

The goal is to achieve over 90% prediction accuracy in all scenarios.

[Currently](#validation-and-accuracy), it can achieve:
- 80%+ accuracy when text is similar in style to the training data regardless of small spelling errors, ordering of words, language variations (e.g. -ed, -ing, -s, etc).
- Only around 50% or less accuracy when the text is of a very different style to the training data.

Please feel free to contribute suggests, corrections, and training data.


# Problem to be solved - a brief background

In the Real Estate Investment Trust (REIT / Property Funds) industry, real estate assets are held for investment purposes to provide income distributions to investors. A feature of Australian REITs for investors are non-taxable cash distributions which are primarily driven by tax deductible/depreciable capex.

Capex can result in various tax outcomes depending on the jurisdiction. In Australia, generally, depending on the nature of the cost, can be categorised and treated as: 

1. Immediately tax deductible; 
2. Depreciated as a tax asset over its effective life at [various](https://www.ato.gov.au/law/view/document?LocID=%22TXR%2FTR20184%2FNAT%2FATO%2FatTABLEB%22&PiT=99991231235958#TABLEB) depreciation rates; 
3. Be eligible for a building allowance deduction over 25 or 40 years; or
4. Added to the cost base of the asset to reduce the capital gain upon sale of the property.

An expert can be engaged to create a tax depreciation schedule (aka QS report) that breaks down costs into these categories. Industry practice is that this is usually done for high-value capex e.g. a property acquisition or major development project. However, a lot of the day-to-day capex is high-volume and low-value. This does not make it cost effective to outsource to an expert. As such, most businesses are classifying these items manually based on accounting system descriptions or invoices (or not at all and missing out on tax deductions). 

These manual processes, by nature of being high-volume and based on arbitrary descriptions, are time consuming; and by nature of being low-value, do not result in material errors if an item is misclassified. These attributes make this problem ideal for machine learning to solve.


# How does this program work?

While doing some machine learning exercises, particularly [this one](https://joaorafaelm.github.io/blog/text-classification-with-python), it occurred to me that this problem is essentially a text classification problem. Done manually, a person would read an arbitrary cost description from a cost report, like ""chillers for precinct A"", and then [look it up in the tables](https://www.ato.gov.au/law/view/document?DocID=TXR%2FTR20184%2FNAT%2FATO%2F00023) to find it's either 25 years or 20 years effective life depending on the type of chiller.

The machine learning model is built using training data (arbitrary text descriptions of capex) that has previously been reliably classified (tagged with a depreciation type/rate). Once the model is trained, text descriptions of capex can be fed in, and it will predict the tax attributes.

![workflow](img/ml_workflow.png)

The text is pre-processed to help the machine learning model find ""meaning"" in the text; rather than doing something more basic like string (word) matching, word length counting, etc. This means that the model can overcome small spelling mistakes, variances in ordering, and different forms of the same word (e.g. 'carpet' and 'carpeting' ""mean"" the same thing). This is vital to the usefulness of the model as it's designed to accept arbitrary text data to provide maximum flexibility in its usage. Further machine learning details [below](#some-machine-learning-details).

## Validation and accuracy

The trained model is tested by predicting results using other data with a known classification (testing data). The predicted classification is then matched against the known classifications in the testing data giving an overall accuracy %.

Using proprietary training data not included in this repo, a model was developed using 18,899 rows of training data which produced:

- 89.6% accuracy when using a random subset of the training data as testing data.
- 83.8% accuracy using K-Fold Cross Validation using 10 subsets (more thorough version of above).
- 92.3% accuracy when entirely tested against itself (artificially high).

This repo includes [generic training data](#training-data). It is developed from the Australian Tax Office [effective life tables](https://www.ato.gov.au/law/view/document?DocID=TXR/TR20184/NAT/ATO/00001) (run the `demo.py` included, and follow the instructions to run an accuracy report). It works ok for demo purposes.

I've found that using capex descriptions of a language style which is very different from the training data causes the accuracy to deteriorate rapidly. More on this [here](#further-improvements-in-the-works). As such, a model created using the included sample training data has limited flexibility in production.

## Future applications

The trained model can easily be used programmatically as part of a broader automated system. The goal is to have a workflow like:

1. Arbitrarily structured text can be fed directly into the model from the accounting system transaction descriptions, or other system/process that itemises the costs. This flexibility is the key reason for using machine learning vs another method that is more basic and reliable (but would require structured text inputs).

2. The text is classified using the machine learning model. 

3. The classification is combined with the original accounting system transaction data to generate the accounting/ERP system input file (e.g. journal entry) which would then be ingested into the tax depreciation module. 

## Further improvements in the works...

The training dataset has high reliability of having the correct classification, however, the text descriptions are of a single language style. By training the model with real world text descriptions (different styles of language) and offering feedback and corrections, the model's accuracy may be improved. 

Another thing to point out is that the model appears to bias towards classifications where there is more training data of a certain category. However, this is not necessarily a weakness. If the training data set is reflective of a business's actual depreciation register, the natural distribution of assets/capex purchased would be reflected in the predictions (e.g. it wouldn't be normal to have 1,000s of air conditioners for every 1 chair).

These issues can be seen in the accuracy reports when using K-Fold Cross Validation (validation/testing data is not used for training) resulting in low accuracy vs testing the data against itself (validation/testing data is the same as the training data) resulting in almost perfect accuracy.

I've found that using new training data (different language style, different descriptions) results in higher prediction accuracies. 

### Next iteration

My next experiment with this is to generate additional training data by finding synonym combinations and alternative expressions for the existing training data. This should overcome some of the language style issues. E.g. 'stamp duty' vs 'duty' vs 'duties' vs 'stamp' vs 'SD' vs 'stmp dty'.

Also, crowd-sourced training data can be gathered to further refine the model for real world text description. By making available a testing environment where a user can feed in their live examples from their existing, manual process, the user can manually flag and correct wrong predictions. This feedback data can be combined with the other training data for further refinement of the model. 

Ultimately, a lot of experimentation is required to see what works to achieve the [goal](#goal).

## Some machine learning details

In order to run machine learning algorithms on text based data like this, we need to transform the text into numerical values. Pre-processing this text is vital to the accuracy of the model.
 
Bag-of-words is one of the most used models for text. It essentially assigns a numerical value to words, creating a list of numbers.

Converting letters or words into numbers by e.g. counting frequencies of letters might not be enough. For example, long words or descriptions can bias the model because it is focusing on the assigned numerical value which really denotes length and not meaning.

Other problems relate to trying to extract ""meaning"" from words. Take for example the words ‚Äòcarpet‚Äô and ‚Äòcarpeting‚Äô. They would be considered different words under a strict numerical assignment. This problem can be solved with various methods e.g. we can group together the inflected forms of a word. For example, the words ‚Äòwalked‚Äô, ‚Äòwalks‚Äô and ‚Äòwalking‚Äô, can be grouped into their base form, the verb ‚Äòwalk‚Äô. Another issue worth noting is that some words despite the fact that they appear frequently, they do not really make any difference for classification because they don't change the meaning, and could even help mis-classify a text description. Words like ‚Äòa‚Äô, ‚Äòan‚Äô, ‚Äòthe‚Äô, ‚Äòto‚Äô, ‚Äòor‚Äô etc, are known as stop-words. These words can be ignored during the machine learning process.

These issues and others are dealt with during the training of the model.


# Code usage info

The code is in `src/text_classifier_deprn_rates.py`. Once the `DeprnPredictor` Class has been instantiated, call the `predict_description(user_description)` method by feeding it some text to classify. Use a loop and call this method over and over again for each text description. 

The method returns two objects being:
1. A `pandas` Series object containing the various details of the tax category predicted.
2. An ""account"" description string matching how the training data labels its categories. This is basically a made up code for each possible tax category. See `src/account_meanings.csv` for a table showing the meanings. The reason for this design is that most accounting/ERP systems use something like this behind the scenes to drive the tax depreciation module. It can be anything so long as it matches the training data.

The `DeprnPredictor` Class is just a simple wrapper around some common machine learning libraries and techniques for classifying text data. It abstracts some of the fiddlier steps like pre-processing and building the pipeline. As a trade-off some bugs can occur due to how `pickle` is handled by the underlying ML libraries.

## Training data

Included in the repo is sample training data (`src/data_training/sample_training_data.csv`) based on the Australian Tax Office [effective life tables](https://www.ato.gov.au/law/view/document?DocID=TXR/TR20184/NAT/ATO/00001). 

I would note from experience that the accuracy of the predictions is highly dependent on good training data. This sample data creates decent results if the language used is very similar to it.

The best data to use would be actual descriptions of items from a REIT's fixed asset/depreciation register and underlying accounting transaction descriptions. Unfortunately, this data is proprietary to organisations unless donated to this repo.

However, I have some [ideas](#next-iteration) to generate some data.

## Demo

See `demo.py` for an example usage of this wrapper. Sample interaction below:

```
Evaluate using user input.
""QQ"" to quit.
""CR"" to see classification report.
Otherwise...
Enter a depreciable asset description: 
landscaping
Input from user:
	 landscaping
Result:
	account: 			CGT_Cost_Base_0
	deprn rate: 		0.0% prime cost
	effective life: 	0 years effective life
	tax category: 		CGT_Cost_Base
END of Result

Enter a depreciable asset description: 
demolition
Input from user:
	 demolition
Result:
	account: 			CGT_Cost_Base_0
	deprn rate: 		0.0% prime cost
	effective life: 	0 years effective life
	tax category: 		CGT_Cost_Base
END of Result

Enter a depreciable asset description: 
alarms
Input from user:
	 alarms
Result:
	account: 			Div40_Plant_6
	deprn rate: 		16.6% prime cost
	effective life: 	6 years effective life
	tax category: 		Div40_Plant
END of Result

Enter a depreciable asset description: 
fence
Input from user:
	 fence
Result:
	account: 			Div40_Plant_20
	deprn rate: 		5.0% prime cost
	effective life: 	20 years effective life
	tax category: 		Div40_Plant
END of Result

Enter a depreciable asset description: 
chiller
Input from user:
	 chiller
Result:
	account: 			Div40_Plant_25
	deprn rate: 		4.0% prime cost
	effective life: 	25 years effective life
	tax category: 		Div40_Plant
END of Result

Enter a depreciable asset description: 
project to install chillers
Input from user:
	 project to install chillers
Result:
	account: 			Div40_Plant_25
	deprn rate: 		4.0% prime cost
	effective life: 	25 years effective life
	tax category: 		Div40_Plant
END of Result
```


# Installation

Feel free to install the components yourself. Probably easiest to install [Anaconda](https://www.anaconda.com) as it comes with everything.

#### 1. Python 3.6+

[Download](https://www.python.org).

#### 2. Download all data that NLTK uses

[NLTK](https://www.nltk.org) is a key component of pre-processing the text data.

```bash
python -m nltk.downloader all;
```

#### 3. Python libraries

This program relies on the [`pandas`](http://pandas.pydata.org) and [`scikit-learn`](https://scikit-learn.org/) libraries.
",0,0,1,0,real-estate,"[capex, machine-learning, real-estate, tax, tax-rates]",0
XoloMtzAg,HH-inmobiliaria,,https://github.com/XoloMtzAg/HH-inmobiliaria,https://api.github.com/repos/HH-inmobiliaria/XoloMtzAg,Propiedades en Guanajuato M√©xico venta y asesor√≠a,"# HH-inmobiliaria
¬°Bienvenido a nuestro negocio de bienes ra√≠ces en Guanajuato, Guanajuato, M√©xico!

En HH inmobiliaria, nos enorgullece ofrecerle una amplia gama de propiedades en una de las ciudades m√°s hermosas y pintorescas de M√©xico. Como especialistas en bienes ra√≠ces en Guanajuato, nos apasiona ayudar a nuestros clientes a encontrar su hogar perfecto o invertir en propiedades con un gran potencial de crecimiento.

Nuestro enfoque se basa en brindar un servicio personalizado y profesional a cada cliente. Ya sea que est√©s buscando una casa para vivir, un apartamento para alquilar o una oportunidad de inversi√≥n, estamos aqu√≠ para ayudarte en cada paso del proceso.

En HH inmobiliaria, entendemos la importancia de una ubicaci√≥n privilegiada. Actualmente, nos especializamos en propiedades en la ciudad de Guanajuato, una ciudad hist√≥rica y culturalmente rica, reconocida como Patrimonio de la Humanidad por la UNESCO. Desde encantadoras casas coloniales hasta modernos condominios, tenemos una amplia selecci√≥n de propiedades que se adaptar√°n a tus necesidades y preferencias.

Adem√°s de ayudarte a encontrar la propiedad perfecta, tambi√©n ofrecemos servicios para aquellos que desean vender sus propiedades en Guanajuato. Si tienes planeado vender tu casa, departamento o terreno, nuestro equipo de expertos te brindar√° asesoramiento profesional y una experiencia fluida.

Ya sea que te encuentres en M√©xico o en cualquier parte del mundo, nuestra p√°gina web te proporciona acceso a nuestra cartera de propiedades actualizada, informaci√≥n detallada y fotograf√≠as de alta calidad. Adem√°s, nuestro equipo de agentes biling√ºes est√° listo para responder a tus preguntas y brindarte asistencia en tu idioma.

En HH inmobiliaria, nuestro objetivo es superar tus expectativas y hacer de tu experiencia inmobiliaria algo positivo y gratificante. No dudes en contactarnos hoy mismo para comenzar tu viaje hacia la propiedad de tus sue√±os o para explorar oportunidades de inversi√≥n emocionantes en Guanajuato.

¬°Estamos aqu√≠ para ayudarte a hacer realidad tus metas inmobiliarias!

Espero que esta descripci√≥n te sea √∫til. Si necesitas m√°s ayuda, ¬°no dudes en preguntar!
",0,0,1,0,real-estate,"[bienes-raices, casas, guanajuato, hogar, mexico, real-estate]",0
Piyushbabhulakar12,realestate,,https://github.com/Piyushbabhulakar12/realestate,https://api.github.com/repos/realestate/Piyushbabhulakar12,Real Estate,,0,0,1,0,real-estate,[real-estate],0
propertyshelf,mls.apiclient,propertyshelf,https://github.com/propertyshelf/mls.apiclient,https://api.github.com/repos/mls.apiclient/propertyshelf,Python client for the RESTful API of the Propertyshelf MLS.,,0,0,4,0,real-estate,"[python, real-estate, rest-client]",0
DannyGlade,Real_Estate_Site,,https://github.com/DannyGlade/Real_Estate_Site,https://api.github.com/repos/Real_Estate_Site/DannyGlade,"This is a Real E-state Site Project Made with Laravel, Bootstarp, JQuery, DataTables, FacyApp. I only made it for my College Project, but if you are here that means I might have posted it online somewhere and you are here to steal it or see as refrence, but it's okay.","# Real Estate Site 
### Made By [***DannyGlade***](https://github.com/DannyGlade)
This is a Real E-state Site Project Made with Laravel, Bootstarp, JQuery, DataTables, FancyApp.
I only made it for my College Project, but if you are here that means I might have posted it online somewhere and you are here to steal it or see as refrence, but it's okay.

## What can you do in this website
- Admin can handle facilities, cities, categories, properties, Reviews, Users, Change Password & Site settings
- User can surf properties, handle their profile, Change Password & Save and review properties if logged in
- Yeah that's not much I know but I'm still making and It's a College Project so nothing Serious is gonna happen.
> Please Note!
> Beacause I am not good of a designer I have only used bootstrap, and nothing else, yet. So if you are looking for fancy site this might not be it. otherwise it looks decent enogh and funtionalities are also working... (obviously there will be some bugs)

## Dependencies
- [Composer v2.2.3^](https://getcomposer.org/download/)
- [Laravel v8.x](https://laravel.com/docs/8.x)
- [Bootstap v5.1.3](https://getbootstrap.com/docs/5.1/getting-started/introduction/)
- [Bootstrap v5.1 Examples](https://getbootstrap.com/docs/5.1/examples/) (Used Some of these as boiler plate)
- [Font Awesome](https://fontawesome.com/docs/web/setup/get-started)
- [JQuery v3.6.0](https://releases.jquery.com/)
- [DataTables v1.11.4](https://datatables.net/manual/) with [DataTables v1.11.4 Bootstap 5](https://datatables.net/examples/styling/bootstrap5.html)
- [FancyApps](https://fancyapps.com/docs/ui/installation)
  - [FancyBox](https://fancyapps.com/docs/ui/fancybox)
  - [Carousal](https://fancyapps.com/docs/ui/carousel)
- [CKEditor v4](https://ckeditor.com/docs/ckeditor4/latest/guide/index.html)
- And Familiarity with Laravel, Can't remember anything else...

## What needs to be installed...
- [Composer v2.2.3^](https://getcomposer.org/download/)
- [Git](https://git-scm.com/downloads)
- [Laravel v8.x](https://laravel.com/docs/8.x#the-laravel-installer)
- [Wamp](https://www.wampserver.com/en/) (I used Wamp you can use Similar ones)
- Can't remember anything else...

## Steps to Install
### Clone The GitHub Repo first
1. Open Cmd in folder you want to install project in...
2. Type below Command and hit enter...
```bash
git clone https://github.com/DannyGlade/Real_Estate_Site.git
```
4. Then cd into folder using below Command
```bash
cd Real_Estate_Site
```
> Note from here On, You can also use Terminal from VS Code or Your IDE...

### Install All Composer Dependencies
1. Use below command to install all dependencies then wait till all process is complete...
```bash
composer install
```

### Create a .env file
1. Duplicate *.env.example* as *.env* file
2. Fill information of your DB **username** and **password** & other info if needed...

### Create DataBase
1. Create DataBase by PhpMyadmin (provided by [Wamp](https://www.wampserver.com/en/)) or Any Other DB you use...
> Note DataBase name should be same as typed in *.env* file
### DataBase Structure
> I recommend to import DB structure Using `php artisan` method but you can use *.sql* file to import if you want.
1. Use below Command and wait till all migrations complete...
```bash
php artisan migrate
```
2. Use below Command to Link Storage to Public folder
```bash
php artisan storage:link
```

### Serve Project
1. Use below Command ( [Wamp](https://www.wampserver.com/en/)/Other Should be Runnig ) to run project...
```bash
php artisan serve
```
> if some *key* related error appears then use command `php artisan key:generate` to generate AppKey.

## Update Admin
Go to the Link that `php artisan serve` command gives you and Hopefully it should be working, I hope you are capable of any troubleshooting if any error occurs.

Admin site: `your_site_link/admin/dashboard`

- Admin Email
```bash
admin@admin.com
```
- Admin Password
```bash
admin123
```
Update CMS and Site Settings inside Admin Panel (/admin/dashboard) Once (empty or filled doesn't matter), and then goto frontend
> when project loads for first time db won't have values of CMS and Site setting, by updating those fields will be created, so frontend wouldn't show errors after that...

I am writing this documentaion while this project is still in making, because I was bored...

I will add more soon, If my mind says, lol...

If You are still reading, then Thanks and Welcome...

Hope My project helps you any ways...

",14,14,1,0,real-estate-website,"[college-project, laravel, laravel-8-project, laravel-framework, real-estate-website, real-estate-website-project]",0
scliff108,udacity_Blockchain-Capstone,,https://github.com/scliff108/udacity_Blockchain-Capstone,https://api.github.com/repos/udacity_Blockchain-Capstone/scliff108,Capstone Project for the Udacity Blockchain Developer Nanodegree,"# Udacity Blockchain Capstone

The capstone will build upon the knowledge you have gained in the course in order to build a decentralized housing product.

## Testing
1. Clone this repository `git clone https://github.com/scliff108/Blockchain-Capstone.git`
2. Install dependencies `npm install`
3. Compile the contract `truffle compile`
4. Start Ganache `ganache-cli`
5. Run Truffle test `truffle test`

## Deploying
1. Clone this repository `git clone https://github.com/scliff108/Blockchain-Capstone.git`
2. Install dependencies `npm install`
3. Compile the contract `truffle compile`
4. Add your own mnemonic in a new `.secret` file in the project root
5. Migrate to rinkeby `truffle migrate --network rinkeby`

## Contract Address
[0xC527e3caf0552ED307Dd9f5AfB17D393135C166f](https://rinkeby.etherscan.io/address/0xc527e3caf0552ed307dd9f5afb17d393135c166f)

## OpenSea MarketPlace Link
[OpenSea StoreFront Link](https://rinkeby.opensea.io/category/unidentified-contract-69)

## Listings
1. [Cozy family home](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/1)
2. [Luxury Home](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/2)
3. [Manufacturing Warehouse](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/3)
4. [Small Condo](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/4)
5. [Floating House](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/5)
6. [Property 6](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/6)
7. [Property 7](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/7)
8. [Property 8](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/8)
9. [Property 9](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/9)
10. [Property 10](https://rinkeby.opensea.io/assets/0xC527e3caf0552ED307Dd9f5AfB17D393135C166f/10)

## Contract ABI
```
[
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""interfaceId"",
        ""type"": ""bytes4""
      }
    ],
    ""name"": ""supportsInterface"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""bool""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""getApproved"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""address""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""to"",
        ""type"": ""address""
      },
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""approve"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [],
    ""name"": ""getSymbol"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""string""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""status"",
        ""type"": ""bool""
      }
    ],
    ""name"": ""setPaused"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [],
    ""name"": ""getName"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""string""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [],
    ""name"": ""totalSupply"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""uint256""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""from"",
        ""type"": ""address""
      },
      {
        ""name"": ""to"",
        ""type"": ""address""
      },
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""transferFrom"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""_myid"",
        ""type"": ""bytes32""
      },
      {
        ""name"": ""_result"",
        ""type"": ""string""
      }
    ],
    ""name"": ""__callback"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""owner"",
        ""type"": ""address""
      },
      {
        ""name"": ""index"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""tokenOfOwnerByIndex"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""uint256""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""_myid"",
        ""type"": ""bytes32""
      },
      {
        ""name"": ""_result"",
        ""type"": ""string""
      },
      {
        ""name"": ""_proof"",
        ""type"": ""bytes""
      }
    ],
    ""name"": ""__callback"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""from"",
        ""type"": ""address""
      },
      {
        ""name"": ""to"",
        ""type"": ""address""
      },
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""safeTransferFrom"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""spender"",
        ""type"": ""address""
      },
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""_isApprovedOrOwner"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""bool""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""index"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""tokenByIndex"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""uint256""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""ownerOf"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""address""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""owner"",
        ""type"": ""address""
      }
    ],
    ""name"": ""balanceOf"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""uint256""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [],
    ""name"": ""getOwner"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""address""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""to"",
        ""type"": ""address""
      },
      {
        ""name"": ""approved"",
        ""type"": ""bool""
      }
    ],
    ""name"": ""setApprovalForAll"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""from"",
        ""type"": ""address""
      },
      {
        ""name"": ""to"",
        ""type"": ""address""
      },
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      },
      {
        ""name"": ""_data"",
        ""type"": ""bytes""
      }
    ],
    ""name"": ""safeTransferFrom"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [],
    ""name"": ""getBaseTokenURI"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""string""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""tokenURI"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""string""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": true,
    ""inputs"": [
      {
        ""name"": ""owner"",
        ""type"": ""address""
      },
      {
        ""name"": ""operator"",
        ""type"": ""address""
      }
    ],
    ""name"": ""isApprovedForAll"",
    ""outputs"": [
      {
        ""name"": """",
        ""type"": ""bool""
      }
    ],
    ""payable"": false,
    ""stateMutability"": ""view"",
    ""type"": ""function""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""newOwner"",
        ""type"": ""address""
      }
    ],
    ""name"": ""transferOwnership"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  },
  {
    ""inputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""constructor""
  },
  {
    ""anonymous"": false,
    ""inputs"": [
      {
        ""indexed"": true,
        ""name"": ""from"",
        ""type"": ""address""
      },
      {
        ""indexed"": true,
        ""name"": ""to"",
        ""type"": ""address""
      },
      {
        ""indexed"": true,
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""Transfer"",
    ""type"": ""event""
  },
  {
    ""anonymous"": false,
    ""inputs"": [
      {
        ""indexed"": true,
        ""name"": ""owner"",
        ""type"": ""address""
      },
      {
        ""indexed"": true,
        ""name"": ""approved"",
        ""type"": ""address""
      },
      {
        ""indexed"": true,
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""Approval"",
    ""type"": ""event""
  },
  {
    ""anonymous"": false,
    ""inputs"": [
      {
        ""indexed"": true,
        ""name"": ""owner"",
        ""type"": ""address""
      },
      {
        ""indexed"": true,
        ""name"": ""operator"",
        ""type"": ""address""
      },
      {
        ""indexed"": false,
        ""name"": ""approved"",
        ""type"": ""bool""
      }
    ],
    ""name"": ""ApprovalForAll"",
    ""type"": ""event""
  },
  {
    ""anonymous"": false,
    ""inputs"": [
      {
        ""indexed"": false,
        ""name"": ""caller"",
        ""type"": ""address""
      }
    ],
    ""name"": ""Paused"",
    ""type"": ""event""
  },
  {
    ""anonymous"": false,
    ""inputs"": [
      {
        ""indexed"": false,
        ""name"": ""caller"",
        ""type"": ""address""
      }
    ],
    ""name"": ""Unpaused"",
    ""type"": ""event""
  },
  {
    ""anonymous"": false,
    ""inputs"": [
      {
        ""indexed"": false,
        ""name"": ""newOwner"",
        ""type"": ""address""
      }
    ],
    ""name"": ""TransferOfOwnership"",
    ""type"": ""event""
  },
  {
    ""constant"": false,
    ""inputs"": [
      {
        ""name"": ""to"",
        ""type"": ""address""
      },
      {
        ""name"": ""tokenId"",
        ""type"": ""uint256""
      }
    ],
    ""name"": ""mint"",
    ""outputs"": [],
    ""payable"": false,
    ""stateMutability"": ""nonpayable"",
    ""type"": ""function""
  }
]
```

# Project Resources
* [Remix - Solidity IDE](https://remix.ethereum.org/)
* [Visual Studio Code](https://code.visualstudio.com/)
* [Truffle Framework](https://truffleframework.com/)
* [Ganache - One Click Blockchain](https://truffleframework.com/ganache)
* [Open Zeppelin ](https://openzeppelin.org/)
* [Interactive zero knowledge 3-colorability demonstration](http://web.mit.edu/~ezyang/Public/graph/svg.html)
* [Docker](https://docs.docker.com/install/)
* [ZoKrates](https://github.com/Zokrates/ZoKrates)
",0,0,2,2,real-estate,"[opensea, real-estate, solidity, token, udacity-blockchain-nanodegree]",0
JoshuasProgramming,The-Modern-House,,https://github.com/JoshuasProgramming/The-Modern-House,https://api.github.com/repos/The-Modern-House/JoshuasProgramming,"I created a fully responsive real estate website from viewing a UX/UI design online. This website uses HTML, SASS & Responsive Design.","# Real Estate Website - The-Modern-House

I created a fully responsive real estate website from viewing a UX/UI design online. This website uses HTML, SASS & Responsive Design.

## Lessons Learned

I really enjoyed the process of breaking down the UX/UI design into small chunks, via divide and conquer.
The lessons learned are below:

* Re-creating a website as close as possible to the design that was given to me. 
* (updating my knowledge on) Responsive Design.
* Adding favicon to a page. 
* Creating a website ASAP.

## Challenges 

* Updating my knowledge on responsive design.
* Making each section of the page have the height and width of the ui/ux mockup.

# What I'll do next time

* Try to adjust my responsive design skills

## UX/UI Design 
![Final Product](https://github.com/JoshuasProgramming/The-Modern-House/blob/main/images/uiux.JPG)
### UI Website Link 
https://www.themodernhouse.com/

## Final Product (1920x1080 desktop)
![Final Product](https://github.com/JoshuasProgramming/The-Modern-House/blob/main/images/1920x1080-min.png)

## Final Product (390x844 mobile phone)
![Final Product](https://github.com/JoshuasProgramming/The-Modern-House/blob/main/images/390x844.png)

### Website Link
https://joshuasprogramming.github.io/The-Modern-House/

",5,5,1,0,real-estate-website,"[html-css-javascript, real-estate-website, responsive-web-design]",0
iht-dev,ethereum,,https://github.com/iht-dev/ethereum,https://api.github.com/repos/ethereum/iht-dev,,"# IHT

`IHT` is an utility (ERC20) token for [i-House.com](https://i-house.com)'s products and services.  ICO was launched on 2018/01/30.

This is [IHT](https://etherscan.io/token/0xeda8b016efa8b1161208cf041cd86972eee0f31e) token address on the Ethereum network: 0xeda8b016efa8b1161208cf041cd86972eee0f31e

[i-House.com](https://i-house.com) was founded in 2017 in Hong Kong, and is the leading real estate blockchain marketplace for investors and developers. [i-House.com](https://i-house.com) products are i-House Asset Tokenization Offering (ATO), i-House Token (IHT) and i-House Token Pay (IHTPay). [i-House.com](https://i-house.com)‚Äôs mission is to give every individual the opportunity to own and share real estate investments seamlessly, making the dream of owning real estate a reality. [i-House.com](https://i-house.com) is disrupting the traditional real estate marketplace by combining the power of blockchain and emerging technologies.

### Directory structure 

## contracts

This directory contains the crowdsale, token and other auxilary solidity contract code that was launched to the Ethereum network on 2018/1/31.  

## test (TBA)
This directory contains the test script for the above crowdsale, token and other auxilary solidity contract code.  

## audit
This directory contains the audit report for the above crowdsale, token and other auxilary solidity contract code.  
",0,0,1,0,real-estate,"[ico, iht, real-estate, smart-contracts, solidity, token]",0
UtkarshPathrabe,utkarsh_realestate,,https://github.com/UtkarshPathrabe/utkarsh_realestate,https://api.github.com/repos/utkarsh_realestate/UtkarshPathrabe,"An amazing Real Estate Application created using NextJS and ReactJS, with rental homes and for-sale properties in UAE, advanced property filtering, property details page with an image carousel, and much more...","REALTOR APPLICATION
===================

[Live Website](https://utkarsh-realestate.vercel.app/)

Experience an exceptional Real Estate Application crafted with NextJS and ReactJS, tailored to showcase rental homes and for-sale properties across the UAE. This feature-rich platform encompasses advanced property filtering for refined searches, ensuring you find the ideal property. Dive into property specifics through detailed pages complete with captivating image carousels. The application seamlessly fetches data from the [Bayut API](https://rapidapi.com/apidojo/api/bayut) provided by [RapidAPI](https://rapidapi.com/hub), guaranteeing up-to-date and accurate information. Explore an array of real estate options, enhanced by a user-friendly interface and efficient data retrieval, setting the stage for an unparalleled property search journey.

![Main Page](/assets/images/main_page.jpg)  

![Real Estate Details Page](/assets/images/property_details.jpg)  
",3,3,2,1,real-estate-website,"[axios-rest, chakra-ui, nextjs, rapidapi, reactjs, real-estate-website]",0
zubayr-ahmad,property-management-system-oop,,https://github.com/zubayr-ahmad/property-management-system-oop,https://api.github.com/repos/property-management-system-oop/zubayr-ahmad,"A property agent will be able to add new properties, get specified properties, and can modify a property as well if he needs.","# Property-Management-System-OOP
This is a property management system in python.
A porperty agent can manage different properties and details.
It is a menu driven program that is easy to use.
User can add a property type and its details. The propgram will ask itself the different details of the property
User can display all properties you have added.
User can display specific type of properties as well.
User can also modify a property if he needs.
It does not save the previous data once the program ends. I will try to attach data base to resolve this issue in future.
Its not a GUI based propgram. Hoping to do it in future as well.
Enjoy!


",0,0,1,0,property-management,"[property-agent-system, property-management, property-system, python-property-management-system]",0
Renrhaf,villa-kleber,,https://github.com/Renrhaf/villa-kleber,https://api.github.com/repos/villa-kleber/Renrhaf,Villa Kleber onepage website,"# Villa kleber

Villa Kleber website code base.
Never used in production due to some unexpected client behavior.

![Screenshot of the website](https://github.com/Renrhaf/villa-kleber/blob/master/screenshot.png)
",0,0,1,0,real-estate,"[luxury-apartments, real-estate, rental, strasbourg]",0
moaltahsili,R---Predicting-House-Prices,,https://github.com/moaltahsili/R---Predicting-House-Prices,https://api.github.com/repos/R---Predicting-House-Prices/moaltahsili,Predicting House Prices Based on Varied ML Methods Such as Random Forest and XGBoost,"# Predicting-House-Prices

I scraped, gathered, and cleansed data from a real estate website and applied different regression analyses (linear, LASSO, ridge, elastic net) and varied machine learning methods (decision tree, random forest, XGBoost) to compare the performances of models and predict the house prices in Los Angeles
",0,0,1,0,real-estate,"[cleaning-data, decision-trees, elastic-net, hedonic-pricing, housing, lasso-regression, linear-regression, los-angeles, machine-learning, price, random-forest, real-estate, realtor, regression, ridge-regression, scraping, wrangling, xgboost]",0
cesurapp,reland,,https://github.com/cesurapp/reland,https://api.github.com/repos/reland/cesurapp,Reland - Real Estate Marketing Theme,"Reland - Real Estate Marketing Theme
=========
* Bootstrap 4
* No Font Icon
* Only SVG
* Fast Page Loading
* Seo Optimized
* W3C Compatible.
",0,0,1,0,real-estate,"[bootstrap-template, bootstrap-theme, html, marketing-site, real-estate, theme]",0
wahabsharif,Glorious,,https://github.com/wahabsharif/Glorious,https://api.github.com/repos/Glorious/wahabsharif,Website for Real Estate Agency,,0,0,1,0,real-estate,"[properties, real-estate]",0
Avishka-Shamendra,real-estate-project,,https://github.com/Avishka-Shamendra/real-estate-project,https://api.github.com/repos/real-estate-project/Avishka-Shamendra,A web application developed using Django for a real estate company,"# BT Real Estate Web App :house_with_garden:

This is a web app designed for a real estate company to showcase their listings. [Django](https://www.djangoproject.com/) was used for the development with PostgreSQL. You can visit the web app from [HERE](http://167.172.155.174/)

## Screenshots :camera:

#### Home Page

<img src=""screenshots/home-pg.png"" width=""1000"">

#### Listings Page

<img src=""screenshots/listings-pg.png"" width=""1000"">

#### Single Listing Page

<img src=""screenshots/listing-pg.png"" width=""1000"">

#### Admin Panel

<img src=""screenshots/admin-pg.png"">

## Setup Guide :raised_hands:

### Python Environment Setup 

Make sure you have python 3.6 or newer installed on your computer. If so, clone this repository to your local computer.

```bash
$ git clone https://github.com/Avishka-Shamendra/real-estate-project.git
$ cd real-estate-project
```

Then create a virtual environment to run the project in. The commands may change depending on the operating system you are using. For windows,

```bash
$ python -m venv venv
$ .\venv\Scripts\activate.bat
```

Then install dependencies needed in the virtual environment

```bash
(venv) pip install -r requirements.txt 
```

Check if following command prints the available command. If the installation is successful, this should not cause an error.

```bash
(venv) python manage.py
```

### Postgres Setup

Install [PostgreSQL](https://www.postgresql.org/) in the local machine and setup correctly. Use the following command to log in to the `psql` shell as `postgres` user.

```bash
$ psql -U postgres
```
Then create a new database and exit the `psql` shell

```bash
(psql) CREATE DATABASE btredb;
(psql) \q
```
### Django Setup

First, run the database migration and create the necessary tables. Make sure you are in the correct virtual environment. Whenever there is a database model change, you should re-run this.

```bash
(venv) python manage.py migrate
```
Then create the static files required for the project.

```bash
(venv) python manage.py collectstatic
```

Finally, create the admin user account. This will be the default admin user for the system. Give a preferred username and password.

```bash
(venv) python manage.py createsuperuser
```
Afterward, try running the project. The default URL for the admin is <http://127.0.0.1:8000/admin>

```bash
(venv) python manage.py runserver
```
",0,0,2,0,real-estate,"[django, postgresql, real-estate]",0
aungzawpaingoo,Urban-R.E-Website,,https://github.com/aungzawpaingoo/Urban-R.E-Website,https://api.github.com/repos/Urban-R.E-Website/aungzawpaingoo,Real Estate Website Project! ,"
# Urban-R.E-Website

Real Estate Website Project!


    
## Live Demo 
![Screenshot (566)](https://user-images.githubusercontent.com/86042513/148639487-fa482b14-f0ad-485f-bf46-b4d6bb533c99.png)




  
Link : https://aungzawpaingoo.github.io/Urban-R.E-Website/

  
## Project Info & Features
Urban Real Estate a startup residential company website.<br>
On top of building features for the website using HTML, Tailwinds CSS, Javascript & Figma , <br>
I created the entire Home, Buy A Home, Rent A Home, Contact & Login pages of the company website. <br>
From wireframes and high-fidelity mockups on Figma to development, using HTML, Tailwinds CSS & Javascript.
<br><br>
- Property Listing
- Buy , Sell Or Rent Property
- Contact Info 
- Responsive Design 

  
## Used By

This project is used by the following Company:

- Urban Real Estate 

  
## License

[MIT](https://choosealicense.com/licenses/mit/)

  
## Author

- [@aungzawpaingoo](https://github.com/aungzawpaingoo)

  
",5,5,1,0,real-estate-website,"[real-estate, real-estate-website]",0
Aftabur-Rahman-Parvez,Real-Estate,,https://github.com/Aftabur-Rahman-Parvez/Real-Estate,https://api.github.com/repos/Real-Estate/Aftabur-Rahman-Parvez,Real-Estate webpage,,0,0,1,0,real-estate,[real-estate],0
glaubercss,aldeia_realestate,,https://github.com/glaubercss/aldeia_realestate,https://api.github.com/repos/aldeia_realestate/glaubercss,Web scraping Aldeia da Serra's real state advertisements at Viva Real marketplace.,"# ALDEIA DA SERRA REAL ESTATE

<img src=""img/webscraping_cover.png"" width=""900"">

cr√©ditos da foto: https://flaviogfranca.com.br/




# FULL PROJECT:

- [x] [1. Web Scraping](#web-scraping)
- [x] [2. Data Cleansing](#data-cleansing)
- [ ] 3. EDA - Exploratory Data Analysis (TBD)
- [ ] 4. Machine Learning Model (TBD)
- [ ] 5. Model Deployment (TBD)



## INTRO

This is my very first Python project developed to exercise **Python programming, Web Scraping and Machine Learning skills** that I've been developing in the last 18 months together with other tools.

It's comprised of 5 sections mentioned above and **ultimate goal** is to **recommend price for new houses advertisements** by considering its attributes such as constructed area, condominium where it's located, number of bedrooms, number of bathrooms, number of en suites and number of car spaces. That tool would be used to

This is intended to be the first of a series of projects that will also include machine learning models for forecasting, classification, recommendation and so on.

I'll also include information about Business intelligence projects that are already developed, including ETL processes.


## MOTIVATION

It's widely known that real life projects are quite more challenging than those we usually find in courses or dataset repositories. Thus the motivation is **to develop a simple yet original project** - not based on readly available datasets -, **from idea to deploy** as a mean to exercise, improve and show my ongoing Data Science skills.


## SUBJECT

Aldeia da Serra village, a suburban housing neighbourhood located 35km west from Sao Paulo city, Brazil. It's a place with about 10 housing condominiuns where people live close to Nature and not too far from workplace. Although traffic is usually heavy and it takes about 30' to get to Alphaville region and about 90' to Sao Paulo city.

As a motorcycle enthusiastic, it usually takes me about 45' to reach Sao Paulos's southern region. Yes, I live at Aldeia da Serra and for me the proximity to the Nature is worth the distance from workplace. Additionally, recent developments of Covid-19 has been acellerating the adoption and expansion of **work from home** modality among entreprises, which may decrease the necessity to commute on a daily basis.

Well, let's go to the project itself!



# WEB SCRAPING


### AIM

The aim of this project is to automate the collection of real estate advertisings from <a href= ""http://vivareal.com.br""> Viva Real </a> marketplace web site using web scraping technology in compliance with the site rules stated in the robots.txt file. 

<img src=""img/webscraping_vivareal_page.png"" width=""900"">

The following information will be extracted for each real estate:

1. address
2. title
3. area in square meters (m2)
4. number of bedrooms
5. number of bathrooms
6. number of car spaces
7. price asked
8. url

As you might have antecipated there are some data transformation to be done (e.g. to split the address into street name, street number and city) that will be addressed in the second phase of the project.



### CHALLENGES

* Several searches are needed to get all houses on sale at  Aldeia da Serra region because there are three cities in the region (Santana de Parnaiba, Barueri and Itapevi) and some houses are published under the name of the condominium.

* Asynchronus loading: Viva Real site was built with Java Script search results are loaded in two steps changing by number of houses in each step. It required more research.
 
 * It's my very first project using Python.



### SOLUTION

Note how the page is loaded the first time displaying the total number of advertisements and then it's loaded again with a different number and different items. The correct number is the displayed at the first time and the correct items to be scraped are displayed afterwards.

<img src=""img/webscraping_vivareal_scraping.gif"" width=""900"">



### RESULTS

<img src=""img/webscraping_results.png"" width=""900"">



### REFERENCES

* Tutorial: Web Scraping and BeautifulSoup - Alex Olteanu Dataquest

https://www.dataquest.io/blog/web-scraping-beautifulsoup/

* Web scraping com python ‚ÄîSelenium e Javascript - Henrique Coura
https://medium.com/@henriquecoura_87435/web-scraping-com-python-selenium-e-javascript-faa108f95bbe


* Advanced Python Web Scraping: Best Practices & Workarounds - Satwik Kansal Codementor
https://www.codementor.io/blog/python-web-scraping-63l2v9sf2q

* Como fazer um README.md BONIT√ÉO - Raul Esteves
https://medium.com/@raullesteves/github-como-fazer-um-readme-md-bonit%C3%A3o-c85c8f154f8



### FURTHER DEVELOPMENTS

* Get houses' descriptions to improve condo_name for adversiments without it.

* Get houses' attributes (e.g. swiming pool)

* Improve code by storing urls and page parameter to avoid code repetition.

* Use a ETL tool such as Airflow to automate the web scraping execution.

* Create a cloud database and add new house advertisements incrementally keeping
track of publication date.





# DATA CLEANSING


### AIM

To inspect and transform - clean, deduplicate, categorize and filter -,  the attributes scraped from Viva Real real estate market place in ways that it can be used for Exploratory Data Analysis (EDA) and Machine Model (ML) creation.



### CHALLENGES

1. House attributes scraped:

<img src=""img/webscraping_vivareal_page.png"" width=""900"">


2. The above attributes were extracted and recorded as below:

<img src=""img/cleaning_before.png"" width=""900"">
In blue are the attributes to be cleaned from the dust, in red.


3. The most challeging attribute is the Address that must be splitted into street_name, street_number, condo_name and city, because the records are not homogeneous. Actually, there are 4 different patterns that get to be addressed:

<img src=""img/cleaning_address.png"" width=""900"">



### RESULTS

Cleaning preparation:

<img src=""img/cleaning_preparation.png"" width=""900"">

The four patterns are prepared using separators to be correctly splitted:

1. street name | city
2. street name | street number| neighbourhood | city
3. street name | condo name | neighbourhood | city
4. street name | street number| condo name | neighbourhood | city


Expected resuls:

- street name | street number | condo name |  city


### REFERENCES



* Getting started with Markdown - Felipe Song
https://github.com/fefong/markdown_readme

* StackEdit In-browser Markdown Editor
https://stackedit.io/",0,0,1,11,real-estate,"[real-estate, scraping-websites]",0
2KAbhishek,pyestate,,https://github.com/2KAbhishek/pyestate,https://api.github.com/repos/pyestate/2KAbhishek,Real estate price analysis üè†üí∞,"<div align = ""center"">

<h1><a href=""https://2kabhishek.github.io/pyestate"">PyEstate</a></h1>

<a href=""https://github.com/2KAbhishek/PyEstate/blob/main/LICENSE"">
<img alt=""License"" src=""https://img.shields.io/github/license/2kabhishek/PyEstate?style=flat&color=eee&label=""> </a>

<a href=""https://github.com/2KAbhishek/PyEstate/graphs/contributors"">
<img alt=""People"" src=""https://img.shields.io/github/contributors/2kabhishek/PyEstate?style=flat&color=ffaaf2&label=People""> </a>

<a href=""https://github.com/2KAbhishek/PyEstate/stargazers"">
<img alt=""Stars"" src=""https://img.shields.io/github/stars/2kabhishek/PyEstate?style=flat&color=98c379&label=Stars""></a>

<a href=""https://github.com/2KAbhishek/PyEstate/network/members"">
<img alt=""Forks"" src=""https://img.shields.io/github/forks/2kabhishek/PyEstate?style=flat&color=66a8e0&label=Forks""> </a>

<a href=""https://github.com/2KAbhishek/PyEstate/watchers"">
<img alt=""Watches"" src=""https://img.shields.io/github/watchers/2kabhishek/PyEstate?style=flat&color=f5d08b&label=Watches""> </a>

<a href=""https://github.com/2KAbhishek/PyEstate/pulse"">
<img alt=""Last Updated"" src=""https://img.shields.io/github/last-commit/2kabhishek/PyEstate?style=flat&color=e06c75&label=""> </a>

<h3>Real estate price analysis üè†üí∞</h3>

</div>

## What is this

Analysis and visualization of real estate prices in Toronto, Canada using Python.

## Inspiration

Found the dataset interesting while exploring Kaggle.

## Prerequisites

Before you begin, ensure you have met the following requirements:

- You have installed the latest version of `python`, `jupyter notebook`, `pyviz`, `plotly` and `panel`

## Getting pyestate

To install pyestate, follow these steps:

```bash
git clone https://github.com/2kabhishek/pyestate
cd pyestate
jupyter-notebook .
```

## Using pyestate

The rental analysis is available in the `rental_analysis` notebook.
The dashboard is available in the `dashboard` notebook.

## How it was built

pyestate was built using `Jupyter Notebook`

## Challenges faced

- Had some trouble with mapbox.

## What I learned

- Learned about `plotly`, `panel`, `pyviz` and `mapbox`.

## What's next

Some sections are incomplete.

Hit the ‚≠ê button if you found this useful.

## More Info

<div align=""center"">

<a href=""https://github.com/2KAbhishek/pyestate"">Source</a> | <a href=""https://2kabhishek.github.io/pyestate"">Website</a>

</div>
",0,0,2,0,real-estate,"[analysis, data-visualization, finance, mapbox, panel, plotly, pyviz, real-estate]",0
emisilve86,Parser-Automatico-Casedavedere.it,,https://github.com/emisilve86/Parser-Automatico-Casedavedere.it,https://api.github.com/repos/Parser-Automatico-Casedavedere.it/emisilve86,Lo script implementa un parser di annunci immobiliari presenti su casesavedere.it che pu√≤ essere automatizzato e che pu√≤ inviare messaggi di posta elettronica contenente l'anteprima degli annunci che soddisfano i criteri di ricerca impostati.,"# Parser Automatico di Annunci Immobiliari su Casesavedere.it #

----------

## Perch√©? ##

Molte applicazioni e motori di ricerca di annunci immobiliari gi√† offrono all'utente la possibilit√† di effettuare ricerche con filtri avanzati, per poi notificare puntualmente l'utente, tramite email e/o notifica *push*, dell'inserimento di nuovi annunci che soddisfano i criteri di ricerca inseriti. E' questo il caso dei ben noti `Idealista`, `Immobiliare.it`, `Casa.it`, ecc.

Ad ogni modo, sono solito consultare anche un'altra piattaforma sul Web molto utilizzata da privati e agenzie immobiliari che operano sul mio territorio. Si tratta di [`Casedavedere.it`](https://www.casedavedere.it/) che offre all'utente una semplice *form* di ricerca con alcuni campi quali, ad esempio, la provincia, il comune, il prezzo massimo, i metri quadri, e pochi altri criteri di base.

D'altro canto, questa piattaforma non permette di filtrare per <u>numero di locali</u>, <u>piani intermedi</u>, <u>presenza di box</u>/<u>garage</u>, <u>numero minimo di balconi</u> e <u>ascensore</u>. Alcune informazioni che vorrei poter avere filtrate nella mia ricerca, ma che attualmente √® possibile solo capire aprendo il *link* di ogni singolo annuncio presente nel risultato di una ricerca che include centinaia di anteprime distribuite tra decine di pagine da navigare in sequenza.

Inoltre, la piattaforma Web in questione non offre l'iscrizione ad alcun tipo di *newsletter* che possa permettere all'utente interessato di ricevere aggiornamenti in merito ai pi√π recenti annunci inseriti che soddisfino il filtro impostato. Ad aggravare tale carenza, c'√® poi la difficolt√† nel poter discernere i vecchi dai nuovi annunci, in quanto le anteprime delle ricerche effettuate non sono sempre presentate nello stesso ordine.

Per superare tali limitazioni, ho deciso di sviluppare uno *script* Python (>=3.6) che implementa un <u>*parser* con filtro avanzato</u> che pu√≤ essere facilmente configurato per esplorare gli annunci di immobili presenti in <u>pi√π di un comune e provincia</u>, e che permette di <u>ricevere notifiche tramite email</u> contenenti nel corpo le anteprime degli annunci immobiliari che soddisfano i criteri di ricerca inseriti, ma non ancora notificati in passato. Lo *script* pu√≤ essere quindi lanciato in modo programmatico come *task* di Cron per <u>eseguire automaticamente</u> in background ad intervalli di tempo determinati.

> **Nota**.
> Clonando questo repository viene clonato in locale tutto il sorgente necessario a lanciare il *parser*. In ogni caso, sar√† necessario seguire alcuni step fondamentali per preparare l'ambiente a funzionare correttamente e che viene spiegato nel seguito.

----------

## Come? ##

Come prima cosa, √® necessario verificare di avere installato Python3 sul proprio sistema. Sono poi necessari i seguenti moduli Python per poter lanciare lo script: `os`, `re`, `json`, `socket`, `validators`, `http`, `base64`, `datetime`, `bs4` e `email`.

Molti di questi saranno gi√† disponibili nell'ambiente base una volta installato Python, mentre altre dovranno essere installate manualmente, ad esempio, tramite il *package installer* di Python `pip`.

Inoltre, per permettere a questa applicazione di inviare le email in maniera programmatica, dovranno essere installati anche i seguenti moduli

> ```pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib```

Ad ogni modo, per utilizzare i servizi offerti tramite API Google, √® necessario creare prima un progetto Google Cloud Platform come spiegato a questo [link](https://developers.google.com/workspace/guides/create-project), per poi creare anche le credenziali per applicazioni desktop come spiegato a questo secondo [link](https://developers.google.com/workspace/guides/create-credentials). Quest'ultimo step √® indispensabile per l'autenticazione e quindi l'utilizzo dei servizi offerti tramite API di Google.

> **Nota**.
> Tenere bene a mente che, per poter inviare email sfrutando le apposite API, bisogna specificare i seguenti ambiti all'atto della creazione delle credenziali

> ```.../auth/gmail.compose```	--- *(Gestire le bozze e inviare le email)*

> ```.../auth/gmail.readonly```	--- *(Visualizzare le tue email e impostazioni)*

Una volta completati i passi descritti nei due link riportati sopra, sar√† possibile scaricare un file `credential.json` che deve essere inserito nella stessa directory dove risiede lo *script* `CaseDaVedere.py`.

A questo punto abbiamo tutto, e possiamo procedere con la configurazione vera e propria dell'applicazione. Dobbiamo innanzitutto specificare gli indirizzi di posta ai quali si desidera inviare le email. Per fare questo basta inserire uno o pi√π indirizzi di posta elettronica all'interno del file `email_list.json`, all'interno della lista puntata dalla chiave `""email""`, come mostrato sotto

> ```json
> ""email"" : [
> 	""esempio1@serv.it"",
> 	""esempio2@serv.it"",
> 	...
> ]
> ```

> **Nota**.
> Tenere presente che, se la lista rimane vuota, non verr√† generata nessuna email, ma sar√† sempre possibile consultare il file `casedavedere.html` che viene generato in maniera automatica dallo *script* e che contiene le anteprime di tutti gli annunci che soddisfano i criteri di ricerca impostati.

I campi da aggiornare per impostare il filtro desiderato sono tutti inclusi nel file `property_filter.json` che sono impostati di base a valori di default. Questi sono

> `min_area` : un valore intero che rappresenta la superficie minima in metri quadri dell'immobile

> `max_area` : un valore intero che rappresenta la superficie massima in metri quadri dell'immobile

> `min_price` : un valore intero che rappresenta il prezzo minimo di vendita dell'immobile

> `max_price` : un valore intero che rappresenta il prezzo massimo che si intende sborsare per l'acquisto dell'immobile

> `intermediate_floor` : un booleano da impostare con il valore 0 o 1 per escludere o meno dalla ricerca tutti gli immobili siti all'ultimo piano ed al piano terra

> `min_rooms` : un valore intero che rappresenta il numero minimo di locali di cui deve essere dotato l'immobile

> `min_balconies` : un valore intero che rappresenta il numero minimo di balconi di cui deve essere dotato l'immobile

> `need_box` : un booleano da impostare con il valore 0 o 1 per includere tra i risultati della ricerca solo gli immobili venduti insieme ad un garage/box auto

> `need_elevator` : un booleano da impostare con il valore 0 o 1 per includere tra i risultati della ricarca solo gli immobili siti in stabili dotati di ascensore

Come ultima operazione, c'√® da impostare la provincia ed il comune dove si sta cercando l'immobile da acquistare. Per fare questo bisogna aprire il file `provinces_and_municipalities.json` ed includere nell'insieme `SELECTED` uno o pi√π liste e/o campi che rappresentano provincie e comuni tra quelli gi√† presenti nell'insieme `ALL`.

----------

## Eseguire lo Script ##

Per eseguire lo script √® sufficiente lanciare il seguente comando da *shell*

> ```sh
> python CaseDaVedere.py > /dev/null 2>&1
> ```

Se si omette il redirezionamento di `stdout` e `stderr` a `/dev/null`, lo *script* stampa a schermo la pagina della ricerca correntemente esplorata ed il codice dell'immobile correntemente parsato e che ha soddisfatto i requisiti della ricerca. Una volta completato, all'interno della working directory sar√† poi possibile reperire ed aprire il file `casedavedere.html`. Se √® stata poi impostato almeno un'indirizzo email, dovr√† poter essere anche ricevuto un messaggio sulla relativa casella di posta.

> **Nota**.
> Non modificare o cancellare il file autogenerato `property_code.txt`, in quanto mantiene i codici degli immobili che soddisfano i criteri di ricerca impostati, e per i quali √® gi√† stata inoltrata la notifica a mezzo di posta elettronica e che non devono essere notificati una seconda volta.

----------

## Automatizzare lo Script ##

Su sistemi Linux-based √® normalmente disponibile il servizio *cron* che altro non √® che uno *scheduler* di *cron-jobs*. Questi ultimi possono essere un qualsivoglia eseguibile o *script* da lanciare ad intervalli di tempo ben definiti ed in accordo a determinate regole che possono essere specificate con la sintassi *cron*.

Se per esempio si vuole lanciare lo *script* ogni ora tra le 8:00 e le 20:00 nei soli giorni della settimana che vanno da luned√¨ a venerd√¨, √® sufficiente eseguire da terminale `crontab -e` per aprire l'editor ed inserire in fondo la regola che segue

> ```sh
> 0 8-20 * * 1-5  cd /path/to/the/folder/containing/the/script  &&  python CaseDaVedere.py > /dev/null 2>&1
> ```

quindi salvare e chiudere il file.",0,0,1,0,real-estate,"[automatic, cron, google-api, google-mail, google-mail-api, parser, python, real-estate, real-estate-app]",0
hstojal,avaliacao_imobiliaria_por_regressao_linear,,https://github.com/hstojal/avaliacao_imobiliaria_por_regressao_linear,https://api.github.com/repos/avaliacao_imobiliaria_por_regressao_linear/hstojal,Avalia√ß√£o Imobili√°ria por Regress√£o Linear,"# Avaliacao Imobiliaria por Regressao Linear

O projeto se trata de uma avalia√ß√£o imobili√°ria de im√≥vel em edifica√ß√£o residencial multifamiliar em um cen√°rio de inten√ß√£o de venda segundo o M√©todo Comparativo Direto de Dados de Mercado, conforme priorizado pela Norma NBR 14.653, que ""visa consolidar os conceitos, m√©todos e procedimentos gerais para os servi√ßos t√©cnicos de avalia√ß√µes de bens"".

Para tal efeito, foi utilizada uma amostra de oferta de im√≥veis semelhantes, fez-se uma an√°lise dos dados coletados e comparou-se modelos distintos de Machine Learning, especificamente Regress√£o Linear M√∫ltipla.

O projeto foi elaborado na linguagem Python 3 em Jupyter Notebook com as bibliotecas NumPy, Pandas, Matplotlib e Statsmodels (vers√µes podem ser baixadas pelo arquivo ""environment.yml"" com o comando ```conda env create -f environment.yml```).
",0,0,1,0,real-estate,"[data-science, linear-regression, machine-learning, matplotlib, numpy, pandas, python, real-estate, statsmodels]",0
ezequieljuliano,PropertiesFile4Delphi,,https://github.com/ezequieljuliano/PropertiesFile4Delphi,https://api.github.com/repos/PropertiesFile4Delphi/ezequieljuliano,Library for managing configuration files with key-value syntax,"# Properties File For Delphi
The PropertiesFile4Delphi consists of a library for handling **key=value** format configuration files. 

## About The Project
Many times, for various reasons, it is necessary to parameterize the application starting from a configuration mechanism. In Delphi is common to use INI files to store the settings, but working with these files is a bit repetitive and unproductive. The API PropertiesFile4Delphi facilitates this work with configuration files replacing the use of INI files. It is an API to manage simple text files, which are written with the **key=value** syntax, storing a unique key per line.

### Key Features
* Store and load data via simplified interface;
* Map configuration files to simplified classes.

### Built With
* [Delphi Community Edition](https://www.embarcadero.com/br/products/delphi/starter) - The IDE used 

## Getting Started
To get a local copy up and running follow these simple steps.

### Prerequisites
To use this library an updated version of Delphi IDE (XE or higher) is required.

### Installation
Clone the repo
```
git clone https://github.com/ezequieljuliano/PropertiesFile4Delphi.git
```

Add the ""Search Path"" of your IDE or your project the following directories:
```
PropertiesFile4Delphi\src
```

## Usage
Create or edit configuration files by declaring a variable of type IPropertiesFile and using the TPropertiesFileStorage implementation:

### Saving a Properties File
```
uses
  
  PropertiesFile,
  PropertiesFile.Storage;

procedure Save;
var
  propertiesFile: IPropertiesFile;
begin
  propertiesFile := TPropertiesFileStorage.Create;
  propertiesFile.PropertyItem['app.title'] := 'Properties File For Delphi';
  propertiesFile.PropertyItem['app.version'] := '1.0.0';
  propertiesFile.SaveToFile('application.properties');
end;

```

### Loading a Properties File
```
uses
  
  PropertiesFile,
  PropertiesFile.Storage;

procedure Load;
var
  propertiesFile: IPropertiesFile;
begin
  propertiesFile := TPropertiesFileStorage.Create;
  propertiesFile.LoadFromFile('application.properties');
  Self.Caption := propertiesFile.PropertyItem['app.title'] + '-' + propertiesFile.PropertyItem['app.version'];
end;

```

### Mapping Support and Configuration Classes
PropertiesFile4Delphi library provides a set of mapping classes. This way you can work directly with classes rather than getting manipulating files in your source code. The first step to using the configuration mechanism in an application is to create a specific class to store the desired parameters and write it down with **[PropertiesFile]** and inherit **TPropertiesFileObject** class.

Mapping example:
```
uses
  
  PropertiesFile.Mapping;

type

  [PropertiesFile('security.properties')]
  TSecurityConfig = class(TPropertiesFileObject)
  private
    [NotNull]
    [PropertyItem('username')]
    fUsername: string;

    [NotNull]
    [PropertyItem('password')]
    fPassword: string;
  public
    property Username: string read fUsername write fUsername;
    property Password: string read fPassword write fPassword;
  end;

```

When the class is destroyed the file is automatically saved:
```
procedure Load;
var
  securityConfig: TSecurityConfig;
begin
  securityConfig := TSecurityConfig.Create;
  try
    securityConfig.Username := 'admin';
    securityConfig.Password := 'admin';
  finally
    securityConfig.Free;
  end;
end;

```

When instantiating the class the data is loaded:
```
procedure Login;
var
  securityConfig: TSecurityConfig;
begin
  securityConfig := TSecurityConfig.Create;
  try
    Login(securityConfig.Username, securityConfig.Password);
  finally
    securityConfig.Free;
  end;
end;

```

Supported field mappings:
* PropertyItem: alias field definition;
* NotNull: mandatory field definition;
* Ignore: Fields that should be ignored;
* ReadOnly: Fields that are read-only (can be applied at class level).  

## Roadmap
See the [open issues](https://github.com/ezequieljuliano/PropertiesFile4Delphi/issues) for a list of proposed features (and known issues).

## Contributing
Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are **greatly appreciated**.

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## License
Distributed under the APACHE LICENSE. See `LICENSE` for more information.

## Contact
To contact us use the options:
* E-mail  : ezequieljuliano@gmail.com
* Twitter : [@ezequieljuliano](https://twitter.com/ezequieljuliano)
* Linkedin: [ezequiel-juliano-m√ºller](https://www.linkedin.com/in/ezequiel-juliano-m√ºller-43988a4a)

## Project Link
[https://github.com/ezequieljuliano/PropertiesFile4Delphi](https://github.com/ezequieljuliano/PropertiesFile4Delphi)",23,23,5,0,property-management,"[application-configuration, configuration, custom-attributes, delphi, library, mapping, properties, property-management]",0
JNjenga,PropertyListingSystem,,https://github.com/JNjenga/PropertyListingSystem,https://api.github.com/repos/PropertyListingSystem/JNjenga,A web based real estate system ,"This is a web property listing system done using larave. It was done as a project for a cs class, Human computer interaction.

How to run
------
You can use the normal laravel setup procedure to get started or just follow the one below which is the same procedure. 

- Clone the repository
    `git clone https:github.com/jnjenga/PropertyListingSystem`
- Install dependancies
    `composer install`
- Setup your database using .env file
- Migrate, and link storage
   `php artisan migrate --seed`
   `php artisan storage:link`
- Generate key and Run the server
   `php artisan key:generate`
   `php artisan serve`

Group members
------------
- [https://github.com/Deon254]()
- [https://github.com/KibandiMacharia/]()
- [https://github.com/Alphonce-Mutebi]()
- [https://github.com/DavidOgalo]()
- [https://github.com/DeborahKM]()
- [https://github.com/suzan284/]()
- [https://github.com/code4Shawn]()
- [https://github.com/kelvinnja]()
- [https://github.com/muchiriben]()
- [https://github.com/JNjenga]()
",0,0,2,3,property-management,"[laravel, laravel-framework, property-management, real-estate, realestate]",0
Zeeshanahmad4,RealEstateMate-WhatsApp-Group-Management-Bot,,https://github.com/Zeeshanahmad4/RealEstateMate-WhatsApp-Group-Management-Bot,https://api.github.com/repos/RealEstateMate-WhatsApp-Group-Management-Bot/Zeeshanahmad4,"üè° RealEstateMate: An intelligent WhatsApp bot streamlining interactions in real estate groups through automated user categorization, message filtering, and activity reporting. ü§ñüì±","<h1 align=""center""> üè° RealEstateMate: WhatsApp Group Management Bot </h1>
<div align=""center"">
  <a href=""mailto:ahmadzee26@gmail.com"">
    <img alt=""Gmail"" width=""30px"" src=""https://edent.github.io/SuperTinyIcons/images/svg/gmail.svg"" />
    <code>ahmadzee26@gmail.com</code>
  </a>
  <span> ‚îÉ </span>

  <a href=""https://t.me/zeeshanahmad4"">
    <img alt=""Telegram"" width=""30px"" src=""https://edent.github.io/SuperTinyIcons/images/svg/telegram.svg"" />
    <code>@zeeshanahmad4</code>
  </a>
  <span>‚îÉ</span>
  
  <a href=""https://discord.com"">
    <img alt=""Discord"" width=""30px"" src=""https://github.com/Zeeshanahmad4/RealEstateMate-WhatsApp-Group-Management-Bot/blob/main/discord-icon-svgrepo-com.svg"" />
    <code>zee#2655</code>
  </a>
  <span>‚îÉ</span>
  
  <a href=""https://www.upwork.com/freelancers/zeeshanahmad291"">
    <img alt=""Upwork"" width=""80px"" src=""https://github.com/Zeeshanahmad4/Zeeshanahmad4/blob/main/upwork.svg"" />
    <code>Zeeshan Ahmad</code>
  </a>
  
  <br />
  <strong>For discussion, queries and freelance work. Do reach me.üëÜüëÜüëÜ</strong>
</div>


<br />

<!-- TABLE OF CONTENTS -->
## Table of Contents

- [Project Overview](#project-overview-)
- [Features](#features-)
  - [Future Features (To-Do)](#-future-features-to-do)
- [Requirements](#requirements-)
- [Usage Examples](#usage-examples-)
  - [Setup and Installation Instructions](#setup-and-installation-instructions-)
- [Troubleshooting Tips](#troubleshooting-tips-)
- [Contribution Guidelines](#contribution-guidelines-)

## Project Overview üìñ

**RealEstateMate** is a comprehensive WhatsApp group bot designed to streamline and automate the interactions within real estate-focused WhatsApp groups. It aids in user categorization, message verification, and ensures a smooth, spam-free experience for all group members.

## Features ‚ú®

- **User Type Identification:** Categorize users into Realtors, Sellers or Lessors, and Buyers or Tenants.
- **Message Verification:** Vet every message's content and the sender's phone number.
- **User Authentication:** Ensure users are authorized to send specific types of content.
- **Payment Status Check:** Permit only users with active payments to send messages.
- **Notification Feature:** Alert the group if a message gets deleted and tag the violating user.
- **Activity Report:** Generate reports detailing group activity metrics.
- **Database Integration:** Sync with an external database for real-time payment status checks.
- **Scheduled Messages:** Dispatch messages at predetermined times.
- **Prohibited Words Filter:** Screen out messages containing unwanted or irrelevant words/phrases.

### üåü Future Features (To-Do):

- **Voice Message Analysis:** Analyze voice notes for prohibited content.
- **User Feedback System:** Allow users to report issues or provide feedback directly.
- **Advanced Analytics:** Dive deeper into group metrics and offer insights.
- **Multilingual Support:** Support for multiple languages to cater to a global audience.

## Requirements üõ†Ô∏è

- Python 3.x
- SQLite (for the database operations)
- WhatsApp Business API access


## Usage Examples üìù
```# Example of processing a new message
from main import process_message
process_message(""+1234567890"", ""Hello, I am looking to buy a property."")
```

### Setup and Installation Instructions üöÄ

```git clone https://github.com/your_username/RealEstateMate.git```


Navigate to the project directory:
```cd RealEstateMate```

Install the required packages:
```pip install -r requirements.txt```

- Set up the database (details provided in `database_integration.py`).
- Run the `main.py` script to start the bot:

```python main.py```


## Troubleshooting Tips üîç

- Ensure you have the correct Python version installed.
- Double-check database connectivity and permissions.
- Validate your WhatsApp Business API credentials.
- For message sending errors, ensure the bot has the necessary group permissions.


## Contribution Guidelines ü§ù

1. Fork the project.
2. Create your feature branch: `git checkout -b feature/YourFeatureName`
3. Commit your changes: `git commit -am 'Add some feature'`
4. Push to the branch: `git push origin feature/YourFeatureName`
5. Open a pull request.


",0,0,1,0,real-estate,"[automation, bot, database-integration, group-management, message-filtering, python, real-estate, scheduled-messaging, user-authentication, whatsapp-bot]",0
S44WN,holux-real-estate-webpage,,https://github.com/S44WN/holux-real-estate-webpage,https://api.github.com/repos/holux-real-estate-webpage/S44WN,Web site of a real estate business.,,0,0,1,0,real-estate,"[css, html, javascript, real-estate, swiper, swiper-js, webdesign, webdevelopment]",0
kevinrajgor,Realestate-Website,,https://github.com/kevinrajgor/Realestate-Website,https://api.github.com/repos/Realestate-Website/kevinrajgor,"Real Estate Website made using React Js, Tailwind Css and Firebase.","# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
",0,0,1,0,real-estate,"[firebase, firebase-auth, reactjs, real-estate, tailwindcss]",0
jgome284,Real_Estate_Analytics,,https://github.com/jgome284/Real_Estate_Analytics,https://api.github.com/repos/Real_Estate_Analytics/jgome284,Test project for grabbing real estate data through the Zillow API.,,0,0,1,0,real-estate,"[api, real-estate]",0
mieszkaniamarzen,formularz,,https://github.com/mieszkaniamarzen/formularz,https://api.github.com/repos/formularz/mieszkaniamarzen,Aplikacja formularza dla Mieszka≈Ñ Marze≈Ñ,# formularz,0,0,1,0,real-estate,"[mieszkania, real-estate]",0
czarinagluna,regression-analysis-for-estimating-prices,,https://github.com/czarinagluna/regression-analysis-for-estimating-prices,https://api.github.com/repos/regression-analysis-for-estimating-prices/czarinagluna,Regression modeling on real estate prices to help improve advisory services and serve as home value estimator,"# Regression Analysis for Estimating Prices

## Overview

An analysis and regression modeling of over 21,000 real estate transactions in King County, Washington is completed to improve home valuation and real estate advisory. The findings include top features that are important to the *bestimate* model, which are square footage of living space, distance to Seattle, total distance to both Seattle and Redmond, distance to Redmond, and square footage of living space of the nearest 15 neighbors. The *bestimate* model that is the tuned random forest performs best in predicting house prices based on over 20 features. It explains 88% of the variance in the data and its predictions are USD 107,000 off from the actual prices on average.

![header](data/images/gokhan-kara-rkiL2esY7yM-unsplash.jpg)

## Business and Data Understanding

Real estate agencies in King County, Washington may be able to improve their advisory services by identifying important features that factor in home valuation based on relevant data. Doing so will allow real estate agents to provide more accurate prices to clients as supported by historical records. Using publicly available data, I describe patterns in real estate transactions such as features that likely drive prices.

The [King County data](https://www.kaggle.com/datasets/harlfoxem/housesalesprediction) spans a year between 2014 and 2015 with over 21,000 real estate transactions and 21 features, of which the dependent variable to predict is `price`. A full description of all column features is provided along with other data files, available in the repository's [data folder](https://github.com/czarinagluna/regression-analysis-for-estimating-prices/tree/main/data).

**Exploratory Data Analysis**

![](data/images/fig2.png)

The highest peaks in the number of houses sold per month happened in the seasons of spring and summer. The decline in the months that followed dropped to the lowest point at the first month of the new year. As for the price of houses sold per month, the values followed roughly the same pattern.

![](data/images/fig3.png)

Price is strongly correlated with `sqft_living`, `grade`, `sqft_living15`, `bathrooms`, and `bathrooms`. 

Let's visualize their relationships and distributions.

![](data/images/fig4.png)

**Geospatial Mapping**

> ""*Location, location, location*""

**Location is important in real estate and in analysis!**

Let's map the data points.

![](data/images/fig5.png)

The concentrated geographic patterns reveal parts of the county populated by the more expensive houses represented by darker colors like the island at the center. The even more expensive houses sold for over a million dollars are located at about the same spots as the dark dots.

Locate the highest priced houses in the data in the following map:

![](data/images/fig6.png)

**Interactive Maps**

I created choropleth maps ([map notebook](https://github.com/czarinagluna/regression-analysis-for-estimating-prices/blob/main/map.ipynb)) to further understand how house prices vary by location.

![](data/images/fig7.png)

To interact with the maps, please use the [notebook viewer](https://nbviewer.org/github/czarinagluna/regression-analysis-for-estimating-prices/blob/main/map.ipynb).

## Data Modeling and Results

I iterate over regression models to predict the dependent variable `price` that is continuous: from simple to multiple linear regression, ridge and lasso regression, decision trees to random forests. For hyperparameter tuning, I perform grid search ([code](https://github.com/czarinagluna/regression-analysis-for-estimating-prices/blob/main/gridsearch.ipynb)) to find the optimal parameters of decision trees and random forests.

**Model Performance**

![](data/images/fig8.png)

**Baseline to *Bestimate* Model**

The baseline model `simple_lr` significantly improved to the `poly_tuned_rf`, our *bestimate* model:
* from an R-squared of 0.47 to 0.88, and
* from a Root Mean Squared Error of USD 217,000 to USD  107,000

To visualize the significant difference, let's plot how far away the predictions of the baseline model are to the actual prices versus how much closer the predictions of the bestimate model are:

![](data/images/fig9.png)

For advisory, the top five features with the highest mean feature importances to the model are:
1. Square footage of living space
2. Distance to Seattle
3. Total distance to both Seattle and Redmond
4. Distance to Redmond
5. Square footage of living space of the nearest 15 neighbors

The other important features that follows are overall grade related to the construction and design of the house, quality of view from the house, zipcode, whether the house is on a waterfront, and square footage of lot.

**Model Deployment**

Finally, I deploy the Random Forest regression model ([demo](https://streamlit.io/)) as a prototype I develop for a client-facing application that serves as a Home Value Estimator.

***
SOURCE CODE: [Main Notebook](https://github.com/czarinagluna/regression-analysis-for-estimating-prices/blob/main/main.ipynb)

# Contact

Feel free to contact me for any questions and connect with me on [Linkedin](https://www.linkedin.com/in/czarinagluna/).
",0,0,1,0,real-estate,"[eda, linear-regression, random-forest, real-estate]",0
FiryanulRizky,Web-Penjualan-Properti,,https://github.com/FiryanulRizky/Web-Penjualan-Properti,https://api.github.com/repos/Web-Penjualan-Properti/FiryanulRizky,Projek Laravel 9,"<p align=""center""><a href=""https://laravel.com"" target=""_blank""><img src=""https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg"" width=""400""></a></p>

## Projek Web Penjualan Properti

Platform tansaksi yang melibatkan kesepakatan antara pembeli dengan agen properti.

## Teknologi Yang Digunakan

- Framework laravel 9.11
- PHP 8.1.4
- DBMS MySQL

## Highlight Fitur

- Login dengan Autentikasi Multi-level
- Tersedia panel Admin dan Super Admin
- Verifikasi Google reCAPTCHA (V3 ‚Äì Validasi Pengguna Otomatis) 
- Fitur kirim dan terima Email (Gunakan SMTP dari Mailtrap jika hendak menjalankan fitur ini via lokal)
- Support upload multiple image menggunakan library Image Handling ( ""intervention/image"")
- Menggunakan Googlecharts.Js dalam memvisualisasikan data transaksi ke dalam bentuk diagram (library ""consoletvs/charts"")
- Menggunakan sweetalert dalam tampilan notifikasi (library ""realrashid/sweet-alert"")

## Catatan

- Untuk menggunakan Fitur Pesan, perlu menggunakan layanan SMTP seperti contohnya mailtrap, daftar ke [mailtrap.io](https://mailtrap.io/), lalu buat layanan SMTP disana secara gratis.
- Setelah membuat SMTP, pastikan sudah mendapatkan informasi seperti berikut :

![smtp](https://user-images.githubusercontent.com/60762912/171605856-20ef75ea-e2cb-459d-9a24-ef7c5f9bc85f.PNG)

- Lalu Setting .env sesuai informasi yang didapat :

![env](https://user-images.githubusercontent.com/60762912/171605874-405c8f6d-e123-494d-802c-e34cf6226f9e.PNG)

## Screenshot Tampilan Antarmuka

![1  Home](https://user-images.githubusercontent.com/60762912/171592715-80036c85-820f-4ca0-9615-a063f07046bd.png)

![2  Register](https://user-images.githubusercontent.com/60762912/170884935-8443a64c-78eb-4d81-999d-119bb970f322.png)

![3  Verifikasi Email](https://user-images.githubusercontent.com/60762912/170884939-269dac79-e5a0-49ef-acfc-9e23222a8e4b.png)

![4  Email Verifikasi Masuk](https://user-images.githubusercontent.com/60762912/170884940-6a1eddf7-effe-45e9-8b31-7a4b47bdc4fc.png)

![5  Login](https://user-images.githubusercontent.com/60762912/170884941-001414bc-9a51-41fb-a9a6-a611ae59402e.png)

![6  Tambah Property](https://user-images.githubusercontent.com/60762912/170884942-a71e3fd0-795b-475f-b7f0-65541da04561.png)

![7  Edit Property](https://user-images.githubusercontent.com/60762912/171574269-23987006-3eb5-4f79-aefc-85600e026750.png)

![8  Pengajuan Transaksi](https://user-images.githubusercontent.com/60762912/170884956-4d4dcba3-4945-473f-8fe0-4b53299ccc95.png)

![9  Pengajuan Transaksi Berhasil](https://user-images.githubusercontent.com/60762912/171609901-6edf6d96-5ed7-402e-adf5-5b456d576688.png)

![10  Daftar Transaksi](https://user-images.githubusercontent.com/60762912/170884967-9b636c41-1404-4c9e-9c46-6deddf8bf7bd.png)

![11  Pesan Transaksi](https://user-images.githubusercontent.com/60762912/171592814-a7eacb8c-5976-46f5-8617-55298746b565.png)

![12  Daftar Pesan Masuk](https://user-images.githubusercontent.com/60762912/171573151-c4313b50-550e-42c3-a877-cbe23bdf792a.png)

![15  Blogpost](https://user-images.githubusercontent.com/60762912/171573088-6377ed5b-9f6d-4911-9ee3-8e2c75a23385.png)

![13  Login Admin](https://user-images.githubusercontent.com/60762912/170884976-3a09247a-3a71-4eb0-84c4-7dcf57376d99.png)

![14  Dashboard Admin](https://user-images.githubusercontent.com/60762912/171573080-ab07aca1-d694-4855-8668-1c7cba5b4c1a.png)

## Catatan Untuk Fitur Super Admin

- Untuk Login Super Admin bisa dilakukan dengan mengakses http://127.0.0.1:8000/admin/login (jika dijalankan secara lokal).
- Antarmuka Register Super Admin tidak disertakan pada projek ini, cara alternatif untuk dapat mengakses panel super admin adalah melakukan input data manual ke tabel admins pada database setelah melakukan migrasi.
- Berikut adalah Informasi yang bisa dimasukkan ke tabel admins : (catatan untuk password gunakan format enkripsi, misal 12345678 : $2y$10$tjEkfXLiHAgvgAD.2uDb4uxgQD1xxS4a2y85C4hmeCOgO3NP.fewy , kemudian masukkan value 1 pada kolom isSuper)

![super admin manual](https://user-images.githubusercontent.com/60762912/171594659-f678061b-94ab-4164-b213-e0ad207c8706.PNG)

<p align=""center"">
<a href=""https://travis-ci.org/laravel/framework""><img src=""https://travis-ci.org/laravel/framework.svg"" alt=""Build Status""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/dt/laravel/framework"" alt=""Total Downloads""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/v/laravel/framework"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/l/laravel/framework"" alt=""License""></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 2000 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[OP.GG](https://op.gg)**
- **[WebReinvent](https://webreinvent.com/?utm_source=laravel&utm_medium=github&utm_campaign=patreon-sponsors)**
- **[Lendio](https://lendio.com)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
",4,4,1,0,property-management,"[laravel9x, php81, property-management]",0
Pevicsanch,prices-of-rental-apartments-in-Amsterdam,,https://github.com/Pevicsanch/prices-of-rental-apartments-in-Amsterdam,https://api.github.com/repos/prices-of-rental-apartments-in-Amsterdam/Pevicsanch,Extraction and analysis of the prices of rental apartments in Amsterdam.,"# prices of rental apartments in Amsterdam.
___

Extraction and analysis of the prices of rental apartments in Amsterdam.

Here we are going to:
+ extract information about the apartments for rent in the city of Amsterdam, 
+  tore the information in .csv files, 
+ then we are going to treat the data (clean it) and finally we are going to make analysis with this data.

",0,0,1,0,real-estate,"[amsterdam, data, jupyter-notebook, price-tracker, python, real-estate, webscraping]",0
rileyleitao,WinnipegPropertyEvaluations,,https://github.com/rileyleitao/WinnipegPropertyEvaluations,https://api.github.com/repos/WinnipegPropertyEvaluations/rileyleitao,Housing evaluation tool based on Winnipeg property assessment,"Ôªø# WPGpropertyevaluations
 *A simple home assessment tool*
--------------------------
- A tool to accept an individuals address and in return provide them the assessment value of their home.
- The tool logs the users email along with address to a google sheet using an API. I used an ajax call from the jQuery library to make this call.
- The assessment was from the City of Winnipeg API which I used as rudimentary XML HTTPS request for.
- The project is hosted using Firebase
",0,0,1,0,real-estate,"[api, firebase, real-estate, web-application]",0
allmygod,minimal-home-management,,https://github.com/allmygod/minimal-home-management,https://api.github.com/repos/minimal-home-management/allmygod,"Web Application by React, Material-UI","<div align=""center"">
  <img src=""./public/offer1.png"" alt=""screenshot"" />
</div>
<div align=""center"">
  <img src=""./public/offer2.png"" alt=""screenshot"" />
</div>

# Offer1 Interview Exercise

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app) to give you a quick starting place for the exercise.


## Exercise Description

Image that you have been hired to create a new Real Estate application to help consumers purchase a home. Your new company is up against the a tight timeline and needs to deliver a minimum viable product (mvp) ASAP! In order to compete in the market place your MVP should provide the following core functionality:

- View/browse all available homes 
- Filter homes by City, Price, Number of Bedrooms
- Show detailed view for a selected home

However, if you really want to win over customers the following nice to haves would be greatly received by your customers:

- Sign-in Page
- Ability to share a home on social media
- Send a message to the seller's agent


## Solution Details

Create a detailed web app that solves for the following:

- modularity/re-use of components
- appropriate handling of flow/navigation
- appropirate handling of data/state
- Look and feel of the application (after all this is a GUI)
- quality (unit or functional tests are extra credit)

A sample [data set](./src/homes.json) representing properties has been included to help get you started on what an API call would likely return for the list of active properties. Due to limited timeframe for the assignment it is fine to mock out API calls, however, your application should still dispatch events as though it was making API calls to a service and handle/store data as though it was received from an API call.

As each solution is reviewed there will be an emphasis on the use of ReactJS best practices, design patterns, use of standard packages, use of ES6.


## Submitting the Exercise

1. Ensure that the scripts below (npm start/test/build) are all working for your solution. They should all run successfully.

2. Please make sure the repo is public. If you prefer to keep your repo private, then ensure you have granted read access to [tonyhernandez](https://github.com/tonyhernandez) and [mapayares](https://github.com/mapayares).

3. Completed the Google Form [here](https://forms.gle/We7VGi73apbECGKL6) once you are done with the code. Once submitted do not make any further changes to the code!


## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.
",1,1,2,0,real-estate-platform,"[react, react-router, real-estate-platform, redux]",0
supermartzin,real-estates-watcher,,https://github.com/supermartzin/real-estates-watcher,https://api.github.com/repos/real-estates-watcher/supermartzin,üè¶ Simple C# script that periodically watches for new sell or lease ads on selected Real estate advertisement portals and sends notifications on new ads added. üèó,"# Real Estate Watcher üîç
üè¶ Simple C# command-line application for periodic watching of selected Real estate advertisement portals and sending notifications on new ads. üèó
Supports watching adverts for **sells** as well as **leases**.

[![Build and publish .NET commandline script](https://github.com/supermartzin/real-estates-watcher/actions/workflows/dotnet.yml/badge.svg?branch=main)](https://github.com/supermartzin/real-estates-watcher/actions/workflows/dotnet.yml)

**Frameworks:** .NET 5 & .NET Standard 2.1, Node.js (for web scraping script)

**Supported OS:** Windows, macOS, Linux

### üåê Currently supported Ads portals:

 - [Bazo≈°.cz](https://www.bazos.cz/)
 - [Bezrealitky.cz](https://www.bezrealitky.cz)
 - [Bidli.cz](https://www.bidli.cz/)
 - [Bravis.cz](https://www.bravis.cz/)
 - [ƒåesk√© Reality.cz](https://www.ceskereality.cz/)
 - [Flatzone.cz](https://www.flatzone.cz/)
 - [M&M Reality.cz](https://www.mmreality.cz/)
 - [Realcity.cz](https://www.realcity.cz/)
 - [Reality.iDNES.cz](https://reality.idnes.cz/)
 - [RE/MAX.cz](https://www.remax-czech.cz/)
 - [Sreality.cz](https://www.sreality.cz/)

___

## üöÄ How to run the application

Run the app by executing the following command

    dotnet RealEstatesWatcher.UI.Console.dll --h <path to handlers.ini file> --p <path to portals.ini file> --f <path to filters.ini file> --e <path to engine.ini file>
    
##### * Description of all command-line options can be obtained by running the `--help` option

## üôå How to build, publish, deploy and prepare the application

Perform following steps and commands either from the [**root folder**](https://github.com/supermartzin/real-estates-watcher) (where the solution file is placed) or from the UI Console project in [**RealEstatesWatcher.UI.Console** folder](https://github.com/supermartzin/real-estates-watcher/tree/main/RealEstatesWatcher.UI.Console) in order to prepare the application from execution:

 1. **Restore** dependencies
      
      `dotnet restore`
      
 2. **Build**
      
      `dotnet build --configuration Release`
      
 3. **Publish** the UI Console project for desired platform

      `dotnet publish ./RealEstatesWatcher.UI.Console/RealEstatesWatcher.UI.Console.csproj -c Release`
      
    You can use your own publish parameters or use predefined profiles for Windows and Linux in [**RealEstatesWatcher.UI.Console/Properties/PublishProfiles/** folder](https://github.com/supermartzin/real-estates-watcher/tree/main/RealEstatesWatcher.UI.Console/Properties/PublishProfiles)
 
 4. **Copy Web scraper files** from [Tools/scraper folder](https://github.com/supermartzin/real-estates-watcher/tree/main/Tools/scraper) to **~/publish/scraper** directory.
 
 5. Make sure you have a **/configs** folder in the publish directory with all the configuration files or copy them manually from [**RealEstatesWatcher.UI.Console/configs/** folder](https://github.com/supermartzin/real-estates-watcher/tree/main/RealEstatesWatcher.UI.Console/configs)
    * `handlers.ini`
    * `portals.ini`
    * `filters.ini`
    * `engine.ini`

 7. **Deploy** the whole **publish directory** to server or run locally.
 
 8.  On the target machine, enter `scraper` folder and **install** all required **Node.js dependencies** with command
 
      `npm install`
      
      ##### * It's important to do this on the target platform as the dependencies are platform-specific

## üìù Configuration files description

**engine.ini** - configuration of the watching engine (*required* cmd argument `--e` or `-engine`)

    [settings]
    check_interval_minutes=10     # <number> | required | periodic checking interval, minimum 1 minute
    
**portals.ini** - configuration of all Ad portals to watch (*required* cmd argument `--p` or `-portals`)

    [<portal-name>]               # <string> | required | name of the portal name
    url=                          # <string> | required | url to a followed page with Ad posts
   
* Each portal needs to have a separate section in the file with the URL.
* If you don't want to watch specific portal, just comment its section or remove it completely from the config file.

**handlers.ini** - configuration of the classes handling the received Ad posts (*required* cmd argument `--h` or `-handlers`)

    [email]         
    enabled=                      # <bool>    | required | enable/disable this handler
    email_address_from=           # <string>  | required | email address for outgoing notifications
    email_addresses_to=           # <strings> | required | list of email addresses where to send notifications (separated by comma)
    sender_name=                  # <string>  | required | name of the sending entity for the email_address_from
    username=                     # <string>  | required | login username of sending email account
    password=                     # <string>  | required | login password of sending email account
    smtp_server_host=             # <string>  | required | URL of the SMTP server that handles sending notification emails
    smtp_server_port=             # <string>  | required | port of the SMTP server that handles sending notification emails
    use_secure_connection=        # <bool>    | required | switch for using TLS connection to the SMTP server
    skip_initial_notification=    # <bool>    | required | switch to disable sending the initial list of current Real estate offers
    [file]
    enabled=                      # <bool>    | required | enable/disable this handler
    main_path=                    # <string>  | required | path to the file where to save initial and new Ad posts
    separate_new_posts=           # <bool>    | optional | set 'true' if you want to save new Ad posts in separate file from the initial list
    new_posts_path=               # <bool>    | optional | path to the file where to save new Ad posts (required when separate_new_posts=true)
    
**filters.ini** - configuration of the Ads filter (*optional* cmd argument `--f` or `-filters`)

    [basic]
    price_min=          # <number>  | optional | minimal price of Real estate
    price_max=          # <number>  | optional | maximal price of Real estate
    layouts=            # <strings> | optional | layouts of Real estate (allowed enum values below)(separated by comma)
    floor_area_min=     # <number>  | optional | minimal floor area of Real estate
    floor_area_max=     # <number>  | optional | maximal floor area of Real estate
    
 * Leave any of the values empty if you don't want to filter Ad posts by it
 * **Layout** option supported values: `1+1, 1+kk, 2+1, 2+kk, 3+1, 3+kk, 4+1, 4+kk, 5+1, 5+kk`
",0,0,2,3,real-estate,"[notifications, real-estate, watcher]",0
moritzwilksch,BerlinRealEstatePrices,,https://github.com/moritzwilksch/BerlinRealEstatePrices,https://api.github.com/repos/BerlinRealEstatePrices/moritzwilksch,üè° Statistical analysis of Berlin real estate prices for IDS702 class @ Duke University,"# BerlinRealEstatePrices üè° <img width=90 align=""right"" src=""https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Duke_University_logo.svg/1024px-Duke_University_logo.svg.png"">
Statistical analysis of Berlin real estate prices for [IDS702 class](https://ids702-f21.olanrewajuakande.com) @ Duke University.

> **Research Question**  
> Which factors influence listing prices of Berlin real estate?

# Methodology üõ†Ô∏è
- Web scraping data from `immobilienscout24.de`, `immowelt.de`, and `ebay-kleinanzeigen.de`
- Data cleaning
- Modeling
  - Linear Regression
  - Hierarchical linear model with random intercepts
 
 # Results üî¨
*You can download the full report [here](https://github.com/moritzwilksch/BerlinRealEstatePrices/raw/main/documents/report.pdf). It highlights...*
### The relationship between property attributes and price
> üîë Take aways:

- larger properties are more expensive
- temporary living is overpriced (although you pay for flexibility...)
- houses (compared to apartments, everything else held constant) are significantly more expensive to rent, but cheaper to buy
- offers from private sellers and landlords tend to be cheaper than offers from commercial entities

### The importance of location
> üîë Take away: Properties in the city center are more expensive

![asdf](documents/plots/geoplot_rentals_and_sales.png)

### Zip code areas that are ""cheap"" considering their proximity to the city center
> üîë Take away: Some zip code areas offer good value for money if you want to be close to the action

![asdf](documents/plots/dist_to_mitte.png)
",0,0,1,0,real-estate,"[berlin, real-estate, regression, statistical-analysis]",0
Exclusiveideas,Realtor,,https://github.com/Exclusiveideas/Realtor,https://api.github.com/repos/Realtor/Exclusiveideas,A real-estate website with realtime data and information on houses for rent and for sale.,"# Realtor
![realtor](https://user-images.githubusercontent.com/76836006/165221792-61abf385-e711-499b-b150-446003a5d105.JPG)
![realtor2](https://user-images.githubusercontent.com/76836006/165221810-ab5ba082-a030-4626-91b2-1ea24ecea004.PNG)

## STACK
[![React](https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB)](https://github.com/Exclusiveideas)
[![Chakra-UI](https://img.shields.io/badge/Chakra--UI-319795?style=for-the-badge&logo=chakra-ui&logoColor=white)](https://github.com/Exclusiveideas)


## Live Version
Click [HERE](https://realtor-opal.vercel.app) to visit the live version of this web application.


## Installation Steps 
**1. First clone the project by running** <br />
   ``` git clone https://github.com/Exclusiveideas/Realtor.git ```
<br />

**2. Go into the project directory**  <br />
   ``` cd Realtor ``` 
   <br />
   
**3. Install all the dependencies** <br />
    ``` npm i ``` 
    <br />
    
**4. Start the application development server**<br />
    ``` npm start ```

<br /> 


**The app is now running**
<br />

#### Don't forget to star this repository‚ú®‚ú®.
",20,20,2,1,real-estate-website,"[api-integration, carousel-slider, chakra-ui, javascript, react, reactjs, real-estate-website]",0
Eddie4k-code,View-Recently-Sold-Houses-Python,,https://github.com/Eddie4k-code/View-Recently-Sold-Houses-Python,https://api.github.com/repos/View-Recently-Sold-Houses-Python/Eddie4k-code,Using Realty API From RapidAPI to view houses in a location that recently sold and exporting the data to an excel file. Also within this script I use plotly to create a pie chart.,,0,0,1,0,real-estate,"[api, estate, houses, python, rapidapi, real, real-estate]",0
AyoCodess,Dynamic-Search-Property-sales-app-REACT-TYPESCRIPT,,https://github.com/AyoCodess/Dynamic-Search-Property-sales-app-REACT-TYPESCRIPT,https://api.github.com/repos/Dynamic-Search-Property-sales-app-REACT-TYPESCRIPT/AyoCodess,Working with dynamic search,"# Homeflow Posh Property Tech Test

## Live link: https://homeflow-app.netlify.app/

## Main features

1. Dynamic search
2. Can bookmark properties

## Other featured added

3. Basic bulk property description text formatting.
4. Long property description appears in modal via read more button.
5. Optimized app for all screen sizes more effectively.

## Considertions

Use a state management tool such as Redux or Recoil as app grows to avoid pop-drilling through several component levels deep.
",0,0,1,0,real-estate,"[react, real-estate, search, search-interface]",0
JKhan01,blockchain_real_estate_workaround,,https://github.com/JKhan01/blockchain_real_estate_workaround,https://api.github.com/repos/blockchain_real_estate_workaround/JKhan01,Repository for blockchain based real estate transactional workaround using Node and Python.,"# blockchain_real_estate_workaround
Repository for blockchain based real estate transactional workaround using Ganache, Solidity and Python3.

## The documentation of solidity and web3 was extensively referred for this project development. With time these documentations are updated. Do prefer the latest documentation and modules for project to work effectively if this project breaks.

## The development was done on Python 3.6
## The project was tested on Python 3.6

## About Branch: <u>main</u>
> This is the development and workaround branch.

### Directory Structure
```
|--- blockchain_workaround      ### Directory wherein basic solidity and python integration was tried and tested.
|
|--- land_registration_workaround   ### Use case specific workaround was performed in this directory.
|
|--- web_application   ### Final web application for use case was developed under this directory.

```

### To start the project implementation on your Desktop
> Install The Dependancies.
>> 1. Download and Install Node
>> 2. Install Ganache-cli using NPM.
```
    npm install -g ganache-cli
```
>> 3. Setup the solidity compiler
```
    npm install -g solc
```
>> 4. Setup the python virtual environment. 
>> 5. Install the python requirements.
```
    pip install -r requirements.txt
```

### References
* https://medium.com/coinmonks/how-to-develop-ethereum-contract-using-python-flask-9758fe65976e
* https://github.com/Kerala-Blockchain-Academy/Land-Registration
* https://github.com/ethereum/solc-js
* https://github.com/ethereum/py-solc
",0,0,1,0,real-estate,"[blockchain, ganache-cli, python, real-estate, solc, solcjs, solidity-language]",0
ashmitan,Rental-Database-Project,,https://github.com/ashmitan/Rental-Database-Project,https://api.github.com/repos/Rental-Database-Project/ashmitan,"This repository contains database management system for Rental Property companies. Through this project, any rental property management company can track customers, property assets, maintenance requests, payments, employees and scheduled maintenance. Company can build analytics on this database and automated daily reports will be sent.","# Rental-Database-Project

## Purpose: 
This project aims to create a data model and design a complete database for rental property management system. It aims to cover the whole business model of a rental property management system which deals with different users who are going to use this database.

## Approach: 
I have followed Forward Engineering approach and designed EER model diagram first by defining tables and their attributes, established relationships and database objects like tables schema is populated. 
Here is the below approach to design an EER model ÔÉ†
a)	Building Details table ‚Äì Consists of details of different buildings in the vicinity or on a street. 
b)	Unit Details table ‚Äì consists of details of the unit like unit number, resident id, no of bedrooms, no of washrooms, pet allowed, in unit laundry facility available.
c)	Staff Table ‚Äì Management Staff and Maintenance Staff are responsible for overall management of units in respective buildings. Management staff takes care of lease details, payments, inspection checks and maintenance requests logged, if any. Maintenance Staff is responsible for servicing or repairing items found during maintenance requests logged or during inspection checks.
d)	Appointment schedules ‚Äì Residents can schedule an appointment with management staff for either logging maintenance requests or any other inquiries/concerns they have during the stay.
e)	Inspection checks ‚Äì This table is designed to serve the purpose that all inspection checks are tracked and if any observation is found then they can be used for corrections or warnings to be given to residents.
f)	Maintenance Requests ‚Äì This table helps to keep track of maintenance requests logged and ensure that they are being serviced by the maintenance staff on time.
g)	Lease Details: It keeps a track of lease details agreed between management company and resident Id. It has attributes like lease id, lease term, lease start and end date etc. 
h)	Lease Payment Details:  This helps in keeping track of payment details such as monthly rent, deposit, pet deposit, total payment amount etc. 
i)	Security deposit returns: This helps in keeping track of expired leases and management company is now responsible for repayment of security deposits which they took from the residents during the start of the lease. 
j)	Role Table: This defines different roles of people here. 

### Database Objects: 

1)	Tables ‚Äì This has been described above. 
2)	Views ‚Äì 
viewLeaseDetails : This view helps in seeing all the lease and lease payment details.

viewResidentialDetails : This view helps in viewing Residential Data

3)	Functions ‚Äì calculateTotalAmount(). This function helps in determining total amount received by management staff for the lease.
4)	Stored Procedures ‚Äì usp_AddDatatoSecurityDepositReturns()
5)	Triggers ‚Äì 
negative_value : This trigger helps in validating the data for negative values entered on number of bedrooms in LeaseDetails table. 

negative_value_bathrooms : This trigger helps in validating the data for negative values entered on number of bathrooms in LeaseDetails table. 

6)	Transactions ‚Äì transactionView

### Users :
1)	User 1: This user is part of management staff who can login and check maintenance requests logged, appointment schedules, inspection checks. 
2)	User 2 : This user is part of maintenance staff who can check maintenance requests.
3)	User 3 : This is a resident staying in that locality. They can login and check all the details related to them and maintenance requests logged by them. 
",13,13,1,0,property-management,"[database-management, eer-diagram, mysql-database, property-management]",0
Jubilee101,SweetHome,,https://github.com/Jubilee101/SweetHome,https://api.github.com/repos/SweetHome/Jubilee101,SweetHome is a property management system for managers and residents to better communicate with one another,"# SweetHome
SweetHome is a property management system for managers and residents to better communicate with one another
![DashBoardPage](https://github.com/Jubilee101/SweetHome/blob/main/demoResources/sweethome.png)

### Notice

(10/05/2023) I'm getting a question on setting up the project (sorry for seeing that 1 month later). I'm sorry but the project was
never properly packaged and released. The database in this project was hosted on an Amazon RDS server. I deliberately left out
the configuration of that part for safety reason.  So in order to make the project to work you'll need to launch an RDS instance
and configure properly. You will also want to connect to google cloud storage since that's where the images are stored. Then you can run the backend in a proper IDE such as Intellij locally. I'm pretty occupied right now and probably won't have time to setup
a wiki any time soon. But if you'd like you can leave your email in my form and I'll reach out. Thank you for liking my project.

### Current Features
1. Invoice dashboard with long polling listening to backend for any public/personal invoice update
2. Quick and simple maintenance request sending/handling and public utils reservation/cancellation
3. Discussion board that supports live chat and infinite scrolling!

See video demo here:

[![SweetHome Demo](https://res.cloudinary.com/marcomontalbano/image/upload/v1660682021/video_to_markdown/images/youtube--R0u2Kd4XH1c-c05b58ac6eb4c4700831b2b3070cd403.jpg)](https://www.youtube.com/watch?v=R0u2Kd4XH1c ""SweetHome Demo"")

### Updates
We now support canceling public utils on the resident side! No more worries that you accidentally clicked something!
![CancelReservation](https://github.com/Jubilee101/SweetHome/blob/main/demoResources/deleteReservation.gif)

### Tools and Frameworks
SweetHome mainly uses Spring Boot to build its backend and React.js for the frontend. It also utilized GCS to store images. 
Spring Data JPA is used for better and easier database manipulation.

### Notice
This is the backend implementation of SweetHome, please see frontend [here](https://github.com/Jubilee101/SweetHomeFE) :)
",80,80,1,0,property-management,"[backend, property-management, react, spring-boot]",0
arslan-butt,property,,https://github.com/arslan-butt/property,https://api.github.com/repos/property/arslan-butt,Property sales and purchase between vendors,# Property sales and purchase between vendors,0,0,1,5,property-management,"[bootstrap, php, php7, property-management, yii2]",0
scilentgemini,searchmandu,,https://github.com/scilentgemini/searchmandu,https://api.github.com/repos/searchmandu/scilentgemini,"It's just a college project that I've been working on around the clock. It's not much, but it's honest work...i guess","<p align=""center""><a href=""https://laravel.com"" target=""_blank""><img src=""https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg"" width=""400"" alt=""Laravel Logo""></a></p>

<p align=""center"">
<a href=""https://github.com/laravel/framework/actions""><img src=""https://github.com/laravel/framework/workflows/tests/badge.svg"" alt=""Build Status""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/dt/laravel/framework"" alt=""Total Downloads""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/v/laravel/framework"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/l/laravel/framework"" alt=""License""></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

You may also try the [Laravel Bootcamp](https://bootcamp.laravel.com), where you will be guided through building a modern Laravel application from scratch.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 2000 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[OP.GG](https://op.gg)**
- **[WebReinvent](https://webreinvent.com/?utm_source=laravel&utm_medium=github&utm_campaign=patreon-sponsors)**
- **[Lendio](https://lendio.com)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
",0,0,1,0,real-estate,"[laravel, laravel-framework, real-estate, real-estate-platform, real-estate-website]",0
cquilboss,searchmap.js,,https://github.com/cquilboss/searchmap.js,https://api.github.com/repos/searchmap.js/cquilboss,Open Source real estate map search in JS and WebGL,"# searchmap.js

Open Source real estate map search in JS and WebGL.

## License

[MIT](https://choosealicense.com/licenses/mit/)

## Changelog

[CHANGELOG.md](https://github.com/cquilboss/searchmap.js/CHANGELOG.md) 

## Contributing

Pull requests are welcome.
For major changes, please open an issue first to discuss what you would like to change.

## Dependencies

- Mapbox GL JS (Free tier, more customizable and cheaper than Google Map)
- An API endpoint to get the real estate data

## Compatibility

- IE11, Edge 12
- Firefox 4+
- Chrome 8+, Android 76
- Safari 5.1, iOS Safari 8
- Opera 12

Note: see [caniuse.com/#feat=webgl](https://caniuse.com/#feat=webgl)

## Features

- Design fully customizable
- Free to use and customize
- 3 view mode: Map, List and Mix
- Automatic selection for mobile
- Mix mode ratio and left/right configurable
- Autodetect browser language
- Already translated in >20 languages
- Handle properly Right-To-Left languages like Arabic or Hebrew
- Lazy loading of the pictures
- Display 100% of the result on the map
- Allow to sort results in list mode
- Display custom POI (point of interests)
- Display Geojson polygon
- Display Custom price / total units
- Server communication optimized for performance
- Connect multiple endpoint to serve faster content
- Works on mobile
- Display active listings, sold listings and parcels
- Group listings in the same building
- Handle local cache and local storage
- Compatible with VueJS, ReactJS, AngularJS or SvelteJS
- Update browser URL
- Allow search by polygon
- SEO compliant (need some coding)

## Demo

[Custom API](https://github.com/cquilboss/searchmap.js/demo/custom.htm)

## Installation

### Manual method

Copy-paste files in dist/ to your local server and in your HTML page before </head> add

```HTML
<script src=""https://api.mapbox.com/mapbox-gl-js/v1.10.1/mapbox-gl.js""></script>
<link href=""https://api.mapbox.com/mapbox-gl-js/v1.10.1/mapbox-gl.css"" rel=""stylesheet"" />
<script src=""https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.9/mapbox-gl-draw.js""></script>
<link href=""https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.9/mapbox-gl-draw.css"" rel=""stylesheet"" />
<script src=""https://cdnjs.cloudflare.com/ajax/libs/vanilla-lazyload/12.3.0/lazyload.min.js""></script>
<script src=""searchmap.lang.js""></script>
<script src=""searchmap.js""></script>
<link href=""searchmap.css"" rel=""stylesheet"" />
```

In your HTML page after <body> add
```HTML
<div id=""searchmap"" class=""searchmap""></div>
<script>
new SearchMap({
  container_id: ""searchmap""
});
</script>
```

### Compilation method

Install via Yarn or NPM not done yet.

## Roadmap / Ideas

Below a study about some good practice in term of UX/UI found on large real estate portal or tech brokerage.

### Markers

Markers icons for properties need to be similar in order to be separate other information that can be displayed on the map. Using icon, number or colors can help to distinguishSometimes there are multiple property at the same location needs to be clear, ex. having an indication of the size (label or icon size) and separate single results.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/funda.nl.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/funda.nl.png)

[funda.nl](https://funda.nl) with 3 different icon markers (single, 1-30, multiple)

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/zillow.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/zillow.png)

[zillow.com](https://zillow.com) different colors per type

### Animation

Sometimes map navigation can be sluggish so adding animation while loading elements help users

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/seloger-anim.gif](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/seloger-anim.gif)

[seloger.com](https://seloger.com) marker animation when zoomed

### Clustering

Display all the listings on the map to avoid the feeling that properties are missing. Then do not overload the map and create dynamic clusters that varies with zoom.
Also using a indication of the size of the cluster with a number and different size is better in term of UX.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/homesnap.com.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/homesnap.com.png)

[homesnap.com](https://homesnap.com) with a number and an according circle size

### Street Number, Train Station

In real-estate it can be nice to get the street number, train station, and every helpful infomration when zoomed in.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/street-number.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/street-number.png)

[mapbox.com](https://mapbox.com) configured to display street numbers when zoom 17+

### Parcel view ü§ì

When zoomed display the parcel with the estimated price

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/redfin-parcel.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/redfin-parcel.png)

[redfin.com](https://redfin.com) parcel view

### POI ü§ì

Display all the point of interest around the properties. More for an advanced usage. Can also be used to generate a Walkscore.

- Transit (train, tram, bus, metro, boat, scooter, bike, wheelchair, ..)
- Schools (elementary, middle, high, private, public, ..)
- Supermarket
- Schools w/ district

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/pararius.nl.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/pararius.nl.png)

[pararius.nl](https://pararius.nl) point of interests

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/nooklyn.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/nooklyn.png)

[nooklyn.com](https://nooklyn.com) metro lines with colors

### Overlays ü§ì

Display on the map information like satellite, bird view, crime, flood insurance, elevation overlays, mobile or Internet speed, etc.. Can be count-productive in some location.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/meilleursagents-price.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/meilleursagents-price.png)

[meilleursagents.com](https://meilleursagents.com) price map

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/home61.com-flood.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/home61.com-flood.png)

[home61.com](https://www.home61.com/for-sale/real-estate/) flood insurance in colors

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/realtor.com-crime-overlay.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/realtor.com-crime-overlay.png)

[realtor.com](https://realtor.com) crime in colors

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/immobilienscout24-speed.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/immobilienscout24-speed.png)

[immobilienscout24.de](https://immobilienscout24.de) internet speed on the map

### Highlight Map & List

In Mix mode (Map + List/Photo), clicking on a property in the map should highlight the property in the list, and same in the other way. The list should also scroll to be visible.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/apartment.com.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/apartment.com.png)

[apartment.com](https://apartment.com) when click on map it scroll and highlight in the list, same in the other way

### Listing already seen

Be able to identify properties already clicked, visited or in favorite help a lot.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/openlistings.com.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/openlistings.com.png)

[openlistings.com](https://openlistings.com) put marker label in gray once clicked

### Open houses

Display the coming open houses directly on the map to convert more.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/compass-openhouse.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/compass-openhouse.png)

[compass.com](https://compass.com) open houses on the map

### Properties with an approximate location

When dealing with properties we cannot geolocate like non-exclusive properties, a nice radius or polygon can help

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/bienici.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/bienici.png)

[bienici.com](https://bienici.com) with non-exclusive properties

### New properties

Display new property but also price reduced can be helpful. 

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/xome.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/xome.png)

[xome.com](https://xome.com) displays NEW listings

### Tags

Display tags, just be careful not do a rainbow of icons, for example nobody knows what stars are meaning.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/redfin.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/redfin.png)

[redfin.com](https://redfin.com/) add tags like HOT, STAR, VIDEO, EXCLUSIVE

### List mode ü§ì

Instead of large picture in mix mode, having a list mode like a spreadsheet. Sometimes also possible to export into a spreadsheet.

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/redfin-list.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/redfin-list.png)

[redfin.com](https://redfin.com) list mode

### Dark mode ü§ì

All new browser are now compatible with a dark mode, map can do that too

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/darkmode.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/darkmode.png)

[mapbox.com](https://mapbox.com) custom map for dark mode

### Handle Go Back

When click on the Go Back button, it should go back to the previous map search.

### Property detail

See the property detail should open a new window (ala Airbnb). Replacing the existing page make navigation difficult because going back will take too long. It's also possible to open in the property detail page in same page in a large popup like Zillow but it can render the page very heavy.

### WebGL

Thanks to WebGL [adoption](https://caniuse.com/#feat=webgl) maps can now have a 3D effect like on Waze App. Furthermore loading is far smoother than with previous Leaflet tiles. 

![https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/home61.png](https://raw.githubusercontent.com/cquilboss/searchmap.js/master/doc/home61.png)

[home61.com](https://www.home61.com) map with 30¬∞ pinch

### Performance

Page speed is important. Try to use the minimum of javascript overhead (ideally just vanilla JS). Reduce the number of HTTP call and their size. Dedicate data storage, 100% in memory, that support Spatial queries like Polygon and Point (PostGIS). MongoDB, MySQL>5.6, MariaDB and Postgres are all good solutions. Best performances are done with PostGre+PostRest then probably MongoDB. Heavily use client cache and service workers if needed. Parallelize the search queries on different datacenter and use the fastest (ala Algolia). 

### Loading animation

Should not block the navigation like click'n drag. To avoid loading when moving we can also have not checked by default ""Redo search in the area option""

### Other examples

- Ratio Map/Photo
- Photo Size, Format and compression
- Photo Carousel (or Video)
- Map Property Popup (ala Zillow)
- Map boundaries, zoom limits and speed
- Property Detail (page or large popup)
- Zoom/Recenter on client location button ü§ì
- Map real-time animation like Traffic, Metro, Weather, .. ü§ì
- Polygon/Draw Search with ""Expand Search""/""Remove outline"" button ü§ì
- Polygon School district ü§ì
- Save & Share Search
- Favorite / Hide / Report a Property ü§ì
- Property Comparison ü§ì
- UTF-8 and RTL support
- Call to Action
- Display the total properties found",0,0,1,0,real-estate,"[googlemap, idx, map, mapbox, mapbox-gl-js, mapsearch, real-estate, realestate, searchmap]",0
bradrivenburgh,rei-search,,https://github.com/bradrivenburgh/rei-search,https://api.github.com/repos/rei-search/bradrivenburgh,An app for real-estate investors who wish to do high-level research on geographies (specifically MSAs) in which they want to invest.,"# rei-search

## About the rei-search app

Real estate investment decisions should always begin with due diligence in order to stack the deck in your favor. Even before you decide on the type of real estate you wish to invest in, you should know the details about where you will invest.

### Metropolitan Statistical Areas
This app focuses on discovering details about metropolitan statistical areas (MSAs), which are geographic regions centered around areas of high population density (i.e., big cities) and integrated economies. Statistics about the population and economy of MSAs in the geography you wish to invest are important to consider if you want to be successful as an investor.

There are 392 (as of 2020) MSAs in the United states, and you can explore key statistical information about each of them with this app.

## Live app
- [rei-search](https://bradrivenburgh.github.io/rei-search/)

## Screenshots
### Landing screen
![Landing screen](images/screenshots/rei-search-landing.png)

### Responsive mobile-first design
|Collapsed form | Expanded form |
| --- | --- |
|![Mobile map with collapsed menu](images/screenshots/rei-search-mobile-map-with-stats.png) | ![Mobile map with expanded menu](images/screenshots/rei-search-mobile-map-expanded-menu.png) |

### Discover and explore MSAs
![Close up view of MSA boundary and geography](images/screenshots/rei-search-close-up-map.png)

### Get key statistics 
![Zoomed out view of MSA with statistics showing](images/screenshots/rei-search-map-with-stats.png)

## Technologies used
- HTML
- CSS
- JavaScript
- JQuery
- LeafletJS
- CitySDK

## How to run
- Clone the repository
- Open the index.html file in a browser of your choice

## Planning
- [Project board](https://github.com/users/bradrivenburgh/projects/1)",0,0,1,1,real-estate,"[citysdk, geojson, leafletjs, real-estate, us-census]",0
osauldmy,scrapy-mongodb-fastapi-apartments,,https://github.com/osauldmy/scrapy-mongodb-fastapi-apartments,https://api.github.com/repos/scrapy-mongodb-fastapi-apartments/osauldmy,"Web scraping of real estates with Scrapy, pydantic, FastAPI, MongoDB and MinIO","# Web scraping & API proof-of-concept

Job candidate homework on real estate web scraping topic.

Modelling/representing real estate data in backend, scraping, cleaning and serving them through the REST API.

## Homework requirements

*DISCLAIMER: Some decisions in these project don't reflect my point of view on design, but still comply with homework requirements:*

- scraper scrapes given website(s) (which may have dynamic content with JS)
- models/schemas should be designed in a way they can cover different heterogeneous systems
- scraper runs should be repeatable, scraper may be launched more than once per day (in that case data should be overwritten)
- data should be stored in database/storage with granularity of one day
- scraped data should be available through REST API
- API server shouldn't be read-only, but CRUD, so data may come to database through API as well

# Designing & modelling

## Architecture

For scraping `scrapy` framework was chosen as it has all batteries included.

Schemas/models representing real estates/apartments are implemented using `pydantic`, so they have parsing&validation
out-of-the-box.

For API the choice was done for `FastAPI` which has first-class support for pydantic and also has a lot of batteries included, like openapi docs viewer.

""Snapshot"" requirement is implemented using `S3`-like object storage (`MinIO`), so each day there are separate jsons
which may be rewritten on repeated scraper execution. Object storage doesn't care about redundancy in this manner, so
each day JSON may have duplicates.

As for database, NoSQL is my personal preference for such situations, `MongoDB` is quite nice for JSON data,
is easily scalable, has good suport for geospatial queries etc. Scraper does care (TODO) about duplicates when saving to db is done.

Project is kind of monorepo. Talking about using it in production, I'd make a lib from `shared/` to be installable using pip.
API could be run as a container, similarly to Mongo and Minio. Scraper can/should be launched manually or using some kind of planner,
maybe cron, maybe K8S cronjob, maybe something like Apache airflow.

![](./docs/architecture.png)

# Development / Installation / Usage

## Installation

```shell
python3 -m venv .venv
source .venv/bin/activate
pip install pip-tools pre-commit
pip-sync requirements-dev.txt
pre-commit install
```

## Running

Check and update `.env` to your liking.

Run MinIO and MongoDB in background: `docker-compose up -d`

Run API (todo docker): `uvicorn --reload --reload-dir api api:app`

API is available at http://localhost:8000 and OpenAPI docs are available at http://localhost:8000/docs

Run scraper: `scrapy run`

Results can be checked in Mongo UI at http://localhost:8081 and in MinIO at http://localhost:9001 (credentials are located in `.env`)

![](./docs/mongo_ui.png)
![](./docs/minio.png)

## Linting

Format using `black .` and `isort .`

```shell
pre-commit run -a
# or manually
ruff .
mypy .
```

## Testing

```shell
pytest
```

## Locking dependencies

```shell
pip-compile --no-emit-index-url --output-file=requirements.txt --resolver=backtracking pyproject.toml
pip-compile --all-extras --no-emit-index-url --output-file=requirements-dev.txt --resolver=backtracking pyproject.toml
```

For repinning `rm requirements.txt requirements-dev.txt && pip-compile ...`

## TODO

- dockerize api
- PUT route in api/ for update/replacement
- better docs (probably split stuff into multiple markdown files, put them to docs/ and point there from README)
- duplicates checker in scraper pipeline
- ensure photos are saved only once, when apartment is saved to mongo
- save logs to minio (yes, it's on diagram, but not yet implemented)
- more unit tests, integration tests
  * maybe try scrapy-autounit, scrapy-html-storage or similar plugins.
  * casettes unfortunately don't work for twisted, maybe try some sockets/dns mocking
- bonuses
  * snippets: loading data from mongo and casting jsons into Apartment pydantic model
  * maybe jupyter notebook with geo map etc
",0,0,1,0,real-estate,"[fastapi, mongodb, real-estate, scrapy, web-scraping]",0
Rose-njeru,House-Property-Sales-Analysis,,https://github.com/Rose-njeru/House-Property-Sales-Analysis,https://api.github.com/repos/House-Property-Sales-Analysis/Rose-njeru,Real Estate Analysis in SQL,"# House-Property-Sales-Analysis
The retail industry now heavily relies on data analytics tools to better estimate the prices of different properties. This case study analyses the sales of house properties in a city in Australia using **SQL**.

## The Dataset
The dataset contains five columns:
+ Datesold: The date when an owner sold the house to a buyer.

+ Postcode: 4-digit postcode of the suburb where the owner sold the property

+ PropetyType: The type of property either a house or unit.

+ Price: The price for which the owner sold the property.

+ Bedrooms: Number of bedrooms
  
[Dataset](https://www.kaggle.com/datasets/htagholdings/property-sales)

## Problem Statement

This data analytics project aims to analyze and derive insights from the property sales dataset  to  understand the factors influencing property prices and explore trends in the real estate market.

## Objectives
 **Price Determinants**
 
 Identify  factors influencing property prices, such as location, property type, and the number of bedrooms.

**Market Trends**

Analyze trends in property sales over time to understand how the market has evolved.

**Geographic Variation**

Explore geographic variation in property prices by analyzing data across different postcodes.

 **Bedroom Analysis**

 Investigate how the number of bedrooms affects property prices and demand.

 **Market Performance**
 
 Evaluate the overall performance of the real estate market based on property sales data.

## Key Questions

1. What are the main factors contributing to variations in property prices for houses in the dataset?

2. Does the number of bedrooms have a noticeable impact on property prices, and if so, what is the relationship?

3. How has the average property price changed over time? Are there any seasonal patterns or long-term trends?

4.  Is there any correlation between property prices and property type?

5. Are there significant differences in property prices between different postcodes?

6. Deduce the top six postcodes by year's price.

7.  Are there  specific neighborhoods or postcodes that have shown consistent growth in property prices?

8.  Which date corresponds to the highest number of sales?

9.  Which year witnessed the lowest number of sales?

10. Find out the postcode with the highest average price per sale.

11. Are there any patterns or trends in the dates of property sales?

12.  What is the overall health of the real estate market based on the sales data?

13.   Can we identify any potential investment opportunities or areas where property prices have the potential to increase significantly?

## Assumptions
  - Currency remained stable over time. Currency fluctuations impact price changes.
  - Market homogeneity; implying  the market is relatively homogenous within the defined geographical areas ( postcodes).
  - Market conditions were stable over the analysis period. Market fluctuations can happen due to economic or political factors.
  - All relevant factors influencing property prices are included in the dataset i.e. external factors can influence price e.g. market sentiment but for this case study, only the variables listed in the dataset affect price.
  - Changes in Property prices are reflected in the data promptly.

",0,0,1,0,real-estate,"[mysql, real-estate, sales, time-series]",0
low-earth-orbit,rent-vs-buy,,https://github.com/low-earth-orbit/rent-vs-buy,https://api.github.com/repos/rent-vs-buy/low-earth-orbit,A simple and sensible calculator for comparing renting vs owning a home.,"# rent-vs-buy

A simple and sensible calculator for comparing renting vs owning a home.

Latest deployed version: [Rent vs Buy](https://low-earth-orbit.github.io/rent-vs-buy/)
",0,0,1,0,real-estate,"[personal-finance, real-estate]",0
MushahidAli,Ekaralu,,https://github.com/MushahidAli/Ekaralu,https://api.github.com/repos/Ekaralu/MushahidAli,Just a static visualization for a portfolio based website!,,0,0,1,0,real-estate,"[ekaralu, real-estate]",0
devmahmud,btre_project,,https://github.com/devmahmud/btre_project,https://api.github.com/repos/btre_project/devmahmud,Django real estate website project,"# btre_project
Django real estate website project


# Deployment Instructions From Brad Traversy.

# Django Deployment to Ubuntu 18.04

In this guide I will go through all the steps to create a VPS, secure it and deploy a Django application. This is a summarized document from this [digital ocean doc](https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-18-04)

Any commands with ""$"" at the beginning run on your local machine and any ""#"" run when logged into the server

## Create A Digital Ocean Droplet

Use [this link](https://m.do.co/c/5424d440c63a) and get $10 free. Just select the $5 plan unless this a production app.

# Security & Access

### Creating SSH keys (Optional)

You can choose to create SSH keys to login if you want. If not, you will get the password sent to your email to login via SSH

To generate a key on your local machine

```
$ ssh-keygen
```

Hit enter all the way through and it will create a public and private key at

```
~/.ssh/id_rsa
~/.ssh/id_rsa.pub
```

You want to copy the public key (.pub file)

```
$ cat ~/.ssh/id_rsa.pub
```

Copy the entire output and add as an SSH key for Digital Ocean

### Login To Your Server

If you setup SSH keys correctly the command below will let you right in. If you did not use SSH keys, it will ask for a password. This is the one that was mailed to you

```
$ ssh root@YOUR_SERVER_IP
```

### Create a new user

It will ask for a password, use something secure. You can just hit enter through all the fields. I used the user ""djangoadmin"" but you can use anything

```
# adduser djangoadmin
```

### Give root privileges

```
# usermod -aG sudo djangoadmin
```

### SSH keys for the new user

Now we need to setup SSH keys for the new user. You will need to get them from your local machine

### Exit the server

You need to copy the key from your local machine so either exit or open a new terminal

```
# exit
```

You can generate a different key if you want but we will use the same one so lets output it, select it and copy it

```
$ cat ~/.ssh/id_rsa.pub
```

### Log back into the server

```
$ ssh root@YOUR_SERVER_IP
```

### Add SSH key for new user

Navigate to the new users home folder and create a file at '.ssh/authorized_keys' and paste in the key

```
# cd /home/djangoadmin
# mkdir .ssh
# cd .ssh
# nano authorized_keys
Paste the key and hit ""ctrl-x"", hit ""y"" to save and ""enter"" to exit
```

### Login as new user

You should now get let in as the new user

```
$ ssh djangoadmin@YOUR_SERVER_IP
```

### Disable root login

```
# sudo nano /etc/ssh/sshd_config
```

### Change the following

```
PermitRootLogin no
PasswordAuthentication no
```

### Reload sshd service

```
# sudo systemctl reload sshd
```

# Simple Firewall Setup

See which apps are registered with the firewall

```
# sudo ufw app list
```

Allow OpenSSH

```
### sudo ufw allow OpenSSH
```

### Enable firewall

```
# sudo ufw enable
```

### To check status

```
# sudo ufw status
```

We are now done with access and security and will move on to installing software

# Software

## Update packages

```
# sudo apt update
# sudo apt upgrade
```

## Install Python 3, Postgres & NGINX

```
# sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl
```

# Postgres Database & User Setup

```
# sudo -u postgres psql
```

You should now be logged into the pg shell

### Create a database

```
CREATE DATABASE btre_prod;
```

### Create user

```
CREATE USER dbadmin WITH PASSWORD 'abc123!';
```

### Set default encoding, tansaction isolation scheme (Recommended from Django)

```
ALTER ROLE dbadmin SET client_encoding TO 'utf8';
ALTER ROLE dbadmin SET default_transaction_isolation TO 'read committed';
ALTER ROLE dbadmin SET timezone TO 'UTC';
```

### Give User access to database

```
GRANT ALL PRIVILEGES ON DATABASE btre_prod TO dbadmin;
```

### Quit out of Postgres

```
\q
```

# Vitrual Environment

You need to install the python3-venv package

```
# sudo apt install python3-venv
```

### Create project directory

```
# mkdir pyapps
# cd pyapps
```

### Create venv

```
# python3 -m venv ./venv
```

### Activate the environment

```
# source venv/bin/activate
```

# Git & Upload

### Pip dependencies

From your local machine, create a requirements.txt with your app dependencies. Make sure you push this to your repo

```
$ pip freeze > requirements.txt
```

Create a new repo and push to it (you guys know how to do that)

### Clone the project into the app folder on your server (Either HTTPS or setup SSH keys)

```
# git clone https://github.com/yourgithubname/btre_project.git
```

## Install pip modules from requirements

You could manually install each one as well

```
# pip install -r requirements.txt
```

# Local Settings Setup

Add code to your settings.py file and push to server

```
try:
    from .local_settings import *
except ImportError:
    pass
```

Create a file called **local_settings.py** on your server along side of settings.py and add the following

- SECRET_KEY
- ALLOWED_HOSTS
- DATABASES
- DEBUG
- EMAIL\_\*

## Run Migrations
```
# python manage.py makemigrations
# python manage.py migrate
```

## Create super user

```
# python manage.py createsuperuser
```

## Create static files
```
python manage.py collectstatic
```

### Create exception for port 8000

```
# sudo ufw allow 8000
```

## Run Server

```
# python manage.py runserver 0.0.0.0:8000
```

### Test the site at YOUR_SERVER_IP:8000

Add some data in the admin area

# Gunicorn Setup

Install gunicorn

```
# pip install gunicorn
```

Add to requirements.txt

```
# pip freeze > requirements.txt
```

### Test Gunicorn serve

```
# gunicorn --bind 0.0.0.0:8000 btre.wsgi
```

Your images, etc will be gone

### Stop server & deactivate virtual env

```
ctrl-c
# deactivate
```

### Open gunicorn.socket file

```
# sudo nano /etc/systemd/system/gunicorn.socket
```

### Copy this code, paste it in and save

```
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target
```

### Open gunicorn.service file

```
# sudo nano /etc/systemd/system/gunicorn.service
```

### Copy this code, paste it in and save

```
[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=djangoadmin
Group=www-data
WorkingDirectory=/home/djangoadmin/pyapps/btre_project
ExecStart=/home/djangoadmin/pyapps/venv/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          btre.wsgi:application

[Install]
WantedBy=multi-user.target
```

### Start and enable Gunicorn socket

```
# sudo systemctl start gunicorn.socket
# sudo systemctl enable gunicorn.socket
```

### Check status of guinicorn

```
# sudo systemctl status gunicorn.socket
```

### Check the existence of gunicorn.sock

```
# file /run/gunicorn.sock
```

# NGINX Setup

### Create project folder

```
# sudo nano /etc/nginx/sites-available/btre_project
```

### Copy this code and paste into the file

```
server {
    listen 80;
    server_name YOUR_IP_ADDRESS;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/djangoadmin/pyapps/btre_project;
    }
    
    location /media/ {
        root /home/djangoadmin/pyapps/btre_project;    
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}
```

### Enable the file by linking to the sites-enabled dir

```
# sudo ln -s /etc/nginx/sites-available/btre_project /etc/nginx/sites-enabled
```

### Test NGINX config

```
# sudo nginx -t
```

### Restart NGINX

```
# sudo systemctl restart nginx
```

### Remove port 8000 from firewall and open up our firewall to allow normal traffic on port 80

```
# sudo ufw delete allow 8000
# sudo ufw allow 'Nginx Full'
```

### You will probably need to up the max upload size to be able to create listings with images

Open up the nginx conf file

```
# sudo nano /etc/nginx/nginx.conf
```

### Add this to the http{} area

```
client_max_body_size 20M;
```

### Reload NGINX

```
# sudo systemctl restart nginx
```

### Media File Issue
You may have some issues with images not showing up. I would suggest, deleting all data and starting fresh as well as removeing the ""photos"" folder in the ""media folder""
```
# sudo rm -rf media/photos
```

# Domain Setup

Go to your domain registrar and create the following a record

```
@  A Record  YOUR_IP_ADDRESS
www  CNAME  example.com
```

### Go to local_settings.py on the server and change ""ALLOWED_HOSTS"" to include the domain

```
ALLOWED_HOSTS = ['IP_ADDRESS', 'example.com', 'www.example.com']
```

### Edit /etc/nginx/sites-available/btre_project

```
server {
    listen: 80;
    server_name xxx.xxx.xxx.xxx example.com www.example.com;
}
```

### Reload NGINX & Gunicorn

```
# sudo systemctl restart nginx
# sudo systemctl restart gunicorn
```
",5,5,2,0,real-estate-website,"[django, real-estate-website]",0
cheppimdq,pint-beta,,https://github.com/cheppimdq/pint-beta,https://api.github.com/repos/pint-beta/cheppimdq,Pint | Acercate e Inspirate,"![pint.com.ar](./assets/img/marca/comar-1.png)
",0,0,1,0,real-estate,"[digital-twins, proptech, real-estate]",0
Sun-in-summer,frontendbasic_cutspace,,https://github.com/Sun-in-summer/frontendbasic_cutspace,https://api.github.com/repos/frontendbasic_cutspace/Sun-in-summer,–°–∞–π—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ /Real-estate agency website,,0,0,1,0,real-estate-website,[real-estate-website],0
felix123136,redfin-real-estate,,https://github.com/felix123136/redfin-real-estate,https://api.github.com/repos/redfin-real-estate/felix123136,Real Estate Web Application created using NextJS and ChakraUI,"<img width=""934"" alt=""image"" src=""https://user-images.githubusercontent.com/71205609/189347833-de079118-8f3c-43ca-91df-b408f41992ac.png"">
<img width=""937"" alt=""image"" src=""https://user-images.githubusercontent.com/71205609/189347878-4c1e69d5-a87b-4c89-ad25-73c94efa5e05.png"">
<img width=""927"" alt=""image"" src=""https://user-images.githubusercontent.com/71205609/189347960-9b08e7d9-80f4-460a-a207-7620e65d1810.png"">
",1,1,1,1,real-estate-website,"[chakra-ui, nextjs, real-estate-website]",0
engw,ideal-life,engw,https://github.com/engw/ideal-life,https://api.github.com/repos/ideal-life/engw,A House is a mirror of your life,"# ideal-life

## Requirements
```
Docker 1.13.X
```

## Installation
```bash
# pull container
% docker pull engw/ideal-life
# or build locally
# % docker build . --tag engw/ideal-life
```

## Usage
```bash
# debug a spider
% scrapy runspider ideallife/spiders/homes.py

# run integration with output
% scrapy crawl homes -o output.csv
```

## Deployment
```bash
# Login to scrapinghub.com
% shub login

# Create project on your browser (and copy PROJECT_ID)
% open https://app.scrapinghub.com/

# Deploy to scrapinghub.com including dependencies
% shub deploy
```
",0,0,1,2,real-estate,"[crawler, real-estate, scrapy]",0
carlagesa,Plotihub-Server,,https://github.com/carlagesa/Plotihub-Server,https://api.github.com/repos/Plotihub-Server/carlagesa,üè°üèòÔ∏èüè§ PlotiHub Property Management Sytem built on Django Rest Framework,"## Django Template

[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/new/template/GB6Eki?referralCode=U5zXSw)
",0,0,1,0,property-management,"[api-rest, django-rest-framework, djangoapi, property-management]",0
ahmedsemih,Real-Estate,,https://github.com/ahmedsemih/Real-Estate,https://api.github.com/repos/Real-Estate/ahmedsemih,Fullstack Real Estate App with NodeJS and EJS,"https://user-images.githubusercontent.com/102798814/199418338-4f5209e5-fc25-404c-a260-87ecd559ce42.mp4

# Real Estate App

Responsive Fullstack Real Estate Application.

## Features

In this application users can post a home listing or review existing listings. They can do many filtering in the search section. If they like a house, can add it to favorites or contact the seller of the house. So this app becomes a bridge between seller and buyer like its counterparts.

### User Role

- Contains ""Individual"", ""Real Estate Office"" and ""Building Company"" roles.

- Posts a house.

- Edits or deletes their own houses.

- Reviews other houses.

- Reports fraudulent houses.

### Admin Role

- Does everything users do.

- Examines reported houses.

- Removes fake house postings.

- Bans users.

## Built with

- [HTML](https://html.spec.whatwg.org/multipage/) - Web Page Markup Language

- [CSS](https://www.w3.org/Style/CSS/) - Styling Language

- [Bootstrap](https://getbootstrap.com/) - Styling Library

- [Javascript](https://www.javascript.com/) - Main Language

- [NodeJS](https://nodejs.org/en/) - Server Environment

- [Expressjs](https://expressjs.com/) - NodeJS Framework For Server Processes

- [EJS](https://ejs.co/) - Web Page Template Engine

- [PostgreSQL](https://www.postgresql.org/) - SQL Database

- [Sequelize](https://sequelize.org/) - Database ORM

- [JWT](https://jwt.io/) - For Authentication

- [Bcryptjs](https://www.npmjs.com/package/bcryptjs) - For Encryption

- [Cookie Parser](https://www.npmjs.com/package/cookie-parser) - Cookies

- [SendGrid](https://sendgrid.com/solutions/email-api/) - For Send A Recovery Email

- [Cloudinary](https://cloudinary.com/) - Cloud Storage

## Getting Started

Clone the repository

```
git clone https://github.com/AhmedSemih/Real-Estate.git
```

After getting the starter files, you must run

```
npm install
```

You must assign environment variables (they are too many) and start the server

```
npm start
```
",0,0,1,0,real-estate,"[bootstrap, css, ejs, express, expressjs, fullstack, fullstack-javascript, html, javascript, nodejs, postgresql, real-estate, responsive, responsive-web-design, sequelize, web-application]",0
OLAMIDE100,House_Price_Prediction,,https://github.com/OLAMIDE100/House_Price_Prediction,https://api.github.com/repos/House_Price_Prediction/OLAMIDE100,"It provides the market historical data set of real estate valuations which are collected from Sindian Dist., New Taipei City, Taiwan","# House_Price_Prediction
**Recommended Use:** Regression Models<br/>
**Domain:** Real Estate<br/> 

## Real Estate Valuation Data Set 

### Can you predict the price of a house? 


---
![](download.jfif)
---

This  data set has 414 rows and 7 columns. 
It provides the market historical data set of real estate valuations which are collected from Sindian Dist., New Taipei City, Taiwan.
This data set is recommended for learning and practicing your skills in **exploratory data analysis**, **data visualization**, and **regression modelling techniques**. 
Feel free to explore the data set with multiple **supervised** and **unsupervised** learning techniques. 
The Following data dictionary gives more details on this data set:

---

### Data Dictionary 

| Column   Position 	| Atrribute Name                         	| Definition                                                                                                                                                                 	| Data Type    	| Example                         	| % Null Ratios 	|
|-------------------	|----------------------------------------	|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------	|--------------	|---------------------------------	|---------------	|
| 1                 	| X1 transaction date                    	| The   transaction date (for example, 2013.250=2013 March, 2013.500=2013 June, etc.)                                                                                        	| Qualitative  	| 2013.500,   2013.500, 2013.333  	| 0             	|
| 2                 	| X2 house age                           	| The house age   (unit: year)                                                                                                                                               	| Quantitative 	| 19.5, 13.3, 5.0                 	| 0             	|
| 3                 	| X3 distance to the nearest MRT station 	| The distance   to the nearest MRT station (unit: meter)                                                                                                                    	| Quantitative 	| 390.5684, 405.21340, 23.38284   	| 0             	|
| 4                 	| X4 number of convenience stores        	| The number of   convenience stores in the living circle on foot                                                                                                            	| Quantitative 	| 6, 8, 1                         	| 0             	|
| 5                 	| X5 latitude                            	| The geographic   coordinate, latitude (unit: degree)                                                                                                                       	| Quantitative 	| 24.97937,   24.97544, 24.94925  	| 0             	|
| 6                 	| X6 longtitude                          	| The geographic   coordinate, longitude (unit: degree)                                                                                                                      	| Quantitative 	| 121.54243, 121.49587, 121.51151	 	| 0             	|
| 7                 	| Y house price of unit area             	| The house price of unit   area (10000 New Taiwan Dollar/Ping, where Ping is a local unit, 1 Ping = 3.3   meter squared) for example, 29.3 = 293,000 New Taiwan Dollar/Ping 	| Quantitative 	| 29.3, 33.6, 47.7                	| 0             	|

### Acknowledgement


This data set has been sourced from the Machine Learning Repository of University of California, Irvine [Real Estate Valuation Data Set (UC Irvine)](https://archive.ics.uci.edu/ml/datasets/Real+estate+valuation+data+set).<br/> 
The UCI page mentions the following as the original source of the data set:<br/> 
*Yeh, I. C., & Hsu, T. K. (2018). Building real estate valuation models with comparative approach through case-based reasoning. Applied Soft Computing, 65, 260-271*  
",1,1,2,0,real-estate-rental,"[housing-prices, real-estate-rental]",0
Leax-Foundation,Paper,Leax-Foundation,https://github.com/Leax-Foundation/Paper,https://api.github.com/repos/Paper/Leax-Foundation,Whitepaper Leax Foundation,,0,0,1,0,real-estate-platform,"[blockchain, leax, real-estate-platform, whitepaper]",0
sanidhiya-khandelwal,Awaas-Kalpana,,https://github.com/sanidhiya-khandelwal/Awaas-Kalpana,https://api.github.com/repos/Awaas-Kalpana/sanidhiya-khandelwal,"A property listing platform for buy, sell and renting","# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
",0,0,1,0,real-estate-website,"[css, html5, javascript, reactjs, real-estate-website]",0
malicky161290,Residential-Real-Estate-Market-Benchmark-Setter,,https://github.com/malicky161290/Residential-Real-Estate-Market-Benchmark-Setter,https://api.github.com/repos/Residential-Real-Estate-Market-Benchmark-Setter/malicky161290,AI project suggestion,"# Residential real estate market monitor
Independent value benchmaker of the residential real estate market

## Summary

It is very hard to establish the current value of a residential real estate property. Based on several indicators that are scattered on the internet, we can once and for all establish a clear cut method to provide everyone with a benchmark for the value of any residential property.

## Background

It is currently almost impossible to predict whether the asking price for a real estate property is overvalued, undervalued or on par with value. The only reference for most people is the historical price. That is not good enough indicator since asking price, selling price and value are three different things. By combining several publicly found data, we can generate a objective value range, which can help buyers and sellers to set the right price to sell or buy for by offering a benchmark.

Almost every human in its lifetime is speculating whether to buy a property for its family. Some do it more often as a small time investors and others are selling their owned property to make means for their other life expenditures. The ever present question is around all of them. What should I sell/but it for? As of now, if you are not having big enough real estate company, or if you do not work in a consulting company such as Deloitte, KPMG and others, you do not know really how to answer that questions and you could easily be tricked in underpricing your property while selling and overpaying for a property while buying. 

My motivation for this project lies in my fascination by residential real estate property and my never ending problem of establishing whether my investment is in the right amount, or if I am overpaying for it. I have to say I have been on both ends, but I can judge only based on my feeling never based on merit. I think that I overpayed for a property as well as underpayed for another one. I do not want to think anymore, I want to know.

This topic is important, because it brings stability to the market and useful tool to the hands of small investors and first time property buyers and sellers. It removes the knowledge only from the big corporations and gives it to hands of everyone and therefore it democratizes the market.

## How is it used?

Describe the process of using the solution. In what kind situations is the solution needed (environment, time, etc.)? Who are the users, what kinds of needs should be taken into account?

The solution will enable a small time investor that purchase or sells about one property per year with educated information scan the market and provide a qualified offer.

The Residential real estate market monitor can be used while finding a suitable property to buy as an investment, or for your own use. The user is most likely a person in the age between 30 - 50 years old that belongs to the middle class and is looking to invest their money to the real estate market. 

The user has the following needs:
* Understand the value of the property
* Understanding what price to offer/pay for the property
* Select the right property to buy based on value indicators and use these indicators as bargaining power while negotiating the price

## Data sources and AI methods

We will collect various information that normally you have to look for in various sources and through scraping this data, putting a weight to the information and through the method of linear regression and nearest neighbor method that will allow us to get the suggested value and then through logistic regression, we will establish the probability of that number to be exact and form a range for a benchmark.

| Source of Data      | Description |
| ----------- | ----------- |
| Property Taxes| $ amount|
| Market Value| $ amount|
| Replacement Cost| $ amount|
| HOA fees   | $ amount|
| HOA  | Monies in the bank according to the latest tax statement |
| Historical sales data of comparable properties   | $ amount|
| Property Orientation   | N, NW, W, SW, S, SE, E, NE |
| Property size   | standartized dispositions |
| Property size   | m2 |
| Property ownership type   | Owner or common ownership |
| Property size   | standartized dispositions |
| Property   | Age |
| Property   | Latest reconstruction |
| City   | Population |
| Safety  | Neighborhood crime statistics |
| Education  | Number of grade schools |
| Education  | Number of secondary schools |
| Education  | Grade school ranking |
| Education  | Secondary school ranking |
| Public transportation  | Nearest bus stop |
| Public transportation  | Nearest tram stop |
| Public transportation  | Nearest metro stop |
| Public transportation  | Airport |
| Economy  | Inflation |
| Economy  | Economy growth |
| Economy  | City economy growth |
| Economy  | State economy growth |


## Challenges

The project only provides the information now reserved for elites to everyone and therefore provides a level playing field; however, it cannot provide more than that. It can inform the user and allow it to make an educational offer; however, it does not provide and cannot react on a market in real time. It only offers a range where the property should be priced based on its value based on last years data collected by national and state agencies; however, if the market moved within a year the range of the price is moving with it. 

Therefore the biggest challenge is to incorporate in the monitor an option that will give the best possible range of price based on last years data and current level of inflation and supply combined with demand. It will never provide a specific price that will be absolutely accurate. The best it can do is to be a benchmark.

## What next?

I need people with the following skills to get this project of the ground:
* AI python programmer
* Data analyst and data builder
* UX/UI Designer

The only way this project can take of the ground is to find a cofounder that has technical skills and can build the product. My skill is more in marketing and business development, but sadly I cannot technically build this project.

",0,0,1,0,real-estate,"[ai, benchmarking, real-estate, residential-real-estate]",0
martinsndifon,skyspringhomes,,https://github.com/martinsndifon/skyspringhomes,https://api.github.com/repos/skyspringhomes/martinsndifon,"This is my foundations portfolio project during my time in ALX. It is actually my very first personal build, it might not be much but I am especially proud of this one :)","# skyspringhomes
* This is a real estate web application for a small real estate company
* Live Version
   <https://skyspringhomes.martinsndifon.tech>
## Goal
The major goal of this project was to further solidify my knowledge of using the technologies listing below in building an application. The application gives the owner of the small real estate company the flexibility of dynamically updatating the websites by creating, modifying or deleting properties/listings as they desire.

## Future update
The mvp of the project was completing the major functionality of allowing for secure CRUD operations by admin to dynamically update the website. Listing below are other features that will be added either to this version of the build or a totally new version using this version as the base for that build.
- Users can signup in two categories; an agent and a client(regular user)
- Signed in clients will have more functionalities which include but not limited to;
	* Favoriting a property for easy reference on revisit
	* A messaging section where clients can leave a message for an agent
- Signed in agents will also have more functionalities
	* A messaging section to interact with client messages
	* A section to manage their uploaded properties(Create, modify or delete)
- Location will be improved to contain different states and cities
- Listings will have a better setup, which will include amenities and other distinguishing factors
- A robust search feature will be added so users can better filter out properties based on different options

## Technologies used
- Backend in python
- RestfulApi
- MySQL
- sqlalchemy
- flask
- JQuery

# API Routes

| Method  |       Route                     | Authentication | Description                                           |
|:-------:|:-------------------------------:|:--------------:|:-----------------------------------------------------:|
|  GET    | /api/v1/rent                    |       NO       | Returns all the listings for rent                     |
|  GET    | /api/v1/rent/{id}               |       YES      | Returns a single rented property                      |
|  GET    | /api/v1/rent/type/{rent_type}   |       NO       | Returns rented properties of a particular type        |
|  POST   | /api/v1/rent                    |       YES      | Creates a new property for rent                       |
|  PUT    | /api/v1/rent/{id}               |       YES      | Updates a rented property with new information        |
|  DELETE | /api/v1/rent/{id}               |       YES      | Deletes a rented property                             |
|  GET    | /api/v1/sale                    |       NO       | Returns all the listings for sale                     |
|  GET    | /api/v1/sale/{id}               |       YES      | Returns a single sale property                        |
|  POST   | /api/v1/sale                    |       YES      | Creates a new property for sale                       |
|  PUT    | /api/v1/sale/{id}               |       YES      | Updates a sale property with new informatioin         |
|  DELETE | /api/v1/sale/{id}               |       YES      | Deletes a sale property                               |
|  GET    | /api/v1/service_apartments      |       NO       | Returns all service apartments listings               |
|  GET    | /api/v1/service_apartments/{id} |       YES      | Returns a single service apartment                    |
|  POST   | /api/v1/service_apartments      |       YES      | Creates a new service apartment                       |
|  PUT    | /api/v1/service_apartments/{id} |       YES      | Updates a service apartments with new information     |
|  DELETE | /api/v1/service_apartments/{id} |       YES      | Deletes a service apartment                           |

# Backend 

# Requirements
- MySQL 8.0.xx
- Python3.8 upwards
- MySQLdb
```bash
sudo apt-get install python3-dev
sudo apt-get install libmysqlclient-dev
sudo apt-get install zlib1g-dev
# mysqlclient will be installed from the requirement.txt
```
- Flasgger
```bash
sudo apt-get install -y python3-lxml
```

```bash
# Clone the repo
git clone https://github.com/martinsndifon/skyspringhomes.git
# Move into the project directory
cd skyspringhomes/
# Copy env template to .env
cp env .env
```

- Edit .env
```bash
SKY_MYSQL_USER=your_db_user
SKY_MYSQL_PWD=your_db_pwd
SKY_MYSQL_HOST=your_db_host
SKY_MYSQL_DB=your_db_name
SKY_ENV=dev_or_test
ADMIN_USERNAME=name_for_api_authentication
ADMIN_PASSWORD=password_for_api_authentication
```

- Setup the database
```bash
# This step assumes you have sucessfully installed and configured MySQL 8.0.xx with root login
# edit the place holder names in the setup file before proceeding to the next step
cat setup_mysql_dev.sql | mysql -uroot -p
# create the necessary tables in the db
cat setup.sql | mysql -uroot -p your_db_name
```

- Create an admin user
```bash
# Edit the create_admin_user.py, provide values for name, email and password
python3 create_admin_user.py
# The email and password will be used to login to the admin version of the website
```

- Configure api Basic Authentication
```bash
# Edit the api/v1/gen_auth, provide username and password.
python3 api/v1/gen_auth
# The above prints the authorization string for the api.
# Use the api/v1/gen_auth_example for examples on how to use it.
# Edit all the files in skyspringhomes/web_dynamic_admin/templates except; 404.html, admin.html, footer.html and login.html to include the authentication string generated.
```

# Run the backend
```bash
# Install required dependencies from the requirement.txt file
pip3 install -r requirement.txt
# Start the Restful api
python3 -m api.v1.app
```

# Run the frontend
```bash
# Run the main website
python3 -m web_dynamic.app
# Run the admin version of the website
python3 -m web_dynamic_admin.app
```
Open your browser and navigate to the flask url to view to the development website
",0,0,1,0,real-estate,"[flask-application, mysql-database, real-estate, rest-api]",0
ikushlianski,newbor-apartment-tracker,,https://github.com/ikushlianski/newbor-apartment-tracker,https://api.github.com/repos/newbor-apartment-tracker/ikushlianski,Playing with Puppeteer and AWS Container Images to track apartments of certain configuration,"# Novaya Borovaya apartment tracker

## Deployment

- run `./deploy.sh`
- after the container is built, you will see `sha digest`
- replace the digest for the main function in serverless.yaml
- `yarn deploy`
",0,0,2,0,real-estate,"[aws, aws-lambda, docker, real-estate, scraper]",0
seifgh,home-seller-web-app,,https://github.com/seifgh/home-seller-web-app,https://api.github.com/repos/home-seller-web-app/seifgh,Real estate web platform for selling and buying homes,"# home-seller-web-app
Real estate web platform for selling and buying homes build with Django && Reactjs.

[Open website](https://seif-gharrese-home-seller.herokuapp.com)
<img   src=""https://github.com/seifgh/home-seller-web-app/blob/master/Screenshot%20from%202020-06-01%2017-20-08.png"" />


### Prerequisites

- pip package manager 

```
$ pip --version
v9.0.1 (python 3.6)

```
---
### Installing

- Install dependencies
```
$ pip install requirements.txt

```

---
### Running
```terminal
$ python manage.py runserver
```
---
### Built With
 #### Backend
* [Django](https://www.djangoproject.com/) - The web framework for perfectionists with deadlines.
* [Django-rest-framework](https://www.django-rest-framework.org/) - Awesome web-browsable Web APIs.
* [Django-pandas](https://pypi.org/project/django-pandas/) - Tools for working with pydata.pandas in Django projects.
* [Sklearn](https://scikit-learn.org/) - Python software machine learning library.

   #### Note: I used Django pandas and Sklearn for buidling a recommender system of each property (Suggestions).


* [Celery](http://www.celeryproject.org/) - Celery is an asynchronous task queue/job queue based on distributed message passing.


 #### Frontend
* [Webpack](https://reactjs.org/) - Open-source JavaScript module bundler.
* [Reactjs](https://reactjs.org/) - A JavaScript library for building user interfaces.
* [Axios](https://github.com/axios/axios) - Promise based HTTP client for the browser and node.js.
* [Sass](https://sass-lang.com/) - the most mature, stable, and powerful professional grade CSS extension language in the world.
",0,0,0,11,real-estate,"[axios, celery, django, home-seller, javascript, nodejs, pandas, python, python3, reactjs, real-estate, redis, sklearn, web-application, webpack, website]",0
HousingHeat,property-heatmap,HousingHeat,https://github.com/HousingHeat/property-heatmap,https://api.github.com/repos/property-heatmap/HousingHeat,A simple web-app that lets people visualize the price of property to either rent/buy in the location of their choice based on their preferences.,"# property-heatmap
A simple web-app that lets people visualize the price of property to either rent/buy in the location of their choice based on their preferences.
",0,0,1,0,real-estate,"[google-maps, pg, python, real-estate]",0
ravimalik20,realEstateRental,,https://github.com/ravimalik20/realEstateRental,https://api.github.com/repos/realEstateRental/ravimalik20,Real estate rental application built in Laravel,,2,2,2,0,real-estate-rental,"[laravel, php, real-estate-rental]",0
thedatanerdz,MLP-12,,https://github.com/thedatanerdz/MLP-12,https://api.github.com/repos/MLP-12/thedatanerdz,Real estate prediction web app,"### Boston House Pricing Prediction

### Software And Tools Requirements

1. [Github Account](https://github.com)
2. [HerokuAccount](https://heroku.com)
3. [VSCodeIDE](https://code.visualstudio.com/)
4. [GitCLI](https://git-scm.com/book/en/v2/Getting-Started-The-Command-Line)

Create a new environment

```
conda create -p venv python==3.7 -y
```
",0,0,2,0,real-estate,"[aws, css, data-science, flask, frontend, html, investment, linear-regression, machine-learning, pyhton, real-estate, rest-api, restful-api, stocks, webapp]",0
CristyCarmona,MX_Real_State_Project,,https://github.com/CristyCarmona/MX_Real_State_Project,https://api.github.com/repos/MX_Real_State_Project/CristyCarmona,"The project is focused on analyzing HOUSES FOR SALE of Mexico‚Äôs biggest metropolitan areas: Mexico City, Monterrey, and Guadalajara. It also identifies several factors that can influence housing decisions, such as places of interest and crime rates.","# MX_Real_State_Project
The project is focused on analyzing HOUSES FOR SALE of Mexico‚Äôs biggest metropolitan areas: Mexico City, Monterrey, and Guadalajara. It also identifies several factors that can influence housing decisions, such as places of interest and crime rates.

## Visualizations 
![Visualization1](https://github.com/CristyCarmona/MX_Real_State_Project/blob/main/assets/img/visualization1.jpg)

![Visualization2](https://github.com/CristyCarmona/MX_Real_State_Project/blob/main/assets/img/visualization2.jpg)

![Visualization3](https://github.com/CristyCarmona/MX_Real_State_Project/blob/main/assets/img/visualization3.jpg)

![Visualization4](https://github.com/CristyCarmona/MX_Real_State_Project/blob/main/assets/img/visualization4.jpg)

## Data Sources 
Houses Data .- Web Scrapping from https://www.metroscubicos.com/                                                                                                             
Crimes Data .- CSVs from https://www.gob.mx/sesnsp/acciones-y-programas/datos-abiertos-de-incidencia-delictiva                                                                  
Places of interes Data.- Places API from Google https://console.cloud.google.com/    

## Table schema 
![Visualization1](https://github.com/CristyCarmona/MX_Real_State_Project/blob/main/data/QuickDBD-export.png)

## Coding Approach 
![CodingApproach](https://github.com/CristyCarmona/MX_Real_State_Project/blob/main/assets/img/coding_appproach.jpg)




",0,0,1,0,real-estate,"[houses, real-estate]",0
jimbrig,property_allocation_demo,,https://github.com/jimbrig/property_allocation_demo,https://api.github.com/repos/property_allocation_demo/jimbrig,Dynamic Risk Allocation Model - bringing simplicity to the complex realm of Property Insurance.,"# Property Allocation <img src='man/figures/logo.png' align=""right"" height=""30.5"" />

[![github](https://img.shields.io/badge/Github-jimbrig/propalloc-black.svg)](https://github.com/jimbrig/propalloc)

[![lifecycle](https://img.shields.io/badge/Lifecycle-Maturing-darkgreen.svg)](https://www.tidyverse.org/lifecycle/#maturing)
[![package%20version](https://img.shields.io/badge/Package%20Version-1.1.0-orange.svg)](https://github.com/jimbrig/propalloc/blob/master/commits/master)

**propalloc** is an R Package housing the codebase for the R Shiny
Property Allocation Demo Application.

+ Date: 2021-12-01
+ Demo: https://propertyallocation.jimbrig.com/
+ Docs: https://docs.jimbrig.com/property_allocation_demo/

***
![propalloc](https://user-images.githubusercontent.com/32652297/190238392-fbc3904a-af02-4eb1-af11-addbb1b4ae47.png)
***

## Builds and Deployment

<!-- badges: start -->
[![Build and Deploy](https://github.com/jimbrig/property_allocation_demo/actions/workflows/azure-deploy.yml/badge.svg)](https://github.com/jimbrig/property_allocation_demo/actions/workflows/azure-deploy.yml)
[![pkgdown](https://github.com/jimbrig/property_allocation_demo/actions/workflows/pkgdown.yaml/badge.svg)](https://github.com/jimbrig/property_allocation_demo/actions/workflows/pkgdown.yaml)
[![pages-build-deployment](https://github.com/jimbrig/property_allocation_demo/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/jimbrig/property_allocation_demo/actions/workflows/pages/pages-build-deployment)
<!-- [![R build status](https://github.com/jimbrig/propalloc/workflows/R-CMD-check/badge.svg)](https://github.com/jimbrig/propalloc/actions) -->
<!-- badges: end -->

## Purpose

The goal of this project is to create a model in R Shiny that allocates an 
insured‚Äôs prospective year property insurance costs in an equitable, easily 
understood manner that saves the client time, provides the option to use an 
‚Äúactuarial‚Äù methodology, while still allowing for maximum flexibility and edits.


## Demo

To demo the app, you have a couple of options:

+ If you want to run the application locally, simply install the package and run the code below:


```r
library(propalloc)
propalloc::run_app()
```

*Note that the run_app function will automatically install package dependencies for you.*

## Scope of Services

Upon completion, this model will be used as a demo to sell future work, similar
to the R Shiny casualty cost allocation model. Once sold, this model will provide
a template for billable projects.

Specifically, the property allocation model will allocate the premium, taxes,
fees, surcharges and any related costs (collectively, the ‚Äúproperty insurance costs‚Äù)
to the desired level. This level can include up to six hierarchies (e.g. Country,
Business Unit, Division, Region, Location, and Intra-location Department). 

The tool will enable the client to incorporate the following criteria into its
allocation process:

- Total Insured Value (TIV)
- Market AOP Rates (provided by Marsh or Client)
- Market CAT Rates
+ Wind Tier
+ Earthquake Exposure
+ Flood Exposure
- Terrorism Rates
- Claim Frequency
- Claim Severity
- Risk Engineering Credits/Surcharges
- Other Manual Adjustments
- Relativity Adjustments
+ Combustible vs. Non-Combustible
+ Sprinkler Type/Status
+ Business Unit (BU)

In addition, the model will allow a client to select various thresholds and 
caps on premium/rate changes.

The tool will also provide multiple summaries, facilitating the comparison of 
the resulting allocation in up to three different scenarios. For example, 
the client can compare the resulting to allocation based upon: proposed market 
rates without adjustment, rates used in the prior year allocation, proposed
increases for budget guidance applied to the rates used in the prior year.

The tool will also give the user the ability to:

- Edit the TIV, properties, or other aspects of the exposures in the 
statement of values (SOV) between the scenarios outlined above
(this is of importance as information often changes throughout the allocation process)
- Force the final allocation for a specific or a set of specific locations to be a fixed number
- Change the different loss severity buckets considered in the model
- Add extra fees after the allocation is complete, while still maintaining the 
allocation of the other property insurance costs

Lastly, the tool will provide a summary by any combination of the six hierarchies
that will calculate the dollar change in premium attributable to any of the following:

- change in TIV,
- change in the initial implied rates,
- claims charges,
- manual ‚Äúall other risk‚Äù adjustment, and/or
- cap placed on the increase in rate and the resulting off-balance associated with a cap.

## Resources

View all package documentation by installing and running:

```
propalloc::open_docs()
```


#### Documents

+ [Changelog](inst/reports/changelog.md)
+ [Contributor Code of Conduct](CODE_OF_CONDUCT.md) 
+ [License](LICENSE.md) 
+ View the [Contributing](inst/reports/contributing.md) document for on-boarding resource.  
+ View the [Roadmap](inst/reports/roadmap.md) for schedule and planned future actions. 

## Installation

**propalloc** is setup as an R Package making it simple to house all the various
dependencies that the final application relies on.

Make sure you have the latest and stable version of [devtools](https://github.com/hadley/devtools).

### GitHub

Install from [GitHub](https://github.com) via:

For information on setting up your GitHub PAT (Personal Access Token) visit 
[this webpage](https://github.com/settings/tokens).


```r
library(devtools)

# using username/password
devtools::install_github(""jimbrig/propalloc"",
                         ""<username>"", 
                         ""<password>"")

# using GitHub PAT
# library(usethis)
# usethis::browse_github_pat()

devtools::install_github(""jimbrig/propalloc"",
                         auth_token = github_pat(quiet))
```

***

If you have any trouble, contact [Jimmy Briggs](jimbrig1993@outlook.com) 
to make sure you have read access to the repository and for further troubleshooting.

## Technical

This project is set up as an R Package. To view important details regarding the 
setup visit the [Technical API Vignette]().

It also utilized GIT LFS. To install run **git lfs install** in git bash.



",1,1,1,0,property-management,"[actuarial-science, allocation, dashboard, data-science, insurance, property-management, r, r-shiny, workflow]",0
Lucs1590,Hommer_House,,https://github.com/Lucs1590/Hommer_House,https://api.github.com/repos/Hommer_House/Lucs1590,üè† Esse foi o TCC desenvolvido no para imobili√°rias na ETEC Professor Massuyuki Kawano em 2016.,"# Hommer_House
Esse foi o TCC desenvolvido no para imobili√°rias na ETEC Professor Massuyuki Kawano em 2016.
",0,0,3,0,real-estate,"[conclusion, conclusion-work, etec, imobiliaria, real-estate, system]",0
Raj1v,real-estate-market-forecasting,,https://github.com/Raj1v/real-estate-market-forecasting,https://api.github.com/repos/real-estate-market-forecasting/Raj1v,,"# Influence of sentiment on real estate markets
This repository offers an modular and extendable framework for analyzing real estate markets using sentiment models

# About the project
## Motivation
This project exists as part of a bachelor's thesis to graduate from the Amsterdam University College with a degree in Liberal Arts & Sciences. The title of the thesis is `THE INFLUENCE OF MEDIA SENTIMENT ON THE BRITISH REAL
ESTATE MARKET` and utilizes the code in this repository to analyze the British Real Estate market using sentiment analysis on articles from The Guardian and Financial Times newspapers.

## Features
+ Machine learning (SVM) sentiment analysis model
+ Lexicon-based sentiment analysis model
+ Vector autoregression to correlate sentiment with real estate data
+ Exporting model results as LaTex tables

## Highlights
+ Easy implementation of aditional sentiment models using inheritance from a base class
+ Easy to change retrain SVM models with different parameters or training data
+ Caching to speed up common tasks (e.g. article loading, model training, etc.)
+ Well documented code (docstrings for classes and functions, annotated notebooks, comments where needed)


## Built with
+ Python 3
+ Jupyter Notebooks

# Getting started
## Downloading data
The first thing to do before using this tool is to provide some data. For the original research, the following data was used:
+ News articles from The Guardian and The Financial Times
+ Sentiment annotated text from several financial news sources (Training data for machine learning model)
+ Consumer confidence data
+ Loughran-McDonald financial sentiment lexicon (For the lexicon-based sentiment model)
+ Real estate data
    + Direct real estate market (UK National Statistics)
    + Securitized real estate market (FTSE EPRA NAREIT UK)

The paper associated with this project provides more detail on the used dataset.
To get started, it is highly advisable to run and test this project with the same data, which can be downloaded [here](https://drive.google.com/file/d/1UysbkU5v8Nh1Uhc8bYBeIgDJaZFHoRFe/view?usp=sharing).
The entire zipfile should be extracted in the `data` folder

## Running and evaluating models
The most straightforward way to run and evaluate models is through executing the `Evaluation` Jupyter notebook in the `notebooks` folder. 

Alternatively, the code belows shows how a Python file can evaluate models.

```python
    import articles as art
    from evaluation import Evaluator
    import models.lexicon_based

    # Load Financial Times & The Guardian articles
    articles = art.load_articles()

    # Initialize the sentiment model
    model = models.lexicon_based.Model(articles)

    # Evaluate the model on a given real estate index
    real_estate_index = 'data/real_estate_data/direct/england.csv'
    ev = Evaluator(model, articles, real_estate_index)
```
This code will run the lexicon-based sentiment model on the direct real estate market and output its results and performance metrics, such as the regression coefficients with confidence intervals, plots of its forecast results and its MAPE.

For more detailed information and an example of running the slightly more complex machine learning model, see the `Evaluation` notebook.

## Creating new models
It is easy to implement and analyze new sentiment models by inhereting from the base model class and implementing the `article_sentiment` method. The code below implements a simple new sentiment model.

```python
from models.model_base import ModelBase

class Model(ModelBase):
    """"""
    Ultra-simple lexicon-based sentiment model
    """"""
    def article_sentiment(self, article):
        """"""Returns the positive and negative sentiment scores of a list of tokens as a tuple""""""

        # Use the functions available through Article class
        tokens = article.body_tokenized()

        positivity, negativity, neutrality = 0,0,0
        if 'happy' in tokens:
            positivity = 1
        elif 'sad' in tokens:
            negativity = 1
        else:
            neutrality = 1

        return positivity, negativity, neutrality
```

If desired, `__init__` can be overwritten to add more parameters to a model, however, each `__init__` must set the `self.articles` attribute.

All models inheriting from the `ModelBase` class are automatically compatible with the evaluation scripts.

## Other common tasks
The Jupyter notebooks in the `notebooks` guide you through the following other tasks:
+ Complex evaluation & exporting results as LaTex tables
+ Training SVM models
+ Determing the classification confidence of SVM models
+ Working with sentiment data from an external model (in the example: Consumer Confidence)
+ Establishing a simple baseline autoregressive model on real estate indices

# File structure
    .
    ‚îú‚îÄ‚îÄ data                        # Data used by models (e.g.: news articles, sentiment lexicons, real estate data)
    ‚îú‚îÄ‚îÄ models                      # Sentiment models
    ‚îú‚îÄ‚îÄ notebooks                   # Jupyter notebooks for various tasks such as evaluating and training models
    ‚îú‚îÄ‚îÄ pickles                     # Stored pickle files to reuse the output of demanding tasks 
    ‚îú‚îÄ‚îÄ articles.py                 # Helper functions and class for dealing with news articles
    ‚îú‚îÄ‚îÄ data_importer.py            # Helper functions for various data loading purposes
    ‚îú‚îÄ‚îÄ evaluation.py               # Class for evaluating the performance of sentiment models
    ‚îú‚îÄ‚îÄ latex_tables.py             # Printing resutls of model evaluation as a latex table
    ‚îî‚îÄ‚îÄ vector_auto_regression.py   # Implementation of vector autoregression on sentiment models

See the `README.MD` files within the `notebooks` and `pickles` folder for a rundown of their individual files.

# License
This work is licenced under the MIT Licence. 


",0,0,2,0,real-estate,"[media, real-estate, sentiment-analysis]",0
mehmetaliakbay,symfony_realestate_project,,https://github.com/mehmetaliakbay/symfony_realestate_project,https://api.github.com/repos/symfony_realestate_project/mehmetaliakbay,In this project I created real estate website by using symfony,,1,1,1,1,real-estate-website,"[real-estate-website, symfony4]",0
danielmesquitta,nexter,,https://github.com/danielmesquitta/nexter,https://api.github.com/repos/nexter/danielmesquitta,Sell houses with classy. Really elegant page made for real estate companies üè°,"<h1 align=""center"">
  <img src=""Logo.PNG"">
</h1>

This is a project that I build during the bootcamp [Advanced CSS and Sass](https://www.udemy.com/course/advanced-css-and-sass/?utm_source=adwords&utm_medium=udemyads&utm_campaign=LongTail_la.EN_cc.ROW&utm_content=deal4584&utm_term=_._ag_77879424134_._ad_437497333833_._kw__._de_c_._dm__._pl__._ti_dsa-1007766171312_._li_1031438_._pd__._&matchtype=b&gclid=CjwKCAjwrvv3BRAJEiwAhwOdM3Qp3Le-a-Cd9EiBy0y6Mc9vztPVvOUyeIgiC2DgsSLOPoZzk28RFRoCixEQAvD_BwE)
to understand better how to style websites with modern css features as the grid and flexbox. See the complete site by [clicking here](https://danielmesquitta.github.io/nexter/).
<br><br><br>
<img src=""Mockup.PNG"">
<br>
## Main technologies used

- [Sass](https://sass-lang.com/)
- [Keyframes](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)
- [Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout)
- [Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)
- [Autoprefixer](https://github.com/postcss/autoprefixer)

### Visit the site by [clicking here](https://danielmesquitta.github.io/nexter/).
",0,0,1,12,real-estate,"[house, nexter, real-estate, sass]",0
vijay324,Find-my-House,,https://github.com/vijay324/Find-my-House,https://api.github.com/repos/Find-my-House/vijay324,Real estate website.,"# Modern UI/UX website using HTML,CSS,Javascript & Box icons used.
![project4](https://user-images.githubusercontent.com/81360992/223578871-78ed82f7-336a-4b15-a3be-1f1267255094.jpg)
",0,0,1,0,real-estate,"[house-price-prediction, houserent, real-estate]",0
gotwellsoon,Business-Intelligence-on-French-Real-Estate-Market,,https://github.com/gotwellsoon/Business-Intelligence-on-French-Real-Estate-Market,https://api.github.com/repos/Business-Intelligence-on-French-Real-Estate-Market/gotwellsoon,Using Tableau,"# Business Intelligence on French Real Estate Market

![real_estate](https://www.vmcdn.ca/f/files/shared/spotlight-photos/181017-guelphtodayoct18-01.jpg;w=960)

The aim of this project is to perform a data exploration for the real estate French market and to have a good understanding of available variables and the market with a real world 5-years (from 2015 to 2019)
historical sales transactions for the top 9 french cities (Paris, Marseille, Lyon, Toulouse, Lille, Bordeaux, Nice, Montpellier, Nantes).
The dataset contains details for each transaction (sale date, localization, type of residence, type of sale, land area, living area,
number of rooms, price, etc.).

The project was done using Tableau PrepBuilder for data preparation and cleaning and Tableau Desktop for data visualisation and storytelling with user friendly commands.

The final storytelling on Tableau Desktop is divided into the following steps:
- description of the context
- cities overview
- type of sales analysis
- living and land area analysis
- market understanding
- market evolution over time
- summary table per city
- investments recommendations
",0,0,1,0,real-estate,"[business-intelligence, france, real-estate, tableau-desktop, tableau-prep-builder]",0
ladunjexa,Yariga-Realestate-Dashboard,,https://github.com/ladunjexa/Yariga-Realestate-Dashboard,https://api.github.com/repos/Yariga-Realestate-Dashboard/ladunjexa,"This repository houses a phenomenal Realestate Management Dashboard App consisting Dashboard, Properties, Agents and Profiles - built with React & Material-UI using @refinedev ‚ôæÔ∏è","<a name=""readme-top""></a>
<div align=""center"">

  ![Project Banner](readme_assets/readme_banner.png#gh-dark-mode-only)
  ![Project Banner](readme_assets/readme_banner-light.png#gh-light-mode-only)

  ![Yariga Logo](readme_assets/yariga_logo.svg#gh-dark-mode-only)
  ![Yariga Logo](readme_assets/yariga_logo-light.svg#gh-light-mode-only)

  <p>
  <b>Yariga</b> is a Full Stack MERN Dashboard App With CRUD, Auth, and Charts Using Refine
  </p>
  
<!-- Badges -->
<p>
  <a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard/graphs/contributors"">
    <img src=""https://img.shields.io/github/contributors/ladunjexa/Yariga-Realestate-Dashboard"" alt=""contributors"" />
  </a>
  <a href="""">
    <img src=""https://img.shields.io/github/last-commit/ladunjexa/Yariga-Realestate-Dashboard"" alt=""last update"" />
  </a>
  <a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard/network/members"">
    <img src=""https://img.shields.io/github/forks/ladunjexa/Yariga-Realestate-Dashboard"" alt=""forks"" />
  </a>
  <a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard/stargazers"">
    <img src=""https://img.shields.io/github/stars/ladunjexa/Yariga-Realestate-Dashboard"" alt=""stars"" />
  </a>
  <a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard/issues/"">
    <img src=""https://img.shields.io/github/issues/ladunjexa/Yariga-Realestate-Dashboard"" alt=""open issues"" />
  </a>
  <a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard/blob/master/LICENSE"">
    <img src=""https://img.shields.io/github/license/ladunjexa/Yariga-Realestate-Dashboard.svg"" alt=""license"" />
  </a>
</p>
   
 <h4>
    <a href=""https://mern-dashboard-app.vercel.app/"">View Demo</a>
  <span> ¬∑ </span>
    <a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard"">Documentation</a>
  <span> ¬∑ </span>
    <a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard/issues/"">Report Bug</a>
  <span> ¬∑ </span>
    <a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard/issues/"">Request Feature</a>
  </h4>
</div>

<br />

<!-- Table of Contents -->
<details>

<summary>

# :notebook_with_decorative_cover: Table of Contents

</summary>

- [About the Project](#star2-about-the-project)
  * [Folder Structure](#bangbang-folder-structure)
  * [Environment Variables](#key-environment-variables)
  * [Tech Stack](#space_invader-tech-stack)
- [Getting Started](#toolbox-getting-started)
  * [Installation](#gear-installation)
  * [Run Locally](#running-run-locally)
- [Media](#milky_way-media)
- [Contributing](#wave-contributing)
- [License](#warning-license)
- [Contact](#handshake-contact)
- [Acknowledgements](#gem-acknowledgements)

</details>  

<!-- About the Project -->
## :star2: About the Project

<p align=""center""> 
  <img src=""readme_assets/yariga-d.png"" height=""auto"" width=""90%"" />
</div>
<br />
 
<!-- Folder Structure -->
### :bangbang: Folder Structure

<b>Yariga</b> code folder structure seperated to client-side and server-side.
```bash
Yariga-Realestate-Dashboard/
|- client
  |-- src/
    |-- assets/
    |-- components/
      |-- agent/
      |-- charts/
      |-- common/
      |-- home/
      |-- layout/
    |-- constants/
    |-- contexts/
    |-- interfaces/
    |-- pages/
    |-- utils/
    |-- App.tsx
  |-- .env
|- server
  |-- controllers/
  |-- mongodb/
  |-- routes/
  |-- index.js
  |-- .env
```

Now, lets dive into both server and client sides folders.

### CLIENT-SIDE

#### components

`agent/` - `charts/` - `common/` - `home/` - `layout/`

This folder contains all the function components arranged in subfolders, which they're independent and reusable bits of code. They serve the UI (User Interface) of Yariga to avoid unnecessary repetition of the code. those components are beautiful customized widgets using MUI to describe initial theme for widgets as they're named.

#### constants

`index.ts`

This is a JavaScript code that defines an array of objects named propertyReferralsInfo. Each object represents a source of referral for a property (like a real estate property). The array contains five objects representing five different referral sources: Social Media, Marketplace, Websites, Digital Ads, and Others. Each object specifies the percentage of referrals that come from the respective source and a unique color that represents the referral source.

#### interfaces

`agent.d.ts` - `common.d.ts` - `google.d.ts` - `home.d.ts` - `property.d.ts` - `theme.d.ts`

In the context of Refine, the `interfaces` directory is used to store TypeScript interfaces that define the types of data used in the application. This is useful for providing type information to the TypeScript compiler, which can then perform type-checking and provide better autocompletion and error messages.

The `interfaces` directory typically contains one or more `.ts` files, each of which exports one or more interfaces that describe the shape of the data used in the application. For example, if an application uses data from an external API, it might define an interface that describes the structure of the API response.

By storing interfaces in a separate directory, the codebase becomes more organized and easier to maintain. It also encourages good coding practices by making it easier to define and enforce types throughout the application.

#### pages

`agent-profile.tsx` - `agent.tsx` - `all-properties.tsx` - `create-property.tsx` - `edit-property.tsx` - `home.tsx` - `login.tsx` - `my-profile.tsx` - `property-details.tsx` - `index.ts`

In Refine, the pages directory is used to store the React components that correspond to the different pages of the application. These components typically use Refine's built-in components and hooks to provide a complete user interface for interacting with the data in the application.

#### utils

`parse-jwt.ts`

```ts
export function parseJwt(token: string): UserPayload {
  const base64Url = token.split(""."")[1];
  const base64 = base64Url.replace(/-/g, ""+"").replace(/_/g, ""/"");
  const jsonPayload = decodeURIComponent(
    window
      .atob(base64)
      .split("""")
      .map(function (c) {
        return ""%"" + (""00"" + c.charCodeAt(0).toString(16)).slice(-2);
      })
      .join("""")
  );

  return JSON.parse(jsonPayload);
}
```

This code defines a function named `parseJwt` that takes in a JWT (JSON Web Token) string and returns the decoded payload as an object of type `UserPayload`, which is imported from an external file called `google.ts` in the `interfaces` directory.

Inside the `parseJwt` function, the JWT is split into its three components: header, payload, and signature. The payload is extracted and decoded from base64 to JSON format. The resulting JSON string is then parsed into a JavaScript object with the properties defined in `UserPayload` type.

In summary, this function is used to decode a JWT and extract the payload information as an object that can be used in a web application.

`validateForm.ts`

This code exports two utility functions:

1. `validateForm` function takes in an object of form values and validates them to check if any of the required fields are missing. It iterates through each field in the `formValues` object and checks if it is empty. If any required field is empty, it sets `hasError` flag to true and returns an error message in the `errors` object. If all fields are filled, it sets the `hasError` flag to false and returns the empty `errors` object.
2. `hasChanged` function takes in two objects `initialValues` and `currentValues`, representing the initial values of the form fields and the current values of the form fields respectively. It iterates through each field in the `initialValues` object and checks if the corresponding field in the `currentValues` object has been changed. If any field has been changed, it returns `true`. If all fields are unchanged, it returns `false`.

Both of these utility functions can be used to simplify the process of validating and handling form submissions in a React application.

#### contexts

```js
index.ts
```

This is a React code that defines a context provider component named `ColorModeContextProvider` to handle the color mode of a theme used in a React application. The purpose of this component is to provide the theme color mode (either light or dark) and allow the user to switch between them.

The component uses the `createContext` function from React to create a context object named `ColorModeContext`, which will be used to share the state between the components in the React component tree.

The `ColorModeContextProvider` component receives a `PropsWithChildren` type as a prop, which allows the component to receive and render children components.

The component uses `useState` hook to manage the state of the color mode. The `localStorage` is used to store the color mode value to persist the user's preference when the application is closed or reloaded.

The useEffect hook is used to update the localStorage with the new color mode value whenever the mode state value changes.

The component also checks for the user's system color preference using `window?.matchMedia(""(prefers-color-scheme: dark)"").matches` and sets the `systemPreference` value accordingly.

The `setColorMode` function is used to switch the color mode between ""light"" and ""dark"" based on the current mode state value.

Finally, the `ColorModeContext.Provider` component wraps the `ThemeProvider` component from `@pankod/refine-mui` and provides the mode and `setColorMode` values as context values to its children. The `ThemeProvider` component provides a custom theme based on the current color mode value.

```js
theme.ts
```

This code defines two custom theme objects named `overridedLightTheme` and `overridedDarkTheme`. These custom themes are based on the default themes provided by the `@pankod/refine-mui` package, which is a library for customizing Material UI components in React applications.

The `overridedLightTheme` object is a modified version of the `LightTheme` provided by `@pankod/refine-mui`. It overrides some of the default values of the `palette` object in the theme to customize the color scheme of the theme. For example, it changes the primary color to a light gray color with a dark blue hue for its dark shade, and the secondary color to a light gray color with white text.

The `overridedDarkTheme` object is a modified version of the `DarkTheme` provided by `@pankod/refine-mui`. It overrides some of the default values of the `palette` object to customize the color scheme of the theme for the dark mode. For example, it changes the primary color to a dark blue color, the secondary color to a dark gray color with white text, and the background color to a dark shade of gray.

Both `overridedLightTheme` and `overridedDarkTheme` objects are exported for use in other parts of the application. These custom themes can be passed as props to the `ThemeProvider` component from `@pankod/refine-mui` to customize the color scheme of the Material UI components used in the React application.

### SERVER-SIDE

#### controllers

`property.controller.js` - `user.controller.js`

In a Refine app, the `controllers` folder is used to define the functions that handle incoming HTTP requests and generate HTTP responses. Each file in the `controllers` folder typically represents a logical entity or resource in the application, and defines functions that handle different HTTP methods (e.g. GET, POST, PUT, DELETE) for that entity.

The purpose of the `controllers` is to encapsulate the business logic and data manipulation for the different HTTP requests that the application handles. The controller functions typically take the request object as input, extract any necessary data from the request (e.g. query parameters, request body), and perform the necessary operations on the data (e.g. reading from or writing to the database). The functions then generate an appropriate HTTP response (e.g. a JSON object, an HTTP status code) and send it back to the client.

#### mongodb

`models/` - `connect.js`

In a Refine app, the `mongodb` folder is used to define and manage the connection to a MongoDB database. This folder contains a `connect.js` file that exports a function for establishing a connection to a MongoDB database using the Mongoose library.

the `models` folder in the MongoDB directory is used to define Mongoose models for MongoDB collections. A Mongoose model is a wrapper around a MongoDB collection that provides a way to interact with the data in that collection in a more structured and convenient way.

#### routes

`property.route.js` - `user.route.js`

In a Refine app, the `routes` folder is used to define the API endpoints or routes that the server will respond to. Each file in the routes folder typically represents a resource or a set of related endpoints for a particular domain of the application.

The routes are defined using the Express.js routing API, which maps HTTP methods (GET, POST, PUT, DELETE, etc.) to specific URL paths and controller functions that handle the request and response. In addition to defining the routes themselves, the files in the `routes` folder might also define any middleware or validation logic that needs to be applied to the requests.

Overall, the `routes` folder in a Refine app plays an important role in defining the API endpoints that the app exposes to clients, and organizing the code for handling those endpoints in a logical and maintainable way.

#### index.js

This is a Node.js server application using the Express framework that provides APIs for managing users and properties. It uses MongoDB as the database and the `connectDB` function connects to the database using the URL specified in the `.env` file. The server listens on port 8080 and responds with a message ""Hello from Yagira!"" when the root URL is accessed. The `cors` middleware is used to allow cross-origin resource sharing, and `express.json` middleware is used to parse JSON requests. The `userRouter` and `propertyRouter` handle requests for user and property management respectively. Overall, this code sets up a server that provides APIs for managing users and properties with MongoDB as the database.

<!-- ENV VARIABLES -->
### :key: Environment Variables

In order to use Yariga you have to add the following environment variable to your .env file

```env
REACT_APP_GOOGLE_CLIENT_ID=<GOOGLE_CLIENT_ID>
REACT_APP_GOOGLE_CLIENT_SECRET=<GOOGLE_CLIENT_SECRET>
REACT_APP_SERVER_URL=<SERVER_URL>
```

```env
MONGODB_URL=<MONGODB_URL>
CLOUDINARY_CLOUD_NAME=<CLOUD_NAME>
CLOUDINARY_API_KEY=<API_KEY>
CLOUDINARY_API_SECRET=<API_SECRET>
```

<!-- TechStack -->
### :space_invader: Tech Stack

[![My Skills](https://skillicons.dev/icons?i=js,ts,react,materialui,nodejs,express,mongodb)](https://skillicons.dev)

<img src=""https://miro.medium.com/max/1000/1*SO0aLb4auvpDawdMXHu2iw.png"" height=""68.5px"" width=""250px"" /><img src=""https://camo.githubusercontent.com/451061eb9714c2135705a1ad757017cc943627ca474d8a20e78209214469bf72/68747470733a2f2f6437756d7169637069373236332e636c6f756466726f6e742e6e65742f696d672f70726f647563742f65306364363161372d316336352d343561302d393765652d3737363364646335313533612f39383834313664302d323562632d346264322d623864622d6633343764306131393335642e706e67"" height=""76px"" width=""345px"" />

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- Getting Started -->
## 	:toolbox: Getting Started

<!-- Installation -->
### :gear: Installation & Run Locally

#### Step 0:

Note :bangbang: the application uses a MongoDB database, therefore, you need to create a database and connect it to the application, for this, change the `MONGODB_URL` environment variable in `.env` file located in `server` folder.

Note :bangbang: the application uses a Cloudinary Cloud, therefore, you need to create Cloudinary account [here](https://cloudinary.com/) and change the `CLOUDINARY_CLOUD_NAME`,`CLOUDINARY_CLOUD_API_KEY` & `CLOUDINARY_API_SECRET` environment variables in `.env` file located in `server` folder.

Note :bangbang: the application uses a `Google Auth`, to add `Google sign-in` into Yariga site and save time your customers, Google sign-in allows login through Google in one click. therefore, before you can integrate `Google sign-in`, you need to create a `Google Client ID` and `Google Client Secret`. explore how-to tutorial [here](https://www.askdata.com/docs/dataset-google-analytics-how-to-get-google-client-id-and-client-secret). then, change the `REACT_APP_GOOGLE_CLIENT_ID` & `REACT_APP_GOOGLE_CLIENT_SECRET` environment variables in `.env` file located in `client` server.

Note :bangbang: Node.js server application (`index.js` file located in `server` folder) configuring a Node.js web server to listen for incoming HTTP requests on port `8080`.
reference:
```js
const startServer = async () => {
  try {
    connectDB(process.env.MONGODB_URL);
    app.listen(8080, () => console.log(""Server started on port 8080""));
  } catch (error) {
    console.log(error);
  }
};
```
After following all the instructions above, we'll want to set one last environment variable `REACT_APP_SERVER_URL` in `.env` file located in `client` server.
as adapteed to the code, the value of the variable should be
```bash
http://localhost:8080/api/v1
```

#### Step 1:
Download or clone this repo by using the link below:

```bash
 https://github.com/ladunjexa/Yariga-Realestate-Dashboard
```

#### Step 2:

Yariga using NPM (Node Package Manager), therefore, make sure that Node.js is installed by execute the following command in consle

```bash
  node -v
```

### Step 3:

Go to root folder and execute the following command in console to get nodemon command line tool: (helps with the speedy development of Node. js applications)

```bash
  npm install -g nodemon
```

### Step 4:

In both folders (`client` / `server`) execute the following command to get the required packages:

```bash
  npm install
```

### Step 5:

Go to `server` folder and execute the following command in order to run our back-end server:

```bash
  npm start
```

### Step 6:

Go to `client` folder and execute the following command in order to run our front-end app:

```bash
  npm run dev
```

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- Media -->
## :milky_way: Media

### Dashboard Scene

![Dash](readme_assets/dashboard.png)

### Properties Scene

![Props](readme_assets/properties.png)

### Agent Profile Scene

![Agent](readme_assets/agentpro.png)

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- Contributing -->
## :wave: Contributing

<a href=""https://github.com/ladunjexa/Yariga-Realestate-Dashboard/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=ladunjexa/Yariga-Realestate-Dashboard"" />
</a>

Contributions are always welcome!

See [`contributing.md`](https://contributing.md/) for ways to get started.

Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.

If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"".
Don't forget to give the project a star! Thanks again!

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- License -->
## :warning: License

Distributed under the MIT License. See [LICENSE.txt](https://github.com/ladunjexa/Yariga-Realestate-Dashboard/blob/main/LICENSE) for more information.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- Contact -->
## :handshake: Contact

Liron Abutbul - [@lironabutbul6](https://twitter.com/lironabutbul6) - [@ladunjexa](https://t.me/ladunjexa)

Project Link: [https://github.com/ladunjexa/Yariga-Realestate-Dashboard](https://github.com/ladunjexa/Yariga-Realestate-Dashboard)

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- Acknowledgments -->
## :gem: Acknowledgements

This section used to mention useful resources and libraries (packages) that used in Yariga application project.

#### SERVER DEPENDENCIES:

 - [Node.js](https://nodejs.org/en/download/)
 - [Cloudinary](https://cloudinary.com/)
 - [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
 - [dotenv](https://www.npmjs.com/package/dotenv)
 - [Express.js](https://expressjs.com/)
 - [MongoDB](https://www.mongodb.com/)
 - [Mongoose](https://mongoosejs.com/)
 - [Nodemon](https://www.npmjs.com/package/nodemon)
 
#### CLIENT DEPENDENCIES:

 - [TypeScript](https://www.typescriptlang.org/)
 - [Refine Dev](https://refine.dev/)
 - [axios](https://axios-http.com/docs/intro)
 - [React](https://reactjs.org/)
 - [React-ApexChart](https://apexcharts.com/docs/react-charts/)
 - [React Loader Spinner](https://www.npmjs.com/package/react-loader-spinner)
 - [Material UI](https://mui.com/material-ui/getting-started/installation/)
 - [Google Fonts](https://fonts.google.com/)
- [Google Console](https://console.cloud.google.com/)
- [Figma Design](https://www.figma.com/file/QLU3mZJOsmnAN4SEQ8YSTA/Real-Estate-Admin-Dashboard?node-id=0%3A1&t=y5pLesuNGm7UIfPg-0)

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>
",5,5,1,0,real-estate-management,"[apexchart, cloudinary, figma-to-code, mern-stack, mui, real-estate-management, refine-dev, yariga-dashboard]",0
snedvigimost,snedvigimost-front,snedvigimost,https://github.com/snedvigimost/snedvigimost-front,https://api.github.com/repos/snedvigimost-front/snedvigimost,diploma - real estate website,"# RealEstate

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 9.1.5.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).

## Deploy
#### locally

```
docker-compose build
docker tag snedvigimost-front_snedvigimost-prod:latest registry.digitalocean.com/snedvigemost/snedvigimost-front_snedvigimost-prod:latest
docker push registry.digitalocean.com/snedvigemost/snedvigimost-front_snedvigimost-prod:latest    
```

#### remote
```
docker pull registry.digitalocean.com/snedvigemost/snedvigimost-front_snedvigimost-prod
docker run --name snedvigimost-front -d -p 80:80 registry.digitalocean.com/snedvigemost/snedvigimost-front_snedvigimost-prod:latest
docker run --name snedvigimost-front -d -p 80:80 -p 443:443 -p 2019:2019 registry.digitalocean.com/snedvigemost/snedvigimost-front_snedvigimost-prod:latest
```

localhost {
  root dist/real-estate
  file_server
  reverse_proxy /api/* 188.166.80.5:4222
}

[Angular CLI, Angular, Node.js and TypeScript compatibility.](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3)
",0,0,1,10,real-estate,"[angular, antd, real-estate]",0
INOCcent-afk,Corcondia--,,https://github.com/INOCcent-afk/Corcondia--,https://api.github.com/repos/Corcondia--/INOCcent-afk,Defining the standards of real estate development in Brazil.,"# Corcondia--
Defining the standards of real estate development in Brazil.
",0,0,1,0,real-estate,"[front-end-development, html-css-javascript, real-estate]",0
mlcgp,torontohomes,,https://github.com/mlcgp/torontohomes,https://api.github.com/repos/torontohomes/mlcgp,Data analysis of Toronto homes.,"# Toronto Homes
This repo holds code for a side project of the scraping and analysis of home listings in Toronto.
",0,0,1,0,real-estate,"[finance, home, real-estate, toronto]",0
Flame9025,Landing-page---House-Flipping,,https://github.com/Flame9025/Landing-page---House-Flipping,https://api.github.com/repos/Landing-page---House-Flipping/Flame9025,Site to sign up clients for free real estate course.,"Check my website in your browser:

https://flame9025.github.io/Landing-page---House-Flipping/

@ Plan:

- Dodaƒá breakpointy, by strona by≈Ça responsywna (r√≥wnie≈º na mobilne)
- Rozdzieliƒá plik ze stylami na kilka mniejszych (1 podstrona - 1 arkusz)
- Dodaƒá 5. podstronƒô ze sliderami z opiniami klient√≥w (JavaScript)
- Pozmieniaƒá nazwy klas wg. BEM
- Stworzyƒá i pod≈ÇƒÖczyƒá backend (pobieranie listy zapisanych uczestnik√≥w, e-mail zwrotny po zapisie)
- ≈Åadowaƒá na poczƒÖtku tylko pierwszƒÖ stronƒô, a dopiero p√≥≈∫niej resztƒô strony


@Zrobione:

- Stworzyƒá stronƒô z podziƒôkowaniem po zapisie na kurs
- Zmniejszyƒá wagƒô obrazk√≥w (optymalizacja) - Z≈ÇƒÖczone zdj prowadzƒÖcych 2,8MB ->800KB
",0,0,1,0,real-estate,"[flipping, online-course, promotions-portal, real-estate]",0
Adeyeha,Web-Scrapping-with-Scrappy,,https://github.com/Adeyeha/Web-Scrapping-with-Scrappy,https://api.github.com/repos/Web-Scrapping-with-Scrappy/Adeyeha,A web scrapping project to collect Real Estate data using Scrappy,"## Real Estate Web Scraping with Scrapy
This project uses the Scrapy framework to scrape real estate property information from different websites. The goal is to gather data such as property type, location, price, and other relevant information to store in a structured format.

### Requirements
- Python 3.x
- Required libraries: Scrapy, Pandas, etc.

### How to run
Clone the repository and navigate to the directory.

```sh
git clone https://github.com/Adeyeha/Web-Scrapping-with-Scrappy.git
cd <repo-directory>
```
Then run the following command to start the scraping process:
```py
scrapy crawl <spider_name>
```
Replace <spider_name> with the name of the spider you want to run.

### Data Output
The data is stored in a structured format, such as CSV or JSON, and can be used for further analysis or integration with other systems.

### Contributing
If you want to contribute to this project, please create a pull request with a detailed description of your changes.

### Author
[Temitope Adeyeha](https://github.com/Adeyeha)
",0,0,1,0,real-estate-website,"[real-estate-website, webscraping]",0
lumachroma,LYSTIFY,,https://github.com/lumachroma/LYSTIFY,https://api.github.com/repos/LYSTIFY/lumachroma,LYSTIFY. Modernise and simplify real estate transaction,"# LYSTIFY
LYSTIFY is a PropTech that gathers market players such as developers, buyers, sellers, renters, investors, and real estate professionals under one umbrella that aims to reduce paperwork as well as making transactions quicker, more efficient, and more secure
",0,0,2,1,real-estate-management,"[prop-tech, proptech, real-estate-management, real-estate-platform, real-estate-transaction]",0
aaryadevg,Real-Estate-ETL,,https://github.com/aaryadevg/Real-Estate-ETL,https://api.github.com/repos/Real-Estate-ETL/aaryadevg,Analysis of the real estate market across major cities in India,"# Real Estate ETL

## Overview
Real Estate ETL is a data engineering project focused on analyzing the real estate market in India. The project involves collecting and cleaning real estate data from various sources and aims to provide insights into property market across major cities in India. The data has been collected from the [Real Estate Data from 7 Indian Cities](https://www.kaggle.com/datasets/rakkesharv/real-estate-data-from-7-indian-cities) dataset available on Kaggle. The project utilizes Extract, Transform, and Load (ETL) processes to prepare the data for analysis.

## Dashboard (Screenshot)
<img src=""https://github.com/aaryadevg/Real-Estate-ETL/blob/main/dashboard/Dashboard.png"" />

## Project Structure

The project is structured as follows:

1. Data Collection: Real estate data is collected from the [Real Estate Data from 7 Indian Cities](https://www.kaggle.com/datasets/rakkesharv/real-estate-data-from-7-indian-cities) dataset on Kaggle. The dataset provides comprehensive information about real estate properties in seven major cities in India.

2. Data Cleaning: The collected data undergoes a cleaning process to ensure data quality and consistency. This step involves handling missing values, data normalization, addressing inconsistencies, and standardizing the data format. more information about the procedure can be found in [Data cleaning Notebook](clean.ipynb)

3. Data Storage: The cleaned data is stored in an Excel file. The Excel format provides a convenient and accessible storage solution for the real estate data, enabling easy data manipulation and analysis.

4. Future Plan: Data Analysis with Power BI: In the future, the project plans to perform data analysis using Power BI. Power BI is a business intelligence tool that enables interactive data visualization and reporting. By connecting to the Excel file containing the cleaned real estate data, Power BI will allow for in-depth analysis, creation of interactive dashboards, and generation of visualizations for effective data exploration.

## Tools and Technologies Used

- Python: Programming language used for data collection and cleaning.
- Pandas: Data manipulation and cleaning library in Python.
- Excel: File format used for storing the cleaned real estate data.
- Power BI: Business intelligence tool for data analysis and visualization.

## Dependencies

### Software
- Microsoft Excel (>2016)
- Microsoft PowerBI

### Python
- Pandas
- openpyxl

### R
- ggplot2
- scales

## Future Plans

- [] Try to Parse the ammenities provided from advert
- [] Try to load into a database (MySQL)
- [] Export dashboard into PDF
- [] Create a website to show the dashboard

## Getting Started

To set up and run the project locally, follow these steps:

1. Clone the project repository from GitHub. `git clone https://github.com/aaryadevg/Real-Estate-ETL`

2. Install the necessary dependencies.

3. Run the data collection script to fetch the real estate data from the [Real Estate Data from 7 Indian Cities](https://www.kaggle.com/datasets/rakkesharv/real-estate-data-from-7-indian-cities) dataset.


## Contributing

No project is ever perfect and contributions to the project are always welcome. If you have any suggestions, improvements, or additional ideas for data analysis, feel free to submit a pull request or open an issue on GitHub.

## License

This project is licensed under the [MIT License](LICENSE).

",0,0,1,0,real-estate,"[data-analysis, data-engineering, data-science, eda, etl-pipeline, india-cities, real-estate]",0
adnanhassan1234,Real_Estate_Property,,https://github.com/adnanhassan1234/Real_Estate_Property,https://api.github.com/repos/Real_Estate_Property/adnanhassan1234,"Real_Estate_Property can be tangible items, such as houses, cars, or appliances, or it can refer to intangible items that carry the promise of future worth, such as stock and bond certificates.",,0,0,1,0,property-management,"[animation-css, bootstrap5, carousel-slider, css3, design, html5, javascript, property-management, ui]",0
ThashinAB,Real-Estate-Agent,,https://github.com/ThashinAB/Real-Estate-Agent,https://api.github.com/repos/Real-Estate-Agent/ThashinAB,"This Website is a property marketplace, allows the user to search for properties for sale and to rent. Uses Jquery to search.",,0,0,1,0,real-estate,"[css, html5, jquery, real-estate]",0
lucas-bogos,real-estate-manager,,https://github.com/lucas-bogos/real-estate-manager,https://api.github.com/repos/real-estate-manager/lucas-bogos,"Um sistema de gerenciamento de im√≥veis, feito com PHP com orienta√ß√£o a objetos",,0,0,1,0,real-estate-management,"[bash-script, javascript, manager-system, mysql-database, oop, php, real-estate-management]",0
kirillovmr,ml-housing-corp,,https://github.com/kirillovmr/ml-housing-corp,https://api.github.com/repos/ml-housing-corp/kirillovmr,üß† ML Project to predict the housing prices in California.,"# **Machine Learning Housing Corporation Report**
___
**Task**: Given the [California Housing Prices Dataset](https://raw.githubusercontent.com/ageron/handson-ml/master/datasets/housing/housing.tgz), needed to create a model which would give the predictions of the median housing prices in the districts.

You can see the report on the work done in [Housing Report](https://github.com/kirillovmr/ml-housing-corp/blob/master/Housing_report.ipynb) notebook.

This project can be found in Aur√©lien Geron's book ***Hands-On Machine Learning with Scikit-Learn and TensorFlow*** Chapter 2.",0,0,1,0,real-estate,"[machine-learning, real-estate, regression-models]",0
kobitate,our-homes,,https://github.com/kobitate/our-homes,https://api.github.com/repos/our-homes/kobitate,"React based real estate search dashboard. During our search for a house, we decided MLSPin was ugly an unintuitive, and set out to make something prettier.","# Our Homes
Parsing MLS Pin with [my boyfriend](http://chrissterling.me) into a more intuitive website. He writes the backend, I write the frontend. Check it out at [homes.chrissterling.me](https://homes.chrissterling.me)

![Home Page Preview](https://i.imgur.com/YoBsvSc.png)

![Detail Page Preview](https://i.imgur.com/ezdgzJq.png)

## Frameworks and Libraries
I can't take all the credit for this thing, here's a few of the resources I relied upon when building this site. Give them some love!
* [React](https://github.com/facebook/react/)
* [Bootstrap](https://github.com/twbs/bootstrap) (via [reactstrap](https://github.com/reactstrap/reactstrap))
* [Styled Components](https://github.com/styled-components/styled-components)
* [Mapbox](https://www.mapbox.com/) (via [react-map-gl](https://github.com/uber/react-map-gl))
* [Axios](https://github.com/axios/axios)
* [searchjs](https://github.com/deitch/searchjs)
* [SwipeJS](https://github.com/voronianski/react-swipe)
* [Font Awesome Pro](https://fontawesome.com/) ",0,0,1,0,real-estate,"[mls, mlspin, real-estate]",0
karshan96,Real-Estate-App,,https://github.com/karshan96/Real-Estate-App,https://api.github.com/repos/Real-Estate-App/karshan96,Likely is a simple mobile web app for Real Estate. This is huge time-savers when you need to move quickly on a property purchase.,"# Likely

Likely is a simple mobile web app for property buyers. This is huge time-savers when you need to move quickly on a property purchase.

Through this mobile web application can increase their values for their clients by providing valuable information to help guide buyers or sellers throughout the buying or selling process. 
",0,0,1,0,real-estate,"[flutter-app, real-estate]",0
Pisceszaiby,Rahaish,,https://github.com/Pisceszaiby/Rahaish,https://api.github.com/repos/Rahaish/Pisceszaiby,"Rahaish is a Real Estate Management Web Application. Developed using HTML, CSS, PHP, MySQL","# Rahaish

Real estate property management is an effective and easy to use tool. This web application helps people understand the real estate business. It is a quick response application that can store each detail of every transaction. Real estate property management system can evaluate an unlimited number of properties and units simultaneously. It is developed using HTML, CSS, PHP and MySQL.


## Project Title: Rahaish
### Group members:
Zainab Anwaar

Hafsa Tariq

Sadia Rehman

## Project Features:
Through our real estate management system
1) We aim to provide a transparent record of property sales and ownership. 

2) We designed a database that effectively keeps a trail of real estate assets and their transfer. 

3) It not only provides a user-friendly interface for viewing but also create a single platform that allows access to agents and general public regarding the 
property landscape across the country

4) Sign In Feature

5) Stores detailed data related to transactions for all individual properties

6) Displays filtered properties to users

7) Maintains data of filers and non-filers involved in transactions
 
8) Maintains statistics of housing societies


## How To Run Project:

1) To run the web app, first install XAMPP, and connect Apache and SQL SERVER. 

2) Run PHP my admin and run all the files (database schema, triggers, data population, views, procedures)

3) Add all the files inside the htdocs folder in XAMPP/htdocs/rahaish/

4) Run the landingPage.php to start using the app.

## ERD:
![image](https://user-images.githubusercontent.com/52016745/165969151-d007e5e3-80dc-409c-bd0c-f5de3d2b2e8f.png)

## Screenshots:
#### Landing Page:
![image](https://user-images.githubusercontent.com/52016745/165854721-08db21ec-fa53-4e4d-89de-f9db7c6dc9a9.png)
#### Login:
![image](https://user-images.githubusercontent.com/52016745/165854855-44c6056c-4855-4943-a5ef-90624fc2cb5a.png)
#### Profile:
![image](https://user-images.githubusercontent.com/52016745/165854885-962e9548-61b5-4a68-9ff0-6b85390562fb.png)
#### Filer and Non Filers Data:
![image](https://user-images.githubusercontent.com/52016745/165854908-ccc8ed9d-19bf-4b1e-a813-d8e2f624acec.png)
#### Home Page:
![image](https://user-images.githubusercontent.com/52016745/165854949-b76e838a-0cb1-4b2f-bddc-de1a1b65c5bd.png)
#### Search Properties:
![image](https://user-images.githubusercontent.com/52016745/165854964-8755bd75-52f1-4c60-83a3-5e2af9906f16.png)
#### Search Results:
![image](https://user-images.githubusercontent.com/52016745/165854977-067c2af0-9fb0-4628-a97a-11c25db6c269.png)

",3,3,1,0,real-estate-website,"[database, html, mysql, php, real-estate-website, sql, webapp]",0
ericyaang,instant-property-prediction,,https://github.com/ericyaang/instant-property-prediction,https://api.github.com/repos/instant-property-prediction/ericyaang,"This repository features an app that uses LightGBM machine learning to instantly evaluate real estate properties in Florian√≥polis, Brazil based on location, size, and other features, as well as proximity to risk areas, transportation, hospitals, markets, and green spaces. It also includes code and datasets for reproducing the analysis.","# Instant Property Value Prediction
A fast property valuation tool that uses geographical characteristics to provide a precise listing price range. 

An application that assesses the value of real estate properties in Florian√≥polis, Brazil. The app evaluates various factors, including the location, size, and other relevant features of the properties, as well as the proximity to risk areas, flooding, public transportation, public hospitals, markets, and green areas. This tool can serve as a personal real estate consultant, providing users with a comprehensive evaluation of the properties they are interested in. The app uses various machine learning techniques, including LightGBM, to make instant evaluations based on the geographic characteristics of the properties. In addition to the app, the repository also includes code for reproducing the analysis, as well as the datasets used in the project.

## Table of Contents

  - [Table of Contents](#table-of-contents)
  - [App](#app)
  - [How accurate is it?](#how-accurate-is-it)
  - [Data](#data)
    - [Example of raw datapoint from listings](#example-of-raw-datapoint-from-listings)
    - [Example of the datapoint from the final dataset](#example-of-the-datapoint-from-the-final-dataset)
    - [Scraper](#scraper)
  - [Setup](#setup)
  - [Limitations and improvements](#limitations-and-improvements)
  - [License](#license)
## App
``
streamlit src/run app.py 
``

## How accurate is it?
Light Gradient Boosting Machine (LightGBM) was used to estimate the lower (25%), middle (50%), and upper (75%) ranges by using a quantile loss function.

The model was trained with almost 40.000 listings from April to February in 2022 and is on average over 86% accurate.

The location was restricted to Florian√≥polis, the capital of the state of Santa Catarina, in the South region of Brazil. And only houses and apartments were considered. Duplicated listings or unrealistic selling prices per square meter were excluded. For more details see `config\params.json`

Results on the test data:

| Model | MAE | MAPE | R2 |
| --- | ---| ---| ---|
| Lower bound (0.25) | R$ 218,260.75 | 13.90% | 85.84% |
| Middle bound (0.5)  | R$ 184,260.11 | 13.74% | 89.87% |
| Upper bound (0.75)  | R$ 198,208.98 | 17.96% | 91.33% |
## Data
Data was collected through web-scraping from one of the most representative marketplaces in Brazil the OLX Group.

Geographical features represent the minimum distance (in kilometers) from the nearest point (latitude and longitude) from a given vector or point and the point related to each property. The Haversine formula was used to calculate the distance between points.

Vectors of risky, green, inundation, and bus stop regions were extracted from [the city's Geographic Information Systems (GIS)](http://geoportal.pmf.sc.gov.br/downloads/camadas-em-sig-do-mapa). And the coordinates of health centers, markets, and schools were collected from [Google Maps](https://www.google.com.br/maps).



### Example of raw datapoint from listings
```
{
    ""codigo"": ""1039411391"",
    ""descricao"": ""Apartamento para venda possui 93 metros quadrados com 3 quartos em Centro - Florian√≥polis "",
    ""link"": ""https://sc.olx.com.br/florianopolis-e-regiao/imoveis/apartamento-para-venda-possui-93-metros-quadrados-com-3-quartos-em-centro-florianopolis-1039411391"",
    ""page"": 1,
    ""regiao"": ""centro"",
    ""Valor"": ""R$ 1.390.000"",
    ""Data"": ""Publicado em 28/09 √†s 16:54"",
    ""Categoria"": ""Apartamentos"",
    ""Tipo"": ""Venda - apartamento padr√£o"",
    ""Condom√≠nio"": ""R$ 706"",
    ""IPTU"": ""R$ 1.373"",
    ""√Årea √∫til"": ""93m¬≤"",
    ""Quartos"": ""3"",
    ""Banheiros"": ""3"",
    ""Vagas na garagem"": ""2"",
    ""Detalhes do im√≥vel"": ""Varanda, Mobiliado"",
    ""Detalhes do condominio"": ""Portaria, Sal√£o de festas, Elevador"",
    ""CEP"": ""88015650"",
    ""Munic√≠pio"": ""Florian√≥polis"",
    ""Bairro"": ""Centro"",
    ""Logradouro"": ""Rua Henrique Bruggemann""
},
```
**New features:**

Extracted with CountVectorizer() from the `Detalhes do im√≥vel` and `Detalhes do condominio`:
- Binary: `piscina`, `academia`, `24h`
- Ordinal: `mobiliado`

Latitude and Longitude were created based on the address of each listing with the [geopy](https://github.com/geopy/geopy) package
- `lat`, `long`

Geographical features:
- From vectors: `risco`, `inundacao`, `vegetacao`, `onibus`
- From Points: `escolas`, `mercados`, `saude`
  
### Example of the datapoint from the final dataset
```
{'categoria': 'Apartamento',
  'condominio': 2600.0,
  'area': 520.0,
  'lat': -27.5890871,
  'long': -48.5586603,
  'quartos': 3.0,
  'banheiros': 5.0,
  'vagas_na_garagem': 3.0,
  'saude': 0.42,
  'mercados': 0.21,
  'escolas': 0.63,
  'onibus': 0.21,
  'vegetacao': 1.76,
  'risco': 1.84,
  'inundacao': 3.47,
  '24h': 0,
  'mobiliado': 2,
  'piscina': 1,
  'academia': 0,
  'valor': 2800000.0}
```
### Scraper

```
python src/scraper_script.py
```
## Setup

## Limitations and improvements

- Some addresses doesn't have the number of the street, therefore some locations are not exact
- Could do more text classification to create new features or improve others
- Improve scripts, readability, unit testing
- More extensive feature engineering
- The fitted model is too large, reduce it with feature selection
- Improve web-scraper to automate collection for each week ahead
- More hyperparameter tuning




## License
This repository is under an MIT License

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/ericyaang/instant-property-prediction/blob/main/LICENSE)
",0,0,1,0,real-estate,"[lightgbm, quantile-regression, real-estate]",0
Soumya117,finnDisplay,,https://github.com/Soumya117/finnDisplay,https://api.github.com/repos/finnDisplay/Soumya117,,"# Python Flask App to present finn.no data.

This app uses the data stored by #finnazureflaskapp. On load, it queries the Azure Storage Blob for data and presents a 
graphical representation. It also shows the overall data collected from finn in the tables below. 

The app has two views: List view and map view. User can select between these views. Uses google maps api to fetch the geocode location of the address and then marks and displays the google maps.

It displays the following:

Graph
1. Statistics of realestates added.
2. Statistics of realestates sold.

Reports
1. Realestates added that day.
2. Price Changes for the same house.
3. Houses sold on that day.
4. Visnings added.

DEPLOYMENT

The app is now deployed on google cloud.
Browse link: http://35.232.182.116:9871/


Sample Graph

![alt text](https://github.com/Soumya117/finnDisplay/blob/master/Selection_140.png) <br /><br />



![alt text](https://github.com/Soumya117/finnDisplay/blob/master/Selection_141.png) <br /><br />



![alt text](https://github.com/Soumya117/finnDisplay/blob/master/Selection_142.png) <br /><br />



![alt text](https://github.com/Soumya117/finnDisplay/blob/master/Selection_143.png) <br /><br />




<br />
",0,0,2,2,real-estate,"[azure, azure-app-service, azure-blob, azure-blob-storage, azure-functions, azure-storage, css, finn-no, gcloud, gcloud-sdk, google-app-engine, google-cloud-platform, html, matplotlib, matplotlib-pyplot, python, python-flask, python-flask-application, real-estate, sold-houses]",0
QAZIMAAZARSHAD,Apna-Ghar,,https://github.com/QAZIMAAZARSHAD/Apna-Ghar,https://api.github.com/repos/Apna-Ghar/QAZIMAAZARSHAD,A Real-Estate website online website to buy or rent property online in India.,"# Real-Estate-Website
Property Website

A website that allow users to buy properties in all Indian states online.


Visit Website -> https://qazimaazarshad.github.io/Real-Estate-Website/


",2,2,1,1,real-estate-website,"[html-css-javascript, real-estate-website]",0
tejusrevi,royal-lepage-scraper,,https://github.com/tejusrevi/royal-lepage-scraper,https://api.github.com/repos/royal-lepage-scraper/tejusrevi,A python based web scraper to collect real estate listings from Royal LePage.,,0,0,1,0,real-estate,"[python3, real-estate, webscraping]",0
khaledlec,Paris-Housing-Price-Prediction,,https://github.com/khaledlec/Paris-Housing-Price-Prediction,https://api.github.com/repos/Paris-Housing-Price-Prediction/khaledlec,"A real estate estimation engine using machine learning techniques to predict the net selling price of properties in France, based on their features and location.","# Paris-Housing-Price-Prediction
Paris House Pricing Predictions with deployment

# Moteur-d'estimation-immobilier 
Un moteur d‚Äôestimation immobilier permettant d‚Äôestimer le prix net vendu d‚Äôun bien √† partir de ses propri√©t√©s (surface, chambre, ann√©e de construction ...)et sa localisation

**R√©gion**: *Paris*.

**Type d'immobilier**: *Appartement*.

**Data**: 

  - Demandes de valeurs fonci√®res (DVF) publi√© par minist√®re de l'√âconomie:
  https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres/
  
  - Les taux d‚Äôinflation des logements anciens fourniespar l‚ÄôINSEE:
  https://www.insee.fr/fr/statistiques/6665809#tableau-ipla-g1-fr
  
![image](https://user-images.githubusercontent.com/103390948/218262256-756cb76b-e644-4d38-9dfb-db09128aae)

## Deployement:

![image](https://miro.medium.com/v2/resize:fit:1192/format:webp/1*DU72-AeG_s55k-SFs2Cmng.png)

### Software And Tools Requirements

1. [Github Account](https://github.com)
2. [HerokuAccount](https://heroku.com): Heroku is a cloud-based platform that allows developers to deploy, manage, and scale their applications. It was one of the first cloud platforms as a service (PaaS) and has become popular due to its ease of use and scalability.

Developers can use Heroku to deploy web applications written in various programming languages, including Ruby, Java, Node.js, Python, and PHP, among others. Heroku supports popular web frameworks such as Ruby on Rails, Django, and Express.js.

Heroku manages the infrastructure and servers, so developers can focus on writing code and building their applications. Heroku also provides various tools and add-ons, such as databases, monitoring, and caching services, that developers can use to enhance their applications.

Heroku is widely used by startups, small businesses, and enterprises to deploy and scale their applications quickly and efficiently. It is also popular among developers for its simplicity and ease of use.
    

3. [VSCodeIDE](https://code.visualstudio.com/)
4. [GitCLI](https://git-scm.com/book/en/v2/Getting-Started-The-Command-Line)
5. [Postman]: postman is a popular API development tool that simplifies the process of building, testing, documenting, and sharing APIs. It allows developers to send HTTP requests and observe the responses, as well as to set up automated testing and monitoring of APIs.

Postman provides a user-friendly interface for creating and managing requests, with options for specifying headers, request parameters, authentication methods, and more. It also includes a powerful testing framework that allows developers to write automated tessts and run them on a collection of APIs.

In addition to its core functionality, Postman offers a number of other features, such as collaboration tools for teams, API documentation generation, and integration with other development tools.

Overall, Postman is a versatile and useful tool for API developers and testers, providing a streamlined and efficient workflow for building and testing APIs.",0,0,1,0,real-estate-website,"[data-science, explainable-ml, iforest, machine-learning, random-forest, real-estate-website]",0
arjungunisetti,awaas-vishwa-fe,,https://github.com/arjungunisetti/awaas-vishwa-fe,https://api.github.com/repos/awaas-vishwa-fe/arjungunisetti,"A property listing platform to buy, sell and to rent.","# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
",0,0,1,0,real-estate-website,"[reactjs, real-estate-website]",0
sitatec,RealEstateManager,,https://github.com/sitatec/RealEstateManager,https://api.github.com/repos/RealEstateManager/sitatec,A Real Estate Manager that stores the data in an SQLite database using Room.,"[![Build Status](https://app.travis-ci.com/sitatec/RealEstateManager.svg?branch=master)](https://app.travis-ci.com/sitatec/RealEstateManager) [![Maintainability](https://api.codeclimate.com/v1/badges/7ebf01f657a570d9786f/maintainability)](https://codeclimate.com/github/sitatec/RealEstateManager/maintainability)
# RealEstateManager
A Real Estate Manager that stores the data in an SQLite database using Room.

![Berete Real estate manager android app](https://github.com/sitatec/RealEstateManager/blob/master/assets/real_estate_manager_banner.png)
![Berete RealEstateManager mobile app](https://github.com/sitatec/RealEstateManager/blob/master/assets/REM_banner_small_screens.png)


A demo video is available [here](#demo)
# Used Architecture Components
  - Room Database
  - Hilt
  - Data Binding
  - View Model
  - Live Data
  
# Architecture
  - MVVM  
  - SOLID principles applied
  - Adapter design pattern used to adapt room's entities and DAOs without depending on them
  
# Entity-relationship Diagram
![Entities Relationship Real Estate Manager](https://github.com/sitatec/RealEstateManager/blob/master/assets/EntityRelationship.png)

# Build
To be able to build the project you need google maps and google static maps API key(s), and store them in your local.properties file like this:
```
GOOGLE_MAP_API_KEY=YOUR-API-KEY
GOOGLE_MAP_STATIC_API_KEY=YOUR-API-KEY
```
If you don't want to store your keys in the local.properties, you will have to edit the [build.gradle](https://github.com/sitatec/RealEstateManager/blob/1e2c41261c4c2ac23369f2feed70bfa5cbe7afcc/app/build.gradle#L20) inside the app module.

# Demo
Click on the image below, you will be redirected to the video page.

[![Berete RealEstateManager demo video](https://github.com/sitatec/RealEstateManager/blob/master/assets/screenshot.png)](https://drive.google.com/file/d/1SF_6JI_yT3rFFQm07PMK87kTnIByZld6/view?usp=sharing)
",7,7,1,0,real-estate-management,"[android, architecture-components, clean-code, loan-calculator, real-estate-management, room-database]",0
iamwebwiz,babaproperties,,https://github.com/iamwebwiz/babaproperties,https://api.github.com/repos/babaproperties/iamwebwiz,Real estates for rent at cheaper rates,,0,0,1,18,real-estate,"[eloquent, laravel, mysql, php, real-estate, vue]",0
DrShahinstein,realtor-site,,https://github.com/DrShahinstein/realtor-site,https://api.github.com/repos/realtor-site/DrShahinstein,A real-world website in real estate purpose using React and Django,"# Realtor Site of G√ºler Gayrimenkul
[![Netlify Status](https://api.netlify.com/api/v1/badges/b57ea1a5-2d70-40ce-bbdc-4bd28c3adfbb/deploy-status)](https://app.netlify.com/sites/gulergayrimenkul/deploys)

<p>This project contains the open source of G√ºler Gayrimenkul's realtor site which is a website in real estate purpose.</p>

------

## Requirements
* [yarn](https://yarnpkg.com/)
* [nodejs](https://nodejs.org/en/)
* [pip](https://pip.pypa.io/en/stable/)
* [poetry](https://python-poetry.org/)

------

## Installation
Use the package managers [yarn](https://yarnpkg.com/) and [poetry](https://www.poetryfoundation.org/) to install as shown in below.

```bash
git clone https://www.github.com/1TaylanOzturk/realtor-site.git

cd realtor-site/
yarn
yarn start

cd backend/
poetry install
poetry run python manage.py runserver
```

------


## Technologies
| Technology                                                           | Version     |
| -------------------------------------------------------------------- | ----------- |
| [React](https://reactjs.org/)                                        | ^18.2.0     |
| [React Bootstrap](https://react-bootstrap.github.io/)                | ^2.4.0      |
| [Bootstrap](https://getbootstrap.com/)                               | 5.2.0-beta1 |
| [Python](https://www.python.org/)                                    | ^3.10       |
| [Django](https://www.djangoproject.com/)                             | ^4.0.6      |
| [Django Rest Framework](https://www.django-rest-framework.org/)      | ^3.13.1     |
| [Pillow](https://pillow.readthedocs.io/en/stable/)                   | ^9.2.0      |
| [Django Cors Headers](https://pypi.org/project/django-cors-headers/) | ^3.13.0     |
| [React Spinners](https://github.com/davidhu2000/react-spinners)      | ^0.13.4     |

------

## Deployment
[Here](https://gulergayrimenkul.netlify.app) you can experience this website as it's deployed on the net.

------

## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

------

## License
[GNU General Public License v3.0](https://choosealicense.com/licenses/gpl-3.0/)


",1,1,1,0,real-estate-website,"[fullstack-development, i18next, reactjs, real-estate-website, rest-api]",0
vincentiroleh,Xnug,,https://github.com/vincentiroleh/Xnug,https://api.github.com/repos/Xnug/vincentiroleh,Xnug is an online property management service. We‚Äôre on a mission to give peace of mind to landlords and renters on the planet to achieve more.,"# Xnug
An online property management service for landlords and renters
",0,0,3,0,property-management,"[landlords-server, property-management, renters, tenants]",0
eternalchaoticinflation,VancouverRealEstate2015,,https://github.com/eternalchaoticinflation/VancouverRealEstate2015,https://api.github.com/repos/VancouverRealEstate2015/eternalchaoticinflation,,"# VancouverRealEstate2015
Dashboard displays 
-std, mean, and land value for 2015
-std, mean and land value for 2014.
-plots real estate price by $25k CAN increments after parsing csv with 200,000 records.
-clicking on it further it displays land value and previous land value by zip code in reverse sort
-then more details, by street name.
-Also catogerizes number of dwellings by government catogory.
-plotted in JavaFX.
Using government data 
",0,0,1,0,real-estate,"[2015, csv, csv-parser, dashboard, javafx, real-estate, vancouver]",0
hrshainik,modern-blvd,,https://github.com/hrshainik/modern-blvd,https://api.github.com/repos/modern-blvd/hrshainik,,"<!-- PROJECT LOGO -->
<div align=""center"">
  <h1 align=""center"">ModernBLVD</h1>

  <p align=""center"">
    Here you find all kind of real estate properties.
    <br />
    <br />
    <a href=""#"">View Demo</a>
    ¬∑
    <a href=""https://github.com/hrshainik/modern-blvd/issues"">Report Bug</a>
    ¬∑
    <a href=""https://github.com/hrshainik/modern-blvd/issues"">Request Feature</a>
  </p>
</div>

<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
      <ul>
        <li><a href=""#built-with"">Built With</a></li>
      </ul>
    </li>
    <li><a href=""#contributing"">Contributing</a></li>
    <li><a href=""#contact"">Contact</a></li>
  </ol>
</details>

<!-- ABOUT THE PROJECT -->

## About The Project

[![Product Name Screen Shot][product-screenshot]](https://modern-blvd.vercel.app/)

Here you find all kind of real estate properties.

<p align=""right""><a href=""#top"">‚áßBack To Top</a></p>

### Built With

- [Next.js](https://nextjs.org/)
- [React](https://reactjs.org/)
- [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
- [Tailwind CSS](https://tailwindcss.com/)
- [Sass](https://sass-lang.com/)
- [Firebase](https://firebase.google.com/)

<p align=""right""><a href=""#top"">‚áßBack To Top</a></p>

<!-- CONTRIBUTING -->

## Contributing

Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.

If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"".
Don't forget to give the project a star! Thanks again!

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

<p align=""right""><a href=""#top"">‚áßBack To Top</a></p>

<!-- CONTACT -->

## Contact

Habibur Rahman - [@portfoilo](https://hrshainik.me) - hrsshainik@gmail.com

Project Link: [https://github.com/hrshainik/modern-blvd](https://github.com/hrshainik/modern-blvd)

<p align=""right""><a href=""#top"">‚áßBack To Top</a></p>

[product-screenshot]: public/product.jpg
",0,0,2,2,real-estate,"[nextjs, real-estate, realestate]",0
ViktoriiaUa,HOUNTER,,https://github.com/ViktoriiaUa/HOUNTER,https://api.github.com/repos/HOUNTER/ViktoriiaUa,Landing page for a real estate agency,"# HOUNTER
Landing page for a real estate agency

- Figma
- HTML5
- CSS3
- Bootstrap5
- Eva Icons



",0,0,1,0,real-estate,"[bootstrap5, front-end-development, junior-developer, landing-page, real-estate]",0
framoni,real-estate,,https://github.com/framoni/real-estate,https://api.github.com/repos/real-estate/framoni,Analyse and model prices of apartments in Milan,"# Real Estate

The goal is to scrape ads of apartments for sale in Milan, discover and 
describe interesting patterns within them, and model the data to predict
and explain the price of any apartment

## Code structure

* scraper
  * immobiliare.py _implements the scraper class for immobiliare.it_
* analytics
  * data_exploration.R _script for EDA_
* utils
  * data_preparation.R _function to preprocess the data_

## Setup

Run `source.sh` to setup the Python virtualenv environment with the needed requirements.
R is also needed for data exploration and analysis",0,0,2,2,real-estate,"[machine-learning, milan, real-estate]",0
idemmanuel001,comfy-homes,,https://github.com/idemmanuel001/comfy-homes,https://api.github.com/repos/comfy-homes/idemmanuel001,Real Estate Website,"# Comfy-homes

This is a real estate website built using nextjs and styled using tailwindcss. The frontend  of the website communicates with RapidAPI's rest endpoints using both the static site generation and server side rendering functionalities of nextjs.
The map functionality was implemented using google map api.
[View Live Demo](https://comfy-homes.vercel.app/)


![demo site screenshot](./public/images/comfy-homes-snapshot.png)

## Local Development

1. Clone the repository

```bash
git clone https://github.com/idemmanuel001/comfy-homes
```

2. Navigate into repository

```bash
cd comfy-homes
```

3. Install the dependencies

```bash
npm install
```

4. Start the development server

```bash
npm run dev
```

5. Start the build mode

```bash
npm run build
```",0,0,1,0,real-estate,"[nextjs, reactjs, real-estate, tailwindcss]",0
RagingTiger,single-neuron-multi-input-linear-regression,,https://github.com/RagingTiger/single-neuron-multi-input-linear-regression,https://api.github.com/repos/single-neuron-multi-input-linear-regression/RagingTiger,TensorFlow.js Single Neuron Linear Regression for house price given size and bedroom count,"TensorFlow.js Single Neuron Linear Regression for house price given size and bedroom count
=================

Example showing how to train a custom model to predict house prices given sqft and bedrooms (multiple inputs) using a single artificial neuron without activation function using TensorFlow.js",0,0,1,0,real-estate,"[javascript, linear-regression, neural-network, real-estate, tensorflow, tensorflowjs, webapp]",0
rzldin,cari-properti,,https://github.com/rzldin/cari-properti,https://api.github.com/repos/cari-properti/rzldin,"Cari-Properti is a Sales Property Management, based on Laravel Framework","## Application Interface

###### View HomePage

![HomePage](https://github.com/rzldin/cari-properti/blob/master/public/assets/mockup/page.png)

###### View User Dashboard

![UserDashboard](https://github.com/rzldin/cari-properti/blob/master/public/assets/mockup/user-dashboard.png)

###### View User Profile

![UserProfile](https://github.com/rzldin/cari-properti/blob/master/public/assets/mockup/user-profile.png)

###### View User Ads

![UserAds](https://github.com/rzldin/cari-properti/blob/master/public/assets/mockup/user-ads.png)

###### View User Inbox

![UserInbox](https://github.com/rzldin/cari-properti/blob/master/public/assets/mockup/user-inbox.png)
",2,2,0,49,property-management,"[javascript, laravel, php-framework, property, property-management, website]",0
gitzuza,Data-analysis-of-100-Tallest-Buildings-in-the-World-,,https://github.com/gitzuza/Data-analysis-of-100-Tallest-Buildings-in-the-World-,https://api.github.com/repos/Data-analysis-of-100-Tallest-Buildings-in-the-World-/gitzuza,"This is a list of the tallest buildings across the globe, with information on their name, location, completion, height, material, function, number of floors, and location. There are 100 buildings in this list.",,0,0,1,0,real-estate,"[analysis, buildings, real-estate]",0
sjufan84,climate_predictors,,https://github.com/sjufan84/climate_predictors,https://api.github.com/repos/climate_predictors/sjufan84,The goal of this project is to use publicly available data from the US Census as well as climate change induced population migration models to identify investment opportunities and public infrastructure needs in communities that will see outsized growth.,"# Climate change population migration infrastructure and investment analyses
The goal of this project is to use publicly available data from the US Census as well as climate change induced population migration models to identify investment opportunities and public infrastructure needs in communities that will see outsized growth due to the rapidly changing climate.  We will utilize multiple machine learning models to identify areas where capital and investments are most misallocated, initially focusing on real estate values and then possibly extending out into infrastructure needs such as housing units, hospitals, schools, etc.

### Tools used:
  We will primarily be utlizing Python, Sci-kit learn, Numpy, and various ML models to clean, analyze, and present our data and projections.

#### Basic web app deployed [here.](https://share.streamlit.io/sjufan84/climate_predictors/main)
",0,0,2,0,real-estate,"[climate-change, climate-data, machine-learning, population-model, real-estate]",0
EgoLeX,relf,,https://github.com/EgoLeX/relf,https://api.github.com/repos/relf/EgoLeX,RELF - Open Source Real Estate Lead Form. Simple and Customizable ,"# RELF
RELF - Open Source Real Estate Lead Form. Simple and Customizable 

Version **BETA 0.8**

Note: This version of RELF is still in BETA! It can generally be used but some features are coming within the next time

-----------------------------------------------------------------------

**Features**
- Made from a person with contacts to real estate companies
- Open Source version is fully free to use
- This lead form is fully customizable - Select the wanted queries and change the appearance of the form.
- Even non-technical people can easily customize many elements of the form (colors, texts as well as the questions asked) 
  - Persons with more technical knowledge can modify the form in full

**Requirements:**
- Webserver (e.g. Apache or Nginx)
- min. PHP 7.2 or higher


**Used libraries & tools**
- Bootstrap
- Google Fonts
- 2 Images from Vectezzy (read in credits.txt)


**How to Install**

A complete guide how to install and use RELF (BETA) can u get here: 

https://akegodev.com/software/docs/relf_documentation_english_opensource_version.pdf

**Planed Features for release (v.1.0)**
We have planed such 
- Input Validation
- New optimized icons (current icons are only placeholders)
- New modern Theme (The Beta style keeps)
- change paths to images in a separate file


**Planed Features after release**
- Wordpress Plugin (read more at https://akegodev.com/software-tools/relf-real-estate-lead-form)
- customizable endscreen if no redirect url was entered
- Predefined location selection (also to intercept evaluation requests outside the own service area) 
",0,0,1,0,real-estate,"[form, form-validation, lead, lead-form, real-estate]",0
oldermcdonald,homechekr,,https://github.com/oldermcdonald/homechekr,https://api.github.com/repos/homechekr/oldermcdonald,General Assembly - Software Engineering Immersive - Project 2 - Home Checkr - Property Due Diligence,"# ‚ú®‚ú® HomeChekr ‚ú®‚ú®
(GA Software Engineering Immersive - Project 2)
<br>
Lets house-hunters rate their favourite properties and perform due diligence.

## üè° [Visit HomeChekr App](https://homechekr.herokuapp.com/) üè°

<!--
<a href="""">
  <img src="""" width=""200"" height=""270"" alt=""screenshot"">
</a>
-->

## üìú Project Brief
To build a simple CRUD app using Ruby, Sinatra, Active Record, PostgreSQL, HTTParty with API integration then host it on Heroku. Allow users to log in, rate their listings, and add information to a secure database.


## üíª App Features
- Secure user password hashing with bcrypt
- Search the Domain API for house listings
- Responsive mobile-first design
- Log in feature
- PostgreSQL Database
<!-- - Image uploads -->


## üèãÔ∏è Key Challenges
This was my first CRUD app and I had a stack of fun working through each challenge! Learning about the types of requests and sending data back and forth between the server and client was a rewarding lesson. I look forward to expanding this project more over the coming weeks!


## üïí Project Timing
2 Days initially with further development intended.
",0,0,1,0,real-estate,"[architecture, auctions, due-diligence, houses, inspection, property, real-estate]",0
skynette,real-estate,,https://github.com/skynette/real-estate,https://api.github.com/repos/real-estate/skynette,"Real Estate is an open-source web application designed to provide a platform for buying, selling, and renting properties. The application allows users to browse available properties, view property details, and contact property owners or agents. The project is built using Python Django and Django Rest Framework","# Real Estate

Real Estate is an open-source web application designed to provide a platform for buying, selling, and renting properties. The application allows users to browse available properties, view property details, and contact property owners or agents. The project utilizes Python Django and Django Rest Framework.

## Features

-   Property listing with search and filtering
-   Property detail view with images, description, location, and amenities
-   Property owner/agent contact form
-   User authentication and authorization
-   Property creation, update, and deletion (for authorized users only)
-   Dashboard for authorized users to view their listed properties, pending requests, and edit their profile

## Setup

To run the Real Estate application, you'll need to have the following installed on your machine:

-   Python 3.6 or later
-   pip (to install Python packages)
-   PostgreSQL (v10 or later)

After installing the required dependencies, run the following commands to set up the project:
```python
# Clone the repository
git clone https://github.com/skynette/real-estate.git

# Navigate to the project directory
cd real-estate

# Install the required packages
pip install -r requirements.txt

# Create a PostgreSQL database and update the settings in settings.py
# ...

# Run database migrations
python manage.py migrate

# Start the development server
python manage.py runserver

```
You should now be able to access the application at `http://localhost:8000`.


# Contributing to Real Estate

Thank you for your interest in contributing to the Real Estate project! We welcome all contributions, whether it's bug reports, feature requests, or code contributions.

## Getting Started

To get started with contributing to the project, please follow these steps:

1.  Fork the repository on GitHub
2.  Clone the forked repository to your local machine
3.  Install the required dependencies by running `pip install -r requirements.txt`
4.  Create a new branch for your changes (`git checkout -b my-new-feature`)
5.  Make your changes, commit them, and push to your forked repository
6.  Open a pull request to the main repository

Please make sure to include a detailed description of your changes in your pull request, including any relevant background information and screenshots (if applicable).

## Code Style

We follow the PEP 8 style guide for Python code, and the Django code style for Django code. Please make sure to follow these style guides when contributing to the project.

## Testing

We use the Django test framework to test our code. Please make sure to write tests for your changes and ensure that all existing tests pass before submitting a pull request.

To run the tests, use the following command:

    python manage.py test

## Issues

If you encounter a bug or have a feature request, please open an issue on the GitHub repository. Please make sure to include as much detail as possible, including steps to reproduce the issue (if applicable) and any relevant error messages.

## License

By contributing to the Real Estate project, you agree to license your contributions under the project's [MIT License](https://github.com/skynette/real-estate/blob/main/LICENSE).
",0,0,1,0,real-estate,"[django, django-rest-framework, docker, docker-compose, dockerfile, python, real-estate]",0
HomebaseApp,Homebase-Android,HomebaseApp,https://github.com/HomebaseApp/Homebase-Android,https://api.github.com/repos/Homebase-Android/HomebaseApp,Android Port for Homebase App,"# Homebase - Android
Native Android implementation of the Homebase social network

#Future Goals
     Message Boards
     Events
     Rent / Payment Handling
     Tasks - Todos
     Google, Facebook Sign-In authentication

#Current Build
![alt tag](https://github.com/HomebaseApp/Homebase-Android/blob/master/mobile/src/main/res/drawable/main_screen.png)
",0,0,3,0,property-management,"[android, automotive, housemates, mobile, property-management, wearable-devices]",0
otofarings,Coursera_Capstone,,https://github.com/otofarings/Coursera_Capstone,https://api.github.com/repos/Coursera_Capstone/otofarings,Capstone Project - The Battle of Neighborhoods,"# Capstone Project - The Battle of Neighborhoods
This project was created as the final assignment for the 
[Applied Data Science Capstone](https://www.coursera.org/learn/applied-data-science-capstone/home/info) course on [Coursera](https://www.coursera.org/). Here we will describe a problem that can be solved using Foursquare location data.


**The main points of the project:**
1. [Introduction](https://github.com/otofarings/Coursera_Capstone/blob/main/Introduction.ipynb)
    - Description of the problem
    - Description of the data

2. [Data](https://github.com/otofarings/Coursera_Capstone/blob/main/Data.ipynb)
    - Import Libraries
    - Prepping Data

3. [Exploring and clustering](https://github.com/otofarings/Coursera_Capstone/blob/main/Exploring%20and%20Clustering.ipynb)
    - Methodology
    - Import Libraries
    - Explore data
    - Cluster Districts
    - Analyze


4. [Results and Conclusion](https://github.com/otofarings/Coursera_Capstone/blob/main/Results%20and%20Conclusion.ipynb)

This is the first big project. This project is far from ideal. If you have any comments, suggestions or constructive criticism, I am always glad to listen.
",0,0,1,0,real-estate,"[capstone-project, coursera, data-science, foursquare, foursquare-api, ibm, penza, real-estate, the-battle-of-neighborhoods]",0
Salmaki-hub,Real_estate_scraper,,https://github.com/Salmaki-hub/Real_estate_scraper,https://api.github.com/repos/Real_estate_scraper/Salmaki-hub,"The following project focuses on scraping houses information that are available for rent in UK. The website I used is ""Your Move"". ","Ôªø# Real_estate_scraper
The following project focuses on scraping houses information that are available for rent in UK. The website I used is ""Your Move"".",0,0,1,0,real-estate,"[beautifulsoup4, data-scraping, housing-prices, python3, real-estate, web-scraping]",0
coderBoost-PK2USA,property-service,coderBoost-PK2USA,https://github.com/coderBoost-PK2USA/property-service,https://api.github.com/repos/property-service/coderBoost-PK2USA,REST APIs for Property Management System,"# property-service

REST APIs for Property Management System

# Features

# 1. Admin

.	The admin should have a dashboard page

.	If the owner registers to the web site, he/she need to get approval from Admin in order to post properties.

# 2. Owner

.	Register as Owner

.	Property (CRUD). If a property is under ‚Äòpending‚Äô it cannot be deleted

.	Owner cannot submit offers on property from the website

.	Maintain offers:

a.	Reject offer if the owner does not accept. The property status should remain ‚Äòavailable‚Äô

b.	If ‚Äòpending‚Äô phase get accepted from both sides. The property status becomes ‚Äòcontingent‚Äô.

c.	Receive messages from a customer (General inquires NOT an offer)

d.	Cancel contingency

e.	Maintain offers placed (list of placed offers)

# 3. Customer

a.	Register as Customer

b.	Cannot offer properties on this website

c.	Check offer History

d.	Maintain current offers placed

e.	Cannot cancel offer after ‚Äòcontingency‚Äô

f.	Place offer, the property status will be changed to ‚Äòpending‚Äô if the offer gets accepted



",0,0,0,0,property-management,"[docker-compose, jpa, lombok, postgresql, property-management, rest-api, spring-data]",0
snowyu,property-manager.js,,https://github.com/snowyu/property-manager.js,https://api.github.com/repos/property-manager.js/snowyu,make it easier to manage the properties/attributes of your class.,"
## property-manager [![npm][npm]](https://npmjs.org/package/property-manager)

[![Join the chat at https://gitter.im/snowyu/property-manager.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/snowyu/property-manager.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

[![Build Status][trvais]](http://travis-ci.org/snowyu/property-manager.js)
[![Test Coverage][codeClimateTest]](https://codeclimate.com/github/snowyu/property-manager.js/coverage)
[![Code Climate][codeClimate]](https://codeclimate.com/github/snowyu/property-manager.js)
[![downloads][downloads]](https://npmjs.org/package/property-manager)
[![license][license]](https://npmjs.org/package/property-manager)

[npm]:https://img.shields.io/npm/v/property-manager.svg
[trvais]:https://img.shields.io/travis/snowyu/property-manager.js/master.svg
[downloads]:https://img.shields.io/npm/dm/property-manager.svg
[license]:https://img.shields.io/npm/l/property-manager.svg
[coveralls]:https://coveralls.io/repos/snowyu/property-manager.js/badge.svg?branch=master&service=github
[codeClimateTest]:https://codeclimate.com/github/snowyu/property-manager.js/badges/coverage.svg
[codeClimate]:https://codeclimate.com/github/snowyu/property-manager.js/badges/gpa.svg

make it easier to manage the properties/attributes of your class.

Features:

* Inherited properties with class.
* Assign properties from a plain object(JSON Object).
* Clone object.
* Compare object whether is the same.
* Export properties to a plain object(JSON Object).
* Declare properties with type and default value.
  * Supports `arrayOf` property with type
  * Supports property with `template`(the property value is determined by the template content):
    * `template` *{string | (this) => string}*:
      * the template string, eg, `'${author}-${uuid()}'`
      * or customize template function, `function() {return this.author + '-' + uuid()}`
    * `imports`: *{Object}* the optional functions could be used in the template string.
    * **NOTE**: the template property is readonly by default. You can make it writeable.
      Once a new value has been written, the template will be no useful unless the new value is null or undefined.

We often need to manage the properties of an object, consider the following:

* Set the options to the properties of object when the object was created
  * `var myObj = new MyObject({opt1:value1, opt2:value2})`
* Assign the options from another object:
  * `myObj.assign({opt1:v1, opt2:v2})`
* Clone an object:
  * `var newObj = myObj.clone()`
* Compare two objects whether is the same by their options(assigned properties).
  * `myObj.isSame(anotherObj)`
* Export the properties as a plain object or JSON to make recreate the object easier in the future.
  * There are some internal attributes should not be exported.
  * The empty or default value of an attribute should not be exported.
  * the meaningful(non-english) name should be exported and assigned.
  * `myObj.toObject()` and `myObj.toJSON()`
  * `JSON.stringify(myObj)`

1. Problem: how to assign an object value of a property?
   * replace the standard `assignPropertyTo()` method.
   * define the attribute's `assign(value, dest, src, name)` method on the `$attributes`.
     * the custom attribute's `assign` the value. return the changed value.
2. Problem: how to decide which property should be assign or get default value of an attribute?
   1. define all attributes on this object even though the value is null.
      * no default value feature.
   2. define a simple `$attributes` property to manage this:
      * {attrName: {value:'defaultValue'}, ...}
   3. define a complex `$attributes`(use `Properties` class) to manage attributes.

So we have these classes: SimplePropertyManager,NormalPropertyManager and AdvancePropertyManager.

first the rules of the properties:

* exported attributes means they are the JSON.stringify(aObj) attributes only.
* The non-enumerable attributes can not be exported and assigned.
* The enumerable attributes beginning with '$' can not be exported. but can be assigned.
* `undefined` value can not be exported.
* the readonly(writable is false) attributes can not be assigned.
* the assignment order of properties is the order of defined properties.

### You can inherit from it

* SimplePropertyManager: /lib/simple
  * use the object's property descriptor directly.
  * so do not support default value.
  * do not support object value assignment hook function.
  * do not support meaningful(non-english) name.
* NormalPropertyManager: /lib/normal
  * use the `$attributes` plain object to hold the declaration properties
  * support default value.
  * support object value assignment hook function.
  * support meaningful(non-english) name.
* AdvancePropertyManager: /lib/advance
  * use the `$attributes` to hold the declaration properties
  * the `$attributes` is an instance of `Properties` class.
  * so you can custom your `Properties` class inherited from.
  * support default value.
  * support object value assignment hook function.
  * support meaningful(non-english) name.
  * support type check if possible.

The `$attributes` holds all attributes(like the property descriptor) of an object.
The `key` is the property name. the value is the property descriptor:

* name *(String)*: the non-english name to export, Defaults to the `key` name.
* value: the property's default value if exists. Defaults to `undefined`.
* type *(String)*: the property's type name. defaults to undefined.
* enumerable *(Boolean)*: defaults to true
  * true if and only if this property shows up during enumeration of
    the properties on the corresponding object.
* configurable *(Boolean)*: defaults to true
  * true if and only if the type of this property descriptor may be changed
    and if the property may be deleted from the corresponding object.
* writable *(Boolean)*: defaults to true
  * true if and only if the value associated with the property may be changed
    with an assignment operator.
* assign *(Function(value, dest, src, name))*:the custom attribute assignment function.
  just `return` the changed value. defaults to undefined.
  It means do not assign this value if return `undefined`
  * **Note**: It only used on assign the options from another object.
  * It's no effect if the assign the property individually. use the property descriptor `set` to do so.
  * Wrap it as smart-assign feature(only on Advance Property Manager):
    * add a hidden internal property with prefix automatically
    * add descriptor `get` function to read the property automatically
    * add descriptor `set` function to assign the property(call the `assign` descriptor) automatically.
* only available on Normal and Advance Property Manager:
  * `assigned` *(Boolean)*: whether the property can be assigned. defaults: undefined
    * if undefined then `=enumerable isn't false and (writable isn't false or isFunction(set))`
  * **Smart Assign Support** only available on AdvancePropertyManager
    * `assigned` *(Boolean|String)*: enable smart-assign support when the assigned is string
    * it uses the `nonExported1stChar+name` as the internal property name if the string is empty
    * the `assigned` string is the internal property name if it's non-empty.
  * `exported` *(Boolean)*: whether the property can be exported. defaults: undefined
    * if `undefined` then `=enumerable isn't false and the first char isn't ""$""`
  * `alias` *(String|ArrayOf String)*: add the alias(es) to the property. It used via assignment from options.
  * `clone` *(Boolean)*: Whether clone default property value if the value is an object when initializing.
    defaults to true.

```js

'$attributes': {
  'attrName': {
    name: 'exportedName',
    value: 123,
    enumerable: false,
    type: 'String',
    configurable: true,
    writable: true,
    assign: function(value, dest, src, name)
    get: ...,
    set: ....
  }
}
```

### Or inject it as an ability

these methods will be added(replaced):

* `initialize(options)` : overwrite this for assign options from constructor?
  * apply the initialized value of the properties to the object if possible.
  * then call `assign` method.
+ `assign(options)` : assign the options' attributes to this object.
  * how to decide which attribute should be assign?
  * I need an attributes manage class? or just a simple attributes list?
  * or define all attributes even the value is null when initialize
  * this must be an optional feature.
+ `assignPropertyTo(dest, options, attributeName, value)`: assign an attribute to dest.
  * you can override it to determine howto assign an object value.
+ `assignProperty(options, attributeName, value)`: assign an atrribute. called by `assign`
* `assignTo(dest)` : assign the attributes to this `dest` object.
* `mergeTo(dest)`: merge the attributes itself to `dest` object.
  * do not overwrite the already exist attributes of the `dest`.
* `isSame(obj)`: compare the `obj`'s attributes whether is the same value with itself.
* `clone(options)`: create a new object with the same attributes' value.
* `toObject(options)`: convert it as plain object.
  * do not export the non-enumerable attributes or beginning with '$'
  * do not export the attribute's value is null
  * do not export the attribute's value is default value.
    * where to get the default value?
* `toJSON()`: this will call the `toObject()` to return.

Note: you should specify the position of the argument if the first argument is not the options

## Usage

### Make your class manage the properties

there are two ways to make your class manage the attributes.

* Class inherits from
  * inherits from PropertyManager directly.
* Ability to hook on any class
  * You need confirm these method names are not be used.
    The `$attributes` is used via normal and advance PropertyManager.
    the `nonExported1stChar` is used to change the first char of non-exported
    property, defaults to '$'. It must be exist.
    The first four methods must be exist. others are optional.
    But be care of their dependencies.
    1. $attributes (unless use simple PropertyManager)
    2. nonExported1stChar
    3. assign
    4. assignPropertyTo
    5. getProperties
    6. defineProperties
    7. clone (optional)
       * mergeTo
    8. initialize (optional)
       * getProperties
       * assign
    9. assignProperty (optional)
       * assignPropertyTo
    10. mergeTo (optional)
        * getProperties
        * assignPropertyTo
    11. exportTo (optional)
        * mergeTo
    12. assignTo (optional)
        * getProperties
        * assignPropertyTo
    13. toObject (optional)
        * exportTo
    14. toJSON (optional)
        * toObject
    15. isSame (optional)
        * mergeTo

#### Class Inherits

there are three PropertyManager class to use, the default is NormalPropertyManager.

```coffee
inherits = require 'inherits-ex/lib/inherits'
PropertyManager = require 'property-manager' # the default is normal
PropertyManager = require 'property-manager/lib/normal'
SimplePropertyManager = require 'property-manager/lib/simple'
AdvancePropertyManager = require 'property-manager/lib/advance'

# Only for Normal or Advance PropertyManager
defineProperties = ProperManager.defineProperties

class MyClass
  inherits MyClass, PropertyManager
  # if you use normal or advance property manager
  # you can define your properties here to:
  defineProperties MyClass, {
    'attr1': {value:123}
    'hidden': {value:1, enumerable: false}
    '$dontExport': {value:3, enumerable: true}
    'custom':
      value:{}
      assign:(value, dest, src, name)->
        value?={}
        value.exta = 123
        return value
  }
  constructor: (@name, options)->
    # if you use the SimplePropertyManager
    # you should define your properties here:
    #@defineProperties {
    #  'attr1': {value:123}
    #  'hidden': {value:1, enumerable: false}
    #  '$dontExport': {value:3, enumerable: true}
    #}
    super options

class MyClassEx
  inherits MyClassEx, MyClass
  defineProperties MyClassEx, {'extra': {value: 'extra'}}
  constructor: ->super

```
the following is javascript:

```js
var inherits = require('inherits-ex/lib/inherits');
var PropertyManager = require('property-manager');
var PropertyManager = require('property-manager/lib/normal');
var SimplePropertyManager = require('property-manager/lib/simple');
var AdvancePropertyManager = require('property-manager/lib/advance');

//# Only for Normal or Advance PropertyManager
var defineProperties = ProperManager.defineProperties

function MyClass(name, options) {
  this.name = name;
  // if you use the SimplePropertyManager
  // you should define your properties here:
  //this.defineProperties({
  //  'attr1': {value:123}
  //  'hidden': {value:1, enumerable: false},
  //  '$dontExport': {value:3, enumerable: true}
  //})
  PropertyManager.call(this, options);
}

inherits(MyClass, PropertyManager);

//only for normal, advance property manager
defineProperties(MyClass, {
    'attr1': {value:123},
    'hidden': {value:1, enumerable: false},
    '$dontExport': {value:3, enumerable: true},
    'custom': {
      value: {},
      assign: function(value, dest, src, name) {
        if (value == null) {
          value = {};
        }
        value.exta = 123;
        return value;
      }
    }
});

function MyClassEx() {
  MyClassEx.__super__.constructor.apply(this, arguments)
}
inherits(MyClassEx, MyClass);
defineProperties(MyClassEx, {'extra': {value: 'extra'}});


```

#### Ability to hook on any class

```coffee
propertyManager = require 'property-manager/ability'

class MyClass
  # add the property manager ability to MyClass
  # the default is normal property manager
  #   propertyManager MyClass
  # you can specified the property manager 'simple', 'advance', 'normal':
  #   propertyManager MyClass, 'simple'
  #   propertyManager MyClass, name: 'simple'
  # and you can specified the options position in the arguments
  propertyManager MyClass, optionsPosition: 1
  # you can exclude some non-core methods
  # propertyManager MyClass, optionsPosition: 1, exclude: ['assignTo', ...]
  # if you use normal or advance property manager
  # you can define your properties here to:
  defineProperties = MyClass.defineProperties
  defineProperties MyClass, {
    'attr1': {value:123}
    'hidden': {value:1, enumerable: false}
    '$dontExport': {value:3, enumerable: true}
    'date':
      assign: (value, dest, src, name, {isExported}) ->
        if isExported
          value.toISOString()
        else if !(value instanceof Date)
          new Date(value)
        else
          value
    'custom':
      value:{}
      assign:(value, dest, src, name, opts)->
        value?={}
        value.exta = 123
        return value
  }
  constructor: (@name, options)->
    # if you use the SimplePropertyManager
    # you should define your properties here:
    #@defineProperties {
    #  'attr1': {value:123, enumerable: true}
    # 'hidden': {value:1, enumerable: false}
    # '$dontExport': {value:3, enumerable: false}
    #}
    @initialize.apply @, arguments

class MyClassEx
  inherits MyClassEx, MyClass
  defineProperties MyClassEx, {'extra': {value: 'extra'}}
  constructor: ->super

```

the following is javascript:

```js
var propertyManager = require('property-manager/ability');

function MyClass(name, options) {
  // if you use the SimplePropertyManager
  // you should define your properties here:
  //this.defineProperties({
  //  'attr1': {value:123}
  //  'hidden': {value:1, enumerable: false},
  //  '$dontExport': {value:3, enumerable: false}
  //})
  this.name = name;
  this.initialize.apply(this, arguments);
}

// you can exclude some non-core methods:
//propertyManager(MyClass, {optionsPosition:1, exclude: ['assignTo', ...]})
propertyManager(MyClass, {optionsPosition: 1});
var defineProperties = MyClass.defineProperties;

//only for normal, advance property manager
defineProperties(MyClass, {
  'attr1': {value: 123},
  'hidden': {value: 1, enumerable: false},
  '$dontExport': {value: 3, enumerable: true},
  'date': {
    assign(value, dest, src, name, {isExported}) {
      let result;
      if (isExported) {
        result = value.toISOString()
      } else if (!(value instanceof Date)) {
        result = new Date(value)
      }
      return result;
    }
  }
  'custom': {
    value: {},
    assign: function(value, dest, src, name, opts) {
      if (value == null) {
        value = {};
      }
      value.exta = 123;
      return value;
    }
  }
});

function MyClassEx() {
  MyClassEx.__super__.constructor.apply(this, arguments)
}
inherits(MyClassEx, MyClass);
defineProperties(MyClassEx, {'extra': {value: 'extra'}});

```

### Use the Property Manager

Now the `MyClass` class should have four attributes

* attr1: can be exported and assigned
* hidden: can not be exported and assigned
* $dontExport: can be assigned, can not be exported.
* custom: can be exported and assigned, the value be changed by
  `assign` function in the property descriptor.

the `MyClassEx` inherits from `MyClass` (NOTE: only for normal or advance property manager)

* extra: can be exported and assigned.
* others inherit from `MyClass`

```coffee
assert = require 'assert'
my = new MyClass 'aName', attr1: 3, hidden:11222, $dontExport: 1, custom:{b:12}
assert.deepEqual my.mergeTo(), attr1:3, $dontExport:1, custom:{b:12, exta: 123}
assert.equal my.hidden, 1 # the `hidden` can not be assigned and exported
assert.deepEqual my.toObject(), attr1:3 # the `$dontExport` can not be exported
assert.equal JSON.stringify(my), '{""attr1"":3,""custom"":{""b"":12,""exta"":123}}'

obj = my.clone()
assert.ok obj.isSame(my) # compare each assigned properties.
assert.deepEqual obj.mergeTo(), attr1:3, $dontExport:1, custom:{b:12, exta: 123}

myEx = new MyClassEx 'theClassEx', attr1: 3, hidden:11222, $dontExport: 1, custom:{b:12}
assert.deepEqual myEx.mergeTo(), extra:'extra', attr1:3, $dontExport:1, custom:{b:12, exta: 123}
```

the following is javascript:

```js
var assert = require('assert');

var my = new MyClass('aName', {
  attr1: 3,
  hidden: 11222,
  $dontExport: 1,
  custom: {
    b: 12
  }
});

assert.deepEqual(my.mergeTo(), {
  attr1: 3,
  $dontExport: 1,
  custom: {
    b: 12,
    exta: 123
  }
});

assert.equal(my.hidden, 1);

assert.deepEqual(my.toObject(), {
  attr1: 3
});

assert.equal(JSON.stringify(my), '{""attr1"":3,""custom"":{""b"":12,""exta"":123}}');

var obj = my.clone();

assert.ok(obj.isSame(my));

assert.deepEqual(obj.mergeTo(), {
  attr1: 3,
  $dontExport: 1,
  custom: {
    b: 12,
    exta: 123
  }
});
```

## API



## Changes

More recent changes see: [CHANGELOG.md](./CHANGELOG.md)

### v1.4.0

* feat: add the readonly to smart assigned property

```ts
@Properties
class Phone extends AdvancePropertyManager {
  @Prop({
    writable: false,
    exported: true,
    assigned: '',
  }) id!: string;
}
```

* **BROKEN CHANGE**: DO NOT EXPORT the readonly property by default unless exported is true.

```ts
@Properties
class Phone extends AdvancePropertyManager {
  @Prop({
    writable: false,
    exported: true,
  }) id!: string;
}
```


### v1.0.0

+ add the array with type supports.

```ts
import { arrayOf } from 'property-manager/lib/array';
import AdvancePropertyManager from 'property-manager/lib/advance';
import { PropertyManager as Properties, Property as Prop } from 'property-manager-decorator';

@Properties
class Phone extends AdvancePropertyManager {
  @Prop() value!: string;
  @Prop() codeNum!: string;
  @Prop() kind!: string;
  constructor(initValue?) {
    super(initValue);
  }
}

@Properties
class Contact extends AdvancePropertyManager {
  @Prop({type: String}) name!: string;
  @Prop({type: arrayOf(Phone)}) phones!: Phone[];
  constructor(initValue?) {
    super(initValue);
  }
}
```
* **BROKEN** change `toObject` method params to `(options?: IMergeOptions)`
* **BROKEN** change `assign` method params to `(src, options?: IMergeOptions)`
* **BROKEN** change `assignTo` method params to `(dest, options?: IMergeOptions)`
* **BROKEN** change `assignPropertyTo` and `assignProperty` method params to `(dest, src, name: string, value, attrs?, options?: IMergeOptions)`
* **BROKEN** change `exportTo` method params to `(dest, options?: IExportOptions)`
* **BROKEN** change `mergeTo` method params to `(dest, options?: IMergeOptions)`
  + add `skipNull` and `skipUndefined` option to `IExportOptions` and `IMergeOptions`
+ add the `extends(attrs: Object, nonExported1stChar)` method to the `Properties`
  * return a new `Properties` instance to extends properties from current instance.
+ add the inherited properties supports for `AdvancePropertyManager.defineProperties`
* change the `recreate` argument default value of `defineProperties` to `false` for `AdvancePropertyManager` and `NormalPropertyManager`
* set all methods and non-properties of `Properties` to be non-enumerable.

### v0.13.0

+ add typed property for `AdvancePropertyManager` and `NormalPropertyManager`

```js
function CustomType(value) {
  if (!(this instanceof CustomType)) return new CustomType(value)
  try {
    value = JSON.parse(value)
  } catch(err) {
    this.value = value
  }
}

const attrs = {
  prop1: {type: CustomType, value: 111}
}

class TypedPM extends AdvancePropertyManager {
  constructor(opts) {
    super(opts)
  }
}
TypedPM.defineProperties(attrs)

const obj = new TypedPM()
console.log(obj.prop1 instanceof CustomType)
```

### v0.11.0

+ add the `skipExists` option to the `Properties.assignTo` and `Properties.assignPropertyTo`
* the options to the `Properties.assignTo(dest, src, options)`
  * `exclude`*(String|Array)*
  * `skipDefault`*(Boolean)*
  * `skipExists`*(Boolean)*
  * `skipReadOnly`*(Boolean)*
  * `exported`*(Boolean)*

### v0.10.0

+ add the alias property descriptor(Normal&Advance):
  * You can define one or more aliases to assign from other object(options)
  * `alias` *(String|ArrayOf String)*
* Smart assignment property supports(AdvancePropertyManager):
  * **broken**: SMART_ASSIGN constant deprecated.
  * `assigned` descriptor *(Boolean|String)*:
    * `String` means SMART_ASSIGN.
    * it's the internal property name of the smart assignment if it's string
    * the internal property name is the property name with prefix(`nonExported1stChar`)
      if it's an empty string
- **broken**: remove `attrsName` property(fixed to '$attributes')
+ add the helper function: properties/define-properties.

### v0.9.0

* clone default property value if the value is an object when initializing
  * the object instances will share the same one of property value if the default value of property is an object.
    * howto create a new object instance when initializing default value.
    * Solution 1: the `value` descriptor could be a function to create new object instance:
      * Problem1: it will be only available for normal and advance property manager
        * `value: function (){return Object.create()}`
      * Problem2: the value can not be a function now.
    * Solution 2: check the value whether is object. if so, clone it when initializing.
      * use this solution. but if someone wish all instance share the same value.
      * add a descriptor to control whethe enable this. but simple can not support the custom descriptor.
        + `clone` *(Boolean)*: defaults to true.
+ Smart assignment property supports:
  * assign property descriptor *(Function(value, dest, src, name))*:
    * It only used to assign the options from another object.
    * It's no effect if the assign the property individually. should use the property descriptor `set` to do so.
    * maybe I should wrap it:
      * add a hidden internal property with prefix(`nonExported1stChar`)
      * add descriptor `get` function to read the property
      * add descriptor `set` function to assign the property(call the `assign` descriptor).
    * need a descriptor to control whethe enable this.
      + `assigned`: AdvancePropertyManager::SMART_ASSIGN = 2
      * enabled: `!get and !set and assigned is AdvancePropertyManager::SMART_ASSIGN`
    * only available for advance property manager.
    * **note**: only `value` argument is passed into `assign` descriptor when assignment the property individually.

### v0.8.0

+ add the property writable check: do not assign the readonly property.
* Normal, Advance
  + add the `assigned`, `exported` *(Boolean)* to property descriptor directly.
    * `assigned`: enumerable isnt false and (writable isnt false or isFunction(set)).
    * `exported`: enumerable isnt false and the first char isnt ""$""
+ `PropertyManager::nonExported1stChar` *(Char)*, defaults to '$'
  * note: the `exported` descriptor is higher prior than `nonExported1stChar`.
+ `nonExported1stChar` option to the property manager ability.

### v0.7.0

* **broken** the arguments order of assign function in property descriptor are changed:
  * attr.assign(value, dest, src, name, opts) instead of assign(dest, src, value, name)

###

## License

MIT
",2,2,2,0,property-management,"[enumerable-attributes, inherits, javascript, json, property-descriptor, property-management]",0
Road2Data,P1-House-Prices,,https://github.com/Road2Data/P1-House-Prices,https://api.github.com/repos/P1-House-Prices/Road2Data,Regression,"# P1 House Prices - Advanced Regression Techniques

GOAL: Using the Ames Housing dataset compiled by Dean De Cock, we want to predict the final price of each home along 79 feature columns.
We can find the Kaggle Competition [here](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/overview).

I. Imports

II. Data Cleaning and Feature Engineering
* Numerical imputation 
* Ordinal Encoding 
* Nominal dummy variables

III. EDA & Data Visualization

IV. Apply and Grade Linear and Ensemble Regression Models

* Compare error metrics with RMSE and R2. 
* Detect best fit 
* Check residuals",0,0,1,0,real-estate,"[data-visualization, ensemble-learning, feature-engineering, linear-regression, real-estate]",0
unee-t,frontend,unee-t,https://github.com/unee-t/frontend,https://api.github.com/repos/frontend/unee-t,Meteor front end,"# Unee-T

<img src=""https://media.dev.unee-t.com/2018-12-10/Unee-T_high_level_architecture.png"" alt=""Overview"">

* [How to test with Bugzilla in a local environment](https://unee-t-media.s3-accelerate.amazonaws.com/frontend/MEFE.mp4)
* [ECS deploy](https://unee-t-media.s3-accelerate.amazonaws.com/2017/ecs-deploy.mp4) with `./deploy.sh`

# Demo - How to see how it works:

* You can either go the demo environment, described [here](https://documentation.unee-t.com/2018/03/01/introduction-to-the-demo-environment/) for the functionalities that we currently in production.
* You can also go to Figma to see the things we are currently working on.
	* [Manage Notifications](https://www.figma.com/proto/SgLcXdmBih1JxVq1lupMiPtr/Unee-T-Designs?node-id=1969%3A62&scaling=scale-down).
	* [Creating a new inventory for a unit and adding an item to that inventory](https://new.figma.com/proto/SgLcXdmBih1JxVq1lupMiPtr/Unee-T-Designs?node-id=1483%3A3763&scaling=scale-down&redirected=1).
* Figma also has an android and iPhone version: Figma Mirror.

# Environment variables

They are securely managed in AWS's [parameter store](https://ap-southeast-1.console.aws.amazon.com/ec2/v2/home?region=ap-southeast-1#Parameters:sort=Name). The variables are retrieved via [an environment setup script](https://github.com/unee-t/frontend/blob/master/aws-env.dev), which is utilised by `deploy.sh`.

For local development, use `./env-setup.bash` assuming you have been access to the `uneet-dev` development environment.

# Deployment

Happens automatically on master on the development AWS account 8126-4485-3088
with AWS_PROFILE `uneet-dev`. Travis CI deployments made via pull request will fail since it will
not have access to `AWS_SECRET_ACCESS_KEY`.

Production deployment on AWS account 1924-5899-3663 is done manually via
`./deploy.sh -p` via the AWS_PROFILE `aws-prod` only once the **build is tagged**.

# Debugging with VScode

[Background reading](https://github.com/Microsoft/vscode-recipes/blob/master/meteor/README.md#configure-meteor-to-run-in-debug-mode)

* `cd .vscode; curl -O https://media.dev.unee-t.com/2018-07-05/launch.json` for example, edit this to point to where your browser binary lives
* `npm run debug`... you need to run this manually on the CLI
* Meteor: Node to attach & debug server side
* Meteor: Chrome to debug client side

# Logs

Frontend logs to the [meteor log group in
CloudWatch](https://ap-southeast-1.console.aws.amazon.com/cloudwatch/home?region=ap-southeast-1#logs:),
which is controlled by the [compose
file](https://github.com/unee-t/frontend/blob/master/AWS-docker-compose-meteor.yml#L16).

# Meteor builds

The canonical master branch CI build location is <https://unee-t-media.s3-accelerate.amazonaws.com/frontend/master.tar.gz>

To discover other branches:

	aws --profile uneet-dev s3 ls s3://unee-t-media/frontend/

Every commit is also uploaded to:

	aws --profile uneet-dev s3 ls s3://unee-t-media/frontend/commit

[Commits are expired after 90 days](https://s3.console.aws.amazon.com/s3/buckets/unee-t-media/?region=ap-southeast-1&tab=management)

## Setup

1. Install Meteor
`https://www.meteor.com/install`

1. Install dependencies
```shell
npm install
```

## Start App
```shell
npm start
```

# Tips

## How do I figure out the email of the logged in user?

Run in browser's developer console:

	Meteor.user().emails[0].address

## How to find user account on MongoDB given an email address foo@example.com?

	./backup/connect.sh
	db.users.findOne({'emails.address': 'foo@example.com'})

## How do I set up for local development?

1. Make a backup snapshot of the development Mongo database using `backup/dump.sh`
2. `meteor reset` to clear state
3. `npm run start` to start the mongo service
3. `mongorestore -h 127.0.0.1 --port 3001 -d meteor $(date ""+dev-%Y%m%d"")/meteor`

## How to create users in the case my MongoDB is lacking the users?

To check the current users, connect to your MongoDB and run:

	db.users.find({}, {'emails.address': 1, _id: 0}).map(d => d.emails[0].address).join('\n')

If your Frontend datastore MongoDB out of sync with your [Bugzilla database's
profiles](https://documentation.unee-t.com/2018/03/01/introduction-to-the-demo-environment/),
you need to create the users in the users manually:

	Accounts.createUser({ email: 'leonel@mailinator.com', password: 'leonel', profile: { bzLogin: 'leonel@mailinator.com', bzPass: 'leonel' }})

Ensure it worked by looking at the `npm start` log. Next you might want to verify each user's email address.

	db.users.update({'emails.address': 'leonel@mailinator.com'}, {$set : {'emails.0.verified': true}})

## How to test the notifications / email templates?

Refer to
[simulate.sh](https://github.com/unee-t/lambda2sns/blob/master/tests/simulate.sh)
though you need to tweak the
[events](https://github.com/unee-t/lambda2sns/tree/master/tests/events) to map
to the bugzillaCreds **id** from `db.users.find().pretty()`

## Migrations: Not migrating, control is locked.

	Migrations.unlock()
	Migrations.migrateTo('latest')

## error: Error: url must be absolute and start with http:// or https://

Your `.env` file is not set up correctly, consider `./env-setup.bash`

## Mail sending

The secret **MAIL_URL** environment variable configures the SMTP, so that email
notifications can be sent. For example in **uneet-dev** environment, it begins
with `smtps://AKIAIICB7IAWDIGLY6DA..` and you can search for the **Access key
ID** _AKIAIICB7IAWDIGLY6DA_ in [AWS
IAM](https://console.aws.amazon.com/iam/home#/home) to determine if it's active
or not in <https://us-west-2.console.aws.amazon.com/ses/home?region=us-west-2#>.

To help with debugging, there is a [setup mail
script](https://github.com/unee-t/email2case/blob/master/tests/setup-mail-to.sh)
to exercise **MAIL_URL**.
",9,9,5,172,property-management,"[bugzilla, meteor, property-management]",0
Nectunia,PropertyInterface,,https://github.com/Nectunia/PropertyInterface,https://api.github.com/repos/PropertyInterface/Nectunia,Unity asset PropertyInterface wich allow to add Property to Gameobjects,"### Required  
To use this asset you need :  
* At least Unity 2019.1.0f2  
* Unity Player settings/Scripting Runtim Version => .NET 4.X  

### Wiki
Everything you need to know about this asset can be found in the [wiki](https://github.com/Nectunia/PropertyInterface/wiki)  

### Installation

To install this asset you have to :  
1. Download it in the Unity's Assetstore  
2. Use the Unity's Package Manager, available in the Window menu, to manage it.
",0,0,1,0,property-management,"[properties, properties-api, property, property-management, propertyinterface, propertyinterface-package, unity, unity-asset, unity-component, unity-editor, unity-package, unity-packages]",0
paezha,idealista18,,https://github.com/paezha/idealista18,https://api.github.com/repos/idealista18/paezha,Open data product with real estate listings from Idealista. The datasets are for three major cities in Spain and the year 2018.,"
<!-- README.md is generated from README.Rmd. Please edit that file -->

# idealista18

<!-- badges: start -->

[![License: CC BY-NC-SA
4.0](https://img.shields.io/badge/license-ODbLv1.0-blue.svg)](https://opendatacommons.org/licenses/odbl/1-0/)

[![Lifecycle:
stable](https://img.shields.io/badge/lifecycle-stable-green.svg)](https://lifecycle.r-lib.org/articles/stages.html#stable)

[![GitHub
Stars](https://img.shields.io/github/stars/paezha/edashop?style=social)](https://github.com/paezha/idealista18/stargazers)

![GitHub search hit counter:
R](https://img.shields.io/github/search/paezha/idealista18/real-estate)  
![GitHub search hit counter:
exploratory](https://img.shields.io/github/search/paezha/idealista18/spatial)
![GitHub search hit counter:
data](https://img.shields.io/github/search/paezha/idealista18/data)
![GitHub search hit counter:
analysis](https://img.shields.io/github/search/paezha/idealista18/Spain)
![GitHub search hit counter:
workshop](https://img.shields.io/github/search/paezha/idealista18/open-data-products)

![GitHub
issues](https://img.shields.io/github/issues/paezha/idealista18)
![GitHub
release](https://img.shields.io/github/release-date/paezha/idealista18)
![GitHub commit
activity](https://img.shields.io/github/commit-activity/y/paezha/idealista18)
![GitHub last
commit](https://img.shields.io/github/last-commit/paezha/idealista18)
<!-- badges: end -->

{idealista18} is an open data product with big geo-referenced micro-data
sets of 2018 real estate listings in Spain. These data were originally
published on the idealista.com real estate website. The data sets are
for the three largest cities in Spain: Madrid (n = 94,815 observations),
Barcelona (n = 61,486 observations), and Valencia (n = 33,622
observations), and include approximate coordinates of properties
(latitude and longitude), asking prices of each listed dwelling, and
several variables of indoor characteristics. The listings were enriched
with official information from the Spanish cadastre (e.g., building
material quality) plus other relevant geographical features, such as
distance to urban points of interest. Along with the real estate
listings, the data product also includes neighborhood boundaries for
each city. The data sets are offered as a fully documented R package and
are available for scientific and educational purposes, particularly for
geo-spatial studies.

## Installation

<!--
You can install the released version of idealista18 from [CRAN](https://CRAN.R-project.org) with:

``` r
install.packages(""idealista18"")
```
-->

You can install the package from [GitHub](https://github.com/) with:

``` r
# install.packages(""devtools"")
devtools::install_github(""paezha/idealista18"")
```

# Data description

There are nine data objects in the package: three objects for each of
the cities included. For each city, dwelling listings, neighborhood
polygons, and a set of points of interest have been included in the R
package. The following subsections describe each object. A full
description of the data is available in the help section of the package.

``` r
library(dplyr) # A Grammar of Data Manipulation
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(idealista18) # Idealista 2018 Data Package
#library(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax
library(sf) # Simple Features for R
#> Linking to GEOS 3.9.1, GDAL 3.3.2, PROJ 7.2.1; sf_use_s2() is TRUE
library(skimr) 
```

## Dwelling listings

The dwelling listing of each city includes a set of characteristics for
each dwelling published on the idealista real estate website as an ad.
The dwelling listing has been included in the ‚Äòidealista18‚Äô package as
an sf object. The name of the sf object containing the dwelling listing
includes the name of the city, followed by ‚Äô\_Sale‚Äô (e.g., Madrid_Sale)
and includes a total of 42 variables. Each sf object includes the
complete set of listings corresponding to the four quarters of the year
2018. Table shows the number of dwelling listing ads included in the
data set for each city and quarter. The record counts for each city are:
94,815 listings for Madrid, 61,486 for Barcelona, and 33,622 for
Valencia. Note that the same dwelling may be found in more than one
period when a property listed for sale in one quarter was sold in a
subsequent quarter. The variable ASSETID, included in the sf objects, is
the unique identifier of the dwelling.

``` r
Madrid_Sale |>
  sf::st_drop_geometry() |> 
  skimr::skim()
```

|                                                  |                            |
|:-------------------------------------------------|:---------------------------|
| Name                                             | sf::st_drop_geometry(Madr‚Ä¶ |
| Number of rows                                   | 94815                      |
| Number of columns                                | 41                         |
| \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_   |                            |
| Column type frequency:                           |                            |
| factor                                           | 1                          |
| numeric                                          | 40                         |
| \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ |                            |
| Group variables                                  | None                       |

Data summary

**Variable type: factor**

| skim_variable | n_missing | complete_rate | ordered | n_unique | top_counts                      |
|:--------------|----------:|--------------:|:--------|---------:|:--------------------------------|
| ASSETID       |         0 |             1 | FALSE   |    75804 | A54: 11, A14: 9, A22: 9, A13: 8 |

**Variable type: numeric**

| skim_variable                 | n_missing | complete_rate |      mean |        sd |        p0 |       p25 |       p50 |       p75 |       p100 | hist  |
|:------------------------------|----------:|--------------:|----------:|----------:|----------:|----------:|----------:|----------:|-----------:|:------|
| PERIOD                        |         0 |          1.00 | 201808.61 |      3.68 | 201803.00 | 201806.00 | 201809.00 | 201812.00 |  201812.00 | ‚ñÉ‚ñÇ‚ñÅ‚ñÉ‚ñá |
| PRICE                         |         0 |          1.00 | 396110.11 | 417074.41 |  21000.00 | 160000.00 | 262000.00 | 467000.00 | 8133000.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| UNITPRICE                     |         0 |          1.00 |   3661.05 |   1700.50 |    805.31 |   2240.00 |   3480.00 |   4744.62 |    9997.56 | ‚ñá‚ñá‚ñÖ‚ñÅ‚ñÅ |
| CONSTRUCTEDAREA               |         0 |          1.00 |    101.40 |     67.08 |     21.00 |     62.00 |     83.00 |    117.00 |     985.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ROOMNUMBER                    |         0 |          1.00 |      2.58 |      1.24 |      0.00 |      2.00 |      3.00 |      3.00 |      93.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| BATHNUMBER                    |         0 |          1.00 |      1.59 |      0.84 |      0.00 |      1.00 |      1.00 |      2.00 |      20.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASTERRACE                    |         0 |          1.00 |      0.36 |      0.48 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÖ |
| HASLIFT                       |         0 |          1.00 |      0.70 |      0.46 |      0.00 |      0.00 |      1.00 |      1.00 |       1.00 | ‚ñÉ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| HASAIRCONDITIONING            |         0 |          1.00 |      0.45 |      0.50 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÜ |
| AMENITYID                     |         0 |          1.00 |      2.92 |      0.31 |      1.00 |      3.00 |      3.00 |      3.00 |       3.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| HASPARKINGSPACE               |         0 |          1.00 |      0.23 |      0.42 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| ISPARKINGSPACEINCLUDEDINPRICE |         0 |          1.00 |      0.23 |      0.42 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| PARKINGSPACEPRICE             |         0 |          1.00 |    719.87 |   7513.88 |      1.00 |      1.00 |      1.00 |      1.00 |  925001.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASNORTHORIENTATION           |         0 |          1.00 |      0.11 |      0.31 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASSOUTHORIENTATION           |         0 |          1.00 |      0.24 |      0.42 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASEASTORIENTATION            |         0 |          1.00 |      0.20 |      0.40 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASWESTORIENTATION            |         0 |          1.00 |      0.15 |      0.36 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASBOXROOM                    |         0 |          1.00 |      0.26 |      0.44 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÉ |
| HASWARDROBE                   |         0 |          1.00 |      0.57 |      0.49 |      0.00 |      0.00 |      1.00 |      1.00 |       1.00 | ‚ñÜ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| HASSWIMMINGPOOL               |         0 |          1.00 |      0.15 |      0.36 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASDOORMAN                    |         0 |          1.00 |      0.25 |      0.43 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASGARDEN                     |         0 |          1.00 |      0.18 |      0.39 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| ISDUPLEX                      |         0 |          1.00 |      0.03 |      0.16 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISSTUDIO                      |         0 |          1.00 |      0.03 |      0.16 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISINTOPFLOOR                  |         0 |          1.00 |      0.02 |      0.15 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CONSTRUCTIONYEAR              |     55873 |          0.41 |   1964.69 |     55.89 |      1.00 |   1955.00 |   1968.00 |   1987.00 |    2291.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| FLOORCLEAN                    |      3846 |          0.96 |      2.75 |      2.26 |     -1.00 |      1.00 |      2.00 |      4.00 |      11.00 | ‚ñá‚ñá‚ñÜ‚ñÅ‚ñÅ |
| FLATLOCATIONID                |      6387 |          0.93 |      1.14 |      0.34 |      1.00 |      1.00 |      1.00 |      1.00 |       2.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CADCONSTRUCTIONYEAR           |         0 |          1.00 |   1965.70 |     29.11 |   1623.00 |   1955.00 |   1967.00 |   1984.00 |    2018.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñá |
| CADMAXBUILDINGFLOOR           |         0 |          1.00 |      6.38 |      2.85 |      0.00 |      5.00 |      6.00 |      8.00 |      26.00 | ‚ñá‚ñá‚ñÅ‚ñÅ‚ñÅ |
| CADDWELLINGCOUNT              |         0 |          1.00 |     39.19 |     54.25 |      1.00 |     12.00 |     21.00 |     40.00 |    1499.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CADASTRALQUALITYID            |         1 |          1.00 |      4.85 |      1.46 |      0.00 |      4.00 |      5.00 |      6.00 |       9.00 | ‚ñÅ‚ñÉ‚ñá‚ñÜ‚ñÅ |
| BUILTTYPEID_1                 |         0 |          1.00 |      0.03 |      0.17 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| BUILTTYPEID_2                 |         0 |          1.00 |      0.19 |      0.39 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| BUILTTYPEID_3                 |         0 |          1.00 |      0.78 |      0.41 |      0.00 |      1.00 |      1.00 |      1.00 |       1.00 | ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| DISTANCE_TO_CITY_CENTER       |         0 |          1.00 |      4.49 |      2.99 |      0.01 |      2.41 |      4.12 |      6.21 |     415.75 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| DISTANCE_TO_METRO             |         0 |          1.00 |      0.48 |      1.43 |      0.00 |      0.21 |      0.33 |      0.52 |     399.48 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| DISTANCE_TO_CASTELLANA        |         0 |          1.00 |      2.68 |      2.58 |      0.00 |      1.04 |      1.96 |      3.84 |     412.80 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| LONGITUDE                     |         0 |          1.00 |     -3.69 |      0.04 |     -3.83 |     -3.71 |     -3.69 |     -3.67 |      -2.75 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| LATITUDE                      |         0 |          1.00 |     40.42 |      0.04 |     36.76 |     40.40 |     40.42 |     40.44 |      40.52 | ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñá |

``` r
Barcelona_Sale |>
  sf::st_drop_geometry() |> 
  skimr::skim()
```

|                                                  |                            |
|:-------------------------------------------------|:---------------------------|
| Name                                             | sf::st_drop_geometry(Barc‚Ä¶ |
| Number of rows                                   | 61486                      |
| Number of columns                                | 41                         |
| \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_   |                            |
| Column type frequency:                           |                            |
| factor                                           | 1                          |
| numeric                                          | 40                         |
| \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ |                            |
| Group variables                                  | None                       |

Data summary

**Variable type: factor**

| skim_variable | n_missing | complete_rate | ordered | n_unique | top_counts                      |
|:--------------|----------:|--------------:|:--------|---------:|:--------------------------------|
| ASSETID       |         0 |             1 | FALSE   |    46729 | A13: 10, A16: 9, A15: 8, A18: 8 |

**Variable type: numeric**

| skim_variable                 | n_missing | complete_rate |      mean |        sd |        p0 |       p25 |       p50 |       p75 |       p100 | hist  |
|:------------------------------|----------:|--------------:|----------:|----------:|----------:|----------:|----------:|----------:|-----------:|:------|
| PERIOD                        |         0 |          1.00 | 201808.01 |      3.75 | 201803.00 | 201803.00 | 201809.00 | 201812.00 |  201812.00 | ‚ñÜ‚ñÉ‚ñÅ‚ñÖ‚ñá |
| PRICE                         |         0 |          1.00 | 395770.58 | 281554.82 |  37000.00 | 230000.00 | 325000.00 | 462000.00 | 4866000.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| UNITPRICE                     |         0 |          1.00 |   4044.86 |   1190.89 |   1203.70 |   3202.57 |   3991.34 |   4841.46 |    6996.69 | ‚ñÇ‚ñÜ‚ñá‚ñÖ‚ñÇ |
| CONSTRUCTEDAREA               |         0 |          1.00 |     95.46 |     52.58 |     21.00 |     66.00 |     82.00 |    108.00 |     959.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ROOMNUMBER                    |         0 |          1.00 |      2.86 |      1.13 |      0.00 |      2.00 |      3.00 |      3.00 |      40.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| BATHNUMBER                    |         0 |          1.00 |      1.52 |      0.71 |      0.00 |      1.00 |      1.00 |      2.00 |      12.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASTERRACE                    |         0 |          1.00 |      0.33 |      0.47 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÉ |
| HASLIFT                       |         0 |          1.00 |      0.74 |      0.44 |      0.00 |      0.00 |      1.00 |      1.00 |       1.00 | ‚ñÉ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| HASAIRCONDITIONING            |         0 |          1.00 |      0.47 |      0.50 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñá |
| AMENITYID                     |         0 |          1.00 |      2.86 |      0.45 |      1.00 |      3.00 |      3.00 |      3.00 |       3.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| HASPARKINGSPACE               |         0 |          1.00 |      0.08 |      0.27 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISPARKINGSPACEINCLUDEDINPRICE |         0 |          1.00 |      0.08 |      0.27 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| PARKINGSPACEPRICE             |         0 |          1.00 |    620.41 |   4896.31 |      1.00 |      1.00 |      1.00 |      1.00 |  425001.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASNORTHORIENTATION           |         0 |          1.00 |      0.13 |      0.34 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASSOUTHORIENTATION           |         0 |          1.00 |      0.31 |      0.46 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÉ |
| HASEASTORIENTATION            |         0 |          1.00 |      0.24 |      0.43 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASWESTORIENTATION            |         0 |          1.00 |      0.16 |      0.36 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASBOXROOM                    |         0 |          1.00 |      0.12 |      0.32 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASWARDROBE                   |         0 |          1.00 |      0.30 |      0.46 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÉ |
| HASSWIMMINGPOOL               |         0 |          1.00 |      0.03 |      0.16 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASDOORMAN                    |         0 |          1.00 |      0.08 |      0.28 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASGARDEN                     |         0 |          1.00 |      0.04 |      0.19 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISDUPLEX                      |         0 |          1.00 |      0.03 |      0.16 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISSTUDIO                      |         0 |          1.00 |      0.02 |      0.13 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISINTOPFLOOR                  |         0 |          1.00 |      0.02 |      0.14 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CONSTRUCTIONYEAR              |     22974 |          0.63 |   1952.58 |     49.83 |     19.00 |   1934.00 |   1965.00 |   1975.00 |    2093.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| FLOORCLEAN                    |      4253 |          0.93 |      2.87 |      2.20 |     -1.00 |      1.00 |      2.00 |      4.00 |      11.00 | ‚ñá‚ñá‚ñÜ‚ñÅ‚ñÅ |
| FLATLOCATIONID                |      7772 |          0.87 |      1.09 |      0.29 |      1.00 |      1.00 |      1.00 |      1.00 |       2.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CADCONSTRUCTIONYEAR           |         0 |          1.00 |   1952.19 |     37.34 |   1588.00 |   1932.00 |   1963.00 |   1974.00 |    2018.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñá |
| CADMAXBUILDINGFLOOR           |         0 |          1.00 |      6.85 |      2.68 |      0.00 |      5.00 |      6.00 |      9.00 |      34.00 | ‚ñá‚ñá‚ñÅ‚ñÅ‚ñÅ |
| CADDWELLINGCOUNT              |         0 |          1.00 |     28.56 |     41.30 |      1.00 |     11.00 |     17.00 |     31.00 |     505.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CADASTRALQUALITYID            |         0 |          1.00 |      4.31 |      1.30 |      0.00 |      3.00 |      4.00 |      5.00 |       9.00 | ‚ñÅ‚ñÖ‚ñá‚ñÉ‚ñÅ |
| BUILTTYPEID_1                 |         0 |          1.00 |      0.01 |      0.11 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| BUILTTYPEID_2                 |         0 |          1.00 |      0.17 |      0.38 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| BUILTTYPEID_3                 |         0 |          1.00 |      0.82 |      0.39 |      0.00 |      1.00 |      1.00 |      1.00 |       1.00 | ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| DISTANCE_TO_CITY_CENTER       |         0 |          1.00 |      2.80 |      1.56 |      0.05 |      1.56 |      2.62 |      3.78 |       9.06 | ‚ñá‚ñá‚ñÖ‚ñÅ‚ñÅ |
| DISTANCE_TO_METRO             |         0 |          1.00 |      0.27 |      0.16 |      0.00 |      0.16 |      0.25 |      0.35 |       4.10 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| DISTANCE_TO_DIAGONAL          |         0 |          1.00 |      1.77 |      1.15 |      0.00 |      0.90 |      1.65 |      2.38 |       7.24 | ‚ñá‚ñá‚ñÇ‚ñÅ‚ñÅ |
| LONGITUDE                     |         0 |          1.00 |      2.17 |      0.02 |      2.09 |      2.15 |      2.17 |      2.18 |       2.22 | ‚ñÅ‚ñÉ‚ñá‚ñá‚ñÇ |
| LATITUDE                      |         0 |          1.00 |     41.40 |      0.02 |     41.33 |     41.38 |     41.40 |     41.41 |      41.47 | ‚ñÅ‚ñÖ‚ñá‚ñÉ‚ñÅ |

``` r
Valencia_Sale |>
  sf::st_drop_geometry() |> 
  skimr::skim()
```

|                                                  |                            |
|:-------------------------------------------------|:---------------------------|
| Name                                             | sf::st_drop_geometry(Vale‚Ä¶ |
| Number of rows                                   | 33622                      |
| Number of columns                                | 41                         |
| \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_   |                            |
| Column type frequency:                           |                            |
| factor                                           | 1                          |
| numeric                                          | 40                         |
| \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ |                            |
| Group variables                                  | None                       |

Data summary

**Variable type: factor**

| skim_variable | n_missing | complete_rate | ordered | n_unique | top_counts                      |
|:--------------|----------:|--------------:|:--------|---------:|:--------------------------------|
| ASSETID       |         0 |             1 | FALSE   |    27391 | A83: 10, A28: 8, A17: 7, A10: 6 |

**Variable type: numeric**

| skim_variable                 | n_missing | complete_rate |      mean |        sd |        p0 |       p25 |       p50 |       p75 |       p100 | hist  |
|:------------------------------|----------:|--------------:|----------:|----------:|----------:|----------:|----------:|----------:|-----------:|:------|
| PERIOD                        |         0 |          1.00 | 201808.17 |      3.78 | 201803.00 | 201803.00 | 201809.00 | 201812.00 |  201812.00 | ‚ñÖ‚ñÇ‚ñÅ‚ñÉ‚ñá |
| PRICE                         |         0 |          1.00 | 199678.31 | 177156.03 |  20000.00 |  99000.00 | 151000.00 | 234000.00 | 2772000.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| UNITPRICE                     |         0 |          1.00 |   1714.54 |    850.81 |    480.69 |   1112.50 |   1531.25 |   2114.29 |    9421.82 | ‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÅ |
| CONSTRUCTEDAREA               |         0 |          1.00 |    108.95 |     47.29 |     24.00 |     80.00 |    100.00 |    123.00 |     912.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ROOMNUMBER                    |         0 |          1.00 |      3.07 |      1.09 |      0.00 |      3.00 |      3.00 |      4.00 |      81.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| BATHNUMBER                    |         0 |          1.00 |      1.59 |      0.64 |      0.00 |      1.00 |      2.00 |      2.00 |      12.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASTERRACE                    |         0 |          1.00 |      0.25 |      0.44 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÉ |
| HASLIFT                       |         0 |          1.00 |      0.79 |      0.41 |      0.00 |      1.00 |      1.00 |      1.00 |       1.00 | ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| HASAIRCONDITIONING            |         0 |          1.00 |      0.47 |      0.50 |      0.00 |      0.00 |      0.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñá |
| AMENITYID                     |         0 |          1.00 |      2.78 |      0.53 |      1.00 |      3.00 |      3.00 |      3.00 |       3.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| HASPARKINGSPACE               |         0 |          1.00 |      0.17 |      0.37 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| ISPARKINGSPACEINCLUDEDINPRICE |         0 |          1.00 |      0.17 |      0.37 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| PARKINGSPACEPRICE             |         0 |          1.00 |    740.17 |   5476.77 |      1.00 |      1.00 |      1.00 |      1.00 |  355001.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASNORTHORIENTATION           |         0 |          1.00 |      0.13 |      0.34 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASSOUTHORIENTATION           |         0 |          1.00 |      0.19 |      0.39 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASEASTORIENTATION            |         0 |          1.00 |      0.25 |      0.43 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASWESTORIENTATION            |         0 |          1.00 |      0.15 |      0.36 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÇ |
| HASBOXROOM                    |         0 |          1.00 |      0.13 |      0.34 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASWARDROBE                   |         0 |          1.00 |      0.53 |      0.50 |      0.00 |      0.00 |      1.00 |      1.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñá |
| HASSWIMMINGPOOL               |         0 |          1.00 |      0.07 |      0.26 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASDOORMAN                    |         0 |          1.00 |      0.05 |      0.22 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| HASGARDEN                     |         0 |          1.00 |      0.06 |      0.24 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISDUPLEX                      |         0 |          1.00 |      0.02 |      0.13 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISSTUDIO                      |         0 |          1.00 |      0.01 |      0.08 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| ISINTOPFLOOR                  |         0 |          1.00 |      0.01 |      0.12 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CONSTRUCTIONYEAR              |     13201 |          0.61 |   1969.43 |     57.17 |     11.00 |   1962.00 |   1970.00 |   1983.00 |    2020.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| FLOORCLEAN                    |      1730 |          0.95 |      3.55 |      2.44 |     -1.00 |      2.00 |      3.00 |      5.00 |      11.00 | ‚ñÜ‚ñá‚ñá‚ñÇ‚ñÅ |
| FLATLOCATIONID                |      5404 |          0.84 |      1.05 |      0.22 |      1.00 |      1.00 |      1.00 |      1.00 |       2.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CADCONSTRUCTIONYEAR           |         0 |          1.00 |   1970.55 |     24.05 |   1591.00 |   1961.00 |   1970.00 |   1983.00 |    2018.00 | ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| CADMAXBUILDINGFLOOR           |         0 |          1.00 |      7.04 |      2.89 |      0.00 |      5.00 |      7.00 |      8.00 |      33.00 | ‚ñá‚ñá‚ñÅ‚ñÅ‚ñÅ |
| CADDWELLINGCOUNT              |         0 |          1.00 |     36.83 |     45.11 |      1.00 |     12.00 |     22.00 |     43.00 |     556.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| CADASTRALQUALITYID            |         0 |          1.00 |      5.34 |      1.58 |      0.00 |      4.00 |      5.00 |      7.00 |       9.00 | ‚ñÅ‚ñÇ‚ñá‚ñá‚ñÇ |
| BUILTTYPEID_1                 |         0 |          1.00 |      0.03 |      0.18 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| BUILTTYPEID_2                 |         0 |          1.00 |      0.13 |      0.34 |      0.00 |      0.00 |      0.00 |      0.00 |       1.00 | ‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |
| BUILTTYPEID_3                 |         0 |          1.00 |      0.83 |      0.37 |      0.00 |      1.00 |      1.00 |      1.00 |       1.00 | ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñá |
| DISTANCE_TO_CITY_CENTER       |         0 |          1.00 |      2.09 |      0.97 |      0.00 |      1.36 |      2.12 |      2.77 |       5.67 | ‚ñÉ‚ñá‚ñá‚ñÇ‚ñÅ |
| DISTANCE_TO_METRO             |         0 |          1.00 |      0.64 |      0.42 |      0.00 |      0.33 |      0.54 |      0.87 |       2.86 | ‚ñá‚ñÖ‚ñÇ‚ñÅ‚ñÅ |
| DISTANCE_TO_BLASCO            |         0 |          1.00 |      2.07 |      1.09 |      0.00 |      1.22 |      2.01 |      2.84 |       5.02 | ‚ñÖ‚ñá‚ñá‚ñÖ‚ñÅ |
| LONGITUDE                     |         0 |          1.00 |     -0.38 |      0.02 |     -0.42 |     -0.39 |     -0.38 |     -0.37 |      -0.32 | ‚ñÇ‚ñá‚ñá‚ñÇ‚ñÇ |
| LATITUDE                      |         0 |          1.00 |     39.47 |      0.01 |     39.44 |     39.46 |     39.47 |     39.48 |      39.50 | ‚ñÇ‚ñÜ‚ñá‚ñÉ‚ñÉ |

Due to data protection requirements, coordinates and prices have been
anonymized by introducing as slight degree of random noise, for more
details about this process please find the process code in the folder
named ‚Äúanonyzation‚Äù.

## Neighboorhood polygons

The second block of data included in the ‚Äòidealista18‚Äô R package is the
spatial features of the three cities divided into neighborhoods. There
is an sf object for each city with the name of the city and the suffix
‚Äô\_Polygons‚Äô. Figure shows the quantile maps of the number of dwellings
in the listing for the different neighborhoods in the three cities. The
neighborhoods are based on the official boundaries but slightly changed
by Idealista. In practical terms, we can assume they are the same since
the website combines areas when there are few ads for that area. In the
case of Madrid, they combined four areas into two.

There are a total of 69 neighborhoods in Barcelona, 135 in Madrid, and
73 in Valencia. The sf object includes a unique identifier (LOCATIONID)
and the neighborhood name (LOCATIONNAME).

## Points of Interest

The last block of data included in the data package is a set of Points
of Interest in each city as an object of the class list. The name of the
list includes the name of the city with the suffix ‚Äô\_POIS‚Äô. These lists
include three elements: (i) the coordinates of the city center, the
central business district; (ii) a set of coordinates that define the
main street of each city; and (iii) the coordinates of the metro
stations.
",0,0,5,0,real-estate,"[data, open-data-products, packages, r, real-estate, spain, spatial]",0
MLP99,NYC-PSP,,https://github.com/MLP99/NYC-PSP,https://api.github.com/repos/NYC-PSP/MLP99,Repo for my machine learning project where I built a machine learning model that could predict prices for properties in New York City.,"# New York City Property Sales Predictor (PSP)
For this personal project, I built a machine learning model in Python that could predict prices for properties in New York City. The reason why I did this project is that I'm very interested in real estate and wanted to know more about this domain and learn more about machine learning. Besides the dataset about the properties, I'm using another dataset with demographic information about the NYC population and merged them to predict property prices.
This project is divided into 3 sections: [EDA](https://github.com/MLP99/NYC-PSP/blob/main/files/NYC_PSP_EDA.ipynb), [data preparation](https://github.com/MLP99/NYC-PSP/blob/main/files/NYC_PSP_PREPARATION.ipynb) and [model building](https://github.com/MLP99/NYC-PSP/blob/main/files/NYC_PSP_MODELLING.ipynb). I achieved the following things:

* Completed an Exploratory Data Analysis on the 80,000 properties in the dataset
* Built a machine learning model that could predict property prices in New York City
* Achieved a decrease of the Mean Absolute Error (MAE) from the properties in the validation data by 48% (~ $92.400,00) by only using Feature Engineering


## Conclusion
After doing this project I learned the following. Although I didn't deploy this model into production, I found this project a great exercise to learn more about data analysis, data preparation and model building. Due to the EDA, I learned more about this domain and what kind of data I was dealing with such as the different properties that exist in NYC and what the price difference was between the boroughs. From data preparation, I learned more about how I'm preprocessing my data like merging different datasets & how to remove outliers. Removing outliers made my brain work to get the data in a better format. From model building, I learned more about feature engineering and what kind of impact that could have on your model performance.

My next step for this project is to use hyperparameter tuning to improve my model's performance and use gradient boosters for example XGBoost that also could help in the process of achieving better results. After building a great model I would like to deploy it and use it in a web application where a user can use it to predict property prices.

## Data 
Data I used in this project:

* New York City property sales dataset: https://www.kaggle.com/new-york-city/nyc-property-sales
* New York City census dataset: https://www.kaggle.com/muonneutrino/new-york-city-census-data
## EDA
In this section, I would like to highlight a few visualizations that I made in my EDA with the Seaborn library for Python.

![](images/dsp.png)
![](images/ovsdsp.png)
![](images/rp.png)


",0,0,1,0,real-estate,"[data-cleaning, data-science, data-visualization, eda, machine-learning, new-york-city, python, real-estate]",0
mattgilgo,airbnb_reports,,https://github.com/mattgilgo/airbnb_reports,https://api.github.com/repos/airbnb_reports/mattgilgo,"EDA, Visualization, and Newsletter Generation development for BTD Short-Term Rental Data Services",# airbnb_reports,0,0,1,0,real-estate,"[automation, jupyter-notebook, plotly, python, real-estate, short-term-rental]",0
Dartegnian,aboitiz-companion,,https://github.com/Dartegnian/aboitiz-companion,https://api.github.com/repos/aboitiz-companion/Dartegnian,APC DevSquad's project for the Aboitiz Future Challenge,"<p align=""center"">
	<img src=""https://4.bp.blogspot.com/-b3tVrNv4CGA/W-d-yeSqkvI/AAAAAAAAG6I/zqbElpOW7nIj0hA7oRwzSMlj6J_F7kmRwCLcBGAs/s500/logomain.png"" alt=""Aboitiz Companion logo"" title=""Aboitiz Companion""/>
</p>
<br>

# Aboitiz Companion",0,0,1,0,real-estate,"[housing, property, real-estate, sales]",0
RichardSchulz52,immopush,,https://github.com/RichardSchulz52/immopush,https://api.github.com/repos/immopush/RichardSchulz52,Polls on websites to push new offers to a telegram bot,"# immopush
This project implements a Telegram-Bot that fetches information from real estate websites, recognizes new entries, and pushes them to a telegram chat. 
It is currently supporting the german websites ebay-kleinanzeigen, immowelt and immonet. The bot is protected from beeing used by unauthorized users. 
If you are hosting it yourself you can be sure no one floods your server with search requests. I am running my own instance. If you want to use it message me :)

## How to use it
First open a Chat with the Bot or add it to a group. Than you have certain commands for search requests and administration (if you own the Bot).
### search request commands
- /add url 
  - replace url with the url in your browser. Go to the website you want to search on and configure the search filter. All filter information will be parsed to the url in the browser header. Copy the url and add it to the Bot. Make sure you klick on search before copying. Otherwise you might not have the latest filter change in the url.
- /display
  - this shows your current search requests. Each url has an identification number.
- /delete number
  - replace number with the identification number of the request you want to delete. Use the display command to get the identification numbers.

### administration
If you realy want to run your own server message me and I will provide the description here. 

## How to setup the server
If you realy want to run your own server message me and I will provide the description here.
",0,0,1,2,real-estate,"[germany, real-estate, spring-boot, telegram, telegram-bot, wohnungssuche]",0
navinvarma,househunt,,https://github.com/navinvarma/househunt,https://api.github.com/repos/househunt/navinvarma,A ShinyR app for analyzing recently sold data from Redfin.com to find comparables of homes you maybe interested in purchasing.,"# househunt

A ShinyR app for analyzing recently sold data from Redfin.com to find comparables of homes you maybe interested in purchasing.

# Technologies
* R, RStudio
* Libraries - Shiny, DT, data.table
* ShinyApps.io to host ShinyR app

# How To
## Use App
Once published, click on any row in the table. This will redirect you to the ""Comparables"" tab to find similar houses and you can get the average price among all the comparables found. 

Example
![Preview of househunt app](/HouseHunt_Preview.png)

## Run App
* Open househunt.Rproj in RStudio
* ui -> this is the tabs rendered on the page
* server -> this is the main filter logic used to update the UI

## Publish
Use your own [ShinyApps.io](https://www.shinyapps.io/) account to publish if you wish to access this app on your mobile device. My version of this is published in https://navinvarma.shinyapps.io/househunt/. 

## Update Data
* Go to [Redfin.com](https://www.redfin.com/) and search for your county of choice. This app uses Alameda County, CA for demonstration.
* See screenshot on how to download CSV to local repo

![Image from Redfin.com search results to download CSV file](/Redfin_CSV_HowTo.png)

Overwrite CSV Files are located at:
* [redfin_forsale.csv](/redfin_forsale.csv)
* [redfin_recentlysold.csv](/redfin_recentlysold.csv)

# Credits
This app uses sample data from [Redfin.com](https://www.redfin.com/) using the ""Download All"" to CSV from the search results. Real Estate software and licensing API is expensive, so this is a hacked together solution for local development and personal use.

# Additional Notes
This app was originally developed in 2018 around the time I was in the market to buy a home in the East Bay. It was a personal project that was lying around, and moved between PCs. In the interest of keeping this record somewhere in the cloud and for the benefit of other home buyers, I'm finally pushing this up to GitHub. Hoping you find your dream home at the right price using this app!
",0,0,1,0,real-estate,"[house-prices, real-estate, redfin, shiny-r]",0
stefcenti2022,RealLeads,,https://github.com/stefcenti2022/RealLeads,https://api.github.com/repos/RealLeads/stefcenti2022,RealLeads Provides the Data Analysis Tools to Help Buy or Sell a Home.,"# RealLeads

<img src=""./Resources/images/headerfor_readm.png"" alt=""RealLeads HomeWise Header"" width=""500""/>

## Overview

The real estate industry has a significant impact on the American economy. There are several indicators that affect real estate sales such as location, property characteristics and the economy including the job market, economic cycle and interest rates etc. These indicators help us the determine current approximate value of the property.

Whether you are a buyer, seller, agent or investor, everyone has similar questions:

- How much can I sell my home for?
- How fast can my house be sold?

In this project we are creating a real-world simulation. While we are trying to find an answer for these questions.
We have established a hypothetical company called REALLEADS which is a real estate focused fintech company that works as a matchmaker between agents and home sellers. RealLeads has been in business for about five years. Their initial product was the ‚ÄúRealLeads Agent Console‚Äù, a portal that serves up home seller leads and also acts as a CRM (Customer Relationship Management) database for agents.

Now that RealLeads has been in business successfully for five years, investors want to see product expansion and increased revenue. Our RealLeads data and product development team has been tasked with coming up with a new idea that can be monetized.
Our team, RealLeads proposes creating a new portal, this time targeted at retail clients themselves. . The portal, ‚ÄúRealLeads Homewise‚Äù, will help home sellers get a sense of at what price they might list their home for, what to expect for a sold price, and also get a sense of the number of days a home can be expected to stay on the market.

The tool will capture user data which can be monetized by RealLeads, and there is also a click to call/email feature that puts the Seller/user in touch with an agent who pays for the lead, and provides an additional revenue source for RealLeads.

## Description of Data Source

We used:

- Multi Listing Service Data (MLS) (2019-2022)
- Public Record (PD)
- Mortgage Data (MD)
- Census Data (CD)
- APIs ‚Äì Google Maps

ETL Processes:

- Selection/cleansing
- PostgresSQL Database
- Tables use MLSNumber as primary key
- Connections using psycopg2

## Tools Used

Languages:
Python, JavaScript, PostgreSQL

Software:
VS Code, JupyterNotebook, Pandas, Numpy, Scikit-Learn, psycopg2, Flask, pgAdmin4, HTML, CSS, Matplotlib, Plotly, Pickle, Seaborn, Figma

## Machine Learning Model

### Supervised

We start predicting the listing price first and followed with sold price and the date range, because each machine learning builds off of each other that requires the previous model‚Äôs information.

Eighty percent of the data is being used to train the model while the remaining twenty percent is used to test the model. Once that is done we begin testing on multiple models.

Predicting the list price:

<img src=""./Resources/images/modelslistprice.png"" alt=""Prediction Results"" width=""500""/>

List Price Prediction Results:

RandomForestRegressor model is being the best option, we decided to attempt one more method which is scaling our data with a StandardScaler. StandardScaler is used to reallocate the distribution of values so that the mean is 0 and the Standard Deviation is 1. Model accuracy became 75%

Predicted Sold Price:

To predict the sold price of the house which we add the original list price to our existing data table to help figure out what the prediction on what the house would be sold for. Because of built in fuctions and retraining on random states we decided to stick with Random Forest Regressor. Model accuracy: 86%

<img src=""./Resources/images/ML_Graphs/overall_diff_orig_zipcode.png"" alt=""Prediction Results by zipcode"" width=""500""/>

Predicting the Days On Market:

<img src=""./Resources/images/modelsdaysonmarket.png"" alt=""Day on Market Prediction Results"" width=""500""/>

We decided to use Balanced Random Forest Regressor with 70% model accuracy and used 2 buckets as ""Less Than 2 Months"" and ""More Than 2 Months"" to be able to provide an information to seller.

### Unsupervised Machine Learning

This step was an optional steps for RealLeads team, but we wanted to see if we can find any correlation with the data points, we have by clustering data points using unsupervised learning. We used a different data table compared to the supervised machine learning model where we included majority of columns of data to see if there are any findings within the data. Once the data was cleaned, we began to use a method called the Principal Component Analysis(PCA) which performs a dimensionality reduction on our data table and normalize it.

<img src=""./Resources/images/Kmean.png"" alt=""Clusters"" width=""500""/>

<img src=""./Resources/images/elbow_curve.png"" alt=""Elbow Curve"" width=""500""/>

## Results and Conclusion

In conclusion, we were able to connect MLS and public record data to use in predicting suggested list Price, expected sold price, and expected days on market. We achieved this task by using a microcosm of the United States, New Castle County, Delaware.

In the future, we will enhance user interaction with our three machine learning models. Additionally, we plan to enhance map and data retrieval to give an improved user expirience. We will also include click to call, email, and text buttons to connect with an agent, and build out and productionalize our prototype.

## Team Members

- Square: Stefanie, Deanna
- Triangle: Adam, Madeline
- Circle: Hande, Vince
- X: Hande, Vince

## Presentation

[Link to Presentation](https://docs.google.com/presentation/d/1-YzIQPatpTEpIFAhW6gHMTvsAfdLA-Fpdy_GGFksvzw/edit#slide=id.g1ceed380762_2_197)

## Home Page Example

<img src=""./Resources/images/home_page_final.jpg"" alt=""Sample Home Page"" width=""500""/>

<br>

## Homewise Application Release Notes

- To install packages run `pip install -r requirements`
- Create the following Config files:
  - In the leads_map folder add config.py with `mapbox_token` set to your token for mapbox. Without this token the map used in the app will fail to render.
  - In the static/js/folder add confit.js with `API_KEY` set to your Google maps API. This may not be necessary since this route is no longer accessed by the app but the code for the route still exists in GitHub and may fail if this file is not found.
- Export the env var SECRET_KEY to any random string. This is needed to keep client-side sessions secure. In a future release, this will be set automatically as suggested here: https://stackoverflow.com/questions/34902378/where-do-i-get-secret-key-for-flask. See Sessions documentation for more info. https://flask.palletsprojects.com/en/1.0.x/quickstart/#sessions
- To start the application use `flask run`

The application is a work in progress so if any issues are found, please feel free to contact our team!
",0,0,3,0,real-estate,"[county-level, delaware, machine-learning, maps, real-estate]",0
lauravuo,huvikumpu,,https://github.com/lauravuo/huvikumpu,https://api.github.com/repos/huvikumpu/lauravuo,Simple gatsby site for real estate advertisement,"# Huvikumpu

Simple real estate advertisement template with mobile friendly image carousel.

![](./demo.gif)

Note: Template placeholder fields are in Finnish.

Based on [gatsby default starter](https://github.com/gatsbyjs/gatsby-starter-default).

## Development

Make sure you have gatsby globally installed:

```sh
npm install -g gatsby-cli
```

Install deps and start development server.

```sh
npm install
npm start
```

Open http://localhost:8000

Replace lorem ipsums and other placeholder fields with actual data and hack away!

## Deployment

Build deployment bundle:

```sh
npm run build
```

Copy output i.e. `./public` folder to publicly available location, e.g. to AWS S3.
",0,0,2,0,real-estate,"[advertisement, carousel, gatsby, javascript, real-estate, responsive, website, website-template]",0
divya21raj,RealEstate-Modelling,,https://github.com/divya21raj/RealEstate-Modelling,https://api.github.com/repos/RealEstate-Modelling/divya21raj,Predicting house prices in an area,,0,0,2,7,real-estate,"[applied-machine-learning, pandas, real-estate, scikit-learn, stratified-sampling]",0
swrnv,findmyhome,,https://github.com/swrnv/findmyhome,https://api.github.com/repos/findmyhome/swrnv,,"### real estate app using bayut API

check out live project 
",1,1,1,1,real-estate-website,"[nextjs, real-estate-website]",0
anthony-22,estate-finder,,https://github.com/anthony-22/estate-finder,https://api.github.com/repos/estate-finder/anthony-22,Real estate application in React Native (Frontend),"## About

A real estate application in React Native

![](https://github.com/AnyThony/anythony.github.io/blob/master/res/show-estate.gif?raw=true)

## Setup

``` bash
# Install packages
npm install

# Start expo server
expo start
```

### License

This project is licensed under the MIT License
",0,0,1,0,real-estate,"[mobile, react-native, real-estate]",0
RuslanKovalyov,smartshuk,,https://github.com/RuslanKovalyov/smartshuk,https://api.github.com/repos/smartshuk/RuslanKovalyov,"Marketplace for individuals, communication between sellers and buyers","# smartshuk
Marketplace for individuals, communication between sellers and buyers
",0,0,1,0,real-estate,"[ads, custom-ads, django-webapp, marktplace, real-estate, second-hand]",0
asifpy,landlord,,https://github.com/asifpy/landlord,https://api.github.com/repos/landlord/asifpy,Modern property management tool for landlords,"# LANDLORD #

Modern property management tool for landlords, property managers, and renters. It allows landlords to track thier buildings, apartments and tenants information in much better way.

This is still a work-in-progress code branch of landlord.

**Stack**

* An enterprise class database: [Postgresql](https://www.postgresql.org/)
* Backend: [Django REST Framework](http://www.django-rest-framework.org/)
* Awesome [Angular](https://angular.io/guide/quickstart) on the client side
* CSS based on [Twitter's Boostrap 4](https://v4-alpha.getbootstrap.com/)
* Error tracking using [Sentry](https://sentry.io/welcome/)

# Getting started #

**Backend**

Install [pipenv](http://pipenv.readthedocs.io/en/latest/) globally, then perform the below steps to setup the backend.

```
git clone https://github.com/asifpy/landlord.git
cd server
```
- Create .env file within the settings directory which will hold all required configuration. You can refer [example config](https://github.com/asifpy/landlord/blob/master/server/landlord/settings/env.example)
- Install required depedencies: pipenv install
- Run server: manage.py runserver


**Frontend**

```
git clone https://github.com/asifpy/landlord.git
cd client
```

Make sure you have the [Angular CLI](https://github.com/angular/angular-cli#installation) installed globally, then run `npm install` to resolve all dependencies (might take a minute).
Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

Configure the `apiUrl` with your running backend service in client/src/environments/environment.ts

<img width=""500"" src=""https://github.com/asifpy/landlord/blob/master/client/src/assets/images/dashboard.png"" border=""0"" />
",7,7,2,0,real-estate-rental,"[angular5, django-rest-framework, python, real-estate-platform, real-estate-rental]",0
goingtointernet,realestate,,https://github.com/goingtointernet/realestate,https://api.github.com/repos/realestate/goingtointernet,Django - Real Estate Adivsor Sysytem Website ,,0,0,1,0,real-estate-website,"[django-framework, html, real-estate-website]",0
roberthmoller,PROJECT-RealEstate,,https://github.com/roberthmoller/PROJECT-RealEstate,https://api.github.com/repos/PROJECT-RealEstate/roberthmoller,Naive intuition for calculating real-estate investment profits,,0,0,1,0,real-estate,"[analysis, real-estate, streamlit]",0
JamesP1996,RE-Agent-Dashboard,,https://github.com/JamesP1996/RE-Agent-Dashboard,https://api.github.com/repos/RE-Agent-Dashboard/JamesP1996,"A Real Estate Agent Dashboard that helps employee's in real estate keep track of their information such as listings,open houses and notes(Calander,Todo's).","
![image](https://user-images.githubusercontent.com/43405677/117660805-86846880-b195-11eb-970b-6c48a00949e4.png)

# RE-Agent-Dashboard
A Real Estate Agent Dashboard that helps employee's in real estate keep track of their information such as listings,open houses and notes(Calander,Todo's).

| Details  |   |
| --- | --- |
| **Project Title** | Re-Agent Dashboard
| **Module**  | Applied Project & Minor Dissertation
| **Course** | BSc (Hons) in Software Development
| **Video** | [Demo Video](https://youtu.be/OyztJUNIovU)
| **Deployed Application** | [Re-Agent Dashboard](https://re-agent-dashboard-22410.web.app/)
| **Authors** | [James Porter G00327095](https://github.com/JamesP1996)|
| **Supervisors** | Dr. Gerard Harrison |

## Contents
* [About](#about)
* [Running Locally and Requirements](#running-locally-and-requirements)
* [Goals and Features](#goals-and-features)
* [Relevant Links](#relevant-links)

### About	
This project is proposed as a potential solution to the data management issues for Real Estate Agents
and will allow agents to store their real estate related data upon a single web based application uniformally thus avoiding
unecessary segrementation of their data online.


### Major Requirements
* [NodeJS](https://nodejs.org/en/) v14.15.0 (<i>Or Higher)</i>
* [React - Create-React-App](https://reactjs.org/docs/create-a-new-react-app.html) v17.0.1 (<i>Or Higher)</i>
* [Firebase Package for NPM/Yarn](https://www.npmjs.com/package/firebase) v8.0.1 (<i>Or Higher)</i>

### Back-End Package.JSON Requirements (In the use-case that npm install does not work when within the back-end directory)
```json
""dependencies"": {
    ""busboy"": ""^0.3.1"",
    ""cors"": ""^2.8.5"",
    ""firebase"": ""^8.0.1"",
    ""firebase-admin"": ""^9.2.0"",
    ""firebase-functions"": ""^3.11.0"",
    ""uuid"": ""^8.3.1"",
    ""uuid-v4"": ""^0.1.0""
  },
```
### Front-End Package.JSON Requirements (In the use-case that npm install does not work when within the back-end directory)
```json
""dependencies"": {
    ""@date-io/moment"": ""^1.3.13"",
    ""@fullcalendar/daygrid"": ""^5.6.0"",
    ""@fullcalendar/list"": ""^5.6.0"",
    ""@fullcalendar/react"": ""^5.6.0"",
    ""@fullcalendar/timegrid"": ""^5.6.0"",
    ""@material-ui/core"": ""^4.11.3"",
    ""@material-ui/icons"": ""^4.11.2"",
    ""@material-ui/pickers"": ""^3.3.10"",
    ""@testing-library/jest-dom"": ""^5.11.6"",
    ""@testing-library/react"": ""^11.2.2"",
    ""@testing-library/user-event"": ""^12.5.0"",
    ""axios"": ""^0.21.1"",
    ""jwt-decode"": ""^3.1.2"",
    ""moment"": ""^2.29.1"",
    ""react"": ""^17.0.1"",
    ""react-dom"": ""^17.0.1"",
    ""react-router-dom"": ""^5.2.0"",
    ""react-scripts"": ""4.0.1"",
    ""web-vitals"": ""^0.2.4""
  }
```

### Running the Back-End
1. Ensure you have all the dependencies listed above installed for the back-end <i>(You may use the npm install command for this)</i>.
2. If you are running Firebase, change the config.js file to match your own Firebase enviroment and storage bucket and run ```firebase deploy ``` or ```firebase serve``` for a non deployment based enviroment.
   <br/> <b>OR</b> <br/> If you are not running the application on your Firebase Configuration, run ```npm start``` to start the index.js file within the back-end.
3. Once your Firebase or Local Enviroment is running, you may proceed to the ""Running the Front-End"" section of this README.

#### Note: 
If you do not wish to create a Firebase configuration, it is possible to the use API link provided within the App.js inside the front-end ""re-agent-dashboard"" folder within this repo.
```js
// The API URL (Allows use of shorthand axios method calls)
axios.defaults.baseURL = ""https://europe-west2-re-agent-dashboard-22410.cloudfunctions.net/api""
``` 
This line will allow you to run my back-end configuration on firebase through the front-end.

### Running the Front-End
1. Ensure you have all the dependencies listed above installed for the front-end <i>(You may use the npm install command for this)</i>.
2. CD into the directory named <b>""re-agent-dashboard""</b> (Front-End/re-agent-dashboard).
3. Run the command ```npm start``` to locally host the front-end server.
4. (Optional) You may run ```npm run build``` to create a build folder for the application and host it upon your own firebase platform,
using ```firebase deploy``` within the re-agent-dashboard folder.


### Goals and Features
The goal of the appliation is to accomodate the data management needs of agents within the Real Estate Industry by giving them a jack of all trades platform,
which hosts services such as To-do's,Notes,Calendar Events and Real Estate related data such as Listings or Open Houses.

#### Initial Goals 
At a minimum, the application should have:

1. User Login and Signup Functionality
2. The ability to create various real estate related data fields with full CRUD(Create Read Update Delete) method support.
3. A Responsive and Intuitive UI.
4. Secure Routes and Privacy concerns handled to a decent degree.

#### Main Implemented Features
* Security Through Firebase
* JWT Authenticated Tokenization and Secure Routes
* Creation of <b>Notes, To-do's, Calendar Events, Open Houses, Open House Attendees and Listings</b> with full CRUD support <i>(POST,GET,PUT,DELETE html methods)</i>.
* Responsive and Intuitive UI
* Cloud hosted through Firebase Hosting

<h3 align=""center"">Project Architecture</h3>
<p align=""center"">
    <img src = ""https://i.imgur.com/r2PMH4l.png"">
</p>

### Relevant Links
* [Deployed Application](https://re-agent-dashboard-22410.web.app/)
* [Dissertation](https://github.com/JamesP1996/RE-Agent-Dashboard/blob/main/Minor%20Dissertation.pdf) <i>Please download this file if you wish to view it, as GitHub is not showing the full document (Appendices Missing on GitHub PDF Viewer) </i>
* [Screencast](https://youtu.be/OyztJUNIovU)
* [Base API Link](https://europe-west2-re-agent-dashboard-22410.cloudfunctions.net/api)

",0,0,2,0,real-estate,"[dashboard, react, real-estate]",0
Rikveet,ajmer,,https://github.com/Rikveet/ajmer,https://api.github.com/repos/ajmer/Rikveet,Ajmer Real estate app,"First prototype of Real estate app, Ajmer.
",0,0,2,1,real-estate,"[bootstrap5, commerce, firebase-auth, firebase-cloud-storage, firebase-firestore-database, maps, prototyping, react, react-bootstrap, real-estate, typescript]",0
Yemofio,propertydash,,https://github.com/Yemofio/propertydash,https://api.github.com/repos/propertydash/Yemofio,PropertyDash is a business simulation for a online real estate agent business,"# MEND group - PropertyDash - E-commerce final team project

Project description:
Property Dash is an online business offering speed, detail, and credibility to owning property or accommodation. We are middlemen and more, providing the comfort of ease of property search.


Credits:
This project is intended for education purposes. As students, we pooled resources and looked into legacy projects that covered a similar business idea. As such, in the case our work shares similarities with other project online, we want to vehemently state that we do not take full credit or assume all concepts applied in the project are originally from the developing team. 


Developed by:
Naa Lamile Dove
Eli Kumedzro
Madoc Qauye
Digney Yemofio
",0,0,1,0,real-estate,"[ecommerce, html-css-javascript, php, real-estate, website, webtechnology]",0
RJGiannini,SanFran_Real_Estate,,https://github.com/RJGiannini/SanFran_Real_Estate,https://api.github.com/repos/SanFran_Real_Estate/RJGiannini,"Analysis for a one-click service for people to buy properties and then rent them in San Francisco. Using data visualization, aggregation, interactive visualizations, and geospatial analysis, to find properties in the San Francisco market that are viable investment opportunities.","# SanFran_Real_Estate (san_francisco_housing)

Analysis for a one-click service for people to buy properties and then rent them in San Francisco. Using data visualization, aggregation, interactive visualizations, and geospatial analysis, to find properties in the San Francisco market that are viable investment opportunities.

---

## Technologies

This project leverages python 3.7 with the following:

* [JupyterLab](https://jupyterlab.readthedocs.io/en/stable/) - JupyterLab is a web-based user interface designed for data analysis.

* [pandas](https://github.com/pandas-dev/pandas) - Flexible and powerful data analysis / manipulation library for Python.

* [dotenv](https://pypi.org/project/python-dotenv/) - Python-dotenv reads key-value pairs from a .env file and can set them as environment variables.

* [plotly.express](https://plotly.com/python/plotly-express/) - The plotly.express module contains functions that can create entire figures at once.

---

### Installation Guide

Before running the application first install the following dependencies.

```python
  pip install jupyterlab
  pip install pandas
  pip install dotenv
  pip install plotly.express
```

---

## Examples

** Loading the .env file, Reading API Key, Setting API Access. **
```
load_dotenv()

# Read in your MAPBOX_API_KEY
mapbox_api_access_token = os.getenv(""MAPBOX_API_ACCESS_TOKEN"")

# Confirm the availability of your Mapbox API access token by checking its type
print(type(mapbox_api_access_token))

# Set your Mapbox API access token
px.set_mapbox_access_token(mapbox_api_access_token)

```
** Creating a visual aggregation explore the housing units by year. **
```
housing_units_by_year.hvplot.bar(
            title = ""Housing Units in San Francisco from 2010 to 2016"",
            x = ""year"",
            y = ""housing_units"",
            xlabel = ""Year"",
            ylabel = ""Housing Units"",
            fill_color = ""blue"",
            ylim = [365000, 385000],
            width = 550,
            height = 250,
            hover_cols = [""sale_price_sqr_foot"", ""gross_rent""],
            hover_color = ""green""
        ).opts(
            yformatter=""%.0f""
        )

```

** Createing a scatter mapbox to analyze neighborhood info.**
```
mapbox = px.scatter_mapbox(
    all_neighborhoods_df,
    lat=""Lat"",
    lon=""Lon"",
    size=""sale_price_sqr_foot"",
    color=""gross_rent"",
    size_max=25,
    zoom=11
)

mapbox

```

---

## Usage

To use the SanFran_Real_Estate application simply clone the repository and run the **san_francisco_housing.py** with:

```python
python san_francisco_housing.py
```

Below you will find screenshot demonstrations.

![Housing Units By Year](Images/zoomed-housing-units-by-year.png)

![Average Sale Price Per SQFT](Images/avg-sale-px-sq-foot-gross-rent.png)

![Pricing Info By Neighborhood](Images/pricing-info-by-neighborhood.png)

![MapBox Plot of San Francisco](Images/mapbox-plot.png)

---

## Contributors

Brought to you by Robert Giannini.
LinkedIn: https://www.linkedin.com/in/robertgianninijr/

---

## License

MIT 
 
",0,0,1,0,real-estate,"[mapbox-api, real-estate, sanfrancisco]",0
rayandasoriya,RealEstateRuby,,https://github.com/rayandasoriya/RealEstateRuby,https://api.github.com/repos/RealEstateRuby/rayandasoriya,Web Application on Ruby On Rails for Real Estate Buying/Selling Properties. CSC517 (Object Oriented Design and Development) Semester Project.,"# RealEstate Application

<p align=""center"">
<img alt=""RealEstate Image"" src=""https://github.com/hrshagrwl/RealEstateApp/blob/master/public/nav.gif"">
</p>

The project is done using the concepts of Ruby on Rails for development. 

The purpose of this project is to design a portal for selling the properties. In the project, there are three access models: admin, realtor, and house hunter. House hunter is responsible for listing the details of the properties and replies to the inquiries of the house hunters. House hunter, on the other hand, can view the properties listed and can raise an inquiry. If they are interested in the property, then they can either contact the company directly or mark the company as interested.

We have also added the email feature with the replies to any inquiry and a Google login feature with only NC State email ids.
 
## Deployment 

We have deployed our project on **Heroku**. To view, [click here](https://whispering-coast-30139.herokuapp.com).

## Credentials

| Role | Email | Password | Notes |
| --- | --- | --- | --- |
| Admin | admin@realestate.com | password | Cannot be deleted |
| House Hunter | hunter@realestate.com | password | Unless deleted by someone |
| Realtor | realtor@realestate.com | password | Unless deleted by someone |


## Local Deployment

To run the app locally, follow these steps:

- Clone the repository on your local machine.

```
git clone https://github.com/hrshagrwl/RealEstateApp.git
```

- Go to the directory of the project where it is cloned using terminal

```
cd Desktop/RealEstateApp
```


- Install gems
```
bundle install
```
-  Complete Database Migrations
```
rake db:migrate
```
- Add pre-configured users
```
rake db:seed
```
- Run server
```
rails server
```
Your app will run on http://localhost:3000


## Features
### Admin
  - Log in to the system
  - Create realtor and house hunter accounts
  - Create real estate companies
  - Delete real estate companies from the system
  - Delete users (realtors or house hunters) from the system
  - Delete properties from the system
  - Delete inquiries from the system
  - View the details (except password) of other users
  - View the list of real estate companies, along with detailed information
  - View the list of houses and detailed information
  - View the list of inquiries and detailed information

### Realtor
  - Can log in/sign up into the system
  - Can edit the profile
  - Choose an existing real estate company or create a new real estate company
  - Edit his/her company information
  - List a house if it belongs to a company
  - Edit house information that they have listed and cannot edit houses listed by other realtors
  - View all houses (including those listed by others)
  - Remove a house from the listing (previously created by this realtor)
  - View all the potential buyers for any house in his/her company and their profile details (except password)
  - View all inquiries from house hunters for any house in the company
  - Submit replies for all inquiries of houses in the company
  - Multiple realtors can belong to a single company
  - Each realtor can have multiple houses
  

### House Hunter
  - Can log in/sign up into the system
  - Can edit the profile
  - Search available houses using filters, such as price range, square footage range, location
  - View real estate company information
  - View house information
  - Send an inquiry for a certain house
  - Add a house to his/her interest list
  - Send an inquiry to multiple houses and delete them as well
  
### Some Interesting Cases
   - Deleting a company will delete all the related properties and will remove the company name assigned to any realtor
   - On changing the company, the realtor can no longer make changes to the old houses.
   - If a house hunter is deleted, all the existing inquiries will be deleted and also the name from the potential buyer list will be deleted
  
### Miscellaneous
   - When a realtor replies a house hunter‚Äôs inquiry, send **email** to the corresponding house hunter
   - All users can use their **Google account** with NCSU email id to log into the system
    
## Testing 

The testing module has been designed thoroughly for the users model and controller. To view the configuration of the added database module of the user, go to `test/fixtures/users.yml` file. To run the test case, follow the steps:

### For Models

Clone the repository on your local machine.

```
git clone https://github.com/hrshagrwl/RealEstateApp.git
```

Go to the directory of the project where it is cloned using terminal

```
cd Desktop/RealEstateApp
```

Run the following command

```
bin/rails test test/models/user_test.rb
```



### For Controllers

Clone the repository on your local machine.

```
git clone https://github.com/hrshagrwl/RealEstateApp.git
```

Go to the directory of the project where it is cloned using terminal

```
cd Desktop/RealEstateApp
```

Run the following command

```
bin/rails test test/controllers/user_controller_test.rb
```


## Contributors

  - [Harsh Agrawal](https://www.linkedin.com/in/hrshagrwl)
  - [Rayan Dasoriya](https://www.linkedin.com/in/rayan-dasoriya/)
  - [Juhi Madhwani](https://www.linkedin.com/in/juhi-madhwani/)
",4,4,2,6,real-estate-management,"[real-estate-management, ruby, ruby-on-rails]",0
XoopsModules25x,tecnoinmo,XoopsModules25x,https://github.com/XoopsModules25x/tecnoinmo,https://api.github.com/repos/tecnoinmo/XoopsModules25x,Module for Real Estate listings.,"![alt XOOPS CMS](https://xoops.org/images/logoXoops4GithubRepository.png)

## Archived Module for [XOOPS CMS](https://xoops.org)
[![XOOPS CMS Module](https://img.shields.io/badge/XOOPS%20CMS-Module-blue.svg)](https://xoops.org)
[![Software License](https://img.shields.io/badge/license-GPL-brightgreen.svg?style=flat)](https://www.gnu.org/licenses/gpl-2.0.html)

**XOOPS Module Archive:** Modules in this archive are older modules for XOOPS CMS, and therefore some of them might not work with the latest XOOPS and PHP versions. 

However, please fork them and if you have any improvements and fixes, please share them back with us. 

Visit us on http://xoops.org

The upcoming ""next generation"" XOOPS CMS version is being crafted at: https://github.com/XOOPS
",0,0,11,0,real-estate,"[cms, real-estate, xoops]",0
kristianeboe,yaps.life,,https://github.com/kristianeboe/yaps.life,https://api.github.com/repos/yaps.life/kristianeboe,,"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).

# YAPS.life
A real estate recommendation system for groups, targeted towards young professionals.

This is the masters project of Kristian Elset B√∏ at the Norwegian University of Science and Technology, spring 2018



## Install and use
- clone repo
- cd repo
- yarn install
- cd functions
- yarn install
- yarn build
- cd ..
- yarn build
- yarn start",0,0,1,24,real-estate-rental,"[firebase, firestore, react, real-estate-rental, smoke-tests]",0
krlex,openrealestate,,https://github.com/krlex/openrealestate,https://api.github.com/repos/openrealestate/krlex,This with installed vagrant box and ansible installation you can use and try free version of Open Real estate platform if you want to use pro version go to office site,"# Open Real Estate in Vagrant box

This with installed vagrant box and ansible installation you can use and try
free version of Open Real estate platform. Or if you want to use pro version go to office site 

[OpenRealEstate](https://open-real-estate.info)

```
sudo echo ""192.168.33.10   www.example.com "" >> /etc/hosts
vagrant init krlex/OpenRealEstate
vagrant up
```
or
```
git clone https://github.com/krlex/openrealestate
cd openrealestate/
vagrant up
```
And than you go to your browser for example:

```
www.example.com
```
## Instructions

And you can see site you must first register like me:

```
Database user name: `user`
Password for database user: `password`
Database server: `localhost`
Database port: `3306`
Database name: `openrealestatedb`
Prefix for tables: `ore_pa_`
Administrator email:` admin@example.com` # this you can use whatever you want
Administrator name: `admin` # this you can use whatever you want
Administrator password: `password` # this you can use whatever you want
```
And the other you can do your self and don't forget to mark:
```
` I accept the terms of the License agreement ` and
` I accept the terms of the Technical Support Terms `
and you install
```
",1,1,1,0,real-estate-platform,"[ansible, debian, linux, open-source, real-estate-platform]",0
encode412,tm_real-estate,,https://github.com/encode412/tm_real-estate,https://api.github.com/repos/tm_real-estate/encode412,"a real estate website built with Next Js and Tailwind Css, makes use of an api to render properties; with a search feature and a buy and rent category.","This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",0,0,1,0,real-estate,"[api, nextjs, real, real-estate, tailwindcss]",0
ChloeCCPeng,MushHome-Real-Estate,,https://github.com/ChloeCCPeng/MushHome-Real-Estate,https://api.github.com/repos/MushHome-Real-Estate/ChloeCCPeng,Mush|home - A Real Estate Website,"# Mush|Home - An Web App that helps buyers purchase houses directly from homeowners
*Created by: Chloe Peng* 

#   Click for Project Demo 
[![Mush|Home](https://user-images.githubusercontent.com/61214246/172442543-0de5a240-3435-43e9-be36-9adf064d6797.png
)](https://www.youtube.com/watch?v=1D11cGz11dE&t=15s&ab_channel=ChloePeng)


# Table of Contents 
*   [Project Demo](#click-for-project-demo)
*   [Introduction](#introduction)
*   [Features](#features)
*   [Wireframe](#wireframe)
*   [Setup](#setup)


#   Introduction
A Real Estate platform that helps buyers purchase houses directly from homeowners


#   Features 
- Login / Sign up and manage the account (create, update and delete the house)
- Filters
- List new houses üè° 
- Mortgage calculation üßÆ 
- Add houses to their watch list
- Place bid / make an offer
- Leave a message to the seller (now it's sending email)
- FAQs


#   Wireframe:
link: https://www.figma.com/file/j34HP40p8JQfM6Ae2mg6mW/Untitled?node-id=0%3A1
<img width=""1130"" alt=""image"" src=""https://user-images.githubusercontent.com/61214246/172072718-30dafb73-2c6d-4ef6-864e-11f6db2a99a3.png"">

#   Setup

- To run front-end:
```
npm install --prefix client
npm start --prefix client
```

- To run back-end:
```
bundle i
rails db:create
rails s
```

- To kill postgreSQL: 
```
sudo lsof -i :5432
sudo pkill -u postgres
```


",0,0,1,1,real-estate-website,"[css, mortgage-calculator, reactjs, real-estate-website, ruby-on-rails, tailwindcss]",0
Joyontokarmakar,real-estate-template,,https://github.com/Joyontokarmakar/real-estate-template,https://api.github.com/repos/real-estate-template/Joyontokarmakar,,"# real-estate-template

## Whats's included

```
Real-Estate-Website-Template
‚îÇ
‚îú‚îÄ‚îÄ Tailwind CSS             # project root
‚îÇ   ‚îú‚îÄ‚îÄ v3.3.3
|    
‚îú‚îÄ‚îÄ Slick Slider         # carousel
‚îÇ              
‚îî‚îÄ‚îÄ 
```

## [Live Site](https://real-estate-website-template.netlify.app/)

## To Run Project in your Local PC follow the following steps:

### Clone My Github Repository from:
```
https://github.com/Joyontokarmakar/real-estate-template.git
```

### Project Installation

``` bash
$ npm install
```

or

``` bash
$ yarn
```

### Run Project

``` bash
$ npm run dev 
```

or 

``` bash
$ yarn dev
```


### For UI Design

[Figma Link](https://www.figma.com/file/iSAG3poMZ4wOdyh4CwjpDA/TEST-FRONT?node-id=1%3A217&mode=dev).
",0,0,1,0,real-estate,"[real-estate, tailwindcss, vite]",0
Iniivo,Iniivo,Iniivo,https://github.com/Iniivo/Iniivo,https://api.github.com/repos/Iniivo/Iniivo,"The main app, built with React Native!",,0,0,0,6,real-estate-platform,"[react-native, real-estate-platform]",0
TarokhDev2020,RealEstate-Django,,https://github.com/TarokhDev2020/RealEstate-Django,https://api.github.com/repos/RealEstate-Django/TarokhDev2020,Real estate listings with an admin panel,"
# RealEstate-Django

Real estate listings with an admin panel


## Packages

- django
- psycopg2-bindary
- pillow
- pylint-django


## Installation

Make sure to install pip for your virtual environment

```bash
  git clone https://github.com/TarokhDev2020/RealEstate-Django.git
  cd my-project
  pip install
```
## Authors

- [@tarokhdev2020](https://www.github.com/TarokhDev2020)


## License

[MIT](https://github.com/TarokhDev2020/RealEstate-Django/blob/master/LICENSE)

",2,2,1,0,real-estate-platform,"[admin, admin-dashboard, admin-panel, bootstrap, djago-rest-framework, django, postgres, postgresql, postgresql-database, python, real-estate, real-estate-app, real-estate-platform, user-authentication]",0
saifsiam,real-state,,https://github.com/saifsiam/real-state,https://api.github.com/repos/real-state/saifsiam,Real Estate Website.!,"# Welcome To Al Siam World ..!
## Al Realtor [https://al-realtor.web.app]
## Checking Error
",0,0,1,0,property-management,"[property, property-management, real-estate, realtor, realtors]",0
Realiserad,bostadskollen,,https://github.com/Realiserad/bostadskollen,https://api.github.com/repos/bostadskollen/Realiserad,√ñvervaka Stockholms bostadsk√∂.,"What is this?
=============

Sending out a mail when a new apartment is added to Stockholm Stads bostadsk√∂.

https://bostad.stockholm.se/english/


Why is this repository archived?
================================

I'm not maintaining it anymore. Please use [this python script](https://gist.github.com/Realiserad/e3d5ca33c199ec4b04620acb15fe63f9) instead.
",0,0,2,0,real-estate-rental,"[apartment, housing-prices, real-estate-rental]",0
robertofernandezmartinez,businesscase-python-real-estate-airbnb-public,,https://github.com/robertofernandezmartinez/businesscase-python-real-estate-airbnb-public,https://api.github.com/repos/businesscase-python-real-estate-airbnb-public/robertofernandezmartinez,Business case (Python): Finding opportunities for real-estate investments on an European capital,"# Caso de negocio - Python - Identificaci√≥n de oportunidades de inversi√≥n inmobiliaria en una capital europea

## *(Este es s√≥lo un resumen del proyecto. Para ver los archivos del proyecto, pedir acceso: https://www.linkedin.com/in/robertofernandezmartinez/)*

Cliente: Empresa inmobiliaria que hace inversiones en grandes ciudades comprando inmuebles para posteriormente alquilarlos como apartamentos tur√≠sticos.

La direcci√≥n ha tomado la decisi√≥n de invertir en Madrid, y nos ha encargado analizar los datos que el l√≠der del sector AirBnb hace p√∫blicos para intentar encontrar los tipos de inmuebles que tienen mayor potencial comercial para alquier tur√≠stico.

Como entregable principal esperan la tipolog√≠a (o tipolog√≠as) de inmuebles que el equipo de valoraciones debe buscar entre las oportunidades existentes en la ciudad y los principales barrios o zonas geogr√°ficas en las que focalizarse.

Para cumplir con el objetivo aplicamos la metodolog√≠a de Discovery, t√©cnicas de Business Analytics aprendidas y t√©cnicas de anal√≠tica avanzada.

Aunque este caso concreto est√© centrado en el alquiler tur√≠stico, el mismo tipo de aproximaci√≥n se puede usar en casos que tengan un alto componente de ""ubicaci√≥n"":

- apertura y cierre de tiendas
- reducci√≥n de capacidad instalada
- expansi√≥n de franquicias
- ...

## OBJETIVO

Localizar el perfil (o perfiles) de inmuebles que maximizan el potencial comercial en el mercado del alquiler tur√≠stico y las principales zonas donde buscarlos.

## PALANCAS

Tras hablar con el equipo de valoraciones nos dicen que las palancas que tienen m√°s impacto en la rentabilidad de este tipo de inversiones son:

- Precio alquiler: cuanto m√°s se pueda cobrar por noche mayor es la rentabilidad
- Ocupaci√≥n: en general, cuantos m√°s d√≠as al a√±o se pueda alquilar un inmueble mayor es su rentabilidad
- Precio inmueble: cuanto m√°s barato se pueda adquirir la propiedad mayor es la rentabilidad

## KPIs

- Ocupaci√≥n: n√∫mero de d√≠as anuales que el inmueble se pueda alquilar
- Precio del alquiler: precio por noche en euros seg√∫n Airbnb
- Precio de un inmueble: n√∫mero de metros cuadrados * precio medio del m2 en su zona, aplicando un 25% de descuento sobre el precio oficial por la fuerza de negociaci√≥n del equipo de compras.

## ENTIDADES Y DATOS

Las entidades relevantes para nuestro objetivo y de las que podemos disponer de datos son:

- Inmuebles
- Propietarios
- Distritos

## PREGUNTAS SEMILLA

Sobre el precio del alquiler:

- Precio medio, rango de precios, precios por distritos y barrios
- Ranking de distritos y barrios por precio medio de alquiler
- Qu√© factores determinan el precio del alquiler (m√°s all√° de la localizaci√≥n)
- Relaci√≥n entre el tama√±o del inmueble y el precio por el que se puede alquilar
- C√≥mo influye la competencia (num inmuebles disponibles por barrio) sobre el precio del alquiler
- Variaci√≥n de precios por tipo de alquiler (piso completo, habitaci√≥n privada, habitaci√≥n compartida)

Sobre la ocupaci√≥n:

- Ocupaci√≥n media total, por distritos, y por barrios
- C√≥mo de probable es cada nivel de ocupaci√≥n en cada distrito
- Cual es el ranking de distritos y barrios por ocupaci√≥n
- Qu√© factores determinan el precio del alquiler (m√°s all√° de la localizaci√≥n)
- Relaci√≥n entre el tama√±o del inmueble y su grado de ocupaci√≥n
- C√≥mo influye la competencia (num inmuebles disponibles por barrio) sobre la ocupaci√≥n

Sobre el precio de compra:

- Ranking de precio por m2 por distrito
- Ranking de precio del inmueble por distrito
- Relaci√≥n entre el precio del inmueble y el precio del alquiler por distrito
- Relaci√≥n entre el precio del inmueble y la ocupaci√≥n por distrito
",0,0,1,0,real-estate,"[airbnb, business-analytics, data-analysis, data-cleaning, data-visualization, housing, madrid, matplotlib, pandas, python, real-estate, seaborn, tourism, variable-selection, variables]",0
maciejkuran,yhome-Property-Listing-App,,https://github.com/maciejkuran/yhome-Property-Listing-App,https://api.github.com/repos/yhome-Property-Listing-App/maciejkuran,yhome is a 'fake' brand that I designed and created for learning purposes. This project features OOP paradigm in JavaScript.,"<p align=""center"">
  <img width=""400"" src=""/img/yhome logo.png"">
</p>

# Home is Where Your Heart Beats

This project is my first experience with `OOP paradigm in JavaScript.`The properties data is fetched from a `class constructor`, as well as filter options, that get updated automatically everytime we add a new property to the listing. The general concept of this exercise was to do everything programmatically, minimizing hard coding to zero. I also added an extra feature such as displaying different currency depending on the user's time zone - `new Intl.DateTimeFormat().resolvedOptions()`. Feel free to dive deeper into my source code!


<b>yhome is a 'fake' brand that I designed and created for learning purposes</b>. Because I love creative tasks, creating new brand concepts right next to solving programming problems is always exciting.

It was a great experience, and I am happy to have it accomplished. Massive thanks to `unsplash.com` for amazing interior design photos!

Live app ‚ù§ www.yhome.maciejkuran.com


Creator: Maciej Kuran-Janowski

<p align=""center""><img width=""1000"" src=""/img/yhome-mockup-pc-photo.png""></p>




https://user-images.githubusercontent.com/103118542/182461999-25757f2e-299d-4309-83d1-f48e56b9e6ab.mp4





## License

The creator of the yhome web application is Maciej Kuran-Janowski.
www.maciejkuran.com

Credit to unsplash.com artists for amazing interior design photos!

You may copy the source code, reproduce or create derivative works for commercial as well as non-commercial purposes - however DO NOT COPY THE BRAND IDENTITY and the design of the application. Be creative üòÄ!

In general, you may use use my code for any purposes, however copying in general is not a good practise as long as you want to learn something üòâ.

If you have any questions, feel free to reach me via email:
üìßmaciejkuran@gmail.com
",0,0,1,0,real-estate,"[javascript, oop-in-javascript, properties, real-estate, vanilla-javascript]",0
easyRS,easyRS,easyRS,https://github.com/easyRS/easyRS,https://api.github.com/repos/easyRS/easyRS,üëåThe easy open-source way to manage your Real State üè† stuff,"# Welcome to Easy RS üëã

![Version](https://img.shields.io/badge/version-0.1.0-blue.svg?cacheSeconds=2592000)
![Prerequisite](https://img.shields.io/badge/node-%3E%3D14.0.0-blue.svg)
![Prerequisite](https://img.shields.io/badge/yarn-%3E%3D1.22.0-blue.svg)
![Prerequisite](https://img.shields.io/badge/npm-please-use-yarn-blue.svg)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](#)

> üëåThe easy open-source way to manage your Real State üè† stuff

Building..

## Prerequisites

- node >=14.0.0
- yarn >=1.22.0
- npm please-use-yarn

## Install

### Dev:

Simply run:

```sh
docker-compose -f docker/dev/docker-compose.yml up
```

### Prod:

How to deploy in your own server:

- Install [Ansible in your local machine](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html)
- Create an SSH key, go to Github SSH key setup page or corresponding one and copy it.
- Copy the **same** SSH Key you previously created into your newly server created.
- Create the file: /etc/ansible/hosts. Copy and paste the below config, and fill accordingly:

```sh
[servers]
easyrs ansible_host=[REPLACE_WITH_SERVER_IP] ansible_ssh_private_key_file=~/.ssh/[REPLACE_WITH_SSH_KEY] ansible_user=[REPLACE_WITH_SERVER_USERNAME]

[all:vars]
ansible_python_interpreter=/usr/bin/python3
SSH_KEY=[REPLACE_WITH_SSH_KEY]
DATABASE_URL=mongodb://database:27017/easyrs
NGINX_HOST=[REPLACE_WITH_YOUR_DOMAIN]
CERTBOT_EMAIL=[REPLACE_WITH_YOUR_EMAIL]

```

- Don't forget to configure your DNS.

- Under easyRS/ansible, Simply run:

```sh
ansible-playbook playbook.yml -l easyrs
```

- Relax, everything is going to be okay.

## Author

üë§ **Luis Mor√≥n**

- Website: luifermoron.com
- Github: [@luifermoron](https://github.com/luifermoron)
- LinkedIn: [@luifermoron](https://linkedin.com/in/luifermoron)

## Show your support

Give a ‚≠êÔ∏è if this project helped you!
",8,8,0,0,property-management,"[managment, nextjs, opensource, property-management, react, realstate, typescript]",0
philrey12,bt-real-estate,,https://github.com/philrey12/bt-real-estate,https://api.github.com/repos/bt-real-estate/philrey12,A Real Estate Application using Django & PostgreSQL,"# bt-real-estate
A Real Estate Application using Django & PostgreSQL\
Demo: https://bt-real-estate.onrender.com
",0,0,1,0,real-estate,"[django, postgresql, python, real-estate]",0
little-tiger-2006,elfinder-2.x-spring-boot,,https://github.com/little-tiger-2006/elfinder-2.x-spring-boot,https://api.github.com/repos/elfinder-2.x-spring-boot/little-tiger-2006,"elfinder-2.x-spring-boot implements a spring-boot & freemarker based images manager, elfinder is an Open-source file manager for web","# elfinder-2.x-spring-boot
a web image manager based on spring boot + freemarker + elfinder 2.x + jquery ui

Technologies:
1)Java Development Kit 8 ;
2)Spring Boot 1.5.22 with freemarker ;
3)Jquery-ui 1.12.1 ;
4)Elfinder  2.1.39 ;


Overview of differences and usage with servlet versions:

1.the servlet .xml file split into 2 spring-boot config files.
""ElfinderBeansConfiguration.java"": define all the beans the system needs
""ElfinderConnectorServlet.java"": the servlet used by the original program. 

2.add a file download servlet, turn url from some kind of hash code to clear text, reduce the complexity of file references.
such like from ""some-servlet/connector?cmd=file&target=images_L3Bob3RvLzE1MjUzMTM5NDg1MjkuanBn&_t=1591144312&exculsiveFolder=photo"" change to ""/another-servlet/images/photo/1525313948529.jpg"". this allows front-end developers to assemble file URLs as they did in good old times, making it easier for them to accept the module import and operation changes

3.modified the entrance to the volume configuration. we can customize all volume initialization operations above, such as reading configuration information from properties/json/database,and here we define the volume using the configuration ""VolumesProperties.java"" & ""volumes.properties"" to define volumes of the web site.

4.if a more advanced volume configuration is required, it is recommended to refer to ""StaticFsServiceFactory.java"" to customize your scenario, such as setting the right path based on user profiles

5.used an advanced elfinder webjar package to solve the problem of manual downloading of elfinder files that will be named ""connector"",these can be referred to in the ""pom.xml"".

6.don't forget to put ""mime.types"" in the resources directory *_^

Next plan:
The implementation of ""elfinder-2.x-servlet"" is straightforward, so we made this spring boot demo based on this branch.
I'm going to modify all the servlet entrances to the controller, are there partners interested in this? We can learn and solve the problems we all encounter.
",1,1,1,1,property-management,"[commandexecutor, elfinder, elfinder-spring-boot, file-explorer, freemarker, property-management, web-ui]",0
kromme,Funda-scraper,,https://github.com/kromme/Funda-scraper,https://api.github.com/repos/Funda-scraper/kromme,Playing the Scraping-cat&mouse game with Funda,"# Scraping Funda
**This script is already a few years old, dependencies (like XPATHs) might have changed**

Some years ago I was looking to buy my first house. It was not an easy task to find a house in Utrecht,
housing prices are going through the roof and quite some houses are already sold before the're
added on Funda. Key is being early!  

That is why I wrote this script, so I could call the real estate agent first! And with success.
Using this script I found and bought my first house.  

## Installation
This script is a stand alone script, aside from the dependencies there is no need to install the scraper.  
Dependencies:  
* selenium (3.4.0)  
* Firefox (59.02)  
* geckodriver (0.20)  
* pandas  
* telegram  

## Usage
The usage of this script is quite straightforward, but you'll need to setup Telegram first. Take a look at: https://core.telegram.org/bots/. Note the `telegram_token` and the `telegram_chat_id`.   

Next step is deciding what and which kind of house you're looking for. Go to Funda, set the location, define the filters and copy the into the `funda_url`-parameter. 

```
sf = FundaScraper(funda_url = '',
                telegram_token = '',
                telegram_chat_id = '',
)

sf.run()
```

## Counter bot-blocks
Sometimes Funda (or other site you want to scrape) find out you're using a bot and they'll block you. Here we're using two things to counter their blocks.  

### User Agent
First we're changing the user agent of your browser.
The user agent says to the site which browser and OS you're using, but we can change this. 
When getting blocked, we're changing it to another heavy used agent.  

### Proxies
The next thing we're doing is changing the actual url we're accessing the site from. https://www.sslproxies.org/ has a list of proxies, we're simply looping through the list until we've found a proxy which is accepted by Funda.

*Note: that this script and the scraped data are not used commercially.*",0,0,2,0,real-estate,"[housing, python, real-estate, selenium, selenium-python]",0
mohammedaitgaba,Dar-Hunter,,https://github.com/mohammedaitgaba/Dar-Hunter,https://api.github.com/repos/Dar-Hunter/mohammedaitgaba,"Real estate marketplace. Such a website provides a platform for property owners to list their properties for rent or sale, and for potential renters or buyers to search and find properties that meet their needs.","# Dar-Hunter
## Description 
-Real estate marketplace. 
Such a website provides a platform for property owners to list their properties for rent or sale, 
and for potential renters or buyers to search and find properties that meet their needs. 

The website typically offers features such as property listings, search filters, property details and photos, user reviews, 
and a secure payment system for transactions. 

These websites aim to make the process of buying, renting, or selling property more convenient, efficient, and transparent.
",0,0,1,0,real-estate,"[mongodb, mongoose, nestjs, property, reactjs, real-estate, rent, sell]",0
mre-dev,Real-Estate-Advisor-Template,,https://github.com/mre-dev/Real-Estate-Advisor-Template,https://api.github.com/repos/Real-Estate-Advisor-Template/mre-dev,"Real Estate Advisor Responsive Template Created With HTML, CSS, And JavaScript","<h1 align=""center"">Real Estate Advisor Template</h1>
<p align=""center"">Real Estate Advisor Responsive Template Created With HTML, CSS (Snap Scroll), And JavaScript</p>

<h2></h2>
<p align=""center""><a href=""https://mre-dev.github.io/Real-Estate-Advisor-Template/"">----- Click To View Demo -----</a></p>
<h2></h2>
<div>
  <p>Screenshot : </p>
  <img src=""assets/images/Screenshot.png"" alt=""Real Estate Advisor Responsive Template Screenshot"">
</div>
",0,0,1,0,real-estate,"[css, html, real-estate, template]",0
rakibhhridoy,AppliedMachineLearningHousing-Regression,,https://github.com/rakibhhridoy/AppliedMachineLearningHousing-Regression,https://api.github.com/repos/AppliedMachineLearningHousing-Regression/rakibhhridoy,Let's take the Housing dataset which contains information about different houses in Boston. This data was originally a part of UCI Machine Learning Repository and has been removed now. We can also access this data from the scikit-learn library. The objective is to predict the value of prices of the house using the given features.,"# *Applied Machine Learning Housing- Regression*

![img0](https://miro.medium.com/max/566/1*Zm2Hu724W6UQCVWWQe7afg.jpeg)


>1.Understand the requirements of the business

We are enthusiastic data scientists and before starting we need to ask some fundamental questions

 1. Why does our organisation need this predictive model?

    * possibly we are a real-estate firm and interested in investing in California
    * the organisation will use this data to feed another machine learning model
    * current process is good but manual and time consuming
    * our organisation wants an edge over competition
    * we are a consulting firm in the real-estate business and this data is valuable

2. We need to understand what are we doing at the root level

    * We‚Äôll train our model on existing data so we are doing supervised learning
    * Since we need to predict housing prices we are doing regression
    * Output depends on many parameters so we are doing multivariate-regression

>2. Acquire the dataset
Get the dataset in CSV format here and store it in a folder. We prepare a virtual environment, activate it, install the dependencies
Start Jupyter notebook and do the basic imports
```python
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pdhousing = pd.read_csv('./housing.csv')
housing.head(5)
```

This data has metrics such as the ```population, median income, median housing price```, and so on for each block group in California.

```python
housing.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 20640 entries, 0 to 20639
Data columns (total 10 columns):
longitude             20640 non-null float64
latitude              20640 non-null float64
housing_median_age    20640 non-null float64
total_rooms           20640 non-null float64
total_bedrooms        20433 non-null float64
population            20640 non-null float64
households            20640 non-null float64
median_income         20640 non-null float64
median_house_value    20640 non-null float64
ocean_proximity       20640 non-null object
dtypes: float64(9), object(1)
memory usage: 1.6+ MB
```
[Source](https://medium.com/@gurupratap.matharu/end-to-end-machine-learning-project-on-predicting-housing-prices-using-regression-7ab7832840ab)

next you will find in the notebook. 


### *Get Touch With Me*
Connect- [Linkedin](https://linkedin.com/in/rakibhhridoy) <br>
Website- [RakibHHridoy](https://rakibhhridoy.github.io)


 
",0,0,1,0,real-estate,"[deep-learning, housing-market, housing-prices, machine-learning, numpy, pandas, python, real-estate, regression, scikit-learn]",0
john200x,merakiguestwifi,,https://github.com/john200x/merakiguestwifi,https://api.github.com/repos/merakiguestwifi/john200x,Leveraging Meraki's guest WiFi captive Wi-Fi portal to improve customer engagement and provide instant contextual feedback to property mgmt duty manager,"# merakiguestwifi
Leveraging Meraki's guest WiFi captive Wi-Fi portal to improve customer engagement and provide instant contextual feedback to property mgmt duty manager. To improve guest feedback which is often shared in social media after the guest has left the premise with vivid negative experience, telling the world via social media their negative experiecnce with damaged reputation difficult to remediate.  This simple guest survey (splash page) is to collect user feedback upon successful guest Wi-Fi login. We leverage the built-in feature of Meraki Access Point. https://documentation.meraki.com/MR/MR_Splash_Page/Splash_Page_Details_for_Meraki_MR

A google form is created to collect feedback with rating between 1 (very bad) to 5 (very good)

If the feedback score is 1, the google script on the google form will triger an email (via Google SMTP) to duty manager's email address.

A language match of the feedback's text will be used to select the appropriate MV to take a snapshot whereby the image will be included in the email to be sent to the duty manager to give more context. For example, if the feedback says ""broken glass near the exit A"", then script will send API call to Meraki MV camera near exit A to take a screenshot and the image is pasted onto the email to Duty Manager to give a visual on the area for impact to customer flow near Exist A.
",0,0,1,0,property-management,"[google-script, meraki-api, meraki-dashboard, meraki-mv-cameras, property-management, public-wifi, retail]",0
Rajuchoudhary,real-estate,,https://github.com/Rajuchoudhary/real-estate,https://api.github.com/repos/real-estate/Rajuchoudhary,Website Created with MERN Stack,"# real-estate
**Created with MERN STACK**
",11,11,1,2,real-estate-website,"[express, mongodb, nodejs, react, real-estate-website, restapi]",0
prodsters,property_web_builder,prodsters,https://github.com/prodsters/property_web_builder,https://api.github.com/repos/property_web_builder/prodsters,This is a ready to use Laravel based web application for creating real estate websites,"Property Web Builder
====================
This is a ready to use Laravel based web application for creating real estate websites.
 
 **Note that the in-progress branch contains the latest feature. However, masters branch contains the most stable updates**
 
Demo
====
[http://propertywebbuilder.prodster.io/](http://propertywebbuilder.prodster.io/)


**The most up-to-date feature is available in the in-progress branch.**


Description
============
This is a drop-in real estate web application that agents and agencies can use to list available properties. 
This project is inspired by [etewiah's project](https://github.com/etewiah/property_web_builder) which was created with Ruby on Rails
It has multi-tenancy built into it. It can easily be used to manage two different group of users with different permission level. 
  
How to use
==========
- Clone this repo
- Run *php artisan migrate*
- Run *php artisan db:seed*
- use these credentials to login test@test.com test123


Technology Stack
================
- The application is based on *Laravel 5.4* 
- The Backend uses [AdminLTE Template](https://github.com/almasaeed2010/AdminLTE)

Features TODOs
==============

Front-End
---------
- Home Page
- List Properties for Sale
- List Properties for Renting
- Property details page
- About Agency Page
- Contact Agency Page

Admin-End
---------
- Dashboard/Statistics
    - A bar chart of different types of properties available on listing and their quantity
- Edit Home Page Contents


Features IMPLEMENTED
====================
Admin-End
--------
- Admin Template Completely setup
- Authentication/Registration
- Adding of Properties
- Editing/Updating of Properties with photos, location and property features
- Database Migrations and Seeder
- Site Content: About, Contact, Terms and Conditions, Footer, Privacy Policy, and Social Media Account Links.
- Site Settings: Features, Property Types, Property States, and Currency.
- Manage Users from the Backend - by Admin alone
- Super-Admin Access Control
- Other Users can just post properties alone 

Front-End
---------
- 


SETUP ERRORS/CONFIG
====================
If you are encountering errors during installation or setup you can read the SETUP_CONFIG.md file in the root of the application. It may contain the solution



Sponsors
========
**We need a sponsor to provide us with a demo server**

Property Web Builder is proudly sponsored by
- [Prodsters Community](https://prodsters.com) - A community of African talents capable of handling your outsourced projects

Contribution Guideline
======================
- Pick a feature in the todo list that you want to implement or suggest one
- Kindly reach out to hello[at]prodsters.com
- We will get back to you and add you to the repo as a contributor


License
=======
[Apache 2.0](LICENSE)",14,14,8,0,property-management,"[laravel, properties, property-management]",0
brendan-d-freeman,atlanta-zipcode-analysis,,https://github.com/brendan-d-freeman/atlanta-zipcode-analysis,https://api.github.com/repos/atlanta-zipcode-analysis/brendan-d-freeman,My project for predicting real estate values in the Atlanta metro area.,"# atlanta-zipcode-analysis

This repo includes a non-technical summary presentation and jupyter notebook to get the estimates.
The notebook includes everything you'll need in a row to successfully run the notebook. However, you will need the following modules:
- Pandas
- Matplotlib
- Numpy
- Statsmodels
- Sci-kit learn
- Pyramid ARIMA

**Note: The data contained in zillow_data.csv is the raw data. To preprocess the data for Atlanta you will need to filter by the _Metro_ column for _Atlanta_**

The notebook deals with predicting the real estate values for the zipcodes that encompass the Atlanta metro area and how their value changes over time using time series analysis. The data ends in 2017, so the following values are predicted here:

| Zipcode | May 2018 | October 2018 | April 2019 |
| --- | --- | --- | --- |
| 30331 | $144,996 (.28%) | $150,547 (6.3%) | $169,655 (20%) |
| 30324 | $546,543 (.15%) | $541,136 (-.85%) | $551,665 (1.1%) |
| 30316 | $276,106 (1.3%) | $287,560 (5.5%) | $303,992 (12%) |
| 30308 | $603,982 (.78%) | $622,728 (3.9%) | $675,496 (13%) |
| 30307 | $590,713 (.62%) | $618,058 (5.3%) | $659,731 (12%) |
| 30317 | $394,741 (.80%) | $412,099 (5.2%) | $430,414 (10%) |
| 30326 | $598,301 (.66%) | $620,710 (4.4%) | $617,103 (3.8%) |
| 30363 | $339,330 (-.28%) | $333,488 (-2%) | $331,300 (-2.7%) |",0,0,2,0,real-estate,"[jupyter-notebook, real-estate, time-series]",0
gavinmgrant,opnhaus,,https://github.com/gavinmgrant/opnhaus,https://api.github.com/repos/opnhaus/gavinmgrant,OpnHaus is an app for real estate agents to create beautiful landing pages for their open houses.,"# OpnHaus

OpnHaus is an app for real estate agents to create beautiful landing pages for their open houses.

![Screenshot of OpnHaus](./public/images/opnhaus.jpg)

## Technology

- TypeScript - strongly typed programming language
- ReactJS - user interface library
- NextJS - React framework for production
- Tailwind CSS - CSS framework
- Cheerio - library for parsing and manipulating HTML and XML
- MongoDB Atlas - Cloud database and data services
- Vercel - platform for deploying and hosting

## Setup Locally

Make sure to install the dependencies:

```
yarn install
```

## Development Server

Start the development server on http://localhost:3000

```
yarn dev
```

## Production

Build the application for production:

```
yarn build
```

Locally preview production build:

```
yarn preview
```

## Template Credit

This app used [Onelink by fayazara](https://github.com/fayazara/onelink) as a starting point.
",0,0,1,0,real-estate,"[link-in-bio, nuxt, real-estate, realtors, tailwindcss, vue]",0
jaimin257,estate_locator-SEN-API,,https://github.com/jaimin257/estate_locator-SEN-API,https://api.github.com/repos/estate_locator-SEN-API/jaimin257,It's our official repository for backend side of software engineering project(Estate locator).,"# estate_locator-SEN-
It's our official repository for software engineering project(Estate locator).

Project Description : Design a system to find/identify the potential neighborhood
                      for real-estate investment according to user needs.
                      
# Run both React and Node app in parallel, and make request from loginpage.                                      
",0,0,0,0,property-management,"[login-system, models, property-management, schema]",0
adamgulyas,toronto-housing-analysis,,https://github.com/adamgulyas/toronto-housing-analysis,https://api.github.com/repos/toronto-housing-analysis/adamgulyas,Data analysis of Toronto real estate values over the past fifteen years.,"# Toronto Housing Analysis from 2001 to 2016

## Usage

You must have Anaconda and Jupyter Lab installed and be running Python >= 3.7 to run this dashboard.

1. Set up a new Anaconda environment called `pyvizenv`.

    ```shell
    conda update anaconda
    conda create -n pyvizenv python=3.7 anaconda -y
    conda activate pyvizenv
    ```

2. Install environment dependencies.
    ```shell
    pip install python-dotenv
    pip install numpy==1.19
    pip install matplotlib==3.0.3

    conda install -c conda-forge nodejs=12 -y
    conda install -c pyviz holoviz -y
    conda install -c plotly plotly -y
    conda install -c conda-forge jupyterlab=2.2 -y
    ```

3. Install the Jupyter Lab extensions.

    ```shell
    jupyter labextension install @jupyter-widgets/jupyterlab-manager --no-build
    jupyter labextension install jupyterlab-plotly --no-build
    jupyter labextension install plotlywidget --no-build
    jupyter labextension install @pyviz/jupyterlab_pyviz --no-build
    ```

4. Build the Extensions.

    ```shell
    jupyter lab build
    ```

5. Ensure the successful installation of the dependencies by finding them in Anaconda.

    ```shell
    conda list nodejs
    conda list holoviz
    conda list hvplot
    conda list panel
    conda list plotly
    ```

6. You will need a MapBox API key to get map data. If you don't have a MapBox API key, here are [instructions](https://medium.com/technology-hits/working-with-maps-in-python-with-mapbox-and-plotly-6f454522ccdd) on how to get one and set it up as an environment variable.

7. Run all cells in Jupyter and view the dashboard in the browser by executing the final cell `dashboard.servable()`.

<br>

## Results

### Average House Values in Toronto Overall

Use the map plot to get a birdseye view of the cost of Toronto neighbourhoods. The larger and brighter the dot, the more expensive the neighbourhood. This plot indicates that the most expensive neighbourhoods are near the downtown area.

![mapbox](./images/mapbox.png)

### Dwelling Type Units per Year

The sum number of dwelling type units per year. Dwelling values (represented by the bars) change as the years go on, indicating which dwelling types gained or lost popularity.

![bar_chart_1-4](./images/bar_chart_1-4.png)

<br>

### Average Shelter Costs in Toronto Per Year

Comparing the cost of owning a dwelling versus renting one. Notice that although owning a house has been more expensive, the value of houses over doubled.

![line_chart_1](./images/linechart_1-3.png)

<br>

### Neighbourhood Analysis

Use the dropdown menus to look at data for individual neighbourhoods. The data varies widely between each neighbourhood.

![line_chart_4](./images/line_chart_4.png)

![multi_bar_chart](./images/multi_bar_chart.png)

<br>

### Average House Values in Toronto by Neighbourhood

The average house value in each neighbourhood within each time period. Hover over the bars to view more info.

![row_facet](./images/row_facet.png)

<br>

### Top 10 Expensive Neighbourhoods Overall

The top 10 expensive neigbourhoods to live in overall between 2001 and 2016.

![bar_chart_5](./images/bar_chart_5.png)

<br>

### Top 10 Expensive Neighbourhoods by Year

This sunburst chart displays the top 10 expensive neighbourhoods to live in between 2001 and 2016. Darker colours indicate higher value.

![sunburst](./images/sunburst.png)
",0,0,1,0,real-estate,"[data-analytics, data-science, data-visualization, real-estate, toronto]",0
DavidRestrepo23,ascender,,https://github.com/DavidRestrepo23/ascender,https://api.github.com/repos/ascender/DavidRestrepo23,Real state - software,,0,0,0,0,real-estate,"[real-estate, software]",0
sarahm44,rental-analysis,,https://github.com/sarahm44/rental-analysis,https://api.github.com/repos/rental-analysis/sarahm44,"An interactive dashboard displaying analysis of Toronto real estate data using PyViz, Plotly and MapBox API.  ","# Toronto Rental Analysis
![](https://github.com/sarahm44/rental-analysis/blob/main/Images/toronto.jpg)

## Table of Contents
- [Overview](#overview)
- [Rental Analysis](#rental-analysis)
- [Dashboard](#dashboard)
- [Environment](#environment)
- [How to Run the Dashboard](#how-to-run-the-dashboard)

## Overview

I created an interactive dashboard using Toronto real estate data, including [Toronto Census Data](https://github.com/sarahm44/rental-analysis/blob/main/toronto_neighbourhoods_census_data.csv) and [Toronto Neighbourhood Coordinates](https://github.com/sarahm44/rental-analysis/blob/main/toronto_neighbourhoods_coordinates.csv), with the help of the [Mapbox API](https://www.mapbox.com/).

This dashboard's goal is to provide charts, maps, and interactive visualizations that help customers explore the data and determine if they want to invest in rental properties in Toronto.

## Rental Analysis

The code for the rental analysis is contained in [rental_analysis.ipynb](https://github.com/sarahm44/rental-analysis/blob/main/rental_analysis.ipynb).

### Dwelling Types Per Year
This section calculates the number of dwelling types per year and visualizes the results as a bar chart using the Pandas plot function.

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/dwelling_types01.png)
![](https://github.com/sarahm44/rental-analysis/blob/main/Images/dwelling_types02.png)
![](https://github.com/sarahm44/rental-analysis/blob/main/Images/dwelling_types03.png)
![](https://github.com/sarahm44/rental-analysis/blob/main/Images/dwelling_types04.png)

### Average Monthly Shelter Costs in Toronto Per Year

This section visualizes the average monthly shelter costs per year to better understand the rental income trends over time. See below the average (mean) shelter cost for owned and rented dwellings per year:

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/shelter_costs.png)

### Average House Value per Year

This section determines the average house value per year. An investor may want to better understand the sales price of the rental property over time. For example, a customer will want to know if they should expect an increase or decrease in the property value over time so they can determine how long to hold the rental property.

See below the average house value in Toronto per year:

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/house_value.png)

### Average House Value by Neighbourhood

This section compares the house value by neighbourhood. By using `hvplot`, the graph includes an interactive dropdown selector for the neighbourhood. See in the image below:

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/value_by_neighbourhood.png)

### Number of Dwelling Types per Year

This section visualizes the number of dwelling types per year in each neighbourhood. This provides investors with a tool to understand the evolution of dwelling types over the years.

By using `hvplot`, the graph includes an interactive visualization of the average number of dwelling types per year with a dropdown selector for the neighbourhood. See in the image below

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/dt_per_year.png)

### Top 10 Most Expensive Neighbourhoods

In order to ascertain which neighbourhoods are the most expensive, I calculated the mean house value for each neighbourhood and then sorted the values to obtain the top 10 most expensive neighbourhoods on average. 

The results are plotted as a bar chart:

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/10_most_expensive.png)

### Neighbourhood Map

In this final section I read in neighbourhood location data and built an interactive map with the average prices per neighbourhood. A scatter Mapbox object from Plotly express was used to create the visualization.

See the visualisation below:

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/map.png)

### Cost Analysis

See below a bar chart row facet created to plot the average house values for all Toronto neighbourhoods per year:

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/value_neighbourhood.png)

See below a sunburst chart to conduct a cost analysis of the most expensive neighbourhoods in Toronto per year:

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/sunburst.png)

## Dashboard

The [dashboard.ipynb](https://github.com/sarahm44/rental-analysis/blob/main/dashboard.ipynb) notebook contains the dashboard code. 

See the dashboard below:

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/dashboard.png)

## Environment

This repo utilises PyViz. It is recommended the following are installed in a new environment.

### New Environment

Create a new environment using:

```shell
conda update anaconda
conda create -n pyvizenv python=3.7 anaconda -y
conda activate pyvizenv
```

### Before You Install PyViz Dependencies

Before installing the PyViz dependencies, you need to install a couple of libraries. First, install the `python-dotenv` library using `pip` to work with environment variables.

```shell
pip install python-dotenv
```

Next, install the `nb_conda` package that will allow you to switch between virtual environments in Jupyter lab.

```shell
conda install -c anaconda nb_conda -y
```

### PyViz and its Dependencies

Follow the next steps to install PyViz and all its dependencies in your Python virtual environment.

1. Download the PyViz dependencies **nodejs** and **npm** (included in nodejs).

    ```shell
    conda install -c conda-forge nodejs=12 -y
    ```

2. Use the `conda install` command to install the following packages. Note: On some of these installs, you may get a message that says that the requested packages are already installed. That is fine. Conda is really good at installing all of the required dependencies between these tools.

    ```shell
    conda install -c pyviz holoviz -y
    conda install -c plotly plotly -y
    conda install -c conda-forge jupyterlab=2.2 -y
    ```

3. Use pip to install the correct versions of `matplotlib` and `numpy` using the following commands:

  ```shell
  pip install numpy==1.19
  pip install matplotlib==3.0.3
  ```

4. PyViz installation also requires the installation of Jupyter Lab extensions. These extensions are used to render PyViz plots in Jupyter Lab. Execute the below commands to install the necessary Jupyter Lab extensions for PyViz and Plotly Express. 

    * **IMPORTANT:** _In some installation cases you may encounter the following warning. If you do, **continue with the installations as indicated**, as this warning will **not** affect your code._

      ```
      Config option `kernel_spec_manager_class` not recognized by `EnableNBExtensionApp`
      ```

    * Set `NODE_OPTIONS` to prevent ""JavaScript heap out of memory"" errors during extension installation:

      ```shell
      # (OS X/Linux)
      export NODE_OPTIONS=--max-old-space-size=4096

      # (Windows)
      set NODE_OPTIONS=--max-old-space-size=4096
      ```

    * Install the Jupyter Lab extensions: 

      ```shell
      jupyter labextension install @jupyter-widgets/jupyterlab-manager --no-build

      jupyter labextension install jupyterlab-plotly --no-build

      jupyter labextension install plotlywidget --no-build

      jupyter labextension install @pyviz/jupyterlab_pyviz --no-build
      ```

    * Build the extensions (This may take a few minutes):

      ```shell
      jupyter lab build
      ```
    
    * Using the `build` and `--no-build` flags allows the machine to build all four extensions simultaneously, otherwise you will have to wait several minutes in between in each installation.
        
    * After the build, unset the node options that you used above:

      ```shell
      # Unset NODE_OPTIONS environment variable
      # (OS X/Linux)
      unset NODE_OPTIONS

      # (Windows)
      set NODE_OPTIONS=
      ```

5. Run the following commands to confirm installation of all PyViz packages. Look for version numbers with at least the following versions.  

      ```shell
      conda list nodejs
      conda list holoviz
      conda list hvplot
      conda list panel
      conda list plotly
      ```

      ```text
      nodejs                    12.0.0
      holoviz                   0.11.3
      hvplot                    0.7.1
      panel                     0.10.3
      plotly                    4.14.3
      numpy                     1.19
      matplotlib                3.0.3
      ```

6. You will also need to register for a public mapbox API key, which can be obtained via [this sign-up link](https://account.mapbox.com/auth/signup/). Detailed information on how Mapbox can be used to generate plots can be found on [Plotly's documentation page](https://plotly.com/python/scattermapbox/#mapbox-access-token-and-base-map-configuration).

## How to Run the Dashboard

![](https://github.com/sarahm44/rental-analysis/blob/main/Images/dashboard.png)

### Running the Dashboard
In order to run the Dashboard, run the code in **dashboard.ipynb** file.
At code block titled ""Serve the Panel Dashboard"", run the code ""dashboard.servable()"".
The output will be the Dashboard.

### Interacting with the Dashboard
You can navigate the data by clicking on each tab at the top of the Dashboard.
Some of the charts and graphs are interactive. See details to navigate each tab below.

| Tab           | Instructions | 
| ------------- |-------------| 
| Welcome      | You can zoom in and out on the map of Toronto, and navigate around the map. Hover your cursor over a dot on the map to view more data associated with that neighbourhood. | 
| Yearly Market Analysis     | These graphs are static, but you can scroll across or up and down to view. |  
| Shelter Cost vs House Value | These graphs are static, but you can scroll across or up and down to view. |  
| Neighbourhood Analysis | On each chart use the dropdown menu to view data for different neighbourhoods. You can also navigate around these graphs through tools such as zoom, pan etc.|
|Top Expensive Neighbourhoods | These charts are also interactive. Zoom or move around on the bar chart. On the sunburst chart you can hover your cursor to view more data.|
",0,0,2,0,real-estate,"[chart, charts, dashboard, fintech, mapbox-api, plotly, plotly-dash, python3, pyviz, real-estate, real-estate-analysis]",0
kunalgaurav4,btre-django,,https://github.com/kunalgaurav4/btre-django,https://api.github.com/repos/btre-django/kunalgaurav4,A real estate web app using django,,0,0,2,0,real-estate,"[django, real-estate]",0
sumant1302,realEstate-Kings,,https://github.com/sumant1302/realEstate-Kings,https://api.github.com/repos/realEstate-Kings/sumant1302,"The Real Estate Website is a comprehensive online platform built using PHP and MySQL, designed to connect property owners, real estate agents, and potential buyers or renters.",,1,1,1,0,real-estate-website,"[css, html5, javascript, mysql, php, real-estate-website]",0
MohammedDChowdhury,real-estate-next,,https://github.com/MohammedDChowdhury/real-estate-next,https://api.github.com/repos/real-estate-next/MohammedDChowdhury,"React and Next.js Web App - Real Estate Searcher A Real Estate web application to search for rental and for sale properties. Built using React and Next.js using Bayut API from RapidAPI fetched with Axios and, styled using Chakra UI.","
## React and Next.js Web App - Real Estate Searcher
### A Real Estate web application to search for rental and for sale properties. 
### Built using React and Next.js using Bayut API from RapidAPI fetched with Axios, and styled using Chakra UI. 
### Features: 
#### Search for Rental Properties ‚úî

#### Search for sale Properties ‚úî

#### Advanced Property Filtering ‚úî

#### Property Details Page for more information on the property ‚úî

#### Image carousel to display multiple images for the inside of the homes ‚úî

#### DOMAIN (Deployed on Vercel):
#### https://real-estate-next-flame.vercel.app/
",0,0,1,0,real-estate,"[chakra-ui, homes, nextjs, properties, react, reactjs, real-estate, vercel, webapp]",0
Osamashaikh90,Real-Estate.github.io,,https://github.com/Osamashaikh90/Real-Estate.github.io,https://api.github.com/repos/Real-Estate.github.io/Osamashaikh90,Beginner project using HTML and CSS.,,0,0,1,0,real-estate,"[css, github, html, html-css, property, propertymanagementsystem, real-estate, registeration-form]",0
danielramirezjr1998,Data_Science_Projects,,https://github.com/danielramirezjr1998/Data_Science_Projects,https://api.github.com/repos/Data_Science_Projects/danielramirezjr1998,"Each folder contains a project that utilizes several different computer science,  financial, and statistical concepts to solve unique business problems. ","# Data_Science_Projects
Each folder contains a project that utilizes several different computer science,  financial, and statistical concepts to solve unique business problems. Below is a link to my Google Cloud that contains videos of the code I built and how some of these programs function in real-time:

https://drive.google.com/drive/folders/1DUw8DkCcvCtE4YSsbMG9Zf_vpRzjwl8w?usp=drive_link

Web Scrapping:

1. LinkedIn Applier is a script that automatically applys for jobs for a LinkedIn user. This program can apply to jobs that only require your contact infomration and resume. The limitation of this program is that it only applies for applications that do not require unique questioning.
   
2. Earnings Calendar Scrape goes the Nasdaq Earnings Calendar and filters all the companies that are releasing earnings reports after market close that day. This list is usually 50 stocks when it's ""Earnings Season"".

3. Nasdaq Historical Price retrieves the maximum daily historical prices for a given stock. This data is used for quantative stock analysis. 

Regressions/Probabilities:

1. Real Estate Project utilizes a multi-linear regression model, backed with it's assumptions to predict Tax Assessed Property Value for a certain property in the Philadelphia, PA region. The project also includes a visual, descriptive analytics section that gives the user a better understanding of how the data is distributed and premliminary analysis on what variables may be significant in predicting Tax Assessed Property Value.

2. Earnings Model Project invovles the Naive Bayes Algorithm to predicts whether or not a specific, or multiple, stock(s) will increase within the range of 1% to 5%, the trading day following date that their earnings were released. The model justifies the variables used in the analysis, and is user friendly.

Natural Language Processing (NLP):

1. Sneaker Project calculates the sentiment regarding a sneaker(s) that will be released in the near future. Understanding how the how people on Twitter feel about a certain shoe can be helpful to shoe buyers looking to resell. The project used Sentiment Analysis tools such as Co-sign Similarity, Topic-Modeling, and Python's Vader. 
",0,0,1,0,real-estate,"[dataanalytics, finance, multilinear-regression, naive-bayes-classifier, nlp, real-estate]",0
Apoorve73,Where_to_Build,,https://github.com/Apoorve73/Where_to_Build,https://api.github.com/repos/Where_to_Build/Apoorve73,Finding the best place to build a Healthcare Service in a city.,"![Where_to_Build](https://socialify.git.ci/Apoorve73/Where_to_Build/image?description=1&forks=1&language=1&owner=1&pattern=Brick%20Wall&pulls=1&stargazers=1&theme=Dark)
# Where_to_Build
In this project we **aim** to build **new health centers** at places where there is a **lack of medical services** using a **dynamic mapping** system. The ***tools*** that we have used so far are **web scraping** , **python3**(for making our base code run).Website is constructed using **HTML, CSS, Bootstrap, Javascript, Flask(_WTForms,_Bootstrap,etc.), SQLAlchemy and Sqlite(as database for login information)**. 
The **coronavirus pandemic** has shown us all in just a few days how fragile our way of life really is. Basic certainties about our health, that of our loved ones and our normal way of life can no longer be taken for granted.Opening temporary or permanent **medical centers at the right place** for now is the basic aim so that for any sort of treatment no one has to travel long distances and can be cured at nearby places itself and medical services can reach a large number of people at same time.

**CHECK ```Demo.mp4``` for quick demonstration.** 

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites Installation

Install [python3(latest version)](https://www.python.org/downloads/).

In the project directory, open Terminal(Mac/Linux) or Command Prompt(Windows)

``` 
    pip install flask   
    pip install flask_bootstrap 
    pip install flask_wtf 
    pip install flask_sqlalchemy 
```
   
 ### Usage

Once done with the project setup, open the project in an [**IDE**](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments); for example - [**PyCharm**](https://www.jetbrains.com/pycharm/), [**Visual Studio Code**](https://code.visualstudio.com/), etc.


**NOTE** : ***Be sure to select appropriate interpreter. Sometimes it may get deselected.***

### From Command Line Interface

* Create Virtual Environment
```
pip install virtualenv

virtualenv myenv
```
### Mac / Linux User
```
source myenv/bin/activate
```
### Windows Users
```
myenv\Scripts\activate
```

* Head to the project directory containing ```main.py```

* Open Terminal(Mac/Linux)/Command Prompt (Windows) there.

* Follow accordingly :arrow_down:

  1. **Unix Bash (Linux, Mac, etc.):**
  ```
  $ export FLASK_APP=main/py
  $ flask run
  ```
  2. **Windows CMD:**
  ```
  > set FLASK_APP=main.py
  > flask run
  ```
  3. **Windows PowerShell:**
   ```
  > $env:FLASK_APP = ""1""
  > flask run
  ```
* ### Output:
```
 $ flask run
 Serving Flask app ""hello""
 Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
```

 * Copy `http://127.0.0.1:5000/` and open it in a browser and Voila!
 
 * For Quick Demo, click on `Get Demo Here` tab.
![Best among 2000 registered properties mapped for building new hospitals](https://github.com/Apoorve73/Where_to_Build/blob/master/Map_Dallas.png)

> ***Without using shell***
> 1. Open `main.py`
> 2. Hit `Run`, if using any IDE as mentioned above.

## Contribution
Pleas read [Contribution.md](https://github.com/Apoorve73/Where_to_Build/blob/master/contribution.md) :point_up_2: for details on our code of conduct, and the process for submitting pull requests to us.

## Authors

**Initial Work**
1. [Apoorve Goyal](https://github.com/Apoorve73)
2. [Sanjana Maheshwari](https://github.com/sanjana-302)
3. [Saloni Gupta](https://github.com/salonigupta1)
 
",5,5,2,19,property-management,"[flask-sqlalchemy, google-maps-api, healthcare-service, mapping, medical-services, property-management]",0
ClaytonB-3,seattle-permits-dashboard,,https://github.com/ClaytonB-3/seattle-permits-dashboard,https://api.github.com/repos/seattle-permits-dashboard/ClaytonB-3,"Files for an interactive dashboard of active construction permits in Seattle, Washington.",,0,0,1,0,real-estate,"[dashboard, dashboard-application, heroku, interactive-visualizations, plotly, plotly-dash, real-estate]",0
tomquirk,sunshine-coast-council-rates-data,,https://github.com/tomquirk/sunshine-coast-council-rates-data,https://api.github.com/repos/sunshine-coast-council-rates-data/tomquirk,"Rates data for the Sunshine Coast, Australia","# sunshine-coast-council-rates-data

Source: https://www.sunshinecoast.qld.gov.au/Pay-and-Apply/Rates/Rates-Information (the **Revenue Statement 202122.pdf**)
",0,0,3,0,real-estate,"[australia, data, property, rates, real-estate]",0
maushook-bot,react-tei-mapper-app,,https://github.com/maushook-bot/react-tei-mapper-app,https://api.github.com/repos/react-tei-mapper-app/maushook-bot,A light Weight and Intuitive Application designed in React to perform mapping as a part of Data Migration for a Property Management Software in Hospitality domain. ,,2,2,1,0,property-management,"[hospital-management-system, maushook-bot, property-management, reactjs]",0
duyquoc1508,land-trade,,https://github.com/duyquoc1508/land-trade,https://api.github.com/repos/land-trade/duyquoc1508,Building real estate trading applications using Blockchain technology.,"# Lu·∫≠n vƒÉn ƒë·∫°i h·ªçc

## ƒê·ªÅ t√†i

#### X√¢y d·ª±ng ·ª©ng d·ª•ng qu·∫£n l√Ω v√† giao d·ªãch b·∫•t ƒë·ªông s·∫£n √°p d·ª•ng c√¥ng ngh·ªá Blockchain (Dapps).

## Nh√≥m sinh vi√™n th·ª±c hi·ªán:

1. Tr·∫ßn T·∫•n L·ªôc - 16520679
2. Nguy·ªÖn Duy Qu·ªëc - 16521007

## Smart contract

### RoleBasedAcl contract

Manage role-based access control. 2 roles: SuperAdmin, Notary.

Properties:

- Assign role to address
- Unassign role to address
- Check role of address
- Get all address and role

### RealEstate contract

Real estate management contracts

Properties:

- Create new certificate (notary)
- Activate certificate (owner)

### Transaction contract

Real estate transactions contract

Properties:

The transaction process takes place through 4 steps as follows:

1. <b>Create transaction</b>: <i>Buyer</i> create transaction and send deposit amount to smart contract.
2. <b>Accept transaction</b>: <i>Seller</i> accept deposit and receive deposit amount front smart contract.
3. <b>Payment</b>: <i>Buyer</i> payment the remaining amount + tax (registration tax) and send it to smart contract.
4. <b>Confirm transaction</b>: <i>Seller</i> confirm transaction, receive the remaining amount - tax (personal income tax) from smart contract. At the same time, real estate be transferred to buyer.

In addition, between steps 1-2, 2-3, 3-4. <i>Buyer</i> or <i>seller</i> can <b>Cancel transaction</b>.

### Deploy smart contracts

Deploy smart contracts using truffle framework

- Test smart contracts
  ```
  truffle test
  ```
- Deploy smart contracts to your local Ganache instance
  ```
  truffle migrate --reset
  ```
- Deploy to other networks like testnet or mainnet
  ```
  truffle migrate --reset --network ropsten
  ```

## Front end

Notes: After deploy smart contract. Replace contract address in <code>client/config/common-path</code>, replace contract json file in <code>client/src/contracts</code>

Run

```
npm start
```

## Back end

Notes: After deploy smart contract. Replace contract address in <code>server/src/config/common-path</code>, replace contract json file in <code>server/src/contracts</code>

Run

```
npm run dev
```
",2,2,2,53,real-estate-platform,"[blockchain, dapp, real-estate-management, real-estate-platform, smart-contracts]",0
lapuzshawn,zz-Underwriting-App,,https://github.com/lapuzshawn/zz-Underwriting-App,https://api.github.com/repos/zz-Underwriting-App/lapuzshawn,Underwriting Loan Doc Generator: Business and Real Estate Investment DL App ,"# zz-Underwriting-App
",0,0,1,0,real-estate,"[business, deep-learning, loan-default-prediction, real-estate, underwriting]",0
cBarbosa,iris-gestao,,https://github.com/cBarbosa/iris-gestao,https://api.github.com/repos/iris-gestao/cBarbosa,Projeto Iris gest√£o imobili√°ria,,0,0,2,1,real-estate,"[customer, managment, property, real-estate, real-estate-management, realestate]",0
gracewatson144,Capstone-2,,https://github.com/gracewatson144/Capstone-2,https://api.github.com/repos/Capstone-2/gracewatson144,Statistical Analysis of Ames Iowa Homes,"# Capstone-2
Statistical Analysis of Ames Iowa Homes
I have attached my Excel workbook and my PowerPoint presentation. 
",0,0,1,0,real-estate,"[bussiness, real-estate, statistical-analysis, statistical-models, statistics]",0
Jatin-8898,ud-blockchain-nd,,https://github.com/Jatin-8898/ud-blockchain-nd,https://api.github.com/repos/ud-blockchain-nd/Jatin-8898,All Projects of Udacity's Blockchain Nanodegree ‚ö°,"![image](https://github.com/BrianHHough/Blockchain-Developer-Nanodegree-Udacity/blob/master/Documentation/Core%20README/Udacity%20Blockchain%20Developer%20Banner.png)

# Blockchain-Developer-Nanodegree-Udacity
Completed coursework from Udacity's Blockchain Developer Nanodegree program: https://www.udacity.com/course/blockchain-developer-nanodegree--nd1309


## Blockchain Developer
Learn the fundamentals of the blockchain platform. Create your own private blockchain, and secure a digital asset using blockchain identity. Explore the Ethereum platform, and use Solidity and smart contracts to develop your own decentralized app.


### PREREQUISITE KNOWLEDGE
You should be comfortable with object-oriented programming, and developing web apps in Javascript.
- 1+ years of experience with object-oriented programming
- Experience developing web applications with the Javascript language using node.js (asynchronous JavaScript code)
- Knowledge of how to build a server and use the client-server model in software architecture
- Proficiency creating and consuming data using a remote API
- Developing the front end and back end of a web application with JavaScript


![image](https://github.com/BrianHHough/Blockchain-Developer-Nanodegree-Udacity/blob/master/Documentation/Core%20README/Nanodegree-Popup.png)


## Section 1: Blockchain Fundamentals
### Learn the basics of how the blockchain data model works by creating your own private blockchain using Node.js and Leveldb.
A blockchain is a shared database that features added immutability as a safe and accurate alternative to
existing data storage methods. You‚Äôll learn the basics of how the blockchain data model works by creating
your own private blockchain using Node.js and Leveldb.

In this project, you‚Äôll learn the fundamentals of architecting a collection of data into a blockchain data model. You'll configure how each block stores data, validate blocks, add new blocks to the chain, and create
methods to validate the chain integrity.

You'll then create a back-end API web service, and migrate your private blockchain to the web service. In the
process, you'll learn how to post new blocks to the blockchain via a RESTful web client. You‚Äôll then encrypt
and decrypt the unique digital collectibles on a private blockchain.

**Key Lessons:**
- Blockchain basics
- Managing blockchain transactions
- Bitcoin Core Testnet
- Blockchain data
- Private blockchains
- Digital assets on the blockchain


## Section 2: Ethereum Smart Contracts, Tokens and Dapps
### Advance your blockchain skillset to the second generation of blockchain services with smart contracts utilizing the Ethereum network.
With Project 2, your focus moves from Bitcoin to Ethereum blockchain. You‚Äôll begin by building a
decentralized app (Dapp) that allows you to create, sell, and transfer ownership of unique star token
(CryptoStar) on the Ethereum blockchain using smart contracts and the non-fungible (ERC721) token
standard. This service is designed to demonstrate how to claim and transfer ownership of unique digital
asset ( e.g. document, deed, agreement, media, etc.) on Ethereum blockchain.

You‚Äôll build the back-end infrastructure for the CryptoStar with a pre-developed front end. This will enable
you to render the service on any modern web clients.

**Key Lessons:**
- Ethereum fundamentals and development tools
- Smart contracts with solidity
- Ethereum Dapps


## Section 3: Blockchain Architecture
### Learn blockchain architecture and advanced concepts such as privacy, security and decentralized file management.
By the completion of Project 2, you‚Äôll have learned the importance of Proof of Existence, which is used to
verify whether a digital asset is authentic and can be trusted. In this project, you‚Äôll scale up to architect a
solution that verifies authenticity for a product when multiple actors are involved.

You‚Äôll build a supply chain system on Ethereum blockchain that allows users to verify the authenticity of an
item as it passes through different hands. You will architect a Dapp (Decentralized Application) authenticity
management system backed by the Ethereum platform. To do so, you‚Äôll scope out the needs of the various
actors in the supply chain and create smart contracts that help track product origination and verify product
authenticity. You‚Äôll then tie this all together with a simple front-end that allows users to manage the product
life-cycle as the product moves through the supply chain.

**Key Lessons:**
- Planning blockchain solutions
- Privacy
- Security & maintenance
- Distributed file system


## Section 4: Dapp with autonomous smart contracts and oracles
### Advance your blockchain skill set by developing a decentralized application (Dapp) that will perform actions based on external triggers, and handle payments.
In the real-world, many smart contracts perform actions based on external triggers. These triggers can be
caused by our actions, or by data received from outside sources using what are known as ‚Äúoracles.‚Äù To make
real-world decentralized applications, smart contracts need to respond autonomously to these triggers,
thereby making these applications more interactive.
In this project, you'll build a decentralized application for a use case in which you have airlines that offer
flight delay insurance, and passengers who carry this insurance, and who get paid in the event their flight is
delayed. You‚Äôll build multiple smart contracts which are autonomously triggered by external sources, and
which handle payments based on flight delay scenarios.

**Key Lessons:**
- Multiparty control and payments with smart contracts
- Oracles
- Handling smart contract payments


## Section 5: Capstone
### For your capstone project, you‚Äôll use all the new skills you‚Äôve acquired to build decentralized property listing application.
Here, you‚Äôll use all the new skills you‚Äôve acquired to build decentralized property listing application.

In this project, you will represent your ownership of the property using ZK-SNARKs and then mint tokens to
represent your claim to the property. You will then make these tokens available for sale on blockchain
marketplace.

**Key Lessons:**
- ZK-SNARKs
- Zokarates framework

![image](https://github.com/BrianHHough/Blockchain-Developer-Nanodegree-Udacity/blob/master/Documentation/Core%20README/Udacity_Banner.png)
",4,4,3,70,real-estate-platform,"[blockchain, blockchain-architecture, blockchain-capstone, blockchain-data, blockchain-developers, blockchain-platform, blockchain-technology, decentralized-applications, digital-assets, ethereum-blockchain, opensea, private-blockchain, real-estate-platform, rinkeby-network, ropsten-network, star-notary, supply-chain, udacity-blockchain-nanodegree, udacity-flight-surety-dapp, udacity-nanodegree]",0
pleonova,real-estate,,https://github.com/pleonova/real-estate,https://api.github.com/repos/real-estate/pleonova,A real estate heat map of Silicon Valley.,"# Silicon Valley Real Estate
[A real estate heat map of Silicon Valley (2021 & 2022)](https://public.tableau.com/app/profile/paula/viz/RealEstateAnalysisHeatMap-SiliconValley/1HouseSalesSqftLotSize)

[<img alt=""Interactive Tableau Heat Map Visualization"" width=""400px"" src=""https://github.com/pleonova/real-estate/blob/main/Screenshots/sold_houses_sqft_lot_size2022.png"" />](https://public.tableau.com/app/profile/paula/viz/RealEstateAnalysisHeatMap-SiliconValley/1HouseSalesSqftLotSize)


## Features

**Color: Sale Price**<br/>
Click on multiple colors in the key to highlight the houses in the map.
- Colors are coded in increments of $200K
- The values shown in the key is the minimum value (so if it shows $1M then it means that the houses highlighted will be from $1M to $1.2M)
- Select multiple colors by holding down your mouse (or the Shift button)
- Use lasso to select houses in a particular region and update the bar chart below

**Bubble Size: Square Foot Radius - 2 Types**<br/>
Explore how big the house is relative to the lot size.
- The outer faint circle represents the lot square footage
- The inner dark circle represents the house square footage

**Bubble Tooltip**<br/>
On hover, see details about the home including bedrooms, square footage and address.
- Click on the bubble to see direct link to the house on redfin (use this to quickly navigate to the site in a new tab to look at photos and other details about the property)

**Filters: Sale Price and Date**<br/>
Narrow down the date range and the price of homes
- Filter the the date range for underlying data to view different time periods
- Update the price range
- *Tip: The markets change frequently, so looking at how the last three months performed is probably most helpful as well as a general yearly trend (summer tends to be higher priced homes, while winter has fewer homes for sale).*

**Filters: Number of Beds, Bathrooms**<br/>
- Filter homes based on how many bedrooms and/or bathrooms they have

**Bar Chart: Monthly Aggregate Sales (with Median and Average)**<br/>
- All the houses are ordered from highest to lowest each month including a Median cost as well as Average.
- Clicking on any one home will in the bar chart will highlight it on the map (click on a white space in the bar graph to remove the temporary filter and see all the homes again)

**Filter: Favorites**<br/>
If you have an account on Redfin, you can favorite houses and visualize them.
- Download file from Redfin includes a field for your favorites which can be displayed exclusively on the map
- Ability to highlight your favorites while keeping the other homes on the map



## Upload your own data

Redfin makes this pretty straightforward and all you need to do is download a csv. You can go to their support article [here](https://support.redfin.com/hc/en-us/articles/360016476931-Downloading-Data-), but it is honestly just a few clicks. Just note that they have a limit on how far in data you can go and how much you can download in one go.<br/>

[Screenshots of steps below](https://github.com/pleonova/real-estate/blob/master/UploadYourData)

1) Download CSV from Redfin.
2) Download Tableau Workbook or make a copy if you have a free Tableau Public account. You can also install a free 14-day trial (or just use a Tableau Public installation that you can only save by posting data to Tableau Public).
3) Go to **Data Source** tab at the bottom left and drag your files into the *Need more Data?* region.
4) Remove the old data source *redfin_2021_* under **Connections** on the top left.
5) Drag and drop your file(s). If more than one, hover the next one over the old one so you can do a UNION between the files.
6) Go to **#1 House Sales & Sqft/Lot Size** and update the *Sold Date* filter! Do not forget to do this, otherwise you will not see any of your data.
7) Lastly, hover over the disbtribution chart at the bottom and sort the prices.
8) Explore your own data!",0,0,1,0,real-estate,"[chart, data-visualization, heatmap, real-estate, tableau-public, visualization]",0
Mugambi645,realtor-clone,,https://github.com/Mugambi645/realtor-clone,https://api.github.com/repos/realtor-clone/Mugambi645,Realtor clone using react and firebase,"# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
# realtor-clone
",0,0,1,0,real-estate,"[firebase, reactjs, real-estate]",0
PhilipWafula,Makeja-API,,https://github.com/PhilipWafula/Makeja-API,https://api.github.com/repos/Makeja-API/PhilipWafula,Rails API for property leasing and management platform ,"<img src=""https://storage.googleapis.com/makeja_temps/makeja_temp_logo.png.png"" width=""40%"" height=""20%""></img>

[![CircleCI](https://circleci.com/gh/PhilipWafula/Makeja-API.svg?style=svg)](https://circleci.com/gh/PhilipWafula/Makeja-API)
[![Maintainability](https://api.codeclimate.com/v1/badges/9daaa0f7265e49ed9a33/maintainability)](https://codeclimate.com/github/PhilipWafula/Makeja-API/maintainability)
[![Test Coverage](https://api.codeclimate.com/v1/badges/9daaa0f7265e49ed9a33/test_coverage)](https://codeclimate.com/github/PhilipWafula/Makeja-API/test_coverage)

# Makeja
By [SpaceMonkeys](https://github.com/space-monkeys)

Makeja a Rails API application that enables property owners to upload information about their properties
and lease them out on the platform. On the other end, it enables users to lease and manage the properties
they get on the platform. This platform creates an ecosystem that eases the process of accessing and leasing
property.


## Getting Started
To get a working development environment setup:

* Get the resource
```
$ git clone git@github.com:PhilipWafula/Makeja-API.git
```

* Configuration
```
$ cd sarafu_network
$ cp config/database.sample.yml config/database.yml
$ cp config/secrets.sample.yml config/secrets.yml
```

Open `config/database.yml` and change the username and password for the development environment to match your 
PostgreSQL setup. Open `secrets.yml` and edit the admin email and password. This is used as the initial admin,
username and password.

### Prerequisites

Makeja requires:
* Ruby 2.5.7 
* Rails 6.0.0
* PostgreSQL
* Redis


### Installing

* Prepare system

```
$ sudo apt-get update
$ sudo apt-get install build-essential curl tcl libcurl4-openssl-dev nodejs redis-server
```

* Install RVM
```
$ curl -sSL https://get.rvm.io -o rvm.sh
$ source ~/.rvm/scripts/rvm
$ rvm requirements
$ rvm install 2.5.7
$ rvm rubygems current
```

* Install bundler
```
$ gem install bundler
```

* Setup database
```
$ bundle exec rake db:setup
```

* Start server
```
$ rails s
```
* Run sidekiq workers
```
$ bundle exec sidekiq -C config/sidekiq.yml -e development
```

## Running the tests

Run entire test suite with:

```
rspec
```

Run individual tests with:

```
rspec path/to/individual_spec.rb
```

## Deployment

```ruby

```

## Built With

* [Ruby on Rails](https://rubyonrails.org/) - The web framework used

## Contributing

Please read [CONTRIBUTING](https://github.com/PhilipWafula/Makeja-API/blob/master/CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.

## Versioning

We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags). 

## Authors

* **Philip Wafula** - *Initial work* - [SpaceMonkeys](https://github.com/space-monkeys)

See also the list of [contributors](https://github.com/PhilipWafula/Makeja-API/contributors) who participated in this project.

## License

This project is licensed under the GNU AFFERO GENERAL PUBLIC LICENSE License - see the [LICENSE](https://github.com/PhilipWafula/Makeja-API/blob/master/LICENSE.md) file for details

## Acknowledgments
The Makeja team appreciates the work done by the following parties as sources of inspiration for code quality, documentation or setting standards:

* **Billie Thompson** - *Documentation* - [PurpleBooth](https://github.com/PurpleBooth)

",3,3,3,13,property-management,"[property-management, realestate, ruby-on-rails]",0
med-mahdi,Real-Estate-Project,,https://github.com/med-mahdi/Real-Estate-Project,https://api.github.com/repos/Real-Estate-Project/med-mahdi,real estate app for selling properties,,0,0,1,1,real-estate-rental,"[airbnb, avito, real-estate-app, real-estate-platform, real-estate-rental, real-estate-website]",0
jmcph4,rpdb,,https://github.com/jmcph4/rpdb,https://api.github.com/repos/rpdb/jmcph4,rpdb,,0,0,3,0,real-estate,"[automation, data, database, dataset, db, real-estate, rpdata, sql]",0
suongfiori,landing-page-estate,,https://github.com/suongfiori/landing-page-estate,https://api.github.com/repos/landing-page-estate/suongfiori,Estate landing page built with pure HTML & CSS,"<h2>Estate Landing Page</h2>

<img src=""https://github.com/suongfiori/landing-page-estate/blob/main/images/index.png"" width=""50%""> <br><br>
<img src=""https://github.com/suongfiori/landing-page-estate/blob/main/images/login-page.png"" width=""50%""> <br><br>
<img src=""https://github.com/suongfiori/landing-page-estate/blob/main/images/sign-up-page.png"" width=""50%"">
",0,0,1,0,real-estate,"[css, front-end, frontend, html, landing-page, real-estate]",0
sumant1302,realestatekings.github.io,,https://github.com/sumant1302/realestatekings.github.io,https://api.github.com/repos/realestatekings.github.io/sumant1302,The frontend of my Real Estate Website,,0,0,1,0,real-estate-website,"[css3, html, javascript, real-estate-website]",0
Jbithell,1GlynTerrace,,https://github.com/Jbithell/1GlynTerrace,https://api.github.com/repos/1GlynTerrace/Jbithell,Website for Self Catering Seaside Holiday Cottage in the Idyllic Village of Borth-y-Gest,"![Cover](images/background.jpg)

# 1 Glyn Terrace
Website for Self Catering Seaside Holiday Cottage in the Idyllic Village of Borth-y-Gest


## Previous Version
Available at https://web.archive.org/web/20170215185510/https://borth-y-gest.holiday/
",0,0,2,0,real-estate,"[github-pages, holiday, real-estate, self-catering, website]",0
jesusantguerrero,prestapp,,https://github.com/jesusantguerrero/prestapp,https://api.github.com/repos/prestapp/jesusantguerrero,The Loan & Property Management Software,"<p align=""center""><a href=""/"" target=""_blank""><img src=""/Art/logo.svg"" width=""400"" alt=""Laravel Logo""></a></p>

<h3 align=""center"">
    The Loan & Property Management Software
</h3>

 <p align=""center"">
	<strong>
		<a href=""https://icloanapp.com"" target=""_blank"" style=""color:dodgerblue;"">Website</a>
		‚Ä¢
		<a href=""https://docs.icloanapp.com/"" target=""_blank"">Docs</a>
		‚Ä¢
		<a href=""https://icloanapp.com/"" target=""_blank"">Demo</a>
	</strong>
</p>

> ‚ö†Ô∏è ICLoan is in Alpha (Under heavy development):

> It is already quite usable, but it isn't ready for production yet. We recommend you use the demo to take a look feedback are aprecciated but maybe wont be inmmiadiatelly addressed at this stage since I have the idea in exploration phase.

## About ICLoan
ICLoan is a Loan & Property Management Software that can handle properties with multiple units, owner distribution, rental contracts and rental expenses along with loan with rates.


## ‚ú®Features:

* üíµ Loans
*  üè° Property Management
* üë®‚Äçüë©‚Äçüëß Integrated Loan + Property Management dashboard**

## Scope
ICLoan is an exploration in the property management area and it is a good alternative for property managers with an small portfolio. Compared to more mature software ICLoan doesnt handle 

- Accounting (event though we make the transactions under the hood that section is not public), 
- Maintenance
- Tasks
- Public Listing

## Technical Stuff
ICLoan is a Monolith app using laravel 9, jetstream, inertia, vue3, Tailwindcss and some hand crafted packages [Atmosphere UI](https://github.com/jesusantguerrero/atmosphere-ui), [Journal](https://github.com/insane-code/journal), and others.


| Prerequisite                                          | Version     |
| ------------------------------------------------------| ----------  |
| [Node.js](http://nodejs.org)                          | `~ ^16.18.0`|
| npm (comes with Node)                                 | `~ ^8.19.2` |
| [PHP]                                                 | `~ ^8.1.2`  |
| [Composer](https://getcomposer.org/)                  | ' ^2.3.8    |
| [MariaDB](https://mariadb.org/)***                    |  `10.8.4`   |
| [Cloud Platform Project (with Gmail API)**](https://developers.google.com/gmail/api/quickstart/js)                                |    --                                                 |             |
| PHP extension ext-mailparse**                         |      --     |

`** Those requirements are optional for Gmail integration/automation`
`*** MariaDB could be replaced with MySql8`

```shell
node -v
php -v
```

## Installation

To install Loger, you'll need to clone or download this repo:

```
git clone https://github.com/jesusantguerrero/atmosphere.git project_name
```

Next, we can install Atmosphere with these **4 simple steps**:

### 1. Create a New Database

During the installation we need to use a MySQL database. You will need to create a new database and save the credentials for the next step.

### 2. Copy the `.env.example` file

We need to specify our Environment variables for our application. You will see a file named `.env.example`, you will need to duplicate that file and rename it to `.env`.

Then, open up the `.env` file and update your *DB_DATABASE*, *DB_USERNAME*, and *DB_PASSWORD* in the appropriate fields. You will also want to update the *APP_URL* to the URL of your application.

```bash
APP_URL=http://127.0.0.1:8000/

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=prestapp
DB_USERNAME=root
DB_PASSWORD=
```

### 3. Add Composer Dependencies
```php
composer install --ignore-platform-reqs
```
### 4. Run Migrations and Seeds

```bash
php artisan migrate --seed
php artisan app:demo-fresh-start
```
<br>

backend development
```bash
php artisan serve
```
Frontend development
The backend have to be running

```bash
# install npm packages
npm install
# development
npm run dev
```

üéâ And that's it! You will now be able to visit your URL and see your Atmosphere application up and running.

## License
[BSD-3 license](https://github.com/jesusantguerrero/atmosphere/blob/master/LICENSE).

## Author
Jesus Guerrero
- website: [jesusantguerrero.com](https://jesusantguerrero.com)
- twitter: [@jesusntguerrero](https://twitter.com/jesusntguerrero) 
",4,4,3,13,property-management,"[inertiajs, laravel, loans, property-management, vue3]",0
EvanCarroll,db-TREC-Texas-Real-Estate-Commission,,https://github.com/EvanCarroll/db-TREC-Texas-Real-Estate-Commission,https://api.github.com/repos/db-TREC-Texas-Real-Estate-Commission/EvanCarroll,"Importing mechanism for the Texas Real Estate Commission TREC ""High Value Data Sets"" into PostgreSQL","Texas Real Estate Commission (TREC)
===

Currently we download from [TREC](https://www.trec.texas.gov/) the following [""High Value Data Sets""](https://www.trec.texas.gov/public/high-value-data-sets)

* Broker and Sales Agent License Holder Information
* Inspector License Holder Information
* Easement or Right-Of-Ways agents License Holder Information

You can find the [data and field definitions on the TREC High Value Data Sets Instructions page](https://www.trec.texas.gov/public/trec-public-information-files-instructions)

Rationale 
---

I'm looking for a broker that is independent in my area, that

1. Won't charge me a desking fee.
2. Doesn't want a percentage cut.
3. Preferably local and clever.

Thus...

	SELECT *
	FROM trec.view_all_licenses
	WHERE license_type = 'Individual Broker'
		AND license_status     = 'Current and active'
		AND mailing_county     = 'HARRIS'
		AND physical_county    = 'HARRIS'
		AND addr_mailing_city  = 'KINGWOOD'
		AND addr_physical_city = 'KINGWOOD';

And, I can go broker shopping.

Instructions
---

Inside this repo, you'll find a script called `init.sh`. Running that script should download and convert the raw data to a format for ingestion. This scripts calls `runall.sql` which handles the creation of the schema and loading the data into PostgreSQL.

Requirements
---

* PostgreSQL
* iconv (to convert from CP850 to UTF-8)
* sed to remove \x00's from the feed.
* curl to download the raw data files.

Fund work and integration
---

Want to use this technology for an application or need help developing an idea,
integration or further work with the data set? Shoot me an email for a quote.
",0,0,2,0,real-estate,"[database, etl, government, moose, opendata, postgresql-database, postgresql-database-dump, real-estate, realtors, texas, trec]",0
Arrangonsalves,Hot-Properties,,https://github.com/Arrangonsalves/Hot-Properties,https://api.github.com/repos/Hot-Properties/Arrangonsalves,A real estate backend code written in python with Sql database.,# Hot-Properties,0,0,1,0,real-estate,"[backend, properties, python, real-estate, sql]",0
LJORGEN,REAL,,https://github.com/LJORGEN/REAL,https://api.github.com/repos/REAL/LJORGEN,Real Estate Apprasial Language,"# REAL
Real Estate Apprasial Language

Contains functions used for property apprasial analysis.

Currently includes COD, PRD, PRB, associated sub-functions, summary stats, and polynomial time trend fit
as well as preprocessing functions for data cleanup.

The polynominal time trend is converted from python writen orignally by Brad Welborn.

This is an R companion package to the github package 'Joshua-Data-Wizard/PyRealEstate'. The preprcossing functions
orignate from the 'PyRealEstate' package.

PyRealEstate: https://github.com/Joshua-Data-Wizard/PyRealEstate.git
",0,0,1,0,real-estate,"[functions, iaao, real-estate]",0
pwn-mm,real-estate-next,,https://github.com/pwn-mm/real-estate-next,https://api.github.com/repos/real-estate-next/pwn-mm,"Real Estate Application with rental homes and for-sale properties, advanced property filtering, property details page with an image carousel, and much more. Thanks to JS Mastery. Practiced by me.","## Real Estate Application

### [Live Site](https://pwn-realestate.vercel.app/)

![Real Estate](https://i.ibb.co/S5sQHPf/real-estate.png)

Real Estate Application with rental homes and for-sale properties, advanced property filtering, property details page with an image carousel, and much more.

Setup:
- run ```npm i && npm run dev```",2,2,1,1,real-estate-website,"[charkra-ui, nextjs, real-estate-website]",0
farnyser,rers,,https://github.com/farnyser/rers,https://api.github.com/repos/rers/farnyser,Real Estate Rental Simulation,"# Real Estates Rental Simulation

Simulate rental income under french law and compare tax system (nom propre, LMNP, micro foncier vs r√©el)

- `real_estates.py` is the implementation
- `simulation.ipynb` is a notebook to input parameters and visualize simulation results

### TODO

- Add coherency check (assert that initial cash injection + loan amount = initial cost)
- Support SCI IS tax system
",0,0,2,0,real-estate-rental,"[python3, real-estate-rental]",0
hademircii,What-Goes-On-In-The-Bay-Area-Housing-Market,,https://github.com/hademircii/What-Goes-On-In-The-Bay-Area-Housing-Market,https://api.github.com/repos/What-Goes-On-In-The-Bay-Area-Housing-Market/hademircii,Analysis of the Greater Bay Area Housing Market,,0,0,2,0,real-estate,"[real-estate, seaborn]",0
bunnysaini,propertyware,,https://github.com/bunnysaini/propertyware,https://api.github.com/repos/propertyware/bunnysaini,This is a simple system that will keep track of housing properties that are available for rent and sale and will serve as a connecting bridge between customers and property sellers.,"# PropertyWare - A Real Estate Management System
bunnysaini/propertyware

## Features
This is a simple system that will keep track of housing properties that are available for rent and sale and will serve as a connecting bridge between customers and property sellers. This method eliminates the need to visit several locations in pursuit of the desired location. This project would serve as a marketplace for home line property sellers and buyers. It will keep track of the properties, homes, or flats for sale and rental purposes, as well as their prices and amenities, along with the seller's contact details and make this information accessible to customers.

PropertyWare captures the following functions for a seller:
- Add / List Property
- Manage Dashboard
- Remove Property
- View / Modify Profile

PropertyWare captures the following functions for a buyer:
- Find properties using Search Engine
- Detailed Information of Desired Property
- View / Modify Profile
- Packers&Movers Feature

This software asks for user details at the time of creating account. The user can be a buyer or seller of a property, buyers get to see the list of properties listed so that further operations can be carried out in required manner.

## Functionality
The software uses Java Programming Language for back‚Äìend and Swing API for front-end GUI design using Eclipse IDE. Query Based Language, SQL has been used for database manipulation and MySQL Workbench as well as JDBC (Java DataBase Connector) has been used for connection. It also uses OOPs Concepts such as Abstraction, Polymorphism to work with multiple classes. Error Handling and Data Validation has been implemented at evert possible branch.

## Overview of the Software
- Home Screen

<img width=""364"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185413597-6827eafb-a658-4c6a-bb2b-68981686a9fa.png"">
  
- Registration Page

<img width=""314"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185413861-87a380be-26d5-4a47-a90b-e3a77325aff8.png"">

- Login Page

<img width=""333"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185413953-5357cbe7-5542-46cc-b879-326fb604cbeb.png"">

- Seller Interface Menu

<img width=""402"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185414050-776d6f78-b613-4a5d-84b7-e35896f2e1ac.png"">

- Buyer Interface Menu

<img width=""415"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185414153-a5e77193-7776-4afa-98f3-74f6f717c45e.png"">

- Functions on Property: (List/View/Search/Delete)

<img width=""401"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185414702-a5b6793e-8adc-4671-a208-83e87983d3ca.png"">
<img width=""413"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185414836-50f42d25-29af-4808-81ca-648e169fac50.png"">
<img width=""425"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185414921-79f5216e-ec2d-405b-90c9-7e2750a65c92.png"">

- Profile Display

<img width=""369"" alt=""image"" src=""https://user-images.githubusercontent.com/83510385/185415146-0f257929-2eb3-4246-95bb-ffc5aded2e54.png"">

",0,0,1,0,property-management,"[java, jdbc-driver, mysql, object-oriented-programming, property-management, swing-gui]",0
Alraku,rescrapp,,https://github.com/Alraku/rescrapp,https://api.github.com/repos/rescrapp/Alraku,Web scraper for getting data of real estate properties,# real-estate-analyzer,0,0,1,0,real-estate,"[data-science, python, real-estate]",0
j-ahmadkhan,Rent-Manager,,https://github.com/j-ahmadkhan/Rent-Manager,https://api.github.com/repos/Rent-Manager/j-ahmadkhan,C# desktop software for Property Rent Management,"# Rent-Manager
C# desktop software for Property Rent Management
A simple to use software for Property Rent Management and Collection
Alarms whenever a Renter's rent is due.
Written in C#, database in AAccess.
Ready to use app and source.
",4,4,0,0,property-management,"[property, property-management, rent, rental, rentalsystem]",0
ceciliaconsta3,eliro-realty,,https://github.com/ceciliaconsta3/eliro-realty,https://api.github.com/repos/eliro-realty/ceciliaconsta3,:construction: Under construction,,0,0,0,0,real-estate,[real-estate],0
shaista0422,SK-Architects,,https://github.com/shaista0422/SK-Architects,https://api.github.com/repos/SK-Architects/shaista0422,This is the sample website for an real estate company,,0,0,1,0,real-estate-website,"[real-estate-website, website]",0
kholidfu,dj-properti,,https://github.com/kholidfu/dj-properti,https://api.github.com/repos/dj-properti/kholidfu,Indonesian Property Listing Site Built with Django and Python3,"# DJ-PROPERTI

Platform untuk web iklan properti, meliputi, rumah, tanah, apartemen,
dll. Platform ini dibuat dengan menggunakan python3 + django.
	
## Goals

Build an Indonesian property listing site, just like what we've seen
on olx, rumah123, urbanindo, etc.

## Tech

- Python3
- Django
- PostgreSQL

## Progress Status

Aplikasi ini sudah siap dari sisi fungsionalitas minimal, tinggal
develop untuk front-end dan siap go-live!

Freely contact me for more info.

## Demo

## Screen Capture
",0,0,2,1,real-estate,"[classified, classified-ads, django, listing, property, python, real-estate]",0
karan2605,real-estate-escrow,,https://github.com/karan2605/real-estate-escrow,https://api.github.com/repos/real-estate-escrow/karan2605,A real estate escrow contract encoded using Solidity smart contracts on Ethereum,"# Real Estate NFT DApp

## Technology Stack & Tools

- Solidity (Writing Smart Contracts & Tests)
- Javascript (React & Testing)
- [Hardhat](https://hardhat.org/) (Development Framework)
- [Ethers.js](https://docs.ethers.io/v5/) (Blockchain Interaction)
- [React.js](https://reactjs.org/) (Frontend Framework)

## Requirements For Initial Setup
- Install [NodeJS](https://nodejs.org/en/)
- Install [MetaMask](https://metamask.io/)

## Setting Up
### 1. Clone/Download the Repository

### 2. Install Dependencies:
`$ npm install`

### 3. Run tests
`$ npx hardhat test`

### 4. Start Hardhat node
`$ npx hardhat node`

### 5. Run deployment script
In a separate terminal execute:
`$ npx hardhat run ./scripts/deploy.js --network localhost`

### 7. Start frontend
`$ npm run start`",0,0,2,0,real-estate,"[decentralized-applications, ethereum, reactjs, real-estate, solidity]",0
Sedatekinci4,Real-Estate-System-C,,https://github.com/Sedatekinci4/Real-Estate-System-C,https://api.github.com/repos/Real-Estate-System-C/Sedatekinci4,Real estate recording system using C language and hash table,"This project is still in progress...
",0,0,1,0,real-estate,"[c, hashtable, real-estate]",0
m1m1s1ku,bricks_sdk,,https://github.com/m1m1s1ku/bricks_sdk,https://api.github.com/repos/bricks_sdk/m1m1s1ku,SDK to access Bricks.co,"# Bricks.co SDK

Bricks is a French company that offers a financial investment service.  
I'm not part of this company, I'm just one of their customer.

This library is intended to provide you with an easy way to retrieve your data from Bricks.  
It uses private API which may change and break this library at any moment.

![Tests](https://github.com/m1m1s1ku/bricks_sdk/actions/workflows/ci.yml/badge.svg)

## Installation

```
npm install @m1m1s1ku/bricks_sdk
```

## Documentation

[Documentation](https://m1m1s1ku.github.io/bricks_sdk/)

## Usage

[Example](https://github.com/m1m1s1ku/bricks_sdk/blob/main/call-all-apis.ts)

## Contributing

Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

Please make sure to update tests as appropriate.

## Referral code

If you don't already have a Bricks account and you want to try, you can subscribe with my referral code [LOC23](https://app.bricks.co/sign-up/LOC23).

## License

[MIT](./LICENSE)
",0,0,1,5,real-estate,"[bricks, french, investment, real-estate, typescript, undici, zod]",0
markods,HouseHunters,,https://github.com/markods/HouseHunters,https://api.github.com/repos/HouseHunters/markods,,"HouseHunters
",0,0,1,8,real-estate-website,"[angular, bootstrap, express, mongodb, real-estate-website, typescript]",0
salvecom333,point2scrape,,https://github.com/salvecom333/point2scrape,https://api.github.com/repos/point2scrape/salvecom333,Web scraper that scrapes the Point 2 Realtor website and outputs csv with useful data,"# point2scrape
Web scraper that scrapes the Point 2 Realtor website and outputs csv with useful data

It outputs in the csv file with the following columns: ['Address', 'Beds', 'Baths', 'Size', 'Area', 'Acres',
'Price', 'Agent', 'Firm', 'Map', 'Contact', 'Picture','Listing Link'] from all the listings starting from the starter url you give it.

This is one of my first scripts that i have typed. I hope you can find it useful.
If you like it and want to buy me a coffee here are the following link:

https://ko-fi.com/salvadorcarrillo_c

https://www.buymeacoffee.com/pointperksH

This code is under Attribution 4.0 International (CC BY 4.0) https://creativecommons.org/licenses/by/4.0/

To install just install requirements.txt and run the python program. This is a command line interface.


                                                                                          
                                                                                          
                                                                                          
                                                                                          
                                      .--===-:.                                           
                                   .+*########**+:                                        
                                  =*#############*=                                       
                                 +################*.                                      
                                .*################*=                                      
                                 .+*++++****######*+.                                     
                                  .===-==++****##**+:                                     
                                   -===+********#**+.                                     
                                   .+*=*+++=++******:                                     
                                    :--+++==+********+.                                   
                                     -=+**++****##*###*=-:.                               
                                      :=+****##########*****+=-.                          
                                        =++*#####**####*********+-.                       
                                     .=+***#******#####************=-                     
                                   :+####*###+++*####**#*************+.                   
                                .-+*######*##*=*####**#******###******+.                  
                               -*#**##**#***##*###***#***##*###********=                  
                             .-**#####******####****#****#####*#*******+.                 
                          -+**########****#*##**=**##***######***#*****+.                 
                        -+**##########***####***:+**#*#######***##*****+.                 
                       =****##########***###*******#########***##******+.                 
                     :=**#########%###***###********########**##*******+.                 
                    :=++*####%%%%%%###***###*******########***##**##***=                  
                    -++*###%#%%%%%%##*######*******########**######*#**-                  
                    -++*######+=----*#########****#########****#####***.                  
                    -++*##*=:       -####*#*******##################***.                  
                    :=+**:          :*###*********##########******##***.                  
                  .-=++*=           .*#####*#****###########*+***###***:                  
                 :-==+**-            +#####****############+==+**###***:                  
                .--=++**.            :*###################+==+***###*#*:                  
                .--==+#+              +##################+=++****####**-                  
                 :=-+*+.              -#################+=++**#*#####**-                  
                  .-::.               .*###############+++***########**+                  
                    -.                 +#############*++***##########**+.                 
                    :.                 =############++***##########*#***:                 
      ......::-:....----::.:--::...    +##########*=++**##########*###**-                 
     .::.:-:::::----===+******++++=+-:=++*+***##*+++***###############**=                 
      .. ::....:....:-=+**=-+*++++==+++=**-=**===++***################**+                 
     :=+=-::.:........--+**==**=++++++*=+**++====***##################**+                 
     -==++*+=--.:.: :.:-=+*+=+*==+++==*==+*+=++=+*+*#*###############***=                 
       .:-=+++++==-:-::=-+*==+*==+*==+*==+++*#=+*=+****##############***-                 
           .:-==+++++++***#*###*########*****+=*+=*+**-. .-=+*#####***=.                  
              ...::::::::::::.........          .....         .:-=+***.                   
                                                                    ..                    
                                                                                          
                                                                                          
Hahaha i can't believe that worked, i look great in ascii! lol
",0,0,1,0,real-estate,"[point2, real-estate, scraper, webscraper]",0
arneelus777,real-estate-01,,https://github.com/arneelus777/real-estate-01,https://api.github.com/repos/real-estate-01/arneelus777,,"# real-estate-01

## Add more features

* CENTER FOOTER IMAGE 
Make center site responsive for different size screens
it's too big on mac laptop

## Fix middle page grid template
left grid to justify left (justify-self:start)
right grid to justify right (justify-self:end)
 To fit in container properly
 
 ### Remove padding for last section (footer) to fit properly in container with middle section.
 
 ### Add a nav bar ( make it simple )
",0,0,1,0,real-estate,"[css, html, landing-page, real-estate, ui, ux-design, webdesign]",0
redlion2375,real-estate,,https://github.com/redlion2375/real-estate,https://api.github.com/repos/real-estate/redlion2375,Real Estate Management App for Android Phone,,0,0,1,0,real-estate,"[android, android-app, java, kotlin, kotlin-android, mobile, real-estate]",0
bestbirchwood,WP-mortgage-calculator,,https://github.com/bestbirchwood/WP-mortgage-calculator,https://api.github.com/repos/WP-mortgage-calculator/bestbirchwood,A simple and neat-looking German Mortgage Calculator for Wordpress that calculates the affordable house price based on preferred monthly down payment and other adjustable values.,,0,0,1,0,real-estate,"[mortgage, mortgage-calculator, real-estate]",0
KemoniCodes,recursive-real-estate,,https://github.com/KemoniCodes/recursive-real-estate,https://api.github.com/repos/recursive-real-estate/KemoniCodes,"A real estate website that incorporates REACT, HTML, CSS/SCSS, and Firebase for authentication. This web application features React router for routing between the different pages. Also implemented is React's PrivateRoute, which allows the user a limited view of the application unless logged in, or registered.","# recursive-real-estate
Having difficulty deploying the application currently. So enjoy this gif demo!

![](recursive.gif)
",0,0,2,11,real-estate,"[authentication, carousel-component, firebase, react, react-router, real-estate, slideshow]",0
iamparthgandhi,real-estate-website,,https://github.com/iamparthgandhi/real-estate-website,https://api.github.com/repos/real-estate-website/iamparthgandhi,"A Responsive Real Estate Website built using HTML , CSS and Javascript","# real-estate-website
A Responsive Real Estate Website built using HTML , CSS and Javascript
",0,0,1,0,real-estate,"[css, html, javascipt, real-estate, responsive]",0
MeetYourAI,AIProperty,MeetYourAI,https://github.com/MeetYourAI/AIProperty,https://api.github.com/repos/AIProperty/MeetYourAI,"SmartLet Property Management (Ai Property) is a powerful leasing automation software that leverages AI-powered tools to automate property management operations. It helps organize leasing teams, cuts down vacancies, and increases productivity for users, allowing them to have more 'me-time'.","# What is SmartLet Property Management

SmartLet Property Management is a powerful leasing automation software that leverages AI-powered tools to automate property management operations. It helps organize leasing teams, cuts down vacancies, and increases productivity for users, allowing them to have more 'me-time'.

## PRODUCT REQUIREMENT DOCUMENT FOR SMARTLET PROPERTY MANAGEMENT

**Product Name**: SmartLet Property Management

**Product Type**:	AI-Powered Property Management Website

**Target release**:	16th of Sep 2023

**Document status**: ONGOING

**Document owner**: John Eme

**Product Engineer**: Anais Gilbert and Bahadur Mia

**Head of Product**: John Eme

**Product Team**:	John Eme, Anais Gilbert and Bahadur Mia

**Product Owner**: Maurice Flynn

## Product Overview
SmartLet Property Management is a powerful leasing automation software that leverages AI-powered tools to automate property management operations. It helps organize leasing teams, cuts down vacancies, and increases productivity for users, allowing them to have more 'me-time'.

We'll start by analyzing marketing strategies to boost your online presence and attract more customers. By leveraging AI algorithms and data-driven insights, we can craft a comprehensive marketing plan that will make a real impact.

Next, we will focus on improving customer service. AI-powered chatbots and virtual assistants can provide instant support and answer common queries, saving you valuable time and ensuring your clients receive prompt assistance.

Lastly, we'll explore how AI can enhance the effectiveness of your selling processes. From automating property listings to utilizing predictive analytics for pricing, we'll maximize efficiency and optimize your sales strategies.

By incorporating these key elements, your website will not only be a game-changer in property management, but it'll also set new standards in the industry. So, let's get started and create a website that exceeds all your expectations!

# Objective
Creating a leasing automation software for property management that helps organize leasing teams and cuts down vacancies.

# Goal
‚Ä¢	AI-Powered Property Management Tools to Automate Operations
‚Ä¢	Analyze marketing strategies
‚Ä¢	Improve customer service
‚Ä¢	Advertising properties through the right channels
‚Ä¢	Getting access to market data

# Assumptions
We intend to create a powerful leasing automation software that helps our clients:
Analyze marketing strategies
Improve customer service
Enhance the effectiveness of selling processes

# User Story

‚Ä¢	Users want fast responsiveness, so they can use the site with ease
‚Ä¢	Users want a property management website that helps with data analysis so they can work effectively and have a me-time for their self
‚Ä¢	Users need a tool that instantly responds to questions and schedules tour bookings 10X faster while maintaining a human touch
‚Ä¢	Users want Powerful leasing automation software that helps organize leasing teams cut down vacancies and can increase your productivity for some ‚Äòme-time

# Features
SmartLet Property Management offers a range of rich features that cover all aspects of the property management shop. These features include:

1.	CRM Sync: Integration with existing customer relationship management (CRM) systems to streamline data management and improve overall efficiency.

2.	SMS and Email Follow-ups: Automated follow-up messages sent via SMS and email to prospects, increasing engagement and conversion rates.

3.	Round-robin Showings: Equitable distribution of property showings among leasing team members, ensuring fair access to potential tenants.

4.	Open House Scheduling: Easy scheduling of open house events with automated reminders for both leasing teams and prospects.

5.	Showing Confirmation: Instant confirmation of property showings to prospects, reducing no-shows and optimizing time management.

6.	Performance Reports: Comprehensive reports on team performance, marketing strategies, and customer service metrics for data-driven decision-making.

7.	Two-way Calendar Sync: Seamless synchronization between SmartLet Property Management's calendar system and users' personal calendars for efficient scheduling.

8.	Public Vacancy Website: A dedicated website showcasing available properties to attract potential tenants and increase visibility in the market.

9.	Market Move-in Offers: Customizable move-in offers to incentivize prospects into choosing properties managed through SmartLet Property Management.

10.	Rental Application Link: Integration with online rental application platforms for easy submission by interested prospects.

11.	Owner Reports: Detailed reports providing property owners with insights on occupancy rates, financial performance, and overall property status.

12.	Lockbox Integration: Integration with lockbox systems for secure self-showing technology, enhancing convenience for both leasing teams and prospects.

# User Feedback Summary
Based on user feedback, it is evident that the AI-powered tools offered by SmartLet Property Management have received positive reception. Users appreciate the ability of these tools to instantly respond to questions and schedule tour bookings at a much faster rate while still maintaining a human touch. This feature has been instrumental in improving overall efficiency and customer satisfaction.

# Conclusion
SmartLet Property Management, with its AI-Powered Property Management Tools to Automate Operations, provides users with powerful leasing automation software. By leveraging advanced technologies, it helps organize leasing teams, reduces vacancies, and increases productivity. The rich feature set covers all aspects of property management, ensuring seamless operations and improved customer service. With its AI-driven capabilities, SmartLet Property Management sets itself apart as an efficient and effective solution for property managers and leasing teams.
",0,0,1,0,real-estate,"[ai, artificial-intelligence, project, property, real-estate, realestate]",0
ChengChen-Steven,Anomaly-Detection-of-NY-Property-Data,,https://github.com/ChengChen-Steven/Anomaly-Detection-of-NY-Property-Data,https://api.github.com/repos/Anomaly-Detection-of-NY-Property-Data/ChengChen-Steven,Applying fraud analysis in the NY Property Tax dataset with 1048575 observations and 30 variables,"## Fraud-Detection-of-NY-Property-Data
##### Applying fraud analysis in the NY Property Tax dataset with 1048575 observations and 30 variables
====

##### File name: NY_property_data Source 
##### Url: https://data.cityofnewyork.us/Housing-Development/Property-Valuation-and-Assessment-Data/rgy2-tti8
##### Data Provided by: Department of Finance (DOF)
##### Dataset Owner: NYC OpenData 
##### Category: Housing & Development

##### Date Created: September 2, 2011 Metadata Last Updated: September 5, 2014
##### Data volume: 1048575 Fields: 30 fields, 16 continuous, 12 categorical, 2 text 
##### Details variables: RECORD, BBLE, BLOCK, LOT, EASEMENT, OWNER, BLDGCL, TAXCLASS, LTFRONT, LTDEPTH, STORIES, FULLVAL, AVLAND, AVTOT, EXLAND, EXTOT, EXCD1, STADDR, ZIP, EXMPTCL, BLDFRONT, BLDDEPTH, AVLAND2, EXLAND2, EXLAND2, EXTOT2, EXCD2, PERIOD, YEAR, VALTYPE.
##
## Purpose of the project
* Build metrics and detect the potential fraud records
##

## Outline of Approach
##### Step1: Data Cleaning
* Data Quality Report (DQR)
* Create 50 more insightful variables based on original variables
* Partition based on 7 key metrics
* Dealing with missing value, Z-scale

##### Step2: PCA (Principle Componenet Analysis)
* PCA (Visualization, Decide to use 13 PCs)

##### Step3: Set Fraud Score: 
###### 1. Euclidean Distance
* Based on projection of original features on the 13 PCs' directions
* Calculate the euclidean distance to the origin as the fraud score

###### 2. Auto-encoder(Neural Network Algorithm)
* Use h2o package to implement auto-encoder
* Output results from the PCA serves as the input
* Set two hidden layers, both five features 
* Calculate MSE of each record as the fraud score

###### 3. Comparison
* 76% overlapping in the highest 10000 fraud scores between Euclidean Distance and Auto-encoder  ¬† ¬† ¬† ¬† ¬†

###### 4. Discover insights
* Check the 30 records with top fraud scores and identify fraud patterns within them.

====
Keep updating...
",0,0,1,0,real-estate,"[anomaly-detection, real-estate]",0
cgd-ui,agent,cgd-ui,https://github.com/cgd-ui/agent,https://api.github.com/repos/agent/cgd-ui,Estate agency application client written in Vue 3 / Nuxt 3,"# agent
Estate agency application client written in Vue 3 / Nuxt 3
",1,1,4,0,property-management,"[estate-agent, nuxt, nuxt3, nuxtjs, properties, property, property-management, rightmove, vue, vue3, zoopla]",0
agriya,burrow,agriya,https://github.com/agriya/burrow,https://api.github.com/repos/burrow/agriya,"Burrow is an online booking platform / software for Real estate marketplace (Realty marketplace), Rental booking, Room sharing, Hotel booking, Office/Parking Space sharing, Car sharing, Bike sharing, Boat sharing, and other Airbnb clones like finder, etc","# Burrow

Burrow is an open source online platform for real estate, hotel, vacation rental, room sharing and accommodation booking,etc that is capable to run sites similar to airbnb, finder, airbnb clones, etc. It can also be used for similar business models such as car pooling, bike sharing, or any sharing marketplace website.

For historical reasons, Burrow is from [Agriya Labs](http://labs.agriya.com/burrow) and Airbnb adopted many features originally introduced in Burrow, including its latest design theme.

> This is project is part of Agriya Open Source efforts. Burrow was originally a paid script and was selling around 12000 Euros. It is now released under dual license (OSL 3.0 & Commercial) for open source community benefits.

![burrow_banner](https://user-images.githubusercontent.com/4700341/48258940-719bb280-e43c-11e8-998d-4d7aedda4933.png)

## Support

Burrow is an open source online platform for vacation rental and accommodation booking project. Full commercial support (commercial license, customization, training, etc) are available through [Burrow platform support](https://www.agriya.com/products/airbnb-clone)

Theming partner [CSSilize for design and HTML conversions](http://cssilize.com/)

## Features

### Site

Ability to search properties in popular cities. Cities will display depending upon the properties count.

### Multi-Language Support

Translation of front end with multilingual support. Site visitors can translate any webpage by click the drop-down box beside language.

### Negotiation

Burrow has negotiation workflow when negotiation is enabled by host. Traveler will contact host for negotiation in property view page. Host can able to give discount for booking in activities page.

### Ticket

Ticket will be available for traveler after host confirmed his booking. Payment release is not based on ticket, but it can be used to check authenticity of the traveler, host's address, policies, instructions, etc.

### Payment

Multiple payment gateway can be enabled using SudoPay account and Wallet.

### Property video

Here we can post video for property. Ability to post photos and videos by visited guests for other guests. This will help new traveler to get better understanding about the property.

### Affiliate

User can associate/refer our site to a different network thereby referred user can earn commission.

## Getting Started

### Prerequisites

#### For deployment

* MySQL
* PHP >= 5.5.9 with OpenSSL, PDO, Mbstring and cURL extensions
* Nginx (preferred) or Apache

### Setup

* Needs writable permission for `/tmp/` , `/media/` and `/webroot/` folders found within project path
* Database schema 'app/Config/Schema/sql/burrow_with_empty_data.sql'
* Cron with below:
```bash
# Common
*/2 * * * * /{$absolute_project_path}/app/Console/Command/cron.sh 1 >> /{$absolute_project_path}/app/tmp/error.log 2 >> /{$absolute_project_path}/app/tmp/error.log
```

### Contributing

Our approach is similar to Magento. If anything is not clear, please [contact us](https://www.agriya.com/contact).

All Submissions you make to Burrow through GitHub are subject to the following terms and conditions:

* You grant Agriya a perpetual, worldwide, non-exclusive, no charge, royalty free, irrevocable license under your applicable copyrights and patents to reproduce, prepare derivative works of, display, publicly perform, sublicense and distribute any feedback, ideas, code, or other information (""Submission"") you submit through GitHub.
* Your Submission is an original work of authorship and you are the owner or are legally entitled to grant the license stated above.


### License

Copyright (c) 2014-2019 [Agriya](https://www.agriya.com/).

Dual License (OSL 3.0 & [Commercial License](https://www.agriya.com/contact))
",62,62,20,1,real-estate-platform,"[accommodation-booking, airbnb, airbnb-clone, booking, hotel-booking, mysql, real-estate-platform, real-estate-rental, realestate, self-hosted, vacation-rental]",0
rkvyas98,My-Real-Estate-Project,,https://github.com/rkvyas98/My-Real-Estate-Project,https://api.github.com/repos/My-Real-Estate-Project/rkvyas98,My Real Estate Project is a Price predicting Machine learning model implemented using the Regression approach in Python.,,0,0,1,0,real-estate,"[machine-learning, python, real-estate, regression, supervised-learning]",0
jpmoura,vira-lata-caramelo,,https://github.com/jpmoura/vira-lata-caramelo,https://api.github.com/repos/vira-lata-caramelo/jpmoura,Desktop app to monitor multiple Brazilian Real Estate websites based on search parameters,"# Vira-lata Caramelo üêï

[![CI Workflow](https://github.com/jpmoura/vira-lata-caramelo/actions/workflows/ci.yml/badge.svg)](https://github.com/jpmoura/vira-lata-caramelo/actions/workflows/ci.yml)
[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=jpmoura_vira-lata-caramelo&metric=bugs)](https://sonarcloud.io/dashboard?id=jpmoura_vira-lata-caramelo)
[![Code Smells](https://sonarcloud.io/api/project_badges/measure?project=jpmoura_vira-lata-caramelo&metric=code_smells)](https://sonarcloud.io/dashboard?id=jpmoura_vira-lata-caramelo)
[![Duplicated Lines (%)](https://sonarcloud.io/api/project_badges/measure?project=jpmoura_vira-lata-caramelo&metric=duplicated_lines_density)](https://sonarcloud.io/dashboard?id=jpmoura_vira-lata-caramelo)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=jpmoura_vira-lata-caramelo&metric=coverage)](https://sonarcloud.io/dashboard?id=jpmoura_vira-lata-caramelo)

‚ö† To read this in english, please click [here](./README.en.md).

Vira-lata Caramelo √© uma aplica√ß√£o desktop que verifica periodicamente sites
de aluguel de im√≥veis de acordo com 3 par√¢metros de busca, sendo eles:

1. Custo m√°ximo do aluguel (aluguel + IPTU + seguro inc√™ndio + outros custos)
2. Quantidade de quartos
3. √Årea da cidade

![Overview do app](./app.gif)

A motiva√ß√£o para a cria√ß√£o dessa solu√ß√£o foi facilitar a minha vida em momentos que quero mudar de cidade/im√≥vel,
j√° que a pesquisa pode ser muito cansativa, logo, ter uma aplica√ß√£o que fa√ßa o trabalho de buscar e responder r√°pido
a novos im√≥veis anunciados √© de grande ajuda, principalmente para quem n√£o tem muito tempo durante o dia para ficar
pesquisando.

Outro motivo foi a demora que √© para o
[Homes](https://help.quintoandar.com.br/hc/pt-br/articles/360023947132-O-que-%C3%A9-o-Homes-) trazer novos
an√∫ncios e, em homenagem ao mascote nacional e como uma refer√™ncia ao Homes, veio o nome de Vira-lata Caramelo.

Essa aplica√ß√£o foi constru√≠da usando tecnologias/ferramentas como [Electron](https://www.electronjs.org/),
[React](https://reactjs.org/) e [TypeScript](https://www.typescriptlang.org/).

Nesse momento a busca √© feita somente para **aluguel** de im√≥veis e usando o
[Quinto Andar](https://www.quintoandar.com.br/) como provedor da busca.

‚ö† O [Quinto Andar](https://www.quintoandar.com.br/) n√£o patrocina esse projeto ~~infelizmente~~.

# Build üõ†

Para construir uma distribui√ß√£o da aplica√ß√£o, basta executar o comando `yarn package` ou o comando `yarn make`.

O primeiro gera uma vers√£o execut√°vel da aplica√ß√£o pronta para produ√ß√£o e o segundo faz a mesma coisa, por√©m j√°
empacotando-a, facilitando a distribui√ß√£o.

# Run üèÉ‚Äç‚ôÇÔ∏è

Para rodar a aplica√ß√£o localmente pasta executar o comando `yarn start` depois de instalar os pacotes atrav√©s do
comando `yarn`, ambos os comandos sendo executados na raiz do projeto.

# TODO üìù

* Testes automatizados integrados ao CI
* Customiza√ß√£o da periodicidade da busca por novos im√≥veis
* Adi√ß√£o de novos provedores (_e.g._ Casa Mineira, Zap Im√≥veis, OLX, etc.)
* Cria√ß√£o do pipeline de _delivery_
* Adi√ß√£o de mais op√ß√µes ao filtro de busca (_e.g._ quantidade de banheiros, quantidade de garagens)
* Adi√ß√£o de busca por im√≥veis a venda
* Lista de favoritos
* Feedback visual de an√∫ncios j√° visualizados
* Lista de ignorados
",0,0,1,2,real-estate,"[desktop, electron, lease, monitoring-tool, quinto-andar, react, real-estate, search, typescript]",0
iRaySpace,facility_management,,https://github.com/iRaySpace/facility_management,https://api.github.com/repos/facility_management/iRaySpace,Facility Management for ERPNext,"## Facility Management

ERPNext app for managing facilities

#### License

MIT",23,23,6,0,property-management,"[facility-management, property-management]",0
Licceeee,real-estate-manager-django,,https://github.com/Licceeee/real-estate-manager-django,https://api.github.com/repos/real-estate-manager-django/Licceeee,Real Estate Manager,"# real-estate-manager-django
Real estate manager

clone & cd

```git clone https://github.com/Licceeee/real-estate-manager-django.git && cd real-estate-manager-django```

create venv

```virtualenv -p python3 venv```

activate venv

```source venv/bin/activate```

install dependencies

```pip install -r req.txt```

migrate db

```python3 manage.py makemigrations```

```python3 manage.py migrate```


apply static files

```python3 manage.py collectstatic```

create superuser

```python3 manage.py createsuperuser```

start

```python3 manage.py runserver```

hit 
localhost:port/admin to enter the admin panel with credentials created 
with createsuperuser

e.g with standard port
```localhost:8000/admin```

----

production settings

rename project/project/production_settings.example.py to production_settings.py

replace placeholders with your credentials
",0,0,1,0,real-estate,"[estate, manager, real, real-estate]",0
pasindu651,Real-Estate-Data-Analyzer,,https://github.com/pasindu651/Real-Estate-Data-Analyzer,https://api.github.com/repos/Real-Estate-Data-Analyzer/pasindu651,üè†A Python Streamlit app that provides comprehensive data analysis of real estate data of a given location,"# Real Estate Data Analyzer + Scraper
A streamlit app built with Python that scrapes real estate data of a given location and graphs the data using a linear regression model. 

## Tools Used
üö©Streamlit was used for the front-end.<br />
üö©Selenium was used to handle dynamic web elements and passed to a Beautiful Soup object.<br />
üö©Beautiful soup was used to scrape listing information from Selenium HTML.<br />
üö©Pandas was used for data analysis and manipulation.<br />
üö©Plotly, in combination with Streamlit was used for graphing and interactive data visualization.<br />
üö©Sklearn was used for linear regression and data testing and training.<br />
<img alt=""Diagram of process"" width=""730"" src=""https://i.ibb.co/z6TssC2/web-scraping-about.png"">

## Prerequisites
```$ pip install requirements.txt```<br>
To run locally:
```$ streamlit run 1_üèòÔ∏èHome.py```

<figure>
<img src=""https://i.ibb.co/WPsPm4R/newplot-2.png"" alt=""Sample output graph"" style=""width:730"">
  <figcaption align = ""center""><b>Scatter plot output for <b>area vs price</b> of <b>land</b> in <b>Toronto, Ontario</b>.</figcaption>
</figure>

<figure>
<img src=""https://i.ibb.co/z5pxfQh/newplot.png"" alt=""Sample output linear regression"" style=""width:730"">
  <figcaption align = ""center"">Linear regression output for <b>houses</b> in <b>Toronto, Ontario</b>.</figcaption>
</figure>





",0,0,2,0,real-estate,"[beautifulsoup4, linear-regression, python-ai, real-estate, real-estate-dataset, selenium, web-scraping]",0
DRJTechnology,PropertyPortfolioManager,,https://github.com/DRJTechnology/PropertyPortfolioManager,https://api.github.com/repos/PropertyPortfolioManager/DRJTechnology,A website for managing a number of rental properties.,,0,0,1,5,property-management,"[landlord, property-management]",0
codewithsadee,homeverse,,https://github.com/codewithsadee/homeverse,https://api.github.com/repos/homeverse/codewithsadee,Homeverse is fully responsive Real estate website,"<div align=""center"">
  
  ![GitHub repo size](https://img.shields.io/github/repo-size/codewithsadee/homeverse)
  ![GitHub stars](https://img.shields.io/github/stars/codewithsadee/homeverse?style=social)
  ![GitHub forks](https://img.shields.io/github/forks/codewithsadee/homeverse?style=social)
[![Twitter Follow](https://img.shields.io/twitter/follow/codewithsadee_?style=social)](https://twitter.com/intent/follow?screen_name=codewithsadee_)
  [![YouTube Video Views](https://img.shields.io/youtube/views/6HZ4nZmU_pE?style=social)](https://youtu.be/6HZ4nZmU_pE)

  <br />
  <br />
  
  <img src=""./readme-images/project-logo.png"" />

  <h2 align=""center"">Homeverse - Real estate website</h2>

  Homeverse is fully responsive Real estate website, <br />Responsive for all devices, built using HTML, CSS, and JavaScript.

  <a href=""https://codewithsadee.github.io/homeverse/""><strong>‚û• Live Demo</strong></a>

</div>

<br />

### Demo Screeshots

![homeverse Desktop Demo](./readme-images/desktop.png ""Desktop Demo"")
![homeverse Mobile Demo](./readme-images/mobile.png ""Mobile Demo"")

### Prerequisites

Before you begin, ensure you have met the following requirements:

* [Git](https://git-scm.com/downloads ""Download Git"") must be installed on your operating system.

### Run Locally

To run **Homeverse** locally, run this command on your git bash:

Linux and macOS:

```bash
sudo git clone https://github.com/codewithsadee/homeverse.git
```

Windows:

```bash
git clone https://github.com/codewithsadee/homeverse.git
```

### Contact

If you want to contact with me you can reach me at [Twitter](https://www.twitter.com/codewithsadee).

### License

This project is **free to use** and does not contains any license.
",98,98,4,0,real-estate-website,"[real-estate-website, responsive-website]",0
dani24sahu,Real-Estate-TailwindCSS,,https://github.com/dani24sahu/Real-Estate-TailwindCSS,https://api.github.com/repos/Real-Estate-TailwindCSS/dani24sahu,"Completely responsive, Single page static Real Estate website, made with Tailwind CSS",,2,2,1,0,real-estate-website,"[javascript, real-estate-website, tailwind-css]",0
sandysanthosh,flyover-builders,,https://github.com/sandysanthosh/flyover-builders,https://api.github.com/repos/flyover-builders/sandysanthosh,Easy Free Real Website,"# flyover-builders
Easy Free Real Website

Website Images:

![projets](https://user-images.githubusercontent.com/11579239/71775651-4530e700-2faa-11ea-805e-06e141e0153d.JPG)




![2](https://user-images.githubusercontent.com/11579239/71775677-f59eeb00-2faa-11ea-8005-55eae8f429b3.JPG)

",0,0,2,0,real-estate,"[real-estate, website]",0
kowama,BT-real-estate,,https://github.com/kowama/BT-real-estate,https://api.github.com/repos/BT-real-estate/kowama,real estate management application with django and postgresql,"# BT-real-estate
real estate management application with django and PostgreSql
",0,0,1,0,real-estate,"[django, postgresql, python, real-estate]",0
JeevanJoshi4434,real-estate-reactjs-tailwindcss,,https://github.com/JeevanJoshi4434/real-estate-reactjs-tailwindcss,https://api.github.com/repos/real-estate-reactjs-tailwindcss/JeevanJoshi4434,"Welcome to our cutting-edge Real Estate Frontend Project, specially crafted for Private Engineering and IIT, NIT, MIT students! This innovative web application showcases the perfect amalgamation of ReactJs and Tailwind-CSS, providing an unparalleled user experience for exploring the world of real estate.","# ReactJs & Tailwind-CSS Real Estate Frontend Project

# Description:
Welcome to our cutting-edge Real Estate Frontend Project, specially crafted for Private Engineering and IIT, NIT, MIT students! This innovative web application showcases the perfect amalgamation of ReactJs and Tailwind-CSS, providing an unparalleled user experience for exploring the world of real estate.

# Overview:
Our Real Estate Frontend Project is designed to cater to the modern needs of the real estate industry while catering to the technological aspirations of students. As a frontend-focused project, it serves as an ideal platform for students to hone their ReactJs and Tailwind-CSS skills while delving into the intricacies of real estate management.

# Key Features:
1. Intuitive User Interface: The frontend boasts a sleek and intuitive user interface, ensuring that users have a seamless and engaging experience when browsing through properties.

2. Responsive Design: With a mobile-first approach, the project is fully responsive, adapting to various screen sizes and devices without compromising on visual appeal or functionality.

3. Property Listings: Students can learn the art of data representation by displaying real estate properties with all essential details like property images, descriptions, location, amenities, and pricing.

4. Interactive Map Integration: The project incorporates interactive maps to give users a visual understanding of the property's location and nearby amenities, enriching their browsing experience.

5. Search and Filter Options: Empowering users with efficient property searches, the project implements advanced filtering options based on property type, location, price range, and more.

6. Property Comparison: Students can showcase their frontend development skills by incorporating a property comparison feature, allowing users to compare essential aspects of multiple properties side by side.

7. Contact and Inquiry Forms: Implementing dynamic contact and inquiry forms, the project facilitates user interactions with real estate agents or property owners, providing a realistic touch.

8. Performance Optimization: Students can learn optimization techniques to ensure smooth performance, quick loading times, and overall user satisfaction.

9. Eye-catching Animations: Leveraging Tailwind-CSS, the frontend incorporates subtle animations and transitions that enhance the overall visual appeal without compromising on speed.

10. Accessibility and SEO-Friendly: The frontend adheres to accessibility guidelines and implements SEO best practices, providing a comprehensive learning experience for web development students.

This Real Estate Frontend Project is a perfect opportunity for Private Engineering and IIT, NIT, MIT students to showcase their creativity, talent, and expertise in ReactJs and Tailwind-CSS while gaining hands-on experience in real-world frontend development scenarios. With its appealing design and advanced features, the project promises to be an enriching and rewarding experience for students interested in both web development and the real estate domain.
",0,0,1,1,real-estate-website,"[netlify, reactjs, real-estate-website, tailwind-css]",0
Charlie5DH,real-state-nextjs,,https://github.com/Charlie5DH/real-state-nextjs,https://api.github.com/repos/real-state-nextjs/Charlie5DH,Real estate application using Bayu from Rapid API,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
",0,0,1,0,real-estate,"[javascript, nextjs, rapidapi, reactjs, real-estate]",0
shivams10,Property,,https://github.com/shivams10/Property,https://api.github.com/repos/Property/shivams10,GharDekho a web application that helps user to find home to buy or take on rent.,"# GharDekho

> A website that helps user tofind homes to buy or to take on rent.

## Description

- The site has 4 pages:-

1. The Home Page.
2. The search page.
3. Home Description Page.
4. Properties based on rent.
5. Properties based on sale.

## Technology used

1. **Next Js** : React Js framework.
2. **Chakra UI** : A UI library.
3. **Libraries** : millify, framer-motion, react-icons, react-horizontal-scrolling-menu, nprogress.
4. **Other Tools** : Prettier, Eslint, GIt / Github.

## Start project using: npm run dev
![Screenshot 2023-02-02 at 5 40 20 PM](https://user-images.githubusercontent.com/114575564/216323760-9fbc3b38-e4b3-4391-a094-06bb526ba959.png)
![Screenshot 2023-02-02 at 5 40 37 PM](https://user-images.githubusercontent.com/114575564/216323792-db09a5e4-1f5b-4a40-9530-b199c7d064c5.png)
![Screenshot 2023-02-02 at 5 40 39 PM](https://user-images.githubusercontent.com/114575564/216323800-6fefda66-5460-457a-a741-c7ce9d485034.png)
![Screenshot 2023-02-02 at 5 40 51 PM](https://user-images.githubusercontent.com/114575564/216323808-8bc1d134-83bb-41b0-bb21-4db8db90b814.png)
![Screenshot 2023-02-02 at 5 41 24 PM](https://user-images.githubusercontent.com/114575564/216323818-c1214663-1105-438f-8e5a-eacb1bf6b918.png)
![Screenshot 2023-02-02 at 5 42 46 PM](https://user-images.githubusercontent.com/114575564/216323826-777429a9-dcc6-4dfd-885d-a1a26f6eb06d.png)
![Screenshot 2023-02-02 at 5 42 56 PM](https://user-images.githubusercontent.com/114575564/216323836-4b2afda5-d72e-467d-9743-986b0882b652.png)
",6,6,1,1,real-estate-website,"[chakra-ui, nextjs, property-search, rapidapi, reactjs, real-estate-website]",0
omar-oahmad,realestate_analysis,,https://github.com/omar-oahmad/realestate_analysis,https://api.github.com/repos/realestate_analysis/omar-oahmad,Data-based Analysis of Real Estate Market in Pakistan (KLI) ,"# Analysis of real estate data
<h2>Data Analysis of Real Estate Market in Pakistan (KLI) using Python and PowerBI </h2>
</br> Performed in-depth data analysis on data of a real estate market covering a population of 40 million residents, and presented as a PowerBI dashboard.
</br> Intended to help visualize trends in different areas of the real estate market to enable more informed buy/sell decisions by studying market movements.
",0,0,1,0,real-estate,"[data-analysis, powerbi, python, real-estate]",0
derodz,ml-shorttermrentals,,https://github.com/derodz/ml-shorttermrentals,https://api.github.com/repos/ml-shorttermrentals/derodz,Machine Learning project to predict daily rental rates based on downloads of short term rental data from All the Rooms,"# Machine Learning - Short Term Rental Rates

This project demonstrates the creation and use of a machine learning model for predicting the expected daily rate of short term rentals in a single zip code. The daily rate prediction is valid only for the month you input as part of your query (e.g. December might have lower prices than June). The model was built with Python, SKlearn, and CSV data from the website, AllTheRooms.com. This type of model might be used often for price recommendation algorithms in websites like AirBnB.

The model has an R2 and R2 adjusted score of 70% with an RMSE of 44. That means the model is pretty good at predicting the ""right"" daily rate for a rental based on the features of the property in question.

To simply use the model, you can download the pickle file and integrate it into your code (remember it was trained for my area only and may not accurately predict prices for your area). You can also download the Jupyter notebook and modify it for your own data.

Note that I did not upload the source data. AllTheRooms.com requires a subscription to download their data and therefore the legality of uploading the source data from this project is questionable. 
",0,0,1,0,real-estate,"[data-science, feature-engineering, jupyter-notebook, linear-regression, machine-learning, python, real-estate, real-estate-rental, short-term-rental, sklearn, supervised-learning]",0
johan-akerman,Homerun,,https://github.com/johan-akerman/Homerun,https://api.github.com/repos/Homerun/johan-akerman,üìä data visualization tool for the real estate market,"# Homerun üè†

A data visualization tool that helps you compare apartments and make a data-driven ""homerun"" on your next purchase.<br />

<strong>Try Homerun here:</strong> https://johan-akerman.github.io/Homerun
<br />

<img src=""/src/images/ReadMe/preview.gif"" alt=""gif""
	title=""Gif"" width=""800"" /> <br /><br/>
	
## ‚öôÔ∏è Technologies used

React JS, Material UI and Chart JS. 

## üìñ Story behind the project

When my brother was going to buy his first apartment he got frusterated about how the prices increased tremendously once the bidding process started. He found it difficult to predict what the final price would become for different types of apartments that he was interested in. His frusteration got me interested in what apartment I could buy for X SEK and which factors I should take into consideration (such as time of the year, broker etc) when buying an apartment. 

I could not find any free dataset to fetch Stockholm's real estate data from so my friend Hannes coded a [web scraper](https://github.com/hannesbrinklert/Hemnet-web-scraping) that scrapes the data from Hemnet, Sweden's largest real estate marketplace. 

## üì∏ Screenshots


<img src=""/src/images/ReadMe/2.png"" alt=""Logo""
	title=""Desktop preview"" width=""800"" />
	
<img src=""/src/images/ReadMe/3.png"" alt=""Logo""
	title=""Desktop preview"" width=""800"" />

<img src=""/src/images/ReadMe/6.png"" alt=""Logo""
	title=""Desktop preview"" width=""800"" />
",0,0,1,0,real-estate,"[data-visualization, material-ui, react, real-estate, web-scraping]",0
muabannhadatdongnai,muabannhadat.github.io,,https://github.com/muabannhadatdongnai/muabannhadat.github.io,https://api.github.com/repos/muabannhadat.github.io/muabannhadatdongnai,Mua b√°n nh√† ƒë·∫•t ƒê·ªìng nai gi√° r·∫ª ‚úÖ Li√™n h·ªá ch·ªß nh√† ho·∫∑c m√¥i gi·ªõi uy t√≠n ƒë·ªÉ t√¨m ho·∫∑c b√°n nh√† ƒë·∫•t . Xem th√¥ng tin mua b√°n nh√† ƒë·∫•t v√† nh·∫≠n t∆∞ v·∫•n mi·ªÖn ph√≠,"# nhadat
Mua b√°n nh√† ƒë·∫•t ƒê·ªìng nai gi√° r·∫ª ‚úÖ Li√™n h·ªá ch·ªß nh√† ho·∫∑c m√¥i gi·ªõi uy t√≠n ƒë·ªÉ t√¨m ho·∫∑c b√°n nh√† ƒë·∫•t . Xem th√¥ng tin mua b√°n nh√† ƒë·∫•t v√† nh·∫≠n t∆∞ v·∫•n mi·ªÖn ph√≠
",0,0,1,0,real-estate,[real-estate],0
ImDP,Nexter,,https://github.com/ImDP/Nexter,https://api.github.com/repos/Nexter/ImDP,"Nexter -- worldwide real estate broker.  CSS project with Grid, Flexbox and Sass.",,0,0,2,0,real-estate-website,"[bootstrap, html-css, real-estate-website, realestate, sass, template]",0
ScottOnestak,Allegheny_Tax_Map,,https://github.com/ScottOnestak/Allegheny_Tax_Map,https://api.github.com/repos/Allegheny_Tax_Map/ScottOnestak,Scrape data to visualize Allegheny County local and property tax by municipality,"Updated: August 29, 2023

This is a map for estimated tax rates of municipalities in Allegheny County for the current tax year currently underway.  The current CLR for 2023 is being applied in the estimation.  The estimates do not factor in land taxes a few municipalities have or discounts from actions like early payment or homestead exemptions as this data is not easily accessable. 

Results with a write-up can be found on my [website](https://scottonestak.github.io/Projects/Allegheny_Tax_Map/Allegheny_Tax_Map.html).



Tableau maps can be found at the following locations.

[Local Income Tax Rates](https://public.tableau.com/app/profile/scott.onestak/viz/AlleghenyLocalIncomeTaxRates/AlleghenyLocalIncomeTaxRates)

[Property Tax Rates](https://public.tableau.com/app/profile/scott.onestak/viz/AlleghenyPropertyTaxRates/AlleghenyPropertyTaxRates)

[Allegheny Local + Property Tax Estimator](https://public.tableau.com/app/profile/scott.onestak/viz/AlleghenyLocalPropertyTaxEstimate/AlleghenyLocalPropertyTaxEstimate)

",0,0,1,0,real-estate,"[allegheny, pittsburgh, property-taxes, real-estate, taxes]",0
diveshthapa,first-mern-app,,https://github.com/diveshthapa/first-mern-app,https://api.github.com/repos/first-mern-app/diveshthapa,"This project have all for beginner MERN project build with React, Node.js, Express and Mongodb platform.","# First MERN App - Real Estate 

This project has all for beginner MERN project build with React, Node.js, Express and Mongodb platform.


## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.
",0,0,1,0,real-estate,"[mern, real-estate]",0
quellatalo,PropertiesManager,,https://github.com/quellatalo/PropertiesManager,https://api.github.com/repos/PropertiesManager/quellatalo,This PropertiesManager library makes it easy to handle Java-like config/properties files. It also supports maintaining layouts and comments.,"# PropertiesManager

This PropertiesManager library provides methods to handle Java-like config/properties files. It also supports maintaining layouts and comments.

_This library was built and tested on .NET Framework 2.0._

### Installation

The package is available on Nuget: [Quellatalo.Nin.PropertiesManager](https://www.nuget.org/packages/Quellatalo.Nin.PropertiesManager/)

## Example code

```cs
public void PropManagerTest()
{
    // Creates a sample config.prop file with 1 comment line, and one property
    PropFileManager pm = new PropFileManager(""config.prop"");

    // Skipped pm.Load(); method, it means we are going to create a whole new file

    // Adds some contents
    pm.AddLineEntry(""\t# modified count"");
    pm.AddLineEntry(""\tcount = 0""); // pm[""\tcount""] = ""0""; // this works too

    // Check the contents
    Console.WriteLine(pm[0]); // print out the comment
    Console.WriteLine(pm[""count""]); // print out the property's value
    Console.WriteLine(pm.GetFullText()); // print out what will be saved to file
    pm.Save(); // Saves to file

    // ...

    string modifiedTimeKey = ""modified time"";
    PropFileManager p = new PropFileManager(""config.prop"");
    p.Load(); // Loads the existing data on the file

    // Updates the count property
    p.SetProperty(""count"", p.GetInt(""count"") + 1); // count is now 1
    // Same as:
    p[""count""] = (p.GetInt(""count"") + 1).ToString(); // count is now 2

    // Adds a new property
    if (!p.HasProperty(modifiedTimeKey)) // Checks if the property is not already exist
    {
        p.AddLineEntry(); // Adds a new empty line
        p.AddLineEntry(""##### Log #####""); // Adds a comment line
        p.AddLineEntry(); // Adds another new empty line
        p.AddLineEntry(""# Last modified""); // Adds a comment line
    }
    p.SetProperty(modifiedTimeKey, DateTime.Now); // Sets the property
    p.InsertLineEntry(); // Inserts an empty line to the beginning
    p.InsertLineEntry(4, ""##### LOG #####""); // Inserts a comment line just about the ##### Log ##### line
    p.RemoveLineEntryAt(6); // Removes the empty line after ##### Log ##### line
    p.SetLineEntry(4, ""##### LOGGING #####""); // Modifies the comment line ##### LOG #####
    Console.WriteLine(p.GetDateTime(modifiedTimeKey)); // Prints out the modified time
    p.Save(); // Saves to file
}
```


License
----

MIT


**It's free. El Psy Congroo!**
",0,0,1,0,property-management,"[configuration-file, csharp-library, property-management]",0
dannyhvalenz,Inmobiliaria,,https://github.com/dannyhvalenz/Inmobiliaria,https://api.github.com/repos/Inmobiliaria/dannyhvalenz,Sistema Web para una inmobiliaria,"# Proyecto-Inmobiliaria
 Sistema Web para una inmobiliaria

## Modelo Relacional
<p align=""center"">
  <img src=""https://github.com/dannyhvalenz/Inmobiliaria/blob/master/docs/Modelo%20Relacional.png"">
</p>

## Casos de uso

### Asesor

- [x] Iniciar Sesion
- [x] Agregar Propietario
- [x] Actualizar Propietario
- [x] Eliminar Propietario
- [x] Mostrar Propietario
- [x] Buscar Propietario por Nombre
- [x] Agregar Cliente
- [x] Actualizar Cliente
- [x] Eliminar Cliente
- [x] Mostrar Cliente
- [x] Buscar Cliente por Nombre
- [x] Agregar Inmueble
- [x] Actualizar Inmueble
- [x] Eliminar Inmueble
- [x] Mostrar Inmueble
- [x] Buscar Inmueble por Tipo

### Cliente

- [x] Filtrar Inmuebles
- [x] Mostrar Inmuebles



## Third Party Software or Frameworks

- [W3.CSS](https://www.w3schools.com/w3css/w3css_downloads.asp)
",0,0,2,0,real-estate,"[html5, javascript, perl, real-estate]",0
Ibrahim-Isah,realty-central,,https://github.com/Ibrahim-Isah/realty-central,https://api.github.com/repos/realty-central/Ibrahim-Isah,,"# Realty Central

![Realty Central Logo](public/assets/images/logo.png)

![Realty Central Logo](public/assets/images/white-logo.png)

## Overview
[Realty Central]('https://www.realtycentral.co/') is an all-in-one cloud-based platform designed to assist real estate agents and housing estates in managing their entire workflow efficiently. It leverages different features to automate repetitive tasks, enhance customer engagement, and provide valuable insights for decision-making.

## Key Features

1. **Document Management:** Realty Central allows agents to store, organize, and access essential documents securely in the cloud. These documents could include property listings, contracts, agreements, legal documents, and more. AI-powered document classification and search functionalities make it easier to find specific documents quickly.

2. **Lease Management:** The software includes a comprehensive lease management module that helps agents and housing estates track lease agreements, rental payments, and lease expirations. Automated reminders are sent to both tenants and property owners to ensure timely actions.

3. **Customer Relationship Management (CRM):** Realty Central comes with a CRM system that enables agents to manage customer information, track interactions, and maintain a history of communication. The AI-driven CRM can analyze customer preferences and behaviors to provide personalized property recommendations.

4. **Automated Emailing:** The software automates the process of sending emails to clients, notifying them about new property listings, rent reminders, and other relevant updates. AI-powered email analytics can track open rates and user engagement to optimize email campaigns.

5. **Maintenance and Reminders:** The software incorporates a maintenance scheduling system to manage property upkeep and repair tasks. AI-based predictive maintenance can anticipate potential issues and schedule preventive maintenance, reducing unexpected repair costs.

6. **Real-Time Reporting and Analytics:** Realty Central offers real-time dashboards and reports to provide insights into key performance indicators, property portfolio performance, and financial metrics. Analytics can identify patterns and trends to aid in strategic decision-making.

## Key Problems Solved

1. **Digitizing Workflows:** Realty Central eliminates the need for paper-based processes, making the entire real estate workflow more efficient and eco-friendly.

2. **Time Management:** Automation of tasks such as emailing, document management, and reminders frees up agents' time, allowing them to focus on high-value activities like building relationships with clients.

3. **Improved Customer Engagement:** The AI-driven CRM and personalized property recommendations enhance customer engagement and satisfaction, leading to increased loyalty and referrals.

4. **Reducing Errors and Overlooking:** AI algorithms can help identify potential issues or discrepancies in lease agreements and documents, reducing human errors and mitigating legal risks.

5. **Data-Driven Decisions:** Realty Central empowers agents and housing estates with data-driven insights, enabling them to make more informed decisions in pricing, property management, and marketing strategies.

6. **Increased Competitiveness:** By using AI for rent optimization and predictive maintenance, agents and housing estates can offer better services, attract more clients, and stay ahead of competitors.

## Getting Started

To run Realty Central locally, follow these steps:

1. Clone this repository to your local machine.
2. Navigate to the project directory using the terminal.
3. Run `npm install` to install the project dependencies.
4. Run `npm run dev` to start the development server.
5. Open your web browser and navigate to `http://localhost:3000` to access the application.

## Technologies Used

- Next.js 13
- React
- Clerk dev
- TailwindCss
- Shadcn
- Prisma
- PlanetScale
- Node.js
- AI-powered features for data analytics and predictions

## License

This project is licensed under the MIT License.
",0,0,1,1,real-estate,"[javascript, nextjs13, react, real-estate, typescript]",0
NJMES,IBM_BlockchainCourse__Hyperledger_EstateExchange,,https://github.com/NJMES/IBM_BlockchainCourse__Hyperledger_EstateExchange,https://api.github.com/repos/IBM_BlockchainCourse__Hyperledger_EstateExchange/NJMES,a Real-Esatate Blockchain SmartContract project written for IBM Blockchain course.,"# IBM_Blockchain_Hyperledger_EstateExchange_Project

Project Name: 
Estate Exchange (Esx)

Blockchain: 
Hyperledger

Language Written: 
Javascript

Project Type: 
Smart-Contract

Contributors to the Smart-Contract: 
JiaMing, WeeKim (https://github.com/kim-pixel).

Project Summary: 
This a smart contract project is written and completed for IBM Blockchain Course (i.am-vitalize Cybersecurity specialization track).
My team was task to provide a blockchain solution, leveraging on finding through our Enterprise Design Thinking session.
We made the decision as a team take up the challenge to improve the liquidity of real-estate assets in Singapore, through identifying the inefficiencies in the current real-estate transfer process and highlight possible improvements through blockchain (hyperledger).
Project is written leveraging on Hyperledger fabric samples(fabcar) as reference.

Project Slide Link: 
https://www.slideshare.net/JamesNeo9/estate-exchange-realestate-blockchain-slide

Personal Learning Points: 
.Areas to Improve the Project are written within the Smart-Contract as comments.
.I underestimate my ability to read and write codes using samples as reference for the project.
.Propose blockchain solution will require broader public awareness and government support for possible adoption moving forward.
.Encounter several problems while attempting to learn identity management through hyperledger tutorials. 
.undestanding identity management will provide me with sufficient knowledge to handle money management of Buyer/Seller/Bank in the real-estate transfer process in the project.
",2,2,1,0,real-estate-platform,"[blockchain, hyperledger, real-estate-platform]",0
hossamhilal,Propper,,https://github.com/hossamhilal/Propper,https://api.github.com/repos/Propper/hossamhilal,"Propper is an Real Estate Agency Landing Page contains Header ,Features ,  About , Stages , Articles , Prices , Team , Gallery , Testimonials , Sponsors  , Contact , Footer .",,0,0,2,0,real-estate,"[agency, animation, bootstrap4, css3, fancybox, gallery, html5, javascript, real-estate, template, theme, website, wordpress]",0
elinoretenorio,php-headless-crud-for-real-estate-db,,https://github.com/elinoretenorio/php-headless-crud-for-real-estate-db,https://api.github.com/repos/php-headless-crud-for-real-estate-db/elinoretenorio,PHP Headless CRUD for Real Estate database,"### Requires

* PHP >= 7.4
* MySQL or MariaDB
* Webserver - Apache or nginx
* [Composer](https://getcomposer.org/) 
* [Bash](https://www.gnu.org/software/bash/)
* [Xdebug](https://xdebug.org/) (optional, for Code Coverage) 

### Install

* Login to application""s root dir
* Edit `deploy.sh` and update paths to your `php`, `composer.phar` and `phpunit` as needed
* Run `sh deploy.sh` for dev and `sh deploy.sh prod` for prod
* Point your document root to `/public`
* Update `.env` with your database credentials
* Open `curl.sh` for API samples

### Libraries

* [Route](https://route.thephpleague.com/)
* [Container](https://container.thephpleague.com/)
* [Laminas](https://docs.laminas.dev/)
* [PHP dotenv](https://github.com/vlucas/phpdotenv)
",0,0,1,0,real-estate-management,"[crud, headless, laminas, mysql, pdo, php, phpleague, real-estate, real-estate-database, real-estate-management]",0
N1k0l1n,Property-Management,,https://github.com/N1k0l1n/Property-Management,https://api.github.com/repos/Property-Management/N1k0l1n,"Property management, jpa, springboot, maven",,0,0,1,0,property-management,"[crud-application, fullstack-development, java, jpa, property-management, spring-boot, thymeleaf]",0
cakeinsauce,aruofier,,https://github.com/cakeinsauce/aruofier,https://api.github.com/repos/aruofier/cakeinsauce,,,0,0,1,0,real-estate,"[bot, notifier, parser, real-estate]",0
omrajsharma,awaas-vishwa-fe,,https://github.com/omrajsharma/awaas-vishwa-fe,https://api.github.com/repos/awaas-vishwa-fe/omrajsharma,"A property listing platform for buy, sell and renting","# Awaas-Vishwa
A property listing platform for buy, sell and renting
## How to install and run locally ?
```
$ git clone https://github.com/omrajsharma/awaas-vishwa-fe.git
$ cd awaa-vishwa-fe
$ npm install
$ npm run dev
```
## Live Link:
https://awaas-vishwa.vercel.app/
## Features :
- Property Listing
- User Registration  
- User Login
- User Profile
- Posting properties
- Post Detail
- Email integration to notify user regarding interest on their property
## Built with :
- React JS
- React Context API
- React Router v6
- Vanilla CSS
- Material UI Component Library
- Firebase Integration for Data Storage
- Express.js
- Mongodb
- vercel for frontend deployment
- render for backend deployment
## Top Contributors :
<div align=""center"">
<a href=""https://github.com/omrajsharma/awaas-vishwa-fe/graphs/contributors"">
  <img src=""https://contributors-img.web.app/image?repo=omrajsharma/awaas-vishwa-fe"" />
</a>
</div>",3,3,2,6,real-estate-website,"[reactjs, real-estate-website]",0
skills59,Island-Homes,,https://github.com/skills59/Island-Homes,https://api.github.com/repos/Island-Homes/skills59,"This Project is a real estate management web application, designed to be downloaded for the mobile and web view Clone for use, all files available including the database file.","# Island-Homes
![icon](https://user-images.githubusercontent.com/56154525/196946645-902d997e-d1ca-4828-9b2f-b2b0d43b3c4a.png)

This Project is a real estate management web application, designed to be downloaded for the mobile and web view.

This Project was built with Javascript on the front end and PHP on the backend.
all files are available including the database files


# Backend Access
once all files have been uloaded and ready to use, details to access the backend:
username: Admin
Password: Admin




Live Project can be found here http://islandhomes.ga/
",0,0,2,0,real-estate,"[javascript, php, react-router, reactjs, real-estate]",0
block-foundation,solidity-real-estate-crowdfunding,block-foundation,https://github.com/block-foundation/solidity-real-estate-crowdfunding,https://api.github.com/repos/solidity-real-estate-crowdfunding/block-foundation,Solidity Smart Contract: Real-Estate Crowdfunding,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-real-esate-crowdfunding/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-real-esate-crowdfunding)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Real-Estate Crowdfunding</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-crowdfunding/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-crowdfunding/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-crowdfunding/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-crowdfunding/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-crowdfunding/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

This project utilizes Smart Contract technology to facilitate, validate, and enforce negotiation or performance of an agreement. This automated, self-executing contract with the terms of the agreement directly written into code enables the democratization of real estate funding, rendering it more transparent, efficient, and accessible.

The Smart Contract has been designed with several features to enhance functionality and security. First, users can create a new crowdfunding campaign, specifying a goal amount to raise. Then, interested investors can contribute to the campaign while the contract keeps track of each investor's contribution and the total raised amount.

Moreover, the contract also has built-in mechanisms to safeguard the interests of both project creators and investors. For instance, if a crowdfunding campaign does not reach its funding goal by the specified deadline, the contract will automatically facilitate refunds to the investors.

This Blockchain-based Real Estate Crowdfunding solution signifies a step forward in the digital transformation of the real estate industry. It brings us one step closer to a decentralized financial landscape where anyone can participate in investment opportunities that were traditionally limited to institutions or the wealthy.

## Quick Start

> Install

``` sh
npm i
```

> Compile

``` sh
npm run compile
```

## Contract

This is a simple Ethereum smart contract for crowdfunding real estate projects. This contract allows users to create new crowdfunding campaigns and contribute to existing ones.

This contract includes:

- A `Campaign` struct, which is used to hold data about each crowdfunding campaign.
- A `campaigns` array, which is used to hold all `Campaign` instances.
- The `createCampaign` function, which allows a user to start a new campaign with a specific goal amount.
- The `createCampaign` function accepts a duration parameter in seconds, which is added to the current timestamp to set the deadline for the campaign.
- The `contribute` function, which allows a user to contribute to a specific campaign.
- The `checkContribution` function, which allows a user to check how much they have contributed to a specific campaign.
- The `withdrawFunds` function, which allows the campaign owner to withdraw the funds after the campaign goal has been reached.
- The `withdrawFunds` function checks whether the deadline has been reached before allowing the beneficiary to withdraw the funds.
- A `deadline` variable in the Campaign struct, which is used to set a deadline for the crowdfunding campaign.
- The `contribute` function now checks whether the campaign has ended before accepting any funds.
- A `refund` function, which allows donors to get their donations back if the fundraising goal wasn't met by the deadline. This function will check if the campaign has ended and whether the goal was met. It then verifies that the sender has contributed to the campaign, sets their contribution to zero, and then sends them back their original contribution.

*Please note, you need to make sure you have a reliable and secure way of validating and fulfilling the contracts in real life. Smart contracts are best used when complemented with a solid legal framework. Also, this is a simplified example and lacks many important features such as refunding donors if the goal isn't met, security features, dispute resolution mechanisms, etc.*

## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, crowdfunding, eth, ethereum, hardhat, real-estate, smart-contracts, sol, solidity]",0
imFORZA,wp-listings-pro,imFORZA,https://github.com/imFORZA/wp-listings-pro,https://api.github.com/repos/wp-listings-pro/imFORZA,WP Listings Pro,"# WP Listings Pro

[![Code Climate](https://codeclimate.com/repos/58d2c12e2b45621e4a0005b6/badges/a631a3430a5ead13bb59/gpa.svg)](https://codeclimate.com/repos/58d2c12e2b45621e4a0005b6/feed)
[![Test Coverage](https://codeclimate.com/repos/58d2c12e2b45621e4a0005b6/badges/a631a3430a5ead13bb59/coverage.svg)](https://codeclimate.com/repos/58d2c12e2b45621e4a0005b6/coverage)
[![Issue Count](https://codeclimate.com/repos/58d2c12e2b45621e4a0005b6/badges/a631a3430a5ead13bb59/issue_count.svg)](https://codeclimate.com/repos/58d2c12e2b45621e4a0005b6/feed)
[![Build Status](https://travis-ci.com/imFORZA/wp-listings-pro.svg?token=kkcazsQEFZQ5dR7MwDsz&branch=master)](https://travis-ci.com/imFORZA/wp-listings-pro)
",1,1,5,41,real-estate,"[listings, real-estate, realestate, wordpress, wp-listings]",0
block-foundation,solidity-smart-home,block-foundation,https://github.com/block-foundation/solidity-smart-home,https://api.github.com/repos/solidity-smart-home/block-foundation,Solidity Smart Contract: Smart Home,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-smart-home/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-smart-home)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Blockchain Enabled Smart Home</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-smart-home/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-smart-home/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-smart-home/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-smart-home/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-smart-home/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to the Blockchain Enabled Smart Home project, where we leverage the power of blockchain technology to bring automation, security, and efficiency to your home environment.**

## Introduction

In the era of the Internet of Things (IoT), where all devices are becoming smarter and interconnected, our homes are not left behind. The concept of smart homes has rapidly emerged, providing people with increased comfort, energy efficiency, and home security. However, the integration of blockchain in this domain is still relatively new and opens up a myriad of opportunities.

Our project aims to harness the benefits of blockchain, specifically Ethereum and Algorand platforms, to enhance the functionality and efficiency of a smart home. We employ smart contracts to automate home functions such as temperature control, light intensity regulation, and security alert systems based on external data inputs. These data inputs are provided by oracle services, which fetch real-world data and bring them onto the blockchain.

In our Ethereum-based implementation, we utilize the Solidity programming language to write smart contracts that interact with Chainlink oracles for fetching external data. These smart contracts are designed to react when certain thresholds, such as temperature or light intensity, are crossed, triggering corresponding actions like adjusting the temperature or light intensity, or sending a security alert.

In the Algorand version, we use PyTeal, a Python language binding for Algorand's smart contract language, TEAL. Due to Algorand's UTXO-based model and the stateful nature of its smart contracts, we construct a simplified version of a state machine to track variables such as temperature.

Although the idea of integrating blockchain technology into smart homes may seem complex, it brings forth numerous advantages, such as enhanced security, transparency, and automation. Through our project, we aim to provide a robust, decentralized, and secure smart home system that paves the way for the future of home automation.

## Quick Start

> Install

``` sh
npm i
```

> Compile

``` sh
npm run compile
```

## Contract

In a smart home scenario, we could imagine a smart contract that regulates and automates various functions like temperature control, light control, security etc. based on external data feeds provided by oracles. This is an oversimplified version to demonstrate the concept. In the real-world, access controls would be required for these functions to prevent anyone other than the contract owner or authorized parties from invoking these actions. Additionally, these external contract calls could fail and the smart contract should handle these failures gracefully. The oracles also need to be trusted and secure.

This example utilizes **Chainlink's Oracle** solution to retrieve external data. The three functions `checkTemperature`, `checkLightIntensity` and `checkSecurityAlert` fetches the latest data from each respective oracle feed and checks if it crosses a certain threshold. If it does, it emits an event, which can be listened to and acted upon.

For real world usage, you may want the smart contract to also have the ability to act on this information, such as by interacting with other smart contracts to automatically adjust the temperature, light intensity or alert the security company in case of a security alert.

We use three external contracts as examples: `TemperatureControlContract`, `LightControlContract` and `SecurityAlertContract`. These contracts should include the `setTemperature`, `setLightIntensity` and `setAlertStatus` methods respectively, that we could call to change the house's state.

*Note: Due to the complexity and security considerations in smart contract development, especially when oracles or any form of external data is involved, this contract should not be used as is. It's a rudimentary demonstration and actual deployment would require additional features like error handling, security precautions (like checking the source of the oracle data), efficiency optimizations, etc.*

## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |


---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,3,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, chainlink, dapp, eth, ethereum, housing, internet-of-things, iot, oracle, real-estate, smart-contract, smart-home, sol, solidity]",0
fdd4s,floorfy-dl-virtual-tour-web-viewer,,https://github.com/fdd4s/floorfy-dl-virtual-tour-web-viewer,https://api.github.com/repos/floorfy-dl-virtual-tour-web-viewer/fdd4s,Download floorfy virtual tours and self host in a web server with Pannellum,"# floorfy downloader virtual tour web viewer

## What it does

floorfy-dl downloads cubemap skybox 360 and equirectangular panos photos of floorfy houses virtual tours and selfconfigure vtour.json pannellum virtual tour web viewer to watch the floorfy virtual tour downloaded.  
Floorfy official viewer seems to be based in Pannellum code, same json variables names, so it's a easy thing.  

This project is a merge of https://github.com/fdd4s/floorfy-dl and https://github.com/mpetroff/pannellum with light modifications over both projects.

## Dependencies

php, php-curl, curl  

This code can run over Linux and Windows  

## Usage

    $ php ./floorfy-dl.php <floorfy url>  

e.g: If the url is https://floorfy.com/tour/417174 you have to run the script this way:  

    $ php ./floorfy-dl.php https://floorfy.com/tour/417174  

It will download all the skybox and equirectangular images.  
And it will configure vtour.json to play the virtual tour with vtour.html  
Host in a webserver all skybox jpg, vtour.json, html, css, svg, png and js files to play the virtual tour, in the same folder.  
Equi jpg files are not needed to play the virtual tour in the web viewer, it can be viewed with Ricoh Theta app and Panini.  
The webserver only needs basic static configuration (no php needed to play the virtual tour).  

A live demo of this script can be seen in http://openpano.rf.gd/vtour.html

## Credits

Created by fdd4s  
Send feedback and questions to fc1471789@gmail.com  
floorfy-dl.php and arrow.png are public domain https://unlicense.org/  
Rest of files are from Pannellum and it has MIT license https://github.com/mpetroff/pannellum  
",0,0,1,0,real-estate,"[360-photo, cubemap, pannellum, real-estate, virtual-tour]",0
brokalys,sls-building-linker,brokalys,https://github.com/brokalys/sls-building-linker,https://api.github.com/repos/sls-building-linker/brokalys,Serverless function for linking adverts to specific buildings,"# Serverless Building Linker

[![Build status](https://github.com/brokalys/sls-building-linker/actions/workflows/deploy.yaml/badge.svg)](https://github.com/brokalys/sls-building-linker/actions/workflows/deploy.yaml)
[![codecov](https://codecov.io/gh/brokalys/sls-building-linker/branch/master/graph/badge.svg)](https://codecov.io/gh/brokalys/sls-building-linker)
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)

Links newly created properties to specific buildings.

## Requirements

- Node
- Yarn

## Installation

```sh
yarn install
```

## Development

Run the function locally with local test data.

```sh
yarn sls invoke local -f process-vzd-queue -p src/test/process-vzd-queue.json
```

## Deployment

Prod deployment is taken care by Github Actions. Development deployments can be
done via the following command:

```sh
yarn deploy
```
",1,1,3,0,real-estate,"[node, nodejs, real-estate, serverless]",0
y-yamamoto-yworks,VasyworksSEARCH,,https://github.com/y-yamamoto-yworks/VasyworksSEARCH,https://api.github.com/repos/VasyworksSEARCH/y-yamamoto-yworks,"„ÄêË≥ÉË≤∏‰∏çÂãïÁî£ÁÆ°ÁêÜÊ•≠ËÄÖÂêë„Åë„Äë""Vasyworks Search Property Project with Django"" Vasyworks is a series title of systems for registering and publishing vacancy information in the japanese rental house management industry.",,0,0,1,0,real-estate,"[django, openstreetmap, python, real-estate, real-estate-management, realestate, rent-house, vuejs, webapp]",0
block-foundation,profiles,block-foundation,https://github.com/block-foundation/profiles,https://api.github.com/repos/profiles/block-foundation,Official Block Foundation Accounts,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/profiles/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/profiles)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Profiles</h1>
    <h3 align=""left"">Block Foundation Account Profiles</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/profiles/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/profiles/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/profiles/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/profiles/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/profiles/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to the Block Foundation's Digital Ecosystem**

## Introduction

As a dynamic and innovative organization, we understand the value of maintaining an active and engaging presence across various digital platforms. This is not only to ensure our visibility but also to promote open dialogue, foster community interaction, and drive forward our mission to revolutionize architecture through blockchain technology.

Our internet profiles and social media accounts serve as a bridge between the Block Foundation and our global community. They are platforms where we share the latest updates, upcoming projects, groundbreaking research, thought leadership, and opportunities to participate in our endeavors.

This overview page offers a comprehensive guide to the Block Foundation's social media and internet profiles, providing you with the means to stay connected with us. Whether you're interested in our work, seeking resources, or want to join our community, you'll find the relevant platforms and how to engage with us here.

Through our various digital profiles, we continuously strive to spark discussion, share our insights, and engage with ideas that can redefine the intersection of architecture and blockchain technology.

Remember, your interaction is what breathes life into our community. Whether it's by responding to our posts, sharing our content, or participating in discussions, your voice contributes to the diversity and richness of the Block Foundation's collective conversation.

## Overview

This comprehensive guide offers an overview of our digital profiles spanning social media, design, development, research, business, and funding platforms. Each of these profiles represents an aspect of our multifaceted organization, providing unique avenues for you to engage with us and our work.

For your convenience, we've categorized and provided the status of our presence on each platform. An active status signifies our ongoing engagement, while an inactive status implies a more limited interaction. We invite you to explore these platforms, follow our updates, share our content, and contribute to our vibrant discussions.

| Account               | Type            | Active      | URL       |
| --------------------- | --------------- | ----------- | --------- |
| **500px**             | `Media`         | `No`        | [500px.com/p/blockfoundation](https://www.500px.com/p/blockfoundation) |
| **AngelList**         | `Business`      | `No`        | [angel.co/block-foundation](https://angel.co/block-foundation) |
| **Archello**          | `Design`        | `No`        | [archello.com/brand/block-foundation](https://archello.com/brand/block-foundation) |
| **Archinect**         | `Design`        | `No`        | [archinect.com/block](https://archinect.com/block) |
| **Crunchbase**        | `Business`      | `No`        | [crunchbase.com/organization/block-foundation](https://www.crunchbase.com/organization/block-foundation) |
| **Docker**            | `Development`   | `Yes`       | [hub.docker.com/orgs/blockfoundation](https://hub.docker.com/orgs/blockfoundation) |
| **Facebook**          | `Social`        | `No`        | [facebook.com/blockfoundation.io](https://www.facebook.com/blockfoundation.io) |
| **Figma**             | `Design`        | `No`        | [figma.com/@blockfoundation](https://www.figma.com/@blockfoundation) |
| **GitHub**            | `Development`   | `Yes`       | [github.com/blockfoundation](https://www.github.com/blockfoundation) |
| **GitLab**            | `Development`   | `No`        | [gitlab.com/block-foundation](https://www.gitlab.com/block-foundation) |
| **Gravatar**          | `Social`        | `Yes`       | [en.gravatar.com/blockfound](https://en.gravatar.com/blockfound)      |
| **Instagram**         | `Social`        | `Yes`       | [instagram.com/block.foundation](https://instagram.com/block.foundation) |
| **Issuu**             | `Researc`       | `No`        | [issuu.com/blockfoundation](https://www.issuu.com/blockfoundation) |
| **Ko-fi**              | `Funding`       | `No`        | [ko-fi.com/blockfoundation](https://www.ko-fi.com/blockfoundation) |
| **LinkedIn**          | `Social`        | `Yes`       | [linkedin.com/company/block-foundation](https://www.linkedin.com/company/block-foundation) |
| **NPM**               | `Development`   | `Yes`       | [npmjs.com/org/blockfoundation](https://www.npmjs.com/org/blockfoundation) |
| **Open Collective**   | `Funding`       | `Yes`       | [opencollective.com/block](https://opencollective.com/block) |
| **Patreon**           | `Funding`       | `No`        | [patreon.com/blockfoundation](https://www.patreon.com/blockfoundation) |
| **Pinterest**         | `Social`        | `No`        | [pinterest.com/blockfoundation](https://www.pinterest.com/blockfoundation) |
| **PyPi**              | `Development`   | `Yes`       | [pypi.org/user/block](https://pypi.org/user/block) |
| **Spotify**           | `Media`         | `No`        | [open.spotify.com/user/31p6wit6pwratnwob6tzjd2os56e](https://open.spotify.com/user/31p6wit6pwratnwob6tzjd2os56e) |
| **Substack**          | `Development`   | `No`        | [blockfoundation.substack.com](https://blockfoundation.substack.com) |
| **Telegram**          | `Social`        | `No`        | [t.me/blockfoundation](https://t.me/blockfoundation) |
| **Twitch**            | `Media`         | `No`        | [twitch.tv/blockfoundation](https://www.twitch.tv/blockfoundation) |
| **Twitter**           | `Social`        | `No`        | [twitter.com/block_found](https://twitter.com/block_found) |
| **Vimeo**             | `Media`         | `No`        | [vimeo.com/blockfoundation](https://www.vimeo.com/blockfoundation) |
| **YouTube**           | `Media`         | `No`        | [youtube.com/@blockfoundation](https://www.youtube.com/@blockfoundation) |
| **Zotero**            | `Research`      | `Yes`       | [zotero.org/groups/block](https://www.zotero.org/groups/block) |


<!-- ## Upcoming Events

Stay updated on our future activities, webinars, workshops, and meetups related to blockchain and architecture. Connect, learn, and engage with industry experts and enthusiasts.

| Event  | Date      | Platform | Link |
| ------ | --------- | -------- | ---- |
| [Blockchain in Architecture Webinar](#) | 15th August 2023 | Zoom | [Register Here](#) |
| [Workshop on Blockchain Technology](#) | 22nd September 2023 | Teams | [Sign Up](#) |

*Note: The dates and platforms might be subject to change. Follow our social media profiles for the latest updates.*

---

## Press Room

Catch up with the latest news, press releases, and media coverage about the Block Foundation. Learn about our work, achievements, partnerships, and more.

- **July 2023**: [Block Foundation partners with XYZ for Sustainable Architecture](#)
- **June 2023**: [Block Foundation wins Innovation Award at Global Blockchain Summit](#)

---

## Careers at Block Foundation

Interested in joining our mission to revolutionize architecture through blockchain technology? Check out our current job openings and become part of a dynamic, innovative team.

| Position | Department | Location | Application Link |
| -------- | ---------- | -------- | ---------------- |
| Blockchain Developer | IT | Remote | [Apply Now](#) |
| Content Creator | Marketing | Amsterdam | [Apply Now](#) |

---

## Newsletter

Subscribe to our monthly newsletter for insights, trends, and the latest updates from the world of blockchain and architecture. Stay in the loop with our initiatives, events, and breakthroughs.

[Subscribe to our Newsletter](#)

---

## Frequently Asked Questions (FAQs)

Have questions about Block Foundation or blockchain in architecture? Check out our FAQs for quick answers.

1. **What is Block Foundation?**  
   Block Foundation is an innovative organization that aims to revolutionize architecture through blockchain technology.

2. **How can I get involved with Block Foundation?**  
   You can follow us on our social media platforms, participate in our events, or even apply for job openings if you wish to join our team.

For more detailed information, visit our [FAQ page](#). -->




<!-- ## Contact

```topojson
{
  ""type"": ""Topology"",
  ""transform"": {
    ""scale"": [0.0005000500050005, 0.00010001000100010001],
    ""translate"": [100, 0]
  },
  ""objects"": {
    ""example"": {
      ""type"": ""GeometryCollection"",
      ""geometries"": [
        {
          ""type"": ""Point"",
          ""properties"": {""prop0"": ""value0""},
          ""coordinates"": [4.8659359154421145, 52.378988725132466]          
        }
      ]
    }
  }
}
``` -->





<!-- 

---

## Our Team

Get to know the dynamic and diverse minds behind the Block Foundation. Our team comprises experts from the fields of architecture, blockchain technology, design, research, and more. 

- **John Doe**: Co-founder and Chief Technology Officer
- **Jane Smith**: Co-founder and Lead Architect
- **Alex Kim**: Head of Research

For a complete list of our team members and their profiles, visit our [Team page](#).

---

## Volunteer and Internship Opportunities

Are you a student or professional looking to contribute to the exciting intersection of blockchain technology and architecture? Check out our volunteering and internship opportunities to gain valuable experience and make a difference.

- **Blockchain Technology Intern**: [Apply Now](#)
- **Architectural Design Volunteer**: [Apply Now](#)

---

## Resources

Dive deeper into the world of blockchain in architecture with our curated resources. From research papers to informative blog posts, explore the transformative potential of this technology.

- [Whitepaper: Blockchain for Sustainable Architectural Design](#)
- [Blog: Understanding Smart Contracts in Architecture](#)

---

## Partnerships and Collaborations

We believe in the power of collaboration. Block Foundation partners with organizations, institutions, and businesses that share our vision of integrating blockchain technology with architecture. Interested in partnering with us? Get in touch [here](#).

- **XYZ Corporation**: Strategic Partner
- **ABC University**: Academic Partner

---

## Community

Become part of our growing community on Discord. It's a place for conversations, collaborations, questions, and sharing resources about blockchain and architecture.

[Join Our Discord Community](#)

---

## Annual Reports

Our commitment to transparency and accountability reflects in our annual reports. Take a look at our past performances, achievements, and future strategies.

- [Block Foundation Annual Report 2023](#)
- [Block Foundation Annual Report 2022](#)
  
Please note that the annual reports are in PDF format. 

---

## Testimonials

Don't just take our word for it. Here's what others have to say about Block Foundation.

> ""Block Foundation's work is groundbreaking. They are truly revolutionizing architecture through blockchain technology.""  
> *- Sarah, Blockchain Enthusiast*

> ""Being a part of the Block Foundation community has been incredibly rewarding. It's a vibrant space of learning and innovation.""  
> *- Mark, Architect* -->



---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[accounts, architecture, block-foundation, blockchain, blockfoundation, real-estate]",0
alissongranemann,real-estate-scrapper,,https://github.com/alissongranemann/real-estate-scrapper,https://api.github.com/repos/real-estate-scrapper/alissongranemann,Scrapper that collects real estate prices,"# Real Estate Scrapper

If you don't have 'pt_BR' locale installed, follow the steps:

Uncomment the line with 'pt_BR' in /etc/locale.gen
Run `sudo locale-gen && dpkg-reconfigure locales`

Now 'pt_BR' is also a valid locale.

## Local environment

First of all, you need to install poetry. To do that, run

```bash
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
```

To get started you need Poetry's bin directory (\$HOME/.poetry/bin) in your `PATH`
environment variable. Next time you log in this will be done
automatically.

To configure your current shell run `source $HOME/.poetry/env`

This project uses `black` as the code formatter and `flake8` as the linter.
To add git-hooks on your enviroment, so you can run `black` and `flake8` on your project for every commit, please execute `pre-commit install`.

Also, you need to configurate the enviroment variables accordingly. Create `env` file in the project's root folder and set the variables following the `.env.example`.

## Development

In order to have the poetry packages in a local virtual environment (in the project root directory), run:

```bash
poetry install
```

To test xpaths while building the scrapper (or changing one), you can use the http://xpather.com/.

The purpose of `runner.py` file is for debug. You can run it on your IDE as a normal python file.

## Run

To run the properties spider, execute:

```bash
scrapy runspider ./olx/spiders/properties/sell.py -a state=<lowercase_state_initials>
```
",0,0,3,8,real-estate,"[olx, real-estate, scrapper, scrapy]",0
y-yamamoto-yworks,VasyworksMGR,,https://github.com/y-yamamoto-yworks/VasyworksMGR,https://api.github.com/repos/VasyworksMGR/y-yamamoto-yworks,"„ÄêË≥ÉË≤∏‰∏çÂãïÁî£ÁÆ°ÁêÜÊ•≠ËÄÖÂêë„Åë„Äë""Vasyworks Data Management Project with Django""  Vasyworks is a series title of systems for registering and publishing vacancy information in the japanese rental house management industry.",,0,0,1,0,real-estate-management,"[django, openstreetmap, python, real-estate, real-estate-management, realestate, rent-house, vuejs, webapp]",0
OpenEstate,OpenEstate-PHP-Wrapper-WordPress,OpenEstate,https://github.com/OpenEstate/OpenEstate-PHP-Wrapper-WordPress,https://api.github.com/repos/OpenEstate-PHP-Wrapper-WordPress/OpenEstate,a plugin that integrates OpenEstate-PHP-Export into your WordPress blog,"OpenEstate-PHP-Wrapper for WordPress 0.3.1
==========================================

This plugin integrates [*OpenEstate-PHP-Export*](https://github.com/OpenEstate/OpenEstate-PHP-Export) 
(in **version 1.x**) into a *WordPress* blog. You can find more information at the 
[*WordPress* plugin page](https://wordpress.org/plugins/openestate-php-wrapper/).


Description
-----------

### English

The [*OpenEstate* project](https://openestate.org) provides a freeware software - called *OpenEstate-ImmoTool* - for 
small and medium sized real estate agencies all over the world.

As one certain feature of this software, the managed properties can be exported to any website that supports *PHP*. 
Together with this plugin the exported properties can be easily integrated into a *WordPress* based website without any 
frames.

**Please notice:** This plugin version does only work with PHP exports in version 1.x!

### Deutsch

Im Rahmen des [*OpenEstate*-Projekts](https://openestate.org)) wird unter anderem eine kostenlose Immobiliensoftware 
unter dem Namen *OpenEstate-ImmoTool* entwickelt. Dies ist eine Softwarel√∂sung f√ºr kleine bis mittelgro√üe 
Immobilienunternehmen.

Unter anderem k√∂nnen die im *OpenEstate-ImmoTool* verwalteten Immobilien als *PHP*-Skripte auf die eigene Webseite 
exportiert werden. Mit Hilfe dieses Plugins kann der *PHP*-Export unkompliziert in eine auf *WordPress* basierende 
Webseite integriert werden.

**Bitte beachten:** Diese Version des Plugins kann nur mit PHP-Exporten in Version 1.x genutzt werden!


Installation
------------

### English

1.  Create a new export interface inside *OpenEstate-ImmoTool*.
2.  Select **FTP** as transport method and enter the FTP settings of your webspace. You should create a separate 
    directory on your FTP webspace, that is accessible with a web browser.
3.  Select **Website (PHP)** as export format.
4.  Execute the PHP export and the currently available properties are exported to your website.
5.  Install and activate this plugin in your *WordPress* blog.
6.  Configure the path and URL of the export folder in the plugin settings.
7.  After path and URL is correctly configured, a generator is displayed to create certain shortcodes.
8.  Put the generated shortcode anywhere inside your *WordPress* articles or pages.

### Deutsch

1.  Erzeugen Sie eine neue Export-Schnittstelle im *OpenEstate-ImmoTool*.
2.  W√§hlen Sie die Transportart **FTP** aus und tragen Sie die Verbindungsdaten des Webspaces ein. F√ºr den Export sollte 
    ein separates Verzeichnis auf dem Webspace angelegt werden, das √ºber den Web-Browser erreichbar ist.
3.  W√§hlen das Exportformat **Website (PHP)** aus.
4.  Starten Sie den PHP-Export und die aktuell vorhandenen Immobilien werden zur Webseite exportiert.
5.  Installieren und aktivieren Sie dieses Plugin in Ihrem *WordPress* Blog.
6.  Registrieren Sie Pfad und URL des Exportverzeichnisses in den Einstellungen des Plugins.
7.  Nachdem Pfad und URL korrekt konfiguriert wurden, k√∂nnen mit Hilfe eines Generators beliebige Shortcodes erzeugt 
    werden.
8.  Ein Shortcode kann an beliebiger Stelle in einem Artikel oder einer Seite von *WordPress* eingef√ºgt werden.


Frequently Asked Questions
--------------------------

### Who may need this plugin?

This plugin is focused on users of the freeware real-estate software 
[*OpenEstate-ImmoTool*](https://openestate.org/immotool).


### Where can I get help, when I have problems with this plugin?

Register an account at [OpenEstate.org](https://openestate.org/) and 
[open a ticket](https://openestate.org/support/tickets) with your question. 


Screenshots
-----------

**Setup script path & URL:**
![Screenshot](assets/screenshot-1.png?raw=true)

**Generate a shortcode for a property listing:**
![Screenshot](assets/screenshot-2.png?raw=true)

**Generate a shortcode for a property detailled view:**
![Screenshot](assets/screenshot-3.png?raw=true)

**Integrate the shortcode into your articles / pages:**
![Screenshot](assets/screenshot-4.png?raw=true)


Changelog
---------

### 0.3.1

-   minor improvements and fixes
-   reworked translation
-   switched license to GPLv2 or later
-   tested against the latest version of *WordPress* (4.9.8)

### 0.3.0

-   Bugfix: Make use of the [WordPress Shortcode API](http://codex.wordpress.org/Shortcode_API) in order to fix a 
    compatibility issue with *WordPress* 4.0.1.
-   Bugfix: Don't shutdown the whole website, if the plugin is improperly configured.
-   Bugfix: Show correct home path of the WordPress installation on the plugins admin page.
-   Bugfix: Show correct plugin version number on the plugins admin page.
-   made some syntax fixes
-   translated any source code comments into English

### 0.2.7

-   Fixed possible PHP notice message
-   Fixed session initialization

### 0.2.6

-   Write wrapped CSS into page header
-   Fixed session initialization

### 0.2.5

-   Some smaller fixes

### 0.2.4

-   Predefined filters / orderings are handled incorrectly under certain circumstances.
-   Show all available ordering-options within administration dashboard.

### 0.2.3

-   Filters are not correctly cleared, if the user switches between different property pages.

### 0.2.2

-   Show an information message, if the properties are currently updated via *OpenEstate-ImmoTool*.

### 0.2.1

-   Integration into Wordpress plugin repository

### 0.2

-   Some smaller fixes

### 0.1

-   First public release


Upgrade Notice
--------------

### 0.2.6

-   This version requires at least *OpenEstate-ImmoTool* 0.9.22 / 1.0-beta20

### 0.2

-   This version requires at least *OpenEstate-ImmoTool* 0.9.13.3


License
-------

[GNU General Public License 2](http://www.gnu.org/licenses/gpl-2.0.html) or later
",5,5,5,1,real-estate,"[openestate, real-estate, realestate, wordpress]",0
amadeobrands,ChainEstate_Chicago_Factom_Hackathon,,https://github.com/amadeobrands/ChainEstate_Chicago_Factom_Hackathon,https://api.github.com/repos/ChainEstate_Chicago_Factom_Hackathon/amadeobrands,ChainEstate offers A model to tokenize office space and create a more efficient real estate market. This concept was created for the Chicago Factom hackathon and was inspired by the Wanxiang Blockchain Hackathon in Shanghai,"<h1>Factom Blockchain Hackathon: Smart Contract</h1>

<img src=""https://raw.githubusercontent.com/amadeobrands/ChainEstate/master/art-work/chain-estate.png"">

<Strong>Team Name:</strong>
ChainEstate

<Strong>Tags:</strong>
Real Estate
Office
Leasing Contract
Smart Contract
Blockchain

<Strong>Concept:</Strong>
During the Factom Blockchain Hackatho in Chicago, we made a model to tokenize office space. Instead of expansive and insecure Agents selling office space we have build an smart contracts with embedded KYC and whitelist that will enable a more liquid real estate market. Each project/building will have it's own ERC20 token and then each floor will have its own ERC721 to separate ownership, better control of open space and easy budget management.

On top of all this we integrated an identity chain that will verify all data from the landlords and tenants and will make it reusable on multiple chains in the future. The identity data will be checked on multiple sources and can be verified on multiple places on chain and off chain.

<a href=""https://github.com/amadeobrands/ChainEstate/blob/master/art-work/Chain_Estate_v1.pdf"" target=""_blank""><h4>Check out some nice art-work :)</h4></a>

<a href=""http://chainestate.tech/"" target=""_blank""><h3>Check out our website for more information</h3></a>


",1,1,4,0,real-estate,"[blockchain, ethereum, factom, office-leasing, real-estate, realestate, smart-contracts, smartcontracts]",0
mbalcerzak,the-warsaw-project,,https://github.com/mbalcerzak/the-warsaw-project,https://api.github.com/repos/the-warsaw-project/mbalcerzak,"Website built in JavaScript & React as a ""blog"" to document an ML pipeline I built for Apartment Price Scraping project","# Valencia Apartment prices


### Data
Scraped from idealista.com using scraper set up on Raspberry Pi.
Started scraping in XXX , crawler is loading new data every day since then.

---

## Run the website locally

This project uses Node.js and python 3.

- Node.js version >= 12.13.0 or above (which can be checked by running node -v).
- Yarn version >= 1.5 (which can be checked by running yarn --version).

### Installation

To install required Node packages:

```console
yarn install
```

To install required python packages:

- The only package required is `openCC`, which can be installed via

  ```console
  pip install opencc
  ```

- Alternatively, you can install from Pipfile (with `pipenv`, **python 3.9** used):

  ```console
  pipenv install
  ```

## Build and serve

Build the website:

```console
yarn build
```

This command generates static content into the `build` directory, which usually takes a few minutes (5-10 min.).

You can then serve build locally by running:

```console
yarn serve
```

## NVM, Node.js

[installing nvm](https://tecadmin.net/install-nvm-macos-with-homebrew/)


Orange colour from undraw: #FFB21D
",0,0,2,0,real-estate,"[docusaurus, javascript, ml-pipelines, ml-production, react, real-estate]",0
OpenEstate,OpenEstate-PHP-Export,OpenEstate,https://github.com/OpenEstate/OpenEstate-PHP-Export,https://api.github.com/repos/OpenEstate-PHP-Export/OpenEstate,These scripts are used by OpenEstate-ImmoTool to publish real estates at a website.,"OpenEstate-PHP-Export 2.0-beta2
===============================

*OpenEstate-PHP-Export* is developed as a part of the freeware real estate
software [*OpenEstate-ImmoTool*](https://openestate.org/). When a user exports
his properties to his website in PHP format, these scripts are transferred to
the webspace including real estate data in the [`data`](src/data) folder.


Features
--------

-   listing view of multiple real estates
    (see [`index.php`](src/index.php))
-   detailled view of a single real estate
    (see [`expose.php`](src/expose.php))
-   visitors may manage their favored real estates
    (see [`fav.php`](src/fav.php))
-   real estate listings may be filtered by different criteria
    (see [`\OpenEstate\PhpExport\Filter`](src/include/OpenEstate/PhpExport/Filter))
-   real estate listings may be ordered by different criteria
    (see [`\OpenEstate\PhpExport\Order`](src/include/OpenEstate/PhpExport/Order))
-   a basic contact form is available
    (see [`\OpenEstate\PhpExport\Action\Contact`](src/include/OpenEstate/PhpExport/Action/Contact.php))
-   generated output is fully customizable with [themes](src/themes)
-   a lot of configuration options are available
    (see [`\OpenEstate\PhpExport\Config`](src/include/OpenEstate/PhpExport/Config.php)
    and [`config.php`](src/config.php))
-   available in multiple languages (English by default, see
    [current translation progress](https://i18n.openestate.org/projects/openestate-php-export/#languages))
-   open source modules are available for
    [*WordPress*](https://github.com/OpenEstate/OpenEstate-PHP-Wrapper-WordPress),
    [*CMS made simple*](https://github.com/OpenEstate/OpenEstate-PHP-Wrapper-CMSms),
    [*WBCE*](https://github.com/OpenEstate/OpenEstate-PHP-Wrapper-WBCE) &
    [*Joomla*](https://github.com/OpenEstate/OpenEstate-PHP-Wrapper-Joomla)


Requirements
------------

-   client side (real estate agency / website owner)
    -   [*OpenEstate-ImmoTool*](https://openestate.org/) 1.0.0 or later
-   webspace side
    -   PHP 5.6 or newer
    -   [PHP *GD* extension](https://secure.php.net/manual/en/book.image.php)
        (optional, but recommended)
    -   [PHP *mbstring* extension](https://secure.php.net/manual/en/book.mbstring.php)
        (optional)
    -   [PHP *iconv* extension](https://secure.php.net/manual/en/book.iconv.php)
        (optional)


Third party components
----------------------

The following third party components are provided by *OpenEstate-PHP-Export*:

-   [PHPMailer](https://github.com/PHPMailer/PHPMailer) v6.0.6
    (license: [LGPL 2.1](https://github.com/PHPMailer/PHPMailer/blob/master/LICENSE))
-   [Gettext](https://github.com/oscarotero/Gettext) v4.6.1
    (license: [MIT](https://github.com/oscarotero/Gettext/blob/master/LICENSE))
-   [Gettext CLDR data](https://github.com/mlocati/cldr-to-gettext-plural-rules) v2.5.0
    (license: [MIT](https://github.com/mlocati/cldr-to-gettext-plural-rules/blob/master/LICENSE))
-   [Punycode](https://github.com/true/php-punycode) v2.1.1
    (license: [MIT](https://github.com/true/php-punycode/blob/master/LICENSE))
-   [jQuery](https://jquery.com/) v3.3.1
    (license: [MIT](https://jquery.org/license/))
-   [slick](https://kenwheeler.github.io/slick/) v1.8.1
    (license: [MIT](https://github.com/kenwheeler/slick/blob/master/LICENSE))
-   components used by the [*default* theme](src/themes/default)
    -   [Pure.CSS](https://purecss.io/) v1.0.0
        (license: [BSD](https://github.com/pure-css/pure/blob/master/LICENSE))
    -   [Colorbox](https://www.jacklmoore.com/colorbox/) v1.6.4
        (license: [MIT](https://github.com/jackmoore/colorbox/blob/master/LICENSE.md))
    -   [Popper.js](https://popper.js.org/) v1.14.5
        (license: [MIT](https://github.com/FezVrasta/popper.js/blob/master/LICENSE.md))
-   components used by the [*bootstrap3* theme](src/themes/bootstrap3)
    -   [Bootstrap](https://getbootstrap.com/) v3.3.7
        (license: [MIT](https://github.com/twbs/bootstrap/blob/master/LICENSE))
-   components used by the [*bootstrap4* theme](src/themes/bootstrap4)
    -   [Bootstrap](https://getbootstrap.com/) v4.1.3
        (license: [MIT](https://github.com/twbs/bootstrap/blob/master/LICENSE))
        bundled with [Popper.js](https://popper.js.org/)
-   aggregated icons (generated with [*fontello.com*](http://fontello.com/))
    -   [Font Awesome](https://fontawesome.com/)
        (license: [SIL](https://fontawesome.com/license/free))
    -   [Fontelico](https://github.com/fontello/fontelico.font)
        (license: [SIL](https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL))


Limitations
-----------

This solution works entirely without a database. Therefore more complex queries
on the exported real estates may not be possible with acceptable performance.


License
-------

This library is licensed under the terms of
[Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0.html).
Take a look at the provided [`LICENSE.txt`](LICENSE.txt) for the license text.


Further information
-------------------

-   [*OpenEstate-PHP-Export* at GitHub](https://github.com/OpenEstate/OpenEstate-PHP-Export)
-   [Releases of *OpenEstate-PHP-Export*](https://github.com/OpenEstate/OpenEstate-PHP-Export/releases)
-   [Changelog of *OpenEstate-PHP-Export*](https://github.com/OpenEstate/OpenEstate-PHP-Export/blob/master/CHANGELOG.md)
-   [API documentation of *OpenEstate-PHP-Export*](https://media.openestate.org/apidocs/OpenEstate-PHP-Export/)
",10,10,4,0,real-estate,"[export, openestate, real-estate, website]",0
OpenEstate,OpenEstate-Tool-Server,OpenEstate,https://github.com/OpenEstate/OpenEstate-Tool-Server,https://api.github.com/repos/OpenEstate-Tool-Server/OpenEstate,a HSQLDB server for multi user installations of OpenEstate-ImmoTool,"OpenEstate-Tool-Server 1.0.0
============================

*OpenEstate-Tool-Server* (also called *OpenEstate-ImmoServer*) provides a [*HSQLDB* server](http://hsqldb.org/), that may be used for multi user installations of *OpenEstate-ImmoTool*.

This project

-   extends the default [*HSQLDB* server](http://hsqldb.org/) with some features.
-   provides several startup scripts / executables / application bundles for *Windows*, *macOS* and *Linux*.
-   bundles [*commons-daemon*](https://commons.apache.org/daemon/) to run the database as a *Windows* service.
-   provides scripts to run the database as a [*systemd*](https://en.wikipedia.org/wiki/Systemd) service on *Linux* systems.
-   provides scripts to run the database as a [*launchd*](https://en.wikipedia.org/wiki/Launchd) agent on *macOS* systems.
-   provides an application to create a keystore for *SSL* encrypted database access.
-   provides a GUI & console application for database administration.


Dependencies
------------

-   Java 8 or newer
-   [Bouncy Castle 1.61](https://bouncycastle.org/) 
    (optional; only required by [`SslGenerator.java`](src/main/java/org/openestate/tool/server/utils/SslGenerator.java))
-   [commons-cli 1.4](https://commons.apache.org/cli/)
    (optional; used for [management applications](src/main/java/org/openestate/tool/server/manager))
-   [commons-daemon 1.1.0](https://commons.apache.org/daemon/)
    (optional; used for installing a *Windows* service)
-   [commons-io 2.6](https://commons.apache.org/io/)
-   [commons-lang 3.8.1](https://commons.apache.org/lang)
-   [commons-text 1.6](https://commons.apache.org/text)
-   [gettext-commons 0.9.8](https://code.google.com/archive/p/gettext-commons/)
-   [hsqldb 2.4.1](http://hsqldb.org/)
-   [log4j 1.2.17](https://logging.apache.org/log4j/1.2/)
-   [SLF4J 1.7.25](https://www.slf4j.org/)


Changelog
---------

Take a look at [`CHANGELOG.md`](CHANGELOG.md) for the full changelog.


License
-------

This library is licensed under the terms of [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html). Take a look at [`LICENSE.txt`](https://github.com/OpenEstate/OpenEstate-Tool-Server/blob/master/LICENSE.txt) for the license text.


Further information
-------------------

-   [*OpenEstate-Tool-Server* at GitHub](https://github.com/OpenEstate/OpenEstate-Tool-Server)
-   [Releases of *OpenEstate-Tool-Server*](https://github.com/OpenEstate/OpenEstate-Tool-Server/releases)
-   [Changelog of *OpenEstate-Tool-Server*](https://github.com/OpenEstate/OpenEstate-Tool-Server/blob/master/CHANGELOG.md)
-   [Javadocs of *OpenEstate-Tool-Server*](https://media.openestate.org/apidocs/OpenEstate-Tool-Server/)
",2,2,4,5,real-estate,"[hsqldb, openestate, real-estate, realestate]",0
etewiah,pwb-themes-base,,https://github.com/etewiah/pwb-themes-base,https://api.github.com/repos/pwb-themes-base/etewiah,Vue / Vuetify based theme for PropertyWebBuilder,"# PropertyWebBuilder Themable front end

> Built with vue and vuetify

Please help support this project by making a contribution to PropertyWebBuilder here: https://opencollective.com/property_web_builder

[![Gitter](https://badges.gitter.im/dev-1pr/1pr.svg)](https://gitter.im/property_web_builder/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

PropertyWebBuilder is a website builder for the real estate sector.  It can be adapted for use as a CRM, property listings site, vacation rentals listing site etc.

This project implements a new look and feel for PropertyWebBuilder.  The goal is to make it easier to customise and to provide more functionality.  As of March 2018, it is under active development and any help in completing it will be much appreciated.

## Collaborate with me

I would like this to be a reference implementation of building a front end with Vue / Vuetify and to involve as many collaborators as possible.  It is easy to run this project locally or to deploy your own instance with netlify by clicking the button below:

[![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/etewiah/pwb-themes-base)

You can see a demo deploy here:

https://elated-mcclintock-50866b.netlify.com/

It consumes the public api of a Rails app running PropertyWebBuilder here:
https://pwb-jan-2018.herokuapp.com/api_public/v1/en/pages/home

You can change the backend (source of the public api) by editing the \_redirects file in the dist folder.

The main repo for PropertyWebBuilder is here:
https://github.com/etewiah/property_web_builder

Features I'm currently working on include:

* Allow site visitors to make some limited changes to the theme
* Add authentication so visitors can login to save their favourite properties
* Enable real time currency conversion


I also want to create first class documentation about this project.  To help with this, feel free to contact me directly or to raise an issue.


## Build Setup

``` bash
# install dependencies
npm install

# serve with hot reload at localhost:8080
npm run dev

# build for production with minification
npm run build

# build for production and view the bundle analyzer report
npm run build --report
```

For detailed explanation on how things work, checkout the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).
",6,6,4,0,real-estate,"[cms, property-listings, propertywebbuilder, proptech, real-estate, theme, vue, vuetify]",0
devvanu,real-estate-assignment,,https://github.com/devvanu/real-estate-assignment,https://api.github.com/repos/real-estate-assignment/devvanu,Built a Search section of the Real Estate Website using React & Chakra UI,"# Real Estate Website

## Preview
[![Real Estate]](https://user-images.githubusercontent.com/93486013/185432874-4fbea18c-cbae-4020-a0f7-22e5e7d01619.mp4)
",2,2,1,1,real-estate-website,"[chakra-ui, chakra-ui-react, reactjs, real-estate-website]",0
y-yamamoto-yworks,VasyworksSuumoConverter,,https://github.com/y-yamamoto-yworks/VasyworksSuumoConverter,https://api.github.com/repos/VasyworksSuumoConverter/y-yamamoto-yworks,"„ÄêË≥ÉË≤∏‰∏çÂãïÁî£ÁÆ°ÁêÜÊ•≠ËÄÖÂêë„Åë„Äë""Convert from VasyworksAPI Data to SUUMO Data"" Vasyworks is a series title of systems for registering and publishing vacancy information in the japanese rental house management industry.",,0,0,1,0,real-estate,"[converter, desktop-app, python, real-estate, real-estate-management, realestate, rent-house, tkinter]",0
SaharaStreetPlatform,WhitePaper,,https://github.com/SaharaStreetPlatform/WhitePaper,https://api.github.com/repos/WhitePaper/SaharaStreetPlatform,White Paper of Sahara Street: How Blockchain is changing Real Estate,"# WhitePaper

For a more detailed explanation, please check out the docx file (White Paper 02.09.22.docx) included in this repository.

 
How Blockchain Technology is Changing Real Estate                                                                                                                                       January 11, 2022
www.sahara.st

                                                                                                                                       founder@sahara.st
 
 












Contents



1.	Abstract
2.	Introduction to the Sahara Platform
3.	How blockchain technology is changing the real estate industry
4.	Sahara Platform Core Theory Overview
5.	How to get to digital assets
6.	Platforms and Marketplaces Description
7.	Fractional and frictionless real estate investing
8.	Team members  introduction
9.	Sahara Site Map
10.	Token Economics
11.	How does SAHARA perform on Ecosystem?
12.	Token Information
13.	Lock policy
14.	Road-Map
15.	partner companies
16.	Learn more about Tokenplace







Abstract

Real estate is the largest asset class in the world. Commercial enterprises and real estate professionals are recognizing the transformative impact of blockchain technology to optimize retail and commercial property sales, streamline payments, and increase access to real estate funds and investment opportunities.


 
 

Introduction to the Sahara Platform

Sahara's goal is to provide a blockchain based software platform for real estate transactions that anyone can access and use easily and safely.  We hope that this platform can bring value to our clients via enhancing the control and transparency to the clients.

The Foundation is located in the Republic of Malta, USA-based Sahara Street is responsible for global team operations and marketing, and Korea-based Sahara Street is responsible for technology development.

 
[Sahara Resort operated by Sahara Platform] 
                                                                                                      
How blockchain technology is changing the real estate industry


Concept

Sahara decentralized real estate platform revenue through value through sharing and segmentation.

Sahara Real Estate Platform Concept

As assets become digital, the value of real estate will also change significantly. Traditional real estate ownership was mostly single-person ownership. The Sahara Real Estate Platform is designed to generate more revenue through sharing and segmentation capabilities.

The platform ensures transactions through secure authentication when all ownership of digitized assets and contracts is transacted through the smart contract process.

The concept of real estate sharing means that many people own equity assets.
The concept of sharing means getting rewarded when more people engage through social networks.

A segmentation node is defined as an AG (Agency) on the Sahara platform.

Value dissemination marketing through Real Estate License Brokers (AGs) operating in the Americas, Europe and Asia offers many members the opportunity to participate. It aims to be the Amazon of digital asset platform.

The current real estate valuation method (price) will go beyond our thinking in the future, and real estate prices will be created in a new way through the Sahara platform.


Sahara Platform Core Theory Overview

In the face of the digital economy, it seems that assets can be invested in real estate.  Many investors are showing a lot of interest in the price of real estate in the future.

 In the digital economy, the price of real estate will affect the real estate market such as housing due to various variables.

 Among them, the key is to select representative predictable variables and examine which variables affect the real estate price and how much.

The Sahara platform is to establish a model for determining real estate prices empirically.

  In order to predict the future real estate market such as housing through the Sahara platform, the simulation of the independent variable index will precede.

Effect of Variables

In the traditional real estate market, the price of a Real Estate Value (Vt) usually is based on standard variables as follows:
‚Ä¢   L: Land Value
‚Ä¢   B: Building and Apparatus Value
‚Ä¢   R: Revenue Producing Value such as Lease and Use Value
Therefore, the Real Estate Value in the traditional market can be expressed in the following equation: 

Vt = L+B+R

However, the Real Estate Value in the digital market (Vd) will be influenced by additional factors in comparison to the traditional Real Estate Value (Vt).
One must consider the following additional factors:

‚Ä¢   N: N represents the contribution of the total number of Real Estate Brokers/Agents (N). In Sahara Street‚Äôs case, we shall call it ‚ÄúSahara Node‚Äù represented by ‚ÄúN‚Äù in the below equation.

‚Ä¢   F: F is an important factor, which represents the value that will be brought by ‚ÄúFollowers‚Äù of the Brokers/Agents, meaning their customers and collaborators. This F shall be called ‚ÄúNode Follower‚Äù, and this number reflects the market demand that can affect the value, meaning the higher demand leads to a higher overall value, Vd.  In addition, the Node Follower will also be rewarded based on their contribution in the process, which gives them incentives for higher motivation.

‚Ä¢   I: I depict the value introduced by Investment in the digital market

‚Ä¢   X: X is a variable that affects the above-referenced factors based on market conditions, including the location of the property and the average condition of the digital market. X is introduced, in order to adequately reflect the market fluctuation of the digital market as well as the value-added by ‚Äúsharing‚Äù and ‚Äúdigitalized asset‚Äù in the digital market.


Value Prediction

Therefore, one can express the process of predicting the value of a real estate property in the digital market in the following manner:
Vd = Vt + (N*F*I)*X


In comparison between the traditional real estate and digital market, if a real estate property is digitalized, then it is obvious that the digitalized asset shall have the additional path to incorporate the market demand and interest, which explain in ‚ÄúN‚Äù, ‚ÄúF‚Äù and ‚ÄúI‚Äù in the above mathematical expression.      



 How to get to digital assets

CREATING VALUE THROUGH DATA

The sharing economy ecosystem of digital assets and technical challenges for segmentation

‚ë†Smart contracts
Smart real estate contracts enabled by blockchain will not only speed up the leasing process and save on costs, but it can also improve due diligence. Blockchain would have the ability to verify identities and incomes, and reduce the likelihood of fraud.

‚ë°Transactions

The entire real estate transaction process can be held on the blockchain. The submission of an offer, verification of title, the acceptance and verification of that offer, the due diligence process, the financing, and closing can all be verified and codified within a digital ledger. The use of blockchain for real estate transactions has significant implications for real estate agent and broker jobs.

‚ë¢Financing

Credit checks, income and identity verification, debt to income ratios, and so much more can be held on and verified using blockchain. The mortgage financing process is fraught with friction and frustration. If all your critical documents are held on blockchain, no longer do you need to scramble to get dozens of different documents to your bank or broker.

‚ë£Land titles

Traditionally kept offline, blockchain tech has the ability to store and verify these critical legal real estate documents. Imagine if you could log into a blockchain land registry to verify title ownership of any plot of land in your area.

‚ë§Leasing

Identity verification and contracting signing can be facilitated and held on a blockchain. Whether it‚Äôs income verification of the tenant, employer checks, or other references, this can all be facilitated and held on a digital ledger.

‚ë•Liquidity

If an asset becomes tokenized to 1,000 investors instead of 10, you automatically increase the liquidity of that real estate investment. If buyers and sellers of tokens are more easily able to sell and buy shares in a particular asset, then exit strategies and liquidity problems drop significantly.

‚ë¶Ownership

A real estate blockchain can be used as a single source of truth to verify ownership of assets. This includes fractional ownership through a token, and all the owners of those tokens will be publicly available.

 
[Diagram -A]


Platforms and Marketplaces Description

Platform and Market Description

  1. Platform and Market

  Real estate technology has traditionally been primarily concerned with listing and connecting buyers and sellers.  However, blockchain introduces new methods to real estate transactions and enables trading platforms and online marketplaces to support real estate transactions more comprehensively.  For example, Sahara is developing a platform that uses blockchain technology to facilitate real estate transactions.  By tokenizing real estate, assets can be traded online on exchanges.
  The Sahara platform allows sellers to tokenize their assets and use the platform to liquidate their assets through token sales.  The collected tokens can be exchanged for fiat currency through the platform by sellers and buyers who own the assets.

 
[Diagram -B]
<The source   https://github.com/NorbanDev/RealEstate2.0>

2. No Intermediaries

Brokers, lawyers, and banks have long been part of the real estate ecosystem. However, blockchain may soon usher in a shift in their roles and participation in real estate transactions, according to a report by Deloitte.1 New platforms can eventually assume functions such as listings, payments, and legal documentation. Cutting out the intermediaries will result in buyers and sellers getting more out of their money as they save on commissions and fees charged by these intermediaries. This also makes the process much quicker as the back-and-forth between these middlemen gets cut.
KEY TAKEAWAYS
Blockchain technology has impacted the real estate industry in a variety of ways, including offering a new means for buyers and sellers to connect with one another.
Blockchain could be used to cut intermediaries out of the real estate transaction process, thereby reducing costs.
This technology could also help to codify the practice of fractional ownership of real estate.


3. Liquidity

Real estate has long been considered an illiquid asset since it takes time for sales to conclude. This isn‚Äôt the case with cryptocurrencies and tokens since they can, in theory, be readily traded for fiat currencies through exchanges. However, as tokens, real estate can be readily traded. A seller doesn‚Äôt have to wait for a buyer who can afford the whole property in order to get some value out of their property.


 
[Diagram -C]

4. Fractional Ownership

By allowing fractional ownership, blockchain also lowers the barriers to real estate investing. Typically, investments would require significant money upfront in order to acquire property. Alternatively, investors could also pool their money to acquire bigger ticket properties. Through blockchain, investors would simply have to access a trading app to buy and sell even fractions of tokens as they see fit. In addition, fractional ownership would also help them avoid managing the properties themselves such as maintenance and leasing.

Upkeep alone can add up to significant costs and dealing with tenants may be a troublesome effort. This also affects related activities such as lending where property owners often have to put their properties as collateral for loans in order to get quick access to cash. Depending on the terms, property owners may also continue enjoying use of their property.

5. Decentralization 

Blockchain commands trust and security as a decentralized technology. Information stored in the blockchain is accessible to all peers on the network, making data transparent and immutable. One only has to go back to the housing bubble crash in 2008 to see how greed and the lack of transparency in the part of institutions can have catastrophic consequences. A decentralized exchange has trust built into the system. Since information can be verifiable to peers, buyers and sellers can have more confidence in conducting transactions. Fraud attempts would also be lessened. Smart contracts are increasingly becoming admissible records with Vermont and Arizona passing such legislation. As such, smart contracts would have more enforceability beyond the technology itself.



 
[Diagram -D]

6. Costs 

The transparency associated with a decentralized network can also trim down costs associated with real estate transactions. Beyond the savings made by cutting out intermediaries‚Äô professional fees and commissions, there are other costs such as inspections costs, registration fees, loan fees, and taxes associated with real estate. These costs even vary depending on the territory that has jurisdiction. Like intermediaries, these can be reduced or even eliminated from the equation as platforms automate these processes and make them part of the system.

Global real estate is worth hundreds of trillions of dollars, but is dominated by the wealthy and large corporations. Through blockchain technology, it is possible that more people will be able to access the market where transactions can be made more transparent, secure, and equitable. Real estate transactions may eventually become truly peer-to-peer activities with blockchain-powered platforms doing most of the work.



Fractional and frictionless real estate investing
OWNERSHIP REINVENTED
For the first time, investors around the globe can buy into the Dubai  real estate market through fully-compliant, fractional, tokenized ownership. Powered by blockchain.
KYC/AML
In order for the sale of SaharaTokens to be compliant with applicable regulations, purchasing a SaharaToken through the Sahara website will require the implementation of ‚Äúknow your customer‚Äù(KYC) and anti-money laundering (AML) procedures. Sahara is implementing KYC procedures to verify the identities of our SaharaToken purchasers and AML procedures to ensure that payments for
SaharaTokens do not come from illegal sources. Sahara is implementing AML/KYC solutions through IdentityMind, an independent third-party solutions provider.

Investment Status
 
               [South Korea Busan Money Show - November-2021]

U.S Silver Class Venture Capital USD$3,000,000 Series A Seed Secured
 
 [Diagram -F]


Team members  introduction


‚ë†


Dr. Han Ko	 	


  Co-Founder & Ceo

https://www.linkedin.com/in/han-ko-3b8814185/
‚óè	Startup and investment experience in various technology and real estate fields such as Founder, President & CEO, USAKO Group, etc.
‚óè	Director and Chairman of the Steering Committee, AACC Chamber of Commerce board member profile
‚óè	Official Director, Board member of St. Louis County, Missouri, USA. Louis County, Missouri, U.S.A., Commission Board
‚óè	State of Illinois, State of Illinois, FVHT Metro East Business Incubator Board Member
‚óè	Mentor, Technology and Investment Advisor Capital Innovators, a venture capital company
‚óè	Chief Technology Officer (CTO), Watch Skin (a high tech software wearable)
‚óè	Global Marketing Director/Founder Native Agtech (AI driven consumer perf. mgmt)
‚óè	Adviser/Investor/Mentor Roles in various technology and investment companies and enterprises including WIF AX (a $50M+ Morgan Stanley managed investment Fund), Trailyn Ventures (tech accelerator and investment), Native Agtech (B2B AI platform), Watch Skin, SoleNTek (a high tech IP manufacturing), Union Mobile (an international telecom), DawinKS (a Fintech & high tech Software Dev.), Delta Tech (a high tech consumer electronics), Blockchain Accelerator, zPODs, zBONEs, VoiceXP (a Voice Recognition & AI), and Liker World (an international blockchain), Emerge One Medical (PPE & Medical Supply) and other companies.
‚óè	A Judge, Mentor and an Advocate for Arch Grants (A Venture Capital Grant Program)
‚óè	Editor of the investment magazine Entrepreneur Quarterly, Investor's Magazine EQ editor in investment
‚óè	Director and Steering Committee Chair FIRST Robotics, a Board Member and Steering Committee Chair (FIRST Robotics Association, USA)



‚ë°


Barbara Bickham	 	


CTO
Global technical engineer
NFT,Blockchain, 
https://www.linkedin.com/in/barbarabickham/
 
Blockchain, Investment, Tech Scale-up
‚óè	Blockchain, Investment and CTO professional
‚óè	Morgan Stanley managed fund WIFAX
‚óè	$50M+
‚óè	Computer Science & MBA
‚óè	U. of California, Berkeley
 

‚ë¢


Yeom Ki Ho 	 	

CTO/Korea Dev‚Äô
 


CEO Keystone Lab & KDEX Cryptocurrency Exchange -CEO
Hanbit Academy Java Programming Bible Author-Bestseller
Metaverse, NFT, blockchain expert
Programming lectures on C/C++, VISUAL C++, JAVA, VB, etc.
Representative of the ICT Technology Association

‚ë£
Brian Jung 	 	
Co-Founder

https://www.linkedin.com/in/jungminho/
New trend future forecasting expert
‚óè	Brian Jung, Co-Founder and research director of sahara street LLC, created the world's first Internet Network Center (~93').  It is the beginning of internet cafe and pc bang.  Introduced the G4c e-Government solution for the first time, and has a number of patents related to blockchain, AI, and IoT.
‚óè	Blockchain, AI, and IoT architecture experts [Blockchain and Metaverse patents]
‚óè	Seoul National University Graduate School of International Studies GLP mba completion
‚óè	Completed a Fintech course at the Dongguk University of Seoul, South Korea.



‚ë§
George Wu	 	
Dr. GT Wu, Ph.D & J.D, Exec. Director

                                        https://www.linkedin.com/in/georgetatungwu/

‚óè	Graduated from Cornell University, Stanford University, and University of California, Berkeley, where he received his Ph.D., Master's and Bachelor's degrees.



‚ë•


Collin Knock	 	


Exec. Director

https://www.linkedin.com/in/collin-knock-b90a8a8/
 

RE Lending, Financing, Blockchain
‚óè	REFinancing and Reverse Mortgage, Blockchain, Investment expert
‚óè	Founded and operated one of top 100 financing co's in USA
‚óè	Founded and operated in multiple successful tech and financing ventures

 
‚ë¶


Tom Ray 	 	


Exec. Director
                         
https://www.linkedin.com/in/tom-ray-3947526/

Exec. Director
C-Suite Commercial Real Estate. Juris Doctorate
‚óè	Executive Level Licensed Commercial Real Estate Professional with Rich Market Experience and a Law Degree
‚óè	Award Winning Power Broker & REIT experience
‚óè	Senior VP CBRE, an international RE firm
‚óè	Juris Doctorate U.S.A.


‚ëß


David Shim
	 	

Software Development 

Exec. Director
                              https://www. linkedin.com/in/david-shim-08ab38b9
 Software Development Engineering at a high tech a boutique software consulting firm based in Denver, Colorado 
‚óè	Experience in software development projects for multinational companies such as Amazon
‚óè	Accounting and Business degree from U. of Illinois, Urbana-Champaign and experience

‚ë®


 Frank Pica

	 	

Exec. Director
Fund Raising and Product Development

 

                                                      https://www.linkedin.com/in/frankapica
‚óè	High Tech Based Product Development, Fund Raising and Marketing (Artificial Intelligent Product and Blockchain for C-Suite Companies)
‚óè	Explosive Growth in LockerDome in US and Adyoulike in Europe (Highly Successful Technology Based Marketing Companies) as a Founding Member and VP

‚ë©


 Perry Chappell
	 	

Advisor
 


                                          https://www. linkedin.com/in/perry-chappell-6496816

A successful startup founder and strategist for Exits and M&As
40 Years of experience with a focus on Consumer Markets and Startup Strategies
Multiple Exits and M&As:
‚Ä¢   Founding team of NASDAQ trading company, Genesis Microchip
‚Ä¢   VIXS - TSX
‚Ä¢   Sale of VIXS to Pixelworks
‚Ä¢   Genesis Paradise Electronics
‚Ä¢   Genesis Sage
‚Ä¢   Current CEO and Co-founder, Zing Communications Inc (U.S. and Canada) in 5G Entertainment ICT Service in very high speed for Verizon, T-Mobile, AT&T



‚ë™

Dr. H.E. Ko	 	

MD, Executive Director

https://www.linkedin.com/in/eunice-ko-69176b65/

Investment, Medical Doctor, Tech Scale-up
‚óè	Medical Doctor
‚óè	Real Estate Investment 
‚óè	Fund Management
‚óè	Tech Scale-up

‚ë´


  Jae Kim/	 	


Exec. Director

https://www.linkedin.com/in/jae-kim-1b843b165/
 
Finance, Accounting, Risk Analysis
 
‚óè	Finance & Accounting, a chamber of commerce in U.S.A
‚óè	Fund Raise & Investment
‚óè	Private company Finance & Risk Analysis
‚óè	U.S. Bank, Credit & Risk Analysis 

‚ë¨


Yong Hyoung	 	


Exec. Director
                                              https://www.linkedin.com/in/yonghyoung/
 
Tech Scale-up, Startup
‚óè	Founder of ""Cyworld""
‚óè	Quoted Proven Leader in Asia
‚óè	""The person who inspired Facebook""
‚óè	Korea Advanced Institute of Science and Technology
‚óè	(KAIST University, top high tech University in Korea)




‚ë≠

Hyug-soon Kwon	 	

Head of Fintech Center, KB Kookmin Bank (former)

TECHNO MBA
(KAIST University, Korea's best high-tech university)


                               http://www.segye.com/newsView/20151126003573?OutUrl=naver


‚ëÆ

Jason H. Jang	 	

Advisor

                                       
                                         https://www.linkedin.com/in/jason-h-jang
‚óè	Tnc Group /CEO  Co-Founder
‚óè	Master Degree, University of Michigan 







Sahara Site Map
 
Token Economics
SAHARA Token is a governance token that aligns incentives across all stakeholders including users, SAHARA Token  token holders, non-profit beneficiaries, the core team, advisors and partners. Below is the distribution of the SAHARA token:

SAHARA  Ecosystem refers to the total amount of tokens reserved for , incentives and grants. These incentives and grants are specifically for users of SAHARA' DeFi products, and those who make valuable contributions to the protocol.
 
Early Contributors refers to supporters who funded development and operations to build out SAHARA
Team refers to core contributors.

Partners/Advisors refers to organizations and individuals who help SAHARA develop and evangelize the product and vision.

Foundation refers to the organization committed to bootstrapping the development of the SAHARA smart contracts, driving decentralization, onboarding non-profit beneficiaries, and ensuring the values of the SAHARA Foundation charter are upheld by all beneficiaries.

Airdrop refers to SAHARA   token transfers for further decentralizing and rewarding the SAHARA community.
 

How does SAHARA perform on Ecosystem?
A new Real Estate and Gold asset class

Investors around the world are trending towards allocating significant capital towards investments that are socially conscious, sustainable, and responsible. SAHARA has not been created to serve those people, but a protocol and culture have emerged that puts people, the environment, and social responsibility first.  

Environment:
A portion of SAHARA's fees is directed towards tackling global environmental challenges via smart contracts. In this way, environmental responsibility is encoded into the heart of the protocol.

Social:
SAHARA values diversity, inclusion, and decentralized decision-making. SAHARA contributors are women and men from diverse backgrounds, from all major continents, religious backgrounds, and ethnicities. Not only does the SAHARA culture support these values internally, but through the decentralized beneficiary governance and funding mechanism of the protocol, it ensures that underrepresented and disadvantaged groups have increased access to opportunity through the power of DeFi.
Governance:
The SAHARA governance model is decentralized and is not majority controlled by any one person. It is consistent with a fair and democratic decision-making process and the forthcoming charter outlines the values and inclusive decision-making framework for the protocol and organization.

Conclusion
While the initial token mechanics for the SAHARA  token might be subject to change, the SAHARA team could not be anymore excited to roll out a tokenomic model that aligns incentives, promotes decentralization, helps automates key smart contract operations and works to inspire and ignite positive global impact through DeFi.

Token Information
Token Name : SAHARA 
Symbol : SAHARA
Protocol : Bep20 Binance Smart Chain/ Utility token
Contract Address :0xb6adF5b4046583F836ce4FD71D7bAe7c68001288
Decimals: 18
Token Logo    :       
Total supply :          3,000,000,000 SAHARA
Circulation supply :1,000,000,000 SAHARA
Origin country :       Republic of Malta



	
  
 

Circulation supply 
                      Development                              21.0%
                     Team  & Advisor                          10.0%
                      Foundation                                 12.0%
                      partner companies                   10.0%
                      Marketing                                    19.0%
                      sale &                                           28.0%
 
Lock policy
Total Supply 2,000,000,000 SAHARA -5 years 
Circulation 1,000,000,000 SAHARA
  Development.21%
After 1 year, 10% termination every 3 months 
Team & Advisor .10% /After 1 year, 10% termination every 3 months 
   Foundation .12% / 3 years Lock
partner companies .10%/After 2 years, 10% term every 3 months
Marketing.19% /After 1 year, 10% term every 3 months 
Exchange Listing and Sale. 28%. /  Lock step by step after 6 months Unlock
	 
Road-Map

2021.  
Q1  Al Khoory Group in Dubai Agreement
      (www.premiumservices.ae) 

- Q2
Sahara street LLC USA Global Office Open
Fyndus LLC in USA  agreement-500,000 Members 

-Q3
Hancom Group South Korea Agreement
Participated in Blockchain Conference - Chicago, USA
Participated in Blockchain Conference - New York
Blockchain Conference - South Korea 21‚Äô Money Show
Keystone Lab- DEX Exchange Agreement

-Q4 
USAKO Group USA -Venture Capital & Accelerator Seed USD$3,000,000 Agreement
Listing Exchange  Agreement
-Aladdin25 Exchange in Dubai


                                                2022.
                                                              Q1 
                                                                    Sahara Resort  Open  
                                                                          2018 KoreanWinter Olympic Town
                                                                          Solomon Capital Japan (remittance - Japan Financial Services Agency       
                                                                          approved company)
                                                                    Sahara Korea Ltd  Open -Dev‚Äô
                                                                    
                                                               Q2
                                                             Sahara Platform Launching
                                                              

                                                               Q3
                                                                  Metaverse & NFT Launching
                                                                  -With  Keystone Lab & KDEX Cryptocurrency Exchange
                                                                  Global Real Estate Agent Marketing   

 
 

partner companies
USAKO Group venture capital
-International venture capital investment firm based in the US and Korea
CryptoWorld
-Education, mining, investment, OTC in the US-based cryptocurrency market
Franchise company that provides various services such as trading
Fyndus Ltd
-E-commerence and financial data based in the US and India markets
Software Platform Company for Management (Big Data)
Watch Skins
-Launched a blockchain-based NFT product based in the United States. Awarded as an excellent company at CES
Native Agtech
-Ai Blockchain Software-based Customer Satisfaction Small Based in the United States software evaluation platform
Trailyn Ventures
-U.S.-based blockchain technology and marketing education, before corporate incubation company
Hancom Group
-A company specializing in blockchain technology and gold and real estate based in Korea


 

Learn more about Tokenplace
‚óè Website: https://www.sahara.st      
‚óè Telegram:  https://t.me/likerworld
                       https://t.me/saharaofficial
‚óè	https://github.com/SaharaStreetPlatform
‚óè	https://medium.com/@sahara-street-news
‚óè	https://www.linkedin.com/in/sahara-street-llc-b18007213/
‚óè	https://www.twitter.com/platformsahara
‚óè	info@sahara.st

------------------------------------------------------------------------------------------------------------------------------------
ARTICLE SOURCES
Deloitte.com. ""Blockchain in commercial real estate: The future is here,"" Accessed March 22, 2020




",0,0,1,0,real-estate,"[blockchain, real-estate, real-estate-platform]",0
y-yamamoto-yworks,VasyworksHomesConverter,,https://github.com/y-yamamoto-yworks/VasyworksHomesConverter,https://api.github.com/repos/VasyworksHomesConverter/y-yamamoto-yworks,"„ÄêË≥ÉË≤∏‰∏çÂãïÁî£ÁÆ°ÁêÜÊ•≠ËÄÖÂêë„Åë„Äë""Convert  from VasyworksAPI Data to Home's Data"" Vasyworks is a series title of systems for registering and publishing vacancy information in the japanese rental house management industry.",,0,0,1,0,real-estate-management,"[converter, desctop-app, python, real-estate, real-estate-management, realestate, rent-house, tkinter]",0
block-foundation,brand,block-foundation,https://github.com/block-foundation/brand,https://api.github.com/repos/brand/block-foundation,Official brand assets of the Block Foundation,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/brand/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/brand)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Block Foundation</h1>
    <h3 align=""left"">Brand Assets & Visual Identity Guide</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Style Guide](#style-guide)
- [Logo](#logo)
- [Typography](#typography)
- [Color](#color)
- [Graphics](#graphics)
- [Diagrams](#diagrams)
- [Elements](#elements)
- [Frameworks](#frameworks)
- [Templates](#templates)
- [Syntax](#syntax)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to the official Brand Repository of the Block Foundation ‚Äì Let's together uphold and amplify the voice of change in the world of architecture!**

## Introduction

This repository is an all-inclusive resource of our brand identity, encapsulating our ethos, vision, and the graphical elements that distinguish us in the global arena of architectural innovation.

Our brand is not just a logo or a name, but a reflection of our mission to revolutionize architecture through blockchain technology. It symbolizes our commitment to facilitating a sustainable, equitable, and dynamic housing market that balances the interests of all stakeholders.

This repository hosts a comprehensive collection of our branding materials ‚Äî from our logo in various formats to color palettes, typography guidelines, official stationary templates, and presentation layouts. Each element is meticulously designed to communicate our essence, ensuring a cohesive and consistent representation of the Block Foundation across all platforms.

We invite our community, collaborators, and media personnel to use this repository as a guide when representing the Block Foundation. Whether you're creating content for us, collaborating on a project, or featuring our work, these resources will ensure you accurately capture and convey the spirit of our organization.

We kindly ask that you adhere to the guidelines detailed in this repository to maintain the integrity of our brand. And remember, our brand is not just an identifier but a promise of the transformative potential blockchain holds for the architectural landscape.

## Style Guide

<!-- Please see this PDF overview. -->

`Will be provided shortly.`

## Logo

[(Back to top)](#block-foundation)

### Logomark

| Variant     | PNG   | SVG   | WEBP  | JPG   |
| :---------- | ----- | ----- | ----- | ----- |
| **dark** | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_dark.png"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_dark.png) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_dark.svg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_dark.svg) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_dark.webp"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_dark.webp) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_dark.jpg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_dark.jpg) |
| **dark transparant** | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_dark-trans.png"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_dark-trans.png) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_dark-trans.svg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_dark-trans.svg) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_dark-trans.webp"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_dark-trans.webp) |   |
| **gray** | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_gray.png) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.svg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_gray.svg) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.webp"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_gray.webp) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.jpg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_gray.jpg) |
| **gray transparant** | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray-trans.png"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_gray-trans.png) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray-trans.svg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_gray-trans.svg) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray-trans.webp"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_gray-trans.webp) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray-trans.jpg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_gray-trans.jpg) |
| **light** | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_light.png"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_light.png) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_light.svg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_light.svg) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_light.webp"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_light.webp) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_light.jpg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_light.jpg) |
| **light transparant** | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_light-trans.png"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_light-trans.png) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_light-trans.svg"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_light-trans.svg) | [<img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_light-trans.webp"" width=""128"" height=""128"">](https://github.com/block-foundation/brand/blob/master/src/logo/logo_light-trans.webp) |   |

### Logotype

`Will be provided shortly.`

<!-- |   |   |
| - | - |
|   |   | -->

### Favicon

![Download](https://img.shields.io/badge/favicon.zip-favicon?style=flat-square&logo=files&logoColor=%23FFFFFF&label=Download%3A&labelColor=%23041B26&color=%23041B26&link=https%3A%2F%2Fgithub.com%2Fblock-foundation%2Fbrand%2Fblob%2Fmaster%2Fsrc%2Ffavicon%2Ffavicon.zip)

### Badge

Share that your organisation or project endorses the Block Foundation by adding our badge to your readme or website.

`Will be provided shortly.`

<!-- ``` html
<a href=""https://github.com/storybooks/storybook"" target=""_blank""><img src=""https://raw.githubusercontent.com/storybooks/brand/master/badge/badge-storybook.svg""></a>
``` -->

### ASCII Art

``` txt
# .............................................................................
# .............................................................................
# ....................................@@@......................................
# ................................@@@@@@@@@@@..................................
# ............................@@@@@@..@@@..@@@@@@..............................
# ........................@@@@@@......@@@......@@@@@@..........................
# ...................@@@@@@...........@@@..........,@@@@@@.....................
# ...............@@@@@@...............@@@...............@@@@@@.................
# ...........@@@@@@...................@@@...................@@@@@@.............
# .........@@@@@@.....................@@@.....................@@@@@@...........
# .........@@@.@@@@@@.................@@@.................@@@@@@.@@@...........
# .........@@@.....@@@@@@.............@@@.............@@@@@@.....@@@...........
# .........@@@.........@@@@@@@........@@@........@@@@@@@.........@@@...........
# .........@@@..............@@@@@@....@@@....@@@@@@..............@@@...........
# .........@@@..................@@@@@@@@@@@@@@@..................@@@...........
# .........@@@......................@@@@@@@......................@@@...........
# .........@@@........................@@@........................@@@...........
# .........@@@........................@@@........................@@@...........
# .........@@@........................@@@........................@@@...........
# .........@@@........................@@@........................@@@...........
# .........@@@........................@@@........................@@@...........
# .........@@@@.......................@@@.......................@@@@...........
# ...........@@@@@@...................@@@...................@@@@@@.............
# ...............@@@@@@...............@@@...............@@@@@@.................
# ...................@@@@@@...........@@@...........@@@@@@.....................
# ........................@@@@@@......@@@......@@@@@@..........................
# ............................@@@@@@..@@@..@@@@@@..............................
# ................................@@@@@@@@@@@..................................
# ....................................@@@......................................
# .............................................................................
# .............................................................................
```

``` txt
........................................................................
..................@.................                                   .
...............@@@@@@@..............      BLOCK FOUNDATION             .
...........@@@....@....@@@..........                                   .
.......@@@........@........@@@......      www.blockfoundation.io       .
......@@@@........@........@@@@.....      info@blockfoundation.io      .
......@.....@@@...@...@@@.....@.....                                   .
......@.........@@@@@.........@.....                                   .
......@...........@...........@.....                                   .
......@...........@...........@.....                                   .
......@...........@...........@.....                                   .
.........@@@......@......@@@........                                   .
.............@@@..@..@@@............                                   .
..................@.................                                   .
........................................................................
```

## Typography

### Main Display Font

We us `Barlow`.

<p align=""center"">
    <img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/font/barlow/barlow.gif""width=""100%"" height=""100%"" alt=""Barlow"">
</p>

- Creators: [Jeremy Tribby](https://github.com/jpt) (Principal Design) and [Nguy·ªÖn H·ªìng Nhung](https://github.com/crystaltype) (Vietnamese)
- Repository: [jpt/barlow](https://github.com/jpt/barlow)
- License: [OFL](https://github.com/jpt/barlow/blob/main/OFL.txt)
- GIF courtesy of the original creators.

### Secondary Font

`Will be provided shortly.`

### Text Conventions

#### Brand Name

Capitalize the ""B"" and ""F"" in ""Block Foundation"" in all copy text. The Block Foundation should only be presented in all uppercase when displayed in our official logos; e.g.: ""BLOCK FOUNDATION"". In code, ""block_foundation"" is all lowercase / snakecase.

- ‚úì BLOCK FOUNDATION `(in Logo)`
- ‚úì Block Foundation `(in Text)`
- ‚úì block_foundation `(in Code)`
- √ó BlockFoundation
- √ó blockFoundation
- √ó Block-Foundation
- √ó block-foundation
- √ó block foundation

#### Headers

All headers are written in Title Case.

#### Emoji's

We don't use them, ever.

## Color

### Base Colors

|           | Color     | HEX       | RGB       | HSL       | HSB       | CMYK      |
| --------- | --------- | --------- | --------- | --------- | --------- | --------- |
| <img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/color/block_foundation-color-base-01.png"" width=""64"" height=""64""> | **Base 01** | `#041B26` | `4, 27, 38` | `199, 81%, 8%` | `200, 90, 15` | `13%, 4%, 0%, 85%` |
| <img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/color/block_foundation-color-base-02.png"" width=""64"" height=""64""> | **Base 02** | `#E1E4E5` | `225, 228, 229` | `195, 7%, 89%` | `200, 2, 90` | `2%, 0%, 0%, 10%` |
| <img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/color/block_foundation-color-base-03.png"" width=""64"" height=""64""> | **Base 03** | `#F0F1F2` | `240, 241, 242` | `210, 7%, 95%` | `200, 1, 95` | `1%, 0%, 0%, 5%` |
| <img src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/color/block_foundation-color-base-04.png"" width=""64"" height=""64""> | **Base 04** | `#FFFFFF` | `255, 255, 255` | `0, 0%, 100%` | `0, 0, 0` | `0%, 0%, 0%, 0%` |

![Download](https://img.shields.io/badge/SCSS-SCSS?style=flat-square&logo=files&logoColor=%23FFFFFF&label=Download%3A&labelColor=%23041B26&color=%23041B26&link=https%3A%2F%2Fgithub.com%2Fblock-foundation%2Fbrand%2Fblob%2Fmaster%2Fsrc%2Fcolor%2Fblock_foundation-color.scss)
![Download](https://img.shields.io/badge/ASE-ASE?style=flat-square&logo=files&logoColor=%23FFFFFF&label=Download%3A&labelColor=%23041B26&color=%23041B26&link=https%3A%2F%2Fgithub.com%2Fblock-foundation%2Fbrand%2Fblob%2Fmaster%2Fsrc%2Fcolor%2Fblock_foundation-color.ase)

### Secondary Colors

`Will be provided shortly.`

## Graphics

### Artworks

Our repositories use the following artworks to make them just a little bit moe enticing!

| Color | Monochrome | Acccent |
| ----- | ---------- | ------- |
| [<img align=""center"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-color.jpg"" width=""100%"">](https://github.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-color.jpg)*`structure-03-color`* | [<img align=""center"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-mono.jpg"" width=""100%"">](https://github.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-mono.jpg)*`structure-03-mono`* | [<img align=""center"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg"" width=""100%"">](https://github.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg)*`structure-03-accent`* |

### Photography

`Will be provided shortly.`

### Banners

`Will be provided shortly.`

## Diagrams

We use [Mermaid](https://mermaid.js.org/) in our repositories for simple data and process visualisations. Some examples:

### Flowchart

``` mermaid
flowchart LR
    Light:::class_light --> Neutral:::class_neutral --> Dark:::class_dark
    classDef class_light fill:#FFFFFF,color:#041B26,stroke:#041B26,stroke-width:2px;
    classDef class_neutral fill:#E1E4E5,color:#041B26,stroke:#041B26,stroke-width:2px;
    classDef class_dark fill:#041B26,color:#FFFFFF,stroke:#041B26,stroke-width:2px;
```

`class_light`

``` md
classDef class_light fill:#FFFFFF,color:#041B26,stroke:#041B26,stroke-width:2px;
```

`class_neutral`

``` md
classDef class_neutral fill:#E1E4E5,color:#041B26,stroke:#041B26,stroke-width:2px;
```

`class_dark`

``` md
classDef class_dark fill:#041B26,color:#FFFFFF,stroke:#041B26,stroke-width:2px;
```

### Pie chart

``` mermaid
%%{init: {""theme"": ""base"", ""pie"": {""textPosition"": 0.5}, ""themeVariables"": { ""pieOuterStrokeWidth"": ""2px"", ""pie1"": ""#FFFFFF"", ""pie2"": ""#E1E4E5"", ""pie3"": ""#041B26""}}}%%
pie title Crypto
    ""Bitcoin"" : 386
    ""Ethereum"" : 85
    ""Algorand"" : 15
```

``` md
%%{init: {""theme"": ""base"", ""pie"": {""textPosition"": 0.5}, ""themeVariables"": { ""pieOuterStrokeWidth"": ""2px"", ""pie1"": ""#FFFFFF"", ""pie2"": ""#E1E4E5"", ""pie3"": ""#041B26""}}}%%
```

## Elements

### Icons

Within our repositories we use simple-icons for most iconographic purposes. This brand repository includes a copy this icon set (downloaded per 2023-07-25): [/src/icons/simple-icons/](/src/icons/simple-icons/)

- simple-icons website: [simpleicons.org](https://simpleicons.org/)
- simple-icons reposiory: [github.com/simple-icons/simple-icons](https://github.com/simple-icons/simple-icons)
- simple-icons license: [CC0 1.0 Universal](https://github.com/simple-icons/simple-icons/blob/develop/LICENSE.md)

### IO Shields

We use [IO Shields](https://shields.io/) combined with [simple-icons](https://simpleicons.org/) to display repository information.

#### Parameters

| Field           | Value           | Description |
| :-------------- | :-------------- | :---------- |
| style           | `flat-square`    |             |
| logo            | `bitcoin`       | Named logo via [simple-icons](https://simpleicons.org/) |
| logoColor       | `#FFFFFF`       | All white logo to match the text color |
| label           | `License:`      | Title caps label text |
| labelColor      | `#041B26`       | Completely dark background   |
| color           | `#041B26`       |  |
| cacheSeconds    | default         |  |
| link            | misc.           | Always try to provide a link |

#### Shields

|                       |       | shield.io url   | simpleicons tag   |
| :-------------------- | :---- | :---- | :---- |
| **License**           | [![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/brand/blob/main/LICENSE) | [/badges/git-hub](https://shields.io/badges/git-hub) | `readthedocs` |
| **Docker Pulls**      | [![Docker Pulls](https://img.shields.io/docker/pulls/blockfoundation/ethereum-client?style=flat-square&logo=docker&logoColor=%23FFFFFF&label=Pulls:&labelColor=%23041B26&color=%23041B26)](https://hub.docker.com/r/blockfoundation/ethereum-client) | `docker` |
| **Docker Stars**      | [![Docker Stars](https://img.shields.io/docker/stars/blockfoundation/ethereum-client?style=flat-square&logo=docker&logoColor=%23FFFFFF&label=Stars:&labelColor=%23041B26&color=%23041B26)](https://hub.docker.com/r/blockfoundation/ethereum-client) | [/badges/docker-stars](https://shields.io/badges/docker-stars) | `docker` |
| **Docker Version**    | [![Docker Image Version (latest semver)](https://img.shields.io/docker/v/blockfoundation/ethereum-client?sort=semver&style=flat-square&logo=docker&logoColor=%23FFFFFF&label=Version:&labelColor=%23041B26&color=%23041B26)](https://hub.docker.com/r/blockfoundation/ethereum-client/tags) | [/badges/docker-stars](https://shields.io/badges/docker-stars) | `docker` |
| **Docker Size**       | [![Docker Size](https://img.shields.io/docker/image-size/blockfoundation/ethereum-client/latest?style=flat-square&logo=docker&logoColor=%23FFFFFF&label=Size:&labelColor=%23041B26&color=%23041B26)](https://hub.docker.com/r/blockfoundation/ethereum-client) | [/badges/docker-image-size-tag](https://shields.io/badges/docker-image-size-tag) | `docker` |
| **devContainer**      | [![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/brand) | [/badges](https://shields.io/badges) | `visualstudiocode` |
| **DOI**               | [![DOI](https://img.shields.io/badge/10.5281%2Fzenodo.8173471-DOI?style=flat-square&logo=DOI&logoColor=%23FFFFFF&label=&labelColor=%23041B26&color=%23041B26)](https://doi.org/10.5281/zenodo.8173471) | [/badges](https://shields.io/badges) | `DOI` |
| **Zotero**            | [![Zotero](https://img.shields.io/badge/zotero.org%2Fgroups%2Fblock-Zotero?style=flat-square&logo=Zotero&logoColor=%23FFFFFF&label=&labelColor=%23041B26&color=%23041B26)](https://www.zotero.org/groups/block) | [/badges](https://shields.io/badges) | `Zotero` |
| **Download**          | ![Download](https://img.shields.io/badge/File-File?style=flat-square&logo=files&logoColor=%23FFFFFF&label=Download%3A&labelColor=%23041B26&color=%23041B26&link=https%3A%2F%2Fgithub.com%2Fblock-foundation%2Fbrand%2Fblob%2Fmaster%2Fsrc%2Fcolor%2Fblock_foundation-color.scss) | [/badges](https://shields.io/badges) | `files` |
| **Solidity**          | ![Solidity](https://img.shields.io/badge/&gt;&equals;&#32;0&period;6&period;8-File?style=flat-square&logo=Solidity&logoColor=%23FFFFFF&label=Solidity%3A&labelColor=%23041B26&color=%23041B26) | [/badges](https://shields.io/badges) | `Solidity` |
| **Teal**              | ![Teal](https://img.shields.io/badge/&gt;&equals;&#32;0&period;6&period;8-File?style=flat-square&logo=Algorand&logoColor=%23FFFFFF&label=Teal%3A&labelColor=%23041B26&color=%23041B26) | [/badges](https://shields.io/badges) | `Algorand` |
| **Substrate**         | ![Substrate](https://img.shields.io/badge/&gt;&equals;&#32;0&period;6&period;8-File?style=flat-square&logo=paritysubstrate&logoColor=%23FFFFFF&label=Substrate%3A&labelColor=%23041B26&color=%23041B26) | [/badges](https://shields.io/badges) | `paritysubstrate` |
| **Hyperledger**       | ![Hyperledger](https://img.shields.io/badge/&gt;&equals;&#32;0&period;6&period;8-File?style=flat-square&logo=Hyperledger&logoColor=%23FFFFFF&label=Hyperledger%3A&labelColor=%23041B26&color=%23041B26) | [/badges](https://shields.io/badges) | `Hyperledger` |

#### Repository Headers

All repositories include the basic header, in some cases combined with additional shields.

##### Basic Repository Header

<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/brand/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/brand)

</div>

##### Basic Repository Interactions

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/brand/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

##### Docker Container Repository Header

<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/brand/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/brand)
[![Docker Pulls](https://img.shields.io/docker/pulls/blockfoundation/ethereum-client?style=flat-square&logo=docker&logoColor=%23FFFFFF&label=Pulls:&labelColor=%23041B26&color=%23041B26)](https://hub.docker.com/r/blockfoundation/ethereum-client)
[![Docker Stars](https://img.shields.io/docker/stars/blockfoundation/ethereum-client?style=flat-square&logo=docker&logoColor=%23FFFFFF&label=Stars:&labelColor=%23041B26&color=%23041B26)](https://hub.docker.com/r/blockfoundation/ethereum-client)
[![Docker Image Version (latest semver)](https://img.shields.io/docker/v/blockfoundation/ethereum-client?sort=semver&style=flat-square&logo=docker&logoColor=%23FFFFFF&label=Version:&labelColor=%23041B26&color=%23041B26)](https://hub.docker.com/r/blockfoundation/ethereum-client/tags)
[![Docker Size](https://img.shields.io/docker/image-size/blockfoundation/ethereum-client/latest?style=flat-square&logo=docker&logoColor=%23FFFFFF&label=Size:&labelColor=%23041B26&color=%23041B26)](https://hub.docker.com/r/blockfoundation/ethereum-client)

</div>

##### LaTeX / Citation Repository Header

<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/brand/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/brand)
[![DOI](https://img.shields.io/badge/10.5281%2Fzenodo.8173471-DOI?style=flat-square&logo=DOI&logoColor=%23FFFFFF&label=&labelColor=%23041B26&color=%23041B26)](https://doi.org/10.5281/zenodo.8173471)
[![Zotero](https://img.shields.io/badge/zotero.org%2Fgroups%2Fblock-Zotero?style=flat-square&logo=Zotero&logoColor=%23FFFFFF&label=&labelColor=%23041B26&color=%23041B26)](https://www.zotero.org/groups/block)

</div>

##### TypeScript / NPM Repository Header

<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/brand/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/brand)

</div>

##### Python / PyPi Repository Header

<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/brand/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/brand)

</div>

## Frameworks

### SCSS

We use the [Stylescape SCSS Framework](https://github.com/scape-agency/stylescape) developed by [Scape Agency](https://www.scape.agency)&reg; for all our online content.

- Website: [scape.style](https://www.scape.style)
- Repository: [github.com/scape-agency/stylescape](https://github.com/scape-agency/stylescape)

#### HTML Script Tag

``` html
<script src=""https://unpkg.com/stylescape@latest/dist.min.js""></script>
```

#### NPM Module

``` bash
npm i stylescape
```

## Templates

### Presentation Template

`Will be provided shortly.`

<!-- Share Block Foundation at work, meetups, and conferences. Get a head start on your slides with our ready-to-use presentation (Keynote, PDF).

This presentation template gives you a head start on presenting Block Foundation. It's inspired by how the community-at-large shares Block Foundation.

Please use, remix, and customize it to fit your needs. -->

#### Contents

- PDF
- Keynote
- PowerPoint

#### Customize

1. Requires Keynote to edit
2. Install the fonts here
3. Replace the for-placement-only images by dragging new images onto them
4. Fill out your name, Twitter, and other details as you see fit.
5. Create new slides to fit your talk

### Figma Template

For those who use [Figma](www.figma.com), we have included a template that can be used to create a new project. This template has Color Presets and some of the most common components.

Duplicate the template and rename it to your project name.

`Will be provided shortly.`

<!-- [GET TEMPLATE](https://www.figma.com/file/6h1AgZe3I5lYmD3mxu9cjR/Ballerini-Style-Guide/duplicate) -->

### HTML Email Signature Templates

Always in plain simple `text`.

``` txt
‚ñ°     BLOCK FOUNDATION

      Lars van Vianen
      lars@blockfoundation.io

      www.blockfoundation.io
      info@blockfoundation.io
```

`Will be provided shortly.`

## Syntax

### General

Superseding Conventions:

- We use `4 spaces` for indents
- We use a maximum line length of `79 characters` in all languages (as per [PEP8](https://peps.python.org/pep-0008/#maximum-line-length))
- Strings should be quoted with double-quotes instead of single-quotes.
- Surround operators with a single space on either side.

### Style Guides

| Language            | Convention |
| :------------------ | :--------- |
| `Go`                | [Google Go Style Guide](https://github.com/google/styleguide/tree/gh-pages/go) |
| `Go`                | [Uber Go Style Guide](https://github.com/uber-go/guide) |
| `JavaScript`        | [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript) |
| `JavaScript`        | [Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html) |
| `Python`            | [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html) |
| `Solidity`          | [Solidity Style Guide](https://docs.soliditylang.org/en/latest/style-guide.html)
| `TypeScript`        | [Google TypeScript Style Guide](https://google.github.io/styleguide/tsguide.html) |

---

## Colophon

### Development Resources

#### Version

This documentation is in version `v0.0.1`.
Last edited: `07/2023`

<!-- #### Versions

The repository provides a track of different versions of the assets for easier navigation and understanding of the evolution of the brand. Each version is tagged with a unique identifier.

1.0.0 Initial release of brand assets
1.0.1 Minor tweaks to the color palette
1.1.0 Introduction of new logo variants
1.1.1 Fixes to SVG assets
1.2.0 Update of Typography guidelines
1.2.1 Minor fixes to the logo files
1.3.0 Addition of new graphics and diagrams
1.3.1 Updated Readme
1.4.0 Introduction of new Templates
1.4.1 Updated copyrights and licensing information -->

<!-- #### Branches

- `Master` Stable, production-ready version of the brand assets
- `Develop` Work in progress, latest changes and updates -->

#### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

<!-- #### Contributors

We are proud to acknowledge the contributions made by individuals from around the world. The success of this repository is a result of the collaborative efforts of these passionate individuals. -->

<!-- Contributions
Contributions to this project follow the all-contributors specification. Each contributor gets recognition for their work in the contributors section. -->
<!-- Pull Requests
Pull requests are always welcome. If you wish to contribute or make changes, please make a pull request. If it's a substantial change, please create an issue first, to discuss it. -->

<!-- Community
Join our community and contribute towards the development and enhancement of the brand assets. We value all our contributors and aim to create a vibrant community that supports and helps each other. -->

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

<!-- 
#### Sponsorships

Your sponsorships help us maintain this project. You can sponsor this project through the sponsorship link provided. Your contribution can help us in many ways, from keeping our servers up and running, to supporting the further development and improvement of these assets.

Issues
In case you find any errors or have suggestions for improvements, we encourage you to raise an issue. The Issues tab is a space for community members to discuss problems they‚Äôve encountered, suggest enhancements, and more.

#### FAQ
We have compiled a list of frequently asked questions for easier navigation and understanding of this repository. If you have more questions, please raise an issue and we will be glad to assist you. -->

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, brand, real-estate, style, styleguide]",0
block-foundation,solidity-real-estate-token,block-foundation,https://github.com/block-foundation/solidity-real-estate-token,https://api.github.com/repos/solidity-real-estate-token/block-foundation,Solidity Smart Contract: Real-Estate Token,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-real-esate-token/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-real-esate-token)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Solidity Real Estate Token</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-token/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-token/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-token/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-token/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-real-esate-token/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

...

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",0,0,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, eth, ethereum, hardhat, real-estate, smart-contracts, sol, solidity, token]",0
OpenEstate,OpenEstate-PHP-Wrapper-WBCE,OpenEstate,https://github.com/OpenEstate/OpenEstate-PHP-Wrapper-WBCE,https://api.github.com/repos/OpenEstate-PHP-Wrapper-WBCE/OpenEstate,a module that integrates OpenEstate-PHP-Export into your WBCE website,,1,1,3,0,real-estate,"[openestate, real-estate, realestate, wbce]",0
etewiah,pwb-for-heroku,,https://github.com/etewiah/pwb-for-heroku,https://api.github.com/repos/pwb-for-heroku/etewiah,A Rails website using the property-web-builder gem and ready to be deployed to heroku,"## June 2022 update

PropertyWebBuilder is now a standalone Ruby on Rails app (it is no longer a Ruby on Rails engine)

This project was only needed as a shell for loading the PropertyWebBuilder engine. As this is no longer needed this project has been discontinued.  You can now deploy PropertyWebBuilder directly!

For more about PropertyWebBuilder see:

[PropertyWebBuilder](https://etewiah.github.io/property_web_builder/)


Also, I am currently working on a tool to help with house hunting and would love to get some feedback about it.

Please check it out here and let me know what you think (and if you would like it to be open-sourced):

[https://propertysquares.com/](https://propertysquares.com/)
",21,21,4,10,real-estate,"[emberjs, heroku, mls, property-listings, property-management, proptech, real-estate, realtors, ruby]",0
sanidhiya-khandelwal,awaas-vishwa-fe,,https://github.com/sanidhiya-khandelwal/awaas-vishwa-fe,https://api.github.com/repos/awaas-vishwa-fe/sanidhiya-khandelwal,"A property listing platform for buy, sell and renting","# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
",0,0,1,9,real-estate-website,"[react-js, real-estate-website]",0
block-foundation,solidity-community-land-trust,block-foundation,https://github.com/block-foundation/solidity-community-land-trust,https://api.github.com/repos/solidity-community-land-trust/block-foundation,Solidity Smart Contract: Community Land Trust (CLT),"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-community-land-trust/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-community-land-trust)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Community Land Trust</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>
---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

1. [Introduction](#introduction)
2. [Features](#features)
3. [Quick start](#quick-start)
4. [Setup and Installation](#setup-and-installation)
5. [Usage](#usage)
6. [Contribution](#contribution)
7. [License](#license)
7. [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-community-land-trust/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-community-land-trust/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-community-land-trust/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-community-land-trust/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-community-land-trust/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**The `CommunityLandTrust` smart contract facilitates the management and operations of land parcels within a decentralized land trust community. It allows users to buy and sell land parcels, transfer ownership, and provides an administrative interface for trustees and the contract owner.**

## Introduction

In this community land trust smart contract, we explore a sophisticated example of land management on the Ethereum blockchain. The CLT contract encapsulates multiple unique aspects of a trust, including land as unique parcels rather than indistinguishable units, trustees who have special privileges, dynamic pricing, and operations like land purchase, sale, and transfer among users.

The Community Land Trust contract models the sale and purchase of land as transactions on the Ethereum blockchain. Instead of treating land as indistinguishable units, the contract recognizes each land parcel as a unique entity, with an ID and an owner. This allows for more realistic representation and tracking of land ownership.

The contract recognizes the role of trustees in a land trust. Trustees have the power to change the price of land parcels. The owner of the contract, usually the trust, has the power to add or remove trustees. All these operations trigger events that provide transparency and traceability.

Users can buy available land parcels from the trust. When a land parcel is purchased, it is assigned to the buyer and can no longer be bought by others. Owners of land parcels have the flexibility to sell the parcels back to the trust or transfer ownership to other users. This allows for dynamic changes in the distribution of land ownership within the community land trust.

While this contract offers a robust and realistic representation of a community land trust, it serves as a starting point and should be customized according to the specific needs of the trust. As with any blockchain contract, it is critical to thoroughly test and audit the contract code before deploying it on the mainnet.

In summary, the Community Land Trust contract provides a sophisticated example of using Ethereum for managing real-world assets and transactions, demonstrating the immense potential of blockchain technology in revolutionizing how we handle and exchange value.

## Features

- **Purchase Land**: Users can purchase available land parcels by sending the specified Ether amount.
- **Sell Land**: Landowners can sell their parcels back to the trust.
- **Transfer Ownership**: Landowners can transfer their land parcels to another Ethereum address.
- **Admin Functions**: The contract owner and trustees have special permissions:
  - Set the price of land parcels.
  - Add or remove trustees.
  - Withdraw contract balance.

### Functions

This contract includes:

- `LandParcel`: A struct that represents a unique land parcel with an ID and owner.
- `landParcels`: A mapping from a land parcel ID to the LandParcel struct.
- `landOwners`: A mapping from an address to an array of land parcel IDs owned by that address.
- `purchaseLand`: A function for buying land parcels from the trust.
- `sellLand`: A function for selling land parcels back to the trust.
- `transferLand`: A function for transferring ownership of a land parcel to another user.
- `getLandParcels`: A function that returns all land parcel IDs owned by a user.

## Quick Start

> Install

``` sh
npm i
```

> Compile

``` sh
npm run compile
```

## Setup and Installation

### Prerequisites

- [Node.js](https://nodejs.org/)
- [Truffle Framework](https://www.trufflesuite.com/)
- [MetaMask](https://metamask.io/) or similar Ethereum web3 provider

### Steps

1. Clone this repository:

   ```bash
   git clone [Repository Link]
   ```

2. Change into the directory:

   ```bash
   cd CommunityLandTrustContract
   ```

3. Install dependencies:

   ```bash
   npm install
   ```

4. Compile the contract:

   ```bash
   truffle compile
   ```

5. Deploy the contract to a local Ethereum network using Truffle:

   ```bash
   truffle migrate --reset
   ```

Of course! Here's an expanded ""Usage"" section for the `README.md` detailing more function calls:

---

## Usage

1. **Buying Land**:

   ``` javascript
   contractInstance.purchaseLand({value: etherAmount});
   ```

2. **Selling Land**:

   ``` javascript
   contractInstance.sellLand(parcelId);
   ```

3. **Transferring Land**:

   ``` javascript
   contractInstance.transferLand(parcelId, recipientAddress);
   ```

4. **Setting Land Price (Trustees only)**:

   ``` javascript
   contractInstance.setLandPrice(newPrice);
   ```

5. **Fetching Land Parcels Owned by an Address**:

   ``` javascript
   let parcelsOwned = await contractInstance.getLandParcels(ownerAddress);
   console.log(""Land Parcels:"", parcelsOwned);
   ```

6. **Adding a Trustee (Owner only)**:

   ``` javascript
   contractInstance.addTrustee(newTrusteeAddress);
   ```

7. **Removing a Trustee (Owner only)**:

   ``` javascript
   contractInstance.removeTrustee(trusteeAddress);
   ```

8. **Withdrawing Contract Balance (Owner only)**:

   ``` javascript
   contractInstance.withdraw();
   ```

9. **Fetching Land Details by Parcel ID**:

   ``` javascript
   let landParcel = await contractInstance.landParcels(parcelId);
   console.log(""Land Owner:"", landParcel.owner);
   ```

10. **Checking Trustee Status**:

   ``` javascript
   let isTrustee = await contractInstance.trustees(addressToCheck);
   console.log(""Is Trustee:"", isTrustee);
   ```

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",0,0,2,0,real-estate,"[block-foundation, blockchain, blockfoundation, clt, community, community-land-trust, eth, ethereum, real-estate, real-estate-management, sol, solidity]",0
estated,admin,estated,https://github.com/estated/admin,https://api.github.com/repos/admin/estated,,,0,0,2,0,real-estate,"[admin, graphql, nodejs, react, real-estate]",0
block-foundation,solidity-digital-twin,block-foundation,https://github.com/block-foundation/solidity-digital-twin,https://api.github.com/repos/solidity-digital-twin/block-foundation,Solidity Smart Contract: Digital Twin,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-digital-twin/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-digital-twin)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Digital Twin</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-digital-twin/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-digital-twin/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-digital-twin/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-digital-twin/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-digital-twin/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**This repository contains a smart contract for a Digital Twin of a building, which fetches real-time data using Chainlink Oracles. This data includes temperature, humidity, occupancy, energy consumption, structural health, water consumption, and air quality. Additionally, the contract allows for the logging of maintenance reports.**

## Introduction

This Building Digital Twin Smart Contract creates a digital representation of a physical building. The digital twin concept is an important aspect of modern construction and building management as it allows for real-time monitoring, predictive maintenance, and simulations of different scenarios.

This smart contract utilizes Chainlink, a decentralized oracle network, to securely retrieve and write real-world data onto the blockchain. The parameters fetched include environmental aspects such as temperature and humidity, occupancy levels, energy and water consumption levels, and air quality data. It also considers the structural health of the building, providing a comprehensive digital overview of the physical building's state.

Moreover, the contract allows the owner to log maintenance reports, thereby enabling an integrated overview of not just the physical parameters but also the maintenance and repair history.

With the use of modifiers, this contract ensures that only the owner of the contract can update the parameters and add maintenance reports, providing a robust access control mechanism.

This contract is an example of the versatility and potential of Ethereum smart contracts, and how they can interface with real-world data via oracles. By using this, building owners, management, and residents could have a clearer picture of the building's condition, maintenance needs, and usage patterns in real-time.

## Quick Start

> Install

``` sh
npm i
```

> Compile

``` sh
npm run compile
```

## Features

- **Real-time Building Data**: Use Chainlink Oracles to fetch and update building parameters.
- **Maintenance Reports**: Log and retrieve maintenance activities and timestamps.
- **Owner Only Actions**: Restricted access functions for the building owner to maintain control over data and settings.

## Prerequisites

- [Node.js](https://nodejs.org/)
- [Truffle](https://www.trufflesuite.com/)
- [Ethereum Wallet](https://metamask.io/): For interacting with the deployed contract.
- [Chainlink Node](https://docs.chain.link/docs/running-a-chainlink-node): If you want to run your own oracle.

## Installation

1. Clone the repository:

```bash
git clone https://github.com/your-repository-link.git
```

2. Navigate to the repository folder:

```bash
cd path-to-folder
```

3. Install dependencies:

```bash
npm install
```

## Usage

1. Deploy the contract:

```bash
truffle migrate --network desired_network
```

2. Interact with the contract functions using your preferred method (Truffle console, web interface, etc.).

## Testing

1. To run tests:

```bash
truffle test
```

2. Ensure all tests pass and verify the coverage report.

## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate-management,"[architecture, bim, block-foundation, blockchain, blockfoundation, building, chainlink, construction, digital-twin, eth, ethereum, hardhat, oracle, real-estate-management, smart-contracts, sol, solidity]",0
Okiki-Olugunna,Web3-Estates,,https://github.com/Okiki-Olugunna/Web3-Estates,https://api.github.com/repos/Web3-Estates/Okiki-Olugunna,buy & sell real estate using NFTs,"# WEB3 ESTATES

## Buy & Sell Real Estate Properties using NFTs
<br>

<img src=""https://user-images.githubusercontent.com/92333005/202707606-08d035ea-3adb-4fa4-b252-40524ac47123.png"" width=""650""/>


### Tech Stack & Tools Used

- Solidity (Smart Contracts)
- Javascript (Writing Tests & Frontend)
- [Hardhat](https://hardhat.org/) (Development Framework)
- [Ethers.js](https://docs.ethers.io/v5/) (Blockchain Interaction)
- [React.js](https://reactjs.org/) (Frontend Framework)

<br>

### To See This Up & Running:

1. Install [NodeJS](https://nodejs.org/en/)

2. Clone / Download this Repository

3. Install the Dependencies:

   - `npm install`

4. Run the tests

   - `npx hardhat test`

5. Start the Hardhat node

   - `npx hardhat node`

6. Run the deployment script

   - In a separate terminal execute:
   - `npx hardhat run ./scripts/deploy.js --network localhost`

7. Start the frontend

   - `npm run start`
",0,0,1,0,real-estate,"[erc721, hardhat, javascript, nfts, react-js, real-estate, solidity]",0
block-foundation,rfc,block-foundation,https://github.com/block-foundation/rfc,https://api.github.com/repos/rfc/block-foundation,Request for Comments,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/rfc/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/rfc)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Block Foundation RFC</h1>
    <h3 align=""left"">Requests for Comments</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/rfc/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/rfc/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/rfc/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/rfc/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/rfc/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to the Request for Comments (RFC) Repository of the Block Foundation!**

## Introduction

This repository is an essential part of our journey towards developing a transparent and collaborative foundation. It's where we host all our Requests for Comments (RFCs), documents that outline and describe proposed changes or additions to the Block Foundation's projects, procedures, or protocols.

RFCs play a vital role in our development and decision-making process. They enable open discussion, collective decision-making, and community involvement. Each RFC provides a comprehensive view of the proposed changes, enabling anyone interested in the future direction of the Block Foundation to get involved and voice their opinions.

We encourage contributions from anyone within our community, regardless of their technical knowledge or experience with the Block Foundation's work. Whether you're a veteran developer, an interested party, or someone new to blockchain technology and architecture, your perspectives are welcome and valuable.

Each RFC has its own discussion thread where you can comment, ask questions, or express support or concerns. Before commenting, please make sure to read our guidelines and respect the opinions of others.

We're looking forward to hearing your insights and ideas! Welcome to the collaborative journey towards the future of architecture and urban planning with the Block Foundation!

---

This repository is a dedicated platform for facilitating transparent and constructive discussions concerning potential changes, improvements, and enhancements to the Block Foundation's protocols, standards, and various initiatives.

Our Request for Comments (RFC) repository is the main touchpoint where ideas transform into concrete plans, bolstered by inputs from our diverse community. It serves as a democratic arena to discuss, debate, and decide on the best path forward for our blockchain and smart-contract endeavors.

Here, you can submit new RFCs, respond to existing ones, or simply get a comprehensive view of past and ongoing discussions. Your input is invaluable in shaping the future of the Block Foundation, and we highly encourage you to participate, irrespective of your technical background or expertise level.

Take a moment to review the [RFC Template](https://github.com/block-foundation/rfc/blob/main/rfc_template.md) and [RFC Process Guide](https://github.com/block-foundation/rfc/blob/main/rfc_process.md) to understand the format of an RFC and the process we follow.

Our [Code of Conduct](https://github.com/block-foundation/rfc/blob/main/CODE_OF_CONDUCT.md) outlines our expectations for participation within the Block Foundation community, as well as the steps for reporting unacceptable behavior. We ask that you follow these guidelines to ensure that our community remains a respectful and welcoming space for everyone.

Feel free to raise an issue or pull request if you have a proposal that you believe could improve the Block Foundation's projects and initiatives. We look forward to your contributions and the continued growth of the Block Foundation!

Let's build a more equitable, decentralized future together!

<!-- 

---

## Frequently Asked Questions

To help new community members get acquainted with the RFC process and our platform, we've compiled a list of Frequently Asked Questions (FAQs). Please visit our [FAQ page](https://github.com/block-foundation/rfc/blob/main/FAQ.md) for more information.

---

## Community

The Block Foundation community is a vibrant and welcoming space for individuals interested in contributing to and learning about blockchain technology and architecture. We regularly organize events, workshops, and webinars for our members. To get involved, visit our [Community Page](https://github.com/block-foundation/community).

---

## Resources

To assist you in understanding our projects, we have provided several resources, including documentation, whitepapers, and technical guides. You can find them in our [Resources section](https://github.com/block-foundation/resources).

---

## Project Roadmap

Our Project Roadmap is a dynamic and visual documentation of the strategic plan that outlines the goals of our projects and what we aim to achieve in the future. Check out our [Project Roadmap](https://github.com/block-foundation/rfc/blob/main/ROADMAP.md) to understand our vision better.

---

## Contact

For any queries, suggestions, or concerns that you would prefer to communicate directly, please contact us at [contact@blockfoundation.io](mailto:contact@blockfoundation.io). We're always happy to hear from you and will endeavor to respond promptly.

---

## Acknowledgements

We wish to express our gratitude to all our community members, contributors, and partners who have been instrumental in the growth and success of the Block Foundation. Your efforts, support, and engagement are greatly appreciated.
 -->


---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, real-estate, request-for-comments, rfc]",0
davidtstill,Fundrise_Analysis,,https://github.com/davidtstill/Fundrise_Analysis,https://api.github.com/repos/Fundrise_Analysis/davidtstill,Analysis of the real estate crowdfunding platform Fundrise,"# Fundrise: Bringing Real Estate Investing to the Mainstream

## Overiew and Origin

* Company Name-Fundrise

* Year of Incorporation-Founded in 2010 and launched in 2012

* Founders-Dan Miller and Ben Miller

* Origin of the Company-Dan and Ben both worked in commerical real estate in Washington D.C. They came up with the idea to allow local residents to invest in D.C. area real estate that the brothers were developing. Dan and Ben raised $325,000 from 175 investors to invest in their first project. Fundrise was subsequently contacted by real estate companies looking to raise capital on their platform. Dan and Ben expanded upon the platform and began raising capital from investors across the United States. Fundrise became the first company to successfully crowdfund money for real estate.     

* Funding History-According to Crunchbase, Fundrise has raised a total of $55.5 million across 7 different funding rounds. 


  ![Fundrise logo](https://learnbonds.com/wp-content/images/2020/01/fundrise-300x219-1.png ""Fundrise Logo"")


## Business Activities:

* Financial Problem Being Solved-Investing in commerical real estate historically has only been accessible to institutional or accredited investors. Accredited investors must have an annual income of $200,000 for two consecutive years or a net worth exceeding $1 million. This portion of the population comprises less than 10% of total investors. This is unfair to individual investors who could  benefit by gaining access to this to a valuable asset class that has outperformed the stock market:

  ![Stocks Vs. Real Estate](https://d9hhrg4mnvzow.cloudfront.net/join.crowdstreet.com/download-ebook/yejleg-graph_0en08w0en08w000000001.png ""Stocks Vs. Real Estate 1999-2018"")

  Not only has commerical real estate performed well over the years, but it also provides valuable diverisfication benefits, has a low correlation with with the stock market, and typically provides higher yields. Real estate also happens to be the world's largest asset class worth estimated $228 trillion. Individual investors are not being given the same access to both the largest and one of the best performing assset classes. Unsurpisingly, as a result, individual investors are underweight this alternative investment class. Fundrise proposes to change the average investor's portfolio allocation, which typically consists of stocks and bonds only:

  ![Fundrise portfolio model](https://fundrise-cms.s3.amazonaws.com/fundrise-cms-1503596832.png ""The Old Way Vs. The Fundrise Way"")
Fundrise allows for individual investors to invest as little as $500 in high quality commerical real estate. Fundrise does all the work; they source the deals, perform the necessary due dilligence, and partner with local operators to develop the properties. After determining the investor's risk preference, Fundrise deploys the money into a diverse portfolio of real estate projects. The vertically integrated platform also charges lower fees by cutting out brokers and thid parties. 

* Intended Customer/Market Size/Competitive Advantage-Fundrise is able to raise money from both accredited and non-accredited investors. Fundrise markets itself as a simple way to diversify one's porfolio and gain exposure to an important asset class. It leverages technology to drive costs down and automatically puts all investors in a diversified portfolio of properties. While investors can invest as little as $500, the average investment on the platform is $5,000. This would likely indicate that most of folks investing on the platform are retail investors. 
  
  The market size is arguably quite large. Any U.S. resident over the age of 18 can invest. While it is probably unrealstic that retail investors portfolios will ever mimic the complex strategies employed by large insitutions, retail investors have trillions invested in investable assets. Fundrise does not require a huge fundamental shift in asset allocations to be successful. Fundrise also offers support for essentially every account type except via a 401(k):

  1. Individual account
  2. Joint account
  3. Entity account
  4. Trust account
  5. IRA
  
    Fundrise has a number of competitors in the crowdfunding real estate field. Some of these companies competitors include Crowdstreet, Realty Mogul, Peerstreet, AcreTrader etc. Fundrise has a few advantages over these competitors. First and perhaps most importantly, Fundrise does not require accredited investors to invest on their platform. Secondly, investors are offered a diversified portfolio of properties (in a vehicle Fundrise calls an eReit). Third, quarterly redemptions are available, eamngng this is more liquid than a traditional alternative investment. Lastly, Fundrise has a longer and more successful track record:

    ![Fundrise performance](https://www.investingsimple.com/wp-content/uploads/2018/12/Screen-Shot-2020-03-01-at-8.30.44-PM-768x366.png ""Fundrise Historical Performance"")

* Technologies Being Used-Fundrise claims that it has designed a ""full-stack financial integration"". Specifically, the company has developed a proprietary cloud-based software with a team of securities, programming and finance professionals, which enables vertically integrated transactions. According to Fundrise, this helps to explain why its fees are lower than than the (publicly traded) products that were launched in the last few years by their much large and better funded competitors-Blackstone and Starwood. The additional reason for the lower costs is due to charging the developers for origination fees rather than investors:

  ![Fundrise cost comparison](https://fundrise-cms.s3.amazonaws.com/fundrise-cms-1516824769.png ""Fundrise Cost Comparison"")

## Landscape:

* Financial Industry Domain-Fundrise is in the lending/crowfunding domain of the fintech world. 

* Major Trends and Innovations-Crowdfunding generated $17.2 billion in North America in 2019. This was an increase of almost 34% YoY. The capital committed to real estate development in the crowdfunding sector has outgrown other industries in this space. The outperformance is likely due to the strong appeal from both developers and investors:

  ![Real Estate vs Other Industries](https://justcoded.com/wp-content/uploads/2018/04/investment-crowdfunding-industry-report.png ""Real Estate Outpacing Other Industries"")

* Other Major Companies in the Domain-There are several competitors in the real estate crowdfunding space. Example include CrowdStreet, PeerStreet, EquityMultiple, RealtyMogul, RealCrowd etc. Generally the 3 biggest differences between Fundrise and other real estate crowdfunding platforms are as follows: 
  
  1. Lower minimum investment threshold  
  2. Only able to invest in a porfolio of properties
  3. Not required to be an accredited investor

## Results:

* Business Impact-In 2019, over 100,000 investors participated in real estate crowdfunding syndications, with an average size ofering of $2.3 million. The average preferred return was anywhere between 5-10%. The returns earned by these investors may not have been possible without the real estate crowfunding platforms. Not only does this help individuals to gain wealth, but the platforms also help to create more efficiency in the market. As technology disrupts the industry and more people are able to invest in real estate, this will create more transparency in an industry typically categorized by a select few (i.e. brokers).

* Core Metrics- As of December 31, 2018, Fundrise had originated ~$660 million in both equity and debt investments. This was deployed across ~$3.2 of real estate property. The company had $488 million in AUM and over 60,000 active investors. AUM and active investors increased 94% and 153% respectively YoY. This business continues to thrive as one of the first companies in the real estate crowdfunding space:

  ![Fundrise company metrics](https://www.financialsamurai.com/wp-content/uploads/2019/06/fundrise-AUM-investor-employees-growth-728x221.png ""Fundrise Company Metrics"")

* Performance Relative to Competition-Fundrise was selected for the Forbes Fintech 50 list in 2015, 2016, 2017 and 2019. Interestingly, compared to the other real estate focused companies on Forbes list, Fundrise had the least amount of funding. As an example, one of the other real estate companies on Forbes list, Cadre, has received funding from legendary VC firm Andreessen Horowitz and was valued at $800 million. Cadre also boats about hiring people from top tier firms such as Apple, Goldman Sachs and Blackstone. Other notable firms on the Forbes list include companies like Acorns, Robinhood and Coibase. It is quite telling that Fundrise made this list.  

## Recommendations:

* Advice to Fundrise-Fundrise has a solid track record and good name recognition as one of the first movers in the real estate crowdfunding space. They are recognized in the industry and have over 60,000 investors. With that said, 60,000 investors is a very small percentage of the total retail investors in the U.S.. I think it would make sense for Fundrise to partner with a large brokerage firm like Fidelity or Schwab. The case for investing in real estate is compelling; real estate should be a cornerstone of investors portfolios. 

* How Partnering Would Benefit Fundrise-Fundrise needs assets to invest. Large brokerage firms like Schwab and Fidelity have trillions in assets and they are constantly trying to innovate as they compete with new Fintech startups such as Acorns and Robinhood. If a large brokerage could explain to their millions of retail investors on how real estate can benefit one's portfolio, and without having to build their own platform, it would be a win-win for both companies. 

* Additional Technologies Needed-Some integration would be required so that retail investors could see their stock and real estate portfolios on the same platform. There are a number of investment tracking apps that could potentially be utilized such as Personal Capital, SigFig Portfolio Tracker, and Mint.com. Perhaps Fundrise and their brokerage partner might encourage their client to use one of the websites to manage all their entire portfolios. 

 * Whether Technologies are Appropiate-If Fundrise and their partner brokerage firm could not integrate their platforms, then there might be privacy or cyber security concerns if all their clients link their data to a third party website. Investors may be less likely to invest in Fundrise if they cannot obtain a holistic view of their portfolio. 

 ### Sources:
  1. https://blogs.wsj.com/venturecapital/2014/09/26/renren-backed-fundrise-bulks-up-in-real-estate-crowdfunding-sector/
  2. https://www.fool.com/millionacres/real-estate-investing/crowdfunding/fundrise-review-commercial-real-estate-crowdfunding/3. 
  3. https://www.bizjournals.com/washington/blog/techflash/2014/09/fundrise-the-jobs-act-and-how-crowdfunding-came-to.html
  4. https://www.financialsamurai.com/how-does-real-estate-crowdfunding-work/
  5. https://en.wikipedia.org/wiki/Fundrise
  6. https://www.forbes.com/fintech/2019/#ac946f92b4c6
  7. https://www.smartowner.com/blog/savills-report-how-much-is-the-world-worth/ ",0,0,2,0,real-estate,"[crowdfunding, fundrise, individual-investors, real-estate]",0
block-foundation,bibliography,block-foundation,https://github.com/block-foundation/bibliography,https://api.github.com/repos/bibliography/block-foundation,Block Foundation Research Bibliography,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/bibliography/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/bibliography)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Block Foundation Bibliography</h1>
    <h3 align=""left"">Research References</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/bibliography/master/res/block_foundation-books.jpg""  alt=""Block Foundation Bibliography"">

### Contents

- [Introduction](#introduction)
- [Topics](#topics)
- [Academic Resources](#academic-resources)
  - [Zotero Group](#zotero-group)
  - [Citation](#citation)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/bibliography/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/bibliography/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/bibliography/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/bibliography/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/bibliography/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

The Block Foundation is dedicated to reshaping architectural practice and housing systems through the innovative use of blockchain technology, has generated a robust body of work, theoretical discussions, practical explorations, and critical analyses. Our endeavor to create an equilibrium in the real estate market and foster innovative architectural solutions has sparked a diverse range of academic, technical, and professional publications.

This reference bibliography serves as a curated list of key texts and resources that have informed our work and continues to guide our approach. The selection includes seminal writings on blockchain technology, architectural theory and practice, sustainable urban development, digital economies, and decentralized market designs. It also encompasses studies on the intersection of these areas, highlighting the multidisciplinary and integrative nature of our work at the Block Foundation.

The bibliography is organized by topic, facilitating easy access to resources in specific areas of interest. Each entry provides a brief annotation, summarizing the main arguments, methods, and contributions of the work. This resource is aimed to be of value to a broad range of readers: from architects, urban planners, and blockchain developers, to policy makers, investors, and anyone interested in the innovative intersections of architecture, housing systems, and digital technologies.

As our work continues to evolve, so will this bibliography, reflecting our commitment to remain at the forefront of thought and practice in these rapidly changing fields. This collection is not merely a reflection of the past; it is a living document, a tool for critical engagement, and a launchpad for future explorations.

The Block Foundation believes in open dialogue, collaboration, and the sharing of knowledge. We welcome suggestions for additional resources and invite ongoing conversation about the ideas and issues these works present. We hope this bibliography serves as a useful point of departure for these vital discussions.

**Download the [Block Foundation Bibliography](https://raw.githubusercontent.com/block-foundation/bibliography/master/dist/block_foundation-bibliography.pdf).**

## Topics

<div>
<img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/bibliography/master/res/block_foundation-topics.png"" width=""50%"" alt=""Block Foundation Topics"">
</div>

The topics covered in the Block Foundation's bibliography are as follows. Each topic encompasses a range of subtopics and areas of interest that align with the Block Foundation's focus on reshaping architectural practice and housing systems through the innovative use of blockchain technology. The bibliography includes seminal writings, theoretical discussions, practical explorations, and critical analyses related to these areas, highlighting the multidisciplinary and integrative nature of the foundation's work. It aims to provide resources for architects, urban planners, blockchain developers, policy makers, investors, and anyone interested in the innovative intersections of architecture, housing systems, and digital technologies.

``` mermaid
mindmap
Block Foundation
    id(Architectural Theory and Practice)
      id(Urban Planning)
      id(Construction)
    id(Real Estate)
      id(Housing)
    id(Blockchain Technology)
      id(Smart Contracts)
      id(Oracles)
    id(Digital Economies)
      id(Decentralized Markets)
      id(Network States)
    id(Mechanism Design)
    id(Law)

```

## Academic Resources

### Zotero Group

The complete bibliography can be accessed via our Zotero Group: [zotero.org/groups/block](https://www.zotero.org/groups/block).

### Citation

#### APA

> A sample citation (APA 6th edition) might look like:  

``` txt
van Vianen, L. B., & Feringa, J. D. (2023). Block Foundation Bibliography (Version WIP) [Computer software]. https://doi.org/http://doi.org/10.5281/zenodo.8173471
```

> BibTeX

``` bib
@software{van_Vianen_Block_Foundation_Bibliography_2023,
author = {van Vianen, Lars Bastiaan and Feringa, Jelle David},
doi = {http://doi.org/10.5281/zenodo.8173471},
license = {cc-by-nd-4.0},
month = jan,
title = {{Block Foundation Bibliography}},
url = {https://github.com/block-foundation/bibliography},
version = {WIP},
year = {2023}
}
```

#### DOI

Block Foundation Bibliography has a DOI: [10.5281/zenodo.8173471](http://doi.org/10.5281/zenodo.8173471)

#### CITATION.cff

You may also cite Block Foundation using [CITATION.cff](CITATION.cff).

## Development Resourcees

### Roadmap

```mermaid
gantt
      dateFormat  YYYY-MM-DD
      title Block Foundation Bibliography

      section Automation
      Zotero Group              :done,    des1, 2023-06-01,20123-06-14
      Zotero Connection         :active,  des2, 2023-06-09, 3d
      Zenodo Connection         :active,  des3, after des2, 5d
      GitHub Action             :         des4, after des3, 5d

      section Layout
      Latex Template                      :crit, done, 2023-07-01,14d
      Topic Tags                          :crit, done, after des1, 2d
      Create tests for parser             :crit, active, 3d

      section Documentation
      GitHub Repository                   :active, a1, after des1, 3d

      section Publication
      Version 1                           :after doc1, 3d

```

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, bibliography, blockchain, blockfoundation, real-estate]",0
OpenEstate,OpenEstate-PHP-Wrapper-Joomla,OpenEstate,https://github.com/OpenEstate/OpenEstate-PHP-Wrapper-Joomla,https://api.github.com/repos/OpenEstate-PHP-Wrapper-Joomla/OpenEstate,a component that integrates OpenEstate-PHP-Export into your Joomla website,"OpenEstate-PHP-Wrapper for Joomla 0.4.1
=======================================

This component integrates [*OpenEstate-PHP-Export*](https://github.com/OpenEstate/OpenEstate-PHP-Export) 
(in **version 1.x**) into a *Joomla* based website. 


Description
-----------

### English

The [*OpenEstate* project](https://openestate.org) provides a freeware software - called *OpenEstate-ImmoTool* - for 
small and medium sized real estate agencies all over the world.

As one certain feature of this software, the managed properties can be exported to any website that supports *PHP*. 
Together with this component the exported properties can be easily integrated into a *Joomla* based website without any 
frames.

**Please notice:** This component version does only work with PHP exports in version 1.x!

### Deutsch

Im Rahmen des [*OpenEstate*-Projekts](https://openestate.org) wird unter anderem eine kostenlose Immobiliensoftware 
unter dem Namen *OpenEstate-ImmoTool* entwickelt. Dies ist eine Softwarel√∂sung f√ºr kleine bis mittelgro√üe 
Immobilienunternehmen.

Unter anderem k√∂nnen die im *OpenEstate-ImmoTool* verwalteten Immobilien als *PHP*-Skripte auf die eigene Webseite 
exportiert werden. Mit Hilfe dieser Komponente kann der *PHP*-Export unkompliziert in eine auf *Joomla* basierende 
Webseite integriert werden.

**Bitte beachten:** Diese Version der Komponente kann nur mit PHP-Exporten in Version 1.x genutzt werden!


Changelog
---------

### 0.4.1

-   dropped support for *Joomla* 1.x & 2.x
-   fixed an error with PHP 7.1+
-   minor fixes and improvements on the codebase
-   switched license to GPLv2 or later
-   tested against the latest version of *Joomla* (3.8.13)


### 0.4

-   use the same version numbering for the different Joomla packages
-   less strict validation of the script URL in the component configuration
-   translated any source code comments into English
-   made some syntax fixes
-   tested against *Joomla* 1.5.26 / 2.5.27 / 3.3.6

### 0.1.8 / 0.2.8 / 0.3.8

-   Version 0.3.8 is the first public release for *Joomla* 3.0 / Platform 12.1.
-   Some smaller fixes

### 0.1.7 / 0.2.7

-   make use of meta elements, that were specified for the menu entry
-   put the configured `$MetaDescriptionTexts` from `myconfig.php` into the meta `description` element of property 
    listing pages

### 0.1.6 / 0.2.6

-   Some smaller fixes

### 0.1.5 / 0.2.5

-   Predefined filters / orderings are handled incorrectly under certain circumstances.
    (see [forum](http://board.openestate.org/viewtopic.php?f=7&t=8698))
-   Show all available ordering-options within administration dashboard.
    (see [forum](http://board.openestate.org/viewtopic.php?f=7&t=8763#p12562))

### 0.1.4 / 0.2.4

-   some compatibility fixes for *Joomla* 2.5
-   put selected language as meta `language` element into the page
-   put the title of the selected property as `<title>`element  into the page
-   put the short description of the selected property meta `description` element into the page
-   put the keywords of the selected property meta `keywords` element into the page
-   put general stylesheet (`style.php`) and additional stylesheets into the `<head>` section of the page

### 0.1.3 / 0.2.3

-   Reset filter selection, if a property page is accessed for the first time or if the website visitor jumps between 
    multiple property pages. 
    (see [Forum](http://board.openestate.org/viewtopic.php?f=7&t=3329))
-   Show a **notice** instead of an **error** message on the website, if *OpenEstate-ImmoTool* is currently exporting 
    properties to the webspace.
    (see [Forum](http://board.openestate.org/viewtopic.php?f=6&t=3208))
-   Fixed problem with SEO URL's (URL-Rewrite), that occurred solely on 1&1 webspaces.

### 0.1.2 / 0.2.2

-   Show an error message on the website, if *OpenEstate-ImmoTool* is currently exporting properties to the webspace.
    (see [Bug-Tracker #594](http://tracker.openestate.org/view.php?id=594))
-   Improved handling of SEO URL's for enabled and disabled `mod_rewrite`.
    (see [Joomla documentation](http://docs.joomla.org/How_do_you_implement_Search_Engine_Friendly_URLs_%28SEF%29%3F))
-   Enter a text or HTML code in the administration of a menu entry, that is displayed before / after the wrapped 
    content.
-   Property search fails in multilingual installations of *Joomla* 1.6 / 1.7 / 2.5.
    (see [Forum](http://board.openestate.org/viewtopic.php?f=16&p=3929#p3870))

### 0.1.1 / 0.2.1

-   Fixed compatibility issue with *Internet Explorer*.
    (see [Forum](http://board.openestate.org/viewtopic.php?f=7&t=1949))

### 0.2

-   First public release for *Joomla* 1.6 / 1.7 / 2.5.

### 0.1

-   First public release for *Joomla* 1.5.


License
-------

[GNU General Public License 2](http://www.gnu.org/licenses/gpl-2.0.html) or later
",1,1,4,0,real-estate,"[joomla, openestate, real-estate, realestate]",0
AnthonyBloomer,smartmove-api,,https://github.com/AnthonyBloomer/smartmove-api,https://api.github.com/repos/smartmove-api/AnthonyBloomer,An API to retrieve property price statistics in Ireland and the UK.,"# smartmove API
A RESTful API to retrieve property price statistics in Ireland and the UK. 

[Learn more about Smartmove](https://anthonybloomer.github.io/smartmove/).

## Installation

```
virtualenv env
source env/bin/activate
pip install -r requirements.txt
python app.py
```

## Endpoints

### Charts

Get JSON data that can easily be consumed by the Google Charts API.

#### Line Chart

This endpoint returns the average sale price for each year for a given county.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/charts/<county_name>'
```

> The above command returns JSON structured like this:

```json
{
  ""cols"": [
    {
      ""id"": ""Year"",
      ""label"": ""Year"",
      ""type"": ""number""
    },
    {
      ""id"": ""Price"",
      ""label"": ""Price"",
      ""type"": ""number""
    }
  ],
  ""rows"": [
    {
      ""c"": [
        {
          ""v"": 2010
        },
        {
          ""v"": 333401
        }
      ]
    }
  ]
}
```

##### HTTP Request

`GET http://0.0.0.0:33507/api/v1/charts/<county_name>`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|                         
| county_name    | The county name.                         |
| api_key    | Your API Key.                                |

#### Pie Chart

This endpoint returns the average sale price for each county.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/charts/counties/average-sale-price'
```

> The above command returns JSON structured like this:

```json
{
  ""cols"": [
    {
      ""id"": ""County"",
      ""label"": ""County"",
      ""type"": ""string""
    },
    {
      ""id"": ""Price"",
      ""label"": ""Price"",
      ""type"": ""number""
    }
  ],
  ""rows"": [
    {
      ""c"": [
        {
          ""v"": ""Dublin""
        },
        {
          ""v"": 355355.15
        }
      ]
    }
  ]
}
```

##### HTTP Request

`http://0.0.0.0:33507/api/v1/charts/counties/average-sale-price`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|                         
| county_name    | The county name.                         |
| api_key    | Your API Key.                                |


### Counties

Get property sale statistics for each county.

#### Get All Counties

This endpoint retrieves a list of county sale statistics.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/counties/'
```

> The above command returns JSON structured like this:

```json
[
  {
    ""average_sale_price"": ""131576.43"",
    ""county_name"": ""Carlow"",
    ""id"": ""1"",
    ""total_number_of_sales"": ""2424""
  }
]
```

##### HTTP Request

`GET http://0.0.0.0:33507/api/v1/counties/`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| sort_by    | The sort type.                               |
| sort_order | The sort order.                              |
| api_key    | Your API key.                                |

#### Get County By ID

This endpoint retrieves a county by ID

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/counties/<id>'
```

> The above command returns JSON structured like this:

```json
{
  ""average_sale_price"": ""100182.68"",
  ""county_name"": ""Cavan"",
  ""id"": ""2"",
  ""total_number_of_sales"": ""3842""
}
```

##### HTTP Request

`GET http://0.0.0.0:33507/api/v1/counties/<id>`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| id         | The county Identifier.                       |
| api_key    | Your API key.                                |

#### County comparison


This endpoint compares sale statistics between two counties.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/counties/compare?county1=<county1>&county1=<county2>'
```

> The above command returns JSON structured like this:

```json
[
  {
    ""average_sale_price"": ""196669.81"",
    ""county_name"": ""Cork"",
    ""id"": 6,
    ""total_number_of_sales"": ""25367""
  },
  {
    ""average_sale_price"": ""355355.15"",
    ""county_name"": ""Dublin"",
    ""id"": 9,
    ""total_number_of_sales"": ""75449""
  }
]
```

##### HTTP Request

`GET http://0.0.0.0:33507/api/v1/counties/compare?county2=<county2>&county1=<county1>`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| api_key    | Your API key.                                |
| county1    | The first county                             |
| county2    | The second county                            |


#### County Statistics by Year

This endpoint retrieves county sale statistics for a given county name and year.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/counties/<county>/<year>'
```

> The above command returns JSON structured like this:

```json
[
  {
    ""average_sale_price"": ""412000"",
    ""county_name"": ""Dublin"",
    ""id"": ""42"",
    ""total_number_of_sales"": ""14592"",
    ""year"": ""2016""
  }
]
```

##### HTTP Request

`GET http://0.0.0.0:33507/api/v1/counties/<county>/<year>`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| api_key    | Your API key.                                |
| county   | The county name                      |
| year    | The year                           |


### Towns

Get property sale statistics for each town.

#### Get all towns.

Get a list of town sale statistics.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/towns/'
```

> The above command returns JSON structured like this:

```json
[
  {
    ""average_sale_price"": ""109899.44"",
    ""id"": ""1"",
    ""total_number_of_sales"": ""177"",
    ""town_name"": ""Abbeyfeale""
  },
  {
    ""average_sale_price"": ""85346.15"",
    ""id"": ""2"",
    ""total_number_of_sales"": ""13"",
    ""town_name"": ""Achill Island""
  }
 ]

```
##### HTTP Request

`http://0.0.0.0:33507/api/v1/towns/`

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| api_key    | Your API key.                                |
| sort_by    | The sort type. Result can be sorted by ID or price.         |
| sort_order | The sort order. Can be set to asc or desc    |

#### Get Town By ID

This endpoint retrieves a town by ID

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/towns/<id>'
```

> The above command returns JSON structured like this:

```json
{
  ""average_sale_price"": ""226649.47"",
  ""id"": ""8"",
  ""total_number_of_sales"": ""787"",
  ""town_name"": ""Ashbourne""
}
```

###### HTTP Request

`GET http://0.0.0.0:33507/api/v1/towns/<id>`

###### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| id         | The Town Identifier.                     |
| api_key    | Your API key.                                |


#### Town comparison


This endpoint compares sale statistics between two towns.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/towns/compare?town2=<town>&town1=<town>'
```

> The above command returns JSON structured like this:

```json
[
  {
    ""average_sale_price"": ""263969.22"",
    ""id"": ""3"",
    ""total_number_of_sales"": ""199"",
    ""town_name"": ""Adare""
  },
  {
    ""average_sale_price"": ""222968.23"",
    ""id"": ""28"",
    ""total_number_of_sales"": ""733"",
    ""town_name"": ""Blanchardstown""
  }
]
```

##### HTTP Request

`GET http://0.0.0.0:33507/api/v1/towns/compare?town2=<town1>&town1=<town2>`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| api_key    | Your API key.                                |
| town1    | The first town                                 |
| town2    | The second town                                |


### Properties

Get property sales statistics.

#### Get All Properties

This endpoint retrieves all properties.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/properties/'
```

> The above command returns JSON structured like this:

```json
[
  {
    ""address"": ""5 Braemor Drive, Churchtown, Co.Dublin"",
    ""county_name"": ""Dublin"",
    ""date_time"": ""2010-01-01 00:00:00"",
    ""description"": ""Second-Hand Dwelling house /Apartment"",
    ""id"": ""1"",
    ""latitude"": ""53.3498"",
    ""longitude"": ""-6.26031"",
    ""price"": ""343000.00"",
    ""sale_type"": ""1""
  }
]
```

##### HTTP Request

`GET http://0.0.0.0:33507/api/v1/properties/`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| page       | The page number.                             |
| api_key    | Your API key.                                |
| from_date  | The year to retrieve property listings from. |
| to_date    | The year to retrieve property listings to.   |
| country_id | The country ID.                              |
| sale_type  | The property sale type.                      |


#### Get Property By ID

This endpoint retrieves a property by ID

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/properties/<id>'
```

> The above command returns JSON structured like this:

```json
{
  ""address"": ""5 Braemor Drive, Churchtown, Co.Dublin"",
  ""county_name"": ""Dublin"",
  ""date_time"": ""2010-01-01 00:00:00"",
  ""description"": ""Second-Hand Dwelling house /Apartment"",
  ""id"": ""1"",
  ""latitude"": ""53.3498"",
  ""longitude"": ""-6.26031"",
  ""price"": ""343000.00"",
  ""sale_type"": ""1""
}
```

###### HTTP Request

`GET http://0.0.0.0:33507/api/v1/properties/<id>`

###### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| id         | The Property Identifier.                     |
| api_key    | Your API key.                                |


#### Search Properties

This endpoint retrieves property listings for the given search query.

```shell
curl -X GET --header 'Accept: application/json' 'http://0.0.0.0:33507/api/v1/properties/search/<search_term>'
```

> The above command returns JSON structured like this:

```json
[
  {
    ""address"": ""5 Braemor Drive, Churchtown, Co.Dublin"",
    ""county_name"": ""Dublin"",
    ""date_time"": ""2010-01-01 00:00:00"",
    ""description"": ""Second-Hand Dwelling house /Apartment"",
    ""id"": ""1"",
    ""latitude"": ""53.3498"",
    ""longitude"": ""-6.26031"",
    ""price"": ""343000.00"",
    ""sale_type"": ""1""
  },
  {
    ""address"": ""1 Meadow Avenue, Dundrum, Dublin 14"",
    ""county_name"": ""Dublin"",
    ""date_time"": ""2010-01-04 00:00:00"",
    ""description"": ""Second-Hand Dwelling house /Apartment"",
    ""id"": ""3"",
    ""latitude"": ""53.3498"",
    ""longitude"": ""-6.26031"",
    ""price"": ""438500.00"",
    ""sale_type"": ""1""
  }
]
```

##### HTTP Request

`GET http://0.0.0.0:33507/api/v1/properties/search/<search_term>`

##### Query Parameters

| Parameter  | Description                                  |
|------------|----------------------------------------------|
| page       | The page number.                             |
| api_key    | Your API key.                                |
| from_date  | The year to retrieve property listings from. |
| to_date    | The year to retrieve property listings to.   |
| country_id | The country ID.                              |
| sale_type  | The property sale type.                      |
| search_term | The search query                            |


## Examples

You can find some JavaScript and Python examples in the [examples](https://github.com/AnthonyBloomer/smartmove-api/tree/master/examples) folder.

## Rate Limits

The Smartmove API includes rate limiting. The API allows 2,000 requests per day and 100 requests per hour.

## Authentication

The Smartmove API requires authentication. To use the Smartmove API, you must include an API key when loading the API. Please note this feature is disabled by default when running the API locally.


## Online Demo

Currently migrating from local machine to Heroku and right now is incomplete   
No API key is required to run the API methods.

[View on Heroku](https://smartmove-api.herokuapp.com)
",4,4,2,12,real-estate,"[api, flask, flask-restplus, housing, housing-prices, properties, properties-api, property, python, real-estate, rest, rest-api, restful-api]",0
wynander,homebase,,https://github.com/wynander/homebase,https://api.github.com/repos/homebase/wynander,Visualizes housing trends for early-stage real estate investors,"*HOMEBASE*

Kepler.gl inspired web-app used to visualize housing trends, allowing for early-stage real estate investors to find their market.  Uses GIS principles to join geospatial and economic data sets. 

Made with React, DeckGL (w/ Mapbox baselayer), and Zustand

Current status: Complete. Minor updates expected.",0,0,1,0,real-estate,"[deckgl, gis, gis-data, mapbox, mapbox-gl-js, react, real-estate, search, zillow]",0
OpenEstate,OpenEstate-Tool-HelloWorld,OpenEstate,https://github.com/OpenEstate/OpenEstate-Tool-HelloWorld,https://api.github.com/repos/OpenEstate-Tool-HelloWorld/OpenEstate,an example addon for OpenEstate-ImmoTool,"OpenEstate-Tool-HelloWorld 1.0.0
================================

*OpenEstate-Tool-HelloWorld* is an addon for the freeware real estate software [*OpenEstate-ImmoTool*](https://openestate.org), that does not provide any features for end users. Instead this addon

-   is a starting point for developers, who want to create custom addons for *OpenEstate-ImmoTool*.
-   provides a build environment, that can easily be adapted by developers for their custom addons.
-   illustrates how to extend main menu and sidebar.
-   illustrates how to specify custom extension points.
-   illustrates how to accomplish operations on a project database.
-   illustrates how to implement a basic workflow on database objects (create, update, remove).
-   illustrates how to implement permissions on a multi user project.
-   illustrates how to implement internationalization based on *GetText*.


Dependencies
------------

-   *Java* 11 or newer
-   *OpenEstate-ImmoTool* 1.0.0 or newer (including its dependencies)


Requirements for developers
---------------------------

-   *Java Development Kit* (JDK) 11 or newer
-   *IntelliJ IDEA* (recommended but not required)
    -   Other IDE's like *Eclipse* or *Netbeans* should also work. But we can't provide support for these applications.
-   *Apache Maven* 3
    -   Most IDE's already contain *Apache Maven*. In general it is not necessary to download / install *Apache Maven* separately.
-   *GetText*
    -   Almost all *Linux* distributions provide packages for *GetText*.
    -   *Windows* users may use the [binaries by *gnuwin32*](http://gnuwin32.sourceforge.net/packages/gettext.htm)
    -   *Mac OS X* users may install *GetText* via [*brew*](http://brew.sh/) or [*MacPorts*](http://www.macports.org/).


Changelog
---------

Take a look at [`CHANGELOG.md`](CHANGELOG.md) for the full changelog.


License
-------

This library is licensed under the terms of [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html). Take a look at [`LICENSE.txt`](LICENSE.txt) for the license text.


Todo
----

-   add missing javadoc comments
-   add more comments & documentations for developers
-   maybe implement some more extensions to illustrate how to use available extension points


Further information
-------------------

-   [*OpenEstate-Tool-HelloWorld* at GitHub](https://github.com/OpenEstate/OpenEstate-Tool-HelloWorld)
-   [API documentation for *OpenEstate-ImmoTool*](https://media.openestate.org/apidocs/OpenEstate-Tool/)
-   [OpenEstate website](https://openestate.org)
",0,0,4,0,real-estate,"[openestate, real-estate, realestate]",0
wp-api-libraries,wp-reso-orgid-api,wp-api-libraries,https://github.com/wp-api-libraries/wp-reso-orgid-api,https://api.github.com/repos/wp-reso-orgid-api/wp-api-libraries,A WordPress php library for interacting with RESO Organization ID API.,"# wp-reso-orgid-api
A WordPress php library for interacting with [RESO Organization ID](https://www.reso.org/ouid-api/) API.
",4,4,2,0,real-estate,"[api, real-estate, realestate, reso, reso-org-id, wordpress]",0
etewiah,awesome-real-estate,,https://github.com/etewiah/awesome-real-estate,https://api.github.com/repos/awesome-real-estate/etewiah,A curated list of awesome real estate related resources and projects,"# Awesome Real Estate [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)


> A curated list of awesome real estate resources and projects.


## Contents

- [Accelerators / Venture Funds](#accelerators)
- [Github projects](#github-projects)
- [Resources](#resources)
  - [Blogs](#blogs)
  - [Events](#events)
  - [Podcasts](#podcasts)
- [Software](#software)
  - [APIs](#apis)  
  - [Lead Page Builders](#lead-page-builders) 
  - [Website Providers](#website-providers)
- [License](#license)


## Accelerators / Venture Funds

- [Blackprint](http://www.blackprintbooster.vc) - German based proptech accelerator 
- [MetaProp](http://www.metaprop.org/) - New York based program for early stage companies
- [Moderne Ventures](https://www.moderneventures.com/) - Early stage venture fund focused on technology companies 
- [NARReach](http://www.narreach.com/) - US National Association of Realtors backed accelerator
- [Pilabs](http://pilabs.co.uk/) - European property tech venture capital firm 

## Github projects

- [EasyPropertyListings](https://github.com/easypropertylistings/Easy-Property-Listings) - WordPress plugin for property listings
- [PropertyWebBuilder](https://github.com/etewiah/property_web_builder) - Powerful, quick property listings website builder


## Resources

### Blogs

- [GeekEstateBlog](http://geekestateblog.com/) - Insightful articles with a focus on technology.
- [Notorious Rob](http://www.notorious-rob.com/) - Highly opinionated look at industry trends.


### Events

- [Inman Connect](https://www.inman.com/event/icsf17/) - Week long real estate showcase.
- [MIPIM](http://www.mipim.com/) - Leading (and rather glamorous) global real estate event held annualy over 4 days in Cannes, France.

### Podcasts

- [Listing Bits](http://listingbits.libsyn.com) - Real estate tech talk with a focus on the US.
- [Super Agents Live](https://player.fm/series/super-agents-live-real-estate-coaching) - Leading podcast for agent with insights on how to improve your game.
- [Chrisman Commentary - Daily Mortgage News](https://open.spotify.com/show/3XsABmcuSD7vdYjfE8QlyO) - A daily snapshot of what is happening in the mortgage industry and with mortgage rates.

## Software

### APIs

- [Onboard Informatics Community API](https://developer.onboard-apis.com/products/Community-API) - Provides access to a rich set of local information.
- [Rets Rabbit](http://www.retsrabbit.com) - Import real estate listings and photos from RETS or ListHub. 
- [Zoo Property](http://www.zooproperty.com/api/) - RESTful API to manage property listings.

### Lead Page Builders

- [SinglePropertyPages](https://singlepropertypages.com) - Affordable and easy to use lead page builder
- [Kunversion](https://kunversion.com) - Lead generation platform

### Website Providers

- [Listerswebs](https://listerswebs.com) - All-inclusive, fully custom website suite built specifically for marketing to home sellers
- [Easyagentpro](https://easyagentpro.com) - Website builder with CRM and MLS integrations


## License

[CC0 1.0](https://creativecommons.org/publicdomain/zero/1.0/)
",192,192,18,0,real-estate,"[awesome, awesome-list, proptech, real-estate]",0
davidski,tf-zestimate-update,,https://github.com/davidski/tf-zestimate-update,https://api.github.com/repos/tf-zestimate-update/davidski,üåéüè† Terraform deployment for update-zestimate Lambda function,"# Zestimate Update Function

> *DEPRECATED* This component has been merged into my primary mono-repo.


<!-- BEGINNING OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
## Requirements

| Name | Version |
|------|---------|
| terraform | >= 0.12.0, < 0.14.0 |
| aws | ~> 2.0 |
| aws | ~> 2.70 |
| random | ~> 2.2 |

## Providers

| Name | Version |
|------|---------|
| aws | ~> 2.0 ~> 2.70 |
| terraform | n/a |

## Inputs

| Name | Description | Type | Default | Required |
|------|-------------|------|---------|:--------:|
| aws\_profile | Name of AWS profile to use for API access. | `string` | `""default""` | no |
| aws\_region | n/a | `string` | `""us-west-2""` | no |
| bucket\_key | Location of Zestimate history file in S3. | `string` | `""data/zestimate_history.csv""` | no |
| project | Default value for project tag. | `string` | `""zestimate""` | no |
| vpc\_cidr | CIDR for build VPC | `string` | `""192.168.0.0/16""` | no |
| zpid | Zillow property ID. | `any` | n/a | yes |
| zwsid | Zillow API ID. | `any` | n/a | yes |

## Outputs

| Name | Description |
|------|-------------|
| lambda\_role\_arn | n/a |

<!-- END OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
",0,0,3,0,real-estate,"[aws, orchestration, real-estate, terraform]",0
block-foundation,community,block-foundation,https://github.com/block-foundation/community,https://api.github.com/repos/community/block-foundation,Block Foundation Community,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/community/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/community)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Community</h1>
    <h3 align=""left"">Block Foundation</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/community/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/community/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/community/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/community/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/community/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**A warm welcome to you as you join the Block Foundation Community!**

## Introduction

You're stepping into an energetic, collaborative environment where your contributions will play a crucial role in shaping our future. This is where your journey as a community contributor commences, paving the path for the enhancement of our codebase, refining our documentation, and delivering influential talks that resonate with our mission and vision.

Your expertise, perspectives, and innovative ideas are invaluable to us. Whether you're delving into our software architecture, curating insightful content for our documentation, or captivating audiences with enlightening presentations, your input will help foster our collective growth and the advancement of our foundation's objectives.

Join us as we collaborate to unshackle traditional constraints and redefine architectural possibilities with the transformative power of blockchain technology. Let's navigate this exciting path together, and make your mark on the Block Foundation Community.

## Community Guidelines

1. **Respectful Interactions**
   Our community is diverse and inclusive, and we expect all members to interact with each other respectfully, valuing everyone's ideas and perspectives. Personal attacks, harassment, or discriminatory language will not be tolerated.

2. **Open Dialogue and Constructive Criticism**
  We encourage the sharing of ideas and constructive criticism. However, all feedback should be provided respectfully and constructively. We value open-minded discussions, but not arguments that are offensive or derogatory.

3. **Respect Intellectual Property**
  All shared content should respect copyright laws and intellectual property rights. Please ensure that you have the right to distribute the content you share and acknowledge the original creators where appropriate.

4. **Confidentiality and Privacy**
  Respect for privacy is fundamental to our community. Never share or request personal information or confidential information about others without their explicit permission.

5. **Sustainability**
  As a foundation dedicated to innovative and sustainable solutions, we encourage all community members to operate with a consciousness of environmental sustainability, and to consider this principle in all discussions and activities.

6. **Honesty and Transparency**
  All community members should conduct themselves with honesty and integrity. Deceptive practices or the intentional sharing of false information is unacceptable.

7. **Collaboration and Teamwork**
  We are a collaborative community. We encourage members to work together, contribute to ongoing projects, and offer assistance to others where possible.

8. **Positive Participation**
  We value the contributions of all members. Participate actively, share your knowledge, and help foster a vibrant and enriching community environment.

## Thanks

As you have made it this far, we are profoundly grateful for your interest in contributing to the Block Foundation. Every contribution, irrespective of its scale, holds immense value to us. The intricate and specialized use-cases of the Block Foundation Community necessitate collective effort, and we sincerely appreciate your willingness to become a part of this endeavor. Your involvement can't be thanked enough and truly makes a significant difference. Thank you once again.

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, community, real-estate, smart-contracts, urbanism]",0
y-yamamoto-yworks,VasyworksDB,,https://github.com/y-yamamoto-yworks/VasyworksDB,https://api.github.com/repos/VasyworksDB/y-yamamoto-yworks,"„ÄêË≥ÉË≤∏‰∏çÂãïÁî£ÁÆ°ÁêÜÊ•≠ËÄÖÂêë„Åë„Äë""Vasyworks Database Project with Django"" Vasyworks is a series title of systems for registering and publishing vacancy information in the japanese rental house management industry.",,0,0,1,0,real-estate-management,"[django, postgresql, real-estate, real-estate-management, realestate, rent-house, webapp]",0
block-foundation,solidity-housing-corporation,block-foundation,https://github.com/block-foundation/solidity-housing-corporation,https://api.github.com/repos/solidity-housing-corporation/block-foundation,Solidity Smart Contract: Housing Corporation,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-housing-corporation/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-housing-corporation)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Blockchain Housing Corporation</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-corporation/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-corporation/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-corporation/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-corporation/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-corporation/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

...

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",0,0,2,1,real-estate,"[block-foundation, blockchain, blockfoundation, eth, ethereum, housing, housing-corporatin, real-estate, smart-contract, sol, solidity]",0
block-foundation,manifesto,block-foundation,https://github.com/block-foundation/manifesto,https://api.github.com/repos/manifesto/block-foundation,Block Foundation Manifesto [WIP],"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/manifesto/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/manifesto)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Block Foundation Manifesto</h1>
    <h3 align=""left"">Our Pledge</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/manifesto/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/manifesto/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/manifesto/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/manifesto/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/manifesto/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

...

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,4,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, housing, manifesto, real-estate, transparency]",0
mbalcerzak,warsaw-real-estate-analysis,,https://github.com/mbalcerzak/warsaw-real-estate-analysis,https://api.github.com/repos/warsaw-real-estate-analysis/mbalcerzak,,"# Identifying Real Estate Opportunities in Warsaw Using Machine Learning

[article link](https://arxiv.org/pdf/1809.04933.pdf)


[link to Gumtree price checker](https://share.streamlit.io/mbalcerzak/warsaw-real-estate-analysis/streamlit-app/app/app.py)
",0,0,2,0,real-estate,"[apartment, gumtree, machine-learning, price-tracker, real-estate, warsaw]",0
limpapud,datasets,,https://github.com/limpapud/datasets,https://api.github.com/repos/datasets/limpapud,Different datasets for use.,"# datasets
Different datasets for use.

Here you can find different datasets that I am planning to ad time by time. Some of them related to my Data Science advertures, some of them simply for You :)
*Disclaimer: Data used in this folder and in my account is for education and non-profit use. Was impersonalized.*

**Azerbaijan statistics**

Statistical data related to Azerbaijan

**Bina_az statistics**

Datasets related to Bina_Az project ** [Link to Project on GitHub](https://github.com/limpapud/data_science_tutorials_projects/tree/master/Bina_az_tutorial)

**NLTK**

Data related to Natural Language Toolkit.

**Tutorial_datasets**

Data related to tutorials about DS and stuff around it.

",2,2,2,0,real-estate,"[azerbaijan, data-science, pandas, real-estate, statistics]",0
etewiah,quasar-real-estate-themes,,https://github.com/etewiah/quasar-real-estate-themes,https://api.github.com/repos/quasar-real-estate-themes/etewiah,Property listing site built with the quasar framework with the option of truly changing themes (not just css) ,"# Quasar Real Estate Themes (quasar-real-estate-themes)

Property listing site built with the quasar framework with the option of truly changing themes (not just css)

## Install the dependencies
```bash
yarn
# or
npm install
```

### Start the app in development mode (hot-code reloading, error reporting, etc.)
```bash
quasar dev
```


### Lint the files
```bash
yarn lint
# or
npm run lint
```


### Format the files
```bash
yarn format
# or
npm run format
```



### Build the app for production
```bash
quasar build
```

### Customize the configuration
See [Configuring quasar.config.js](https://v2.quasar.dev/quasar-cli-vite/quasar-config-js).
",0,0,2,0,real-estate,"[propertywebbuilder, quasar-framework, real-estate, vue3]",0
OpenEstate,OpenEstate-PHP-Wrapper-CMSms,OpenEstate,https://github.com/OpenEstate/OpenEstate-PHP-Wrapper-CMSms,https://api.github.com/repos/OpenEstate-PHP-Wrapper-CMSms/OpenEstate, a module that integrates OpenEstate-PHP-Export into your CMSms website,"OpenEstate-PHP-Wrapper for CMSms 0.5
====================================

This module integrates [OpenEstate-PHP-Export](https://github.com/OpenEstate/OpenEstate-PHP-Export)
into a *CMS made simple* based website.


Description
-----------

### English

OpenEstate.org provides a freeware software - called *OpenEstate-ImmoTool* -
for small and medium sized real-estate-agencies all over the world.

As one certain feature of this software, the managed properties can be exported
to any website that supports PHP. Together with this module, the exported
properties can be easily integrated into a *CMS made simple* based website without
any frames.

#### How to configure the module?

1.  Execute a PHP-export from [OpenEstate-ImmoTool](http://en.openestate.org/immotool/)
    to your webspace, where *CMS made simple* is installed.
2.  Log in to administration of *CMS made simple* and open
    `Extensions` ‚Üí `OpenEstate PHP-Wrapper` ‚Üí `Module Preferences`. Enter path
    and URL, that points to the folder with the exported scripts.
3.  The `Integration` tab shows, if the correct script path is configured.

#### How to use the module?

1.  The module can be placed in any page or template with the smarty tag
    `{OpenEstatePhpWrapper}`.
2.  The wrapping can be configured with certain parameters. Log in to
    administration of *CMS made simple* and open
    `Extensions` ‚Üí `OpenEstate PHP-Wrapper` ‚Üí `Integration`. There you can find
    a form, to generate parameterized smarty tags.

### Deutsch

Im Rahmen des OpenEstate-Projektes wird unter Anderem eine kostenlose
Immobiliensoftware unter dem Namen *OpenEstate-ImmoTool* entwickelt. Gemeinsam
mit den Anwendern soll eine Softwarel√∂sung f√ºr kleine bis mittelgro√üe
Immobilienunternehmen entwickelt werden.

Unter Anderem k√∂nnen die im *OpenEstate-ImmoTool* verwalteten Immobilien als
PHP-Skripte auf die eigene Webseite exportiert werden. Mit Hilfe dieses Moduls
kann dieser PHP-Export unkompliziert in eine auf *CMS made simple* basierende
Webseite integriert werden.

#### Wie konfiguriere ich das Modul?

1.  F√ºhren Sie einen PHP-Export aus [OpenEstate-ImmoTool](http://de.openestate.org/immotool/)
    auf Ihren Webspace durch, wo auch *CMS made simple* installiert wurde.
2.  Melden Sie sich in der Administration von *CMS made simple* an und klicken
    Sie auf `Erweiterungen` ‚Üí `OpenEstate PHP-Wrapper` ‚Üí `Modul Einstellungen`.
    Tragen Sie Pfad und URL ein, die auf den Ordner mit den exportierten
    PHP-Skripten verweisen.
3.  Im Reiter `Integration` wird gepr√ºft und dargestellt, ob der hinterlegte
    Skript-Pfad korrekt ist.

#### Wie verwende ich das Modul?

1.  Allgemein kann das Modul durch das Smarty-Tag `{OpenEstatePhpWrapper}` in
    eine beliebige Seite (oder Template) eingef√ºgt werden.
2.  Die Einbindung kann durch weitere Parameter konfiguriert werden. Melden Sie
    sich in der Administration von *CMS made simple* an und klicken Sie auf
    `Erweiterungen` ‚Üí `OpenEstate PHP-Wrapper` ‚Üí `Integration`. Dort finden Sie
    ein Formular, mit dessen Hilfe ein Smarty-Tag inkl. Parameter erzeugt werden
    kann.


Changelog
---------

### 0.5

-   Bugfix: Links inside wrapped content do not work, if pretty URL's are
    disabled in *CMS made simple*.
    (see [CMSms-Wiki about Pretty URL's](http://docs.cmsmadesimple.org/configuration/pretty-url))
-   improved help text in translation files
-   don't use duplicated translation files
-   translated any source code comments into English
-   made some syntax fixes
-   tested against the latest version of *CMS made simple* (1.11.11)

### 0.4.5

-   Some smaller improvements.

### 0.4.4

-   Some smaller improvements.

### 0.4.3

-   Configured options of a smarty tag are not taken into account under certain
    conditions.
    (see [Forum](http://board.openestate.org/viewtopic.php?f=7&t=8698))
-   Provide all available order options in the `Integration` tab on the module
    administration page.
    (see [Forum](http://board.openestate.org/viewtopic.php?f=7&t=8763#p12562))

### 0.4.2

-   Reset filter selection, if a property page is accessed for the first time or
    if the website visitor jumps between multiple property pages.
    (see [Forum](http://board.openestate.org/viewtopic.php?f=7&t=3329))

### 0.4

-   Show an error message on the website, if *OpenEstate-ImmoTool* is currently
    exporting properties to the webspace.
    (see [Bug-Tracker #594](http://tracker.openestate.org/view.php?id=594))
-   Improved handling of search engine optimized URL's.
    (see [CMSms-Wiki](http://wiki.cmsmadesimple.org/index.php/User_Handbook/Installation/Optional_Settings))
    -   Take `$config['url_rewriting']` into account.
    -   Take `$config['query_var']` into account.

### 0.3

-   Some smaller improvements.

### 0.2

-   First public release


License
-------

[GNU General Public License 3](http://www.gnu.org/licenses/gpl-3.0-standalone.html)
",0,0,3,0,real-estate,"[cmsms, openestate, real-estate, realestate]",0
brokalys,data,brokalys,https://github.com/brokalys/data,https://api.github.com/repos/data/brokalys,Automated real estate market data extracted from Brokalys DB,"# Brokalys data

## IMPORTANT: automatic data extraction has been deprecated. Please contact me if you need the latest data

Open real estate data for Latvia.

Fully automated statistics about the real estate market in Latvia. All available data is located in the `data` folder.

## Available data

### Daily market analysis
**Files:** 
- [daily-rent.csv](/data/daily-rent.csv)
- [daily-sell.csv](/data/daily-sell.csv)
- [daily-buy.csv](/data/daily-buy.csv) (no longer being updated)
- [daily-want-to-rent.csv](/data/daily-want-to-rent.csv) (no longer being updated)

**Available information:**
- date
- count
- min
- max
- mean
- median
- mode
- standard deviation

### Weekly market share analysis
> This data-set is no longer being updated.

**File:** [weekly-market-share.csv](/data/weekly-market-share.csv)

**Available information:**
- start date
- end date
- market share (in percentage) of various portals

### Monthly mean prices in various regions
**Files:**
- Apartment
  - [rent-monthly-riga.csv](/data/apartment/rent-monthly-riga.csv)
  - [rent-price-per-sqm-monthly-riga.csv](/data/apartment/rent-price-per-sqm-monthly-riga.csv)
  - [sell-monthly-riga.csv](/data/apartment/sell-monthly-riga.csv)
  - [sell-price-per-sqm-monthly-riga.csv](/data/apartment/sell-price-per-sqm-monthly-riga.csv)
  - [rent-monthly-latvia.csv](/data/apartment/rent-monthly-latvia.csv)
  - [rent-price-per-sqm-monthly-latvia.csv](/data/apartment/rent-price-per-sqm-monthly-latvia.csv)
  - [sell-monthly-latvia.csv](/data/apartment/sell-monthly-latvia.csv)
  - [sell-price-per-sqm-monthly-latvia.csv](/data/apartment/sell-price-per-sqm-monthly-latvia.csv)
- House
  - [rent-monthly-riga.csv](/data/house/rent-monthly-riga.csv)
  - [rent-price-per-sqm-monthly-riga.csv](/data/house/rent-price-per-sqm-monthly-riga.csv)
  - [sell-monthly-riga.csv](/data/house/sell-monthly-riga.csv)
  - [sell-price-per-sqm-monthly-riga.csv](/data/house/sell-price-per-sqm-monthly-riga.csv)
  - [rent-monthly-latvia.csv](/data/house/rent-monthly-latvia.csv)
  - [rent-price-per-sqm-monthly-latvia.csv](/data/house/rent-price-per-sqm-monthly-latvia.csv)
  - [sell-monthly-latvia.csv](/data/house/sell-monthly-latvia.csv)
  - [sell-price-per-sqm-monthly-latvia.csv](/data/house/sell-price-per-sqm-monthly-latvia.csv)
- Land
  - [rent-monthly-riga.csv](/data/land/rent-monthly-riga.csv)
  - [rent-price-per-sqm-monthly-riga.csv](/data/land/rent-price-per-sqm-monthly-riga.csv)
  - [sell-monthly-riga.csv](/data/land/sell-monthly-riga.csv)
  - [sell-price-per-sqm-monthly-riga.csv](/data/land/sell-price-per-sqm-monthly-riga.csv)

**Available information:**
- start date
- end date
- mean price in various regions
",2,2,2,0,real-estate,"[data, latvia, real-estate, realestate, statistics]",0
Yougourta,ProjetMobileResidence,,https://github.com/Yougourta/ProjetMobileResidence,https://api.github.com/repos/ProjetMobileResidence/Yougourta,Real-estate app using MySQL,"# ProjetMobileResidence

For this project you'll need to have a MySql installed on your computer.

1. Download the MySql Database Script : https://www.mediafire.com/?f833pzc4w45aq1z
2. Create a MySql Database named ""projet_db"" and import the script to it.
3. Change the port number to your MySql port.
4. Change the IP address of the beckend server (Your Machine's IP), just make a CTRL + SHIFT + F and search for IP addresses starting with 192.168 change them to your Computer's IP address.
5. Chande the Web.xml file : find where there's ""localhost"" and change it to ""0.0.0.0""
6. Compile Backend Module, test it using your phone's web browser.
7. Compile the App and enjoy.
",0,0,2,0,real-estate,"[android, houserenting, java, real-estate]",0
fdd4s,matterport-dl-equi,,https://github.com/fdd4s/matterport-dl-equi,https://api.github.com/repos/matterport-dl-equi/fdd4s,Download matterport virtual tours to equirectangular 360,"# matterport downloader equirectangular

## What it does

matterport-dl-equi downloads Skybox 360 panos photos of Matterport houses and turn them into equirectangular images automatically, this allows to view the pano in viewers like Ricoh Theta https://play.google.com/store/apps/details?id=com.theta360&hl=en&gl=US  

This project is a simple merge of two projects:

https://github.com/fdd4s/matterport-downloader  
https://github.com/fdd4s/skybox2equirectangular  

## Dependencies

php, php-curl, curl, imagemagick, ffmpeg (last version with v360 filter), exiftool  

this code is designed to work over linux (as /dev/shm ram tmpfs)  

## Usage

    $ php ./matterport-dl-equi.php <matterport id>  

e.g: If the url is https://my.matterport.com/show/?m=huhpm6maGbT&mls=1 you have to run the script this way:  

    $ php ./matterport-dl-equi.php huhpm6maGbT  

It will download all the skybox images with the highest quality available (4k, 2k or 1k) and turn them into equirectangular images.  

## Known issues

""montage-im6.q16: cache resources exhausted "" can be resolved changing ImageMagick configuration, more info here: https://github.com/ImageMagick/ImageMagick/issues/396  

## Online downloader

https://openpano.rf.gd/download/ shows skybox images of matterport virtual tours, with the browser option ""save web complete"" it downloads all skybox images of a matterport virtual tour. It's the online version of the script https://github.com/fdd4s/matterport-downloader

## Viewers

Android: Ricoh Theta App https://play.google.com/store/apps/details?id=com.theta360&hl=en&gl=US  

PC: Linux/Mac/Windows: Panini https://github.com/lazarus-pkgs/panini  

Web Browser: Chrome and Firefox: Pannellum (webgl based), self hosted virtual tour, equirectangular and cubemap skybox: https://github.com/mpetroff/pannellum 

## Youtube 360 slideshow video

Equirectangular panoramas can be uploaded to Youtube as a 360¬∫ video slideshow. It can be created using FFmpeg (like a normal slideshow of jpg images), add the tag to the video of 360¬∫ panoramic using ""spatial-media"" and upload to youtube where the slideshow video will be shown as a 360¬∫ video.  

https://github.com/FFmpeg/FFmpeg  
https://github.com/google/spatial-media  

## Credits

Created by fdd4s  
Send feedback and questions to fc1471789@gmail.com  
All files are public domain https://unlicense.org/  
",5,5,1,0,real-estate,"[360-photo, cubemap-to-equirectangular, equirectangular, equirectangular-panorama, matterport, real-estate, ricoh-theta, ricoh360, virtual-tour]",0
fdd4s,matterport-dl-dollhouse,,https://github.com/fdd4s/matterport-dl-dollhouse,https://api.github.com/repos/matterport-dl-dollhouse/fdd4s,download dollhouse 3d model of Matterport houses,"# matterport downloader dollhouse

## What it does

matterport-dl-dollhouse downloads dollhouse 3d model of Matterport houses

## Dependencies

php, php-curl, curl  

This code can run over Linux and Windows  

## Usage

    $ php ./matterport-dl-dollhouse.php <matterport id>  

e.g: If the url is https://my.matterport.com/show/?m=huhpm6maGbT&mls=1 you have to run the script this way:  

    $ php ./matterport-dl-dollhouse.php huhpm6maGbT  
    
    it will download .dam file and .jpg texture files, then use  
    https://github.com/codespacehelp/matterport-decoder  
    or  
    https://github.com/willowpsychology/rogue_matterport_archiver  
    To convert .dam file to .obj file

## Viewers

.obj result file can be opened with Blender https://www.blender.org/ (File...Import...Wavefront (.obj))

## Credits

Created by fdd4s  
Send feedback and questions to fc1471789@gmail.com  
All files are public domain https://unlicense.org/  
",0,0,1,0,real-estate,"[3d-model, matterport, real-estate]",0
etewiah,quasar-singlepropertypages,,https://github.com/etewiah/quasar-singlepropertypages,https://api.github.com/repos/quasar-singlepropertypages/etewiah,A nifty tool to create single property pages from existing listings.  Just enter the url of a listing and it will create a page based off that.,"# SinglePropertyPages

SinglePropertyPages allows you to enter the url of a property listing and create an editable copy that you can publish as a standalone page.

It is built on the amazing [Quasar toolkit](https://quasar.dev/) and uses Vue.js.


## June 2023 update!

I am currently working on a tool to help with house hunting. Would love to get some feedback about it.

Please check it out here and let me know what you think (and if you would like it to be open-sourced):

[https://homestocompare.com/](https://homestocompare.com/)


## Motivation

I started work on this idea over a year ago when I was frustrated with the way a flat I wanted to sell in the UK was being presented.  Regular real estate listings websites almost always have to same template for every property.  The way a property is displayed takes no account of it's particular characteristics.

For me this was frustrating and as I aready built real estate websites for a living I decided to make a product that allows anyone to take a regular property listing and turn it into a single page that presents the property in the best light.

Long story short, I failed to monetize it adequately so rather than letting the idea die completely I decided to create a bare-bones version which I could open source.  Perhaps someone can do a better job of monetizing it than I can.

You can read a bit more about my initial project on this hn thread: [https://news.ycombinator.com/item?id=24339608](https://news.ycombinator.com/item?id=24339608)


## Installation

### Install the dependencies
```bash
yarn
```

### Start the app in development mode (hot-code reloading, error reporting, etc.)
```bash
quasar dev
```

### Lint the files
```bash
yarn run lint
```

### Build the app for production
```bash
quasar build
```

### Customize the configuration
See [Configuring quasar.conf.js](https://quasar.dev/quasar-cli/quasar-conf-js).

## Contribution

Contributions are welcome. Just create a PR and explain what you've done :)

## TODO (in no particular order)

1. Improve the current look and feel
2. Enable exporting to PDF
3. Add a QR code widget
4. Add an enquiry form
5. Write tests!!


## Support our sister project PropertyWebBuilder

You can help support this project by making a contribution to our sister project PropertyWebBuilder here: https://opencollective.com/property_web_builder

You can also help by spreading the word, trying it out, staring the project etc...

",6,6,3,1,real-estate,"[property-listings, proptech, real-estate]",0
propertyshelf,ps.plone.mls,propertyshelf,https://github.com/propertyshelf/ps.plone.mls,https://api.github.com/repos/ps.plone.mls/propertyshelf,Propertyshelf MLS Plone Embedding.,,0,0,4,2,real-estate,"[plone, plone4x, plone5x, python, real-estate]",0
bulbinc,tarumae-examples,bulbinc,https://github.com/bulbinc/tarumae-examples,https://api.github.com/repos/tarumae-examples/bulbinc,Examples of Tarumae Engine,,0,0,3,0,real-estate,"[3d, engine, model, performance, real-estate, rendering, showcase, showroom, webgl]",0
MiladSadeghi,Homelun-CMS,,https://github.com/MiladSadeghi/Homelun-CMS,https://api.github.com/repos/Homelun-CMS/MiladSadeghi,Homelun CMS - MERN Stack CMS,"<p align=""center"">
  <a href="""" rel=""noopener"">
 <img src=""https://s8.uupload.ir/files/homelun_b6jy.png"" alt=""Bot logo""></a>
</p>

<h3 align=""center"">Homelun - CMS</h3>

<div align=""center"">

[![Netlify Status](https://api.netlify.com/api/v1/badges/6c904f2f-3e5b-4ff9-b004-90f5086c1505/deploy-status)](https://app.netlify.com/sites/calm-froyo-de122a/deploys)
[![Langugae](https://img.shields.io/github/languages/top/miladsadeghi/homelun-CMS)]()
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)

</div>

---

<p align=""center"">Homelun CMS is a real estate CMS built with the MERN stack, enabling easy management of property listings and content.
    <br>
</p>
<h2 align=""center"">
<a href=""https://homelun-cms.miladsdgh.ir"">DEMO</a>
<br></h2>

## üìù Table of Contents

- [About](#about)
- [Getting Started](#getting_started)
- [Deploying](#deployment)
- [Users](#users)
- [Built Using](#built_using)
- [Authors](#authors)
- [Acknowledgments](#acknowledgement)

## üßê About <a name = ""about""></a>

Homelun CMS is a powerful real state CMS , offering a robust role-based system that includes three types of users: super admin, admin, and agent. Each role has its specific responsibilities and capabilities, ensuring smooth and efficient management of the platform.

The super admin has full control over the platform and can create new users with admin or agent roles. Admins have the ability to manage and approve properties added by agents, while agents can add property listings and handle property tour requests, among other tasks. This hierarchical structure allows for clear delegation of tasks and efficient management of property listings, making Homelun an ideal choice for real estate professionals looking for a comprehensive solution to manage their websites.

## üèÅ Getting Started <a name = ""getting_started""></a>

To get started with Homelun CMS, you'll need to set up the server and client environments. First, navigate to the server folder in your project directory and create an .env file. Use the provided env.example file as a reference to fill in the required information. Once your .env file is set up, you can install the necessary dependencies by running the following commands:

```
npm install
or
yarn install
```

After setting up the server, move on to the client folder and repeat the process. Create an .env file using the env.example as a guide, and then install the required dependencies like previous way.

then run both separately with

```
npm run dev
or
yarn dev
```

## üë• Users <a name=""users""></a>

You can log in to the agent's account to test the CMS.

```
email: tstephenson@platinumpropertiesnyc.com
password: password: #@YYH2?-<k?(-s2:

email: faverealty@gmail.com
password: Q,}R{yZ5x}]v{g92

email: rconsalo@pp-nyc.com
password: AARa]P~W-{-M5C^k

email: miguel.cabrera@elliman.com
password: ry^QBJY}]2q7~S!g

email: caustad@elliman.com
password: :/Hz<'yW*d#/!m5n

email: lenakoropey@danielgale.com
password: CtbB9g>Rs=`D/dk+

email: wendy.lee@elliman.com
password: /y;3NZw!dy+(~]N}

email: sicarealtygroup@gmail.com
password: >kAW;Q3xBxZx2B]V

email: christopher.pizzola@sothebysrealty.com
password: JvK>Pp=YG-jEGh6E
```

## üöÄ Deploying <a name = ""deployment""></a>

In order to deploy the Homelun CMS, we are utilizing two powerful platforms: Netlify for the frontend and Fly.io for the backend.

## ‚õèÔ∏è Built Using <a name = ""built_using""></a>

<div style=""display: flex; flex-wrap: wrap;"">
<img src=""https://img.shields.io/badge/Express.js-404D59?style=for-the-badge"" />
<img src=""https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white"" />
<img src=""https://img.shields.io/badge/Node.js-43853D?style=for-the-badge&logo=node.js&logoColor=white"" />
<img src=""https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB"" />
<img src=""https://img.shields.io/badge/Tailwind_CSS-38B2AC?style=for-the-badge&logo=tailwind-css&logoColor=white"" />
<img src=""https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white"" />
<img src=""https://img.shields.io/badge/Redux-593D88?style=for-the-badge&logo=redux&logoColor=white"" />
<img src=""https://img.shields.io/badge/React_Router-CA4245?style=for-the-badge&logo=react-router&logoColor=white"" />
</div>

## ‚úçÔ∏è Authors <a name = ""authors""></a>

- [@MiladSadeghi](https://github.com/MiladSadeghi) - MiladSadeghi


## üéâ Acknowledgements <a name = ""acknowledgement""></a>

- thanks <a href=""https://www.vektora.studio/"">Vektora Studio</a> for design
",0,0,1,0,real-estate,"[admin, admin-dashboard, cms, express, jwt, mern, mongodb, nodejs, react, real-estate, typescript]",0
etewiah,pwb-admin-vuetify,,https://github.com/etewiah/pwb-admin-vuetify,https://api.github.com/repos/pwb-admin-vuetify/etewiah,New admin interface for PropertyWebBuilder,"# PropertyWebBuilder Admin Panel 

> built with vue and vuetify

Please help support this project by making a contribution to PropertyWebBuilder here: https://opencollective.com/property_web_builder

[![Gitter](https://badges.gitter.im/dev-1pr/1pr.svg)](https://gitter.im/property_web_builder/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

PropertyWebBuilder is a website builder for the real estate sector.  It can be adapted for use as a CRM, property listings site, vacation rentals listing site etc.

This project provides an admin panel that uses the API endpoints provided by PropertyWebBuilder to manage the look and feel, property listings, agency details etc.

## [Demo](https://pwb-jan-2018.herokuapp.com/admin-vue)

As of February 2018, the project is under active development and any help in completing it will be much appreciated.

You can try out a demo at [https://pwb-jan-2018.herokuapp.com/admin-vue](https://pwb-jan-2018.herokuapp.com/admin-vue)

To see the admin panel, login as user admin@example.com with a password of ""pwb123456"".


You can find the source code for the old admin panel built with emberjs here:
https://github.com/etewiah/property_web_builder_admin


## Deploy to netlify

It is easy to run this project locally or to deploy your own instance with netlify by clicking the button below:

[![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/etewiah/pwb-admin-vuetify)



## Build Setup

``` bash
# install dependencies
npm install

# serve with hot reload at localhost:8080
npm run dev

# build for production with minification
npm run build

# build for production and view the bundle analyzer report
npm run build --report
```

For detailed explanation on how things work, checkout the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).
",26,26,4,0,real-estate,"[admin-panel, crm, property-listings, propertywebbuilder, real-estate, vue, vuejs, vuetify, vuex]",0
CHUKWUKA-EMI,PropertyBaseBackend,,https://github.com/CHUKWUKA-EMI/PropertyBaseBackend,https://api.github.com/repos/PropertyBaseBackend/CHUKWUKA-EMI,"Property Forager Backend. Property forager is a platform where prospective tenants search for properties available for rent, and connect with property owners and agents. The platform also makes it easy for Property owners/agents to manage leasehold, tenants, and payments.","# Property Base Backend

## Technologies Used

- `ASP.NET CORE 7`
- `C#`
- `Entity framework Core`
- `Cockroach Postgres DB Serverless`
",0,0,1,0,real-estate-platform,"[aspnetcore, cockroachdb, csharp, entity-framework-core, postgresql, property-rentals, real-estate-platform]",0
OpenEstate,OpenEstate-Tool-Manual,OpenEstate,https://github.com/OpenEstate/OpenEstate-Tool-Manual,https://api.github.com/repos/OpenEstate-Tool-Manual/OpenEstate,user manual for OpenEstate-ImmoTool,"Users manual for OpenEstate-ImmoTool
====================================

This repository contains the development files for the *OpenEstate-ImmoTool* users manual in English and German language. These files are used in order to generate the manual in different target formats.

-   A **HTML5 website** is generated with [*Hugo*](https://gohugo.io/).
-   A **PDF** / **EPUB** / **ODT** / **DOCX** / **XHTML (single page)** file is generated with [*Pandoc*](https://pandoc.org/).


Documentation
-------------


### How to generate the HTML5 website

In order to generate the HTML5 website you need to download [*Hugo*](https://gohugo.io/) beforehand:

-   *Linux* users may execute the script [`apps/init-hugo.sh`](apps/init-hugo.sh) in order to download *Hugo* automatically. Alternatively you can [download](https://github.com/gohugoio/hugo/releases) *Hugo* manually and place its binary into the `apps/linux/bin` folder.
-   *Windows* users need to [download](https://github.com/gohugoio/hugo/releases) `hugo.exe` manually and place it into the `apps/windows/bin` folder.

Afterwards you can use the following scripts in order to generate the HTML5 website:

-   The `build.sh` / `build.bat` script generates the website into the `public` folder.
-   The `server.sh` / `server.bat` script starts *Hugo* in [server mode](https://gohugo.io/commands/hugo_server/) and allows live preview of modified files in the web browser via
    -   <http://localhost:1313/en/> for the English website
    -   <http://localhost:1314/de/> for the German website


### How to generate other formats

In order to generate other formats you need to install [*Pandoc*](https://pandoc.org/) on your system. Currently this repository only provides a solution for *Linux* systems. Other operating systems might also work with some modifications, but we're currently not planning to support other systems.

Follow the [instructions provided by *Pandoc*](https://pandoc.org/installing.html#linux) for installation. For PDF output [*TeX Live*](http://www.tug.org/texlive/) is also required.

You also need to install [*Python*](https://www.python.org/) and the [*virtualenv*](https://virtualenv.pypa.io/) package on your system. Most *Linux* distributions provide packages for both dependencies. Afterwards you can create a virtual environment for *Python* by executing the `app/init-virtualenv.sh` script.

On *Debian GNU/Linux* you can install the dependencies via:

```
apt install \
  virtualenv \
  pandoc \
  texlive-latex-base \
  texlive-lang-german \
  texlive-lang-english \
  texlive-fonts-recommended \
  texlive-fonts-extra \
  texlive-latex-recommended \
  texlive-latex-extra
```

After all dependencies are installed you can use the following scripts on your *Linux* system in order to generate the manual in other target formats:

-   The `book-english.sh` script generates the manual into the `book/en` folder.
-   The `book-german.sh` script generates the manual into the `book/de` folder.


### How to modify the users manual

The [`content`](content) folder contains development files of the manual in [Markdown format](https://en.wikipedia.org/wiki/Markdown) and provided images.

-   The [`content/en`](content/en) folder contains all development files of the English manual.
-   The [`content/de`](content/de) folder contains all development files of the German manual. 

Open the Markdown files (ending with `.md`) in your preferred text editor and make your changes. Afterwards you can rebuild the manual with the provided scripts (as documented above).


### Notes about the Markdown format, standards & conventions

In order to provide a consistent users manual we've established some standards and conventions. Please read the following documents before you modify the contents and provide a pull request:

-   The [`NOTES.en.md`](NOTES.en.md) file contains information & conventions about the English users manual.
-   The [`NOTES.de.md`](NOTES.de.md) file contains information & conventions about the German users manual.
-   The [`CONTRIBUTING.md`](CONTRIBUTING.md) file contains information about how to provide you modifications to us.


Dependencies
------------

The generated HTML5 website bundles the following dependencies:

-   [*Bootstrap*](https://getbootstrap.com/) v4.3.1 ([MIT](https://github.com/twbs/bootstrap/blob/master/LICENSE))
-   [*jQuery*](https://jquery.com/) v3.3.1 ([MIT](https://jquery.org/license/))
-   [*SmartMenus*](https://www.smartmenus.org/) v1.1.0 ([MIT](https://github.com/vadikom/smartmenus/blob/master/LICENSE-MIT))
-   [*Lunr*](https://lunrjs.com/) v2.3.6 ([MIT](https://github.com/olivernn/lunr.js/blob/master/LICENSE))
-   [*js-url*](https://github.com/websanova/js-url) v2.5.3 ([MIT](https://github.com/websanova/js-url/blob/master/README.md#license))
-   [*jQuery ScrollSpy Plugin*](https://github.com/softwarespot/jquery-scrollspy) rev `801a603` ([MIT](https://github.com/softwarespot/jquery-scrollspy#jquery-scrollspy))
-   [*ScrollToFixed*](http://bigspotteddog.github.io/ScrollToFixed/) v1.0.8 ([MIT](https://github.com/bigspotteddog/ScrollToFixed/blob/master/license.txt))
-   [*Font Awesome Free*](https://fontawesome.com/) v5.7.2 ([Font Awesome Free License](https://github.com/FortAwesome/Font-Awesome/blob/master/LICENSE.txt))

The users manual in ePub format bundles the following dependencies:

-   [*DejaVu Fonts*](https://dejavu-fonts.github.io/) v2.37 ([Public Domain, Bitstream Vera Fonts Copyright & Arev Fonts Copyright](https://dejavu-fonts.github.io/License.html))

The users manual in PDF format is created with:

-   [*Eisvogel* template](https://github.com/Wandmalfarbe/pandoc-latex-template) v1.1 ([BSD](https://github.com/Wandmalfarbe/pandoc-latex-template/blob/master/LICENSE))
-   [*pandoc-latex-tip*](https://github.com/chdemko/pandoc-latex-tip) ([BSD](https://github.com/chdemko/pandoc-latex-tip/blob/master/LICENSE))
-   [*pandoc-latex-admonition*](https://github.com/chdemko/pandoc-latex-admonition) ([BSD](https://github.com/chdemko/pandoc-latex-admonition/blob/master/LICENSE))


License
-------

The development files of the user manual (including images) and the generated user manual is licensed under the terms of the [CC-BY-NC-SA 4.0 license](https://creativecommons.org/licenses/by-nc-sa/4.0/deed). Take a look at [`LICENSE.txt`](LICENSE.txt) for the license text.

The provided development scripts (*Bash*, *Batch* & *Python* files) and *JavaScript* files of the generated website are licensed under the terms of [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0.html). Take a look at [`LICENSE.scripts.txt`](LICENSE.scripts.txt) for the license text.


Further information
-------------------

-   [*OpenEstate-Tool-Manual* at GitHub](https://github.com/OpenEstate/OpenEstate-Tool-Manual)
-   [Releases of *OpenEstate-Tool-Manual*](https://github.com/OpenEstate/OpenEstate-Tool-Manual/releases)
-   [*OpenEstate-Tool-Manual* website in English](https://manual.openestate.org/en/)
-   [*OpenEstate-Tool-Manual* website in German](https://manual.openestate.org/de/)
-   [Download *OpenEstate-Tool-Manual* in other formats](https://manual.openestate.org/download/)
",3,3,3,1,real-estate,"[hugo, manual, openestate, pandoc, real-estate, realestate]",0
etewiah,inman-offer-tracker-fe,,https://github.com/etewiah/inman-offer-tracker-fe,https://api.github.com/repos/inman-offer-tracker-fe/etewiah,An app to track the status of offers during a real estate transaction,"# OFFER TRACKER
A Home Offer Tracker (Developed at Inman Hackathon)
[![Offer Tracker Demo](http://i.imgur.com/qnfo94Y.gif)](https://youtu.be/t9ycYMwvHQQ)

The original project is here and includes some extra work done on a backend API:
https://github.com/ArturGrigio/offer-tracker

This repo focuses on the Vue.js frontend and uses Google firebase as the backend.

## Demo:

A live demo can be seen here:
http://klavado.com

## Idea: 
 - **Bradley Inman**
 - **Shane Farkas** (*The Agency*) shane@theagencyre.com
 - **Joel Burslem** (*1000watt*)
 - **Paul Cooley** (*Imprev*) paul@imprev.com
 - **Tom Flanagan** (*The Group Inc*)


## Developers: 
 - **Artur Grigio** ([*ListingZen*](https://ListingZen.com)): arturgrigio@gmail.com
 - **Todd LaMothe** ([*Union Street Media*](https://unionstreetmedia.com)): todd@unionstreetmedia.com
 - **Ami Berger** ([*Voiceter Pro*](http://www.voiceterpro.com)): ami@voiceterpro.com
 - **Tomas McCandless** ([*Voiceter Pro*](http://www.voiceterpro.com)): tomas@voiceterpro.com
 - **Ricky Watts** ([Coldwell Banker Heritage](http://www.coldwellbankerishome.com)): ricky.watts@coldwellbanker.com
 - **Ed Tee** ([PropertyWebBuilder](http://propertywebbuilder.com)): ed@propertywebbuilder.com
 - **Jess Martin** ([CTO & Co-founder, First.io](http://first.io))



## Build Setup

``` bash
# install dependencies
npm install

# serve with hot reload at localhost:8080
npm run dev

# build for production with minification
npm run build

# build for production and view the bundle analyzer report
npm run build --report

# run unit tests
npm run unit

# run e2e tests
npm run e2e

# run all tests
npm test
```

For detailed explanation on how things work, checkout the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).
",5,5,5,1,real-estate,"[proptech, real-estate, vue]",0
block-foundation,solidity-rent-to-own,block-foundation,https://github.com/block-foundation/solidity-rent-to-own,https://api.github.com/repos/solidity-rent-to-own/block-foundation,Solidity Smart Contract: Rent-to-Own,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-rent-to-own/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-rent-to-own)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Rent-to-Own</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-rent-to-own/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

...

## Quick Start

> Install

``` sh
npm i
```

> Compile

``` sh
npm run compile
```

## Contract


## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |


---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, eth, ethereum, hardhat, housing, real-estate, rent, smart-contracts, sol, solidity]",0
albertomonari,French-Real-Estate-Market-Visualization,,https://github.com/albertomonari/French-Real-Estate-Market-Visualization,https://api.github.com/repos/French-Real-Estate-Market-Visualization/albertomonari,,"# French Real Estate Market Visualization

![real_estate](https://www.emtinternationalrealty.com/wp-content/uploads/2019/08/Real-Estate-Market-Trends.jpg)

The aim of this project is to perform a data exploration for the real estate French market and to have a good understanding of available variables and the market with a real world 5-years (from 2015 to 2019)
historical sales transactions for the top 9 french cities (Paris, Marseille, Lyon, Toulouse, Lille, Bordeaux, Nice, Montpellier, Nantes).
The dataset contains details for each transaction (sale date, localization, type of residence, type of sale, land area, living area,
number of rooms, price, etc.).

The project was done using Tableau PrepBuilder for data preparation and cleaning and Tableau Desktop for data visualisation and storytelling with user friendly commands.

The final storytelling on Tableau Desktop is divided into the following steps:
- description of the context
- cities overview
- type of sales analysis
- living and land area analysis
- market understanding
- market evolution over time
- summary table per city
- investments recommendations
",0,0,2,0,real-estate,"[france, real-estate, tableau-desktop, tableau-prep]",0
hermitex,makazipopote-api,,https://github.com/hermitex/makazipopote-api,https://api.github.com/repos/makazipopote-api/hermitex,This a real estate API. It is part of makaziproperties web appliaction,"# makazipopote-api

This a real estate API. It is part of makaziproperties web appliaction

## Endpoints Sumamary

`GET https://makazipopote-api.herokuapp.com/api/v1/listings`

``` /api/v1/listings:
    get:
      summary: ""GET api/v1/listings""
      operationId: ""getAllListings""
      responses:
        ""200"":
          description: ""OK""
```

`POST https://makazipopote-api.herokuapp.com/api/v1/listings`

``` /api/v1/listings:
    post:
      summary: ""POST api/v1/listings""
      operationId: ""addListing""
      responses:
        ""200"":
          description: ""OK""
```

`GET https://makazipopote-api.herokuapp.com/api/v1/listings/{{id}}`

```  /api/v1/listings/{id}:
    get:
      summary: ""GET api/v1/listings/{id}""
      operationId: ""getListingById""
      parameters:
      - name: ""id""
        in: ""path""
        required: true
        schema:
          type: ""string""
      responses:
        ""200"":
          description: ""OK""
```

`PATCH https://makazipopote-api.herokuapp.com/api/v1/listings/{{id}}`

```  /api/v1/listings/{id}:
    patch:
      summary: ""PATCH api/v1/listings/{id}""
      operationId: ""updateListing""
      parameters:
      - name: ""id""
        in: ""path""
        required: true
        schema:
          type: ""string""
      responses:
        ""200"":
          description: ""OK""
```

`DELETE https://makazipopote-api.herokuapp.com/api/v1/listings/{{id}}`


```  /api/v1/listings/{id}:
    delete:
      summary: ""DELETE api/v1/listings/{id}""
      operationId: ""deleteListing""
      parameters:
      - name: ""id""
        in: ""path""
        required: true
        schema:
          type: ""string""
      responses:
        ""200"":
          description: ""OK""
```
",0,0,1,0,real-estate,"[real-estate, real-estate-app]",0
jsyllu,cupola-server-node,,https://github.com/jsyllu/cupola-server-node,https://api.github.com/repos/cupola-server-node/jsyllu,Real Estate Brokerage Website - Back-end with Node.js & Express.js,"# cupola-server-node
",0,0,1,0,real-estate-website,"[backend-api, expressjs, google-maps-api, nodejs, real-estate-website, restful-api, webdevelopent, yelp-api, zillow-api]",0
brokalys,pinger-app,brokalys,https://github.com/brokalys/pinger-app,https://api.github.com/repos/pinger-app/brokalys,Brokalys Real Estate notifications signup - PINGER,"<p align=""center"">
  <a href=""https://pinger.brokalys.com"" target=""_blank"">
    <img src=""/demo.png"" alt=""Brokalys Pinger demo"" />
  </a>
</p>

# Real estate notification sign-up form

[![Build and Deploy](https://github.com/brokalys/pinger-app/actions/workflows/deploy.yaml/badge.svg?branch=master)](https://github.com/brokalys/pinger-app/actions/workflows/deploy.yaml)
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)

Brokalys: a real-estate price analysis platform.

### Installing

```sh
yarn install
```

### Development

```sh
yarn start
```

### Testing

```sh
yarn test
```

### Building

```sh
yarn build
```
",1,1,3,0,real-estate,"[data, form, latvia, notifications, real-estate, realestate, vue, vuejs]",0
JoomlaEstateAgency,mod_jea_search,JoomlaEstateAgency,https://github.com/JoomlaEstateAgency/mod_jea_search,https://api.github.com/repos/mod_jea_search/JoomlaEstateAgency,Search module for Joomla Estate Agency,,1,1,3,3,real-estate,"[jea, joomla, joomla-extension, joomla-module, real-estate]",0
Yodata,yodata,Yodata,https://github.com/Yodata/yodata,https://api.github.com/repos/yodata/Yodata,"an open source organization working to promote data interoperability across organizations by domain to enable user-centric (vendor agnostic), decentralized systems integration.  Do you get it?  We'd love to hear from you if you do.",,1,1,5,86,real-estate-platform,"[data-standards, data-structures, decentralized-applications, event-driven, real-estate-platform, realestatestandards]",0
block-foundation,solidity-housing-cooperative,block-foundation,https://github.com/block-foundation/solidity-housing-cooperative,https://api.github.com/repos/solidity-housing-cooperative/block-foundation,Solidity Smart Contract: Housing Cooperative,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-housing-cooperative/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-housing-cooperative)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Blockchain Housing Cooperative Management</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-cooperative/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-cooperative/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-cooperative/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-cooperative/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-housing-cooperative/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to Blockchain Housing Cooperative Management! This project aims to leverage blockchain technology to provide an efficient, transparent, and secure platform for managing housing cooperatives.**

## Introduction

Traditionally, housing cooperatives have faced challenges in areas such as record keeping, transparency, property ownership transfer, and fund management. Our project addresses these challenges by harnessing the power of blockchain technology. We are creating a decentralized application (DApp) that will maintain a record of all houses owned by the cooperative, track the owners of each house, and handle transactions related to these properties, all in a secure and transparent manner.

This platform will use smart contracts - self-executing contracts with the terms of the agreement directly written into code. For our project, we'll be using Solidity for Ethereum blockchain and PyTeal for Algorand blockchain. These smart contracts will handle tasks such as adding new houses to the cooperative, changing ownership, and managing funds for house purchases.

Our project will offer benefits like improved transparency, as every transaction will be recorded on the blockchain and can be audited. It will also increase efficiency, as transactions and changes of ownership can be handled within the blockchain without the need for a middleman. Lastly, it ensures higher security and trust as the blockchain ledger is immutable and every transaction can be traced and verified.

The end goal of this project is to revolutionize how housing cooperatives are managed, by bringing them into the digital age and making them more secure, efficient, and transparent. Whether you are part of a housing cooperative, interested in the potential of blockchain technology, or just curious to see how decentralized applications can be used in new and exciting ways, we invite you to join us on this journey of innovation.

## Quick Start

> Install

``` sh
npm i
```

> Compile

``` sh
npm run compile
```

## Contract

The contract will keep track of the houses owned by the cooperative, and it will allow new houses to be added to the cooperative's list of properties. For simplicity, each house will be represented by an address (to mimic a unique identifier), and it will be recorded along with the owner's name.

- This contract adds houses to an array and allows the owner of a house to change the owner name. There's also an event that will be emitted when a new house is added.
- This contract assumes that each house has a unique Ethereum address, which is used as an identifier. It also assumes that the person executing the contract (msg.sender) is the house owner. This contract might not cover your actual needs, and it's advised to get in touch with a Solidity developer who can help create a more complex contract that covers all your needs.
- Each house has a price and can be put up for sale. Members can buy a house if it is for sale and if they send enough Ether. The Ether is then added to the previous owner's balance. Members can withdraw their funds at any time.
- This contract assumes  that the price of each house is 1 Ether and that transactions only happen between members of the cooperative.
- This contract assumes that the price of each house is static and set when the house is added. In a real contract, you might want to allow the price to change over time or have some mechanism to determine the price dynamically.

*Please be aware that smart contracts handling real-world assets can have legal implications and may require a legal framework beyond the smart contract itself to be enforceable and effective.*

## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |



---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, cooperative, eth, ethereum, housing, housing-cooperative, real-estate, smart-contracts, sol, solidity]",0
y-yamamoto-yworks,VasyworksAPI,,https://github.com/y-yamamoto-yworks/VasyworksAPI,https://api.github.com/repos/VasyworksAPI/y-yamamoto-yworks,"„ÄêË≥ÉË≤∏‰∏çÂãïÁî£ÁÆ°ÁêÜÊ•≠ËÄÖÂêë„Åë„Äë ""Vasyworks RESTful API Project with Django""Vasyworks is a series title of systems for registering and publishing vacancy information in the japanese rental house management industry.",,0,0,1,0,real-estate-management,"[django, django-rest-framework, real-estate, real-estate-management, realestate, rent-house, webapi]",0
block-foundation,glossary,block-foundation,https://github.com/block-foundation/glossary,https://api.github.com/repos/glossary/block-foundation,Block Foundation Glossary,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/glossary/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/glossary)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Glossary</h1>
    <h3 align=""left"">Block Foundation</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Terms](#terms)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/glossary/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/glossary/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/glossary/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/glossary/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/glossary/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

**Welcome to the Block Foundation Glossary, a comprehensive resource that seeks to demystify the language and terms used in the blockchain, cryptocurrency, and digital real estate space. Whether you're a blockchain beginner or a seasoned cryptocurrency enthusiast, the definitions provided in this glossary are designed to offer a clear and concise understanding of the terminology used in this exciting and rapidly evolving field.**

## Introduction

From basic terms such as 'Blockchain' and 'Cryptocurrency' to more complex concepts like 'Decentralized Autonomous Organizations (DAOs)' and 'Zero Knowledge Proofs (ZKP)', this glossary covers a broad spectrum of topics. You'll find information on blockchain technology and its various applications, the world of cryptocurrencies and digital tokens, the workings of smart contracts, the nuances of consensus mechanisms, and much more.

It's not just for those interested in the technical aspects either. The glossary also delves into areas such as the Creator Economy, Sustainability, and the Metaverse, reflecting the multifaceted impact blockchain technology and digital currencies are having on our world.

The Block Foundation Glossary is more than just a list of definitions - it's a gateway into understanding the powerful technologies that are reshaping our world. As you navigate your way through this glossary, we hope it deepens your comprehension of these complex topics and sparks a curiosity to learn more. Whether you're a developer, investor, or simply a technology enthusiast, there's something here for everyone. Welcome to your journey into the universe of blockchain and beyond!

## Terms

- **51% Attack**: A situation where more than half of the computing power on a network is operated by a single individual or concentrated group, which gives them complete and total control over a network. Things that an entity with 51% of the computing power can do include halting mining, stopping or changing transactions, and double-spending coins.
- **Altcoin**: Refers to all cryptocurrencies other than Bitcoin. The term stands for ""alternative to Bitcoin"" and is used describe any cryptocurrency that isn't a Bitcoin.
- **AirDrop**: The process of distributing a cryptocurrency token to the wallets of some users free of charge, usually for marketing purposes or rewards.
- **Asset-backed Tokens (ABT)**: Cryptographic tokens that represent a claim on an underlying asset, such as real estate. They allow for the division of real-world assets into tradable digital tokens.
- **Atomic Swaps**: These are smart contracts that enable exchanges from one cryptocurrency to another without using intermediaries.
- **Bag Holder**: A term borrowed from the stock market, it refers to an investor who holds a significant amount of a certain cryptocurrency that has decreased in value, often to the point where selling would not be beneficial.
- **Bitcoin Improvement Proposals (BIP))**: These are the design documents for introducing features or updates to the Bitcoin network. The suggestions are proposed to the Bitcoin community for review.
- **Blockchain**: A system of recording information in a manner that makes it difficult or impossible to change, hack, or cheat the system. A blockchain is essentially a digital ledger of transactions that is duplicated and distributed across the entire network of computer systems on the blockchain.
- **Blockchain Explorer**: An online tool to view all transaction, past and current, on the blockchain.
- **Building Information Modeling (BIM))**: A digital representation of physical and functional characteristics of a facility. It's a shared knowledge resource for information about a facility forming a reliable basis for decisions during its life-cycle.
- **Bounty**: A sum of money offered as a reward for completing a task in the cryptocurrency world. Often used by new projects to incentivize actions such as finding software bugs, promoting the project on social media, etc.
- **Cold Wallet/Storage**: It refers to a wallet which is completely offline and used for storing cryptocurrencies. This method is used to prevent unauthorized access, cyber hacks, and other types of vulnerabilities that a system connected to the internet is susceptible to.
- **Consensus Mechanism**: A process used in computer systems to achieve agreement on a single data value among distributed processes or systems. Consensus mechanisms are essential in blockchain systems for validating transactions.
- **Creator Economy**: A class of businesses built by independent content creators, curators, and community builders including social media influencers, bloggers, and videographers, across various platforms.
- **Cryptocurrency**: A digital or virtual form of currency that uses cryptography for security. It's decentralized and based on blockchain technology.
- **Cryptoeconomics**: A practical science that focuses on the design and characterization of these protocols. Cryptoeconomics is a practical discipline that focuses on the economic security guarantees that a network can offer, as long as certain assumptions hold about the behaviors of participants.
- **Cryptographic Hash Function**: A mathematical algorithm that takes input (or 'message') and returns a fixed-size string of bytes. The output is typically a 'digest' that is unique to each unique input. Hash functions are foundational to blockchain technology.
- **Cyberspace**: A term coined by William Gibson in his novel Neuromancer, it refers to the digital universe created by networked computers. It's a widespread, interconnected digital technology.
- **Decentralized Application (dApp))**: An application that runs on a decentralized network, avoiding failures from a central point. They are typically open-source and leverage blockchain technology.
- **Decentralized Autonomous Corporation (DAC))**: This refers to an organization that is run by rules encoded as computer programs called smart contracts, controlled by shareholders and not influenced by a central government.
- **Decentralized Autonomous Organization (DAO)**: This is an organization represented by rules encoded as a computer program that is transparent, controlled by the organization members and not influenced by a central government.
- **Decentralized Finance (DeFi)**: A blockchain-based form of finance that does not rely on central financial intermediaries such as brokerages, exchanges, or banks to offer traditional financial instruments. Instead, it utilizes smart contracts on blockchains.
- **Decentralized Marketplaces**: These are peer-to-peer trading platforms facilitated by blockchain, where buyers and sellers can transact directly with each other. In real estate, decentralized marketplaces can significantly reduce the need for intermediaries, making the process cheaper and more efficient.
- **Deed Tokenization**: The process of converting a real estate deed or title into a digital token on a blockchain. This can greatly reduce the time and complexity of title transfers and disputes.
- **Digital Currency**: A type of currency that is only available in digital or electronic form. It exhibits properties similar to physical currencies but allows for instantaneous transactions and borderless transfer-of-ownership.
- **Digital Identity**: It is an online or networked identity adopted or claimed in cyberspace by an individual, organization, or electronic device.
- **Digital Twins**: In the context of real estate, this refers to a digital replica of physical assets (like properties or infrastructure) that exist in the physical world. Paired with blockchain, it ensures data integrity, enables secure transactions and paves the way for innovative applications.
- **Distributed Ledger Technology (DLT)**: This is a digital system for recording the transaction of assets. The transactions and their details are recorded in multiple places at the same time.
- **Double Spend Problem**: This is a potential issue with digital currencies where a user can spend the same amount twice, creating fraudulent transactions. Blockchain technology solves the double spend problem through its decentralized consensus mechanisms.
- **ERC-20**: This stands for Ethereum Request for Comments and 20 is the number assigned to this request. It's a specific set of functions which developers must use when coding the token. ERC-20 tokens are blockchain-based assets that have value and can be sent and received.
- **Ethereum**: An open-source, blockchain-based platform that enables the creation of smart contracts and distributes them as decentralized applications (dApps). Ethereum also has a native cryptocurrency called Ether (ETH).
- **Fiat Money**: Currency that a government has declared to be legal tender, but it is not backed by a physical commodity. The value of fiat money is derived from the relationship between supply and demand rather than the value of the material from which the money is made.
- **Fractional Ownership**: The division of any asset into portions or shares. If the asset is expensive, such as real estate, multiple shareholders may own a portion of these shares, which allows them to enter the market at a lower price.
- **Gas Fees**: A term used on the Ethereum platform to represent the cost of performing a transaction or executing a contract on the network.
- **Hard Fork**: A type of protocol upgrade that isn't compatible with the older version. This means all users must update to the latest version to stay in consensus with the rest of the network.
- **Hashrate**: The measure of computational power per second used when mining. A higher hash rate means increased opportunity for cryptocurrency mining and receiving block reward.
- **HODL**: A type of passive investment strategy where you hold an investment for a long period of time, regardless of any changes in the price or markets. The term was created in 2013 in a Bitcoin forum when a user spelled ""hold"" wrong.
- **Initial Coin Offering (ICO)**: An unregulated means by which a blockchain project can raise funds from interested parties. It's similar to an Initial Public Offering (IPO) in the non-digital world.
- **Interoperability**: The ability of different information systems, devices, or applications to access, exchange, integrate, and cooperatively use data in a coordinated manner.
- **KYC/AML**: Stands for ""Know Your Customer"" and ""Anti-Money Laundering"". These are regulatory standards in the financial industry to prevent illegal activities such as fraud and money laundering.
- **Layer-2 Scaling Solutions**: These are technologies that increase the processing capacity of a blockchain (hence scaling) and reduce transaction fees. They operate on a secondary layer atop the primary blockchain (layer-1).
- **Lightning Network**: A ""second layer"" payment protocol that operates on top of a blockchain. The term is usually used to refer to the Lightning Network for bitcoin, but it could be used to describe any layer 2 protocol for a cryptocurrency.
- **Liquidity**: The degree to which an asset or security can be quickly bought or sold in the market without affecting the asset's price.
- **Mechanism Design**: A field in game theory that studies how to design a game or scenario in order to achieve desired outcomes, given that the participants might behave strategically. 
- **Merkle Trees**: They are a fundamental part of blockchain technology. A Merkle tree is a structure that allows for efficient and secure verification of content in a large body of data.
- **Metaverse**: A virtual reality space where users can interact with a computer-generated environment and other users. This technology is expected to play a significant role in social, commercial, and creative interactions in the future.
- **Mining**: The process through which new blocks are added to the blockchain, resulting in the release of new cryptocurrency.
- **Multisignature (Multi-Sig)**: An authorization system that requires more than one valid signatures‚Äîactually a private key, used in the context of cryptocurrencies to sign transactions‚Äîto successfully execute a transaction.
- **Nomic**: A game in which the rules of the game, including the rules for changing the rules, are decided and modified by the players as part of gameplay.
- **Non-Fungible Tokens (NFTs)**: Cryptographic assets on blockchain with unique identification codes and metadata that distinguish them from each other. Unlike cryptocurrencies, they cannot be traded on a like-for-like basis (hence, non-fungible). In the context of real estate, NFTs can represent ownership of a specific, unique piece of property.
- **Open Source Software**: Computer software released under a license in which the copyright holder grants users the rights to use, study, change, and distribute the software and its source code to anyone and for any purpose. Open source software promotes collaboration and transparency.
- **Oracles**: Entities that provide smart contracts with external information. They serve as a bridge between blockchain and the real world.
- **Peer-to-Peer (P2P) Network**: This is a decentralized network where the responsibilities and tasks are allocated evenly among all parties involved. There is no centralized server, and each node, or peer, has the same capabilities and responsibilities.
- **Permissioned Blockchain**: A type of blockchain that is not open to everyone. Only individuals or entities invited by the network administrators can join and participate in the network's consensus protocol.
- **Private Blockchain**: A type of blockchain which is permissioned. They are only accessible to selected members. Transactions are private and are only shared among the participating parties.
- **Proof-of-Authority (PoA)**: A consensus mechanism in a private blockchain which essentially gives one client (or a specific number of clients) with one particular private key the right to make all of the blocks in the blockchain.
- **Proof-of-Stake (PoS)**: A type of consensus mechanism used by blockchain networks to achieve distributed consensus. It requires users to show ownership of a certain number of cryptocurrency units (the ""stake"") to create a new block of transactions.
- **Proof-of-Work (PoW)**: A type of consensus algorithm in a blockchain network where miners solve computationally intensive puzzles to validate transactions and create new blocks.
- **Property Token Exchange (PTX)**: A platform for buying and selling tokenized real estate. Such exchanges can create a liquid market for real estate properties that have typically been illiquid assets.
- **Proptech**: Stands for Property Technology. While not exclusively blockchain-based, it's an umbrella term for the wave of technological innovations changing the way we research, rent, buy, and manage property.
- **Public Blockchain**: A blockchain network where any individual can join or leave at any time without permissions. These blockchains are more decentralized but also can be slower and less efficient.
- **Public/Private Key**: A cryptographic system involving two keys, with the private key remaining known only to the user while the public key is available to others. In the context of cryptocurrencies, this allows users to securely transact with one another.
- **Real Estate Token (RET)**: A digital representation of ownership or equity in a real property, stored on the blockchain. RETs can be traded on specific platforms and can represent fractional ownership in properties.
- **Quadratic Payments**: A system that allows people to fund public goods while preventing undue influence by large contributors. The cost of contribution becomes progressively more expensive, encouraging a large number of small contributions.
- **Quadratic Voting**: A method of collective decision-making in which a participant votes not just for or against an issue, but also expresses how strongly they feel about it. This is done by allocating a number of votes to that issue, with the cost of votes increasing quadratically.
- **Reverse Game Theory**: An alternative term for mechanism design. Rather than taking the rules of the game as given and predicting outcomes, it asks what rules should we design to achieve a desired outcome.
- **Scalability**: Refers to the ability of a system, network, or process to handle a growing amount of work in a capable manner.
- **Security Token**: A type of cryptocurrency that represents ownership in a real-world asset, such as real estate or a company's equity.
- **Segregated Witness (SegWit)**: A protocol upgrade that changes the way data is stored. It was activated on bitcoin in August 2017.
- **Sharding**: A scalability technique where the blockchain is divided into smaller parts, or shards, that can process transactions and smart contracts separately.
- **Sidechains**: These are separate blockchain ledgers derived from a primary blockchain and can operate independently of the primary blockchain. They enable different blockchains to interact with one another and offer more efficient data processing methods.
- **Smart Contract**: Self-executing contracts with the agreement terms directly written into lines of code. These are programs that run when predetermined conditions are met and are stored on a blockchain.
- **Social 3.0**: This term describes a future phase of social networks characterized by decentralized, user-owned data and interoperability between platforms. It's closely associated with the principles of Web 3.0.
- **Soft Fork**: A type of protocol upgrade that is backward compatible, which means non-upgraded nodes can still participate in verifying transactions.
- **Solidity**: This is a programming language used for implementing smart contracts on various blockchain platforms, especially on Ethereum.
- **Spatial Web**: A computing environment that exists in three-dimensional space‚Äîa fusion of real and virtual realities‚Äîenabled via billions of connected devices and accessed through the interfaces of virtual and augmented reality.
- **Staking**: The act of participating in a Proof-of-Stake (PoS) consensus mechanism by holding and ""staking"" a cryptocurrency in a wallet to support operations such as block validation, security, and governance on a blockchain network.
- **Stablecoin**: A type of cryptocurrency that is designed to maintain a stable value, as opposed to highly volatile cryptocurrencies like Bitcoin. Stablecoins are often pegged to a reserve of assets.
- **Sustainability**: In the context of real estate, this term refers to constructing and managing buildings in ways that are environmentally responsible and resource-efficient, from siting to design, construction, operation, maintenance, renovation, and deconstruction.
- **Token Burn**: The process of intentionally and permanently removing tokens from circulation, reducing the total supply, often to control the inflation rate of a cryptocurrency.
- **Tokenization**: The process of converting rights to an asset into a digital token on a blockchain. This can be done with any asset, including real estate.
- **Tokenized Real Estate**: The process of converting the ownership rights of a real estate asset into a digital token on a blockchain. This allows for fractional ownership, easier transfers of ownership, and the potential for a global pool of buyers and sellers.
- **Utility Token**: A type of cryptocurrency that provides users with access to a product or service, but does not represent ownership.
- **Wallet**: In the context of cryptocurrency, a wallet is a digital place to store cryptocurrency tokens securely.
- **Web 3.0**: Also known as the semantic web, it represents a future phase of the internet where information is connected in meaningful, machine-readable ways. It's often associated with the use of blockchain and decentralized systems.
- **Whale**: In the context of cryptocurrencies, a whale is an entity with enough power to directly influence the price of that cryptocurrency by initiating large buy or sell orders.
- **Wrapped Tokens**: These are cryptocurrencies hosted on the Ethereum blockchain that mirror the value of another asset.
- **Yield Farming**: Also referred to as liquidity mining, yield farming is a way to generate rewards with cryptocurrency holdings, typically in the DeFi space. In simple terms, it means locking up cryptocurrencies and getting rewards.
- **Zero Knowledge Proofs (ZKP)**: This is a cryptographic method which allows one party (the prover) to prove to another party (the verifier) that they know a specific piece of information, without revealing that information.

---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",0,0,2,0,real-estate,"[architecture, block-foundation, blockchain, blockchain-technology, blockfoundation, glossary, real-estate]",0
lwoluke,React-RealEstate-Pt1,,https://github.com/lwoluke/React-RealEstate-Pt1,https://api.github.com/repos/React-RealEstate-Pt1/lwoluke,ReactJS: Real Estate Website Part 1,"# Real Estate Website Part¬†1
Using ReactJS with styled components and HTML.
## Setup
To setup your computer, follow these steps:

1) Download NodeJS: https://nodejs.org/en/download/
2) Clone this repo using the command:
```
git clone ""https://github.com/lwoluke/React-RealEstate-Pt1.git""
```
3) Enter the following into the terminal:
```
npm rebuild
npm install
npm update
```
4) If unable to run on local development server, create a .env file and paste the following line:
```
SKIP_PREFLIGHT_CHECK=true
```
For the best experience, use VS Code.
### Blog post I made on the creation of this project: https://medium.com/@luke_o/reactjs-real-estate-website-part-1-47f47fd7d678

### Stay tuned for Part 2 
",2,2,1,0,real-estate,"[javascript, react, reactjs, real-estate, webdevelopment]",0
OpenEstate,OpenEstate-IS24-REST,OpenEstate,https://github.com/OpenEstate/OpenEstate-IS24-REST,https://api.github.com/repos/OpenEstate-IS24-REST/OpenEstate,a Java client library for the REST-Webservice of ImmobilienScout24.de,"OpenEstate-IS24-REST 0.6
========================

OpenEstate-IS24-REST is a client library for the REST-Webservice of [ImmobilienScout24.de](https://www.immobilienscout24.de/) written in Java. This library is used within [OpenEstate-ImmoTool](https://openestate.org/) and in some of our clients projects in order to import / export their real estates to [ImmobilienScout24.de](https://www.immobilienscout24.de/).


Features
--------

-   authentication through [OAuth](https://api.immobilienscout24.de/useful/authentication.html)
-   read and write XML according to the specifications of the Webservice
-   low level functions to call [Import/Export API](https://api.immobilienscout24.de/our-apis/import-export.html) and [Geo Information Service API](https://api.immobilienscout24.de/our-apis/gis.html)
-   high level functions for the export of multiple real estates (including contacts, attachments and streaming videos)
-   create real estates randomly
-   example web application for the [OAuth](https://api.immobilienscout24.de/useful/authentication.html)
    verification process


Components
----------

The library is split into different components:

-   **OpenEstate-IS24-REST-Core**

    -   Java classes, that represent the [XML schemas](Core/src/main/schema) of the Webservice
    -   XML reading and writing according to the [XML schemas](Core/src/main/schema) of the Webservice
    -   low level methods to access the Webservice (see [`ImportExport.java`](Core/src/main/java/org/openestate/is24/restapi/ImportExport.java) and [`GIS.java`](Core/src/main/java/org/openestate/is24/restapi/GIS.java))
    -   high level methods for a straightforward export of real estates (see [`ExportPool.java`](Core/src/main/java/org/openestate/is24/restapi/utils/ExportPool.java) and [`ExportHandler.java`](Core/src/main/java/org/openestate/is24/restapi/utils/ExportHandler.java))
    -   communicate with the Webservice through [`java.net.HttpURLConnection`](https://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html) (see [`DefaultClient.java`](Core/src/main/java/org/openestate/is24/restapi/DefaultClient.java))

-   **OpenEstate-IS24-REST-HC4**

    -   communicate with the Webservice through [Apache HttpClient 4.5](https://hc.apache.org/httpcomponents-client-4.5.x/) (see [`HttpComponents4Client.java`](HC4/src/main/java/org/openestate/is24/restapi/hc4/HttpComponents4Client.java))

-   **OpenEstate-IS24-REST-Examples**

    -   some example classes to illustrate library usage

-   **OpenEstate-IS24-REST-WebApp**

    -   an example web application to illustrate the [OAuth](https://api.immobilienscout24.de/useful/authentication.html) verification process (see [`VerificationServlet.java`](WebApp/src/main/java/org/openestate/is24/restapi/webapp/VerificationServlet.java))


How to use
----------

Download the [latest release from GitHub](https://github.com/OpenEstate/OpenEstate-IS24-REST/releases/latest). The provided archive contains all required files (compiled libraries, dependencies, source code and documentations).

Alternatively you can integrate the library from [Maven Central Repository](https://search.maven.org/#search|ga|1|org.openestate.is24) into your [Maven](https://maven.apache.org/) project. Just add one or more of the following dependencies to your projects `pom.xml` (according to your requirements):

```xml
<dependency>
  <groupId>org.openestate.is24</groupId>
  <artifactId>OpenEstate-IS24-REST-Core</artifactId>
  <version>0.6</version>
</dependency>

<dependency>
  <groupId>org.openestate.is24</groupId>
  <artifactId>OpenEstate-IS24-REST-HC4</artifactId>
  <version>0.6</version>
</dependency>
```

You can find further information in the [project wiki](https://github.com/OpenEstate/OpenEstate-IS24-REST/wiki) or in the `docs` subfolder.


Requirements
------------

-   You need to [register for API access](https://rest.immobilienscout24.de/restapi/security/registration).
-   You need to accept the [terms of use](https://api.immobilienscout24.de/terms-of-use.html).
-   After the registration process you should receive a **consumer token** and **consumer secret**.


Dependencies
------------

-   Java 8 or newer
-   [commons-codec 1.15](https://commons.apache.org/proper/commons-codec/)
-   [commons-io 2.11.0](https://commons.apache.org/proper/commons-io/)
-   [commons-lang 3.12.0](https://commons.apache.org/proper/commons-lang/)
-   [commons-text 1.9](https://commons.apache.org/proper/commons-text/)
-   [Eclipse Implementation of JAXB 2.3.5](https://projects.eclipse.org/projects/ee4j.jaxb-impl)
-   [Jakarta Activation 1.2.2](https://projects.eclipse.org/projects/ee4j.jaf)
-   [Jakarta Annotations 1.3.5](https://projects.eclipse.org/projects/ee4j.ca)
-   [Jakarta XML Binding 2.3.3](https://projects.eclipse.org/projects/ee4j.jaxb)
-   [jaxb2-basics-runtime 0.12.0](https://github.com/highsource/jaxb2-basics)
-   [oauth-signpost 2.1.1](https://github.com/mttkay/signpost)
-   [SLF4J 1.7.30](https://www.slf4j.org/)
-   [Lorem 2.1](https://github.com/mdeanda/lorem) (only required by [`RandomRealEstateFactory.java`](Core/src/main/java/org/openestate/is24/restapi/utils/RandomRealEstateFactory.java))
-   [Apache HttpClient 4.5](https://hc.apache.org/httpcomponents-client-4.5.x/) (optional) with further dependencies:
    -   [commons-logging 1.2](https://commons.apache.org/proper/commons-logging/)
    -   [Apache HttpCore 4.4](https://hc.apache.org/httpcomponents-core-4.4.x/)


Notes about JDK versions below 11
---------------------------------

JAXB is bundled with JDK 8, was disabled / deprecated in JDK 9 & 10 and finally removed in JDK 11. Therefore, we're providing JAXB as an explicit dependency. See also [""JAXB on Java 9, 10, 11 and beyond""](https://www.jesperdj.com/2018/09/30/jaxb-on-java-9-10-11-and-beyond/). 

It is recommended to use this library with JDK 11 as it should work out of the box. In case you're using JDK 8, you might need to follow one of these steps documented at [""JAXB Release Documentation""](https://javaee.github.io/jaxb-v2/doc/user-guide/release-documentation.html#deployment-migrating-jaxb-2-0-applications-to-javase-6):

> JavaSE comes with JAXB 2.x API/implementation in `rt.jar`. Each version of JavaSE (6, 7, 8, ...) contains different version of JAXB 2.x API. Therefore, if you want to use different version of JAXB API/implementation than the one present in your version of JDK, you are required to override a portion of `rt.jar` with the new API. There are several ways to achieve this:
> 
> 1.    Place the `jakarta.xml.bind-api-X.Y.Z.jar` into `$JRE_HOME/lib/endorsed`. **Do not put other JAXB jars into the endorsed directory.** This essentially makes your JRE to ""JRE X + JAXB 2.y"". This would affect any other applications that use this JRE, and it's easy. On the other hand, in various scenarios you may not be able to alter the JRE.
> 
> 2.    Use the system property `java.endorsed.dirs` when you launch your application, and have it point to the directory which contains the `jakarta.xml.bind-api-X.Y.Z.jar` only. **The directory must not contain any other jaxb artifacts.** This allows you to use different version of JAXB for different applications. 
> 
> See the [endorsed directory mechanism](http://docs.oracle.com/javase/6/docs/technotes/guides/standards/) for more details.

All provided dependencies should work with JDK 8. If compatibility problems occur, you might replace them with an earlier version.


Limitations
-----------

The use of the Webservice may be limited by [ImmobilienScout24](https://www.immobilienscout24.de/) to a maximal number of operations per day. Contact <service@immobilienscout24.de> if the limit is too low for your use case.


XML schemas
-----------

XML specifications for the different webservices are available at:

-   [**Import/Export API**](https://api.immobilienscout24.de/our-apis/import-export.html)
    -   [XML-Schemas for the *production* system](https://rest.immobilienscout24.de/restapi/api/offer/v1.0/?_wadl&_schema)
    -   [XML-Schemas for the *sandbox* system](https://rest.sandbox-immobilienscout24.de/restapi/api/offer/v1.0/?_wadl&_schema)

-   [**Geo Information Service API**](https://api.immobilienscout24.de/our-apis/gis.html)
    -   [XML-Schemas for the *production* system](https://rest.immobilienscout24.de/restapi/api/gis/v1.0/?_wadl&_schema)
    -   [XML-Schemas for the *sandbox* system](https://rest.sandbox-immobilienscout24.de/restapi/api/gis/v1.0/?_wadl&_schema)


Changelog
---------

Take a look at [`CHANGELOG.md`](CHANGELOG.md) for the full changelog.


License
-------

This library is licensed under the terms of [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0.html). Take a look at [`LICENSE.txt`](LICENSE.txt) for the license text.


Todo
----

-   further testing
-   implement other API's - e.g.
    -   [Expose API](https://api.immobilienscout24.de/our-apis/expose.html)
    -   [Search API](https://api.immobilienscout24.de/our-apis/search.html)
    -   [Product Valuation Services API](https://api.immobilienscout24.de/our-apis/valuation.html)
    -   [Construction Financing API](https://api.immobilienscout24.de/our-apis/construction-financing.html)


Further information
-------------------

-   [OpenEstate-IS24-REST at GitHub](https://github.com/OpenEstate/OpenEstate-IS24-REST)
-   [Releases of OpenEstate-IS24-REST](https://github.com/OpenEstate/OpenEstate-IS24-REST/releases)
-   [Changelog of OpenEstate-IS24-REST](https://github.com/OpenEstate/OpenEstate-IS24-REST/blob/master/CHANGELOG.md)
-   [API documentation of OpenEstate-IS24-REST](https://media.openestate.org/apidocs/OpenEstate-IS24-REST/)
-   [ImmobilienScout24 Developer Center](https://api.immobilienscout24.de/)
-   [ImmobilienScout24-REST-API Forum](https://groups.google.com/forum/#!forum/immobilienscout24-development)
-   [ImmobilienScout24-REST-API Playground](https://playground.immobilienscout24.de/rest/playground)
-   [API registration for the *production* system](https://rest.immobilienscout24.de/restapi/security/registration)
-   [API registration for the *sandbox* system](https://rest.sandbox-immobilienscout24.de/restapi/security/registration)
-   [alternative Java SDK by ImmobilienScout24](https://github.com/ImmobilienScout24/restapi-java-sdk)
",7,7,7,2,real-estate,"[export, immobilienscout24, import, real-estate, realestate, rest, webservice]",0
itsrobli,data-transfer-project-real-estate-industry,,https://github.com/itsrobli/data-transfer-project-real-estate-industry,https://api.github.com/repos/data-transfer-project-real-estate-industry/itsrobli,The goal of this project is to make it really easy and quick to transfer data between participants in the real estate investment management industry.,"# Data Transfer Project - Real Estate Industry (DTP-REI)

- [Data Transfer Project - Real Estate Industry (DTP-REI)](#data-transfer-project---real-estate-industry-dtp-rei)
  - [Overview](#overview)
  - [Current state](#current-state)
- [Background](#background)
  - [Background to the problem](#background-to-the-problem)
  - [Motivations and goals](#motivations-and-goals)
- [Architecture](#architecture)
  - [System components](#system-components)
    - [Data Models](#data-models)
    - [Adapters](#adapters)
      - [Data Adapters](#data-adapters)
      - [Authentication Adapters](#authentication-adapters)
    - [Task Management - the plumbing](#task-management---the-plumbing)
  - [System deployment](#system-deployment)

## Overview

The goal of this project is to make it really easy and quick to transfer data between participants in the real estate investment management industry.

I believe the solution is to establish industry standard protocols between data senders and receipients. Together, we will try to achieve this by building adapters and common data models in this project so that anybody can use them.

The framework and ideas of this Project are heavily borrowed from the original [Data Transfer Project](https://datatransferproject.dev). As suggested by the naming of this project, our approach is to extend these ideas and create the implementation as it applies to the real estate industry.

## Current state

This project is just starting. Please register your interest in the [discussion forum](https://github.com/itsrobli/data-transfer-project-real-estate-industry/discussions/2).

I am looking for people to contribute to the project. Together, we will continuing to define the architecture and implementation. Please participate in the [open issues](https://github.com/itsrobli/data-transfer-project-real-estate-industry/issues).

Any code in the repo is in active development, please do thorough testing and verification before implementing for production use.

# Background

##  Background to the problem

In the real estate industry, we frequently exchange a lot of information and data with each other because joint ownership of assets is very common. Every reporting period (usually monthly), real estate property, investment, and fund managers send each other tonnes of data so each can have a wholistic package of data to suit their own reporting and analytics needs.

Given everyone has their own systems and processes, there is work on both ends of the transporation of data:

- **Sender of data**: The Sender of the data must process it into the right data shape and reporting format for the receipient (it's common a PDF management report and some Excel tables is provided). This deliverable is often different to the way the sender reports the same information internally. In addition, each receipient will specify their own requirements which are often different from other receipients - this compounds the amount of work for the Sender. 

- **Receipient**: The receipient of this data often must translate the information into what their home systems will understand because this data will feed into various other reporting and analytics requirements. The logical question is, didn't the Sender do this work already? Yes, if only the world was so perfect!

Typically every month, these processes are done manually by an army of finance people across the industry who spend days and weeks translating each other‚Äôs spreadsheets into their home system.

## Motivations and goals

The motivation is to stop the suffering caused by this manual translation of data back and forth. This can be achieved by making sure the sender and the receipient are aligned by defininig a common sharing protocol.

Given it's a common problem with limited specialist resources to solve it, and requires widespread adoption, running it as an open source project is the best way to concentrate the effort and ensure everyone can benefit and use it.

# Architecture

The system's main goal is to make it easy for a new participant to adopt the standards and get immediate benefit. Principles to follow to enable this:

- Use existing standards where possible - for example, don't re-invent REST or OAuth.

- The majority of work for a new Participant should be on the Adapters that enable import and export functionality. They should not have to modify their existing APIs, authorisation systems, and other internal core systems.

- DTP-REI infrastructure deployment should be standard (i.e. Docker).

## System components

1. **Data Models‚Äã** are the canonical formats that establish a common understanding of how to
transfer data.

2. **Adapters‚Äã** provide a method for converting each Participant's proprietary data and
authentication formats into a form that is usable by the system (and therefore other Participants).

3. **Task Management Library**‚Äã provides the plumbing to power the system.

![DTP-REI high level architecture](/documentation/dtp-rei-architecture-components.png)

### Data Models

The Data Model for transferring data assets consists of two parts: a file type and the additional metadata needed by the receiving Participant to accurately import the data. For example with financial data, the file type might be a standard format such as CSV, and the metadata would include information such as general ledger account code, description, period, amount, etc.

Data Models are clustered together, typically by industry grouping, to form Verticals. A Participant could have data in one or more Verticals. Verticals could be financials, tenants, properties, etc. Each Vertical has its own set of Data Models that enable seamless transfer of the relevant file types. For example, the Financials Vertical could have Data Models for cashflows, forecasts, budgets, and valuations.

Ideally, a Vertical will have a small number of well-defined and widely-adopted Data Models. In such a situation, the generally accepted standard will be used as the Data Model for that Vertical across real estate management companies and funds. This is not currently the case for most Verticals because Data Models have emerged organically in a largely disconnected ecosystem.

One goal of the DTP-REI is to encourage organisations to use common Data Models in their systems, which will happen if organisations take importing and exporting data into consideration when initially designing their systems or providing updates. Using a common Data Model will significantly reduce the need for companies to maintain and update proprietary APIs.

In the case where there is no standard Data Model for a Vertical, companies will want to collaborate and agree upon standardised Data Models, either during the DTP-REI development or in collaboration with external standards bodies. Without collaboration, each provider could have their own Data Model, and would have to create Adapters that would have to support the same number of Data Models as there are companies in the Vertical, which would reduce the usefulness of the DTP-REI.

Even where standard Data Models do exist, collaboration will be an ongoing and mutually beneficial shared commitment as APIs will need to be maintained to handle new features, evolving standards, or innovative new formats.

### Adapters

There are two main kinds of Adapters: Data Adapters and Authentication Adapters. These Adapters exist outside of a Participant's core systems and can be written either by the Participant itself, or by third parties that would like to enable data transfer to and from a Participant.

#### Data Adapters

Data Adapters are pieces of code that translate a given Participant‚Äôs APIs into Data Models used by the DTP-REI. Data Adapters come in pairs: an exporter that translates from the Participant's API into the Data Model, and an importer that translates from the Data Model into the Participant's API.

#### Authentication Adapters

Authentication Adapters are pieces of code that allow users (likely employees of the organisations) to authenticate their accounts before transferring data out of or into another Participant's systems. OAuth is likely to be the choice for most Participants, however the DTP-REI is agnostic to the type of authentication.

Note: Under this system, emailing spreadsheets could be seen as a type of transport and authentication.


### Task Management - the plumbing

The Task Management Libraries handle background tasks, such as calls between the two relevant Adapters, secure data storage, retry logic, rate limiting, pagination management, failure handling, and individual notifications.

The DTP-REI aims to develope a collection of Task Management Libraries as a reference implementation for how to utilise the Adapters to transfer data between two Participants. If preferred, Participants can choose to write their own implementation of the Task Management Libraries that utilise the Data Models and Adapters of the DTP-REI.

## System deployment

The method of deployment will determine how the system's components work together. As with the original DTP, multiple deployment models should work. However, for now, we will focus on the distributed model.

This model requires at least one Participant to spin-up their own Host Platform using the relevent components of this project. 

As can be seen below, Participant C and E cannot directly transfer data to each other because neither has a Host Platform.

![DTP-REI high level system deployment](/documentation/dtp-rei-architecture-system-deployment.png)
",3,3,4,2,real-estate-management,"[data, data-portability, data-standards, portability, real-estate-management, transfer]",0
diabolical-ninja,house_pricing,,https://github.com/diabolical-ninja/house_pricing,https://api.github.com/repos/house_pricing/diabolical-ninja,"Source, clean & analyse Australian house pricing data",,5,5,1,0,real-estate,"[analytics, machine-learning, python, real-estate]",0
block-foundation,solidity-template,block-foundation,https://github.com/block-foundation/solidity-template,https://api.github.com/repos/solidity-template/block-foundation,Solidity Smart Contract: Template,"<div align=""right"">

[![GitHub License](https://img.shields.io/github/license/block-foundation/blocktxt?style=flat-square&logo=readthedocs&logoColor=FFFFFF&label=&labelColor=%23041B26&color=%23041B26&link=LICENSE)](https://github.com/block-foundation/solidity-template/blob/main/LICENSE)
[![devContainer](https://img.shields.io/badge/Container-Remote?style=flat-square&logo=visualstudiocode&logoColor=%23FFFFFF&label=Remote&labelColor=%23041B26&color=%23041B26)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/block-foundation/solidity-template)

</div>

---

<div>
    <img align=""right"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/logo/logo_gray.png"" width=""96"" alt=""Block Foundation Logo"">
    <h1 align=""left"">Solidity Smart-Contract Template</h1>
    <h3 align=""left"">Block Foundation Smart Contract Series [Solidity]</h3>
</div>

---

<img align=""right"" width=""75%"" src=""https://raw.githubusercontent.com/block-foundation/brand/master/src/image/repository_cover/block_foundation-structure-03-accent.jpg""  alt=""Block Foundation Brand"">

### Contents

- [Introduction](#introduction)
- [Colophon](#colophon)

<br clear=""both""/>

---

<div align=""right"">

[![Report a Bug](https://img.shields.io/badge/Report%20a%20Bug-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-template/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=bug_report.yml)
[![Request a Feature](https://img.shields.io/badge/Request%20a%20Feature-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-template/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=feature_request.yml)
[![Ask a Question](https://img.shields.io/badge/Ask%20a%20Question-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-template/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=question.yml)
[![Make a Suggestion](https://img.shields.io/badge/Make%20a%20Suggestion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-template/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=suggestion.yml)
[![Start a Discussion](https://img.shields.io/badge/Start%20a%20Discussion-GitHub?style=flat-square&&logoColor=%23FFFFFF&color=%23E1E4E5)](https://github.com/block-foundation/solidity-template/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2Ctype%3Abug-suspected&projects=&template=discussion.yml)

</div>

## Introduction

...

## Quick Start

> Install

``` sh
npm i
```

> Compile

``` sh
npm run compile
```

## Contract


## Development Resources

### Other Repositories

#### Block Foundation Smart Contract Series

|                                   | `Solidity`  | `Teal`      |
| --------------------------------- | ----------- | ----------- |
| **Template**                      | [**>>>**](https://github.com/block-foundation/solidity-template) | [**>>>**](https://github.com/block-foundation/teal-template) |
| **Architectural Design**          | [**>>>**](https://github.com/block-foundation/solidity-architectural-design) | [**>>>**](https://github.com/block-foundation/teal-architectural-design) |
| **Architecture Competition**      | [**>>>**](https://github.com/block-foundation/solidity-architecture-competition) | [**>>>**](https://github.com/block-foundation/teal-architecture-competition) |
| **Housing Cooporative**           | [**>>>**](https://github.com/block-foundation/solidity-housing-cooperative) | [**>>>**](https://github.com/block-foundation/teal-housing-cooperative) |
| **Land Registry**                 | [**>>>**](https://github.com/block-foundation/solidity-land-registry) | [**>>>**](https://github.com/block-foundation/teal-land-registry) |
| **Real-Estate Crowdfunding**      | [**>>>**](https://github.com/block-foundation/solidity-real-estate-crowdfunding) | [**>>>**](https://github.com/block-foundation/teal-real-estate-crowdfunding) |
| **Rent-to-Own**                   | [**>>>**](https://github.com/block-foundation/solidity-rent-to-own) | [**>>>**](https://github.com/block-foundation/teal-rent-to-own) |
| **Self-Owning Building**          | [**>>>**](https://github.com/block-foundation/solidity-self-owning-building) | [**>>>**](https://github.com/block-foundation/teal-self-owning-building) |
| **Smart Home**                    | [**>>>**](https://github.com/block-foundation/solidity-smart-home) | [**>>>**](https://github.com/block-foundation/teal-smart-home) |


---

## Colophon

### Authors

This is an open-source project by the **[Block Foundation](https://www.blockfoundation.io ""Block Foundation website"")**.

The Block Foundation mission is enabling architects to take back initiative and contribute in solving the mismatch in housing through blockchain technology. Therefore the Block Foundation seeks to unschackle the traditional constraints and construct middle ground between rent and the rigidity of traditional mortgages.

website: [www.blockfoundation.io](https://www.blockfoundation.io ""Block Foundation website"")

### Development Resources

#### Contributing

We'd love for you to contribute and to make this project even better than it is today!
Please refer to the [contribution guidelines](.github/CONTRIBUTING.md) for information.

### Legal Information

#### Copyright

Copyright &copy; 2023 [Stichting Block Foundation](https://www.blockfoundation.io/ ""Block Foundation website""). All Rights Reserved.

#### License

Except as otherwise noted, the content in this repository is licensed under the
[Creative Commons Attribution 4.0 International (CC BY 4.0) License](https://creativecommons.org/licenses/by/4.0/), and
code samples are licensed under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).

Also see [LICENSE](https://github.com/block-foundation/community/blob/master/src/LICENSE) and [LICENSE-CODE](https://github.com/block-foundation/community/blob/master/src/LICENSE-CODE).

#### Disclaimer

**THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.**
",1,1,2,0,real-estate,"[architecture, block-foundation, blockchain, blockfoundation, eth, ethereum, hardhat, real-estate, smart-contracts, sol, solidity, template]",0
brokalys,sls-pinger,brokalys,https://github.com/brokalys/sls-pinger,https://api.github.com/repos/sls-pinger/brokalys,Serverless function for retrieving PINGER results & sending emails,"# Serverless PINGER

[![Build status](https://github.com/brokalys/sls-pinger/actions/workflows/deploy.yaml/badge.svg)](https://github.com/brokalys/sls-pinger/actions/workflows/deploy.yaml)
[![codecov](https://codecov.io/gh/brokalys/sls-pinger/branch/master/graph/badge.svg)](https://codecov.io/gh/brokalys/sls-pinger)
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)

## Requirements

- Node
- Yarn

## Installation

```sh
yarn install
```

## Testing

```sh
yarn test
```

## Linting

```sh
yarn lint
```

## Deployment

Github actions take care of deployments. The following command can be used for doing manual deployments.

```sh
yarn deploy
```
",1,1,3,0,real-estate,"[javascript, node, real-estate, serverless]",0
wp-api-libraries,wp-sparkplatform-api,wp-api-libraries,https://github.com/wp-api-libraries/wp-sparkplatform-api,https://api.github.com/repos/wp-sparkplatform-api/wp-api-libraries,A WordPress php library for interacting with the SparkPlatform API.,"# wp-sparkplatform-api
A WordPress php library for interacting with the [SparkPlatform API](https://sparkplatform.com).
",0,0,2,0,real-estate,"[real-estate, realestate, spark, wp-api-library]",0
shaikhalamin,property-finder,,https://github.com/shaikhalamin/property-finder,https://api.github.com/repos/property-finder/shaikhalamin,Property finder web app for rent and sale properties. Built using next typescript and next auth with access token and refresh token,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
# property-finder-fe
",1,1,2,0,property-management,"[next-auth, nextjs, property-management, reactjs, typescript]",0
