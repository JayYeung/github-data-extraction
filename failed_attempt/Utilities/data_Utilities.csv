,repo,user,organization,url (HTML),url (API),description,readme,stargazer count,watcher count,subscriber count,open issue count,topic (search),topics,NAICS Code
0,scaphandre,hubblo-org,N/A,N/A,https://api.github.com/repos/hubblo-org/scaphandre,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A2:18E3:28BF2B:54D11F:65223FBD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
1,home-assistant-glow,klaasnicolaas,N/A,N/A,https://api.github.com/repos/klaasnicolaas/home-assistant-glow,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19A:0BEC:290AD6:557AF4:65223FBE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
2,thc-tesla-powerwall2-hack,hackerschoice,N/A,N/A,https://api.github.com/repos/hackerschoice/thc-tesla-powerwall2-hack,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19B:458F:2C2D083:5A9792A:65223FBE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
3,pudl,catalyst-cooperative,catalyst-cooperative,https://github.com/catalyst-cooperative/pudl,https://api.github.com/repos/catalyst-cooperative/pudl,"The Public Utility Data Liberation Project provides analysis-ready energy system data to climate advocates, researchers, policymakers, and journalists.","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",393,393,16,362,electricity,"[cems, climate, coal, ddj, eia, eia860, eia923, electricity, emissions, energy, epa, etl, ferc, ghg, natural-gas, open-data, pudl, python, sqlite, utility]",00000
4,PowerSimulations.jl,NREL-Sienna,N/A,N/A,https://api.github.com/repos/NREL-Sienna/PowerSimulations.jl,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C132:6C98:29D894:57044A:65223FBF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
5,energy-data,owid,N/A,N/A,https://api.github.com/repos/owid/energy-data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F6:797D:272C71:51B17E:65223FC0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
6,ElectricalAge,Electrical-Age,N/A,N/A,https://api.github.com/repos/Electrical-Age/ElectricalAge,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C179:0BEC:290CAC:557EE3:65223FC0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
7,ha-hildebrandglow-dcc,HandyHat,N/A,N/A,https://api.github.com/repos/HandyHat/ha-hildebrandglow-dcc,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C120:1ECC:29B185:56BAFB:65223FC1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
8,linky,bokub,N/A,N/A,https://api.github.com/repos/bokub/linky,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C187:2772:28BBAE1:53CA769:65223FC1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
9,gsee,renewables-ninja,N/A,N/A,https://api.github.com/repos/renewables-ninja/gsee,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18C:840D:2928DC2:549BBFA:65223FC2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
10,electric-operator,davidshepherd7,N/A,N/A,https://api.github.com/repos/davidshepherd7/electric-operator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C121:1D49:2C2889E:5A84471:65223FC3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
11,electra,Alkia,N/A,N/A,https://api.github.com/repos/Alkia/electra,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12C:7A65:282C9E:53B91A:65223FC3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
12,gridpath,blue-marble,N/A,N/A,https://api.github.com/repos/blue-marble/gridpath,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A7:7A65:282D5C:53BA98:65223FC4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
13,carbon-footprint,NMF-earth,N/A,N/A,https://api.github.com/repos/NMF-earth/carbon-footprint,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E2:0BEC:29110F:5587EF:65223FC4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
14,ElectricPy,engineerjoe440,N/A,N/A,https://api.github.com/repos/engineerjoe440/ElectricPy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16F:24F2:298E5B4:554F0C3:65223FC5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
15,LaMaisonVivante,Hywan,N/A,N/A,https://api.github.com/repos/Hywan/LaMaisonVivante,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C162:7890:29094A:556F6A:65223FC6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
16,rte-ecowatt,kamaradclimber,N/A,N/A,https://api.github.com/repos/kamaradclimber/rte-ecowatt,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13B:17C0:285C91:542273:65223FC6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
17,open-energy-view,JPHutchins,N/A,N/A,https://api.github.com/repos/JPHutchins/open-energy-view,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E1:6584:282E855:529EF54:65223FC7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
18,TechMillForKids,jessehamner,N/A,N/A,https://api.github.com/repos/jessehamner/TechMillForKids,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C174:6B96:284F8E5:52F44D2:65223FC8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
19,homeassistant_cz_energy_spot_prices,rnovacek,N/A,N/A,https://api.github.com/repos/rnovacek/homeassistant_cz_energy_spot_prices,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C182:0208:2DD807C:5DE4EB3:65223FC8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
20,open-grid-emissions,singularity-energy,N/A,N/A,https://api.github.com/repos/singularity-energy/open-grid-emissions,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16B:38A4:2BA9AE3:5998C42:65223FC9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
21,NYISOToolkit,m4rz910,N/A,N/A,https://api.github.com/repos/m4rz910/NYISOToolkit,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C183:1CC6:2A26932:568323C:65223FC9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
22,SpineOpt.jl,spine-tools,N/A,N/A,https://api.github.com/repos/spine-tools/SpineOpt.jl,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18F:3493:270A486:505DB9D:65223FCA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
23,Internet-of-Things-Power-Meter,Nurgak,N/A,N/A,https://api.github.com/repos/Nurgak/Internet-of-Things-Power-Meter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17C:797D:2735B6:51C4DE:65223FCB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
24,vwf,renewables-ninja,N/A,N/A,https://api.github.com/repos/renewables-ninja/vwf,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B8:1560:28D0B71:53DC9FD:65223FCB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
25,awesome-NILM-with-code,zhgqcn,N/A,N/A,https://api.github.com/repos/zhgqcn/awesome-NILM-with-code,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:6B96:284FE83:52F5041:65223FCC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
26,electricity-theft-detection-with-self-attention,neuralmind-ai,N/A,N/A,https://api.github.com/repos/neuralmind-ai/electricity-theft-detection-with-self-attention,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C4:643D:2A0EC3F:5641394:65223FCC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
27,octopus-energy-rates-card,lozzd,N/A,N/A,https://api.github.com/repos/lozzd/octopus-energy-rates-card,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BC:1560:28D0DB6:53DCEA6:65223FCD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
28,ontario_energy_board,jrfernandes,N/A,N/A,https://api.github.com/repos/jrfernandes/ontario_energy_board,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A7:7A65:2837A8:53CFF6:65223FCE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
29,day-ahead,corneel27,N/A,N/A,https://api.github.com/repos/corneel27/day-ahead,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2B9325E:59637F4:65223FCE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
30,hass_omie,luuuis,N/A,N/A,https://api.github.com/repos/luuuis/hass_omie,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C136:4771:2983B6:5645F3:65223FCF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
31,Mixed-Integer-Linear-Programming-Example-Power-Systems-Analysis-A,kathleenwest,N/A,N/A,https://api.github.com/repos/kathleenwest/Mixed-Integer-Linear-Programming-Example-Power-Systems-Analysis-A,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C195:6C98:29E72A:5722A6:65223FCF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
32,ioBroker.e3dc-rscp,git-kick,N/A,N/A,https://api.github.com/repos/git-kick/ioBroker.e3dc-rscp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B5:797D:273A42:51CE68:65223FD0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
33,simona,ie3-institute,N/A,N/A,https://api.github.com/repos/ie3-institute/simona,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:1CC6:2A271B8:56843E8:65223FD1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
34,Short-Term-Electricity-Price-Forecasting-at-the-Polish-Day-Ahead-Market,piekarsky,N/A,N/A,https://api.github.com/repos/piekarsky/Short-Term-Electricity-Price-Forecasting-at-the-Polish-Day-Ahead-Market,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E5:38A4:2BAA7E9:599A6F0:65223FD1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
35,flextool,irena-flextool,N/A,N/A,https://api.github.com/repos/irena-flextool/flextool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C107:33EB:2B00A3:59507D:65223FD2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
36,energy-prediction,sandeshbhatjr,N/A,N/A,https://api.github.com/repos/sandeshbhatjr/energy-prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C162:7890:291824:558DD0:65223FD3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
37,ma-thesis,indyfree,N/A,N/A,https://api.github.com/repos/indyfree/ma-thesis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15E:38A4:2BAAAB6:599AC9F:65223FD3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
38,inzight,sdebruyn,N/A,N/A,https://api.github.com/repos/sdebruyn/inzight,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:1CC6:2A27567:5684B67:65223FD4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
39,PWF.jl,LAMPSPUC,N/A,N/A,https://api.github.com/repos/LAMPSPUC/PWF.jl,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DE:3B38:2CD543:5CDBE1:65223FD5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
40,pub-data-visualization,cre-dev,N/A,N/A,https://api.github.com/repos/cre-dev/pub-data-visualization,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C129:22D5:2F2F303:609E4E7:65223FD5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
41,cats,GreenScheduler,N/A,N/A,https://api.github.com/repos/GreenScheduler/cats,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19B:458F:2C2F1EC:5A9BDEF:65223FD6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
42,iberdrola,zoilomora,N/A,N/A,https://api.github.com/repos/zoilomora/iberdrola,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18F:3493:270B0FB:505F580:65223FD6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
43,sage,schopenhauer,N/A,N/A,https://api.github.com/repos/schopenhauer/sage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B6:7D6D:29401B:55E80C:65223FD7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
44,powermeter,voelkerb,N/A,N/A,https://api.github.com/repos/voelkerb/powermeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10E:24F2:298FBCA:5551E2A:65223FD8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
45,Emissions-Index,EmissionsIndex,N/A,N/A,https://api.github.com/repos/EmissionsIndex/Emissions-Index,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C133:11F8:2B8901:5A689F:65223FD8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
46,pywibeee,fquinto,N/A,N/A,https://api.github.com/repos/fquinto/pywibeee,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C167:11F8:2B8981:5A69AD:65223FD9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
47,ISO-DART,LLNL,N/A,N/A,https://api.github.com/repos/LLNL/ISO-DART,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C156:3493:270B3B7:505FB27:65223FDA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
48,microgrid_optimizer,mx-e,N/A,N/A,https://api.github.com/repos/mx-e/microgrid_optimizer,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:2772:28BDAC8:53CE8F6:65223FDA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
49,REVUB,VUB-HYDR,N/A,N/A,https://api.github.com/repos/VUB-HYDR/REVUB,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C187:2772:28BDB7A:53CEA44:65223FDB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
50,MinecraftRedstoneSimulator,zouhuidong,N/A,N/A,https://api.github.com/repos/zouhuidong/MinecraftRedstoneSimulator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FC:5A71:30311CE:62953FC:65223FDB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
51,carbon-index,gschivley,N/A,N/A,https://api.github.com/repos/gschivley/carbon-index,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17D:33C6:29EAE35:5622D1D:65223FDC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
52,strom,stromenergy,N/A,N/A,https://api.github.com/repos/stromenergy/strom,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2CDC31:5CEA46:65223FDD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
53,PowerFlows.jl,NREL-Sienna,N/A,N/A,https://api.github.com/repos/NREL-Sienna/PowerFlows.jl,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16C:1ECC:29CB1F:56F02E:65223FDD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
54,energy-dashboard,OSU-Sustainability-Office,N/A,N/A,https://api.github.com/repos/OSU-Sustainability-Office/energy-dashboard,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B0:7E09:25E46BC:4E16174:65223FDF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
55,antaresRead,rte-antares-rpackage,N/A,N/A,https://api.github.com/repos/rte-antares-rpackage/antaresRead,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16D:6EA3:2863AB:541D3D:65223FDE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
56,ccai-ss23-ai-monitoring-tutorial,AndreCNF,N/A,N/A,https://api.github.com/repos/AndreCNF/ccai-ss23-ai-monitoring-tutorial,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FA:2EE5:28508F4:52F028A:65223FDF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
57,AWattPrice,sp4c38,N/A,N/A,https://api.github.com/repos/sp4c38/AWattPrice,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B8:1560:28D1FCA:53DF35E:65223FE0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
58,solar-and-wind-potentials,calliope-project,N/A,N/A,https://api.github.com/repos/calliope-project/solar-and-wind-potentials,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10D:8AB4:298AE46:554D81A:65223FE0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
59,no.almli.utilitycost,balmli,N/A,N/A,https://api.github.com/repos/balmli/no.almli.utilitycost,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C177:41EE:27A3B06:5195EF8:65223FE1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
60,smart-semicolon,iquiw,N/A,N/A,https://api.github.com/repos/iquiw/smart-semicolon,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F6:797D:274785:51EA21:65223FE2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
61,Allow2Automate,Allow2,N/A,N/A,https://api.github.com/repos/Allow2/Allow2Automate,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C101:0208:2DD9F92:5DE8EE4:65223FE2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
62,eon-api,vrachieru,N/A,N/A,https://api.github.com/repos/vrachieru/eon-api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C120:1ECC:29CFB3:56F9C7:65223FE3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
63,Electrical_Demand_Toronto,srpraveen97,N/A,N/A,https://api.github.com/repos/srpraveen97/Electrical_Demand_Toronto,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EA:500E:2A45DD2:56C214A:65223FE3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
64,Stargazer,martynvandijke,N/A,N/A,https://api.github.com/repos/martynvandijke/Stargazer,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11D:336C:2CEED90:5C1C9CC:65223FE4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
65,python-helen-electricity-usage,ojarva,N/A,N/A,https://api.github.com/repos/ojarva/python-helen-electricity-usage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13C:7E09:25E4C9B:4E16DB1:65223FE5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
66,ev-simulator,wri,N/A,N/A,https://api.github.com/repos/wri/ev-simulator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CB:2772:28BE713:53D0258:65223FE5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
67,elexon,michaelkavanagh,N/A,N/A,https://api.github.com/repos/michaelkavanagh/elexon,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C111:68AA:2E7C40E:5F2F47B:65223FE6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
68,electricity_fraud_detection,neuralmind-ai,N/A,N/A,https://api.github.com/repos/neuralmind-ai/electricity_fraud_detection,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C167:11F8:2B93E0:5A7FA5:65223FE7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
69,pudl-catalog,catalyst-cooperative,N/A,N/A,https://api.github.com/repos/catalyst-cooperative/pudl-catalog,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C142:7A65:2850E7:540452:65223FE8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
70,epex-spot-data,ewoken,N/A,N/A,https://api.github.com/repos/ewoken/epex-spot-data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:4771:29974A:566EC6:65223FE7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
71,Geocode,SheffieldSolar,N/A,N/A,https://api.github.com/repos/SheffieldSolar/Geocode,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D4:68AA:2E7C633:5F2F900:65223FE8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
72,smart_power,satwikkansal,N/A,N/A,https://api.github.com/repos/satwikkansal/smart_power,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A4:6B96:2851D9B:52F90B5:65223FEB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
73,mars-power,davedx,N/A,N/A,https://api.github.com/repos/davedx/mars-power,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C118:33C6:29EB95E:5624462:65223FE9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
74,japan_grid_carbon_api,FraserTooth,N/A,N/A,https://api.github.com/repos/FraserTooth/japan_grid_carbon_api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16D:6EA3:286F0A:543503:65223FEB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
75,global-coal-countdown,zero-one-group,zero-one-group,https://github.com/zero-one-group/global-coal-countdown,https://api.github.com/repos/zero-one-group/global-coal-countdown,This is the accompanying repository for the Bloomberg Global Coal Countdown website.,"![](https://bloombergcoalcountdown.com/_next/static/images/big-black-logo-46b32763924ec161ae53ca88b2c25517.webp)

This is the accompanying repository for the **[Bloomberg Global Coal Countdown](https://bloombergcoalcountdown.com/) (BGCC)** website.

<ul>
  <li><a href=""#data-sources"">Data Sources</a></li>
  <li><a href=""#dashboard-data"">Dashboard Data</a></li>
  <li><a href=""#schema-and-validation"">Schema and Validation</a></li>
  <li><a href=""#license"">License</a></li>
</ul>

## Data Sources

The data presented on the BGCC website comes from the following sources:

1. [Global Energy Monitor's (GEM)](https://globalenergymonitor.org/) [Global Coal Plant Tracker (GCPT)](https://globalenergymonitor.org/projects/global-coal-plant-tracker/) and the accompanying GCPT status changes since 2015. GEM's GCPT dataset provides unit-level data and it is the basis for all calculations related to coal-plant capacity, status, technology and age.
2. Country-level coal phaseout strategies, country-level expected retirements and global emission pathways from [University of Maryland's (UMD)](https://www.umd.edu/) [Center for Global Sustainability (CGS)](https://cgs.umd.edu/). Datasets from UMD are outputs from published research, and are therefore mostly served as is with very few modifications for aesthetic purposes such as smooth interpolation.
3. [Ember](https://ember-climate.org/)'s [Global Electricity Review 2022](https://ember-climate.org/project/global-electricity-review-2022/) data. Ember's dataset provides panel data over three dimensions, namely area (such as country and regions), year and variable (such as energy sources). It is used as the basis for all calculations related to energy mixes and trends.
4. In the Headlines content is scraped from [CoalWire](https://endcoal.org/category/coalwire/), published by [GEM](https://globalenergymonitor.org/). A CoalWire issue consists of multiple articles, news and analysis pieces, which are individually presented on the BGCC site.
5. Research and analysis pieces as curated by [Bloomberg Philanthropies](https://www.bloomberg.org/).
6. [Gapminder data, HYDE, and UN Population Division (2019) estimates](https://www.gapminder.org/data/documentation/gd003/) as presented by [Our World in Data's (OWD)](https://ourworldindata.org/) [world population data since 1800](https://ourworldindata.org/grapher/population).
8. [Natural Earth Data](https://www.naturalearthdata.com/)'s [country vectors](https://www.naturalearthdata.com/downloads/110m-cultural-vectors/110m-admin-0-countries/) as presented by [Graydon Hoare](https://gist.github.com/graydon/11198540) with our own manual modifications for aesthetic reasons in order to make the interactive map appear more presentable.
9. Country commitments to phasing out coal as well as no new coal are based on research from [UMD](https://www.umd.edu/) [CGS](https://cgs.umd.edu/) and the [Powering Past Coal Alliance (PPCA)](https://www.poweringpastcoal.org/).
10. Expected retirements by 2030 of each country are collected and maintained by [PPCA](https://www.poweringpastcoal.org/).

The countries’ political affiliations such as EU27+1, G20, G7, OECD and PPCA are taken as of July 2021. We have decided to include the United Kingdom into the EU27+1 list in order to maintain comparability with other EU figures that have been reported in the past.

## Dashboard Data

The resulting datasets are available for download as part of a release attached to the repository - see [Releases](https://github.com/zero-one-group/global-coal-countdown/releases).

The following JSONs correspond to a page on the BGCC website:

* `coal_capacity_landscape.json`
* `coal_power_generation.json`
* `country_main.json`
* `homepage.json`
* `newsfeed.json`

The following JSONs are utility lookup datasets:
* `country_coal_status.json`
* `country_iso_lookup.json`
* `iso_country_lookup.json`
* `website_texts.json`

The `mapbox.json` data is uploaded one [feature](https://docs.mapbox.com/api/maps/datasets/#the-feature-object) at a time to [Mapbox](https://www.mapbox.com/) using the [Mapbox API](https://docs.mapbox.com/api/overview/). The `country_bounding_boxes.json` is used to center the map view on the selected country.

## Schema and Validation

Each JSON file is accompanied by a [Pydantic model](https://pydantic-docs.helpmanual.io/), which is used as a schema documentation and runtime validation. The Pydantic models can be found in `schema/models.py`. The source code references two other files, namely `schema/validation.py` and `schema/enum_key_value_pairs.py`, which contain custom validators and valid country names and the corresponding ISO 3166-1 alpha-2 country codes.

In the `docker` directory, we make available a `Dockerfile` and a `requirements.txt` to build an ephemeral Docker container, which we used to generate the data at the time writing.

## License

As the datasets are built upon the GEM's GCPT dataset, the BGCC datasets are also licensed under the [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/) license. Therefore, it is allowed to copy and redistribute, as well as to build upon the datasets for any purpose including for commercial purposes. If you do build upon the datasets, you must distribute it under the same license.
",7,7,4,0,electricity,"[climate-change, climate-data, coal, electricity, energy, energy-data]",00000
76,Electricity-Data-Pipeline,desenk,N/A,N/A,https://api.github.com/repos/desenk/Electricity-Data-Pipeline,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C121:1D49:2C2BF22:5A8B472:65223FEC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
77,consumption_analysis,FUEL4EP,N/A,N/A,https://api.github.com/repos/FUEL4EP/consumption_analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:643D:2A10CF3:5645652:65223FEC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
78,resicolor,wilicw,N/A,N/A,https://api.github.com/repos/wilicw/resicolor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C150:7A65:285575:540DC5:65223FEE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
79,remoshock,remoshock,N/A,N/A,https://api.github.com/repos/remoshock/remoshock,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15D:17C0:287A8A:546144:65223FED.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
80,ESEE-READER,Ash515,N/A,N/A,https://api.github.com/repos/Ash515/ESEE-READER,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C3:53F5:27F693B:522B3FC:65223FEE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
81,geo-energy-data,OliverCullimore,N/A,N/A,https://api.github.com/repos/OliverCullimore/geo-energy-data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:1D49:2C2C291:5A8BB85:65223FEF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
82,chellow,WessexWater,N/A,N/A,https://api.github.com/repos/WessexWater/chellow,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C182:0208:2DDADF0:5DEAC7A:65223FEF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
83,datapackage_pv_wind_profiles,renewables-ninja,N/A,N/A,https://api.github.com/repos/renewables-ninja/datapackage_pv_wind_profiles,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E4:3493:270C805:5062594:65223FF0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
84,scenarios-rte-simulation,lucasgautheron,N/A,N/A,https://api.github.com/repos/lucasgautheron/scenarios-rte-simulation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14E:3B38:2CED90:5D0E74:65223FF1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
85,About,smartEnergyResearchLab,N/A,N/A,https://api.github.com/repos/smartEnergyResearchLab/About,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C167:11F8:2B9C16:5A9069:65223FF1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
86,mauritius-dataset-electricity,MrSunshyne,N/A,N/A,https://api.github.com/repos/MrSunshyne/mauritius-dataset-electricity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13A:458F:2C313A7:5AA0350:65223FF2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
87,wp-energy-usage-calculator,nicholaskajoh,N/A,N/A,https://api.github.com/repos/nicholaskajoh/wp-energy-usage-calculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15F:1E37:2918D8:557E7F:65223FF3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
88,electricity-demand-forecasting,bgunyel,N/A,N/A,https://api.github.com/repos/bgunyel/electricity-demand-forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C148:1ECC:29DD09:571594:65223FF3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
89,entsoe-client,DarioHett,N/A,N/A,https://api.github.com/repos/DarioHett/entsoe-client,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D3:8AB4:298C2DD:55502A0:65223FF4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
90,Solar-Energy-Calculator,JaviSandoval94,N/A,N/A,https://api.github.com/repos/JaviSandoval94/Solar-Energy-Calculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10C:4776:2ADD94:59003D:65223FF4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
91,ree,hectorespert,N/A,N/A,https://api.github.com/repos/hectorespert/ree,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C139:336C:2CEFB76:5C1E6F2:65223FF5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
92,ferc-xbrl-extractor,catalyst-cooperative,N/A,N/A,https://api.github.com/repos/catalyst-cooperative/ferc-xbrl-extractor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E4:3493:270CCBB:5062F67:65223FF6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
93,platypus,Boavizta,N/A,N/A,https://api.github.com/repos/Boavizta/platypus,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C173:1D49:2C2CABF:5A8CC6E:65223FF6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
94,CODuo,ibebbs,N/A,N/A,https://api.github.com/repos/ibebbs/CODuo,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C145:47EA:2699554:4F4A0D4:65223FF7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
95,M-LED,giacfalk,N/A,N/A,https://api.github.com/repos/giacfalk/M-LED,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BD:406C:29FEC1:574F54:65223FF7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
96,home-analytics,robhammond,N/A,N/A,https://api.github.com/repos/robhammond/home-analytics,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:3493:270CED7:50633B7:65223FF8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
97,conso-api,bokub,N/A,N/A,https://api.github.com/repos/bokub/conso-api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:4771:29A460:568A50:65223FF9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
98,meterN,jeanmarc77,N/A,N/A,https://api.github.com/repos/jeanmarc77/meterN,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C107:33EB:2B208F:59935F:65223FF9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
99,CircuitSolver,victor-aunon,N/A,N/A,https://api.github.com/repos/victor-aunon/CircuitSolver,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F3:6584:2831610:52A4E7A:65223FFA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
100,circuit_solver,Alexsimulation,N/A,N/A,https://api.github.com/repos/Alexsimulation/circuit_solver,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C142:7A65:28614B:542663:65223FFB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
101,Electricity_clustering,antoniosfiala,N/A,N/A,https://api.github.com/repos/antoniosfiala/Electricity_clustering,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2CF5E8:5D1FC7:65223FFB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
102,ElectroMation,Ash515,N/A,N/A,https://api.github.com/repos/Ash515/ElectroMation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:1CC6:2A29ECE:5689FEC:65223FFC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
103,electricity-models,tommytommytommy,N/A,N/A,https://api.github.com/repos/tommytommytommy/electricity-models,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C171:3493:270D27E:5063BC1:65223FFC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
104,Nordpool-dayahead-prices,Philipnah,N/A,N/A,https://api.github.com/repos/Philipnah/Nordpool-dayahead-prices,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C108:5A71:3033777:629A18D:65223FFD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
105,powerguru,Olli69,N/A,N/A,https://api.github.com/repos/Olli69/powerguru,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C158:3119:2BDB30D:59E20C0:65223FFD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
106,lightwaverf_HA_EnergySensor,asantaga,N/A,N/A,https://api.github.com/repos/asantaga/lightwaverf_HA_EnergySensor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A9:8AB4:298CE60:5551A64:65223FFE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
107,SparkMMS,niftimus,N/A,N/A,https://api.github.com/repos/niftimus/SparkMMS,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A2:18E3:28FA19:554C4B:65223FFF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
108,TDA_Matlab,UNSW-CEEM,N/A,N/A,https://api.github.com/repos/UNSW-CEEM/TDA_Matlab,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B3:643D:2A11FD6:5647D73:65223FFF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
109,energy-hack.github.io,energy-hack,N/A,N/A,https://api.github.com/repos/energy-hack/energy-hack.github.io,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13A:458F:2C32677:5AA29F5:65224000.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
110,open-dsm,bbartling,N/A,N/A,https://api.github.com/repos/bbartling/open-dsm,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C117:406C:2A06A6:575FC3:65224000.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
111,House-Resource-Management-Tracking-and-Billing-HRMTB-System-Using-QRcode,Sbboss,N/A,N/A,https://api.github.com/repos/Sbboss/House-Resource-Management-Tracking-and-Billing-HRMTB-System-Using-QRcode,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F0:9938:29A8F02:5583163:65224001.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
112,Predicting-Electricity-Price-Levels-,KamgangAnthony,N/A,N/A,https://api.github.com/repos/KamgangAnthony/Predicting-Electricity-Price-Levels-,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C164:7E09:25E660E:4E1A2C5:65224002.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
113,kalkulator-listrik,rririanto,N/A,N/A,https://api.github.com/repos/rririanto/kalkulator-listrik,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EA:500E:2A48129:56C6A63:65224002.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
114,EcoPower,TheBusyBiscuit,N/A,N/A,https://api.github.com/repos/TheBusyBiscuit/EcoPower,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D2:6D2F:2D16E6:5D8994:65224003.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
115,eesti-elektrihind,viljark,N/A,N/A,https://api.github.com/repos/viljark/eesti-elektrihind,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:643D:2A12471:56486FB:65224003.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
116,sp2ts,SheffieldSolar,N/A,N/A,https://api.github.com/repos/SheffieldSolar/sp2ts,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C142:7A65:286B65:543B71:65224004.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
117,Power-outage-prediction-competition,Tang-Li-Jen,N/A,N/A,https://api.github.com/repos/Tang-Li-Jen/Power-outage-prediction-competition,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A1:8AB4:298D732:5552C96:65224005.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
118,Electricity-prices-around-the-world,Ahmed-Aldayel,N/A,N/A,https://api.github.com/repos/Ahmed-Aldayel/Electricity-prices-around-the-world,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C140:406C:2A0B14:576913:65224005.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
119,karnataka-eletricity-generation,thejeshgn,N/A,N/A,https://api.github.com/repos/thejeshgn/karnataka-eletricity-generation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C172:2772:28C0D04:53D50C7:65224006.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
120,EETP,Yassin-MT,N/A,N/A,https://api.github.com/repos/Yassin-MT/EETP,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C128:6D2F:2D1A48:5D908A:65224006.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
121,ha-ecowatt,adetante,N/A,N/A,https://api.github.com/repos/adetante/ha-ecowatt,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C129:22D5:2F32503:60A4CAF:65224007.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
122,electricity-bill-analyzer,mtenrero,N/A,N/A,https://api.github.com/repos/mtenrero/electricity-bill-analyzer,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:5B68:29A5A4:56C613:65224008.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
123,mauritius-power-outages,MrSunshyne,N/A,N/A,https://api.github.com/repos/MrSunshyne/mauritius-power-outages,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C158:3119:2BDC142:59E3DD6:65224008.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
124,smart_electric_monitoring,hector6298,N/A,N/A,https://api.github.com/repos/hector6298/smart_electric_monitoring,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12E:47EE:2B806AB:593E103:65224009.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
125,Generic-Electrical-Energy-Cost-Calculator,jabransiddiqui,N/A,N/A,https://api.github.com/repos/jabransiddiqui/Generic-Electrical-Energy-Cost-Calculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C168:9938:29A9922:5584577:65224009.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
126,trEnD,TonyYenTWN,N/A,N/A,https://api.github.com/repos/TonyYenTWN/trEnD,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:38A4:2BAEDB5:59A366B:6522400A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
127,tarifa_luz,jcaromiq,N/A,N/A,https://api.github.com/repos/jcaromiq/tarifa_luz,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:6B96:2854022:52FD82D:6522400B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
128,airvend-ruby,urchymanny,N/A,N/A,https://api.github.com/repos/urchymanny/airvend-ruby,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D0:24F2:29934A7:5559340:6522400B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
129,go-entsoe,energy-forecast,N/A,N/A,https://api.github.com/repos/energy-forecast/go-entsoe,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19F:2EE5:28531D1:52F5788:6522400C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
130,Arduino.SolarTracker,staviloglu,N/A,N/A,https://api.github.com/repos/staviloglu/Arduino.SolarTracker,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C140:406C:2A11CF:5776EE:6522400C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
131,Presentations,rjb4standards,N/A,N/A,https://api.github.com/repos/rjb4standards/Presentations,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18C:840D:292DA02:54A59F2:6522400D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
132,popn,wazeerc,N/A,N/A,https://api.github.com/repos/wazeerc/popn,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A9:8AB4:298E211:55542F5:6522400E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
133,flextool-web-interface,irena-flextool,N/A,N/A,https://api.github.com/repos/irena-flextool/flextool-web-interface,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CA:17C0:289367:54956C:6522400E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
134,datadis,MrMarble,N/A,N/A,https://api.github.com/repos/MrMarble/datadis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C193:0BEC:294F19:560962:6522400F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
135,Panel-Schedule-Maker,WillHaggerty,N/A,N/A,https://api.github.com/repos/WillHaggerty/Panel-Schedule-Maker,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E3:840D:292DC23:54A5E5F:6522400F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
136,Utilities_Consumption,sjsilvabr,N/A,N/A,https://api.github.com/repos/sjsilvabr/Utilities_Consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C116:53F5:27F8779:522F2BF:65224010.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
137,data,podnebnik,N/A,N/A,https://api.github.com/repos/podnebnik/data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E2:0BEC:295094:560C81:65224010.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
138,eda-analysis-of-power-supply,manuelinfosec,N/A,N/A,https://api.github.com/repos/manuelinfosec/eda-analysis-of-power-supply,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13C:7E09:25E7588:4E1C2B1:65224011.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
139,Non_linear_optimization,Adi1613,N/A,N/A,https://api.github.com/repos/Adi1613/Non_linear_optimization,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BB:6C98:2A1A4A:578DC7:65224011.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
140,opennem-display,LukePrior,N/A,N/A,https://api.github.com/repos/LukePrior/opennem-display,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D9:47EA:269B209:4F4DC53:65224012.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
141,ukesec.info,yannickmcosta,N/A,N/A,https://api.github.com/repos/yannickmcosta/ukesec.info,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10A:6584:2832BBD:52A7BB3:65224013.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
142,NetPadPlusPlus,ie3-institute,N/A,N/A,https://api.github.com/repos/ie3-institute/NetPadPlusPlus,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DF:41EE:27A6C11:519C4BB:65224013.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
143,Secondary_band,NonoMalpi,N/A,N/A,https://api.github.com/repos/NonoMalpi/Secondary_band,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B4:6EA3:2893D6:548179:65224014.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
144,amberelectric,yaleman,N/A,N/A,https://api.github.com/repos/yaleman/amberelectric,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:6B96:2854946:52FEB2E:65224014.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
145,HA-NationalGrid,JRascagneres,N/A,N/A,https://api.github.com/repos/JRascagneres/HA-NationalGrid,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BA:1560:28D502D:53E5812:65224015.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
146,pudl-zenodo-storage,catalyst-cooperative,N/A,N/A,https://api.github.com/repos/catalyst-cooperative/pudl-zenodo-storage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BE:68AA:2E7FDDE:5F36B02:65224015.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
147,electrify,toddmedema,N/A,N/A,https://api.github.com/repos/toddmedema/electrify,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15E:38A4:2BAFDF6:59A5755:65224016.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
148,pudl-archiver,catalyst-cooperative,N/A,N/A,https://api.github.com/repos/catalyst-cooperative/pudl-archiver,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C115:406C:2A1A48:578896:65224016.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
149,Dielectrodoresis,Ineso1,N/A,N/A,https://api.github.com/repos/Ineso1/Dielectrodoresis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C127:6584:2832F0B:52A829A:65224017.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
150,Electric-Assistant-App,jpdias,N/A,N/A,https://api.github.com/repos/jpdias/Electric-Assistant-App,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C128:6D2F:2D28E1:5DAF01:65224018.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
151,logisticae,Kero76,N/A,N/A,https://api.github.com/repos/Kero76/logisticae,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E2:0BEC:29570D:561A08:65224018.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
152,pvpc,sdelquin,N/A,N/A,https://api.github.com/repos/sdelquin/pvpc,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C165:38A4:2BB01C2:59A5F06:65224019.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
153,tomorrow-electricity-api-dotnet-client,kristofferandreasen,N/A,N/A,https://api.github.com/repos/kristofferandreasen/tomorrow-electricity-api-dotnet-client,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C127:6584:2833106:52A86A5:6522401A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
154,Transimision_Line,mahmoudkordY,N/A,N/A,https://api.github.com/repos/mahmoudkordY/Transimision_Line,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16C:1ECC:29FF38:575CB4:6522401A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
155,resistorfind,Booligoosh,N/A,N/A,https://api.github.com/repos/Booligoosh/resistorfind,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C188:2EE5:2853EB6:52F7271:6522401B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
156,BarryAPIClient,eelkjaer,N/A,N/A,https://api.github.com/repos/eelkjaer/BarryAPIClient,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C4:643D:2A13E96:564BC91:6522401B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
157,chernivtsi-outages,denysdovhan,N/A,N/A,https://api.github.com/repos/denysdovhan/chernivtsi-outages,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BA:1560:28D568A:53E653D:6522401C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
158,VoltPolska,ALEGATOR1209,N/A,N/A,https://api.github.com/repos/ALEGATOR1209/VoltPolska,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C151:5A86:2B980AD:596DA24:6522401D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
159,dte_calculator,jiuguangw,N/A,N/A,https://api.github.com/repos/jiuguangw/dte_calculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C116:53F5:27F92B2:5230A37:6522401D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
160,Allow2.github.io,Allow2,N/A,N/A,https://api.github.com/repos/Allow2/Allow2.github.io,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C115:406C:2A205D:57953D:6522401E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
161,ECNU_Electricity_Android,1970633640,N/A,N/A,https://api.github.com/repos/1970633640/ECNU_Electricity_Android,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A9:8AB4:298F44B:5556897:6522401E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
162,power-pi,Knapsacks,N/A,N/A,https://api.github.com/repos/Knapsacks/power-pi,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CD:6584:2833504:52A8F06:6522401F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
163,electricity-dprk,giang-rudderham,N/A,N/A,https://api.github.com/repos/giang-rudderham/electricity-dprk,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15A:68AA:2E8079A:5F37F3E:6522401F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
164,EaWCM-Console,PatphonSD,N/A,N/A,https://api.github.com/repos/PatphonSD/EaWCM-Console,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C134:18E3:29165C:55864C:65224020.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
165,EskomSePushAPI,ianweatherburn,N/A,N/A,https://api.github.com/repos/ianweatherburn/EskomSePushAPI,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C185:11F8:2BC34B:5AE26E:65224021.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
166,workshop-tinkerforge-strom,Devoxx4KidsDE,N/A,N/A,https://api.github.com/repos/Devoxx4KidsDE/workshop-tinkerforge-strom,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C111:68AA:2E80961:5F382F0:65224021.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
167,Volt,vishal-wadhwa,N/A,N/A,https://api.github.com/repos/vishal-wadhwa/Volt,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C179:6459:26420B5:4E9EE9F:65224022.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
168,download-nec,a-b,N/A,N/A,https://api.github.com/repos/a-b/download-nec,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D8:2B20:25998CC:4D4E568:65224022.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
169,CalcCircuits,acrovettolaye,N/A,N/A,https://api.github.com/repos/acrovettolaye/CalcCircuits,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C132:629D:4513222:8C29580:65224023.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
170,send-esios-lowcost-electricity-price-of-the-day,zoilomora,N/A,N/A,https://api.github.com/repos/zoilomora/send-esios-lowcost-electricity-price-of-the-day,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C105:0E65:262BA30:4E5BDE6:65224024.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
171,Spain-Electricity-Shortfall-Challenge---EDSA-Team-15,moreira-presh,N/A,N/A,https://api.github.com/repos/moreira-presh/Spain-Electricity-Shortfall-Challenge---EDSA-Team-15,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B5:7E90:269D4F6:4F2CAAE:65224024.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
172,Solmoller-Spotprice-Sensor,MaximusClavius,N/A,N/A,https://api.github.com/repos/MaximusClavius/Solmoller-Spotprice-Sensor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C134:7E90:269D584:4F2CBD2:65224025.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
173,SolarY,MainakRepositor,N/A,N/A,https://api.github.com/repos/MainakRepositor/SolarY,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C178:75D0:2618683:4E46D54:65224025.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
174,energymix-server,bertrik,N/A,N/A,https://api.github.com/repos/bertrik/energymix-server,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FF:4A15:28D1DAB:53A2857:65224026.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
175,energy-tracker,sanjuwdr,N/A,N/A,https://api.github.com/repos/sanjuwdr/energy-tracker,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FA:1D92:25B7D15:4D73F8A:65224027.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
176,draw.ioCollections,halilmarx07,N/A,N/A,https://api.github.com/repos/halilmarx07/draw.ioCollections,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C132:629D:4513B96:8C2A8A9:65224027.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
177,Numerical_Methods,spencerbertsch1,N/A,N/A,https://api.github.com/repos/spencerbertsch1/Numerical_Methods,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C4:9D23:26BD56A:4F820F0:65224028.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
178,power_prediction_tool,dreamfavel,N/A,N/A,https://api.github.com/repos/dreamfavel/power_prediction_tool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:8A0D:27FB016:52022B0:65224028.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
179,evAnalysis_OLD,CfSOtago,N/A,N/A,https://api.github.com/repos/CfSOtago/evAnalysis_OLD,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FE:629D:4513FFD:8C2B198:65224029.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
180,power_prediction_tool,dreamfavel,N/A,N/A,https://api.github.com/repos/dreamfavel/power_prediction_tool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:8A0D:27FB016:52022B0:65224028.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
181,Electricity-Consumption,K-Konstantinidis,N/A,N/A,https://api.github.com/repos/K-Konstantinidis/Electricity-Consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A7:9D23:26BD756:4F824DC:6522402A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
182,electrical-amu,iamareebjamal,N/A,N/A,https://api.github.com/repos/iamareebjamal/electrical-amu,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C4:9D23:26BD7F8:4F82643:6522402A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
183,MSc_Thesis,benoitputzeys,N/A,N/A,https://api.github.com/repos/benoitputzeys/MSc_Thesis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C131:638B:2751321:509EAD1:6522402B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
184,shit,mccrush,N/A,N/A,https://api.github.com/repos/mccrush/shit,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C176:1E61:2895065:5319CE0:6522402C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
185,Simulation-of-motion-of-charged-particle,beetrandahiya,N/A,N/A,https://api.github.com/repos/beetrandahiya/Simulation-of-motion-of-charged-particle,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FE:629D:45145EB:8C2BDB5:6522402C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
186,zetmo-dashboard,Mqoey,N/A,N/A,https://api.github.com/repos/Mqoey/zetmo-dashboard,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C142:3996:25FC5BC:4DF6A22:6522402D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
187,electric-field-2d,TheNumber5,N/A,N/A,https://api.github.com/repos/TheNumber5/electric-field-2d,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E1:638B:27515A9:509F013:6522402E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
188,mf-energybreakdown,nipunbatra,N/A,N/A,https://api.github.com/repos/nipunbatra/mf-energybreakdown,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C140:646E:26D2FFE:4FAA56B:6522402E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
189,pvpc-telegraf-plugin,MrMarble,N/A,N/A,https://api.github.com/repos/MrMarble/pvpc-telegraf-plugin,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FB:4A15:28D2638:53A3A1D:6522402F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
190,power-map-india,sawajid,N/A,N/A,https://api.github.com/repos/sawajid/power-map-india,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DE:75D0:2618F29:4E47F5D:65224030.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
191,electRuBus,NefeliZ,N/A,N/A,https://api.github.com/repos/NefeliZ/electRuBus,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B5:7E90:269DDA7:4F2DCC0:6522402E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
192,kalkulator-listrik,januridp,N/A,N/A,https://api.github.com/repos/januridp/kalkulator-listrik,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13A:9CF4:27D9BA9:51AE547:6522402F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
193,PELE-TWO,BKovsky,N/A,N/A,https://api.github.com/repos/BKovsky/PELE-TWO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:75D0:2618F1C:4E47F2D:6522402F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
194,simulationEngine,gr4sp,N/A,N/A,https://api.github.com/repos/gr4sp/simulationEngine,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A9:6459:2642E84:4EA0B43:65224030.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
195,ElectroMon,sadzax,N/A,N/A,https://api.github.com/repos/sadzax/ElectroMon,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17C:7D9C:2B2A204:584FD2C:65224031.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
196,heatCool,CfSOtago,N/A,N/A,https://api.github.com/repos/CfSOtago/heatCool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C141:049C:26E21AF:4FD148A:65224031.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
197,fuse-box-labels,alexadam,N/A,N/A,https://api.github.com/repos/alexadam/fuse-box-labels,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:4A15:28D2926:53A4041:65224032.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
198,tibber,christoffercarlsson,N/A,N/A,https://api.github.com/repos/christoffercarlsson/tibber,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C5:5173:24A7CD7:4B5BB7A:65224032.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
199,powerengine,AaravMalani,N/A,N/A,https://api.github.com/repos/AaravMalani/powerengine,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C127:7646:2942E46:54888C2:65224033.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
200,pap2-lab-training,woskar,N/A,N/A,https://api.github.com/repos/woskar/pap2-lab-training,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E4:629D:4515797:8C2E173:65224034.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
201,dallas-rug-mvp1,poweryall,N/A,N/A,https://api.github.com/repos/poweryall/dallas-rug-mvp1,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11B:0E65:262C800:4E5DAAF:65224034.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
202,ElectricBillCalculator,satishtamada,N/A,N/A,https://api.github.com/repos/satishtamada/ElectricBillCalculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E5:39DF:275EFD4:50B8AEB:65224035.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
203,ElectricFieldIntensity,Epsylene,N/A,N/A,https://api.github.com/repos/Epsylene/ElectricFieldIntensity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C110:9D23:26BE2F1:4F83CE5:65224035.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
204,BPF-Island-Pulse,mikulina,N/A,N/A,https://api.github.com/repos/mikulina/BPF-Island-Pulse,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C148:75D0:2619458:4E48A33:65224036.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
205,Python-Raspberry-Domotique-Prises-Connectees,LiliwoL,N/A,N/A,https://api.github.com/repos/LiliwoL/Python-Raspberry-Domotique-Prises-Connectees,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C198:9D23:26BE37C:4F83E00:65224036.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
206,Energy-Audit-,vgrvallabhu,N/A,N/A,https://api.github.com/repos/vgrvallabhu/Energy-Audit-,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:4A15:28D2DCE:53A49E7:65224037.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
207,energy,thornoe,N/A,N/A,https://api.github.com/repos/thornoe/energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D2:12FA:5BDCF3:BD35A2:65224038.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
208,TEECO,keyserwood,N/A,N/A,https://api.github.com/repos/keyserwood/TEECO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CA:9CF4:27DA3F5:51AF686:65224038.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
209,ML-DL,BalakumaranRKB,N/A,N/A,https://api.github.com/repos/BalakumaranRKB/ML-DL,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C120:603C:285D1DF:52B59CD:65224039.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
210,entso-e-electricity-ukraine,conflict-investigations,N/A,N/A,https://api.github.com/repos/conflict-investigations/entso-e-electricity-ukraine,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AE:12FA:5BDEF6:BD39E3:65224039.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
211,SpotPrices,ape75,N/A,N/A,https://api.github.com/repos/ape75/SpotPrices,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C158:3D80:26F1103:4FE618E:6522403A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
212,energy,thornoe,N/A,N/A,https://api.github.com/repos/thornoe/energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D2:12FA:5BDCF3:BD35A2:65224038.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
213,Energy-Audit-,vgrvallabhu,N/A,N/A,https://api.github.com/repos/vgrvallabhu/Energy-Audit-,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:4A15:28D2DCE:53A49E7:65224037.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
214,TEECO,keyserwood,N/A,N/A,https://api.github.com/repos/keyserwood/TEECO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CA:9CF4:27DA3F5:51AF686:65224038.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
215,ML-DL,BalakumaranRKB,N/A,N/A,https://api.github.com/repos/BalakumaranRKB/ML-DL,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C120:603C:285D1DF:52B59CD:65224039.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
216,VZ-Vetovo.github.io,VZ-Vetovo,N/A,N/A,https://api.github.com/repos/VZ-Vetovo/VZ-Vetovo.github.io,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B4:8A0D:27FC34A:5204A5D:6522403A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
217,access-to-energy,4Deepak,N/A,N/A,https://api.github.com/repos/4Deepak/access-to-energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C112:2299:2536B3B:4C77669:6522403A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
218,kettle_calculator,droguk,N/A,N/A,https://api.github.com/repos/droguk/kettle_calculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13D:1D92:25B9333:4D76D5C:6522403B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
219,arranque-chiller,nagar2021,N/A,N/A,https://api.github.com/repos/nagar2021/arranque-chiller,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C128:629D:45168AC:8C30421:6522403B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
220,momentumenergy,bradrushworth,N/A,N/A,https://api.github.com/repos/bradrushworth/momentumenergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C5:5173:24A8768:4B5D140:6522403C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
221,moskommunalbot,va1m,N/A,N/A,https://api.github.com/repos/va1m/moskommunalbot,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15D:0A36:25E5113:4DD7D41:6522403D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
222,omamittari-py,mikaraunio,N/A,N/A,https://api.github.com/repos/mikaraunio/omamittari-py,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:6459:2643C14:4EA2746:6522403D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
223,rosetta_home_neurio,rosetta-home,N/A,N/A,https://api.github.com/repos/rosetta-home/rosetta_home_neurio,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11B:0E65:262D219:4E5EF7C:6522403E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
224,delhi-electricity-parser,anirudh-ramesh,N/A,N/A,https://api.github.com/repos/anirudh-ramesh/delhi-electricity-parser,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B2:638B:275257B:50A1103:6522403E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
225,PowerFuel,BenPortner,N/A,N/A,https://api.github.com/repos/BenPortner/PowerFuel,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A3:57A8:27EA38A:51D87C1:6522403F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
226,Forecasting_Electricity_Weather,alcheng10,N/A,N/A,https://api.github.com/repos/alcheng10/Forecasting_Electricity_Weather,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F1:4A15:28D397D:53A61FA:65224040.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
227,Energy-production-Spain,grhervas,N/A,N/A,https://api.github.com/repos/grhervas/Energy-production-Spain,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C178:75D0:2619DEA:4E49E23:65224040.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
228,materi-fisika2,jhagas,N/A,N/A,https://api.github.com/repos/jhagas/materi-fisika2,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C138:2B71:273BA83:508061D:65224041.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
229,dash-electricity,gkennaugh,N/A,N/A,https://api.github.com/repos/gkennaugh/dash-electricity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:8A0D:27FCC80:5205D38:65224041.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
230,Energy-Production-Consumption-Analysis,Muhammad-Shoaib37,N/A,N/A,https://api.github.com/repos/Muhammad-Shoaib37/Energy-Production-Consumption-Analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C127:7646:2943BE2:548A4EC:65224042.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
231,ic,webmural,N/A,N/A,https://api.github.com/repos/webmural/ic,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C122:6AF3:287B9B7:52F8376:65224043.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
232,energomera-hass-mqtt,hostcc,N/A,N/A,https://api.github.com/repos/hostcc/energomera-hass-mqtt,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A7:9D23:26BF261:4F85CC3:65224043.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
233,Orgue,Montandon-Varoda,N/A,N/A,https://api.github.com/repos/Montandon-Varoda/Orgue,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C7:18FC:2702A68:500769A:6522403F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
234,australian-energy,mnperic,N/A,N/A,https://api.github.com/repos/mnperic/australian-energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C155:75D0:2619D94:4E49D58:65224040.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
235,MHT-RTG-Power-Decrease,SlashSmasher,N/A,N/A,https://api.github.com/repos/SlashSmasher/MHT-RTG-Power-Decrease,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B4:8A0D:27FCB1F:5205A6F:65224040.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
236,predicting-electricity-usage,krkvis,N/A,N/A,https://api.github.com/repos/krkvis/predicting-electricity-usage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CF:3996:25FDA9E:4DF9557:65224041.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
237,KE-Loadshedding-Schedule-Scrapper,hashiromer,N/A,N/A,https://api.github.com/repos/hashiromer/KE-Loadshedding-Schedule-Scrapper,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D0:78AC:27C0912:518E816:65224042.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
238,how-much-electricity-saved,andreas-rydefalk,N/A,N/A,https://api.github.com/repos/andreas-rydefalk/how-much-electricity-saved,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16B:28F2:29F9F09:55F0DDE:65224042.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
239,Korea-Electricity-Fee,sjpison,N/A,N/A,https://api.github.com/repos/sjpison/Korea-Electricity-Fee,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C138:2B71:273BEC2:5080EC6:65224044.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
240,Energy_Conversions,Jaseibert,N/A,N/A,https://api.github.com/repos/Jaseibert/Energy_Conversions,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C111:3996:25FDEDD:4DF9DFC:65224044.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
241,Datathon-2020,CodeByHarri,N/A,N/A,https://api.github.com/repos/CodeByHarri/Datathon-2020,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B4:8A0D:27FD169:5206744:65224045.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
242,AgileWallaby.AEMO,jimmcslim,N/A,N/A,https://api.github.com/repos/jimmcslim/AgileWallaby.AEMO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C118:28F2:29FA396:55F171F:65224045.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
243,Egypt-Electricity-Home-Usage-Calculation,m-primo,N/A,N/A,https://api.github.com/repos/m-primo/Egypt-Electricity-Home-Usage-Calculation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C193:646E:26D4AA4:4FADC41:65224046.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
244,ie492-,alicanylmz,N/A,N/A,https://api.github.com/repos/alicanylmz/ie492-,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A3:57A8:27EABC1:51D98BA:65224046.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
245,Contract-Recommender,formegusto,N/A,N/A,https://api.github.com/repos/formegusto/Contract-Recommender,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AF:3996:25FE170:4DFA34D:65224047.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
246,Climate-change-and-electricity,VasuPatel001,N/A,N/A,https://api.github.com/repos/VasuPatel001/Climate-change-and-electricity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C127:7646:2944057:548AE32:65224047.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
247,windy,andersjanmyr,N/A,N/A,https://api.github.com/repos/andersjanmyr/windy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C146:8A0D:27FD528:5206EF8:65224048.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
248,e-billing,hassaanc-invents,N/A,N/A,https://api.github.com/repos/hassaanc-invents/e-billing,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15B:1B08:27E0171:51B1998:65224049.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
249,1P1Q-screening-estimates-the-complex-voltage-V-vector-following-a-generator-disturbance,kathleenwest,N/A,N/A,https://api.github.com/repos/kathleenwest/1P1Q-screening-estimates-the-complex-voltage-V-vector-following-a-generator-disturbance,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A0:57A8:27EAE8D:51D9E84:65224049.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
250,Git_Course,Mostafa-Mousa,N/A,N/A,https://api.github.com/repos/Mostafa-Mousa/Git_Course,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C176:1E61:2896D16:531D83A:6522404A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
251,Electricity-Bill-Generation-Using-C,JakeLoganUK,N/A,N/A,https://api.github.com/repos/JakeLoganUK/Electricity-Bill-Generation-Using-C,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D0:78AC:27C13E6:518FE1B:6522404A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
252,RealExampleBasedQuestion,YPreety,N/A,N/A,https://api.github.com/repos/YPreety/RealExampleBasedQuestion,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F8:7E90:269F9D6:4F31740:6522404B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
253,Forecaster,jaisondthomas,N/A,N/A,https://api.github.com/repos/jaisondthomas/Forecaster,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10A:7DF2:268D916:4F135FE:6522404C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
254,RG_PSI_PZ3,DaniloNovakovic,N/A,N/A,https://api.github.com/repos/DaniloNovakovic/RG_PSI_PZ3,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BF:04F2:26FF7DA:50019AA:6522404C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
255,dublin-electricity-network,codema-dev,N/A,N/A,https://api.github.com/repos/codema-dev/dublin-electricity-network,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C198:9D23:26BFC52:4F8715C:6522404D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
256,Livinglab-PuebloViejo,Hemmingways,N/A,N/A,https://api.github.com/repos/Hemmingways/Livinglab-PuebloViejo,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12F:78AC:27C172B:51904F3:6522404D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
257,Electro,vinayakhanda,N/A,N/A,https://api.github.com/repos/vinayakhanda/Electro,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C119:59CA:2616564:4E39104:6522404E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
258,Marcio_Eletrica,LaisGalvao,N/A,N/A,https://api.github.com/repos/LaisGalvao/Marcio_Eletrica,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C176:1E61:28971A3:531E1A0:6522404F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
259,monitoring-kompor,vermaysha,N/A,N/A,https://api.github.com/repos/vermaysha/monitoring-kompor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:1B08:27E087B:51B27FC:6522404F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
260,ts-stromgedacht,DerStimmler,N/A,N/A,https://api.github.com/repos/DerStimmler/ts-stromgedacht,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17A:6EFD:2526009:4C6175F:65224050.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
261,elnasmartmeter,bitcanon,N/A,N/A,https://api.github.com/repos/bitcanon/elnasmartmeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B2:638B:2753975:50A3A23:65224051.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
262,Size-of-Internet-Network,flightstar,N/A,N/A,https://api.github.com/repos/flightstar/Size-of-Internet-Network,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F0:565A:268EAB4:4F290BF:65224049.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
263,Elec-Village,Arturovicz,N/A,N/A,https://api.github.com/repos/Arturovicz/Elec-Village,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C155:75D0:261A709:4E4B0CA:6522404A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
264,StromGTPublic,hslu-ige-laes,N/A,N/A,https://api.github.com/repos/hslu-ige-laes/StromGTPublic,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14E:1B08:27E0367:51B1D7D:6522404A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
265,energy-usage,OAITI,N/A,N/A,https://api.github.com/repos/OAITI/energy-usage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EA:629D:4519BE4:8C36BC6:65224051.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
266,CapacitanceCalculator,rqbazan,N/A,N/A,https://api.github.com/repos/rqbazan/CapacitanceCalculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A1:7DF2:268DF21:4F1428F:65224052.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
267,Smarty,luisdrita,N/A,N/A,https://api.github.com/repos/luisdrita/Smarty,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C108:4AAE:27584A7:50BFD7A:65224052.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
268,MeterRegisters,221bdatarefinery,N/A,N/A,https://api.github.com/repos/221bdatarefinery/MeterRegisters,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C112:2299:25381D0:4C7A517:65224053.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
269,old-light-switch-automation,angelomarzolla,N/A,N/A,https://api.github.com/repos/angelomarzolla/old-light-switch-automation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C161:75D0:260888F:4E25C88:65223EFD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
270,ElectricUtilityComparison,HelixSpiral,N/A,N/A,https://api.github.com/repos/HelixSpiral/ElectricUtilityComparison,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F2:049C:26E405E:4FD5470:65224054.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
271,NZElectricityNetworkMap,221bdatarefinery,N/A,N/A,https://api.github.com/repos/221bdatarefinery/NZElectricityNetworkMap,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A4:7646:2944A10:548C27F:65224054.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
272,Streamlit_Electric_Circuit_Simulation,att-ar,N/A,N/A,https://api.github.com/repos/att-ar/Streamlit_Electric_Circuit_Simulation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C100:18FC:2703FBF:500A2C8:65224055.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
273,loadControl,CfSOtago,N/A,N/A,https://api.github.com/repos/CfSOtago/loadControl,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C162:679F:2A8FCF6:5709322:65224054.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
274,amber,bradrushworth,N/A,N/A,https://api.github.com/repos/bradrushworth/amber,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17D:629D:451A7A7:8C38370:65224055.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
275,LESO,thesethtruth,N/A,N/A,https://api.github.com/repos/thesethtruth/LESO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C183:9CF4:27DC701:51B3EA8:65224056.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
276,mooc-renewables-outsmarting-intermittency-notes,arnaudj,N/A,N/A,https://api.github.com/repos/arnaudj/mooc-renewables-outsmarting-intermittency-notes,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C101:9CF4:27DC7A8:51B3FFF:65224057.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
277,UK-electricity-dashboard,yamtimor,N/A,N/A,https://api.github.com/repos/yamtimor/UK-electricity-dashboard,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C102:39DF:2761339:50BD3CD:65224057.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
278,Coulombs-Law,Alphka,N/A,N/A,https://api.github.com/repos/Alphka/Coulombs-Law,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:75D0:261B263:4E4C862:65224058.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
279,cirq,Cxarli,N/A,N/A,https://api.github.com/repos/Cxarli/cirq,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AF:3996:25FF1E2:4DFC581:65224058.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
280,Conductivity,Parsa-Rajabi,N/A,N/A,https://api.github.com/repos/Parsa-Rajabi/Conductivity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C109:27B4:253B931:4C87717:65224059.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
281,electricity-comparison,stugr,N/A,N/A,https://api.github.com/repos/stugr/electricity-comparison,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12F:78AC:27C23F6:5191F56:6522405A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
282,php-smartcallproxy,jacques,N/A,N/A,https://api.github.com/repos/jacques/php-smartcallproxy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C0:7CD5:29ED1C9:55E4B5B:6522405A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
283,read_62056-21_Meter,piet66-peb,N/A,N/A,https://api.github.com/repos/piet66-peb/read_62056-21_Meter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:75D0:261B505:4E4CE17:6522405B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
284,rlc-alternating-current-unity,TheNumber5,N/A,N/A,https://api.github.com/repos/TheNumber5/rlc-alternating-current-unity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C158:3D80:26F3373:4FEA8C4:6522405C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
285,EelectricBillsCalculator,RamashishPrajapati,N/A,N/A,https://api.github.com/repos/RamashishPrajapati/EelectricBillsCalculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C194:57A8:27EBFE1:51DC28F:6522405C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
286,disaggregation_MSc_code,JackKelly,N/A,N/A,https://api.github.com/repos/JackKelly/disaggregation_MSc_code,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C150:6459:2645A0B:4EA6511:65224058.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
287,mbaobao-project,zhouxuan001,N/A,N/A,https://api.github.com/repos/zhouxuan001/mbaobao-project,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B5:7E90:26A06BC:4F331FE:65224059.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
288,delhi-electricity-dashboard,anirudh-ramesh,N/A,N/A,https://api.github.com/repos/anirudh-ramesh/delhi-electricity-dashboard,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C179:6459:2645B5F:4EA67D7:6522405A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
289,rensandbox,qwjhvbxi,N/A,N/A,https://api.github.com/repos/qwjhvbxi/rensandbox,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E6:5C75:273F7F3:508A40F:6522405A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
290,Electricity-monitor-with-graph-on-Pi,designer-silver,N/A,N/A,https://api.github.com/repos/designer-silver/Electricity-monitor-with-graph-on-Pi,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:638B:275438A:50A4EF7:6522405B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
291,The-Price-of-Power,mariamragab,N/A,N/A,https://api.github.com/repos/mariamragab/The-Price-of-Power,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C131:638B:2754416:50A501B:6522405C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
292,NAK-TFL-SmartMeterClassification,TilBlechschmidt,N/A,N/A,https://api.github.com/repos/TilBlechschmidt/NAK-TFL-SmartMeterClassification,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DE:75D0:261B60A:4E4D019:6522405C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
293,Minielec,iasebsil83,N/A,N/A,https://api.github.com/repos/iasebsil83/Minielec,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C118:28F2:29FC178:55F5477:6522405D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
294,3DPrinterElectricityCostCalculator,resultuzen,N/A,N/A,https://api.github.com/repos/resultuzen/3DPrinterElectricityCostCalculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AC:3819:1ACAFE2:371827E:6522405D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
295,ChargedParticleSimulation,berkerdemoglu,N/A,N/A,https://api.github.com/repos/berkerdemoglu/ChargedParticleSimulation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EC:7B3E:75278C:F13814:6522405E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
296,electricity.github.io,venkatram08,N/A,N/A,https://api.github.com/repos/venkatram08/electricity.github.io,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F4:5AB9:2C28B53:5A75D87:6522405F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
297,DataScience,thmsfnr,N/A,N/A,https://api.github.com/repos/thmsfnr/DataScience,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C135:87DB:2FD5694:61ACBC6:6522405F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
298,sairaan-kallis,norkator,N/A,N/A,https://api.github.com/repos/norkator/sairaan-kallis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11B:1299:9C4D50:142E1B1:65224060.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
299,ElectricCalculator,Sory-Noroc,N/A,N/A,https://api.github.com/repos/Sory-Noroc/ElectricCalculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:6A74:1A12A82:35B2D37:65224060.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
300,electricity-comparison,stugr,N/A,N/A,https://api.github.com/repos/stugr/electricity-comparison,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12F:78AC:27C23F6:5191F56:6522405A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
301,php-smartcallproxy,jacques,N/A,N/A,https://api.github.com/repos/jacques/php-smartcallproxy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C0:7CD5:29ED1C9:55E4B5B:6522405A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
302,read_62056-21_Meter,piet66-peb,N/A,N/A,https://api.github.com/repos/piet66-peb/read_62056-21_Meter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:75D0:261B505:4E4CE17:6522405B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
303,rlc-alternating-current-unity,TheNumber5,N/A,N/A,https://api.github.com/repos/TheNumber5/rlc-alternating-current-unity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C158:3D80:26F3373:4FEA8C4:6522405C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
304,EelectricBillsCalculator,RamashishPrajapati,N/A,N/A,https://api.github.com/repos/RamashishPrajapati/EelectricBillsCalculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C194:57A8:27EBFE1:51DC28F:6522405C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
305,elec-studies,bchoubert,N/A,N/A,https://api.github.com/repos/bchoubert/elec-studies,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18C:178A:2C787C7:5B0A6C5:65224061.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
306,Allow2Zapier,Allow2,N/A,N/A,https://api.github.com/repos/Allow2/Allow2Zapier,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A4:3F63:2E59D01:5ED2957:65224062.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
307,ummenergy,aulwardana,N/A,N/A,https://api.github.com/repos/aulwardana/ummenergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E2:5A27:6F77E9:E63CB4:65224062.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
308,Data-Analysis-basics-Electricity-in-Eastern-Africa-world-indicators-,omusiani,N/A,N/A,https://api.github.com/repos/omusiani/Data-Analysis-basics-Electricity-in-Eastern-Africa-world-indicators-,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18E:6EE6:6C455B:DFDC49:65224063.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
309,oomi,sremes,N/A,N/A,https://api.github.com/repos/sremes/oomi,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18C:178A:2C789C1:5B0AAEA:65224064.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
310,Maxwell-ecosystem,arkavo,N/A,N/A,https://api.github.com/repos/arkavo/Maxwell-ecosystem,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C168:6611:6C43FA:DFE881:65224064.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
311,Energy_map,piotrek124-1,N/A,N/A,https://api.github.com/repos/piotrek124-1/Energy_map,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15D:29CE:32D4734:67BB7A8:65224065.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
312,US_Electricity_ML_Modeling,arashshams,N/A,N/A,https://api.github.com/repos/arashshams/US_Electricity_ML_Modeling,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10E:1E3B:2FA7939:615DF8E:65224065.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
313,entso-monitor,NOWUM,N/A,N/A,https://api.github.com/repos/NOWUM/entso-monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:3BF5:71EEB3:EAF6D0:65224066.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
314,Consommation_electrictique,0SJ0,N/A,N/A,https://api.github.com/repos/0SJ0/Consommation_electrictique,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B1:0C3C:733D27:EDC61B:65224067.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
315,EPF-Framework,sewcio543,N/A,N/A,https://api.github.com/repos/sewcio543/EPF-Framework,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C132:7B5B:70F317:E8E13F:65224067.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
316,stromgedacht-web,DerStimmler,N/A,N/A,https://api.github.com/repos/DerStimmler/stromgedacht-web,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C145:7B5B:70F39D:E8E261:65224068.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
317,MyDoc,illya334,N/A,N/A,https://api.github.com/repos/illya334/MyDoc,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C172:2319:678A2D:D6691A:65224069.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
318,vidyutee,Vidyutee,N/A,N/A,https://api.github.com/repos/Vidyutee/vidyutee,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C117:7B5B:70F491:E8E461:65224069.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
319,electricity-usage,stugr,N/A,N/A,https://api.github.com/repos/stugr/electricity-usage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AB:7AEF:2DB09F6:5D6DC47:6522406A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
320,elfield,svlv,N/A,N/A,https://api.github.com/repos/svlv/elfield,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B7:4179:2DC88E0:5DB16F8:6522406A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
321,OneMeter,tschaban,N/A,N/A,https://api.github.com/repos/tschaban/OneMeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15E:1E3B:2FA7F4B:615EC1B:6522406B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
322,vscode-elektri-hind,mvahaste,N/A,N/A,https://api.github.com/repos/mvahaste/vscode-elektri-hind,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DA:178A:2C79070:5B0B8E4:6522406B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
323,alecto-headstart,vanHeemstraSystems,N/A,N/A,https://api.github.com/repos/vanHeemstraSystems/alecto-headstart,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C135:87DB:2FD63FC:61AE77A:6522406C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
324,Energy-Consumption-Dashboard,sourabhthakur777,N/A,N/A,https://api.github.com/repos/sourabhthakur777/Energy-Consumption-Dashboard,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BD:178A:2C79173:5B0BAE8:6522406D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
325,ausgrid-outages,drzax,N/A,N/A,https://api.github.com/repos/drzax/ausgrid-outages,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AF:6611:6C49E6:DFF52B:6522406D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
326,QuickTarriff,RbkGh,N/A,N/A,https://api.github.com/repos/RbkGh/QuickTarriff,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:87DB:2FD65C2:61AEB2D:6522406E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
327,Electrical-Bill-App,muqrock,N/A,N/A,https://api.github.com/repos/muqrock/Electrical-Bill-App,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CE:3F63:2E5A7EB:5ED4027:6522406F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
328,kmeans-for-lstm,formegusto,N/A,N/A,https://api.github.com/repos/formegusto/kmeans-for-lstm,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:3BF5:71F6E8:EB07C7:6522406F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
329,Electricity-Demand-Forecasting-using-Time-Series-Analysis,rdeek,N/A,N/A,https://api.github.com/repos/rdeek/Electricity-Demand-Forecasting-using-Time-Series-Analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F4:5AB9:2C29AF8:5A77E2C:65224070.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
330,SI4206---MonLis,SI-RPL-2021,N/A,N/A,https://api.github.com/repos/SI-RPL-2021/SI4206---MonLis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C172:2319:679078:D67664:65224070.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
331,Algerian_Electricity_Consumption_Forecast,yacine-ammi,N/A,N/A,https://api.github.com/repos/yacine-ammi/Algerian_Electricity_Consumption_Forecast,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DE:36DF:3530EAB:6C71C42:65224071.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
332,UKLCTD,sheridanfew,N/A,N/A,https://api.github.com/repos/sheridanfew/UKLCTD,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:58D0:74DB4E:F08095:65224072.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
333,Carnot-Spotprice-Sensor,MaximusClavius,N/A,N/A,https://api.github.com/repos/MaximusClavius/Carnot-Spotprice-Sensor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CC:6A74:1A138DA:35B4B25:65224072.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
334,pf-correction,xpecex,N/A,N/A,https://api.github.com/repos/xpecex/pf-correction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:3BF5:71F991:EB0D83:65224072.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
335,ecotime.app,yellelieder,N/A,N/A,https://api.github.com/repos/yellelieder/ecotime.app,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C164:178A:2C79616:5B0C49A:65224073.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,electricity,"[N, /, A]",00000
336,open-sustainable-technology,protontypes,N/A,N/A,https://api.github.com/repos/protontypes/open-sustainable-technology,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12D:7B5B:70FD35:E8F67B:65224073.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
337,scaphandre,hubblo-org,N/A,N/A,https://api.github.com/repos/hubblo-org/scaphandre,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A2:18E3:28BF2B:54D11F:65223FBD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
338,kepler,sustainable-computing-io,N/A,N/A,https://api.github.com/repos/sustainable-computing-io/kepler,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16F:4E78:6DAA2D:E2A75E:65224074.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
339,HomeAssistant-OctopusEnergy,BottlecapDave,N/A,N/A,https://api.github.com/repos/BottlecapDave/HomeAssistant-OctopusEnergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D6:984A:73BB09:EEAFE4:65224075.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
340,ha-sankey-chart,MindFreeze,N/A,N/A,https://api.github.com/repos/MindFreeze/ha-sankey-chart,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17D:05EF:6C72F2:E0408B:65224075.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
341,ha-hildebrandglow-dcc,HandyHat,N/A,N/A,https://api.github.com/repos/HandyHat/ha-hildebrandglow-dcc,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C120:1ECC:29B185:56BAFB:65223FC1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
342,myems,MyEMS,N/A,N/A,https://api.github.com/repos/MyEMS/myems,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C7:1E3B:2FA8B44:61604FD:65224076.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
343,Eco2AI,sb-ai-lab,N/A,N/A,https://api.github.com/repos/sb-ai-lab/Eco2AI,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C109:8AF9:6E529E:E415BE:65224076.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
344,building-data-genome-project-2,buds-lab,N/A,N/A,https://api.github.com/repos/buds-lab/building-data-genome-project-2,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C134:0C72:704E15:E7F9D5:65224077.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
345,leaf,dos-group,N/A,N/A,https://api.github.com/repos/dos-group/leaf,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10A:178A:2C79C33:5B0D14C:65224078.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
346,tracarbon,fvaleye,N/A,N/A,https://api.github.com/repos/fvaleye/tracarbon,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A0:4678:1AB4FF7:36FD70F:65224078.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
347,ESP8266-Power-Monitor,jaminNZx,N/A,N/A,https://api.github.com/repos/jaminNZx/ESP8266-Power-Monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C123:418F:2A49A6A:56753D2:65224079.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
348,pyRAPL,powerapi-ng,N/A,N/A,https://api.github.com/repos/powerapi-ng/pyRAPL,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C179:1299:9C647E:143120E:6522407A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
349,ashrae-great-energy-predictor-3-solution-analysis,buds-lab,N/A,N/A,https://api.github.com/repos/buds-lab/ashrae-great-energy-predictor-3-solution-analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C124:5AB9:2C2A5C6:5A79490:6522407A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
350,low-web-extension,lowwebtech,N/A,N/A,https://api.github.com/repos/lowwebtech/low-web-extension,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C7:1E3B:2FA91B2:6161227:6522407B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
351,open-energy-view,JPHutchins,N/A,N/A,https://api.github.com/repos/JPHutchins/open-energy-view,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E1:6584:282E855:529EF54:65223FC7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
352,ESP32EnergyMonitor,danpeig,N/A,N/A,https://api.github.com/repos/danpeig/ESP32EnergyMonitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C119:2CBC:759AC1:F25CA4:6522407B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
353,TrueRMS,MartinStokroos,N/A,N/A,https://api.github.com/repos/MartinStokroos/TrueRMS,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C184:05EF:6C7A52:E04FD5:6522407C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
354,docker-activity,jdrouet,N/A,N/A,https://api.github.com/repos/jdrouet/docker-activity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C163:505E:744920:EFAEB4:6522407D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
355,ha-ideenergy,ldotlopez,N/A,N/A,https://api.github.com/repos/ldotlopez/ha-ideenergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C3:5831:2B97783:59543B1:6522407D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
356,scout,trynthink,N/A,N/A,https://api.github.com/repos/trynthink/scout,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C193:2CBC:759E38:F263B8:6522407E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
357,pyJoules,powerapi-ng,N/A,N/A,https://api.github.com/repos/powerapi-ng/pyJoules,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:3BF5:720563:EB25FA:6522407F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
358,energat,HongyuHe,N/A,N/A,https://api.github.com/repos/HongyuHe/energat,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:178A:2C7A645:5B0E5F5:6522407F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
359,ioBroker.energiefluss,SKB-CGN,N/A,N/A,https://api.github.com/repos/SKB-CGN/ioBroker.energiefluss,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A9:3819:1ACD0C8:371C6B7:65224080.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
360,powerpal_ble,WeekendWarrior1,N/A,N/A,https://api.github.com/repos/WeekendWarrior1/powerpal_ble,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10D:7B5B:710A5F:E911C2:65224080.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
361,EnergySystemModelling,pitmonticone,N/A,N/A,https://api.github.com/repos/pitmonticone/EnergySystemModelling,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:607B:767F29:F41EBA:65224081.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
362,pylcaio,MaximeAgez,N/A,N/A,https://api.github.com/repos/MaximeAgez/pylcaio,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B5:0E7B:1A124F4:35B3874:65224082.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
363,Energy-Consumption-in-EV,armiro,N/A,N/A,https://api.github.com/repos/armiro/Energy-Consumption-in-EV,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14D:309A:2E3F9F3:5E5B156:65224082.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
364,edimax-smartplug,mwittig,N/A,N/A,https://api.github.com/repos/mwittig/edimax-smartplug,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17E:4E78:6DB921:E2C668:65224083.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
365,pod-point-home-assistant-component,mattrayner,N/A,N/A,https://api.github.com/repos/mattrayner/pod-point-home-assistant-component,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16F:4E78:6DB9AC:E2C789:65224083.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
366,SmartEnergy,smart-data-models,N/A,N/A,https://api.github.com/repos/smart-data-models/SmartEnergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C4:6611:6C5B51:E0199C:65224084.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
367,leaderboard,ml-energy,N/A,N/A,https://api.github.com/repos/ml-energy/leaderboard,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:3BF5:720B21:EB31D1:65224085.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
368,emerald_electricity_advisor,WeekendWarrior1,N/A,N/A,https://api.github.com/repos/WeekendWarrior1/emerald_electricity_advisor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C108:4F4C:7033A4:E78A0B:65224085.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
369,ide_api,ad-ha,N/A,N/A,https://api.github.com/repos/ad-ha/ide_api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C115:46E9:735EEB:EDEF21:65224086.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
370,Spotmarket-Switcher,christian1980nrw,N/A,N/A,https://api.github.com/repos/christian1980nrw/Spotmarket-Switcher,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C187:984A:73CE75:EED804:65224086.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
371,GSP_energy_disaggregator,loneharoon,N/A,N/A,https://api.github.com/repos/loneharoon/GSP_energy_disaggregator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C114:7AEF:2DB29A1:5D71D83:65224087.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
372,sense-collector,lux4rd0,N/A,N/A,https://api.github.com/repos/lux4rd0/sense-collector,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BA:36DF:35330DF:6C76260:65224088.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
373,Reinforcement-Learning_for_Energy_Minimization_Using_CLoudsim,EsratMaria,N/A,N/A,https://api.github.com/repos/EsratMaria/Reinforcement-Learning_for_Energy_Minimization_Using_CLoudsim,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D1:6A74:1A14F84:35B7A28:65224088.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
374,ioBroker.energiefluss-erweitert,SKB-CGN,N/A,N/A,https://api.github.com/repos/SKB-CGN/ioBroker.energiefluss-erweitert,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16D:58D0:74F4FA:F0B5B7:65224089.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
375,teb,TEB-model,N/A,N/A,https://api.github.com/repos/TEB-model/teb,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C182:1F34:1B83BA9:388C57B:65224089.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
376,SynD,klemenjak,N/A,N/A,https://api.github.com/repos/klemenjak/SynD,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BC:5F41:6D9256:E28548:6522408A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
377,RF-LSTM-CEEMDAN,irenekarijadi,N/A,N/A,https://api.github.com/repos/irenekarijadi/RF-LSTM-CEEMDAN,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C171:05EF:6C87D9:E06C05:6522408B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
378,Smart-Energy-Monitor,jonathanrjpereira,N/A,N/A,https://api.github.com/repos/jonathanrjpereira/Smart-Energy-Monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C128:6D2F:2D93B2:5E8C84:6522408B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
379,SmartMeterPrediction,HanYangZhao,N/A,N/A,https://api.github.com/repos/HanYangZhao/SmartMeterPrediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C113:7890:29C9EE:56FEEE:6522408C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
380,AI-residential-electricity-bill-prediction,nivmukka,N/A,N/A,https://api.github.com/repos/nivmukka/AI-residential-electricity-bill-prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C188:2EE5:285A054:5303D6E:6522408D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
381,powerplanswitcher,MouthlessGames,N/A,N/A,https://api.github.com/repos/MouthlessGames/powerplanswitcher,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12D:2E63:299787:5697E4:6522408D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
382,CarChargeWithHourCurrentRates,smokkelaar,N/A,N/A,https://api.github.com/repos/smokkelaar/CarChargeWithHourCurrentRates,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CD:6584:283956A:52B57A3:6522408E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
383,LoRaEnergySim,GillesC,N/A,N/A,https://api.github.com/repos/GillesC/LoRaEnergySim,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C169:6829:2E46741:5EC455C:6522408E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
384,cats,GreenScheduler,N/A,N/A,https://api.github.com/repos/GreenScheduler/cats,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19B:458F:2C2F1EC:5A9BDEF:65223FD6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
385,commercial_storage_analysis,jbbae,N/A,N/A,https://api.github.com/repos/jbbae/commercial_storage_analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BD:406C:2A84E7:58665C:6522408F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
386,ADE7758,yasir-shahzad,N/A,N/A,https://api.github.com/repos/yasir-shahzad/ADE7758,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12D:2E63:29994B:569BA2:65224090.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
387,ATM90E36,yasir-shahzad,N/A,N/A,https://api.github.com/repos/yasir-shahzad/ATM90E36,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15A:68AA:2E88551:5F48285:65224090.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
388,Stand-Bye,SelectCode,N/A,N/A,https://api.github.com/repos/SelectCode/Stand-Bye,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C100:336C:2CF95F8:5C32729:65224091.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
389,ESPproMon,pieman64,N/A,N/A,https://api.github.com/repos/pieman64/ESPproMon,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:4771:2A1DB8:5787C2:65224091.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
390,Hourly_Energy_Consumption,panambY,N/A,N/A,https://api.github.com/repos/panambY/Hourly_Energy_Consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C183:1CC6:2A339BD:569E050:65224092.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
391,energyMaster,BrucesHobbies,N/A,N/A,https://api.github.com/repos/BrucesHobbies/energyMaster,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DC:47EA:26A246B:4F5CA47:65224093.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
392,yablo,sebastian-xyz,N/A,N/A,https://api.github.com/repos/sebastian-xyz/yablo,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C190:2EE5:285A576:530482B:65224093.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
393,homewizard-energy-api,jvandenaardweg,N/A,N/A,https://api.github.com/repos/jvandenaardweg/homewizard-energy-api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:643D:2A1C11B:565C89C:65224094.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
394,OpenIO-Canada,CIRAIG,N/A,N/A,https://api.github.com/repos/CIRAIG/OpenIO-Canada,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F3:6584:2839AED:52B6320:65224095.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
395,DIBS---Dynamic-ISO-Building-Simulator,IWUGERMANY,N/A,N/A,https://api.github.com/repos/IWUGERMANY/DIBS---Dynamic-ISO-Building-Simulator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C163:1E37:29B303:56BE7A:65224095.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
396,energy_consumption_prediction,iamirmasoud,N/A,N/A,https://api.github.com/repos/iamirmasoud/energy_consumption_prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C8:7A65:28F581:5559DA:65224096.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
397,MetersToHA,mdeweerd,N/A,N/A,https://api.github.com/repos/mdeweerd/MetersToHA,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C166:3493:27168C4:5077330:65224096.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
398,jouleit,powerapi-ng,N/A,N/A,https://api.github.com/repos/powerapi-ng/jouleit,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15F:1E37:29B4B8:56C200:65224097.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
399,esphome_components,jplitza,N/A,N/A,https://api.github.com/repos/jplitza/esphome_components,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2D83A9:5E45BA:65224098.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
400,powersaver,Naios,N/A,N/A,https://api.github.com/repos/Naios/powersaver,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E4:3493:2716A38:5077647:65224098.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
401,stromnetzgraz,dreautall,N/A,N/A,https://api.github.com/repos/dreautall/stromnetzgraz,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C7:4C24:2B70723:591F242:65224099.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
402,DRESG_lpwan,sergiobarra,N/A,N/A,https://api.github.com/repos/sergiobarra/DRESG_lpwan,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:3493:2716B37:507786F:6522409A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
403,windows-rapl-driver,hubblo-org,N/A,N/A,https://api.github.com/repos/hubblo-org/windows-rapl-driver,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A0:53F5:28003ED:523F55A:6522409A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
404,efergy-bridge,evogy,N/A,N/A,https://api.github.com/repos/evogy/efergy-bridge,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2BA000D:597E1D6:6522409B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
405,bl0940,RDobrinov,N/A,N/A,https://api.github.com/repos/RDobrinov/bl0940,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C0:6C98:2A8C32:587B85:6522409B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
406,Machine-Learning-to-Predict-Energy-Consumption,MohamadNach,N/A,N/A,https://api.github.com/repos/MohamadNach/Machine-Learning-to-Predict-Energy-Consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:6B96:285D0FB:531045B:6522409C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
407,Blynk-PZEM-004T-v3.0-Multiple-device,pkarun,N/A,N/A,https://api.github.com/repos/pkarun/Blynk-PZEM-004T-v3.0-Multiple-device,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12E:47EE:2B8A48D:5952761:6522409D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
408,ha-stromnetzgraz,dreautall,N/A,N/A,https://api.github.com/repos/dreautall/ha-stromnetzgraz,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B4:6EA3:290451:556C27:6522409D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
409,GPUs-Energy,NMSU-PEARL,N/A,N/A,https://api.github.com/repos/NMSU-PEARL/GPUs-Energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E6:7890:29DA5E:572124:6522409E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
410,SNN4Space,AndrzejKucik,N/A,N/A,https://api.github.com/repos/AndrzejKucik/SNN4Space,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A0:53F5:280074E:523FC7F:6522409F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
411,aDoctor,sesalab,N/A,N/A,https://api.github.com/repos/sesalab/aDoctor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C185:11F8:2C298D:5BB80B:6522409F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
412,leaf-java,dos-group,N/A,N/A,https://api.github.com/repos/dos-group/leaf-java,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C108:5A71:303FDDD:62B39B9:652240A0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
413,MARL-iDR-Multi-Agent-Reinforcement-Learning-for-Incentive-based-Residential-Demand-Response,TU-Delft-AI-Energy-Lab,N/A,N/A,https://api.github.com/repos/TU-Delft-AI-Energy-Lab/MARL-iDR-Multi-Agent-Reinforcement-Learning-for-Incentive-based-Residential-Demand-Response,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C100:336C:2CFA33E:5C342D5:652240A1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
414,energy_forecasting_LSTM_vs_FCNN,ERafaelMartinez,N/A,N/A,https://api.github.com/repos/ERafaelMartinez/energy_forecasting_LSTM_vs_FCNN,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18C:840D:2936DBC:54B8C1E:652240A1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
415,ideenergy,ldotlopez,N/A,N/A,https://api.github.com/repos/ldotlopez/ideenergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17A:6B96:285D626:5310F16:652240A2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
416,EC-NAS-Bench,PedramBakh,N/A,N/A,https://api.github.com/repos/PedramBakh/EC-NAS-Bench,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C160:18E3:2976B9:564FF4:652240A2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
417,ImpSoft.OctopusEnergy,PhilPJL,N/A,N/A,https://api.github.com/repos/PhilPJL/ImpSoft.OctopusEnergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C115:406C:2A9B0F:58941C:652240A3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
418,DistributedTargetAssgmt,jsgonzalez15,N/A,N/A,https://api.github.com/repos/jsgonzalez15/DistributedTargetAssgmt,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C119:2EE5:285B180:530615C:652240A4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
419,ioBroker.virtualpowermeter,Omega236,N/A,N/A,https://api.github.com/repos/Omega236/ioBroker.virtualpowermeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CE:797D:27E4BC:5332C0:652240A4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
420,Emission-Control-Global-Warming-Analysis-and-Prediction,chenzhivis,N/A,N/A,https://api.github.com/repos/chenzhivis/Emission-Control-Global-Warming-Analysis-and-Prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C183:1CC6:2A34B16:56A0470:652240A5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
421,emon_fw,cziter15,N/A,N/A,https://api.github.com/repos/cziter15/emon_fw,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C122:17C0:28FEA8:557732:652240A6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
422,gas_monitor,erkexzcx,N/A,N/A,https://api.github.com/repos/erkexzcx/gas_monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17C:797D:27E618:53359E:652240A6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
423,platypus,Boavizta,N/A,N/A,https://api.github.com/repos/Boavizta/platypus,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C173:1D49:2C2CABF:5A8CC6E:65223FF6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
424,octopus-energy-web-api-java,faeludire,N/A,N/A,https://api.github.com/repos/faeludire/octopus-energy-web-api-java,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FC:5A71:30404D6:62B4845:652240A7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
425,jvm-energy-consumption,ionutbalosin,N/A,N/A,https://api.github.com/repos/ionutbalosin/jvm-energy-consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C135:61FF:2AF65D:5936C1:652240A8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
426,IoT-EnergyManagement,gabrielganzer,N/A,N/A,https://api.github.com/repos/gabrielganzer/IoT-EnergyManagement,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C156:3493:2717740:50791B5:652240A8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
427,greenICTer,teto1992,N/A,N/A,https://api.github.com/repos/teto1992/greenICTer,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C199:5A71:30406C7:62B4C34:652240A9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
428,GATorch,GreenAITorch,N/A,N/A,https://api.github.com/repos/GreenAITorch/GATorch,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C195:6C98:2A97A9:589376:652240A9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
429,lowatt-grdf,lowatt,N/A,N/A,https://api.github.com/repos/lowatt/lowatt-grdf,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:3493:27178F4:507953A:652240AA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
430,energy-tools,fourdollars,N/A,N/A,https://api.github.com/repos/fourdollars/energy-tools,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2BA0D3D:597FD72:652240AB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
431,COBS-joint-control,sustainable-computing,N/A,N/A,https://api.github.com/repos/sustainable-computing/COBS-joint-control,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10D:8AB4:2998CEB:556A3A7:652240AB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
432,energybridge_to_influxdb,cdzombak,N/A,N/A,https://api.github.com/repos/cdzombak/energybridge_to_influxdb,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C130:3B38:2D93EC:5E67C5:652240AC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
433,sleepcycles,rekuberate-io,N/A,N/A,https://api.github.com/repos/rekuberate-io/sleepcycles,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CC:33C6:29F7595:563CA34:652240AD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
434,grdf-api,maelgangloff,N/A,N/A,https://api.github.com/repos/maelgangloff/grdf-api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C150:7A65:290989:558399:652240AC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
435,paper-video-streaming-network-energy,davidmytton,N/A,N/A,https://api.github.com/repos/davidmytton/paper-video-streaming-network-energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C156:3493:2717B9A:5079AC8:652240AD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
436,Bayesian-network-greenhouse-gases,Lostefra,N/A,N/A,https://api.github.com/repos/Lostefra/Bayesian-network-greenhouse-gases,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CD:6584:283AE86:52B8C3E:652240AE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
437,jreferral,chakib-belgaid,N/A,N/A,https://api.github.com/repos/chakib-belgaid/jreferral,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10E:24F2:299D598:556E0B7:652240AE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
438,carbonara,philippedeb,N/A,N/A,https://api.github.com/repos/philippedeb/carbonara,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DE:3B38:2D9662:5E6CF0:652240AF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
439,hpcpm,tomix86,N/A,N/A,https://api.github.com/repos/tomix86/hpcpm,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2D9606:5E6C26:652240AF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
440,ELMO,cdeck3r,N/A,N/A,https://api.github.com/repos/cdeck3r/ELMO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D7:4C24:2B71922:59217D4:652240AF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
441,pysmartmeter,jedie,N/A,N/A,https://api.github.com/repos/jedie/pysmartmeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E9:47EE:2B8B578:5954AED:652240B0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
442,Blynk-PZEM-004T-v3.0,pkarun,N/A,N/A,https://api.github.com/repos/pkarun/Blynk-PZEM-004T-v3.0,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C190:2EE5:285BAC4:5307523:652240B1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
443,charts,xdanielsb,N/A,N/A,https://api.github.com/repos/xdanielsb/charts,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D3:8AB4:29993B6:556B1E6:652240B1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
444,octodata,tomdyson,N/A,N/A,https://api.github.com/repos/tomdyson/octodata,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:1CC6:2A3571E:56A1DAA:652240B2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
445,Rosetta-Code-Research,stefanos1316,N/A,N/A,https://api.github.com/repos/stefanos1316/Rosetta-Code-Research,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19D:47EE:2B8B954:59552D3:652240B3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
446,Rosetta_Code_Research_MSR,stefanos1316,N/A,N/A,https://api.github.com/repos/stefanos1316/Rosetta_Code_Research_MSR,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:5B68:2A4328:580D18:652240B3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
447,tempo-comparatif,grimmlink,N/A,N/A,https://api.github.com/repos/grimmlink/tempo-comparatif,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C100:336C:2CFB478:5C366B7:652240B4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
448,milp-scheduling,tomjanus,N/A,N/A,https://api.github.com/repos/tomjanus/milp-scheduling,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C157:6B96:285E83D:53134A2:652240B4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
449,jRAPL,aservet1,N/A,N/A,https://api.github.com/repos/aservet1/jRAPL,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C122:17C0:290A44:558F84:652240B5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
450,BL0940-Energy-Meter-w-Arduino,mcmchris,N/A,N/A,https://api.github.com/repos/mcmchris/BL0940-Energy-Meter-w-Arduino,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DF:41EE:27B09E5:51B0C96:652240B6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
451,epias-transparency-forecasting-tool,karakastarik,N/A,N/A,https://api.github.com/repos/karakastarik/epias-transparency-forecasting-tool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18D:7D6D:2A0291:577C27:652240B6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
452,drivecycle,smohiudd,N/A,N/A,https://api.github.com/repos/smohiudd/drivecycle,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18C:840D:2938294:54BB75C:652240B6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
453,Increasing-Renewable-Energy-Access-India,prathimacode-hub,N/A,N/A,https://api.github.com/repos/prathimacode-hub/Increasing-Renewable-Energy-Access-India,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11F:1E37:29D368:5701BB:652240B7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
454,ecocoding,blessinvarkey,N/A,N/A,https://api.github.com/repos/blessinvarkey/ecocoding,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CD:6584:283B84C:52BA081:652240B8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
455,Energy-consumption-Logarex,Cavekeeper,N/A,N/A,https://api.github.com/repos/Cavekeeper/Energy-consumption-Logarex,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F8:11F8:2C3E6B:5BE38B:652240B8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
456,p1_monitor,GitHub4Eddy,N/A,N/A,https://api.github.com/repos/GitHub4Eddy/p1_monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C197:1560:28DE28F:53F888C:652240B9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
457,dutch-dwelling-database,dutch-dwellings,N/A,N/A,https://api.github.com/repos/dutch-dwellings/dutch-dwelling-database,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C156:3493:2718AA9:507B9BA:652240B9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
458,LA_Energy_Water_Analysis,yashkansal97,N/A,N/A,https://api.github.com/repos/yashkansal97/LA_Energy_Water_Analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C117:406C:2AB31B:58C5F4:652240BA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
459,IJoules,chakib-belgaid,N/A,N/A,https://api.github.com/repos/chakib-belgaid/IJoules,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:1D49:2C3C09D:5AAC5D2:652240BB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
460,Model-to-predict-Energy-consumption-City-of-Seattle,LaurentVeyssier,N/A,N/A,https://api.github.com/repos/LaurentVeyssier/Model-to-predict-Energy-consumption-City-of-Seattle,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C182:0208:2DE8FD9:5E07F05:652240BB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
461,toon_energy,GitHub4Eddy,N/A,N/A,https://api.github.com/repos/GitHub4Eddy/toon_energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B7:7D6D:2A0903:578983:652240BC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
462,mscs-thesis-project,rjray,N/A,N/A,https://api.github.com/repos/rjray/mscs-thesis-project,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10E:24F2:299E6FE:5570497:652240BC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
463,btc-carbon,sprusr,N/A,N/A,https://api.github.com/repos/sprusr/btc-carbon,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AE:1CC6:2A3643D:56A3890:652240BD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
464,toronto-hydro-green-button,benwebber,N/A,N/A,https://api.github.com/repos/benwebber/toronto-hydro-green-button,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C135:61FF:2B0A99:5960C8:652240BE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
465,GreenPyData,AghilesAzzoug,N/A,N/A,https://api.github.com/repos/AghilesAzzoug/GreenPyData,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15F:1E37:29DC24:5713B8:652240BE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
466,PETrA,dardin88,N/A,N/A,https://api.github.com/repos/dardin88/PETrA,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13F:47EA:26A4E33:4F6213C:652240BF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
467,esphome,pascal-parent,N/A,N/A,https://api.github.com/repos/pascal-parent/esphome,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E1:6584:283C10B:52BB2AC:652240BF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
468,tibber_monitor,GitHub4Eddy,N/A,N/A,https://api.github.com/repos/GitHub4Eddy/tibber_monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14E:3B38:2DA843:5E91F4:652240C0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
469,energy,mrsimpson,N/A,N/A,https://api.github.com/repos/mrsimpson/energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F3:6584:283C237:52BB51E:652240C1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
470,Predictions_on_Energy_Consumption_in_Seattle,yasarigno,N/A,N/A,https://api.github.com/repos/yasarigno/Predictions_on_Energy_Consumption_in_Seattle,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C155:47EA:26A50E3:4F626AB:652240C1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
471,smartcharginggame,SeitaBV,N/A,N/A,https://api.github.com/repos/SeitaBV/smartcharginggame,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C183:1CC6:2A36957:56A4321:652240C2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
472,multidimensional-building-data-cube-pattern-identification,JulienLeprince,N/A,N/A,https://api.github.com/repos/JulienLeprince/multidimensional-building-data-cube-pattern-identification,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C176:33C6:29F8E34:563FD02:652240C2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
473,TailTheft,dizhang,N/A,N/A,https://api.github.com/repos/dizhang/TailTheft,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:5B68:2A5314:582E1D:652240C3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
474,ha-evnex,hardbyte,N/A,N/A,https://api.github.com/repos/hardbyte/ha-evnex,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A5:5B68:2A53A2:582F42:652240C4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
475,SMIT,ChristianKoplenig,N/A,N/A,https://api.github.com/repos/ChristianKoplenig/SMIT,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D7:4C24:2B7338E:5924E20:652240C4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
476,Halbwegs-Smart-MeteR,katrinleinweber,N/A,N/A,https://api.github.com/repos/katrinleinweber/Halbwegs-Smart-MeteR,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C188:2EE5:285CF13:5309F10:652240C5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
477,SpMV-CNN-Model,hpca-uji,N/A,N/A,https://api.github.com/repos/hpca-uji/SpMV-CNN-Model,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14D:1CC6:2A36DF4:56A4BE2:652240C5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
478,Refactor4Green,phoebs88,N/A,N/A,https://api.github.com/repos/phoebs88/Refactor4Green,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C128:6D2F:2DC7C2:5EF919:652240C6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
479,rladies-clusters,CaitHRobinson,N/A,N/A,https://api.github.com/repos/CaitHRobinson/rladies-clusters,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C167:11F8:2C4C86:5C00A7:652240C7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
480,EstimEnergy,EuleMitKeule,N/A,N/A,https://api.github.com/repos/EuleMitKeule/EstimEnergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10D:8AB4:299B2F2:556F1A2:652240C7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
481,home-energy-metering-solution,meharbhutta,N/A,N/A,https://api.github.com/repos/meharbhutta/home-energy-metering-solution,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F0:9938:29B55FD:559CC1C:652240C8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
482,ease-2020-replication-package,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/ease-2020-replication-package,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16C:1ECC:2A843A:587371:652240C9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
483,octopus_data,dmt195,N/A,N/A,https://api.github.com/repos/dmt195/octopus_data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C133:11F8:2C4ED1:5C0592:652240C9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
484,natural_gas_consumption_modelling,f-linus,N/A,N/A,https://api.github.com/repos/f-linus/natural_gas_consumption_modelling,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C120:1ECC:2A8536:587578:652240CA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
485,mlops-energy-forecast-thesis,Philippos01,N/A,N/A,https://api.github.com/repos/Philippos01/mlops-energy-forecast-thesis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16D:6EA3:293167:55C91D:652240CB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
486,octopus_data,dmt195,N/A,N/A,https://api.github.com/repos/dmt195/octopus_data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C133:11F8:2C4ED1:5C0592:652240C9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
487,natural_gas_consumption_modelling,f-linus,N/A,N/A,https://api.github.com/repos/f-linus/natural_gas_consumption_modelling,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C120:1ECC:2A8536:587578:652240CA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
488,sproxy,leighgarbs,N/A,N/A,https://api.github.com/repos/leighgarbs/sproxy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C183:1CC6:2A373F1:56A584C:652240CB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
489,Submetering_Analysis,Nell87,N/A,N/A,https://api.github.com/repos/Nell87/Submetering_Analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13F:47EA:26A5B8C:4F63CCC:652240CC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
490,Energy-prediction-project-,vaibhavhindia,N/A,N/A,https://api.github.com/repos/vaibhavhindia/Energy-prediction-project-,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C125:6829:2E4A6F8:5ECC951:652240CD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
491,PowerAPI-Quickstart,davidson-consulting,N/A,N/A,https://api.github.com/repos/davidson-consulting/PowerAPI-Quickstart,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18D:7D6D:2A19A5:57ABDC:652240CD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
492,usman,usmanbatch8,N/A,N/A,https://api.github.com/repos/usmanbatch8/usman,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13A:458F:2C409B2:5ABFE67:652240CE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
493,energy-management-tool,imessenger98,N/A,N/A,https://api.github.com/repos/imessenger98/energy-management-tool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F7:8AB4:299BAF5:5570252:652240CE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
494,powerSaver,NAKlama,N/A,N/A,https://api.github.com/repos/NAKlama/powerSaver,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C113:7890:2A0479:5778FA:652240CF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
495,paper-network-energy,davidmytton,N/A,N/A,https://api.github.com/repos/davidmytton/paper-network-energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C191:33EB:2BC54E:5AECAF:652240D0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
496,mpi-wattmeter,trahay,N/A,N/A,https://api.github.com/repos/trahay/mpi-wattmeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16C:1ECC:2A8A40:58801F:652240D0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
497,energy,dox,N/A,N/A,https://api.github.com/repos/dox/energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D9:47EA:26A603D:4F64667:652240D1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
498,DNN-for-NILM,EEE17A,N/A,N/A,https://api.github.com/repos/EEE17A/DNN-for-NILM,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:5B68:2A60AF:584A6A:652240D2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
499,Energy-Efficient,iamgmujtaba,N/A,N/A,https://api.github.com/repos/iamgmujtaba/Energy-Efficient,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C185:11F8:2C5739:5C16F9:652240D2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
500,seiverkot-consumption,evantaur,N/A,N/A,https://api.github.com/repos/evantaur/seiverkot-consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C199:5A71:3043BD9:62BB95C:652240D3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
501,carbon-emissions-exporter,danesherbs,N/A,N/A,https://api.github.com/repos/danesherbs/carbon-emissions-exporter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F6:797D:2809BA:53800E:652240D4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
502,renewcastapp,mohcinemadkour,N/A,N/A,https://api.github.com/repos/mohcinemadkour/renewcastapp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C109:4771:2A5245:57F5B0:652240D4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
503,Shelly_3EM_control,GiorgioCitterio,N/A,N/A,https://api.github.com/repos/GiorgioCitterio/Shelly_3EM_control,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C111:68AA:2E8CF4D:5F51B76:652240D5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
504,energy_save,adityavinodk,N/A,N/A,https://api.github.com/repos/adityavinodk/energy_save,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B9:0BEC:29FD12:5772F6:652240D5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
505,Powerhouse,DnA-IntRicate,N/A,N/A,https://api.github.com/repos/DnA-IntRicate/Powerhouse,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13C:7E09:25F39CD:4E35997:652240D6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
506,PulseTAC,IacoT1,N/A,N/A,https://api.github.com/repos/IacoT1/PulseTAC,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C8:7A65:293400:55DB99:652240D7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
507,Streamlit-Tutorial-a-Thon-IEA-App,solarpandas45,N/A,N/A,https://api.github.com/repos/solarpandas45/Streamlit-Tutorial-a-Thon-IEA-App,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15D:17C0:29278B:55CC8A:652240D7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
508,Task-Scheduling-in-Mobile-Environment,Tejas1415,N/A,N/A,https://api.github.com/repos/Tejas1415/Task-Scheduling-in-Mobile-Environment,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F0:9938:29B648A:559EA51:652240D8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
509,ECO,inetrg,N/A,N/A,https://api.github.com/repos/inetrg/ECO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BE:68AA:2E8D32F:5F5236D:652240D9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
510,stm32_rust_energy-monitor,brendans-bits,N/A,N/A,https://api.github.com/repos/brendans-bits/stm32_rust_energy-monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:1CC6:2A381E2:56A7516:652240D9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
511,SmartMeter,Simeon-byte,N/A,N/A,https://api.github.com/repos/Simeon-byte/SmartMeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C104:4771:2A5664:57FE8B:652240DA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
512,lit-io.github.io,lit-io,N/A,N/A,https://api.github.com/repos/lit-io/lit-io.github.io,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19B:458F:2C4181B:5AC1C1D:652240DA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
513,mobilesoft-2020-caching-pwa-replication-package,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/mobilesoft-2020-caching-pwa-replication-package,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11F:1E37:29F910:574F88:652240DB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
514,iungo_monitor,GitHub4Eddy,N/A,N/A,https://api.github.com/repos/GitHub4Eddy/iungo_monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B4:6EA3:2940A6:55E8D7:652240DC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
515,DemographyEnergyClimate,Whiax,N/A,N/A,https://api.github.com/repos/Whiax/DemographyEnergyClimate,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:2772:28CF53B:53F30C4:652240DC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
516,stm32_rust_energy-monitor,brendans-bits,N/A,N/A,https://api.github.com/repos/brendans-bits/stm32_rust_energy-monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D3:8AB4:299C77D:5571BFC:652240D9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
517,SmartMeter,Simeon-byte,N/A,N/A,https://api.github.com/repos/Simeon-byte/SmartMeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D0:24F2:29A064E:55744F0:652240DA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
518,Internet-Of-Things-IoT-Projects,drtiwari,N/A,N/A,https://api.github.com/repos/drtiwari/Internet-Of-Things-IoT-Projects,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C8:7A65:293A1C:55E83E:652240DD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
519,dl-energy-estimator,JohannesGetzner,N/A,N/A,https://api.github.com/repos/JohannesGetzner/dl-energy-estimator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DB:5A86:2BA42BE:5986C16:652240DD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
520,Smart-Energy-Meter,surajraju373,N/A,N/A,https://api.github.com/repos/surajraju373/Smart-Energy-Meter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EA:500E:2A56800:56E475C:652240DE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
521,Energy_Calculator,karlduggan,N/A,N/A,https://api.github.com/repos/karlduggan/Energy_Calculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B6:7D6D:2A2A82:57CEDD:652240DF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
522,ml-energy.github.io,ml-energy,N/A,N/A,https://api.github.com/repos/ml-energy/ml-energy.github.io,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C159:1CC6:2A387B5:56A814F:652240E0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
523,residential-energy-prediction,miladashouri,N/A,N/A,https://api.github.com/repos/miladashouri/residential-energy-prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C143:9938:29B6BA2:559F91B:652240E0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
524,Novacoding,vildan878,N/A,N/A,https://api.github.com/repos/vildan878/Novacoding,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:2772:28CF9A1:53F39F3:652240E1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
525,OctoCostToo,lildude,N/A,N/A,https://api.github.com/repos/lildude/OctoCostToo,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15B:1ECC:2A9859:589D76:652240E1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
526,energiewende-rechner,euporos,N/A,N/A,https://api.github.com/repos/euporos/energiewende-rechner,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17D:33C6:29FABFE:5643AED:652240E2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
527,energiekarte,technologiestiftung,N/A,N/A,https://api.github.com/repos/technologiestiftung/energiekarte,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C130:3B38:2DC7A5:5ED31C:652240E3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
528,tibber_live,GitHub4Eddy,N/A,N/A,https://api.github.com/repos/GitHub4Eddy/tibber_live,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C178:2EE5:285E894:530D42D:652240E3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
529,meter-data-analytics,gianantoniopini,N/A,N/A,https://api.github.com/repos/gianantoniopini/meter-data-analytics,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C3:53F5:28048D6:524849F:652240E4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
530,Load-Forecasting,shankar-shiv,N/A,N/A,https://api.github.com/repos/shankar-shiv/Load-Forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C136:4771:2A5E53:580F15:652240E5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
531,dashboard1-group-a,ubco-mds-2021-labs,N/A,N/A,https://api.github.com/repos/ubco-mds-2021-labs/dashboard1-group-a,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2BA49FB:5987AF4:652240E5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
532,IoT-AES-128,ricoen,N/A,N/A,https://api.github.com/repos/ricoen/IoT-AES-128,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C143:9938:29B6E39:559FE78:652240E3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
533,phovafer,A-Giant-Panda,N/A,N/A,https://api.github.com/repos/A-Giant-Panda/phovafer,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D1:1E37:2A01C3:57619C:652240E4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
534,sumpMaster,BrucesHobbies,N/A,N/A,https://api.github.com/repos/BrucesHobbies/sumpMaster,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D0:24F2:29A1115:5575B52:652240E5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
535,CleanEmonApp,konmaz,N/A,N/A,https://api.github.com/repos/konmaz/CleanEmonApp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15F:1E37:2A02E8:5763FC:652240E5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
536,energy-use,MHenderson,N/A,N/A,https://api.github.com/repos/MHenderson/energy-use,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:3493:271B44B:5081030:652240E6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
537,charlotte_energy_future,smulage,N/A,N/A,https://api.github.com/repos/smulage/charlotte_energy_future,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13F:47EA:26A73A6:4F66EC7:652240E7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
538,UK-Energy-Usage-2020,RamSailopal,N/A,N/A,https://api.github.com/repos/RamSailopal/UK-Energy-Usage-2020,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11C:24F2:29A134B:5575FE1:652240E7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
539,sambuco,frizull,N/A,N/A,https://api.github.com/repos/frizull/sambuco,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17C:797D:2818D6:539FA3:652240E7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
540,Electricity-Daily-Charge-HA,Rumbaar,N/A,N/A,https://api.github.com/repos/Rumbaar/Electricity-Daily-Charge-HA,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F3:6584:283E25D:52BF7E3:652240E8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
541,tibber,christoffercarlsson,N/A,N/A,https://api.github.com/repos/christoffercarlsson/tibber,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C140:646E:26D3419:4FAADE0:65224032.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
542,Efficient-Computing-in-a-Safe-Environment,milouk,N/A,N/A,https://api.github.com/repos/milouk/Efficient-Computing-in-a-Safe-Environment,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:1CC6:2A39034:56A92C9:652240E9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
543,DrahiX-energy-forecasting,ziadelassal,N/A,N/A,https://api.github.com/repos/ziadelassal/DrahiX-energy-forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C4:643D:2A22086:5668CBC:652240E9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
544,node-green-button-parser,cityssm,N/A,N/A,https://api.github.com/repos/cityssm/node-green-button-parser,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:3493:271B745:5081688:652240EA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
545,app-energy,OwnYourData,N/A,N/A,https://api.github.com/repos/OwnYourData/app-energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16E:3493:271B7CC:508178F:652240EA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
546,MAPO,SiNa88,N/A,N/A,https://api.github.com/repos/SiNa88/MAPO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2DCE81:5EE15B:652240EB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
547,lovelace-energy-entity-row,zeronounours,N/A,N/A,https://api.github.com/repos/zeronounours/lovelace-energy-entity-row,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B8:1560:28E0F22:53FE4E9:652240EB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
548,ValTronix-VTM0001-EnergyMonitor,vmarzlin,N/A,N/A,https://api.github.com/repos/vmarzlin/ValTronix-VTM0001-EnergyMonitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CA:17C0:293633:55EB6F:652240EC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
549,Computational-Sustainability-Toolkit,kmaclaury,N/A,N/A,https://api.github.com/repos/kmaclaury/Computational-Sustainability-Toolkit,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B7:7D6D:2A3687:57E7F5:652240ED.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
550,sustainablinds,Enprogames,N/A,N/A,https://api.github.com/repos/Enprogames/sustainablinds,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DA:2EE5:285F12F:530E62A:652240ED.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
551,chakib-belgaid,chakib-belgaid,N/A,N/A,https://api.github.com/repos/chakib-belgaid/chakib-belgaid,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2DD17C:5EE79F:652240EE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
552,solarapp,motia,N/A,N/A,https://api.github.com/repos/motia/solarapp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:505E:2CB224:5CA568:652240EF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
553,Consumo-Energetico-UPV,cgallegoan,N/A,N/A,https://api.github.com/repos/cgallegoan/Consumo-Energetico-UPV,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C133:11F8:2C70D6:5C4C33:652240EF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
554,blog,ml-energy,N/A,N/A,https://api.github.com/repos/ml-energy/blog,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C199:5A71:3045B5F:62BFA54:652240F0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
555,EnergyManagement,MobiliyaTechnologies,N/A,N/A,https://api.github.com/repos/MobiliyaTechnologies/EnergyManagement,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C150:7A65:294CF7:560F4C:652240F0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
556,hcem,hawaii-clean-energy-metrics,N/A,N/A,https://api.github.com/repos/hawaii-clean-energy-metrics/hcem,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C155:47EA:26A7E90:4F68562:652240F1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
557,cloudfoundry_footprint,P-Ehlert,N/A,N/A,https://api.github.com/repos/P-Ehlert/cloudfoundry_footprint,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:1D49:2C40161:5AB4B43:652240F2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
558,SmartMeter-Power-Consumption-Time-Series-Forecasting,MrAsimZahid,N/A,N/A,https://api.github.com/repos/MrAsimZahid/SmartMeter-Power-Consumption-Time-Series-Forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C125:6829:2E4CA23:5ED1260:652240F2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
559,timeSlots,zzzzz1st,N/A,N/A,https://api.github.com/repos/zzzzz1st/timeSlots,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C196:336C:2CFF8DD:5C3F3FA:652240F3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
560,Energy_Modelling,jamwills,N/A,N/A,https://api.github.com/repos/jamwills/Energy_Modelling,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2BA5A06:5989C48:652240F3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
561,utility_analysis,anthonyho,N/A,N/A,https://api.github.com/repos/anthonyho/utility_analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10C:4776:2BD489:5AFFE9:652240F4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
562,kaggle_ashrae,acardoco,N/A,N/A,https://api.github.com/repos/acardoco/kaggle_ashrae,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C173:1D49:2C40561:5AB5351:652240F5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
563,codecarbon_tutorial,Kerl1310,N/A,N/A,https://api.github.com/repos/Kerl1310/codecarbon_tutorial,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D5:22D5:2F4152B:60C3D36:652240F5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
564,kettle_calculator,droguk,N/A,N/A,https://api.github.com/repos/droguk/kettle_calculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14A:5BDF:2720969:5055573:6522403B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
565,Monitoraggio-IMe,RiccardoEvangelisti,N/A,N/A,https://api.github.com/repos/RiccardoEvangelisti/Monitoraggio-IMe,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:3493:271C547:5083358:652240F6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
566,AV_Jobathon_Nov_22_Energy_Consumption_Forecasting,iamanuragdhiman,N/A,N/A,https://api.github.com/repos/iamanuragdhiman/AV_Jobathon_Nov_22_Energy_Consumption_Forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C193:0BEC:2A1978:57AE0E:652240F6.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
567,appower,Timadey,N/A,N/A,https://api.github.com/repos/Timadey/appower,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CD:6584:283F053:52C14FA:652240F7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
568,android-meters,jerleo,N/A,N/A,https://api.github.com/repos/jerleo/android-meters,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A1:8AB4:299EB47:55765BA:652240F8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
569,mysmappee,pvdabeel,N/A,N/A,https://api.github.com/repos/pvdabeel/mysmappee,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12F:458F:2C43CCE:5AC6768:652240F8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
570,CrefThinkspace,Crefeda,N/A,N/A,https://api.github.com/repos/Crefeda/CrefThinkspace,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C144:6829:2E4D2A7:5ED23EF:652240F9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
571,my-iot,eigenein,N/A,N/A,https://api.github.com/repos/eigenein/my-iot,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F2:7A65:2956BF:56238A:652240F9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
572,Kaggle_Hourly_Energy_Consumption,mayur29,N/A,N/A,https://api.github.com/repos/mayur29/Kaggle_Hourly_Energy_Consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C116:53F5:2805F0A:524B2A1:652240FA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
573,SmartEnergyMeter,RafeyIqbalRahman,N/A,N/A,https://api.github.com/repos/RafeyIqbalRahman/SmartEnergyMeter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16E:3493:271CA8D:5083E3A:652240FB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
574,AmplitudeMonitoring,Android-TPL-energy-consumption,N/A,N/A,https://api.github.com/repos/Android-TPL-energy-consumption/AmplitudeMonitoring,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C161:406C:2AEFED:594425:652240FB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
575,ProvaCalcolatoreEnergia,PaninoCode,N/A,N/A,https://api.github.com/repos/PaninoCode/ProvaCalcolatoreEnergia,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C138:1ECC:2AB186:58D1A0:652240FC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
576,seattle_net_zero,joycekuohmoukouri,N/A,N/A,https://api.github.com/repos/joycekuohmoukouri/seattle_net_zero,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B4:6EA3:2961E6:562CDB:652240FC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
577,Energy-Consumption-EU,MattiaBrocco,N/A,N/A,https://api.github.com/repos/MattiaBrocco/Energy-Consumption-EU,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D9:47EA:26A8B8D:4F6A012:652240FD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
578,eeprobe,lcudenne,N/A,N/A,https://api.github.com/repos/lcudenne/eeprobe,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CC:33C6:29FCD67:5647FC2:652240FE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
579,Time_Series_Analysis,devosmitachatterjee2018,N/A,N/A,https://api.github.com/repos/devosmitachatterjee2018/Time_Series_Analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C131:4776:2BDF6D:5B1689:652240FE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
580,synaptic_caching_with_multilayer_perceptron,nyirobalazs,N/A,N/A,https://api.github.com/repos/nyirobalazs/synaptic_caching_with_multilayer_perceptron,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A0:53F5:2806314:524BB0E:652240FF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
581,Wellenbrecher,evolunis,N/A,N/A,https://api.github.com/repos/evolunis/Wellenbrecher,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:38A4:2BC2521:59CB59E:652240FF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
582,energy-consumption-forecasting,lofilippini,N/A,N/A,https://api.github.com/repos/lofilippini/energy-consumption-forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D1:1E37:2A1EA9:579D50:65224100.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
583,shellyplug-prom-push,bpetit,N/A,N/A,https://api.github.com/repos/bpetit/shellyplug-prom-push,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E3:840D:293D5E3:54C630C:65224101.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
584,Appliance-Energy-Prediction,Thomas-George-T,N/A,N/A,https://api.github.com/repos/Thomas-George-T/Appliance-Energy-Prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13C:7E09:25F699D:4E3BC62:65224101.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
585,energy-measures-android-apps-benchmark,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/energy-measures-android-apps-benchmark,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14C:7E09:25F6A56:4E3BDE9:65224102.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
586,MetaAnalysis,InnopolisUniversity,N/A,N/A,https://api.github.com/repos/InnopolisUniversity/MetaAnalysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D2:6D2F:2E0091:5F6ED6:65224103.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
587,quick-start-powerAPI,juulieen,N/A,N/A,https://api.github.com/repos/juulieen/quick-start-powerAPI,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C167:11F8:2C845B:5C74A1:65224103.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
588,EASE-2022-energy-critical-css-rep-pkg,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/EASE-2022-energy-critical-css-rep-pkg,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C151:5A86:2BA6B6A:598C004:65224104.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
589,DS50,Axelvel,N/A,N/A,https://api.github.com/repos/Axelvel/DS50,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FC:5A71:3047460:62C2DA9:65224104.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
590,jcpl-electricity-analysis,christianmendoza,N/A,N/A,https://api.github.com/repos/christianmendoza/jcpl-electricity-analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E4:3493:271D480:50852BE:65224105.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
591,deorsum-energy-decision-support-tool,adamkalbouneh,N/A,N/A,https://api.github.com/repos/adamkalbouneh/deorsum-energy-decision-support-tool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AC:0208:2DEE8A0:5E135AA:65224106.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
592,Enemax,KOSASIH,N/A,N/A,https://api.github.com/repos/KOSASIH/Enemax,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CB:2772:28D2251:53F8D68:65224106.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
593,DTSC-5301,shaani2000,N/A,N/A,https://api.github.com/repos/shaani2000/DTSC-5301,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19A:0BEC:2A2817:57CC8A:65224107.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
594,Ecosystem_Applications,SolarexICO,N/A,N/A,https://api.github.com/repos/SolarexICO/Ecosystem_Applications,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C184:1560:28E2A40:5401D08:65224108.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
595,Daugiabuciu-renovacija,Kauno-miestas,N/A,N/A,https://api.github.com/repos/Kauno-miestas/Daugiabuciu-renovacija,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C168:9938:29B95D6:55A500B:65224108.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
596,ha-energy-json-storage,plckr,N/A,N/A,https://api.github.com/repos/plckr/ha-energy-json-storage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B2:5A86:2BA6FFB:598C977:65224109.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
597,YorkU-time-series-analysis,kaustubhmulay,N/A,N/A,https://api.github.com/repos/kaustubhmulay/YorkU-time-series-analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:5B68:2A9388:58B441:65224109.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
598,covid_energy,fcorowe,N/A,N/A,https://api.github.com/repos/fcorowe/covid_energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C152:0208:2DEED12:5E13EC3:6522410A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
599,py-monsoon-profiler,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/py-monsoon-profiler,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17D:33C6:29FD9BA:564995B:6522410B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
600,Undergrad-ME-Works,ZhijingHu-Rey,N/A,N/A,https://api.github.com/repos/ZhijingHu-Rey/Undergrad-ME-Works,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BA:1560:28E2D0E:54022D5:6522410B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
601,eco,nightsailor,N/A,N/A,https://api.github.com/repos/nightsailor/eco,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C143:9938:29B98F0:55A5690:6522410C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
602,London-Energy-Forecast,nicolasrosal98,N/A,N/A,https://api.github.com/repos/nicolasrosal98/London-Energy-Forecast,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11F:1E37:2A2AB2:57B644:6522410C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
603,CrashReportingTemplate,Android-TPL-energy-consumption,N/A,N/A,https://api.github.com/repos/Android-TPL-energy-consumption/CrashReportingTemplate,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:1CC6:2A3B229:56AD947:6522410D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
604,MonitoringTemplate,Android-TPL-energy-consumption,N/A,N/A,https://api.github.com/repos/Android-TPL-energy-consumption/MonitoringTemplate,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C158:4F4C:70B7D0:E89BF2:6522410E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
605,3-phase_energy_gauges_card,Swerfer,N/A,N/A,https://api.github.com/repos/Swerfer/3-phase_energy_gauges_card,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C100:29CE:32E0BAF:67D4C91:6522410E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
606,perf-expr-ener,rjray,N/A,N/A,https://api.github.com/repos/rjray/perf-expr-ener,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10C:64D2:711F44:E9820D:6522410F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
607,agenergyreport,webdevbc,N/A,N/A,https://api.github.com/repos/webdevbc/agenergyreport,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E5:38A4:2BBD538:59C11B1:652240C4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
608,sbes2019,carloszimm,N/A,N/A,https://api.github.com/repos/carloszimm/sbes2019,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14E:6A74:1A1D128:35C8721:6522410F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
609,energy-tracker,dennisschroer,N/A,N/A,https://api.github.com/repos/dennisschroer/energy-tracker,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F0:505E:74DC77:F0DFF0:65224110.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
610,QuarentineEnergyDemand,alanmatys,N/A,N/A,https://api.github.com/repos/alanmatys/QuarentineEnergyDemand,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10F:0E7B:1A1AD1D:35C526F:65224111.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
611,LISA_2020_Energy_prediction,MattiaBrocco,N/A,N/A,https://api.github.com/repos/MattiaBrocco/LISA_2020_Energy_prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C125:7B3E:75E8A3:F2C696:65224111.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
612,energyUsageInsights,aadomingos,N/A,N/A,https://api.github.com/repos/aadomingos/energyUsageInsights,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A1:4179:2DD3116:5DC73E9:65224112.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
613,energyhumandevelopment,anvdn,N/A,N/A,https://api.github.com/repos/anvdn/energyhumandevelopment,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A9:3819:1AD6934:3730161:65224112.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
614,NewRelicMonitoring,Android-TPL-energy-consumption,N/A,N/A,https://api.github.com/repos/Android-TPL-energy-consumption/NewRelicMonitoring,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E2:5A27:7026C3:E7A785:65224113.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
615,WiDS22_beginners,DjAzDeck,N/A,N/A,https://api.github.com/repos/DjAzDeck/WiDS22_beginners,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C179:1299:9CFA19:1444805:65224113.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
616,plot-energy,QasimK,N/A,N/A,https://api.github.com/repos/QasimK/plot-energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15D:29CE:32E1133:67D580D:65224114.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
617,AzukiHeart,kitsudaiki,N/A,N/A,https://api.github.com/repos/kitsudaiki/AzukiHeart,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C196:2115:6EA879:E4D028:65224114.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
618,meterkastd,eigenein,N/A,N/A,https://api.github.com/repos/eigenein/meterkastd,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B2:418F:2A53E6E:568A5E0:65224115.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
619,grafawatt,lapsus-ord,N/A,N/A,https://api.github.com/repos/lapsus-ord/grafawatt,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C101:178A:2C84782:5B232C6:65224116.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
620,yuugi,DanNixon,N/A,N/A,https://api.github.com/repos/DanNixon/yuugi,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DE:36DF:353FA7B:6C8FF67:65224116.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
621,Erei,KOSASIH,N/A,N/A,https://api.github.com/repos/KOSASIH/Erei,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C0:2319:68201A:D7A161:65224117.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
622,final,nikhilsoni1,N/A,N/A,https://api.github.com/repos/nikhilsoni1/final,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AF:6611:6CC9C8:E10159:65224118.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
623,Energy-Search-Tool,dtmlinh,N/A,N/A,https://api.github.com/repos/dtmlinh/Energy-Search-Tool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C135:87DB:2FE2BC3:61C835E:65224118.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
624,data_mining_fall2020,annemariedonohue,N/A,N/A,https://api.github.com/repos/annemariedonohue/data_mining_fall2020,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B3:2115:6EAC7B:E4D87C:65224119.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
625,CrashlyticsCrashReporting,Android-TPL-energy-consumption,N/A,N/A,https://api.github.com/repos/Android-TPL-energy-consumption/CrashlyticsCrashReporting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CA:178A:2C84AD2:5B239B9:65224119.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
626,Solar-Energy,A-M-H-F,N/A,N/A,https://api.github.com/repos/A-M-H-F/Solar-Energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15B:73C7:7006F9:E74CA9:6522411A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
627,Scraper-HADSA,rnakahara03,N/A,N/A,https://api.github.com/repos/rnakahara03/Scraper-HADSA,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E2:5A27:702E76:E7B790:6522411A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
628,Energy-Consumption-Prediction,Muhammad-Shoaib37,N/A,N/A,https://api.github.com/repos/Muhammad-Shoaib37/Energy-Consumption-Prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C129:092A:6F7FC9:E670FA:6522411B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
629,green-hydrogen-gh2,hieudtrung,N/A,N/A,https://api.github.com/repos/hieudtrung/green-hydrogen-gh2,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C167:64D2:712B4C:E99AFC:6522411C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
630,Battle-of-the-Buildings,designbright,N/A,N/A,https://api.github.com/repos/designbright/Battle-of-the-Buildings,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:3F63:2E6651E:5EEC73C:6522411C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
631,cca_compare,flynn-d,N/A,N/A,https://api.github.com/repos/flynn-d/cca_compare,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:607B:772FDF:F58AF9:6522411D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
632,energy-usage,OAITI,N/A,N/A,https://api.github.com/repos/OAITI/energy-usage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EA:629D:4519BE4:8C36BC6:65224051.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
633,Energy,thomasjdelaney,N/A,N/A,https://api.github.com/repos/thomasjdelaney/Energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15D:29CE:32E1B3E:67D6CB3:6522411E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
634,energy_proportionality,eduard2diaz,N/A,N/A,https://api.github.com/repos/eduard2diaz/energy_proportionality,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C101:178A:2C84F39:5B242D7:6522411E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
635,HouseHold_Energy-_consumption_Analytics,SamAlqarzi,N/A,N/A,https://api.github.com/repos/SamAlqarzi/HouseHold_Energy-_consumption_Analytics,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C165:73C7:700B08:E7551B:6522411F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
636,youless-logger,Somtom,N/A,N/A,https://api.github.com/repos/Somtom/youless-logger,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F2:0FAE:19670A7:34651A7:6522411F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
637,FirebaseMonitoring,Android-TPL-energy-consumption,N/A,N/A,https://api.github.com/repos/Android-TPL-energy-consumption/FirebaseMonitoring,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BD:178A:2C85104:5B24691:65224120.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
638,power-kiosk-capstone,shroffp05,N/A,N/A,https://api.github.com/repos/shroffp05/power-kiosk-capstone,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C141:6611:6CD0AC:E10FD1:65224121.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
639,Secure_VANET_HECC,PanosDgs,N/A,N/A,https://api.github.com/repos/PanosDgs/Secure_VANET_HECC,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D9:58D0:7598E5:F2086C:65224121.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
640,Measurer-AC,Prodibb28,N/A,N/A,https://api.github.com/repos/Prodibb28/Measurer-AC,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C150:4678:1ABE9B1:37116A5:65224122.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
641,Energy-Efficiency-Enhancement,Xer0bit,N/A,N/A,https://api.github.com/repos/Xer0bit/Energy-Efficiency-Enhancement,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:0E7B:1A1BC39:35C722E:65224123.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
642,physalia-saas,TQRG,N/A,N/A,https://api.github.com/repos/TQRG/physalia-saas,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12C:5AB9:2C3574E:5A903E9:65224123.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
643,smart_meter_api,sprckt,N/A,N/A,https://api.github.com/repos/sprckt/smart_meter_api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C166:092A:6F8653:E67ED2:65224124.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
644,Qnamics,romainfd,N/A,N/A,https://api.github.com/repos/romainfd/Qnamics,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F6:418F:2A54CA7:568C37E:65224124.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
645,RTE---Forecast-energy-consumption-in-French-areas,bchryzal,N/A,N/A,https://api.github.com/repos/bchryzal/RTE---Forecast-energy-consumption-in-French-areas,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C161:1299:9D081E:1446565:65224125.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
646,energeticon,fenpaws,N/A,N/A,https://api.github.com/repos/fenpaws/energeticon,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C125:7B3E:75FB89:F2EDE2:65224126.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
647,Energy-Consumption-Dashboard,sourabhthakur777,N/A,N/A,https://api.github.com/repos/sourabhthakur777/Energy-Consumption-Dashboard,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:607B:7667E4:F3EEBB:6522406D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
648,building-performance-in-future-climates,lofilippini,N/A,N/A,https://api.github.com/repos/lofilippini/building-performance-in-future-climates,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C199:4179:2DD44C4:5DC9C60:65224126.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
649,pjm-energy-load,ndcarlos,N/A,N/A,https://api.github.com/repos/ndcarlos/pjm-energy-load,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:87DB:2FE39D1:61CA09F:65224127.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
650,EMapp,Ciusss89,N/A,N/A,https://api.github.com/repos/Ciusss89/EMapp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:4D66:6B433A:DE014C:65224128.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
651,Eirgrid-Data,WM-Energy,N/A,N/A,https://api.github.com/repos/WM-Energy/Eirgrid-Data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FA:37E7:2CF8007:5C165EF:65224128.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
652,energy-consumption-forecasting-with-ML,divendor,N/A,N/A,https://api.github.com/repos/divendor/energy-consumption-forecasting-with-ML,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DD:1F34:1B8DB17:38A0FF5:65224129.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
653,type2,a-mma,N/A,N/A,https://api.github.com/repos/a-mma/type2,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C109:8AF9:6F0DC9:E5998C:65224129.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
654,Umbrall,R2D2Power,N/A,N/A,https://api.github.com/repos/R2D2Power/Umbrall,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FE:4D66:6B4630:DE0773:6522412A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
655,Arduino-volt-meter,1999AZZAR,N/A,N/A,https://api.github.com/repos/1999AZZAR/Arduino-volt-meter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18A:7AEF:2DBCB64:5D86B5C:6522412A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
656,Smart-Light-Client-Solution,ekaterinadvolkova,N/A,N/A,https://api.github.com/repos/ekaterinadvolkova/Smart-Light-Client-Solution,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D2:1E3B:2FB56AD:617A831:6522412B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
657,Machine-Learning---Home-Appliances-Energy-Prediction,visheshgupta-BA,N/A,N/A,https://api.github.com/repos/visheshgupta-BA/Machine-Learning---Home-Appliances-Energy-Prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C150:4678:1ABF30B:3712A1C:6522412C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
658,Energy-Production-Consumption-Analysis,Muhammad-Shoaib37,N/A,N/A,https://api.github.com/repos/Muhammad-Shoaib37/Energy-Production-Consumption-Analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C127:7646:2943BE2:548A4EC:65224042.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
659,Energy-Consumption-XGBoost-TimeSeries,idastani7,N/A,N/A,https://api.github.com/repos/idastani7/Energy-Consumption-XGBoost-TimeSeries,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C165:73C7:70173B:E76E84:6522412C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
660,Daily-Power-Generation-India,Ankit152,N/A,N/A,https://api.github.com/repos/Ankit152/Daily-Power-Generation-India,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C163:505E:74F763:F117DA:6522412D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
661,CART434,stockhuman,N/A,N/A,https://api.github.com/repos/stockhuman/CART434,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D0:3BF5:72A7FC:EC76C5:6522412D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
662,us-energy-consumption,ymericson,N/A,N/A,https://api.github.com/repos/ymericson/us-energy-consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B6:1E3B:2FB5A71:617AFE9:6522412E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
663,wids-datathon-2022,nicovandenhooff,N/A,N/A,https://api.github.com/repos/nicovandenhooff/wids-datathon-2022,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16A:58D0:75A891:F2289F:6522412F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
664,Energy-Resources,talhatallat,N/A,N/A,https://api.github.com/repos/talhatallat/Energy-Resources,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D7:7AEF:2DBD1FD:5D878E2:6522412F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
665,evablazing-website,Gitmoses7890,N/A,N/A,https://api.github.com/repos/Gitmoses7890/evablazing-website,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:87DB:2FE472D:61CBBD2:65224130.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
666,Analyse_predictive_batiment_energetique_CO2,DSAGRO3F,N/A,N/A,https://api.github.com/repos/DSAGRO3F/Analyse_predictive_batiment_energetique_CO2,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EF:7B5B:71AA42:EA5E60:65224131.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
667,smartmeter-p1-api,skoander,N/A,N/A,https://api.github.com/repos/skoander/smartmeter-p1-api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10D:7B5B:71AAF8:EA5FCB:65224131.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
668,Resourcify,JocelynVelarde,N/A,N/A,https://api.github.com/repos/JocelynVelarde/Resourcify,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10E:1E3B:2FB5FC9:617BAE5:65224132.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
669,electricity,dalanmiller,N/A,N/A,https://api.github.com/repos/dalanmiller/electricity,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10A:178A:2C8671D:5B2741F:65224133.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
670,utility_app,anthonyho,N/A,N/A,https://api.github.com/repos/anthonyho/utility_app,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11A:58D0:75AE7D:F234B8:65224133.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
671,The-Price-of-Power,mariamragab,N/A,N/A,https://api.github.com/repos/mariamragab/The-Price-of-Power,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C131:638B:2754416:50A501B:6522405C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
672,Nightly_sat_img,Vilmar1,N/A,N/A,https://api.github.com/repos/Vilmar1/Nightly_sat_img,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11C:87DB:2FE4CEB:61CC7A4:65224134.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
673,tep-usage-analysis,astrochun,N/A,N/A,https://api.github.com/repos/astrochun/tep-usage-analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F1:5F41:6E3B6F:E3E39F:65224134.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
674,DS104.N11-Parallel-and-Distributed-Computing,PhamThe-KHDL,N/A,N/A,https://api.github.com/repos/PhamThe-KHDL/DS104.N11-Parallel-and-Distributed-Computing,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F2:0FAE:1968889:3468316:65224135.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
675,Power_consumption,dmkn96,N/A,N/A,https://api.github.com/repos/dmkn96/Power_consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FC:0FAE:1968937:3468476:65224136.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
676,laravel-tibber,arnebr,N/A,N/A,https://api.github.com/repos/arnebr/laravel-tibber,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13E:3AA3:2D9D1DC:5D5F0E7:65224136.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
677,Energy-Monitor,andy-kohne,N/A,N/A,https://api.github.com/repos/andy-kohne/Energy-Monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C148:0E7B:1A1D078:35C9C12:65224137.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
678,node-green-button-subscriber,cityssm,N/A,N/A,https://api.github.com/repos/cityssm/node-green-button-subscriber,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C113:73C7:702309:E786ED:65224137.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
679,cse216,DrDareDevel,N/A,N/A,https://api.github.com/repos/DrDareDevel/cse216,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16D:58D0:75B406:F2401D:65224138.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
680,Ferraris-Counter,uschoenh,N/A,N/A,https://api.github.com/repos/uschoenh/Ferraris-Counter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11B:1299:9D1C7C:1448F86:65224139.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
681,CA_Energy_Consumption,zach-brown-18,N/A,N/A,https://api.github.com/repos/zach-brown-18/CA_Energy_Consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F4:5AB9:2C370AB:5A93843:65224139.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
682,SQL-Data-Expoloration-Projects,aathira-p,N/A,N/A,https://api.github.com/repos/aathira-p/SQL-Data-Expoloration-Projects,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C131:418F:2A566E5:568F968:6522413A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
683,EnergyConsumptionForecast,gonzalo-cordova-pou,N/A,N/A,https://api.github.com/repos/gonzalo-cordova-pou/EnergyConsumptionForecast,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E1:46E9:7410BB:EF5F4A:6522413B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
684,netsuspend,leighgarbs,N/A,N/A,https://api.github.com/repos/leighgarbs/netsuspend,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C127:784E:74A70F:F0D266:6522413B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
685,energyuse,evhart,N/A,N/A,https://api.github.com/repos/evhart/energyuse,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C187:984A:7479E8:F03C2A:6522413C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
686,kaggle-ASHRAE-Great-Energy-Comp,VikasSingh-DS,N/A,N/A,https://api.github.com/repos/VikasSingh-DS/kaggle-ASHRAE-Great-Energy-Comp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19C:984A:747A77:F03D53:6522413C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
687,ukgovenergy,cacocodix,N/A,N/A,https://api.github.com/repos/cacocodix/ukgovenergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:3F63:2E68A79:5EF1412:6522413D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
688,jvm-comparaison,chakib-belgaid,N/A,N/A,https://api.github.com/repos/chakib-belgaid/jvm-comparaison,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10A:178A:2C873B8:5B28E1D:6522413D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
689,WIDS-2022,Joel-Dandin,N/A,N/A,https://api.github.com/repos/Joel-Dandin/WIDS-2022,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C193:2CBC:766F12:F412E4:6522413E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
690,EV-route-energy-consumption-prediction,SimpleBro,N/A,N/A,https://api.github.com/repos/SimpleBro/EV-route-energy-consumption-prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14A:1364:74CA3A:F0E8E4:6522413F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
691,EnergyMonitor,gundeepsaini,N/A,N/A,https://api.github.com/repos/gundeepsaini/EnergyMonitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C155:7B5B:71B82F:EA7B29:6522413F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
692,rwchcd,f00b4r0,N/A,N/A,https://api.github.com/repos/f00b4r0/rwchcd,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C118:0C72:7107A8:E97B92:65224140.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
693,OpenEPT,turkmanovic,N/A,N/A,https://api.github.com/repos/turkmanovic/OpenEPT,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C157:3BF5:72BAB8:EC9D99:65224140.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
694,Software_Energy_Profilers,stefanos1316,N/A,N/A,https://api.github.com/repos/stefanos1316/Software_Energy_Profilers,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F7:7AEF:2DBE825:5D8A63F:65224141.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
695,ATP_for_peptide,abhijeetsingh1704,N/A,N/A,https://api.github.com/repos/abhijeetsingh1704/ATP_for_peptide,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B8:29CE:32E4A65:67DCD94:65224142.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
696,power-meter,tonytw1,N/A,N/A,https://api.github.com/repos/tonytw1/power-meter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CB:41B1:6F98B8:E6E454:65224142.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
697,octopus-consumption-exporter,kevalpatel2106,N/A,N/A,https://api.github.com/repos/kevalpatel2106/octopus-consumption-exporter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C114:7AEF:2DBE9F0:5D8AA0A:65224143.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
698,predict_electric_consumption,IlyesBB,N/A,N/A,https://api.github.com/repos/IlyesBB/predict_electric_consumption,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AC:3819:1AD9C1C:3736A65:65224143.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
699,Site-Energy-Intensity-Prediction-Project,avikumart,N/A,N/A,https://api.github.com/repos/avikumart/Site-Energy-Intensity-Prediction-Project,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:58D0:75C1C3:F25C52:65224144.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
700,Big-Data-for-Energy-Management,Patcharanat,N/A,N/A,https://api.github.com/repos/Patcharanat/Big-Data-for-Energy-Management,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CB:41B1:6F9B2F:E6E96E:65224145.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
701,smartmeter-p1-dongle,skoander,N/A,N/A,https://api.github.com/repos/skoander/smartmeter-p1-dongle,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18A:7AEF:2DBEC5F:5D8AF05:65224145.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
702,BL-Energy-Consumption-Analysis,Joel-Schaltenbrand,N/A,N/A,https://api.github.com/repos/Joel-Schaltenbrand/BL-Energy-Consumption-Analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:3BF5:72BFBD:ECA81A:65224146.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-consumption,"[N, /, A]",00000
703,pvlib-python,pvlib,N/A,N/A,https://api.github.com/repos/pvlib/pvlib-python,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DD:1F34:1B8FB6E:38A52C7:65224146.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
704,huawei_solar,wlcrs,N/A,N/A,https://api.github.com/repos/wlcrs/huawei_solar,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B5:0E7B:1A1DE62:35CB8F2:65224147.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
705,tesla-style-solar-power-card,reptilex,N/A,N/A,https://api.github.com/repos/reptilex/tesla-style-solar-power-card,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C0:2319:684851:D7F553:65224148.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
706,solariot,meltaxa,N/A,N/A,https://api.github.com/repos/meltaxa/solariot,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D3:178A:2C87DDA:5B2A331:65224148.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
707,elpv-dataset,zae-bayern,N/A,N/A,https://api.github.com/repos/zae-bayern/elpv-dataset,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C104:2319:684933:D7F726:65224149.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
708,ha-solcast-solar,oziee,N/A,N/A,https://api.github.com/repos/oziee/ha-solcast-solar,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E3:2CBC:767A82:F42AA0:6522414A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
709,deye-firmware,dasrecht,N/A,N/A,https://api.github.com/repos/dasrecht/deye-firmware,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18F:4678:1AC10E5:37167F2:6522414A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
710,solarthing,wildmountainfarms,N/A,N/A,https://api.github.com/repos/wildmountainfarms/solarthing,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D5:4E78:6E8037:E4636C:6522414B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
711,huawei-sun2000-API-CLI,BlazejosP,N/A,N/A,https://api.github.com/repos/BlazejosP/huawei-sun2000-API-CLI,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C125:7B3E:7627DD:F3493E:6522414B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
712,GoSungrow,MickMake,N/A,N/A,https://api.github.com/repos/MickMake/GoSungrow,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:5AB9:2C382EF:5A95DFD:6522414C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
713,solarshed,corbinbs,N/A,N/A,https://api.github.com/repos/corbinbs/solarshed,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C189:1F34:1B90167:38A5F33:6522414D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
714,pvanalytics,pvlib,N/A,N/A,https://api.github.com/repos/pvlib/pvanalytics,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C114:7AEF:2DBF455:5D8BF6B:6522414D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
715,pvfactors,SunPower,N/A,N/A,https://api.github.com/repos/SunPower/pvfactors,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2E267A:5F9845:6522414E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
716,TeslaSolarCharger,pkuehnel,N/A,N/A,https://api.github.com/repos/pkuehnel/TeslaSolarCharger,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EA:500E:2A5DEE1:56F3D5B:6522414F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
717,homeassistant-alphaESS,CharlesGillanders,N/A,N/A,https://api.github.com/repos/CharlesGillanders/homeassistant-alphaESS,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C104:4771:2AB628:58C699:6522414F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
718,Essential-Solar-Energy-and-Storage-Software-Resources,aladdine,N/A,N/A,https://api.github.com/repos/aladdine/Essential-Solar-Energy-and-Storage-Software-Resources,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12A:3119:2BF32A8:5A136A9:65224150.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
719,awesome-energy-forecasting,cuge1995,N/A,N/A,https://api.github.com/repos/cuge1995/awesome-energy-forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:6B96:2868B4B:5328629:65224151.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
720,solxpect,woheller69,N/A,N/A,https://api.github.com/repos/woheller69/solxpect,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10F:505E:2D1366:5D6EA2:65224151.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
721,CS229-machine-learning-solar-energy-predictions,adelekuzmiakova,N/A,N/A,https://api.github.com/repos/adelekuzmiakova/CS229-machine-learning-solar-energy-predictions,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AD:17C0:298616:5692B3:65224152.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
722,solarpy,aqreed,N/A,N/A,https://api.github.com/repos/aqreed/solarpy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C171:3493:2721D47:508EA70:65224153.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
723,openpvtools,openpvtools,N/A,N/A,https://api.github.com/repos/openpvtools/openpvtools,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C164:7E09:25FBBFD:4E46740:65224153.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
724,solar-panel-segmentation,gabrieltseng,N/A,N/A,https://api.github.com/repos/gabrieltseng/solar-panel-segmentation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BE:68AA:2E950A8:5F626F2:65224154.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
725,SkyeTracker,ClassicDIY,N/A,N/A,https://api.github.com/repos/ClassicDIY/SkyeTracker,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15E:38A4:2BC8B25:59D8755:65224154.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
726,marketplace,Enapter,N/A,N/A,https://api.github.com/repos/Enapter/marketplace,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C123:4776:2C3041:5BBE35:65224155.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
727,123solar,jeanmarc77,N/A,N/A,https://api.github.com/repos/jeanmarc77/123solar,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F2:7A65:29AC53:56D581:65224156.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
728,Forecasting-Solar-Energy,CynthiaKoopman,N/A,N/A,https://api.github.com/repos/CynthiaKoopman/Forecasting-Solar-Energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13C:7E09:25FBEEF:4E46D72:65224156.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
729,Photovoltaic_Fault_Detector,RentadroneCL,N/A,N/A,https://api.github.com/repos/RentadroneCL/Photovoltaic_Fault_Detector,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14A:17C0:2989C1:569A68:65224157.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
730,EpEverSolarMonitor,glitterkitty,N/A,N/A,https://api.github.com/repos/glitterkitty/EpEverSolarMonitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B0:7E09:25FC01C:4E46FD1:65224158.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
731,epevermodbus,rosswarren,N/A,N/A,https://api.github.com/repos/rosswarren/epevermodbus,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17E:1D49:2C47A20:5AC443B:65224158.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
732,PV_ICE,NREL,N/A,N/A,https://api.github.com/repos/NREL/PV_ICE,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C162:7890:2A6CD8:58539B:65224159.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
733,Esp-HuaweiR4850-Controller,KlausLi,N/A,N/A,https://api.github.com/repos/KlausLi/Esp-HuaweiR4850-Controller,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15F:1E37:2A775A:58552B:6522415A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
734,Enphase-API,Matthew1471,N/A,N/A,https://api.github.com/repos/Matthew1471/Enphase-API,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C117:406C:2B438C:59F26A:6522415A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
735,SolOptXMR,mj-xmr,N/A,N/A,https://api.github.com/repos/mj-xmr/SolOptXMR,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F3:6584:284439B:52CC228:6522415B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
736,SolarWS,BeardedTinker,N/A,N/A,https://api.github.com/repos/BeardedTinker/SolarWS,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:505E:2D1D4C:5D8348:6522415C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
737,LoRa-sensor-node-device,emanuel36,N/A,N/A,https://api.github.com/repos/emanuel36/LoRa-sensor-node-device,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D8:458F:2C4A7FB:5AD44F2:6522415C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
738,sup3r,NREL,N/A,N/A,https://api.github.com/repos/NREL/sup3r,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CE:797D:2879EB:546A58:6522415D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
739,mec,ashleypittman,N/A,N/A,https://api.github.com/repos/ashleypittman/mec,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C133:11F8:2CD5CA:5D1E3C:6522415E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
740,SolarData,dazhiyang,N/A,N/A,https://api.github.com/repos/dazhiyang/SolarData,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C154:38A4:2BC94C2:59D9B6A:6522415E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
741,Blue-Skies,COS301-SE-2023,N/A,N/A,https://api.github.com/repos/COS301-SE-2023/Blue-Skies,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C171:3493:27227A4:508FFFE:6522415F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
742,ve.direct-python,jessedc,N/A,N/A,https://api.github.com/repos/jessedc/ve.direct-python,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EC:17C0:298F33:56A5DF:65224160.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
743,capstone_repo,samchaaa,N/A,N/A,https://api.github.com/repos/samchaaa/capstone_repo,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BE:68AA:2E95BAD:5F63D59:65224160.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
744,AA222FinalProject,kevinrussellmoy,N/A,N/A,https://api.github.com/repos/kevinrussellmoy/AA222FinalProject,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19C:2EE5:2865908:531BE15:65224161.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
745,microgrid-dapp,yurigabrich,N/A,N/A,https://api.github.com/repos/yurigabrich/microgrid-dapp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11B:4776:2C3AA0:5BD3E8:65224162.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
746,pvfree,BreakingBytes,N/A,N/A,https://api.github.com/repos/BreakingBytes/pvfree,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C136:4771:2AC500:58E584:65224162.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
747,Irradiance-RNN,antoninodimaggio,N/A,N/A,https://api.github.com/repos/antoninodimaggio/Irradiance-RNN,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B9:0BEC:2A7751:5871B5:65224163.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
748,bwlr1e,teapotlaboratories,N/A,N/A,https://api.github.com/repos/teapotlaboratories/bwlr1e,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F2:7A65:29B862:56EEBF:65224163.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
749,homeassistant-apsystems,bgbraga,N/A,N/A,https://api.github.com/repos/bgbraga/homeassistant-apsystems,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15D:17C0:299207:56AC07:65224164.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
750,solar-report,hamikm,N/A,N/A,https://api.github.com/repos/hamikm/solar-report,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AD:17C0:299279:56ACEC:65224165.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
751,arska-node,Netgalleria,N/A,N/A,https://api.github.com/repos/Netgalleria/arska-node,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18A:4771:2AC75F:58EA87:65224165.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
752,inverter-connect,jedie,N/A,N/A,https://api.github.com/repos/jedie/inverter-connect,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AE:1CC6:2A40582:56B85C5:65224166.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
753,qalphacloud,kbroulik,N/A,N/A,https://api.github.com/repos/kbroulik/qalphacloud,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C184:1560:28E77D3:540BF08:65224166.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
754,building-energy-storage-simulation,tobirohrer,N/A,N/A,https://api.github.com/repos/tobirohrer/building-energy-storage-simulation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CD:6584:2844D4A:52CD667:65224167.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
755,Solis-Modbus-Auto-Charging-using-Solax,jevburchell,N/A,N/A,https://api.github.com/repos/jevburchell/Solis-Modbus-Auto-Charging-using-Solax,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C8:7A65:29BCE6:56F815:65224168.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
756,Solar-Power-Forecasting,Grv-Singh,N/A,N/A,https://api.github.com/repos/Grv-Singh/Solar-Power-Forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FA:2EE5:2865F84:531CB98:65224168.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
757,ioBroker.solax,simatec,N/A,N/A,https://api.github.com/repos/simatec/ioBroker.solax,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C146:4771:2ACAB3:58F173:65224169.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
758,howto-pandas,Solcast,N/A,N/A,https://api.github.com/repos/Solcast/howto-pandas,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:38A4:2BCA208:59DB6AD:6522416A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
759,Ve.Direct.InfluxDB.Collector,DocBrown101,N/A,N/A,https://api.github.com/repos/DocBrown101/Ve.Direct.InfluxDB.Collector,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C182:0208:2DF5661:5E218A6:6522416A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
760,PylonToMQTT,ClassicDIY,N/A,N/A,https://api.github.com/repos/ClassicDIY/PylonToMQTT,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C168:9938:29BF31F:55B1188:6522416B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
761,suntracker2-r3,fm4dd,N/A,N/A,https://api.github.com/repos/fm4dd/suntracker2-r3,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13B:17C0:2997CC:56B816:6522416B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
762,SLALOM,sidihamady,N/A,N/A,https://api.github.com/repos/sidihamady/SLALOM,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18C:840D:2943E03:54D3A91:6522416C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
763,ESP32-WeatherStation,SeBassTian23,N/A,N/A,https://api.github.com/repos/SeBassTian23/ESP32-WeatherStation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C114:3B38:2E4052:5FCE1F:6522416D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
764,SolarFinder,cyber-physical-systems,N/A,N/A,https://api.github.com/repos/cyber-physical-systems/SolarFinder,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11C:24F2:29AA11A:55884DF:6522416D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
765,ArduinoEnergyLogger,kerpz,N/A,N/A,https://api.github.com/repos/kerpz/ArduinoEnergyLogger,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C131:4776:2C4782:5BEE9F:6522416E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
766,Photovoltaic-Model,sidihamady,N/A,N/A,https://api.github.com/repos/sidihamady/Photovoltaic-Model,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B2:5A86:2BAD9C7:599A484:6522416E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
767,mqtt-energi,PeterTM,N/A,N/A,https://api.github.com/repos/PeterTM/mqtt-energi,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DB:5A86:2BADAA7:599A630:6522416F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
768,SRNE-Solar-Charge-Controller-Monitor,cole8888,N/A,N/A,https://api.github.com/repos/cole8888/SRNE-Solar-Charge-Controller-Monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DE:3B38:2E436B:5FD48C:65224170.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
769,weewx-GTS,roe-dl,N/A,N/A,https://api.github.com/repos/roe-dl/weewx-GTS,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17E:1D49:2C496F4:5AC7F59:65224170.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
770,influxDB-grafana-gke,ThinkBigEg,N/A,N/A,https://api.github.com/repos/ThinkBigEg/influxDB-grafana-gke,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CB:2772:28D8C95:54069DD:65224171.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
771,Shockley-Queisser,sidihamady,N/A,N/A,https://api.github.com/repos/sidihamady/Shockley-Queisser,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FD:797D:288C6C:5490B3:65224171.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
772,PP-MTB,Energinet-AIG,N/A,N/A,https://api.github.com/repos/Energinet-AIG/PP-MTB,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2BADE62:599ADF4:65224172.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
773,conext-api,shorawitz,N/A,N/A,https://api.github.com/repos/shorawitz/conext-api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C130:3B38:2E4629:5FDA3A:65224173.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
774,Smart-Irrigation-System,Krish2s,N/A,N/A,https://api.github.com/repos/Krish2s/Smart-Irrigation-System,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A0:53F5:280CA3C:52591FB:65224173.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
775,emonDC,danbates2,N/A,N/A,https://api.github.com/repos/danbates2/emonDC,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13B:17C0:299F7F:56C808:65224174.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
776,solar,bbopt,N/A,N/A,https://api.github.com/repos/bbopt/solar,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C123:4776:2C4E29:5BFC51:65224175.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
777,ladybug-web,ladybug-tools,N/A,N/A,https://api.github.com/repos/ladybug-tools/ladybug-web,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17E:1D49:2C49CE1:5AC8BB4:65224175.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
778,teacher.js,freder,N/A,N/A,https://api.github.com/repos/freder/teacher.js,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CF:6B96:286B369:532D91C:65224176.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
779,Predicting-Photovoltaic-Electricity-Generation-Based-on-Weather-Data,redemptionwxy,N/A,N/A,https://api.github.com/repos/redemptionwxy/Predicting-Photovoltaic-Electricity-Generation-Based-on-Weather-Data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C174:6B96:286B420:532DA8F:65224176.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
780,solarstations,AssessingSolar,N/A,N/A,https://api.github.com/repos/AssessingSolar/solarstations,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:2772:28D934E:54077CE:65224177.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
781,mate3,adamcharnock,N/A,N/A,https://api.github.com/repos/adamcharnock/mate3,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12C:7A65:29CE33:571BC9:65224178.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
782,venus-os_dbus-enphase-envoy,mr-manuel,N/A,N/A,https://api.github.com/repos/mr-manuel/venus-os_dbus-enphase-envoy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12E:47EE:2B98C81:5970761:65224178.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
783,solplan-rust,RyanMeulenkamp,N/A,N/A,https://api.github.com/repos/RyanMeulenkamp/solplan-rust,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C101:0208:2DF67EA:5E23C7F:65224179.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
784,solar-power-monitor,kylemanna,N/A,N/A,https://api.github.com/repos/kylemanna/solar-power-monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14D:1CC6:2A41AEC:56BB1DF:6522417A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
785,wattpilot,lostcontrol,N/A,N/A,https://api.github.com/repos/lostcontrol/wattpilot,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CB:2772:28D96B0:5407EC0:6522417A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
786,kaco,KoljaWindeler,N/A,N/A,https://api.github.com/repos/KoljaWindeler/kaco,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C102:5B68:2AF71D:598405:6522417B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
787,Solar-Sunsynk,MorneSaunders360,N/A,N/A,https://api.github.com/repos/MorneSaunders360/Solar-Sunsynk,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F2:7A65:29D1B2:5722FC:6522417B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
788,pymagnum,CharlesGodwin,N/A,N/A,https://api.github.com/repos/CharlesGodwin/pymagnum,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D5:22D5:2F49F2F:60D5ABF:6522417C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
789,omnikdatalogger,jbouwh,N/A,N/A,https://api.github.com/repos/jbouwh/omnikdatalogger,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F0:9938:29C06A4:55B39AD:6522417D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
790,prosumerpolicy,0-k,N/A,N/A,https://api.github.com/repos/0-k/prosumerpolicy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F6:797D:289676:54A5A6:6522417D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
791,hass-atonstorage,wilds,N/A,N/A,https://api.github.com/repos/wilds/hass-atonstorage,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C154:38A4:2BCBDAB:59DEF15:6522417E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
792,solaredge-webscrape,dragoshenron,N/A,N/A,https://api.github.com/repos/dragoshenron/solaredge-webscrape,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C182:0208:2DF6D81:5E24829:6522417E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
793,TP4056-Power-Path-PCB,DoImant,N/A,N/A,https://api.github.com/repos/DoImant/TP4056-Power-Path-PCB,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12C:7A65:29D4FB:5729C3:6522417F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
794,homeassistant-sermatec-inverter,sermatec-opensource,N/A,N/A,https://api.github.com/repos/sermatec-opensource/homeassistant-sermatec-inverter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F0:9938:29C0987:55B3F85:65224180.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
795,433-Weather-Station-Transmitter,JakubJaszczur,N/A,N/A,https://api.github.com/repos/JakubJaszczur/433-Weather-Station-Transmitter,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2BAEE35:599CE9A:65224180.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
796,GHI-Assessment-using-SVR-and-BRR,shahriar-rahman,N/A,N/A,https://api.github.com/repos/shahriar-rahman/GHI-Assessment-using-SVR-and-BRR,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12D:2E63:2A6A9E:584F90:65224181.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
797,ginlong-influx,amfasis,N/A,N/A,https://api.github.com/repos/amfasis/ginlong-influx,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2E5324:5FF531:65224181.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
798,Prediction-of-Solar-Radiation,shahriar-rahman,N/A,N/A,https://api.github.com/repos/shahriar-rahman/Prediction-of-Solar-Radiation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:4771:2ADFCB:591D66:65224182.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
799,3D-Solar-Tracker-IoT-Arduino,nicolasfguillaume,N/A,N/A,https://api.github.com/repos/nicolasfguillaume/3D-Solar-Tracker-IoT-Arduino,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10C:4776:2C5A46:5C1569:65224183.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
800,boilr,PeterBrain,N/A,N/A,https://api.github.com/repos/PeterBrain/boilr,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F3:6584:28466D7:52D0B57:65224183.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
801,Solar-Energy-Calculator,JaviSandoval94,N/A,N/A,https://api.github.com/repos/JaviSandoval94/Solar-Energy-Calculator,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10C:4776:2ADD94:59003D:65223FF4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
802,databox24,awysocki,N/A,https://github.com/awysocki/databox24,https://api.github.com/repos/awysocki/databox24,SG series of Micro Inverters from 250 all the up to 1400,"DATABOX24 - Polling SG700MD
=========

databox24 is a simple 'c' application to read a communication port that is attached to
the newenergytek.com DATA BOX that is connected via USB port to your linux machine
it will communicate to the SG Series of micro inverters. 
200,250,300,350,400,450,500,600,700,1000,1200 and 1400

I have only tested on model SG700MD - http://www.newenergytek.com/index.php/content-48

  - requires [databox24g] datacollector http://www.newenergytek.com/index.php/content-57
  - application run as root

This is a very simple server gateway app to poll and send the data to a web server to be processed. 
 


Device
--
[DATA BOX 24G] - New Engery Tek (no version number or model on the unit )

[note:] I did receive a response from the company, and they gave me a quick layout of the data.  I have updated
my code to reflect their definition of the data.

CMD - Get Status (15 bytes total)
```
	0x43		- Header (1 byte)
	0xC0		- CMD - 0xC0=Device status (1 byte)	
	0x1122 		- Databox ID (2 bytes)
	0x0000		- Area ID (2 bytes) What is passed in is returned
	0x11223344	- Inverter ID (4 bytes)
	0x11223344	- Value Parameter (4 byte) 0x00=Status, 0x01=Turn ON, 0x02=Turn OFF, 0x03=Reboot
	0xCD		- Check Digit
```

RCV - Receive Status (27 bytes total (15 CMD header + 12 bytes Status))
```
	0x43		- Header (1 byte)
	0xC0		- CMD - 0xC0=Device status (1 byte)
	0x1122 		- Databox ID (2 bytes)
	0x0000		- Area ID (2 bytes) Whatever is passed in is returned back
	0x11223344	- Inverter ID (4 bytes)
	0x11223344	- Total Power Generations (4 Byte Float) 
	0xCD		- Check Digit (1 byte)
	0x1122		- DC Voltage divide by 100 for 2 places after decimal point (2 bytes)
	0x1122		- DC Current divide by 100 for 2 places after decimal point (2 bytes)
	0x1122		- AC Voltage divide by 100 for 2 places after decimal point (2 bytes)
	0x1122		- AC Current divide by 100 for 2 places after decimal point (2 bytes)
	0x0000		- Reserved (2 bytes)
	0x00		- xx UNKNOWN (1 byte)
	0x11		- Temperature C° (1 byte)
```


Computer
--
I tested and run this application on an Intel NUC machine.

STEP #1 - Check and find the port that your linux machine assigned when plugging in the DATABOX wireless modem
-
run ->  lsusb
Look for bus and device

Bus 001 Device 012: ID 067b:2303 Prolific Technology, Inc. PL2303 Serial Port


also run -> sudo dmesg

To list the port number it assigns

 stty -F /dev/ttyUSB0 9600 cs8 -cstopb -parenb   

 
STEP #2 - Compile application 
-
    
    
Pull the files to a directory and run make to compile the application.  

    make

Also supported is a clean make command

	make clean


STEP #4 - Install/RUN
-

There is no install script, so I just run it where its compiled.
You will want to edit and modify the ** databox24.ini ** file to match your setup

	[DataBox24]
	  Debug=Yes
	  DebugLog=./databox24.log
	  USBDev=/dev/ttyUSB0
	  Inverters=41000001,41000002,41000003
	  PollTimeMin=1

	  PostWrite=Yes
	  PostHost=https://yourwebserver/databox24.php
	  
	  CSVWrite=No
	  CSVFile=./databox24.csv



License
-

Open Software License v. 3.0 ([OSL-3.0])


  [OSL-3.0]:http://opensource.org/licenses/OSL-3.0
  

    
",6,6,3,0,solar-energy,"[inverter, microinverter, solar, solar-energy]",00000
803,twoaxistracking,pvlib,pvlib,https://github.com/pvlib/twoaxistracking,https://api.github.com/repos/pvlib/twoaxistracking,"twoaxistracking is a python package for simulating two-axis tracking solar collectors, particularly self-shading.","# Open source code for calculating self-shading of two-axis tracking solar collectors
twoaxistracking is a python package for simulating two-axis tracking solar collectors, particularly self-shading.

## Documentation
The documentation can be found at [readthedocs](https://twoaxistracking.readthedocs.io/).

## Installation and dependencies
The package can be installed using pip:

    pip install twoaxistracking

## Citing
If you use the package in published work, please cite:
> Adam R. Jensen, Ioannis Sifnaios, and Kevin Anderson. ""twoaxistracking – a python package for simulating
> self-shading of two-axis tracking solar collectors."" MethodsX, 9, 101876, (2022).
> [https://doi.org/10.1016/j.mex.2022.101876](https://doi.org/10.1016/j.mex.2022.101876)

and

> Adam R. Jensen, Ioannis Sifnaios, Simon Furbo, and Janne Dragsted. ""Self-shading of two-axis
> tracking solar collectors: Impact of field layout, latitude, and aperture shape."" Solar
> Energy, 236, 215–224, (2022). [https://doi.org/10.1016/j.solener.2022.02.023](https://doi.org/10.1016/j.solener.2022.02.023)

## Contributing
Contributions to the repository, e.g., bug fixes and improvements to speed up the code are more than welcome.

## License
[BSD 3-clause](LICENSE).
",6,6,4,1,solar-energy,"[photovoltaics, python, renewable-energy, solar-energy]",00000
804,us-solar-d3,jtanwk,N/A,https://github.com/jtanwk/us-solar-d3,https://api.github.com/repos/jtanwk/us-solar-d3,A visual exploration of residential solar panel adoption in the US. Built with D3.js.,"# us-solar-d3
An ongoing visual exploration of residential solar panel adoption in the US. Interactive version of [this static visualization project](https://jtanwk.github.io/us-solar/).

See the project [here](https://jtanwk.github.io/us-solar-d3/).

**New (May 2019):** [Watch me and other UChicago students discuss our projects with the Chicago Data Viz Community!](https://www.youtube.com/watch?v=IHGx-20vgh0&feature=youtu.be)

## How to use
If you just want to look at the visualizations, go [here](https://jtanwk.github.io/us-solar-d3/) and scroll away.

If you want to work on this yourself:
1. Clone or fork the project, then download it.
2. From the root directory, run `npm start`.
That's it! 
",6,6,2,0,solar-energy,"[d3js, dataviz, scrollytelling, solar-energy]",00000
805,solaredge_monitor,GitHub4Eddy,N/A,https://github.com/GitHub4Eddy/solaredge_monitor,https://api.github.com/repos/GitHub4Eddy/solaredge_monitor,"This QuickApp monitors your SolarEdge managed Solar Panels. The QuickApp has (child) devices for current Power, solar Power, lastday, lastmonth, lastyear and lifetime energy. ","# SolarEdge_Monitor
This QuickApp monitors your SolarEdge managed Solar Panels
The QuickApp has (child) devices for Solar Power, Lastday Data, Lastmonth Data, Lastyear Data and Lifetime Data
The Solar Production values are only requested from the SolarEdge Cloud between sunrise and sunset
The QuickApp also shows the Environmental Benefits in the labels for CO2, SO2, NOX, Trees planted and Lightbulbs
The QuickApp also shows the SolarEdge Installation details in the labels
The Environmental Benefits are updated once a day after 12:00 hour
The settings for Peak Power and Currency are retrieved from the inverter 
The rateType interface of Child device Last Day is automatically set to ""production"" and values from this child devices can be used for the Energy Panel 
The readings for lastyear and lifetime energy are automatically set to the right Wh unit (Wh, kWh, MWh or GWh) 

See API documentation on https://www.solaredge.com/sites/default/files/se_monitoring_api.pdf 


Changes version 3.0 (17th February 2023)
- Added translation for EN, FR and NL


Changes version 2.1 (3rd April 2022)
- Solved bug with child device lastDay showing incorrect values in energy panel

Changes version 2.0 (26th Match 2022)
- All *meter device types can now be shown in the Yubii app so: 
   - Changed main device SolarEdge Monitor to device type com.fibaro.powerMeter
   - Changed child device solarPower to device type com.fibaro.powerMeter
   - Changed child devices lastDayData, lastMonthData, lastYearData and lifeTimeData to com.fibaro.energyMeter
   - Configured storeEnergyData property of lastDayData, lastMonthData, lastYearData and lifeTimeData to com.fibaro.energyMeter to false
   - Configured storeEnergyData property of main device SolarEdge Monitor to true
- Added ""pause"" mode during sunset and sunrise. During this time NO requests will be send to the Cloud (because there is no solar production during that time). This saves on the ratelimit of 300 requests a day. 
- Added Environmental Benefits to the labels, with an update once a day
- Added new QuickApp Variable systemUnits Metrics (kg) or Imperial (lb) for Environmental Benefits
- Added SolarEdge Installation details to the labels
- Added extra timeout and debug logging in case of a bad response 
- Optimized some code

Changes version 1.5 (5th March 2022)
- Improved the handling of decreasing values

Changes version 1.4 (22nd February 2022)
- Changed rounding of all Wh values to one number after the decimal point, to prevent issues with decreasing values from SolarEdge Cloud
- Added extra check for decreasing values from SolarEdge Cloud lastDayData
- Changed handling bad responses from SolarEdge Cloud
- Removed QuickApp variable icon, icon can be selected in the user interface with the new firmware

Changes version 1.3 (8th January 2022)
- Extra check on return value API for ""Too many requests""

Changes version 1.2 (26th August 2021)
- Added values update main device to power interface to show usage in Power consumption chart
- Solved a bug in the lifeTimeData.revenue existence check

Changes version 1.1 (21th August 2021)
- Changed back currentPower measurement to Watt and lastDayData, lastMonthData to kWh (not to mess up statistics in Energy panel or InfluxDB/Grafana installations)
- Changed Child device currentPower to Main device with type com.fibaro.powerSensor (Watt). So the Main device will show the current power production, no Child device necessary. 
- Changed Child device lastDayData to type com.fibaro.energyMeter (kWh). These values will be shown in the new energy panel. 
- Added automaticaly change rateType interface of Child device lastDayData to ""production""
- Added extra check on apiKey and siteID, if not OK then change to simulation mode
- SolarEdge Monitor settings currency and PiekPower also available in simulation mode
- Changed the lastUpdateTime to format dd-mm-yyyy hh:mm 

Changes version 1.0 (30th July 2021)
- Total m² solar panels added to log text and label text
- Check for API existance of lifeTimeData_revenue (not available in older firmware)
- Automatic conversion added for lastmonthData, lastYearData and lifetimeData production to Wh, kWh, MWh or GWh
- Automatic conversion added for currentPower to Watt, Kilowatt, Megawatt or Gigawatt (yes, Megawatt and Gigawatt is optimistic)
- Get the Peakpower and Currency settings from Inverter
- Peakpower added to label text and child device log text

Changes version 0.3 (12th April 2021)
- Added last update date / time
- Cleaned up the code

Changes version 0.2 (12th April 2021)
- Disabled revenue value (except for lifeTimeData)

Changes version 0.1 (11th April 2021)
- First (test) version


Variables (mandatory and created automatically): 
- siteID = Site ID of your SolarEdge Inverter (see your Inverter Site Details)
- apiKey = API key of your SolarEdge Inverter (contact your installer if you don't have one)
- systemUnits = SystemUnits is Metrics (kg) or Imperial (Lb) (default is Metrics)
- solarM2 = The amount of m2 Solar Panels (use . for decimals) for calculating Solar Power m2 (default = 0)
- language = Preferred language (default = English (en)) (supported languages is Dutch (nl) and French (fr))
- interval = The daily API limitation is 300 requests. The default request interval is 360 seconds (6 minutes)
- pause = Should the SolardEdge go in pause mode after sunset (default = true)
- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)
",6,6,2,0,solar-energy,"[energy, energy-monitor, energy-production, fibaro, fibaro-hc3, fibaro-home-center, lua, quickapp, solar, solar-energy, solar-power, solaredge, solaredge-api, solaredge-inverter, solaredge-monitor]",00000
806,suntracker2-r4,fm4dd,N/A,https://github.com/fm4dd/suntracker2-r4,https://api.github.com/repos/fm4dd/suntracker2-r4,Dual-axis solar position tracking model prototype with a Cortex M0 MCU (Ardunio MKRZero) ,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",6,6,3,0,solar-energy,"[arduino, astrometry, photo-voltaic, solar-energy]",00000
807,solarshed,collinturney,N/A,https://github.com/collinturney/solarshed,https://api.github.com/repos/collinturney/solarshed,☀️ Monitoring a Renogy solar charge controller,"# ☀️ solarshed

![solarshed](images/shed.jpg)

| Component | Description |
| --- | --- |
| `renogy.py` | Renogy charge controller / inverter monitoring software |
| `cadence.py` | Simple HTTP metrics service |
| `timeseries.py` | Time series data storage and retrieval |
| `solar_monitor.py` | Solar metrics logger |

## Renogy Wanderer RS232

### RJ12 Pinout

The 6 pins on the RJ12 connector are `TX | RX | GND | GND | PWR | PWR` from left to right. You should also be able to identify the orientation by measuring ~+5.65V from `TX` to `GND` and ~+15V from `PWR` to `GND`. Only `TX`, `RX`, and `GND` will need to be connected to the serial port for monitoring the charge controller.

| DB9 Pin | RJ12 Pin |
| --- | --- |
| 1 (DC) | - |
| 2 (RX) | 1 (TX) |
| 3 (TX) | 2 (RX) |
| 4 (DT) | - |
| 5 (GND) | 3 (GND) |
| 6 (DSR) | - |
| 7 (RTS) | - |
| 8 (CTS) | - |
| 9 (RI) | - |

### Renogy Modbus 

| Attribute | Address | Scale | Units | Notes |
| --- | --- | --- | --- | --- |
| SYS\_MAX\_VOLTS | 0x00A | 1 | V | High order byte |
| SYS\_MAX\_AMPS | 0x00A | 1 | A | Low order byte |
| SYS\_MAX\_DISCHARGE | 0x00B | 1 | A | High order byte |
| SYS\_TYPE | 0x00B | 1 |  | -
| BATT\_SOC | 0x100 | 1 | % | -
| BATT\_VOLTS | 0x101 | 0.1 | V | -
| CHARGING\_AMPS | 0x102 | 0.01 | A | -
| CONTROLLER\_TEMP | 0x103 | 1 | C | -
| LOAD\_WATTS | 0x106 | 1 | W | -
| PANEL\_VOLTS | 0x107 | 0.1 | V | -
| PANEL\_AMPS | 0x108 | 0.01 | A | -
| PANEL\_WATTS | 0x109 | 1 | W | -
| BATT\_MIN\_VOLTS | 0x10B | 0.1 | V | -
| BATT\_MAX\_VOLTS | 0x10C | 0.1 | V | -
| DAY\_CHARGE | 0x10F | 1 | W | -
| DAY\_DISCHARGE | 0x110 | 1 | W | -
| DAY\_GEN\_POWER | 0x113 | 1 | W | -
| DAY\_CON\_POWER | 0x114 | 1 | W | -
| UPTIME\_DAYS | 0x115 | 1 |  | -
| BATT\_FULL\_COUNT | 0x117 | 1 |  | -
| CHARGING\_STATE | 0x120 | 1 |  | -
| BATT\_CAPACITY | 0xE002 | 1 | W | -
| SYS\_BATT\_VOLTS | 0xE003 | 1 | V | -
| RECON\_BATT\_VOLTS | 0xE003 | 1 | V | -
| BATT\_TYPE | 0xE004 | 1 |  | -
| OVER\_VOLTS | 0xE005 | 0.1 | V | -
| CHARGE\_VOLTS | 0xE006 | 0.1 | V | -
| EQUALIZE\_VOLTS | 0xE007 | 0.1 | V | -
| BOOST\_VOLTS | 0xE008 | 0.1 | V | -
| FLOAT\_VOLTS | 0xE009 | 0.1 | V | -
| BOOST\_RECOV\_VOLTS | 0xE00A | 0.1 | V | -
| DISCH\_RECOV\_VOLTS | 0xE00B | 0.1 | V | -
| UNDER\_WARN\_VOLT | 0xE00C | 0.1 | V | -
| OVER\_DISCH\_VOLTS | 0xE00D | 0.1 | V | -
| DISCH\_WARN\_VOLTS | 0xE00E | 0.1 | V | -
| BOOST\_TIME | 0xE012 | 1 |  | -

## Solar Monitoring

```python
import requests
import pandas as pd
import plotly.graph_objects as go

def plot(df, x, y):
    fig = go.Figure([go.Scatter(x=df[x], y=df[y], marker_color='black', opacity=0.6)])
    fig.update_layout(title=y)
    fig.show()

response = requests.get('http://192.168.1.195:5000/metric/solarshed')
df = pd.DataFrame(response.json())
df['time'] = pd.to_datetime(df['time'], unit='s')

plot(df, 'time', 'panel_volts')
```

![panel_volts](images/panel_volts.png)

```python
plot(df, 'time', 'charging_state')
```

![charging_state](images/charging_state.png)
",6,6,4,0,solar-energy,"[command-line, python, raspberry-pi, renogy, solar, solar-energy, solar-system]",00000
808,deye,mendel5,N/A,https://github.com/mendel5/deye,https://api.github.com/repos/mendel5/deye,WiFi and web interface information about Deye microinverters for photovoltaic systems / solar power systems,"# deye
Information about Deye microinverters for photovoltaic systems / solar power systems

Note: Some content is focused on Germany.

## Information
Deye microinverter
- WiFi name / SSID: `AP_XXXXXXX`
- WiFi password: `12345678`
- Web interface IP address: `10.10.100.254`
- Web interface username: `admin`
- Web interface password: `admin`

## Questions
- How to update/upgrade the firmware of a Deye microinverter? Where can the new firmware be found on the internet and downloaded?

## Links
Sources for the information above:
- https://www.photovoltaikforum.com/thread/178273-deye-sun-600g3-eu-230-firmwarevergleich/?pageNo=2
- https://powerplantmonitoring.de/produkt/deye-sun600g3-eu-230-600w-micro-wechselrichter-mit-wlan-fuer-2-solarmodule-fuer-mini-pv-balkonkraftwerk/
- https://priwatt.de/wordpress/wp-content/uploads/2022/05/Deye-Solar_Anleitung.pdf
- https://www.amazon.de/ask/questions/Tx3TC7IFUKCYKLH/
- https://www.youtube.com/@DeyeInverter_official/videos
- https://www.photovoltaikforum.com/thread/169125-answer-everything-about-deye-inverters/
- https://www.deyeinverter.com/download/
- https://www.mydealz.de/deals/deye-600w-sun600g3-eu-230-micro-wechselrichter-mit-wlan-fur-2-solarmodule-fur-mini-pv-balkonkraftwerk-2069861
- https://www.photovoltaikforum.com/thread/187077-achtung-wifi-sicherheit-der-deye-und-bosswerk-mi600-300-sowie-baugleiche-microwe/?pageNo=1
- https://github.com/s10l/deye-logger-at-cmd
- https://www.youtube.com/watch?v=qVzFKhWOvQo Video von Dr. Watt über Deye Mikrowechselrichter (Sicherheit), mittlerweile nicht mehr aktuell
- https://www.youtube.com/watch?v=kVRKm_Mphkk Wechselrichter Balkonkraftwerk - so richtig anschließen, Stromerzeugung in der Energiekrise
- https://www.youtube.com/watch?v=uxPRKZCXfqs Deye 600 SUN600 - Solarman App einrichten - deutsch, Solarmodule-Gladbeck
- https://www.heise.de/news/Deye-reagiert-Automatisches-Update-fuer-Wechselrichter-mit-WLAN-Luecke-7494024.html
- https://www.computerbase.de/2023-02/balkonkraftwerk-deye-wechselrichter-erhalten-update-gegen-luecke-automatisch/
",6,6,4,0,solar-energy,"[deye, inverter, microinverter, photovoltaic, photovoltaic-systems, photovoltaics, pv, solar, solar-energy, solar-system]",00000
809,TeslaSolarCharger,flashg1,N/A,https://github.com/flashg1/TeslaSolarCharger,https://api.github.com/repos/flashg1/TeslaSolarCharger,Home Assistant smart charger Blueprint to charge Tesla car using surplus solar electricity.,"# Tesla Solar Charger
Home Assistant smart charger Blueprint to charge Tesla car using surplus solar electricity.

###############################################################################
# Disclaimer:
#
# Even though this automation has been created with care, the author cannot be responsible for any damage caused by this automation.  Use at your own risk.
#
###############################################################################
# Note:
# - Credit goes to Alphaemef for the original solar charger Blueprint.
#   https://github.com/Alphaemef/SolarBalance-Suite
###############################################################################

![Screenshot_20230702-094232_Home Assistant](https://github.com/flashg1/TeslaSolarCharger/assets/122323972/58d1df89-905b-422c-8542-0081b9fa342f)

![Screenshot_20230630-135925_Home Assistant](https://github.com/flashg1/TeslaSolarCharger/assets/122323972/2f04b1e2-b56d-493c-977f-82d5dd04cbe5)


Installation
============

-	Set up ""Grid Power Net"" sensor in Home Assistant (HA) config, eg.

/config/configuration.yaml
```
template:

    # For Enphase, grid_power_net is an integer in watts. Positive value means importing power from grid. Negative value means exporting power to grid.
    - sensor:
        name: Grid Power Net
        state_class: measurement
        icon: mdi:transmission-tower
        unit_of_measurement: W
        device_class: power
        state: >
            {{ states('sensor.envoy_[YourEnvoyId]_current_power_consumption')|int - states('sensor.envoy_[YourEnvoyId]_current_power_production')|int }}
```

-	Copy the Blueprint file to,
\\HOMEASSISTANT\config\blueprints\automation\flashg\Tesla_solar_charger_automation.yaml

-	Restart HA.

-	Create 2 helper booleans, eg.
Settings > Devices & Services > Helpers > Create Helper > Toggle
1.	Telsa Model3 charge from grid
2.	Tesla Model3 stop charging

-	Config the Blueprint automation specifying charger voltage, maximum current and helper booleans created above, ie.
Settings > Automations & Scenes > Blueprints > Tesla solar charger automation


My setup
========

-	Home Assistant, https://www.home-assistant.io/
-	Enphase Envoy Integration configured for 30 seconds update interval, https://github.com/briancmpbll/home_assistant_custom_envoy
-	Tesla Custom Integration, https://github.com/alandtse/tesla
-	Tesla UMC charger, 230V, max 15A.
-	Tesla Model 3.


Features
========

-	Charge from excess solar adjusting Tesla car charging current according to feedback loop value ""Grid Power Net"".  The ""Grid Power Net"" sensor expresses negative power in Watts when exporting to grid, and positive power when consuming from grid.
-   Support multi-day solar charging using sunrise trigger to start and sunset trigger to stop.
-   Compatible with off-peak night time charging.


How to use
==========

-	Set your charging limit in app or car.
-	Connect charger to car.  Normal charging at constant current should begin immediately if schedule charging is disabled.  After a little while, the script will take over and manage the charging current during daylight hours.  Please see work-arounds below if automation cannot be triggered.
-	There are 2 options on how to charge the car (see below).
-	The script will stop if charger is turned off manually or automatically by car when reaching charge limit.
-	To abort charging, turn on ""Tesla Model3 stop charging"".  The script will take about a minute to terminate if using default values.

2 options on how to charge the car:

Option 1
--------
To charge from excess solar, just plug in the charger.  The initial charge current is 6A.  After about 1 minute it will adjust the current according to amount of excess power exported to grid.

Option 2
--------
To charge from grid, set your desired charging current and turn on ""Telsa Model3 charge from grid"".


Notes
=====

Automation cannot be triggered
------------------------------
The Tesla triggers and conditions are slow to update unless car is polled often.  Polling too often can drain the car battery.  So might have to wait a minute or two for the conditions to refresh and the triggers to work.  Please see below for possible work-arounds.

Work-arounds:
1. Run the automation manually by selecting the automation and then select ""Run Actions"".
2. Press the ""Force data update"" button before and after plugging in the charger.


GUI display examples
====================

Dashboard Tesla power card
--------------------------
https://github.com/reptilex/tesla-style-solar-power-card

```
type: custom:tesla-style-solar-power-card
name: Power Usage
show_w_not_kw: 1

# 3 flows between bubbles
grid_to_house_entity: sensor.grid_power_import
generation_to_grid_entity: sensor.grid_power_export
generation_to_house_entity: sensor.solar_power_consumption

# optional appliances with consumption and extra values
appliance1_consumption_entity: sensor.charger_power
appliance1_extra_entity: sensor.battery

# optional 3 main bubble icons for clickable entities
grid_entity: sensor.grid_power_net
house_entity: sensor.envoy_[YourEnvoyId]_current_power_consumption
generation_entity: sensor.solar_power_production

```

Dashboard Tesla solar charger control
-------------------------------------
```
type: entities
entities:
  - entity: automation.[YourTeslaName]_solar_charger_automation
  - type: attribute
    entity: automation.[YourTeslaName]_solar_charger_automation
    attribute: current
    name: Running instance count
  - type: attribute
    entity: automation.[YourTeslaName]_solar_charger_automation
    attribute: last_triggered
    name: Last triggered
  - entity: input_boolean.[YourTeslaName]_charge_from_grid
  - entity: input_boolean.[YourTeslaName]_stop_charging
  - entity: button.wake_up
  - entity: button.force_data_update
  - entity: device_tracker.location_tracker
  - entity: binary_sensor.charger
  - entity: binary_sensor.charging
  - entity: number.charging_amps
  - entity: sensor.range
  - entity: sensor.battery
  - entity: number.charge_limit
  - entity: sensor.time_charge_complete
  - entity: lock.charge_port_latch
```
",6,6,4,5,solar-energy,"[blueprint, electric-vehicles, energy-management, enphase, home-assistant, home-automation, solar-energy, tesla]",00000
810,SolarBoard,alexanderbazo,N/A,https://github.com/alexanderbazo/SolarBoard,https://api.github.com/repos/alexanderbazo/SolarBoard,SolarBoard is a javascript dashboard for SolarEdge systems.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",6,6,3,0,solar-energy,"[javascript-dashboard, photovoltaic, solar-energy, solaredge]",00000
811,CampingElectricCalculator,freegroup,N/A,https://github.com/freegroup/CampingElectricCalculator,https://api.github.com/repos/freegroup/CampingElectricCalculator,Calculate your power consumption for CamperVans,"# Camper Van Electricity

## How to size your electrical system

To determine the size of a solar system for a camper is not very easy in practice, because 
      you can not always estimate your needs. Here I would like to give a few standard suggestions 
      to make this easier and to see the impact of the cost.

Start the tool [https://freegroup.github.io/CampingElectricCalculator/](https://freegroup.github.io/CampingElectricCalculator/)

![overview](./images/overview.png)
",6,6,2,2,solar-energy,"[camper, electric, solar-energy, solar-energy-cost-prediction, van]",00000
812,ecoserve,rarecoil,N/A,https://github.com/rarecoil/ecoserve,https://api.github.com/repos/rarecoil/ecoserve,"Configurations and information for ultra-low-power, off-grid-capable home servers. Work in progress.","# ecoserve

ecoserve is an experiment meant to allow for a low-energy personal server. With the advent of broadband connections in most points around the world, it is possible for many people to host their own services on even dynamic IP connections with reasonable latency, and likely do it off-grid.

This project has been inspired in part by Low-Tech Magazine's [solarserver](https://solar.lowtechmagazine.com/2018/09/how-to-build-a-lowtech-website.html). They made a number of good decisions and optimizations [described here](https://homebrewserver.club/low-tech-website-howto.html), but some of the design decisions can be further optimized and worked on in a community format.

The end idea is to have this project support multiple SBCs with different configurations, and have a series of scripts specifically optimized for the low power use case. In this way it should be possible to develop a series of optimized, cloud-like services and run them for most users.

## Tested/configured systems

* Raspberry Pi 3 - see `raspi/armv7` for 32-bit (should work as a baseline for Raspberry Pi 2), or `raspi/armv8` for 64-bit.
* ODROID-C2 - see `odroid-c2`. I personally use this platform.

## Why?

A lot of enthusiasts run home servers based upon second-hand enterprise-grade hardware. Often times our on-premises servers aren't as efficient as they could be, and we don't write the most optimized code for these solutions, either. Reducing power consumption for these systems to the lowest extent possible allows for individuals to run off-grid home servers with battery backup systems in the majority of locations.

Our individual electricity grids are also often significantly dirtier than the power systems on major cloud platforms. In the Bay Area where many technologists live, [only 33% of PG&E electricity comes from renewable sources](http://www.pgecorp.com/corp_responsibility/reports/2018/environment.html). Seattle does better, at [90% from hydropower](https://energysolutions.seattle.gov/renewable-energy/). However, both of these are bad compared to Google Cloud Platform, which is powered with [100% renewable energy](https://cloud.google.com/sustainability/). 

Thus, in order to reduce as much of our personal footprint as possible, it is prudent to:

* **Use a renewable energy program.** In the Bay Area, [PG&E Solar Choice](https://www.pge.com/en_US/residential/solar-and-vehicles/options/solar/solar-choice/solar-choice.page) is a voluntary way to pay a little more to source renewable-only power. Such programs are less expensive in the PNW, such as Portland General Electric's [Green future program](https://www.portlandgeneral.com/residential/power-choices/renewable-power/choose-renewable) or Puget Sound Energy's [Green Power program](https://www.pse.com/green-options/Renewable-Energy-Programs/green-power).

* **Reduce electronic power consumption as much as possible.** Ultra-low-voltage chips reign supreme. When plotting hardware upgrades, look for performance-per-watt characteristics and try to buy as low of TDP solutions as possible. Instead of running a massive server rig at home that you use 1% of the time, build a low-TDP system that sees balanced utilization for most projects, and leverage cloud resources for spot performance where high-TDP systems are required. 

* **Avoid second-hand ""enterprise-grade"" hardware in most cases.** This is especially important for homelab switches and servers, which have redundant PSUs and power-hungry internal systems. For desktops, a *Vice* author recently hit Hacker News [advising the purchase of used Xeon workstations](https://tedium.co/2019/06/04/used-workstation-computer-buying-strategy/) instead of new hardware for use [as recycled gaming PCs](https://www.greenpcgamers.com/). Some can make a case for this if you have a clean energy grid and really need the horsepower, as electronics manufacturing and recycling has a lot of negative environmental impact. However, for almost all users one is better served with laptops and 35W -QM-class processors, or [low-TDP T-class processors](https://cpu.userbenchmark.com/Compare/Intel-Core-i5-8600K-vs-Intel-Core-i7-8700T/3941vsm480804)  in desktops.

The reduction angle is the primary angle behind the ecoserve project - it is not meant to replace cloud services for truly high scale applications, but lower the barrier to entry and energy consumption of technologists worldwide.


## What about the cloud?

Cloud platforms benefit from scale, but who your platform is seems to matter a lot for overall sustainability and carbon emissions practices. As of the time of this writing 5 June 2019:

* [Google Cloud Platform](https://cloud.google.com/sustainability/) is 100% renewable energy backed, using solar and RECs.
* [Amazon Web Services](https://aws.amazon.com/about-aws/sustainability/#progress) is 50% renewable, not much better than PG&E. uses renewable energy in the NoVA `us-east` region. `us-west` is offset.
* [Microsoft Azure](https://blogs.microsoft.com/on-the-issues/2018/03/21/new-solar-deal-moves-us-ahead-of-schedule-in-creating-a-cleaner-cloud/) targeted 50% renewable in 2018 and 60% by 2020, leaving it mostly on par with AWS.
* [Cloudflare](https://blog.cloudflare.com/a-carbon-neutral-north-america/) purchases RECs (renewable energy credits), similar to those offered to customers of specific utilities.
* Cheap hacker favorite cloud provider [Hetzner](https://www.hetzner.com/) uses [hydropower and wind power](https://www.hetzner.com/unternehmen/umweltschutz/) at their German and Finnish data centers, respectively. Using the [Server Auction](https://www.hetzner.com/sb) you can get some good deals on older hardware. Intel Haswell and above allows undervolting, so you can eke out more performance-per-watt with these dedicated boxes and keep them from getting recycled.

Before this research, I used [Digital Ocean](https://www.digitalocean.com/). Some other DO users have chimed in on [the DigitalOcean idea that exists regarding this](https://ideas.digitalocean.com/ideas/DO-I-1007), but CEO Moisey Uretsky seems to have posted at some point and there's not much DO can do since they don't own their data centers. It's best to avoid DO.

[Linode](https://linode.com/) should also be avoided, as they suffer the same issues. They are silent on renewable power, too.

> *If you have more information, please issue a pull request to this document.*


## Benefits of on-premises systems

Local proximity means a lot to a LAN and matters in overall energy consumption. Cloud energy costs for cloud providers themselves are good, but telecommunications infrastructure is not nearly as interested in environmental sustainability. Note [how little data Comcast adds to this environmental fluff piece](https://corporate.comcast.com/csr2015/building-a-smarter-energy-future). [Their environmental sustainability report](https://corporate.comcast.com/values/csr/2018/sustainable-excellence) simply states they're ""working toward"" sustainable practices. Monopolies don't need to care as much about such things, and corporate values aren't necessarily aligned in this direction.

> *Even though I call out Comcast, ISPs anywhere are often just victim to the grid in their area. At that case, the average US renewable energy amount is [12.2%](https://en.wikipedia.org/wiki/Renewable_energy_in_the_United_States).*

Therefore, overall bandwidth production should also be reduced as much as possible. It seems that heavy compression/decompression from points with renewable energy sources is also likely better than energy usage in transit, as the telecom grid can be treated as relatively dirty.

There are also legal and privacy concerns raised regarding cloud services. Cloud services are [often subject to government data requests](https://www.eff.org/who-has-your-back-2017) and should be considered zero-knowledge parties whenever possible (i.e., when backing up to the cloud, encrypt it all on machines you control first.)

From an ecosystem angle, diversity is good. Cloud platforms are private companies and have the ability to restrict free speech and information via their own Terms of Use. Some far-right and alt-right parties have found notable problems in this regard over the period of 2016 to present, and even if their messages are disagreeable to those of us more left-leaning, Martin Niemöller would like a word with you. Having home servers and services also work great for developer education.

## Contributions

Contributions and further optimizations to this work are greatly appreciated and will be accepted after confirmed testing.

## License

GPL 3.0.
",6,6,2,0,solar-energy,"[ecology, low-power, raspberry-pi-3, solar-energy, solarserver]",00000
813,SolarEdge.Monitoring.Demo,matjazbravc,N/A,https://github.com/matjazbravc/SolarEdge.Monitoring.Demo,https://api.github.com/repos/matjazbravc/SolarEdge.Monitoring.Demo,"Visualize the most important indicators of the solar power plant in a fully automated way, using SolarEdge API with .NET 6 Web API backend, Docker, MySQL and Grafana.","![](res/Title.png)

At the end of last year, I had a solar system installed at home. And as a proud owner, I wanted to visualize the most important indicators of the system in a simple way.
For this purpose I've used **[SolarEdge API](https://www.solaredge.com/sites/default/files//se_monitoring_api.pdf)**, **[MySQL](https://www.mysql.com/)** as storage and **[Grafana](https://grafana.com/)** for vusualizing indicators. But let's go step-by-step.

# SolarEdge API Access

The SolarEdge API can be accessed via HTTPS protocol only. SolarEdge monitoring server supports both HTTPS/1.0 and HTTPS/1.1 protocols. All APIs are secured via an access token: **every access to the API requires a valid token** as a URL parameter named **api_key**. For example: **api_key= L4QLVQ1LOKCQX2193VSEICXW61NP6B1O**  
An API key can be generated to enable access to specific sites (via Site API key) or to all sites within a specific account (via Account API key).

![](res/solaredge-api-key.png)

# Running in Docker

## Docker-Compose Files
**Docker-compose.yml** file with setup for all the containers looks like this:
```yml
version: '3.9'

services:
  grafana:
    image: grafana/grafana-enterprise
    container_name: solaredge_grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./datasources:/etc/grafana/provisioning/datasources/
      - ./dashboards:/etc/grafana/provisioning/dashboards/
    labels:
      org.label-schema.group: ""Monitoring""    
    networks:
      - common_network
    depends_on: 
      - mysql

  mysql:
    image: mysql
    container_name: solaredge_mysql
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/initdata.sql:/docker-entrypoint-initdb.d/2.sql
    labels:
      org.label-schema.group: ""Database""
    networks:
      - common_network
    healthcheck:
      test: [""CMD"", ""mysqladmin"" ,""ping"", ""-h"", ""localhost""]
      timeout: 20s
      retries: 10

  solaredge.monitoring.demo:
    container_name: solaredge_openapi
    image: solaredgemonitoringdemo:latest
    restart: on-failure
    hostname: solaredge.monitoring.demo.openapi
    build:
      context: .
      dockerfile: src/SolarEdge.Monitoring.Demo/Dockerfile
    networks:
      - common_network
    depends_on: 
      mysql:
        condition: service_healthy

volumes:
    mysql_data:
    grafana_data:

networks:
    common_network:
        driver: bridge
```
All you have to do is set your SolarEdge **Site Id** (MY_SITE_ID) and **API key** (MY_API_KEY) in the **docker-compose.override.yml** file.
```yml
version: '3.9'

services:
  solaredge.monitoring.demo:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ServiceConfig__SolarEdgeSiteId=MY_SITE_ID
      - ServiceConfig__SolarEdgeApiKey=MY_API_KEY
      - ServiceConfig__MySqlConnectionString=server=mysql;user=solar;password=solar;port=3306;database=SolarEdge;
      - ServiceConfig__OverviewJobCronSchedule=0 0/10 8-18 ? * * *
      - ServiceConfig__EnergyDetailsJobCronSchedule=0 0/5 8-18 ? * * *
    ports:
      - 9900:80

  grafana:
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_LOGS=/var/log/grafana/
      - GF_LOG_MODE=console file
      - GF_LOG_LEVEL=info
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=SolarEdge Monitoring Demo
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Editor
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/SolarEdgeMonitoring.json
    ports:
      - 3000:3000

  mysql:
    environment:
      - MYSQL_DATABASE=SolarEdge
      - MYSQL_USER=solar
      - MYSQL_PASSWORD=solar
      - MYSQL_ROOT_PASSWORD=solar
    ports:
      - 3306:3306
```
# Setup the Containers
To execute compose file, open Powershell, and navigate to the compose file in the root folder. Then execute the following command: **docker-compose up -d --build**. To check all running Containers use **docker ps**.

![](res/docker.png)

# Update Energy details/overview data
You can update your energy details/overview data for custom or predefined date ranges with help of **[SolarEdge monitoring OpenAPI service](http://localhost:9900/swagger/index.html)** which is available locally on **http://localhost:9900/swagger/index.html** address:
![](res/swagger.png)

# Monitoring dashboard

Your data is visualized with **[Grafana](http://localhost:3000)** which is available locally on **http://localhost:3000** address. Enter default user name (admin) and password (admin), skip changing password, and voila, your SolarEdge monitoring dashboard is here:
![](res/grafana-dashboard.png)

You can also change the time range and the graphs will be updated accordingly.
![](res/grafana-time-range.png)

Enjoy!

## Prerequisites
- [Visual Studio](https://www.visualstudio.com/vs/community) 2022 17.2.6 or greater
- [.NET SDK 6.0](https://dotnet.microsoft.com/download/dotnet/6.0)
- [Docker](https://www.docker.com/resources/what-container)

## Tags & Technologies
- [.NET 6](https://github.com/dotnet/core/blob/main/release-notes/6.0)
- [Docker](https://www.docker.com/resources/what-container)  
- [ASP.NET Core 6.0](https://docs.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-6.0?view=aspnetcore-6.0)
- [SolarEdge Monitoring Server API](https://www.solaredge.com/sites/default/files//se_monitoring_api.pdf)
- [MySQL](https://www.mysql.com/)
- [Grafana](https://grafana.com/)

## Licence
Licenced under [MIT](http://opensource.org/licenses/mit-license.php).
Contact me on [LinkedIn](https://si.linkedin.com/in/matjazbravc).

SOLAREDGE is a trademark and brand of [SolarEdge](https://www.solaredge.com/) Technologies Ltd.
",6,6,2,0,solar-energy,"[csharp, docker, docker-container, dotnet, dotnet-core, grafana, grafana-dashboard, microservices, microsoft, mysql, mysql-database, net5, serilog, serilog-sink, solar-energy, solar-system, solaredge, solaredge-api, webapi]",00000
814,bwlr3d,teapotlaboratories,teapotlaboratories,https://github.com/teapotlaboratories/bwlr3d,https://api.github.com/repos/teapotlaboratories/bwlr3d,Teapot BWLR3D: Asset Tracker and Environmental Sensor with Solar Energy Harvesting,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",6,6,3,0,solar-energy,"[aem10941, asset-tracker, bme688, energy-harvesting, environmental-monitoring, gnss, gps, hardware, iot, lis3mdl, lora, lorawan, lpwan, rak3172, rakwireless, solar-energy, stm32, stm32wl, veml7700]",00000
815,Fronius-Data-Manager,pesor,N/A,https://github.com/pesor/Fronius-Data-Manager,https://api.github.com/repos/pesor/Fronius-Data-Manager,"Fronius Data Manager including MQTT Autodiscover integration, and full integration into Home Assistant.","# Fronius Data Logger
## Fronius Data Logger - MQTT autodiscover interface for Homeassistant

<a href=""https://github.com/pesor/Fronius-Data-Manager/releases""><img src=""https://img.shields.io/github/v/release/pesor/Fronius-Data-Manager?style=plastic""/> </a><a href=""https://github.com/pesor/Fronius-Data-Manager/blob/master/LICENSE""><img src=""https://img.shields.io/github/license/pesor/Fronius-Data-Manager?style=plastic""/></a>  <a href=""https://github.com/pesor/Fronius-Data-Manager/stargazers""><img src=""https://img.shields.io/github/stars/pesor/Fronius-Data-Manager?style=plastic""/></a>  <a href=""https://github.com/pesor/Fronius-Data-Manager/releases""><img src=""https://img.shields.io/github/downloads/pesor/Fronius-Data-Manager/total?style=plastic""/></a>

### Getting started

These instructions will get you a copy of the project up and running on your local machine for development, testing purposes and eventually production mode. 
See deployment for notes on how to deploy the project on a live system.

### Prerequisites

What things you need to install the software and how to install them

1. Fronius Inverter, with Data Manager Card, or Data Manager Box

2. Windows 10, with installed Arduino EDI (my version 1.8.12) - Used by VSCode and PlatformIO

3. VSCode and PlatformIO

4. An ESP32DEV board, I used this from AliExpress: https://www.aliexpress.com/item/32849567377.html?spm=a2g0s.9042311.0.0.27424c4dcQpFO7 but others can be used.

5. USB Cable to attatch to the ESP32DEV board

6. MQTT server (I am running on a Synology NAS in docker)
   If you have a Synology NAS, I can recommend to follow [BeardedTinker](https://www.youtube.com/channel/UCuqokNoK8ZFNQdXxvlE129g) on YouTube, he makes a very intuitive explanation how to setup the whole Home Assistant environment on Synology.   

7. You will need the following in your configuration.yaml file: 

   **python_script:**

   **mqtt:**
     **broker: 192.168.1.64**
     **discovery: true**
     **discovery_prefix: homeassistant** (Default, it is the folder where you have your configuration.yaml file)

8. [](https://https://www.youtube.com/channel/UCuqokNoK8ZFNQdXxvlE129g)

   

### Installing

Below a step by step that tell you how to get a development/production environment up and running, and to make things even more easy,  [BeardedTinker](https://www.youtube.com/channel/UCuqokNoK8ZFNQdXxvlE129g)  have created the two tutorials on YouTube, which gives a detailed instruction how to get it all to work. 

He has performed a tremendous task in doing this.

The video below is for the TTGO H-Grow card, but the first part shows, **how to install the INO/Arduino EDI on your Windows 10**, and you can then skip the part, that is concerning the plant card:  https://www.youtube.com/watch?v=7w6_ZkLDxko&t=231s    

I highly recommend that your see and follow this video if you do not already have the Arduino EDI on your Windows 10, then you will have success in setting the up Arduino EDI.

After installing the INO/Arduino EDI, you need to install VSCode and PlatformIO, there are good videos on youtube how to do that, just Google them.

After seeing the videos, remember to give a ""Thumbs Up"" to support BeardedThinker in his work.

### The Arduino Sketch

The main program here is the:

### 			main.cpp

You just use this main.cpp and set the variables needed in order to get it to run.

Few things of importance:

 1. First identify the ***// Start user defined data*** in the main.cpp

 2. Now you have to define your SSID's, you can have as many as you like, I have at the moment 4, probably going to 5 soon. You update the variable **ssidArr** with your access points, each separated by a comma. The variable **ssidArrNo** must be filled with the number of SSID's given.

 8. You then gives the Password for your SSID's (expected to all have the same).

 9. You now adjust to your time zone, by giving the numbers of hours multiplied by 3600.

 5. You need to give your credentials to your FTP server, I plan in a later release to include the server on the ESP32.

 6. The last thing to do, is to give in the information for your MQTT broker.

    

    Upload main.cpp to the ESP Board, and

    ​																					**YOU ARE DONE with first part**


## Which information do I get?

The data from the Kamstrup Unipower is translated into the following json format, and sent to your mqtt broker.

(Note that I also have Sun cells on the roof, sending power to the grid via a Fronius inverter. Se my solution for Fronius here :)

```json
{
  ""FAC"": {
    ""FAC"": ""50""
  },
  ""IAC"": {
    ""IAC"": ""1.47""
  },
  ""IDC"": {
    ""IDC"": ""0.69""
  },
  ""PAC"": {
    ""PAC"": ""264""
  },
  ""TOTAL_ENERGY"": {
    ""TOTAL_ENERGY"": ""45173.00""
  },
  ""UAC"": {
    ""UAC"": ""236""
  },
  ""UDC"": {
    ""UDC"": ""343""
  },
  ""Day_Energy"": {
    ""Day_Energy"": ""4.99""
  },
  ""YEAR_ENERGY"": {
    ""YEAR_ENERGY"": ""5324.00""
  },
  ""Status"": {
    ""Code"": ""0""
  },
  ""Reason"": {
    ""Reason"": """"
  },
  ""UserMessage"": {
    ""UserMessage"": """"
  },
  ""timeStamp"": {
    ""timeStamp"": ""2020-09-28 17:22:43""
  },
  ""MONTH_ENERGY"": {
    ""MONTH_ENERGY"": ""5328.99""
  },
  ""Jan"": {
    ""Jan"": ""87.00""
  },
  ""Feb"": {
    ""Feb"": ""192.00""
  },
  ""Mar"": {
    ""Mar"": ""540.00""
  },
  ""Apr"": {
    ""Apr"": ""808.00""
  },
  ""Maj"": {
    ""Maj"": ""903.00""
  },
  ""Jun"": {
    ""Jun"": ""846.00""
  },
  ""Jul"": {
    ""Jul"": ""-3377.00""
  },
  ""Aug"": {
    ""Aug"": ""0.00""
  },
  ""Sep"": {
    ""Sep"": ""452.00""
  },
  ""Okt"": {
    ""Okt"": ""301.00""
  },
  ""Nov"": {
    ""Nov"": ""91.00""
  },
  ""Dec"": {
    ""Dec"": ""67.00""
  },
  ""lastTwelve"": {
    ""lastTwelve"": ""910.00""
  },
  ""thirteen"": {
    ""thirteen"": ""5160.00""
  },
  ""fourteen"": {
    ""fourteen"": ""5668.00""
  },
  ""fifteen"": {
    ""fifteen"": ""5830.00""
  },
  ""sixteen"": {
    ""sixteen"": ""5820.00""
  },
  ""seventeen"": {
    ""seventeen"": ""5410.00""
  },
  ""eightteen"": {
    ""eightteen"": ""6150.00""
  },
  ""nineteen"": {
    ""nineteen"": ""5790.00""
  },
  ""twenty"": {
    ""twenty"": ""5324.00""
  },
  ""twentyone"": {
    ""twentyone"": ""0.00""
  },
  ""twentytwo"": {
    ""twentytwo"": ""0.00""
  },
  ""twentythree"": {
    ""twentythree"": ""0.00""
  },
  ""twentyfour"": {
    ""twentyfour"": ""0.00""
  },
  ""twentyfive"": {
    ""twentyfive"": ""0.00""
  }
}
```



## The Python Part - The Autodiscover - MAGIC

The Python script named: 

### 																																		fronius-aut.py**

you find it in the scr folder, in folder Autodiscovery.

you copy this into the folder **python_scripts** in your Home Assistant config folder, If you do not have that folder already, you need to create it. 

The Home Assistant config folder, is where you also have your configuration.yaml file.

You find and execute the Python script, in the menu ""Developer Tools""/""SERVICES"", where you will find it named:

### 														python_script.fronius-aut

You just press the ""CALL SERVICE"" button, and all the sensors from mqtt will be autodiscovered and added to your menu ""Configuration""/""integrations"", where you will find the MQTT integration, and here you can select the devices, and then select Solar_Power, and all sensors will be shown. You can use the ""ADD TO LOVELACE"" function, or you can add them manually to any LOVELACE card you want.

### Running

The Fronius ESP32, will every 20 seconds, read the Fronius Data Manager messages. These message will be translated, and the data will be sent to the MQTT server/broker, and at the same time they will be updated in Home Assistant.

This is the information I get on my Home Assistant Overview Fronius (in Danish, but I have kept the original naming, so all names are set in the Card):

![](https://github.com/pesor/Fronius-Data-Manager/blob/master/images/LoveLaceCard.JPG)

### Deployment

See instructions under **Prerequisites**

### Versioning

2.0.0 First official release
2.0.1 Stop MQTT for updating when Fronius Inverter is off line at night.
3.0.0 Changed from Arduino EDI, into VSCode and PlatformIO
4.0.0 Using VSCode and PlatformIO to full extent.

### Authors

* **Per Rose** 
* BeardedTinker (contributer)

### License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details



**If you like and use my program, then** 

​       [![BMC](https://www.buymeacoffee.com/assets/img/custom_images/white_img.png)](https://www.buymeacoffee.com/pesor)

**it will be appreciated.**




",6,6,1,0,solar-energy,"[fronius, fronius-data-manager, fronius-datalogger-web, fronius-datamanager, fronius-inverter, fronius-solar-api, solar-energy, solar-system]",00000
816,solarfactors,pvlib,pvlib,https://github.com/pvlib/solarfactors,https://api.github.com/repos/pvlib/solarfactors,A community-maintained implementation of the pvfactors bifacial irradiance model,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",5,5,3,10,solar-energy,"[photovoltaic, pvlib, python, renewable-energy, renewables, solar-energy]",00000
817,solar-friend,sprenge,N/A,https://github.com/sprenge/solar-friend,https://api.github.com/repos/sprenge/solar-friend,Optimize the self consumption of your solar panels and measure your electricity consumption.,"# solar-friend : introduction

Solar-friend helps you to measure and optimize your electricity consumption inside your home.  the following functions are implemented in this package.

- Electricity meter reading : read frequently (each 5 minutes) consumption/injection and calculate the actual electricity balance (Do I consume or inject electricity).
- Solar invertor data read out
- Solar forecast yield for the coming 3 days

All measurements are stored into a database in order to perform data analysis lateron.  It could for instance be used lateron to make a correction decision for the selection of a home battery.
This package will be extended lateron with functions to help you with the optimal choice of a home battery.  The price of home batteries does not guarantee currently return on investment but I expect that prices will decrease in the coming years.

Solar-friend does not reinvent the wheel for functions that can be full-filled by other excellent free available software :

- It is ready to integrate with home assistant (https://www.home-assistant.io/), the number one open source package for automating your home.
- Meter data (from electricity meter and inverter) are stored in an influxdb database.  How to install influxdb is described below.
- Data visualization can be done via grafana.  How to install grafana is described below together with some screenshots how to create your custom graphs.

The follow diagram is an example how solar-friend can be deployed (=my home setup in Belgium).  The raspberry pi hosts all software packages and connects to the digital electricity meter (via P1 cable), to the solar inverter and to the internet (forecast).

## ![solar-friend.jpg](./doc/solar-friend.jpg)

# Installation

## Install packages

The installation is described for installation on a raspberry Pi (Raspberry Pi OS).  This does not mean that installation cannot be done on other platforms but it might require a couple of small changes.  You can find a lot of guides on youtube how you install an operating system on your raspberry Pi (for instance https://www.youtube.com/watch?v=y45hsd2AOpw).  You can also install this package on the Raspberry Pi that already contains home assistant (for instance https://www.youtube.com/watch?v=xNK3IDxSPHo).  **The IP address 192.168.1.30 used below in the text is the IP address of my Raspberry at home.  Please replace this address with the IP address of your Raspberry Pi.**  In the text below I assume that home assistant, solar-friend, influxdb and grafana are installed on one Raspberry Pi which does not have to be case.  You can perfectly split all these functions over different physical hardware platform (e.g. multiple Raspberry Pi's)

The next step is to open a terminal to your Raspberry Pi (e.g. using mobaxterm) and become root (sudo -i) 

## ![terminal.png](./doc/terminal.png)



Perform the following installation steps (**adapt the timezone to your situation**) :

```bash
apt-get update
apt-get -y upgrade
apt-get install -y python3-pip
apt-get install -y git
apt-get install -y libatlas-base-dev
apt-get install -y libopenjp2-7-dev
apt install libtiff5
timedatectl set-timezone Europe/Brussels
cd
git clone https://github.com/sprenge/solar-friend.git
cd solar-friend
pip3 install -r install/requirements.txt
```
## Create your configuration file

Discover first the types that the current solar-friend version supports :

```bash
python3 main.py --capabilities
```
This lists possible values for electricity meter types and inverter types (to be used to fill in the config file correctly)

Now it is time to create a config file (e.g. /root/config.yml) which contains details about the devices in your home.  Copy first the example config file so you have a template to start from :

`cp /root/solar-friend/example_input.yml /root/config.yml`

Edit now the /root/config.yml file.  Customize the values to your environment and remove the sections you don't want to activate.  If you are not familiar with yaml editing, you can make use of one the online tools (e.g. https://onlineyamltools.com/edit-yaml).  Below is list which section (in bold) you need for which functionality :

- Metering value into the database : **influxdb** --> *db* and *host* are mandatory if you have an influxdb section.
- Electricity meter : **electricity_meter**--> *type* and *serial_port* are mandatory.
- solar system forecasting : **solar_system** --> please foresee *location*, *panels* and *forecast* sub sections:
  - location --> longitude and latitude of your home
- invertor : **solar_system** --> please foresee the *inverter* sub section --> *provider* and *api_key* are mandatory in case you foresee the inverter sub section.  Only one provider is supported for the moment namely solcast (https://solcast.com/).  Retrieving the api_key is free of charge in some conditions (not for commercial usage) --> see API toolkit / free registration.

## Installation of influxdb

The installation of  influxdb (in case you have raspbian buster)

```bash
wget -qO- https://repos.influxdata.com/influxdb.key | sudo apt-key add -
echo ""deb https://repos.influxdata.com/debian buster stable"" | sudo tee  /etc/apt/sources.list.d/influxdb.list
apt-get update
apt install influxdb
systemctl unmask influxdb
systemctl enable influxdb
systemctl start influxdb
influx
> create database solar
```
tbc : install retention policy for the database



## Installation of grafana 

```bash
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
echo ""deb https://packages.grafana.com/oss/deb stable main"" | sudo tee -a /etc/apt/sources.list.d/grafana.list
apt-get update
apt-get install -y grafana
systemctl enable grafana-server
systemctl start grafana-server
```



## Dry run your installation

Test your installation/configuration on errors

```bash
# make sure you are still in the solar-friend directory
python3 main.py --dryrun /root/config.yml
```

Verify that database record have been created in the solar database :

```bash
influx -precision rfc3339
> use solar
> show measurements
> select * from daily_meter
> select * from inverter_total_power
```

Please note that the time is in UTC, not your local time (that is okay)

## Create service

The next step is to install solar-friend as a service on your raspberry PI, so that it automatically starts in case of power failure at your home.

```bash
cp install/start_solar.sh /root
chmod +x /root/start_solar.sh
cp install/meter.service /lib/systemd/system
systemctl enable meter.service
systemctl start meter.service
tail -f /var/log/syslog
```

Check in syslog that you see the following message :  Running on http://0.0.0.0:5300/, if so it means that the service is correctly started and running

## API service

Solar-friend offers an API service so that it can easily be integrated with other packages (e.g. home assistant).
The following endpoints are available (replace host by the IP address on which the solar-friend service is started):

* http://192.168.1.30:5300/solar-friend/api/v1.0/today_yield.png : get graph with the solar yield for today
* http://192.168.1.30:5300/solar-friend/api/v1.0/electricity_balance : returns the current consumption (via the key watt), a negative value indicate that more energy was pulled from the electricity net than injected, a positive value means that more energy is injected in the electricity net than consumed.
* http://192.168.1.30:5300/solar-friend/api/v1.0/day_forecast/today : returns the forecast (via the key watt) for today
* http://192.168.1.30:5300/solar-friend/api/v1.0/day_forecast/tomorrow : returns the forecast (via the key watt) for tomorrow
* http://192.168.1.30:5300/solar-friend/api/v1.0/day_forecast/day_afer : returns the forecast (via the key watt) for the day after
* http://192.168.1.30:5300/solar-friend/api/v1.0/meter_values : get back the meter values (injection and consumption)

## Logging to influx database

*Time based measurements are logged into the influx database indicated in the configuration file (see influx installation)*
Every measurement has the *time* field, indicating the exact time of recording.  This measurements are useful for consulting lateron as historical data.

The following measurements are recorded :

### daily_meter

*Electricity meter values are logged every morning and evening into this measurements*

* *consumption* = total power consumption from the electricity net since the commisioning of the electricity meter in watt.
* *injection* = total power insertion into the electricity net since the commissioning of the electricity meter in watt.
* *consumption_delta* = consumption difference in watt with the last measurement (so the consumption of about half a day)
* *injection_delta* = inject difference in watt with the last measurement.
* *period* = evening or morning, the moment the meter values are recorded

Other fields migth be present that are generated by your meter (e.g. day/night counters).

### frequent_consumption_measurement

*The electricity balance (see API service) is logged every 5 minutes along with the consumption and injection values*

* *balance* = a positive value means that you have been selling electricity for the last 5 minutes and a negative value means that you have been buying electricity (inject-consume)
* *consume* = pulled from the electricity net in the last 5 minutes
* *inject* = pushed to the electricity net in the last 5 minutes
* *period* = period between two measurements

### inverter_daily

*Detailed inverter yield values are retrieved every evening from the inverter and stored in this mesurement (in watt).*

These measurements are created at the end of the day

* *watt* = electricity yield in the last 5 minutes
* *period* = interval between two measurements
  
### inverter_total_power

*The total inverter power (in watt) since the commissioning of the inverter is logged every evening into this measurements.*

* *watt* = total power generated by the inverter since the installation of the inverter.
* 
### self_consumption

* *day_cons* = daily consumed from the electricity net 
* *day_inj* = daily injected 
* *day_self* = direct consumption  
* *solar_day_yield* = total solar yield for that day

All values in watt.  This measurement is generated at the end of the day based on existing measurements (only if they are present).

## Link to home assistant as sensor

Make sure you know the IP address of the host where the solar-friend service is running and make sure that home assistant can reach that IP address.  Please replace the IP address mentioned below (192.168.1.30) with the IP address of your own service.

Edit now the home assistant yaml file and add following config :

```yaml
sensor:
  - platform: rest
    name: last_netto_consumption
    resource: http://192.168.1.30:5300/solar-friend/api/v1.0/electricity_balance
    value_template: '{{ value_json.watt }}'
    unit_of_measurement: W
  - platform: rest
    name: solar_forecast_day_after
    resource: http://192.168.1.30:5300/solar-friend/api/v1.0/day_forecast/day_after
    value_template: '{{ value_json.watt }}'
    unit_of_measurement: W
  - platform: rest
    name: solar_forecast_tomorrow
    resource: http://192.168.1.30:5300/solar-friend/api/v1.0/day_forecast/tomorrow
    value_template: '{{ value_json.watt }}'
    unit_of_measurement: W
  - platform: rest
    name: solar_forecast_today
    resource: http://192.168.1.30:5300/solar-friend/api/v1.0/day_forecast/today
    value_template: '{{ value_json.watt }}'
    unit_of_measurement: W

camera:
  - platform: generic
    name: ""yield_today""
    still_image_url: ""http://192.168.1.30:5300/solar-friend/api/v1.0/today_yield.png""
```

Restart your home assistant and you will discover new sensors which you can integrate now in your lovelace panels the way you want.

Screenshot of values integrated in my home assistant 

## ![pic4.jpg](./doc/pic4.jpg)

## link to home assistant via the custom integration component provided in this package

Copy the custom_components directory to the config/custom_components directory (so you install a custom integration) of your installation and restart home assistant.

Add now following config to your configuration.yaml and restart home assistant.  You should see two new sensors now (injection/consumption).

```yaml
sensor:
  - platform: electricity_meter
    scan_interval: 60
    host: 192.168.1.30
```

The integration component talks now to the daemon and two sensor are added (injection/consumption) that can be used in the Energy tab (new in home assistant 2021.8.1).


## Exploring data with grafana

Open up a browser and navigate to the following url : http://192.168.1.30:3000
The first time you can loging with user **admin** and password **admin**

### Connect grafana to influxdb

Add a so called data source and press save and test to verify that grafana can connect to your database.

## ![pic1.jpg](./doc/pic1.jpg)

## ![pic2.jpg](./doc/pic2.jpg)

### Get an overview of your netto consumption

You can do this easily by adding a new dashboard (plus sign on the left side) and adding a new panel in the dashboard.

Once you have the panel follow these steps :
1) Select your data source created in the previous step.
2) Select your measurement.
3) Select the field from the measurement you are interested in (e.g. balance).
4) Aggregate per 5 minutes.
5) Select the time window you are interested in.

The graph represents the moments you inject electricity (you sell energy) which are the points above zero and the moments where you consume electricity (you buy energy) which are the points zero.  The unit of injection/consumption is watt.

## ![pic3.jpg](./doc/pic3.jpg)

## Development guide

It is possible to add support from electricity meters and inverter that are not yet supported.  I would love to add this in advance but I only have one type of electricity meter and one type of inverter at my home so I cannot really test other types.  Feel free to add new types, please contact me (sprengee54@gmail.com) in case you have questions.

### Add electricity meters

Electricity meters can be added by mapping the meter to a profile (see electricity_meter/meter.py --> meter_types).  Extra profiles can be developed if a certain meter cannot be mapped to an existing profile (make sure the same function signature is used a for the existing profiles).  Electricity meters are currently only supported via the serial port.

The profile specific function (see val_profile1 for an example) gets as input the profile data (e.g. baudrate) and the serial port reference.
it must be return a dictionary (or None in case of error) with at least the following fields :
- consumption : integer with the total power consumption in watt since the installation of the meter
- injection : integer with the total power injection in watt since the installation of the meter

Extra fields can be added to the dictionary and these fields will be logged in the influx database (examples are return1, return2, ...).

### Add inverter type

New inverter types can be added by adding entries to the variable invertor_types in inverter/inverter.py
Each inverter type has to be linked to an implemented inverter class which inherits from the class InvertorBase (see inverter/base.py).",5,5,1,0,solar-energy,"[electricity-balance, electricity-consumption, electricity-meter, electricity-meters, grafana, home-assistant, influxdb, inverter, prediction, raspberry-pi, solar, solar-energy, solar-forecasting, solar-inverter, solar-panel, solar-system, solar-tracker]",00000
818,Solaign-Android-App,alexkranias,N/A,https://github.com/alexkranias/Solaign-Android-App,https://api.github.com/repos/alexkranias/Solaign-Android-App,"Solaign is a mobile tool to maximize the power output of residential solar panel insallations! Often times residential solar panels are not oriented optimally, leading to much of the sunlight they could capture over the course of months, years, or even decades to be lost to poor panel alignment. Solaign uses the same rigourous solar positioning algorithims found in national labs, scientific publications, and atmospheric sciences research to find the best alignment for fixed-tilt solar panel instillations!","# Solaign
Solaign is a mobile tool to maximize the power output of residential solar panel instillations. Most residential solar panels are fixed in place when instialled, and often times when installed they are not oriented optimally, leading to much of the sunlight they could capture over the course of months, years, or even decades to be lost to poor panel alignment. Solaign solves this by using GPS and climate data in tandem with solar positioning algorithims to calculate the best alignment for a given solar panel installation.

## Purpose
After writing my IB Physics Extended Essay on [""Maximizing the Energy Production of a Fixed-Tilt Solar Cell""](https://drive.google.com/file/d/1nEn__nq9saxK5wogBIKF1KFQjA58j0wy/view?usp=sharing), I felt that I could take the methodology in my paper and generaize it for all possible time periods and locations in the world, and package it all into a user friendly app that could be used by solar panel instillation companies and individual solar panel owners to have a tool to assess the effectivness of their solar instillation. The hope is that through this app, we can help get the most out of the millions of residential solar panels installed today, and the millions more yet to be installed. I encourage you to [learn more about residential solar panels in the United States](https://usafacts.org/articles/how-much-solar-energy-do-homes-produce/#:~:text=Since%20then%2C%20the%20number%20of,solar%20systems%20in%20the%20US).


## How the App Works
Solaign make's use of J.J. Michalsky's Solar Position Algorithim (1988) and preliminary software written by Martin Rymes of the National Renewable Energy Laboratory (March 1998) translating much of Michalsky's algorithim into C++, which I translated to Java, and represents the sun-panel system through vector projection while using equations describing the atmosphere's effect on solar irradiance (solar energy) to calculate the total energy captured by a solar panel over a given time period. The key is that by using gradient descent, our algorithim is able to quickly and efficently calculate the optimal position needed of a solar panel to maximize how much energy it captures over the user-inputed time period for the user's specific location on Earth. With this information, the app presents it to users in simple set of instructions for them to position their panels at the optimal position just calculated. While this app is currently (8/3/2022) extremely accurate for locations with little to no rain or cloud cover throughout the year, I am currently searching for APIs and/or scientific databases to feed our algorithim hourly ""cloudiness"" data for every locaiton on Earth in addition to finding proper equations that accurately describe the effect of cloud cover on the sun's intensity (solar irradiance) in order to make Solaign one of the most accurate and accessible solar positioning tools availible.
",5,5,1,0,solar-energy,"[android-app, atmospheric-science, energy-efficiency, energy-production, mobile-app, noaa, noaa-data, positioning, solar-energy, solar-panel-angles, solar-panel-systems, solar-panels, solar-position-algorithms]",00000
819,emonTXethernet,WouterJansen,N/A,https://github.com/WouterJansen/emonTXethernet,https://api.github.com/repos/WouterJansen/emonTXethernet,"Based on the OpenEnergyMonitor systems, a small variation with communication over Ethernet.","# emonTXethernet

This repository is a collection of files used to correctly setup and use a EmonTX Shield on a Arduino. It uses a Ethernet Shield for the communication instead of the usual radio seen on EmonTX. 

This repository has the following items:
* The firmware sketch for a Arduino to measure the EmonTX CT sensor inputs and send them with a HTTP GET request to EmonCMS.
* 3D printing files for a case that holds a Arduino Uno with a mounted standard Ethernet Shield and EmonTX Shield.
* Simplistic OpenHab instructions for correctly reading the EmonCMS MQTT messages and display them on your sitemap.
* Custom PCB Board files to make a simplified EmonTX Board soley focused on the CT input sensors and 9V AC-AC adapter. Without all components for UART or radio communication. 

This is all based on original work by others. See the invidiual files for more credit information. Mostly OpenEnergyMonitor is responsible for all the posibilities seen here. https://openenergymonitor.org/
",5,5,1,0,solar-energy,"[arduino, emoncms, emontx, emontx-shield, energy-monitor, ethernet-shield, openenergymonitor, solar, solar-energy]",00000
820,solar.io,domib97,N/A,https://github.com/domib97/solar.io,https://api.github.com/repos/domib97/solar.io,"Smart Home Photovoltaik / ( Multi- ) Inverter RJ45 MPPT /   Logger with influxDB and grafana to run on: docker, arm32/64 like Pi4, Synology (NAS), UnRaid, OpenMediaVault","# solar.io

[![Join the chat at https://gitter.im/solar-io/community](https://badges.gitter.im/solar-io/community.svg)](https://gitter.im/solar-io/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![GPLv3 license](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://opensource.org/licenses/GPL-3.0) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/domib97/solar.io/pulls) ![GitHub pull requests](https://img.shields.io/github/issues-pr/domib97/solar.io?style=flat-square)
![GitHub issues](https://img.shields.io/github/issues/domib97/solar.io?style=flat-square) ![GitHub last commit](https://img.shields.io/github/last-commit/domib97/solar.io)

![GitHub language count](https://img.shields.io/github/languages/count/domib97/solar.io?style=flat-square) ![GitHub top language](https://img.shields.io/github/languages/top/domib97/solar.io?style=flat-square) ![GitHub search hit counter](https://img.shields.io/github/search/domib97/solar.io/goto?style=flat-square) ![GitHub repo size](https://img.shields.io/github/repo-size/domib97/solar.io?style=flat-square)

--------------------------------------------------------------------------------------------------------------------

### -> Smart Home Photovoltaik / ( Multi- ) Inverter RJ45/RS485 MPPT / Logger with influxDB and grafana

### -> to run on: docker (*thanks to* **@DeBaschdi**), arm32/64 like Pi4 (Pi OS Lite, Debian Buster), Synology (NAS), UnRaid, OpenMediaVault

### -> orginally created by *@Ulrich* and only distributed on his website: https://solaranzeige.de/phpBB3/solaranzeige.php

### -> goal of this repo: a leight-weight, fully documented, GPLv3 fork of ""solaranzeige""

--------------------------------------------------------------------------------------------------------------------

### To Do's :

- [x] *port solaranzeige.de to docker: thanks to* **@DeBaschdi** : https://github.com/DeBaschdi/docker.solaranzeige
- [x] *make it GPLv3 compliant*
- [ ] port solaranzeige.de to Pi OS Lite -> WIP
- [ ] finish debloating solaranzeige.de
- [ ] complete english doc's
- [ ] pull request docker.solaranzeige
- [ ] openHAB integration : https://www.openhab.org
- [ ] add new features like alternitive dashboards : https://github.com/Tafkas/solarpi
- [ ] add fancy animations : https://github.com/reptilex/tesla-style-solar-power-card
- [ ] native weather forecast and pv-energy-prediction
- [ ] make the predictions more precise : https://github.com/ColasGael/Machine-Learning-for-Solar-Energy-Prediction
- [ ] create a dummmy-inverter for testing without real hardware
- [ ] ?(python port)? : https://github.com/basking-in-the-sun2000/solar-logger

**If anyone can help with anything, feel free to contribute and make a pull request!**

--------------------------------------------------------------------------------------------------------------------

### List of currently supported devices:
- IVT controller SCplus and SCDplus
- Steca TAROM 6000 and TAROM 4545 / Solarix PLI 5000-48
- Tracer series controllers
- Victron BlueSolar and SmartSolar controllers , Phoenix inverters
- AEconversion INV inverter
- Effekta AX series
- Voltronic Axpert series
- InfiniSolar PIP series, V series
- MPPSolar PIP HSE / MSE series, PIP-MS/MSX series, MIP Hybrid 3 phases 10kW,
- MPPSolar 2424-msd with 2 x MPPT, 2424-msd with 2 x MPPT, 5048MK and 5048GK
- SolarMax S series and MT series
- Fronius Symo inverter 3 phases and others
- AutarcTech Joulie-16 BMS battery management system
- Rover series from Renogy (MPPT charge controller)
- US2000B battery management system
- SolarEdge inverters
- KOSTAL Plenticore and Pico series, Pico series with RS485 connection
- FSP Solar PowerManager Hybrid series
- S10E and S10 mini from E3 / DC
- eSmart3 charge controller
- Toyo charge controller (identical to Rover)
- Smart Energy Meter from KOSTAL and others
- Sonoff / MQTT / Tasmota
- Infini x Kw hybrid inverter 1 phase (protocol 16)
- Solar batteries
- SMA Sunny Tripower and Sunny Island
- HRDi Marlec charge controller (PV and wind power)
- go-eCharger Wallbox
- Keba wallbox
- Shelly 2.5, 3EM
- KACO inverter TL3 series
- SDM630 Energy Meter
- Wallbe wallbox
- EAsun ISolar V III Off-Grid inverter ( like MPPSolar 5048 MK and GK series),
- EAsun ISolar SPV SMV 1KVA-5KVA inverter ( like Effakta AX series )
- Delta inverter SI 2500
- ALPHA ESS T10 inverter
- Simple EVSE wallbox
- openWB wallbox
- Senec power storage
- Webasto wallbox
- Phocos Any-Grid
- Huawei SUN2000 inverter
- Phoenix Contact Wallbox
- Growatt inverter

--------------------------------------------------------------------------------------------------------------------


",5,5,1,2,solar-energy,"[docker, grafana-influxdb, mppt, mppt-charger, raspberry-pi, rj45, smart-home, solar, solar-energy, solar-system]",00000
821,meterN,jeanmarc77,N/A,N/A,https://api.github.com/repos/jeanmarc77/meterN,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C196:336C:2CEFF1B:5C1EE92:65223FF9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
822,PVsolar,henfrydls,N/A,https://github.com/henfrydls/PVsolar,https://api.github.com/repos/henfrydls/PVsolar,A graphical user interface (GUI) able to help distribute solar panels into an inverter MPPT inputs and estimate amount of solar panels needed to supply a user demand based on location.,"# PVsolar

<div id=""top""></div>

<!-- PROJECT LOGO -->
<br />
<div align=""center"">
  <a href=""https://github.com/henfrydls/PVsolar"">
    <img src=""https://github.com/henfrydls/PVsolar/blob/main/Images/logo.ico"" alt=""Logo"" width=""80"" height=""80"">
  </a>

  <h3 align=""center"">PVsolar</h3>

  <p align=""center"">
    A graphical user interface (GUI) able to help distribute solar panels into an inverter MPPT inputs and estimate amount of solar panels needed to supply a user demand based on location.
    <br />
    <a href=""#getting-started"">Installation</a>
    ·
    <a href=""https://github.com/henfrydls/PVsolar/issues"">Report Bug</a>
    ·
    <a href=""https://github.com/henfrydls/PVsolar/issues"">Request Feature</a>
  </p>
</div>



<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
      <ul>
        <li><a href=""#built-with"">Built With</a></li>
      </ul>
    </li>
    <li>
      <a href=""#getting-started"">Getting Started</a>
      <ul>
        <li><a href=""#prerequisites"">Prerequisites</a></li>
        <li><a href=""#installation"">Installation</a></li>
      </ul>
    </li>
    <li><a href=""#usage"">Usage</a></li>
    <li><a href=""#contributing"">Contributing</a></li>
    <li><a href=""#license"">License</a></li>
    <li><a href=""#contact"">Contact</a></li>
    <li><a href=""#acknowledgments"">Acknowledgments</a></li>
  </ol>
</details>



<!-- ABOUT THE PROJECT -->
## About The Project

This program is oriented toward photovoltaic power generation systems. In photovoltaic systems energy is firstly obtained in DC and, to convert it to the same type of energy we received from the grid, we need to use inverters.

There are three types of solar inverters available. 

These types are:
* String inverters 
* Power optimizers + inverter
* Microinverters. 

This program is focused on string inverters. In this type of inverter, solar panels are distributed on what's known as a Maximum Power Point Tracker (MPPT). As the distribution of photovoltaic panels increases, the distribution becomes more complicated.

This program aims to help efficiency in the distribution of solar panels in inverters (MPPT).

<p align=""right"">(<a href=""#top"">back to top</a>)</p>



### Built With

* [Tkinter](https://docs.python.org/3/library/tkinter.html)
* [Pillow](https://pillow.readthedocs.io/en/stable/)
* [pandas](https://pandas.pydata.org/)
* [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)
* [urllib](https://docs.python.org/3/library/urllib.html)
* [OpenCageGeocode](https://opencagedata.com/)


<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- GETTING STARTED -->
## Getting Started

### Prerequisites

Make sure your Python version is Python 3.7 or above. Run the following command to confirm

  ```sh
  python --version
  ```

### Installation

_Here is an example of how you can install and run this app._

1. Clone the repo
   ```sh
   git clone https://github.com/henfrydls/PVsolar.git
   ```
2. Change directory
   ```sh
   cd PVsolar
   ```
3. Install required libraries `requirements.txt`
   ```sh
   pip install -r requirements.txt
   ```
4. Run the app
   ```py
   python visual.py
   ```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>


<div id=""usage""></div>

<!-- USAGE EXAMPLES -->
## Usage Examples

Let's suppose you have the following configuration:

* 1 string type inverter: Canadian Solar Comercial inverter 75kW (8 MPPT, 16 inputs) [CSI-75K-T480GL02-U](https://static.csisolar.com/wp-content/uploads/sites/3/2021/12/06114422/CanadianSolar_Inverter_3ph_75-100KW-NA_V1.6_June-2021.pdf)
* 160 Solar panels: Canadian Solar 590Wp [HiKu6 Mono 590W](https://www.canadiansolar.com/wp-content/uploads/2020/06/Canadian_Solar-Flyer-HiKu6_CS6Y-MS_EN.pdf)

Notice that this configuration keeps our DC/AC ratio to 1.259. _Learn more about DC/AC ratio here [Ideal Ratio](https://www.solarpowerworldonline.com/2016/07/solar-inverters-clipping-dcac-inverter-load-ratio-ideal/)_

A String is a certain amount of solar modules connected in series. It's important to know our maximum string size based on our inverters, solar panels, locations, etc. Hopefully, most PV sizing software nowadays includes this calculation [How to Calculate PV String Size](https://www.mayfield.energy/blog/pv-string-size)

<div align=""center"">

![image](https://user-images.githubusercontent.com/78233072/163701020-691acd92-7659-495a-9ee3-c82aa3aa4e0b.png)

  </div>
  
The maximum number of modules is **18 modules** in series *based on a certain location*

After all previous data is determined the question is **""How can I optimize my energy generation?""** and here is where ***PVsolar*** comes into action. 

<div align=""center"">

![image](https://user-images.githubusercontent.com/78233072/163701517-82a33cb8-d48c-474b-ac5e-093d5ae23d57.png)

  </div>
  
Just fill in the required information and *PVsolar* will give you the best matches for your case of study. 

<div align=""center"">
  
![image](https://user-images.githubusercontent.com/78233072/163701585-efef2f22-c4cb-4262-9767-12796bc9da35.png)

  </div>
  
The app will always prioritize the best result. In this case, your best match will be to wire 7 strings consisting of 18 modules in series and 2 strings of 17 modules. 

In case you need more configurations, the app will always give you all matches found on the specified intervals.

This type of MPPT distribution as of now is not available in most software destinated for Photovoltaic systems, although some of them can include some features of it. I hope to see most software coming with this feature shortly. 


<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- CONTRIBUTING -->
## Contributing

Contributions are what makes the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.

If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"".
Don't forget to give the project a star! Thanks again!

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- LICENSE -->
## License

Distributed under the MIT License. See [LICENSE](https://github.com/henfrydls/PVsolar/blob/main/LICENSE) for more information.

<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- CONTACT -->
## Contact

Henfry De Los Santos - henfry@protonmail.com - henfry.delossantos@gmail.com

Project Link: [https://github.com/henfrydls/PVsolar](https://github.com/henfrydls/PVsolar)

<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- ACKNOWLEDGMENTS -->
## Acknowledgments

<div>Iconos diseñados por <a href=""https://www.flaticon.es/autores/srip"" title=""srip"">srip
</a> from <a href=""https://www.flaticon.es/"" title=""Flaticon"">www.flaticon.es</a></div>
",5,5,2,0,solar-energy,"[photovoltaic, python, solar-energy, tkinter]",00000
823,SolarLog,ManuelBu96,N/A,https://github.com/ManuelBu96/SolarLog,https://api.github.com/repos/ManuelBu96/SolarLog,"An API to interact with Data from your SolarLog (weekly backup mails, FTP backups and the JSON Interface). The project is started using Docker and is immediately ready for use through an Angular frontend. All data is stored within the Postgres database and can be accessed within the Docker container.","# solarlog project

This project uses Quarkus, the Supersonic Subatomic Java Framework.

If you want to learn more about Quarkus, please visit its website: https://quarkus.io/ .

## Running the application in dev mode

You can run your application in dev mode that enables live coding using:
```shell script
./mvnw compile quarkus:dev
```

## Packaging and running the application

The application can be packaged using:
```shell script
./mvnw package
```
It produces the `solarlog-1.0.0-SNAPSHOT-runner.jar` file in the `/target` directory.
Be aware that it’s not an _über-jar_ as the dependencies are copied into the `target/lib` directory.

If you want to build an _über-jar_, execute the following command:
```shell script
./mvnw package -Dquarkus.package.type=uber-jar
```

The application is now runnable using `java -jar target/solarlog-1.0.0-SNAPSHOT-runner.jar`.

## Creating a native executable

You can create a native executable using: 
```shell script
./mvnw package -Pnative
```

Or, if you don't have GraalVM installed, you can run the native executable build in a container using: 
```shell script
./mvnw package -Pnative -Dquarkus.native.container-build=true
```

You can then execute your native executable with: `./target/solarlog-1.0.0-SNAPSHOT-runner`

If you want to learn more about building native executables, please consult https://quarkus.io/guides/maven-tooling.html.

# RESTEasy JAX-RS

<p>A Hello World RESTEasy resource</p>

Guide: https://quarkus.io/guides/rest-json
",5,5,3,5,solar-energy,"[api-rest, java, photovoltaic, quarkus, quarkus-extension, solar, solar-energy, solarlog, solarlogger]",00000
824,PVsolar,henfrydls,N/A,https://github.com/henfrydls/PVsolar,https://api.github.com/repos/henfrydls/PVsolar,A graphical user interface (GUI) able to help distribute solar panels into an inverter MPPT inputs and estimate amount of solar panels needed to supply a user demand based on location.,"# PVsolar

<div id=""top""></div>

<!-- PROJECT LOGO -->
<br />
<div align=""center"">
  <a href=""https://github.com/henfrydls/PVsolar"">
    <img src=""https://github.com/henfrydls/PVsolar/blob/main/Images/logo.ico"" alt=""Logo"" width=""80"" height=""80"">
  </a>

  <h3 align=""center"">PVsolar</h3>

  <p align=""center"">
    A graphical user interface (GUI) able to help distribute solar panels into an inverter MPPT inputs and estimate amount of solar panels needed to supply a user demand based on location.
    <br />
    <a href=""#getting-started"">Installation</a>
    ·
    <a href=""https://github.com/henfrydls/PVsolar/issues"">Report Bug</a>
    ·
    <a href=""https://github.com/henfrydls/PVsolar/issues"">Request Feature</a>
  </p>
</div>



<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
      <ul>
        <li><a href=""#built-with"">Built With</a></li>
      </ul>
    </li>
    <li>
      <a href=""#getting-started"">Getting Started</a>
      <ul>
        <li><a href=""#prerequisites"">Prerequisites</a></li>
        <li><a href=""#installation"">Installation</a></li>
      </ul>
    </li>
    <li><a href=""#usage"">Usage</a></li>
    <li><a href=""#contributing"">Contributing</a></li>
    <li><a href=""#license"">License</a></li>
    <li><a href=""#contact"">Contact</a></li>
    <li><a href=""#acknowledgments"">Acknowledgments</a></li>
  </ol>
</details>



<!-- ABOUT THE PROJECT -->
## About The Project

This program is oriented toward photovoltaic power generation systems. In photovoltaic systems energy is firstly obtained in DC and, to convert it to the same type of energy we received from the grid, we need to use inverters.

There are three types of solar inverters available. 

These types are:
* String inverters 
* Power optimizers + inverter
* Microinverters. 

This program is focused on string inverters. In this type of inverter, solar panels are distributed on what's known as a Maximum Power Point Tracker (MPPT). As the distribution of photovoltaic panels increases, the distribution becomes more complicated.

This program aims to help efficiency in the distribution of solar panels in inverters (MPPT).

<p align=""right"">(<a href=""#top"">back to top</a>)</p>



### Built With

* [Tkinter](https://docs.python.org/3/library/tkinter.html)
* [Pillow](https://pillow.readthedocs.io/en/stable/)
* [pandas](https://pandas.pydata.org/)
* [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)
* [urllib](https://docs.python.org/3/library/urllib.html)
* [OpenCageGeocode](https://opencagedata.com/)


<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- GETTING STARTED -->
## Getting Started

### Prerequisites

Make sure your Python version is Python 3.7 or above. Run the following command to confirm

  ```sh
  python --version
  ```

### Installation

_Here is an example of how you can install and run this app._

1. Clone the repo
   ```sh
   git clone https://github.com/henfrydls/PVsolar.git
   ```
2. Change directory
   ```sh
   cd PVsolar
   ```
3. Install required libraries `requirements.txt`
   ```sh
   pip install -r requirements.txt
   ```
4. Run the app
   ```py
   python visual.py
   ```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>


<div id=""usage""></div>

<!-- USAGE EXAMPLES -->
## Usage Examples

Let's suppose you have the following configuration:

* 1 string type inverter: Canadian Solar Comercial inverter 75kW (8 MPPT, 16 inputs) [CSI-75K-T480GL02-U](https://static.csisolar.com/wp-content/uploads/sites/3/2021/12/06114422/CanadianSolar_Inverter_3ph_75-100KW-NA_V1.6_June-2021.pdf)
* 160 Solar panels: Canadian Solar 590Wp [HiKu6 Mono 590W](https://www.canadiansolar.com/wp-content/uploads/2020/06/Canadian_Solar-Flyer-HiKu6_CS6Y-MS_EN.pdf)

Notice that this configuration keeps our DC/AC ratio to 1.259. _Learn more about DC/AC ratio here [Ideal Ratio](https://www.solarpowerworldonline.com/2016/07/solar-inverters-clipping-dcac-inverter-load-ratio-ideal/)_

A String is a certain amount of solar modules connected in series. It's important to know our maximum string size based on our inverters, solar panels, locations, etc. Hopefully, most PV sizing software nowadays includes this calculation [How to Calculate PV String Size](https://www.mayfield.energy/blog/pv-string-size)

<div align=""center"">

![image](https://user-images.githubusercontent.com/78233072/163701020-691acd92-7659-495a-9ee3-c82aa3aa4e0b.png)

  </div>
  
The maximum number of modules is **18 modules** in series *based on a certain location*

After all previous data is determined the question is **""How can I optimize my energy generation?""** and here is where ***PVsolar*** comes into action. 

<div align=""center"">

![image](https://user-images.githubusercontent.com/78233072/163701517-82a33cb8-d48c-474b-ac5e-093d5ae23d57.png)

  </div>
  
Just fill in the required information and *PVsolar* will give you the best matches for your case of study. 

<div align=""center"">
  
![image](https://user-images.githubusercontent.com/78233072/163701585-efef2f22-c4cb-4262-9767-12796bc9da35.png)

  </div>
  
The app will always prioritize the best result. In this case, your best match will be to wire 7 strings consisting of 18 modules in series and 2 strings of 17 modules. 

In case you need more configurations, the app will always give you all matches found on the specified intervals.

This type of MPPT distribution as of now is not available in most software destinated for Photovoltaic systems, although some of them can include some features of it. I hope to see most software coming with this feature shortly. 


<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- CONTRIBUTING -->
## Contributing

Contributions are what makes the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.

If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"".
Don't forget to give the project a star! Thanks again!

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- LICENSE -->
## License

Distributed under the MIT License. See [LICENSE](https://github.com/henfrydls/PVsolar/blob/main/LICENSE) for more information.

<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- CONTACT -->
## Contact

Henfry De Los Santos - henfry@protonmail.com - henfry.delossantos@gmail.com

Project Link: [https://github.com/henfrydls/PVsolar](https://github.com/henfrydls/PVsolar)

<p align=""right"">(<a href=""#top"">back to top</a>)</p>



<!-- ACKNOWLEDGMENTS -->
## Acknowledgments

<div>Iconos diseñados por <a href=""https://www.flaticon.es/autores/srip"" title=""srip"">srip
</a> from <a href=""https://www.flaticon.es/"" title=""Flaticon"">www.flaticon.es</a></div>
",5,5,2,0,solar-energy,"[photovoltaic, python, solar-energy, tkinter]",00000
825,solarian-datalogger,orcunbaslak,N/A,https://github.com/orcunbaslak/solarian-datalogger,https://api.github.com/repos/orcunbaslak/solarian-datalogger,Solarian Datalogger,"<!--
*** Thanks for checking out this README Template. If you have a suggestion that would
*** make this better, please fork the repo and create a pull request or simply open
*** an issue with the tag ""enhancement"".
*** Thanks again! Now go create something AMAZING! :D
-->





<!-- PROJECT SHIELDS -->
<!--
*** I'm using markdown ""reference style"" links for readability.
*** Reference links are enclosed in brackets [ ] instead of parentheses ( ).
*** See the bottom of this document for the declaration of the reference variables
*** for contributors-url, forks-url, etc. This is an optional, concise syntax you may use.
*** https://www.markdownguide.org/basic-syntax/#reference-style-links
-->
[![Contributors][contributors-shield]][contributors-url]
[![Forks][forks-shield]][forks-url]
[![Stargazers][stars-shield]][stars-url]
[![Issues][issues-shield]][issues-url]
[![MIT License][license-shield]][license-url]
[![LinkedIn][linkedin-shield]][linkedin-url]



<!-- PROJECT LOGO -->
<br />
<p align=""center"">
  <a href=""https://github.com/orcunbaslak/solarian-datalogger"">
    <img src=""https://github.com/orcunbaslak/solarian-datalogger/blob/master/images/solarian_logo.png?raw=true"" alt=""Logo"" width=""411"" height=""162"">
  </a>

  <h3 align=""center"">Solarian Datalogger</h3>

  <p align=""center"">
    Solarian datalogger is a datalogger for solar systems. You can write a driver for your device
    and call the driver using the YAML file provided. You should implement a get_data() method
    to correctly read all data and return a JSON file. 
    <br />
    <br />
    <a href=""https://github.com/orcunbaslak/solarian-datalogger/issues"">Report Bug</a>
    ·
    <a href=""https://github.com/orcunbaslak/solarian-datalogger/issues"">Request Feature</a>
  </p>
</p>



<!-- TABLE OF CONTENTS -->
## Table of Contents

* [About the Project](#about-the-project)
  * [Built With](#built-with)
* [Getting Started](#getting-started)
  * [Prerequisites](#prerequisites)
  * [Installation](#installation)
* [Usage](#usage)
* [Roadmap](#roadmap)
* [Contributing](#contributing)
* [License](#license)
* [Similar Projects](#similar-projects)
* [Contact](#contact)



<!-- ABOUT THE PROJECT -->
## About The Project

There are many causes for people to write code. As an engineering company owner; I was frusturated to see how incompetent datalogging companies
doing business around. Data losses, buggy software and other issues led me to write a minimalist piece of software for solar system just to get the
basic data from inverters/sensors/string combiners into our influxdb server.

Here's why:
* As engineers; our time is money. Bad data makes us invest more time in it. We don't want to fix someone else's errors.
* Good data yields good engineering analysis and accurate results. You deserve more **precise** and **accurate** results.
* Why consume the time trying to fix someone elses inaccurate data instead of enjoying the sun outside with your family?

Please feel free to fork or send pull requests. Please keep the code as minimal as possible.

### Built With
This project has been coded with Python 3. Modbus-tk library has been chosen for device communication. Paho MQTT is choosen for MQTT communication
* [Python](https://www.python.org/)
* [modbus-tk](https://github.com/ljean/modbus-tk)
* [PyYAML](https://github.com/yaml/pyyaml)
* [Paho MQTT](https://github.com/eclipse/paho.mqtt.python)


<!-- GETTING STARTED -->
## Getting Started

Follow the steps below to prepare the environment for the project.

### Prerequisites

First you need to get Python 3 installed and running with dependencies correctly installed.
* bash
```sh
sudo apt update
sudo apt-get -y dist-upgrade
sudo apt-get -y install git python3-distutils gcc python3-dev parallel lftp
sudo curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
sudo python3 get-pip.py
sudo pip3 install pyyaml modbus_tk psutil paho-mqtt graypy
```

### Installation

1. Clone the repo (Change the directory if you want)
```sh
git clone https://github.com/orcunbaslak/solarian-datalogger /home/pi/solarian-datalogger
```
2. Create a configuration file from the sample
```sh
cd config
cp sample-config.yml config.yml
```
3. Edit the configuration file `config.yml`
```sh
nano config.yml
```
4. Create a MQTT file from the sample (OPTIONAL)
```sh
cp sample-mqtt.yml mqtt.yml
```
5. Edit the configuration file `mqtt.yml` (OPTIONAL)
```sh
nano mqtt.yml
```
6. Create a GrayLog file from the sample (OPTIONAL)
```sh
cp sample-graylog.yml graylog.yml
```
7. Edit the configuration file `graylog.yml` (OPTIONAL)
```sh
nano graylog.yml
```


<!-- USAGE EXAMPLES -->
## Usage

You can feed the file to Python3 interpreter and it's all good to go given you've prepared a correct YAML file and 
network/serial connections are working as intended.

```sh
python3 datalogger.py
```

You can use specific args to modify inner workings of the script
```sh
  --config CONFIG   YAML file containing device settings. Default ""config.yml""
  --log LOG         Log levels, DEBUG, INFO, WARNING, ERROR or CRITICAL
  --pi-analytics    Enable or disable RaspberryPi device data acquisition
  --verbose         Print the acquired data to console
  --write-disabled  Disables file writing. Dry-run.
  --mqtt            Enables the MQTT feature. Mqtt config file must be set.
  --graylog         Pushes logging data to the specified GrayLog server. Graylog config file must be set.
```

<!-- ROADMAP -->
## Roadmap

See the [open issues](https://github.com/orcunbaslak/solarian-datalogger/issues) for a list of proposed features (and known issues).



<!-- CONTRIBUTING -->
## Contributing

Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are **greatly appreciated**.

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/NewInverter`)
3. Commit your Changes (`git commit -m 'Add a new inverter driver'`)
4. Push to the Branch (`git push origin feature/NewInverter`)
5. Open a Pull Request



<!-- LICENSE -->
## License

Distributed under the GNU GPL v3 License. See `LICENSE` for more information.

<!-- SIMILAR PROJECTS -->
## Similar Projects

You can find a list of similar projects that I used for help and inspiration.

* [Solariot](https://github.com/meltaxa/solariot)
* [Modbus-logger](https://github.com/GuillermoElectrico/modbus-logger)
* [PVStats](https://github.com/ptarcher/pvstats)
* [Modbus4MQTT](https://github.com/tjhowse/modbus4mqtt)
* [Energy-Meter-Logger](https://github.com/samuelphy/energy-meter-logger)


<!-- CONTACT -->
## Contact

Orçun Başlak - [@orcunbaslak](https://twitter.com/orcunbaslak) - [website](https://orcun.baslak.com/) - orcun.baslak@solarian.com.tr

Solarian Enerji - [@solarianenerji](https://twitter.com/solarianenerji) - [website](https://www.solarian.com.tr/en/) - info@solarian.com.tr

Project Link: [https://github.com/orcunbaslak/solarian-datalogger](https://github.com/orcunbaslak/solarian-datalogger)


<!-- MARKDOWN LINKS & IMAGES -->
<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->
[contributors-shield]: https://img.shields.io/github/contributors/orcunbaslak/solarian-datalogger.svg?style=flat-square
[contributors-url]: https://github.com/orcunbaslak/solarian-datalogger/graphs/contributors
[forks-shield]: https://img.shields.io/github/forks/orcunbaslak/solarian-dataloggere.svg?style=flat-square
[forks-url]: https://github.com/orcunbaslak/solarian-datalogger/network/members
[stars-shield]: https://img.shields.io/github/stars/orcunbaslak/solarian-datalogger.svg?style=flat-square
[stars-url]: https://github.com/orcunbaslak/solarian-datalogger/stargazers
[issues-shield]: https://img.shields.io/github/issues/orcunbaslak/solarian-datalogger.svg?style=flat-square
[issues-url]: https://github.com/orcunbaslak/solarian-datalogger/issues
[license-shield]: https://img.shields.io/github/license/orcunbaslak/solarian-datalogger.svg?style=flat-square
[license-url]: https://github.com/orcunbaslak/solarian-datalogger/blob/master/LICENSE
[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=flat-square&logo=linkedin&colorB=555
[linkedin-url]: https://linkedin.com/in/orcunbaslak",5,5,2,0,solar-energy,"[datalogger, photovoltaic, photovoltaics, renewable-energy, renewables, solar-energy]",00000
826,Gravity-center-solar-tracker,Aightm8,N/A,https://github.com/Aightm8/Gravity-center-solar-tracker,https://api.github.com/repos/Aightm8/Gravity-center-solar-tracker,"A novel solar tracker; cheaper, simpler and less power intensive than traditional systems ","# Gravity-center-solar-tracker
A novel solar tracker; cheaper, simpler and less power intensive than traditional systems 
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Gravity-center-solar-tracker/blob/master/Image%20files/gravity%20center%20solar%20tracker%20white%20%5BCC%20BY%5D.PNG)
<br>
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Gravity-center-solar-tracker/blob/master/Image%20files/gravity%20center%20solar%20tracker%20%5BCC%20BY%5D.PNG)
<br>
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Gravity-center-solar-tracker/blob/master/Image%20files/dual%20axis%20gravity%20center%20solar%20tracker%20%5BCC%20BY%5D.PNG)
<br>
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Gravity-center-solar-tracker/blob/master/gravity%20center%20solar%20tracker%20prototype%20model/_MG_9337.JPG)
<br>
Fig- Prototype model
<br>
<br>
Prototype model working- <br>
vid.1- https://youtu.be/S70iIkvd-08 <br>
vid.2- https://youtu.be/kp8efreXQTA <br>
<br>
<br>
If you have tried balancing objects on their center of gravity, you may have observed that objects are easy to move around when in this state, requiring little force. It is this principle that is at the core of the gravity center solar tracker's functioning.
A solar array forming a single panel is balanced on its center of gravity on a support beam. When the panel is balanced in this way, it can be easily moved with little force. Four motors are present ( in the case of dual axis. Two if single axis ) each with a winch, wound with a cable that is also attached to the panel. Each at four seperate points. These motors pull on the panel individually , thus altering the position of the panel. By using four motors, we can achieve motion in two axis. This system can be used to track the sun. Either by using a photoresistor setup for active tracking or preferably, by scheduled tracking which should be more efficient. The system can run for a certain duration at suitable intervals instead of constantly tracking to save power. This setup may be more susceptible to wind. However this can be solved by installing brakes on the cables; which release when the motor is active and tighten when the motor is off, so wind cannot move the panel. The motor, the winch, the brake and other components may all be installed into a single unit; which will be refered to as the 'motor box'. The motor box will be the the primary electro-mechanical unit. It can be easily replaced, maintained, sealed from the environment, installed and moved around. The motor and its mechanical components can be relatively very small. This is possible because as the panel rests on its center of gravity, its inertia is low. So a small motor with limited torque is capable of moving the panel { refer the prototype images, videos and notes for further insight }. When compared to traditional systems; the gravity center solar tracker is therefore low cost, requires less power, easily maintainable, easily installable ( and on almost any terrain ), more weather resistant and suitable for a wide range of tracking applications.
<br>
<br>
Diagrams, design files and prototype files are available above.
<br>
<br>
The Gravity center solar tracker is licensed under the TAPR Open Hardware License (www.tapr.org/OHL). <br>
In support of open source innovation in strengthening renewables and combating climate change.
",5,5,2,0,solar-energy,"[green-energy, open-source, open-source-design, open-source-hardware, opensource, renewable-energy, renewables, solar, solar-energy, solar-tracker, solar-tracking-panels, sun-tracker, sustainable]",00000
827,solar-learning-2021,jhelvy,N/A,https://github.com/jhelvy/solar-learning-2021,https://api.github.com/repos/jhelvy/solar-learning-2021,"This repository contains the data and code to reproduce results from our study titled ""Quantifying the cost savings of global solar photovoltaic supply chains"". The link below is to an app to assess the sensitivity of our study outcomes to different modeling assumptions.","
<!-- README.md is generated from README.Rmd. Please edit that file -->

You can use this DOI to cite this repository:

[![DOI](https://zenodo.org/badge/373634772.svg)](https://zenodo.org/badge/latestdoi/373634772)

This repository contains the data and code to reproduce results from our
study titled [**“Quantifying the cost savings of global solar
photovoltaic supply
chains”**](https://doi.org/10.1038/s41586-022-05316-6). All code is
written using the [R programming language](https://www.r-project.org/).

**Authors**: John Paul Helveston, Gang He, & Michael R. Davidson.

**DOI**:
[10.1038/s41586-022-05316-6](https://doi.org/10.1038/s41586-022-05316-6)

**Abstract**: Achieving carbon neutrality requires deploying renewable
energy at unprecedented speed and scale, yet countries sometimes
implement policies that increase costs by restricting the free flow of
capital, talent, and innovation in favor of localizing benefits such as
economic growth, employment, and trade surpluses. Here we assess the
cost savings from a globalized solar photovoltaic (PV) module supply
chain. We develop a two-factor learning model using historical capacity,
component, and input material price data of solar PV deployment in the
U.S., Germany, and China. We estimate that the globalized PV module
market has saved PV installers in the U.S. \$24 (\$19 - \$31) billion,
Germany \$7 (\$5 - \$9) billion, and China \$36 (\$26 - \$45) billion
from 2008 to 2020 compared to a counterfactual scenario where domestic
manufacturers supply an increasing proportion of installed capacities
over a 10-year period. Projecting the same scenario forward from 2020
results in estimated solar module prices that are approximately 20% -
30% higher in 2030 compared to a future with globalized supply chains.
International climate policy benefits from a globalized low-carbon value
chain, and these results point to the need for complementary policies to
mitigate welfare distribution effects and potential impacts on
technological crowding-out.

# File organization

## data

Contains all of the “raw” data used in our analyses as well as a single
`formatted.Rds` file that when loaded into R is a list of formatted data
frames, which is generated by running the script at
`code/2format_data.R`.

## code

| file or folder       | description                                                                                                                                                                                      |
|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `0a_run.R`           | A single file to reproduce all analyses.                                                                                                                                                         |
| `0functions.R`       | Custom functions used in our analyses.                                                                                                                                                           |
| `0setup.R`           | Loads libraries, creates `dir` object (a list of paths to folders and objects), and loads `0functions.R`.                                                                                        |
| `1format_data.R`     | Formats and harmonizes all raw data and saves the result as the list object at `data/formatted.Rds`.                                                                                             |
| `2learning_curves.R` | Estimates learning curve models and saves all results as the list object at `output/lr_models.Rds`.                                                                                              |
| `3scenarios_hist.R`  | Uses the estimates learning curves models to compute differences in historical costs under different scenarios. Results are saved as the list object at `output/historical_scenarios.Rds`.       |
| `4scenarios_proj.R`  | Uses the estimates learning curves models to compute differences in projected future costs under different scenarios. Results are saved as the list object at `output/projection_scenarios.Rds`. |
| `5charts.R`          | Code to reproduce all charts used in our analyses.                                                                                                                                               |
| `6summary.R`         | Code to print out a summary of all main results.                                                                                                                                                 |
| `7tables.Rmd`        | Generates all tables in the `output/tables.docx` file.                                                                                                                                           |
| `8alt_models.R`      | Code to reproduce several alternative models that we considered as sensitivity checks. These results are presented in Extended Data Tables 2 - 4.                                                |

## figs

All charts created in the `code/5charts.R` file are saved here in 3
formats: eps, pdf, and png.

## output

All model / scenario analyses outputs are saved here.

# Reproducing the analyses

## Installation setup

Reproducing the analyses requires the follow setup steps:

1.  Install [R](https://www.r-project.org/).
2.  Install
    [RStudio](https://www.rstudio.com/products/rstudio/download/)
    (optional, though recommended).
3.  If on a Mac, install [XQuartz](https://www.xquartz.org/) to enable
    Cairo graphics (for reproducing figures).
4.  Download the files in this repository.
5.  Open the `solar-learning-2021.Rproj` file, which sets the working
    directory to the root of the files in this repository. The
    repository root must be set as the working directory otherwise the
    code will error.
6.  Install additional required R packages by running the code in the
    `/code/0install.R` file (you’ll only need to install these packages
    once).

## Full reproduction

The `code/0a_run.R` file contains scripts to fully reproduce the entire
set of analyses in sequential order. This is purely for convenience to
quickly reproduce everything. Each file can be separately run if
desired.

## Setup

Most R files in the `/code` folder start with the following line to
execute the `/code/0setup.R` file, which loads all required libraries
and sets several global variables such as starting and stopping years to
bound the analyses:

``` r
source(here::here('code', '0setup.R'))
```

## Formatting the data

All of the raw data are stored in the `/data` folder. The script at
`/code/1format_data.R` formats all of this data and saves it as a list
stored at `/data/formatted.Rds`.

To load this list of formatted data, run this line after sourcing the
`/code/0setup.R` file:

``` r
data <- readRDS(dir$data_formatted)

# Names of the formatted data frames:
names(data)
```

    ##  [1] ""pvProduction""            ""silicon""                
    ##  [3] ""shipments""               ""plantsize""              
    ##  [5] ""irenaCumCapacityMw""      ""nrelCapacity""           
    ##  [7] ""nrelCost""                ""seiaCapacity""           
    ##  [9] ""lbnlCost""                ""usNrel""                 
    ## [11] ""us""                      ""china""                  
    ## [13] ""germany""                 ""world""                  
    ## [15] ""rates""                   ""hist_us""                
    ## [17] ""hist_china""              ""hist_germany""           
    ## [19] ""proj_nat_trends_us""      ""proj_sus_dev_us""        
    ## [21] ""proj_nat_trends_china""   ""proj_sus_dev_china""     
    ## [23] ""proj_nat_trends_germany"" ""proj_sus_dev_germany""   
    ## [25] ""exchangeRatesRMB""        ""exchangeRatesEUR""

## Learning curve models

All of the learning curve models are estimated by running the
`/code/2learning_curves.R` file. Results are saved in a list of data
frames containing formatted model results stored in
`/output/lr_models.Rds`.

To load formatted results, run this line:

``` r
lr <- readRDS(dir$lr_models)

# Names of the LR models:
names(lr)
```

## Historical scenarios

All of the historical (2008 - 2018) cost scenario calculations are
computed by running the `/code/3historical_scenarios.R` file. Results
are saved in a list of data frame containing formatted results stored in
`/output/historical_scenarios.Rds`.

To load the results of the historical scenarios, run this line:

``` r
cost <- readRDS(dir$scenarios_hist)

# Names of the scenarios:
names(cost)
```

    ## [1] ""cost""    ""savings""

## Projected scenarios

All of the future projected (2018 - 2030) cost scenario calculations are
computed by running the `/code/4projection_scenarios.R` file. Results
are saved in a list of data frame containing formatted results stored in
`/output/projection_scenarios.Rds`.

To load the results of the projected scenarios, run this line:

``` r
proj <- readRDS(dir$scenarios_proj)

# Names of the scenarios:
names(proj)
```

    ## [1] ""nat_trends""         ""sus_dev""            ""savings_nat_trends""
    ## [4] ""savings_sus_dev""

## Charts

All of the charts are generated by running the `/code/5charts.R` file.
Results are saved as pdf, eps, and png files in the `/figs` folder.

## Summary

A full summary of all results can be seen by running the
`/code/6summary.R` file.

## Other

The `/code/7tables.Rmd` file is a simple template that we used to
generate a word-formatted summary table of the regression results.

The `8alt_models.R` file contains code to reproduce several alternative
models that we considered as sensitivity checks. These results are
presented in Extended Data Tables 2 - 4.
",5,5,3,0,solar-energy,"[china, photovo, solar, solar-energy, supply-chain]",00000
828,pv-foss-engagement,openpvtools,openpvtools,https://github.com/openpvtools/pv-foss-engagement,https://api.github.com/repos/openpvtools/pv-foss-engagement,Community engagement statistics for open-source PV projects,"# PV FOSS Engagement

This repository tracks and summarizes engagement statistics for several
open-source software projects related to solar photovoltaics.
See https://openpvtools.github.io/pv-foss-engagement/

The summaries are computed by jupyter notebooks which essentially act as
webpage templates and are located at [/sphinx/source/project](/sphinx/source/project).
The results stored in the notebook files may be out of date, but because the notebooks
are automatically re-run when building the website, the website itself will reflect
the updated data as of the time of build.

The website is automatically rebuilt any time the `main` branch is updated, meaning
the website will update by itself whenever new data is added to the repo or
the notebooks are updated.

Currently, this project uses two sources of data:

## GitHub stars/contributors

GitHub stars over time are retrieved from GitHub's ""stargazers"" API.  For now,
this project only summarizes the current dataset returned from that API.
That means that it only summarizes the users currently starring the project;
it has no concept of users that previously starred the project but later
unstarred it.  Contributor data is also retrieved, although ""contributor""
in this context refers only to commit authors, which is of course one of
several types of project contributors.

## ReadTheDocs page views

ReadTheDocs only reports data for roughly the last three months, so part of
this project is to periodically fetch and archive the latest data so it doesn't
get lost.  Unfortunately the older data from before this project started is
probably permanently gone.

#### Fetching

Unfortunately there is currently no way to access analytics data through the RTD API.
Instead, we use a manual python scraper: [scrape_readthedocs.py](./scrape_readthedocs.py).
This script is automatically run by GitHub Actions.

#### Archiving

Data files are stored in the [/data](./data) directory.
These files contain page view statistics for each day, RTD version, and URL path.
",5,5,2,1,solar-energy,"[open-source, photovoltaics, pv, renewable-energy, solar-energy, solar-power]",00000
829,SunFlower,SolarFlower-Vikasa,N/A,https://github.com/SolarFlower-Vikasa/SunFlower,https://api.github.com/repos/SolarFlower-Vikasa/SunFlower,Solar Tracker Code for Vikasa,"# SunFlower
# Dual-Axis Solar Tracking Code for Vikasa

Vikasa translates to the opening or closing of a flower in Sanskrit, and is a
project developed at the George Washington University by Zach Switzer,
Ali Ahmed, Feng (Jason) Xiang, Aaron Patron, and Jacari Matthews. It is a
portable solar charging unit designed and created in order to tackle the issue
of access to clean and renewable power that arises in developing nations.
It incorperates a Raspberry Pi Zero W as a computer for those in developing
nations who do not already have a computer and as a controller for the
function of the system as a whole, a solar array that expands and contracts
through origami folding, and a battery pack with DC USB access. This project
was supported and funded by Amar Hanspal, Makerbot, and Ninjatek. Special
thanks to mentors who provided support and inspiration along the way including:
Shannon Zirbel, Larry Howell, Megan Leftwich, and Kevin Patton. Very special
thanks to Richard G. Hirst for the creation of ServoBlaster and Brandon
Stafford for the creation of Pysolar, without which this portion of the project
would not have come to fruition.

Pysolar can be found at:
http://pysolar.org/ and https://github.com/pingswept/pysolar

ServoBlaster can be found at:
https://github.com/richardghirst/PiBits/tree/master/ServoBlaster

This code was developed in Python 3 for a dual axis solar tracking system with
360 degree rotation in the x axis and 180 degree rotation in the y axis. It is
meant to be used with 2 servo motors (each rotate 180 degrees) and employs the
Pysolar and ServoBlaster open source programs in order to track the sun's
movement and mirror it with motors.

This code was developed with the intent of being used on a raspberry pi and
as a result it is assumed that both Pysolar and ServoBlaster have already been
downloaded onto the modified (for Pysolar) linux computer and can be called
upon and executed at will. For total system autonomy execute on the raspberry
pi's bootup sequence.

This code was created for execution in Python3 and will not work in other
versions of Python (Pysolar only works when executed in Python3).
",5,5,2,1,solar-energy,"[dc-motor, dual-axis-tracking, pysolar, python, python3, raspberry-pi, raspberry-pi-3, raspberry-pi-gpio, raspberry-pi-zero-w, servo-motor, servoblaster, solar, solar-energy, solar-tracker, solar-tracking-panels, solarflower, solartracker, sun-tracker, sunflower, vikasa]",00000
830,sierra,sierracoin-foundation,sierracoin-foundation,https://github.com/sierracoin-foundation/sierra,https://api.github.com/repos/sierracoin-foundation/sierra,Join the Solar Mining Revolution,"#SIΞRRACOIN is a blockchain based cryptocurrency that was designed to accelerate the use and creation of solar energy. Like other cryptocurrencies such as Bitcoin, the SIΞRRA network is truly global and decentralized. SIΞRRA payments are associated with a significant, cost-effective and environmentally friendly incentive: the production of solar energy.


SIΞRRA is a community project initiated in 2018 by the founders of the SIΞRRA Foundation and a group of volunteers. SIERRA supports POS / MN rewards and will further incentivize solar production through SIΞRRA coins. Anyone can receive SIΞRRA by either staking coins, running a Masternode or for each kilowatt-hour (KW) of confirmed solar energy produced by your Photovoltaic (PV) system. All methods of obtaining SIΞRRA are environmentally friendly and helps to save the planet. 
The SIERRA rewards are additional to existing incentive programs and does not depend on other preferential tariffs applicable to solar energy producers. Anyone who generates solar energy and, as a result, avoids long-term CO2 emissions, can earn SIΞRRA. A hardfork is planned in the future to introduce our SPOW enabled mining algorithm. At this stage, we are negotiating with companies that produce solar equipment and software to incorporate our algorithm into their solution. 
The official SIΞRRA mining pool will also be launched, where you can connect your solar installations to get SIΞRRA rewards. At SIΞRRA, we want to help speed up the production of renewable energy by creating a community with a common vision and passion for this mission. As the project progresses, further information will be added to this announcement, where the main aspects of the deployment of the SPOW algorithm, maintenance and additional incentives for the operation of POS / MN and the entire SIERRA network will be disclosed.

OPEN SOURCE CODE 
The SIΞRRACOIN team supports the idea of open source code for blockchain-based coins. All our developments on the SIΞRRACOIN will be available to everyone on GitHub (https://github.com/sierracoin-foundation). An open project will help promote innovation. We welcome the contributions of all who wish to improve the project. This project would not have been possible without the previous work of the Bitcoin and Dash development teams. We appreciate their efforts and the opportunity to contribute to this growing area of technology. In addition, we thank the passionate members of the SIΞRRACOIN community who developed this project and are actively involved in the evolution of SIΞRRACOIN Please note that only SIΞRRACOIN is open source. All other developments of the SIΞRRA Foundation, which includes the SPOW algorithm are proprietary information. SIΞRRACOIN is a method of modern monetization of a decentralized project and, therefore, the details of the development, mechanism of action and software are not subject to public announcement. All the necessary technical information will be made available to users after the official launch of the SIΞRRA SPOW project.

More detailed information: SIΞRRACOIN Whitepaper v2.0
Cooperation and suggestions: support@sierracoin.org

CONFIDENTIALITY 
The SIΞRRACOIN team values the privacy of individuals and organizations. It’s extremely important that teams take the necessary precautions to limit the impact of any potential threats that could adversely affect the development of projects. The SIΞRRACOIN team is very serious about confidentiality in today’s modern world of technology to ensure that external factors not negatively influence the development of this decentralized blockchain project.
Join the Solar Mining Revolution
",5,5,2,0,solar-energy,"[coin, cryptocurrency, eco-friendly, masternodes, pos, solar-energy]",00000
831,powerguru,Olli69,N/A,N/A,https://api.github.com/repos/Olli69/powerguru,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C194:840D:292C7FA:54A34E9:65223FFE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
832,Battery-Simulation,PV-Soft,N/A,https://github.com/PV-Soft/Battery-Simulation,https://api.github.com/repos/PV-Soft/Battery-Simulation,Simulate batteries for your PV system to find out how much you could increase your own consumption. Different battery and inverter sizes can be simulated. The batteries are simulated with your personal PV setup and power consumption profile. This information can be recorded e.g. from an energy meter. ,"# Battery Simulation for PV Systems 
 
This software simulates batteries for your PV system and calculates how much you could increase your own consumption. All calculations are done using your individual power consumption profile, as well as the specific power generation profile of your PV system.

All calculations are done in [Simulate_Battery.ipynb](Simulate_Battery.ipynb)

## Introduction

On sunny days your PV system usually gives the excess energy that you cannot use at home to the grid, while you have to draw energy from the grid on cloudy days (and at night). Your own consumption can be increased by adding a battery to your PV system. The size of the battery (and inverter) heavily depends on the setup of your PV system and especially on your personal power consumption profile.

Modern energy meters provide all the information needed to simulate different batteries and inverters for your personal needs. This software uses this data to find out which combination best fits your needs and assists you in your buying decision.

E.g. the plot below shows how much of the energy that you are currently dawing from the gird could be provided by a battery.

![Image:Energy used from grid and battery by battery size](./Energy_used_from_grid_and_battery_by_battery_size.png  ""Energy used from grid and battery by battery size"")

Besides other more detailed analyses you can for example see how much energy each battery could provide during differnent months of the year.

![Image: Monthly details](./Monthly_details.png  ""Monthly details"")

As the plots are created based on your personal power data, the decisions you make based on them can be very accurate.

## Recording Data

### Hardware Setup

Digital energy meters often contain an IR interface that continuously sends the current power consumption.

The provided power value is positive if you draw energy from the grid and negative if the excess of your PV system is fed into the grid.

To record this data for later analysis, a IR reader is needed. A simple version for a smart meter IR reader can be found here: 
https://wiki.volkszaehler.org/howto/simpler_ir_leser

A photodiode in combination with a 1k Ohm resistor is enough to build IR read head.

Besides the described TEKT5000S-ASZ you can also use a BPW40 phototransistor and connect it in the following way to your serial interface:

![Image: BPW40 IR reader](./BPW40-IR-reader.png  ""BPW40 IR reader"")

After accurately placing it in front of the IR diode of the energy meter, the data can be read from the serial interface. The camera of your cell phone might help you finding the IR diode of your energy meter. In the live view of the camera you can see it flashing, when data is send.

### Software Setup

Different software can be used to read the data from the serial interface. If you are already running an home automation system like [openhab](https://www.openhab.org/), you can add the smart meter to your configuration and use openhab to record the power data of your home.

If you are not using a home automation system yet, you can run a simple python script to record the data.

In both cases the data has to be recorded for a ""representative"" time frame to allow meaningful a analysis. A period of several month is reasonable to cover seasonal effects. Of course, you can already run the analysis after a much shorter time to see first results!

#### Openhab

The data can be read and stored e.g. using a home automation software like [openhab](https://www.openhab.org/)  by installing the appropriate binding ([openhab SmartMeter Binding](https://www.openhab.org/addons/bindings/smartmeter/) ) and persisting the data for later analysis. The configuration also allows to specify how many values should be stored (e.g. ever 5 seconds).

Once enough data is persisted in openhab it can be exported from the influxdb database. See [Export_openhab_data_from_influxdb.ipynb](./data_exporters/openhab_influxdb/Export_openhab_data_from_influxdb.ipynb) for details.

#### Record Data with Python Script

*Todo: Provide python script to record data and store it in a txt file.*

## Analyzing Data

The analysis of the previously recorded data is done in a jupyter notebook. Herein, several ""virtual"" batteries can be simulated. This is done by going though all the records of your smart meter. If you are feeding power to the gird, your virtual batteries are charged. If you are later drawing energy from the grid, your batteries are discharged. The maximum (dis)charge power can be adjusted to simulate different inverter sizes. After aggregating this information you can see how much of the energy that your currently drawing from the grid could be covered by a battery. Simulation of different battery sizes helps you finding the best setup for your personal power consumption profile in combination with your already installed PV system.

To run the analysis, download the jupyter notebook file ([Simulate Battery.ipynb](./Simulate_Battery.ipynb)) and run it on your local PC. You have to modify the first part of the notebook to load the data you exported from your energy meter.

In the notebook the following analyses are done:

This summary shows how much of the enerty that you are currently dawing from the grid could be provided by batteries of different sizes. It also shows how energy you still have to draw from the grid when using these batteries.

![Image:Energy used from grid and battery by battery size](./Energy_used_from_grid_and_battery_by_battery_size.png  ""Energy used from grid and battery by battery size"")

More details are given in the monthly overview. Herein, the energy is shwon that a battery could provide during each month of the year. This helps to estimate seasonal effects.

![Image: Monthly details](./Monthly_details.png  ""Monthly details"")

A closer look at the state of charge of the virtual batteries is possible with the following plot. It shows that smaller batteries are more frequently fully discharged (especially during summer) than larger batteries.

![Image: Charge discharge curves](./Charge_discharge_curves.png  ""Charge discharge curves"")

The last plot shows how the energy was drawn from the batteries over time. A steeper curve indecates that more energy could be drawn from the battery.

![Image: Energy used from battery over time](./Energy_used_from_battery_over_time.png  ""Energy used from battery over time"")





",5,5,2,1,solar-energy,"[battery, battery-simulation, battery-simulator, photovoltaic, photovoltaics, simulation, solar-energy]",00000
833,ClusteringPVtimeSeriesKmeans,openenergyprojects,N/A,https://github.com/openenergyprojects/ClusteringPVtimeSeriesKmeans,https://api.github.com/repos/openenergyprojects/ClusteringPVtimeSeriesKmeans,Clustering PV time series using Kmeans,"# ClusteringPVtimeSeriesKmeans
Clustering PV time series using Kmeans
Simulation on real data.

Scope: to determine the probability weights in stocastic programming Sample Average Approximation (SAA) and the characteristic sample data for the probabilistic scenarios.
",5,5,1,0,solar-energy,"[clustering, energy, photovoltaic, pv, research, solar-energy]",00000
834,GridInverter,augustodn,N/A,https://github.com/augustodn/GridInverter,https://api.github.com/repos/augustodn/GridInverter,"Micro grid tied inverter. Arduino based, aimed for individual solar panel use.","# Introduction
Hello!,

The final purpose of this project is to design a grid tied inverter that you can use with a single solar panel. Design requisites are:

* MPPT capabilities
* Max Power output of ~300W
* Input from one solar panel (6-12VDC)

The code is basically generating PWM signals with duty cycle control. That's all for now. I'm using Arduino platform 
for the code and the Arduino Mega 2560 trainer in particular. Also I'm using ino, a small program which helps me writing code with vim, 
outside the Arduino IDE. Anyway you can open it with Arduino IDE as well. 
	
So far we have here 4 folders:

### /lib

 - Library to implement a PID control system for the boost topology it just helps me with the duty cycle with the
feedback on the boost output voltage.
 - Header file for sketch.ino
### /src 

- sketch.ino is the file where you have the code which goes into the microcontroller. It's written in C++ (even tough I am not abusing
of objects and methods). I'm using a lot of time interruptions and an array with the SPWM which goes to the inveter H bridge.

### /sims 

- Spice simulations in LTSpice. There you have schematics simulated with some square waves generating PWM. You can see also SPWM on the full bridge inverter (nice idea took from http://152fullbridge.blogspot.com.ar/).

### /sch

- Schematics done with EAGLE.

Get LTSpice here: http://ltspice.linear-tech.com/software/LTspiceIV.exe. You can emulate it with wine if you're using Linux.
Further info: http://www.linear.com/designtools/software/

That's all by now. 
Please contact me for whatever questions, comments, suggestions that you may have... and remember the only dumb question is the one you don't ask.

adenevreze [at] gmail [dot] com
",4,4,7,1,solar-energy,"[arduino, ltspice, schematics, solar-energy, spwm]",00000
835,sunshield_linky,boxenergie,boxenergie,https://github.com/boxenergie/sunshield_linky,https://api.github.com/repos/boxenergie/sunshield_linky,"Shield sunshare to collect energy data over a raspberry pi from solar photovoltaic, pulse meter, linky meter","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",4,4,2,2,solar-energy,"[domotic, linky, openhardware, raspberry-pi, solar, solar-energy]",00000
836,TeslaSolarCharger,patrickbollmann,N/A,https://github.com/patrickbollmann/TeslaSolarCharger,https://api.github.com/repos/patrickbollmann/TeslaSolarCharger,Small python script to optimize your tesla electric vehicle charging process in combination with power from a solarsystem using an old PIKO solar inverter,"# TeslaSolarCharger
Small python script to optimize your tesla electric vehicle charging process in combination with power from a solarsystem using an old PIKO/Kostal solar inverter.

Start this script after when plugging in your Tesla.
Charging your EV will automatically start if enough self produced solar power is available and stops if power is to low. This will result in an optimal usage of self produced power and saves cost during Power bought off the grid is much more expensive.

The threshold which defines ""enough power to charge"" is set to 3000 watts by default. Whis represents charging your Telsa at 230V single phased off a normal wall plug. If you are using a Wallbox with higher charge power you might want to change this setting.
Available power will be updated every 20 seconds, which stops charging even if a big cloud passes your area

Depending on which solar inverter you are using, you might have to change some parsing of the webinterface. In this case we are using an PIKO 10.1 Inverter at firmware 5.44

Using myTesla for communication with the Car: https://github.com/zmsp/python-my-tesla
",4,4,0,0,solar-energy,"[electric-vehicles, solar-energy, tesla]",00000
837,python-enphase-export,jameselsey,N/A,https://github.com/jameselsey/python-enphase-export,https://api.github.com/repos/jameselsey/python-enphase-export,"Python scripts to export data from your Enphase Envoy system, can also upload to AWS ","# python-enphase-export
=====

If you have an Enphase solar energy system and want to access your data, you can 
do so via the [Enphase developer APIs](https://developer.enphase.com/docs#stats).

There is rate limit on the free tier so if you want to compute stats you
may be better exporting the data to a relational data store, or heaven forbid, a spreadsheet!

This script will make it easier, just set your Enphase credentials, set the start/end date range you want
then go grab a coffee, your data will be saved to json files per day.

Stats exporter
=====
Use this script if you want to export your enphase stats to json files

Set the config in `.envrc.example`, either use direnv or just export the vars on your own.

Run using `python3 stats.py`

Have a look in the `out/` directory once the script has finished, you'll see
a json file per day, with the stats for that day.

Stats to Db
======
Use this if you want to export your enphase stats to RDS on AWS

build and package up the application:
`make build package`

Deploy the application into AWS
`make deploy`

TODO
=====
* Add other API calls, currently just power generation, I'd like consumption exports too
* Relation data store / export to AWS
* Run as an AWS scheduled lambda
",4,4,1,3,solar-energy,"[enphase, enphase-api, solar-energy, solar-panel-data, solar-panels]",00000
838,RcMPPT,ThoMint,N/A,https://github.com/ThoMint/RcMPPT,https://api.github.com/repos/ThoMint/RcMPPT,An MPPT Solar Charge Controller geared towards solar-powered RC model aircrafts and rovers,"![RcMPPT](https://github.com/ThoMint/RcMPPT/blob/master/PR/RcMPPT-Logo-Outline.png)
An MPPT Solar Charge Controller geared towards solar-powered RC model aircrafts and rovers\
\
Features:\
-SBUS/SPI/CAN/I2C/UART/USB Interface\
-Maximum Power Point Tracking\
-Extremely space/cost efficient\
-Ultra wide Vin/Vout Range 0-100V\
-High current capability 20A\

![Side View of MBA Prototype](https://github.com/ThoMint/RcMPPT/blob/master/PR/v2.0/RcMPPT-MBA.png)
",4,4,3,0,solar-energy,"[autonomous-vehicles, dcdc, gps, mppt, rovers, solar-energy, stm32g4]",00000
839,meteo-station-pcb,alicjamusial,N/A,https://github.com/alicjamusial/meteo-station-pcb,https://api.github.com/repos/alicjamusial/meteo-station-pcb,Meteo station project - PCB based on ESP32.,"# METEO STATION – PCB based on ESP32 
[![](https://img.shields.io/badge/-METEO%20STATION%20PROJECT%20-f17892)](https://alicja.space)


![image](img/pcb.jpg)
<p align=""center"">
  <img alt=""Light"" src=""img/DSCF8146.jpg"" width=""48%"">
&nbsp; &nbsp; &nbsp;
  <img alt=""Dark"" src=""img/DSCF8181.jpg"" width=""48%"">
</p>

### ◾ About the project

**Meteo station** is my small after-hours project that contains of **three** repositories:
- Meteo station PCB based on ESP32 (this repo)
- [Meteo station code](https://github.com/alicjamusial/meteo-station-code)
- [Meteo station 3D prints](https://github.com/alicjamusial/meteo-station-3d-print)

As the name suggest, is a DIY self-sufficient weather measuring device. I decided to design it as a PCB board with goldpins to stick-in or stick-out individual components and sensors (ESP32, BME280 etc.) to make it more reusable. It could have - of course - been integrated on board, but it would be more expensive and time-consuming to create.

As you can see - the project is designed with minimal effort 🙂 But works!

> **Warning** <br>
> This is a hobbyist project. I'm not an electronic engineer so I take no responsibility for any possible issues you may encounter :)


Gerber files for version 1.0 of Meteo Station is available [in the releases section](https://github.com/alicjamusial/meteo-station/releases/tag/release-1.0.0).

The board was designed using [KiCad](https://kicad.org/) (version: `6.0`).

I was inspired by solution created by [this guy on Instructables](https://www.instructables.com/Solar-Powered-WiFi-Weather-Station-V30/). He did a good job, so I strongly recommand exploring his meteo projects!

### ◾ Sensors & components
**Components:**
- ESP32 (ESP-WROOM-32) - main computer (with LEDs, LDO, USB-to-UART unsoldered)
- TP4056 - battery charger
- solar panel - I finally used DFRobot FIT0601 Monocrystalline Solar Panel (5V, 1A)
- 18650 battery + holder
- slide switch, LDO etc. - according to the KiCad project

**Sensors:**
- BME280 - humidity, pressure, temperature
- DS18B20 - temperature
- BH1750 - light (should be mounted on cables - outside of the box)

**Other stuff that you may need:**
- access to 3D printer to print a Stevenson cage and solar panel holder
- server (e.g. RaspberryPi) with Influx database and Grafana instance to gather data from the station and display it in a nice way

![schema](img/grafana.png)

### ◾ Useful tips

- **important!** - it's a good idea to prepare your ESP32 before placing it in the station - I unsoldered all unnecessary components from it to lower the power consumption. You can see more details on [my twitter](https://twitter.com/alicja_musial/status/1494784125051584515),
- there are two possibilites to connect a solar panel to the PCB - via mini USB in the TP charger or using SC1 and SC2 connectors - depending on which solar panel you buy,
- choose the biggest solar panel you can,
- adjust timings in software to avoid complete discharge of the battery.


### ◾ Adjust it to your needs!
This is an absolutely hobbyst project :) You can use it as a reference to create something a lot better.


### ◾ License
Meteo Station PCB is available on Creative Commons Attribution Share Alike 4.0 International license (more in [license file](LICENSE.txt)). You are free to use it, modify it and produce as many of your own boards as you need.


![schema](img/schematics.jpg)
![schema](img/schematics2.jpg)

### ◾ Final result

Cable tie and tape for the win ;)

<p align=""center"">
  <img alt=""Dark"" src=""img/meteo-station.jpg"" width=""65%"">
</p>
",4,4,2,0,solar-energy,"[diy-electronics, electronics, esp32, esp32-wroom, kicad, meteo, meteo-station, pcb, solar-energy, station, temperature, weather]",00000
840,Solar-Pv-Optimal-Spot,simone-rizzo,N/A,https://github.com/simone-rizzo/Solar-Pv-Optimal-Spot,https://api.github.com/repos/simone-rizzo/Solar-Pv-Optimal-Spot,"An Android app, that find the optimal angles for solar panels with smartphone sensors","## Optimal solar panel titl angle APP

<img src=""https://simone-rizzo.github.io/Solar-Pv-Optimal-Spot/logo.jpg"" width=""300"" height=""auto"">

An Android application that find the optimal angles for solar panels, and help the users to install the panel position throw smartphone sensors.
[Read the full documentation](https://simone-rizzo.github.io/Solar-Pv-Optimal-Spot/solarpanel-doc.pdf)

<a href=""https://play.google.com/store/apps/details?id=com.ReG.PvOptimalSpot"" id=""bottle"" onclick=""document.location=this.id+'.html';return false;"" >
    <img src=""https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png"" alt=""bottle"" class=""thumbnails"" width=""200"" height=""auto"" />
</a>

## How it works
The application, through API given by PVGIS, guides the user to the reading of the big amount of data gives by the online software calculator focusing on optimal inclination and optimal orientation. These two values described perfectly the positioning of the user solar and PV panel. In addition, the app shows the user daily mean data of irradiance and power through smart graphs refering to 2013. All these data can be used even for scientific and engineering analysis and can be obtained very quiclky through the simple and the optimized app design.
Features:
-	Clear tutorial that explain app structure
-	Calculation of optimal inclination for the entire year
-	Calculation of optimal orientation for the entire year
-	Calculation of Daily mean power developed by crystSI PV technology
-	Calculation of Daily mean power developed by CdTe PV technology
-	Calculation of Daily mean power developed by CIS PV technology
-	Calculation of Daily mean Irradiance on a well oriented panel
-	Interactive Daily mean power chart
-	Interactive Daily mean irradiance chart
-	Detailed explaination of the physic model & calculations used by PVGIS to calculate app parameters

## Some Screenshot

 <div class=""column"">
    <img src=""https://simone-rizzo.github.io/Solar-Pv-Optimal-Spot/screenPhone/scr1.jpg"" width=""300"" height=""auto"">
    <img src=""https://simone-rizzo.github.io/Solar-Pv-Optimal-Spot/screenPhone/scr2.jpg"" width=""300"" height=""auto"">
    <img src=""https://simone-rizzo.github.io/Solar-Pv-Optimal-Spot/screenPhone/scr3.jpg"" width=""300"" height=""auto"">   
  </div>
  
   <div class=""column"">
    <img src=""https://simone-rizzo.github.io/Solar-Pv-Optimal-Spot/screenPhone/scr4.jpg"" width=""300"" height=""auto"">
    <img src=""https://simone-rizzo.github.io/Solar-Pv-Optimal-Spot/screenPhone/scr5.jpg"" width=""300"" height=""auto"">       
  </div>
",4,4,1,0,solar-energy,"[android, android-application, android-studio, optimal-tilt-angle, sensors, solar-energy, solar-panel, solar-panel-angles, solar-panels]",00000
841,Lumi-Transformer,MasterAI-EAM,MasterAI-EAM,https://github.com/MasterAI-EAM/Lumi-Transformer,https://api.github.com/repos/MasterAI-EAM/Lumi-Transformer,Transformer Architecture Based Model for Intelligent Solar Module Characterization,"#  Solar Transformer

This repository contains code for Solar Transformer for electroluminescence (EL) images. The model is based on the transformer architecture and is designed to process EL images of solar cells. 

## Background
EL imaging is a technique used to study solar cells. It involves capturing images of solar cells using a camera sensitive to the near-infrared region of the electromagnetic spectrum. These images show the distribution of charge carriers in the solar cell, which is related to the efficiency of the cell.

The solar-transformer model is designed to process EL images and predict the efficiency of the solar cell. It is based on the transformer architecture, which has been shown to be effective for processing sequential data such as natural language text.

<img src=""figures/CNN ViT ST.png"" width=""1200"">
Operation of CNN, ViT and Swin-Tranformer. (CNN: Convolutional Neural Network, like VGG, Resnet; ViT: Visual Transformrer).
<img src=""figures/model.png"" width=""1200"">
Overall framework of swin-transformer 

## Dependencies

The code is written in Python and requires the following dependencies:

PyTorch (version 1.9.0 or later)  
NumPy  
Pandas  
Matplotlib  
scikit-learn  

## Usage  

The code is organized as follows:

data.py: contains code for loading and preprocessing the EL images  
model.py: contains code for the solar-transformer model  
evaluate.py: contains code for evaluating the model on a test set  

## Results

The solar-transformer model achieves state-of-the-art performance on the EL image dataset, with an accuracy of 91.7% on a classfication test. (defective or functional)

ELPV-Monocystalline  
| Model  | Recall  | Precision | F1-Score  | Reference |
|---|---|---|---|---|
| Solar-T  |   |   |   |   |
| VGG-19  |   |   |   |   |
| ResNet-50  |   |   |   |   |

ELPV-Polycystalline  
| Model  | Recall  | Precision | F1-Score  | Reference |
|---|---|---|---|---|
| Solar-T  |   |   |   |   |
| VGG-19  |   |   |   |   |
| ResNet-50  |   |   |   |   |

ELPV-Overall  
| Model  | Recall  | Precision | F1-Score  | Reference |
|---|---|---|---|---|
| Solar-T  |   |   |   |   |
| VGG-19  |   |   |   |   |
| ResNet-50  |   |   |   |   |


ELPV-Transfer Learning (Monocrystalline to Polycrystalline)
| Model | F1-Score  | Reference |
|---|---|---|
| Solar-T  | 0.8202  |  |
| VGG-19  |   |   |
| ResNet-50  | 0.6103  |   |

## Acknowledgments

This work was supported by the Univeristy of New South Wales. We would also like to thank the support of GreenDyanmics Pty. Ltd.
",4,4,2,0,solar-energy,"[material, solar-energy, transformer]",00000
842,Gobel-Power-RN-BMS-RS485-ModBus,fancyui,N/A,https://github.com/fancyui/Gobel-Power-RN-BMS-RS485-ModBus,https://api.github.com/repos/fancyui/Gobel-Power-RN-BMS-RS485-ModBus,Gobel Power LiFePO4 Battery RN BMS RS485 Modbus Communication,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",4,4,1,0,solar-energy,"[battery-monitor, lifepo4-battery, solar-energy, solar-system]",00000
843,ioBroker.envertech-pv,iobroker-community-adapters,iobroker-community-adapters,https://github.com/iobroker-community-adapters/ioBroker.envertech-pv,https://api.github.com/repos/iobroker-community-adapters/ioBroker.envertech-pv,Read envertecportal.com Web Data ,"![Logo](admin/envertech-pv.png)

# ioBroker.envertech-pv

[![NPM version](https://img.shields.io/npm/v/iobroker.envertech-pv.svg)](https://www.npmjs.com/package/iobroker.envertech-pv)
![Current version in stable repository](https://iobroker.live/badges/envertech-pv-stable.svg)
![Number of Installations](https://iobroker.live/badges/envertech-pv-installed.svg)
![Test and Release](https://github.com/iobroker-community-adapters/ioBroker.envertech-pv/workflows/Test%20and%20Release/badge.svg)
[![Translation status](https://weblate.iobroker.net/widgets/adapters/-/envertech-pv/svg-badge.svg)](https://weblate.iobroker.net/engage/adapters/?utm_source=widget)
[![Downloads](https://img.shields.io/npm/dm/iobroker.envertech-pv.svg)](https://www.npmjs.com/package/iobroker.envertech-pv)

[![NPM](https://nodei.co/npm/iobroker.envertech-pv.png?downloads=true)](https://nodei.co/npm/iobroker.envertech-pv/)

<!--
**This adapter uses Sentry libraries to automatically report exceptions and code errors to the developers.**
For more details and for information how to disable the error reporting see [Sentry-Plugin Documentation](https://github.com/ioBroker/plugin-sentry#plugin-sentry)! Sentry reporting is used starting with js-controller 3.0.
-->

## ioBroker.envertech-pv

The ioBroker.envertech-pv adapter empowers you to access and gather data from the [envertech cloud service](www.envertecportal.com) easily. By regularly polling the web service, this adapter ensures that all valuable information is promptly retrieved and stored in easily accessible states.

## Disclaimer

**All product and company names or logos are trademarks™ or registered® trademarks of their respective holders. Use of them does not imply any affiliation with or endorsement by them or any associated subsidiaries! This personal project is maintained in spare time and has no business goal.**
**Envertech® is a registered trademark of Zhejiang Envertech Corporation Limited**

## Documentation

[**English** documentation](docs/en/envertech.md)    
[**German** documentation](docs/de/envertech.md)

## Credits

This adapter would not have been possible without the great work of @adcrafter27 (https://github.com/adcrafter27), who analyzed and documented the REST API used to access the envertech cloud service.

## How to report issues and feature requests

Ideally, please use GitHub issues for this, with the best method achieved by setting the adapter to Debug log mode (Instances -> Expert mode -> Column Log level). Then retrieve the logfile from disk via the  'log' ioBroker subdirectory, **not** from Admin, which will cut lines. If you prefer to avoid providing it in a GitHub issue, email me (mcm57@gmx.at). Please reference the relevant **GitHub issue**, provide corresponding **descriptive commentary** and add **log timestamp(s)** where appropriate.

## Changelog

<!--
    Placeholder for the next version (at the beginning of the line):
    ### **WORK IN PROGRESS**
-->
### 1.0.2 (2023-03-31)

-   (mcm1957) changed: Handling of statuscode '2' has been added (#44).
-   (mcm1957) changed: Unload code has been fixed.
-   (mcm1957) changed: Some translations have been updated.
-   (mcm1957) changed: Dependencies have been updated.

### 1.0.1 (2023-03-23)

-   (mcm1957) NEW: Support to retrieve station-id by username and password has been added.
-   (mcm1957) NEW: Support to check multiple stations within one instance has been added.
-   (mcm1957) changed: Units and roles for states have been reconfigured.
-   (mcm1957) changed: State structure has been changed to support multiple stations (and for future local access).
-   (mcm1957) changed: Userinterface has been migrated to jsonConfig (admin5).
-   (mcm1957) changed: The adapter is running as daemon.
-   (mcm1957) changed: The communication has been changed from deprecated ""request"" to ""axios"" package.
-   (mcm1957) changed: The adapter has been moved to iobroker-community-adapters organisation.

### 0.0.8

-   (adcrafter27) add setting for more log output

### 0.0.7

-   (adcrafter27) add more functions

### 0.0.6

-   (adcrafter27) code fix

### 0.0.5

-   (adcrafter27) release

### 0.0.3

-   (adcrafter27) Update new functions

### 0.0.2

-   (adcrafter27) First test release

### 0.0.1

-   (adcrafter27) initial release

## License

MIT License

Copyright (c) 2023 mcm1957 <mcm57@gmx.at>, adcrafter27 <adcrafter27@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
",4,4,5,16,solar-energy,"[envertech, envertech-pv, envertecportal, evb201, evb202, evt, evt300, evt360, evt560, evt720, home-automation, iobroker, mikroinverter, pv, smart-home, smarthome, solar-energy, stationid]",00000
844,energy,nielsbasjes,N/A,https://github.com/nielsbasjes/energy,https://api.github.com/repos/nielsbasjes/energy,A java library to read data from my Modbus based energy devices.,"[![Github actions Build status](https://img.shields.io/github/actions/workflow/status/nielsbasjes/energy/build.yml?branch=main)](https://github.com/nielsbasjes/energy/actions)
[![Coverage Status](https://img.shields.io/codecov/c/github/nielsbasjes/energy)](https://app.codecov.io/gh/nielsbasjes/energy)
[![License: CC BY-NC-ND 4.0](https://img.shields.io/badge/License-CC%20BY--NC--ND%204.0-lightgrey.svg)](https://creativecommons.org/licenses/by-nc-nd/4.0/)
[![Maven Central](https://img.shields.io/maven-central/v/nl.basjes.energy/energy-parent.svg)](https://central.sonatype.com/namespace/nl.basjes.energy)
[![GitHub stars](https://img.shields.io/github/stars/nielsbasjes/energy?label=GitHub%20stars)](https://github.com/nielsbasjes/energy/stargazers)
[![If this project has business value for you then don't hesitate to support me with a small donation.](https://img.shields.io/badge/Donations-via%20Paypal-blue.svg)](https://www.paypal.me/nielsbasjes)
[![Website](https://img.shields.io/badge/https://-energy.basjes.nl-blue.svg)](https://energy.basjes.nl/)

Energy systems reading toolkit
=======================

This is a Java library to make reading data from devices that have a Modbus interface easier.

For the actual modbus connection this library relies on https://github.com/steveohara/j2mod

This library does the mapping from the binary modbus registers to meaningful variables.

Currently two mappings have been written

- Solar inverters conforming to the SunSpec specification
- The Eastron SDM630 Modbus powermeter

Status
====
Under development, unfinished, unstable, only a pre-ALPHA version was released.


Or simply put: **Works on my machine ... will probably melt yours ...**

Further info:  https://energy.basjes.nl

License
=======

![Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License](docs/by-nc-nd.eu.svg)

    Energy readers and parsers toolkit
    Copyright (C) 2019-2023 Niels Basjes

    This work is licensed under the Creative Commons
    Attribution-NonCommercial-NoDerivatives 4.0 International License.

    You may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       https://creativecommons.org/licenses/by-nc-nd/4.0/

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an AS IS BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

",4,4,2,5,solar-energy,"[electricity-meter, modbus, modbus-library, nifi, nifi-processor, sdm630, solar-energy, sunspec]",00000
845,solaredge2graphite,aderixon,N/A,https://github.com/aderixon/solaredge2graphite,https://api.github.com/repos/aderixon/solaredge2graphite,Send SolarEdge PV output readings to Graphite,"solaredge2graphite
==================

Small Python script to retrieve inverter readings for a SolarEdge
PV array from the SolarEdge monitoring portal and send them to a Graphite
metrics storage server.


Usage
-----

You will need an API key and your site ID from the SolarEdge monitoring
portal (under Admin -> Site Access when viewed in a desktop web browser;
if this is not visible, contact your installer).

Supply your Graphite host, the desired prefix, your API key and site ID as
arguments or edit the script and set them as defaults.

Run the script every 15 minutes as a scheduled task. (Don't run it more
frequently than that, as the SolarEdge monitoring portal only updates at
that interval.) (You'll probably want to adjust the storage schema for
these metrics in Graphite too.)

As PV arrays don't tend to generate much energy at night, the `--null`
option skips retrieving the current readings and simply sends zero or
'unknown' values to Graphite, avoiding unnecessary API calls. This is
to avoid hitting the API call limit under heavy usage but will probably
not be required by most users and is entirely optional.

To test retrieval of current readings without updating Graphite, use the
`--debug` option to show the values returned. In normal use, the script
does not produce any output unless an error occurs.


Limitations
-----------

The script only retrieves the current power and lifetime energy outputs.
It does not handle stored energy systems such as batteries, for which
there are a number of other API calls that could be added.


Dependencies
------------

Use PIP to install the following Python libraries from PYPI:

 * solaredge
 * graphyte

solaredge2graphite needs Python 3.2+, only because the solaredge API
library requires it (for functools).


Author
------

Ade Rixon, http://www.big-bubbles.org.uk/
",4,4,2,0,solar-energy,"[graphite, graphite-client, python-script, solar-energy, solaredge, solaredge-api]",00000
846,bwsl1a,teapotlaboratories,teapotlaboratories,https://github.com/teapotlaboratories/bwsl1a,https://api.github.com/repos/teapotlaboratories/bwsl1a,Teapot BWSL1A: Solar Powered LoRaWAN Gateway with SWARM Satellite Connectivity,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",4,4,2,0,solar-energy,"[lorawan, lorawan-gateway, satellite, solar, solar-energy, swarm-satellite]",00000
847,solar_display,khenderick,N/A,https://github.com/khenderick/solar_display,https://api.github.com/repos/khenderick/solar_display,Solar panel monitor display,"# Solar monitor display

This repo contains some experimental software written in (micro)python, creating a battery powered display for an OpenEnergyMonitor dashboard. It displays my home's solar installation.

### M5Stack

M5Stack is a small battery powered display with as core an ESP32. See https://m5stack.com/. I used the M5Stack Grey kit.

### OpenEnergyMonitor

OpenEnergyMonitor is an open-source energy monitoring platform. It comes in some different variants, but I used the emonPi. See https://openenergymonitor.org/.

For this project, it's madatory to have two feeds measuring the feed from the solar panels, and the feed from/to the grid. These need to be available on the emonPi's MQTT broker.

### MicroPython

I flashed the Loboris MicroPython port for ESP32. Using the guide on https://github.com/loboris/MicroPython_ESP32_psRAM_LoBo it's fairly straightforward to create a build for the M5Stack.

### Configuration

Add a `config.json` JSON file in the project's root with following content:
* `solar_topic`: The MQTT topic holding the realtime data for the solar feed;
* `grid_topic`: The MQTT topic holding the realtime data for the grid feed;
* `mqtt_broker`: The MQTT broker endpoint (ip address from the emonPi);
* `wifi_credentials`: A list holding the SSID as first element, and the password as second.

Optionally, following parameters can also be specified:
* `update_interval_ms`: How frequent (in ms) the display must be updated;
* `graph_interval_s`: How frequent (in s) the graph needs to be updated.

Tip: A graph interval of `270` seconds is just enough for exactly 24h of data.

### Installation

1. Copy the files over to the M5Stack and reset/reboot the device: `rshell --port /dev/ttyUSB0 rsync --mirror . /flash`.
2. Soft restart the M5Stack: Open the REPL with `screen /dev/ttyUSB0 115200` and soft restart with `CTRL+D`.

Tip: You can exit the screen by pressing `CTRL+A`, then `k` and then `y`.

### Update

The system supports update via SD card. Format an micro SD card with FAT32 and put the contents
of this repo in an `update` folder on the SD card's root. Put the SD card in the M5Stack and use
the `A` and `C` buttons to nativate to the `reboot & update` menu item. Press the `B` button to
activate. The system will take a backup of the graph, reset the M5Stack, update the code from the
SD card and load the graph again.

### Debugging

When the REPL is open, do a soft restart and watch the debug output. It might give a clue about what's going on.

### License

All code is licensed under AGPL 3.0 except for files stating differently.

### Notices

This project uses and/or relies on following software:
* Loboris ESP32 MicroPython fork;
* Mika Tuupola's IP5306 I2C driver & button wrapper

Let me know if I miss anything.
",4,4,2,0,solar-energy,"[dashboard, display, esp32, m5stack, micropython, openenergymonitor, solar-energy]",00000
848,LT3652-MPPT-Battery-Charger,shridattdudhat,N/A,https://github.com/shridattdudhat/LT3652-MPPT-Battery-Charger,https://api.github.com/repos/shridattdudhat/LT3652-MPPT-Battery-Charger,Simple MPPT Module,"## SuryaMPPT
",4,4,1,0,solar-energy,"[battery, battery-charger, mppt, mppt-charger, solar, solar-cells, solar-energy]",00000
849,derapi,derapi,derapi,https://github.com/derapi/derapi,https://api.github.com/repos/derapi/derapi,Derapi provides a RESTful API that allows users to access and control individual Distributed Energy Resources (DERs),"# Derapi.com API Guide

## Summary

Derapi provides a RESTful API that allows users to access and control individual Distributed Energy Resources (DERs).
Examples of DERs include solar and storage inverters, heat pumps, smart thermostats, and EV chargers.
Many vendors provide API access to their DER products, but typically APIs differ both in terms of the data they expose, and in the mechanics of access.
Some APIs are pull; some are push.
Some use REST, some use other techniques.
Derapi provides a simple abstraction layer over these differences to present a uniform API for each type of DER.

The Derapi API Reference is available at https://api.derapi.com/apidocs/

## Getting Started
Follow these steps to get started building your application using Derapi’s API:
1. Review the docs – starting with this guide and the [API Reference](https://api.derapi.com/apidocs/#/)
2. Get credentials – if you don’t have your Derapi client_id and client_secret please email sales@derapi.com to request access
3. Test your credentials – follow the steps in [Making a request](#making-a-request) to exchange your credentials for an authentication token and make your first API call

## Security and Privacy
Derapi's policy is to retain as little customer data as possible.
In particular, Derapi avoids storing sensitive information like passwords and credentials users need to log into partner's APIs.

## JSON over REST
Derapi uses JSON over REST.
Derapi uses HTTPS.
Users issue GET requests to receive information about DERs.
Users issue POST requests to modify aspects of DER state.
Derapi responses are always in JSON format, including error messages.

## Versioning
The Derapi API maintains versions in the format v1, v2, etc.
The current version is v1.
Future versions will include a mechanism to set and specify a version for requests.

## Error Handling
Derapi uses standard HTTP response codes to signal success or failure.
In cases of failure, Derapi's response includes a description of the failure in JSON format.
The following sections detail the error codes Derapi can return.

### Success

#### 200 OK
Normal response.

### Client Errors
400-series HTTP responses signify problems with client requests.
The implication is that the client can modify the request to obtain the information.

#### 400 Client Error
Derapi server is functioning properly and has understood the request, but cannot fulfill it.
Example: malformed date strings in query arguments.

#### 403 Forbidden
User failed to include relevant credentials in the request, or credentials are invalid for this resource.
User must supply both Derapi authentication and authentication for backend(s) which it wishes to access.
The section on Authentication, below, provides additional information.

<!-- describe difference between 403s for bad Dearpi credentials and 403s for bad backend credentials once https://github.com/derapi/cloud-base/issues/363 is complete -->

#### 404 Not Found
The resource which the client requested does not exist.
In some cases, backends report existing resources as nonexistent if client credentials are insufficient to view them, for privacy concerns.
In these cases, Derapi returns 404.

### Backend Errors
500-series HTTP responses signify backend problems.
The implication is that there is nothing the client can do to resolve the problem, except reissue the same request at a later time.

#### 500 Derapi Internal Error
A problem in Derapi code.
Derapi policy is to notify our engineering team of these types of errors, so we can address them as quickly as possible.
While we notify the engineering team automatically of these errors, it can be helpful for clients to report them to Derapi technical support, with any additional details that may help Derapi engineers debug the problem.

#### 502 Bad Gateway
An internal problem in a backend API.
Derapi is able to communicate with the backend using its normal protocol, but the backend is reporting an internal error.
An example is a backend server returning a 5xx-series HTTP code.
Derapi policy is to notify backend operators of these types of errors so they may improve their services.
While we notify our backend partners of these problems, it can be helpful for clients to report them to Derapi technical support, with any additional details that may help Derapi engineers communicate the problem to backend operators.

#### 504 Gateway Timeout
A network communication timeout prevents normal communication with a backend.
This indicates an infrastructure problem that may or may not be under a backend's control.
Examples include network outages and DNS misconfiguration.

### Partial-Success Responses
A number of Derapi endpoints report lists of resources, e.g., https://api.derapi.com/solar-inverters.
These lists aggregate responses from multiple backends.
For these endpoints Derapi always reports success, even if one or more of the backend calls fail.
For example, one of the backends may rejects client's credentials, or be unavailable due to a network outage.
In this case, Derapi reports responses from all other backends, and includes the name of the failing backend and a description of the problem in the `errors` object.
An example response might look like this:

    {
      ""solar-inverters"": [
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTc6bm9uY2UrdmVyc2Urbm9uY2Ur"",
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTg6bm9uY2UrdmVyc2Urbm9uY2Ur"",
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTY6bm9uY2UrdmVyc2Urbm9uY2Ur"",
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MjM6bm9uY2UrdmVyc2Urbm9uY2Ur"",
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTY6bm9uY2UrdmVyc2Urbm9uY2Ur""],
      ""errors"":{
        ""solis"": ""Unauthorized: https://www.soliscloud.com:13333/v1/api/inverterList""
      }
    }

If all backend calls succeed, the `error` object is empty.

## Making a request

### Partner Authentication
When clients make requests against Derapi, they include an OAuth Bearer token for each partner to which a they have access.
To accommodate multiple bearer tokens in one HTTP request, the client includes one header per backend.
The headers take the form `X-Authorization-<vendor>: Bearer` where `<vendor>` is one of the backends Derapi supports, e.g., `sma`, `solis`, `se` (solaredge), etc.
The `X-Authorization-*` headers follow the syntax and semantics of RFC 6750.
Clients obtain bearer tokens directly from each backend, making it unnecessary to share their credentials with Derapi.

### Example: client acquires and transmits tokens, using curl.
To acquire a bearer token from SMA, the client posts this request to SMA's `token` endpoint:

    $ curl -u sma_client_id:sma_client_secret \
           -H ""Content-Type: application/x-www-form-urlencoded"" \
           -d grant_type=client_credentials&scope=monitoringApi:read \
           -X POST https://auth.smaapis.de/oauth2/token

This produces the following headers and body:

    POST /oauth2/token HTTP/1.1
    Host: sandbox-auth.smaapis.de
    Authorization: Basic c21hX2NsaWVudF9pZDpzbWFfY2xpZW50X3NlY3JldA==
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 54
    
    grant_type=client_credentials&scope=monitoringApi:read

If the endpoint accepts client's credentials, it responds with JSON similar to the following:

    {
     ""access_token"":""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA"",
     ""expires_in"":300,
     ""refresh_expires_in"":1800,
     ""refresh_token"":""eyJhbGcIgOiAiSldUIiwia2lkIiA6ICJhNmJlZjg4NS0yNT"",
     ""scope"":""monitoringApi:read gridControlApi_EnergyTrader:read""
    }

The client repeats this process for other backends, saving the value of `access_token` each time (`eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA` in this example).
Naturally, credentials and scopes will differ for each backend.

#### Derapi Authentication
Using the same process, client acquires a token for Derapi as well, using its Derapi `client_id` and `client_secret` at http://api.derapi.com/oauth/token.
Derapi access tokens expire after 1 hour but we recommend requesting a new token whenever one is needed. 
If your access token expires you should repeat the same process to obtain a new access token.

#### Example Derapi API request
Having acquired tokens for Derapi and all relevant backends, the client passes them as headers in requests to Derapi.
For example, a client can use this command to retrieve a list of all solar inverters from Derapi:

    $ curl -H ""Authorization: Bearer ZGVyYXBpIHRva2VuCg=="" \
           -H ""X-Authorization-sma: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA"" \
           -H ""X-Authorization-solis: Bearer c29saXMgdG9rZW4K"" \
            https://api.derapi.com/solar-inverters

This request produces the following headers:

    GET /solar-inverters HTTP/1.1
    Host: api.derapi.com
    Authorization: Bearer ZGVyYXBpIHRva2VuCg==
    X-Authorization-sma: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA
    X-Authorization-solis: Bearer c29saXMgdG9rZW4K

Derapi's response may look like this:

    {
      ""solar-inverters"": [
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTc6bm9uY2UrdmVyc2Urbm9uY2Ur"",
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6OTU6bm9uY2UrdmVyc2Urbm9uY2Ur"",
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTAwOm5vbmNlK3ZlcnNlK25vbmNl"",
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTA0Om5vbmNlK3ZlcnNlK25vbmNl"",
        ...
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTA2Om5vbmNlK3ZlcnNlK25vbmNl"",
        ""https://api.derapi.com/solar-inverters/c21hLXNib3g6MTExOm5vbmNlK3ZlcnNlK25vbmNl"",
        ""https://api.derapi.com/solar-inverters/c29saXM6MTMwODY3NTIxNzk0NzIyOTAzODpub25j"",
        ""https://api.derapi.com/solar-inverters/c29saXM6MTMwODY3NTIxNzk0NzIyOTAzNzpub25j"",
      ],
      ""errors"": {}
    }

### Example: client acquires and transmits tokens, using Python.
This repository includes a complete, working example in Python: [derapi_auth_example.py](derapi_auth_example.py).

### Example: client acquires and transmits tokens, using Java.
This repository includes a complete, working example in Java: [DerapiAuthExample.java](DerapiAuthExample.java).


## Auxiliary OAuth endpoints
`https://api.derapi.com/oauth/*`

Most backends have standardized on OAuth as the authentication mechanism.
One benefit of third-party authentication schemes like OAuth is that Derapi never sees clients' credentials for different backends.
Information Derapi does not have cannot be hacked by malicious attackers.
OAuth's ubiquity means client engineers are familiar with its workflows.
A number of backends use other authentication schemes, ranging from HTTP `Basic Auth` to custom designs.
For these backends, Derapi provides auxiliary OAuth endpoints to present a uniform interface to clients.

### Auxiliary OAuth: Solis Cloud

`https://api.derapi.com/oauth/solis`

Derapi provides an auxiliary OAuth endpoint for Solis Cloud.
A client is required to send its Solis credentials to this endpoint and receive a Bearer token on success.
The client then sends this token in the `X-Authentication-solis` header, same as regular OAuth tokens obtained directly from backends.

## Obtaining Partner Credentials and Customer Enrollment
The approach to issuing partner API credentials and enrolling customer devices varies between DER partners.
This section contains summarized instructions on how to get credentials for each partner and associate customer-owned devices with your credentials.
Each partner is marked with whether customer enrollment is via [OAuth](https://oauth.net/2/) or a custom authorization scheme.

Derapi also offers a hosted option for customer enrollment and maintaining partner credentials. Reach out to sales@derapi.com to learn how we can help streamline customer and credential management.

## Solis (`Custom`)
### Summary
Solis uses a custom authorization system using API ID and Key for each [Solis portal](https://www.soliscloud.com/) account.
Once your customer's systems are associated with your Solis portal account then follow the instructions to get your API ID and Key.
### Enrolling Customers
If you are using a single Solis portal account to make API requests then follow the instructions to add all your customer systems.
This is referred to as ""Add Plant"" in the Solis documentation.
Alternatively, you can collect API ID/Keys from your customers and use those to make API requests.
### Obtaining Credentials
Follow the steps outlined below to generate a Solis API ID and Key.
Please reference **Auxiliary OAuth: Solis Cloud** for more information on generating a Bearer token for making Solis API requests.
``` mermaid
graph TD
	subgraph Solis API
		a(""Sign in to the Solic Cloud Portal"") --> b(""Account -> Basic Settings -> API Management to get Key"")
		b --> c(""Copy the API ID and Key and save"")
		c --> d(""Use the Derapi Auxiliary Auth endpoint to generate a bearer token"")
		d --> e(""Make API requests with this token"")
	end
```

## SMA (`OAuth`)
### Summary
SMA offers OAuth2 for enrolling customer systems for API access. To create a SMA API account [contact SMA](https://developer.sma.de/contact.html). 
### Enrolling Customers
Follow the [SMA Code Grant Flow instructions](https://developer.sma.de/api-access-control.html#c441249) to set up OAuth for customers to authorize your application. 
### Obtaining Credentials
Follow these steps to create a SMA API Account and get an access token.
SMA refresh tokens expire by default.
Derapi recommends using SMA’s [offline_token option](https://developer.sma.de/api-access-control.html) to acquire a refresh token that does not expire.
``` mermaid
graph TD
	subgraph SMA API
		da1(Request API Account) --> da4(End customer/sytem owner authorizes Application via OAuth)
		da4 --> da5(Application receives Authorization Code)
		da5 --> da6(Get access and refresh tokens)
		da6 --> da7(Make API requests)
	end
```

## SolarEdge (`Custom`)
### Summary
SolarEdge uses a custom authorization system using an API Key.
This key is retrieved from the SolarEdge [Monitoring Portal](https://monitoring.solaredge.com/solaredge-web/p/login?locale=en_US).
Once your customer's systems are associated with your SolarEdge monitoring portal account then follow the instructions to get your API Key.
Derapi recommends using an Account API Key which provides access to all sites in your account.
### Enrolling Customers
If you are using a single SolarEdge monitoring portal account to make API requests then follow the instructions to add all your customer systems.
This is referred to as ""Add Inverter or Gateway"" in the SolarEdge documentation.
Alternatively, you can collect API Keys from your customers and use those to make API requests.
### Obtaining Credentials
Follow the steps outlined below to generate a SolarEdge Account API Key.
``` mermaid
graph TD
	subgraph SolarEdge API
		a(Sign in to the SolarEdge Monitoring Portal) --> b(Generate Account API Key)
		b --> c(Copy the API Key and save)
		c --> d(Click Save in SolarEdge Portal)
		d --> e(Make API requests with the key)
	end
```

## Enphase (`OAuth` or `Custom`)
### Summary
Enphase offers two options for enrolling and authorizing customer systems.
If you are an in Installer with Enphase portal access to customer systems then the custom approach, via Partner API, is recommended.
If you are an Application Developer we recommend using OAuth for customers to authorize your application.
### Enrolling Customers
If you are an Installer then then follow the Enphase instructions to add all your customer systems to your Enphase account.
If you are an Application Developer then follow the [Enphase instructions](https://developer-v4.enphase.com/docs/quickstart.html) to set up OAuth for customers to authorize your application. 
### Obtaining Credentials
If you are an Installer follow these steps to create a Partner Plan Developer Account and get an access token.
Please note that Enphase access tokens expire after 1 day and refresh tokens expire after 1 month.
Your application should refresh the refresh token before it expires to avoid having to manually reauthorize.
``` mermaid
graph TD
	subgraph Partner API
		pa1(Create Partner Plan Developer Account) --> pa2(Configure Application)
		pa2 --> pa3(Get access and refresh tokens)
		pa3 --> pa4(Make API requests)
		pa3 --> pa5(Periodically refresh your refresh token)
		pa5 --> pa3
	end
```
If you are an Application Developer follow these steps to create a Developer Account and get an access token.
Please note that Enphase access tokens expire after 1 day and refresh tokens expire after 1 month.
Your application should refresh the refresh token before it expires to avoid having to ask customers to manually reauthorize.
``` mermaid
graph TD
	subgraph Developer API
		da1(Create Developer Account) --> da2(Configure Application)
		da2 --> da3(Get API Key, Auth URL, client secret)
		da3 --> da4(End customer/sytem owner authorizes Application via OAuth)
		da4 --> da5(Dev/Application receives Auth Code)
		da5 --> da6(Get access and refresh tokens)
		da6 --> da7(Make API requests)
		da6 --> da8(Periodically refresh your refresh token)
		da8 --> da6
	end
```
## How to get help
Have questions on the API, how to use it, or a request for a new feature?
Please reach out via email to support@derapi.com.
",4,4,2,0,solar-energy,"[api, battery, derapi, ders, inverters, solar-energy, thermostats]",00000
850,SolarTracker,gritcsenko,N/A,https://github.com/gritcsenko/SolarTracker,https://api.github.com/repos/gritcsenko/SolarTracker,Track sun position,"# SolarTracker

Track sun position
",4,4,2,0,solar-energy,"[solar, solar-energy, tracker]",00000
851,brown-solar-charger,brown-SSW,brown-SSW,https://github.com/brown-SSW/brown-solar-charger,https://api.github.com/repos/brown-SSW/brown-solar-charger,This program monitors a solar power system and runs a physical and online dashboard.,"# brown-solar-charger
These programs monitor a solar power system and run a physical and online dashboard.

Made by members of Brown University club ""Scientists for a Sustainable World"" (s4sw@brown.edu) 2021

Programmed on an ESP-32S
",4,4,2,12,solar-energy,"[brown-university, dashboard, esp32, firebase, firebase-realtime-database, justgage, monitor, plotly, plotlyjs, renogy-rover, solar, solar-energy, xmlhttprequest]",00000
852,sbfspot_to_emonCMS,danbates2,N/A,https://github.com/danbates2/sbfspot_to_emonCMS,https://api.github.com/repos/danbates2/sbfspot_to_emonCMS,"python script to interface SBFspot and emonCMS, by reading sbfspot database and then make GET request to emonCMS","# SBFspot to emonCMS
Python script to interface SBFspot and emonCMS, by reading the most recent sbfspot database entry and then making a HTTP request to emonCMS.

https://github.com/SBFspot/SBFspot/

https://emoncms.org/

. Works only by sending the most recent datapoint.

. To get this working (with SBFspot already installed) place this script in /home/pi/scripts
. make it exacutable _$ sudo chown 755 sbfspot_to_emonCMS.py_
. and then type  _$ crontab -e_   and add a new line:

__*/5 * * * * python /home/pi/scripts/sbfspot_to_emonCMS.py > /dev/null__

. The */5 is the interval in minutes, matching the SBFspotUploadDaemon default recommendation.

. User must modify the script to include their emonCMS API Write key.

. With emonCMS already installed on a rPi, SBFspot will run fine. Tested using the default SQLite.

. With emonCMS Oct2017.img, the default SBFspot folder locations need changing during install from /home/pi/smadata to /home/pi/data/smadata, for write permissions to not throw errors. This will need changing in both SBFspot conf, and SBFspotUploadDaemon conf. Future versions of emonCMS (emonSD) should not suffer this added requirement as the write lock is being removed.

. Included in the script folder is an example database and my python learning steps to complete this.


Possible Improvement : Another one-time script could be made to upload the whole database to emonCMS using the bulk-upload API.
Possible Improvement (minor) : To use the timestamp information to more accurately place the datapoints in time.

Big thanks to these guys: https://community.openenergymonitor.org/t/sbfspot/8245

Thank you developer(s) of SBFspot, and to their Raspberry Pi install guide, which have given me greater understanding of how my rPi worked under the hood.

*SBFspot is a tool for accessing the data stored in SMA solar inverters via bluetooth or ethernet.
",4,4,6,0,solar-energy,"[emoncms, energy-monitor, sbfspot, solar-energy]",00000
853,Arduino.SolarTracker,staviloglu,N/A,N/A,https://api.github.com/repos/staviloglu/Arduino.SolarTracker,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D7:4C24:2B67B12:590D027:6522400C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
854,EVCC_NL_Docker_Setup,JasperE84,N/A,https://github.com/JasperE84/EVCC_NL_Docker_Setup,https://api.github.com/repos/JasperE84/EVCC_NL_Docker_Setup,EVCC configuratie van een Docker container met Nederlandse slimme meter en Alfen laadpaal,"# EVCC configuratiestappen voor een Nederlandse slimme meter.
EVCC is een open source project waarmee je je laadpaal kan aansturen om zoveel mogelijk op zonnestroom te laden. Op basis van een koppeling met je slimme meter, en optioneel ook je PV-installatie, kan EVCC bepalen op welk vermogen je laadpaal mag laden. 
Dit project is een voorbeelduitwerking van de hiervoor benodigde (minimale) configuratie.

<img src=""./docs/img/EVCC_Screenshot.jpg"" width=""30%"">

# Disclaimer
*Ik ben geen electricien en ik ben ook niet opgeleid om elektrische installaties te installeren of te ontwerpen. Ben jij zelf niet deskundig? Gebruik dit artikel dan om samen met je installateur te kunnen bespreken hoe je EVCC op een veilige manier kan toepassen in jouw specifieke situatie*

# Welke integraties heeft EVCC minimaal nodig?
In EVCC kan je allerlei apparaten koppelen, zoals thuisbatterijen en PV-installaties. Wat je *minimaal* nodig hebt om je auto op zonne-energie te laden, is een koppeling van EVCC met je laadpaal en met de slimme meter. 

De slimme meter wordt uitgelezen om te bepalen wat je huishouden op ieder moment teruglevert aan het net. EVCC kan dan bepalen of er een overschot is waarmee de auto geladen mag worden. EVCC moet vervolgens met je laadpaal kunnen communiceren om aan te sturen of er danwel (1) *niet* geladen mag worden, (2) op de *minimale stroomsterkte* benodigd voor de auto geladen mag worden, of dat (3) er op *vol vermogen* geladen mag worden.

De tweede optie is bedoeld voor situaties waarin er minder PV-vermogen beschikbaar is dan het minimale vermogen om je EV mee te kunnen laden. Door te limiteren op het minimum laadvermogen, laad je effectief zoveel mogelijk uit de opbrengst van je panelen. 

# Wat als het opgeleverd vermogen van de PV-installatie klein is?
EVCC kan de Alfen laadpaal aansturen om te schakelen tussen 1-fase en 3-fase (1p/3p) laden. (Dat kan bij Alfen, maar is helaas niet bij alle merken laadpalen mogelijk). De IEC61851 standaard specificeert dat het minimum amperage om mee te laden 6A per fase is; ongeveer 1.4 kW. Vanaf 1.4 kW beschikbaar PV-vermogen (opbrengst PV-installatie minus verbruik andere apparaten) kan er dus 100% op zonne-energie geladen worden.

Wanneer er per fase max 16A geleverd kan worden (configureerbaar en de juiste instelling bij een 'standaard' 3x25A netaansluiting) is dit hoe EVCC met een Alfen paal zal schakelen:
- 1,4 tot 3,7 kW: 1-fase laden
- 4,1 tot 11 kW: 3-fase laden

*Let op: Bij loadpoints in evcc.yaml moet de phases instelling op 0 staan om automatisch schakelen te activeren. In de standaard EVCC configuratie is dit niet het geval, in het configuratievoorbeeld in deze git repo is dat wel zo ingesteld.*

# Werkt mijn OCPP backoffice (zoals E-Flux of LMS) dan nog om laadkosten door te kunnen belasten?
Ja, bij mij wel in ieder geval. Mijn Alfen laadpaal is met E-Flux verbonden en dat werkt prima. E-flux bepaalt of de laadsessie mag starten en trackt de sessies voor kostenbeheer. EVCC beheert vervolgens op hoeveel vermogen die sessies mogen laden. In principe is EVCC een alternatief load balancing systeem. In plaats van de P1 poort, stel je de laadpaal in om obv input van EVCC het laadvermogen te beheren.

# Maar werkt loadbalancing met de P1 poort dan nog?
Volgens mij niet. De laadpaal wordt geconfigureerd om EVCC, in plaats van de P1 poort, als databron voor het toelaatbare laadvermogen te gebruiken. EVCC zou dan de load balancing moeten doen, en ik ben nog geen instelling tegengekomen om dynamisch het max laadvermogen te beheren rekening houdende met andere grootverbruikers in je huis. 

Wel kan je een statische max current instellen (bij mij ingesteld op 16A). 
# Het stappenplan voor de minimale configuratie
## Configuratie van de Alfen laadpaal
### Benodigde licentie
Je laadpaal heeft een geactiveerde licentie voor de ""Active Load Balancing"" nodig.
### Configuratie laadpaal voor EVCC
De onderstaande instellingen heeft de installateur voor mij bij oplevering heeft ingesteld. De installateur doet dat met de ACE tool van Alfen. Zelf kan je ook de ACE tool bij Alfen downloaden en gebruiken. Wel moet je dan het wachtwoord van je laadpaal weten.

![ACE Service installer screenshot](/docs/img/Alfen_ACE_Service_Installer_001.png ""ACE Service installer screenshot"")

Overige instellingen voor mijn installatie (3x25A netaansluiting):
- Station max current: 20a
- Connector 1 max current: 20a 
- Backoffice preset: E-flux-platform
- Protocol - OCPP 1.6

Verder is de laadpaal ingesteld om via **DHCP automatisch** een IP adres te krijgen. Volgens mij is dit de standaard instelling. In de handleiding staat ergens dat het standaard IP adres van de laadpaal 169.254.1.10 is, maar let op, dat is geen normaal statisch IP adres, maar een fallback IP adres voor als er geen DHCP server op het netwerk actief is. De 169.254.0.0/16 range is een APIPA range (Automatic Private IP Addressing)

### Bekabeling
Je hebt een UTP kabel nodig van je router of switch naar de Ethernet poort op je Alfen laadpaal. **Vraag dit specifiek aan je installateur om op te leveren.** In de meeste standaard installaties wordt er alleen een UTP kabel op de P1 poort naar de P1 poort in je meterkast gelegd.

Liggen alle kabels al in de grond? Dan is er een workaround. De P1 poort heeft namelijk maar 2 aders van de UTP kabel nodig. En 10Base-T (100mbit) heeft slechts vier aders nodig. Een UTP kabel heeft 8 aders. Je kan dus aan ieder uiteinde van de UTP kabel zowel een P1 als RJ45 connector bevestigen. Ik heb dit zelf echter niet getest en zou indien mogelijk de aanleg van 2 UTP kabels aanbevelen. 

### Static DHCP mapping voor laadpaal in je router
EVCC zal via je TCP/IP netwerk contact zoeken met je laadpaal. EVCC moet dus het IP adres van je laadpaal weten, dus die mag niet telkens veranderen.

In mijn geval heb ik mijn DHCP server op mijn router ingesteld om altijd hetzelfde IP-adres te vergeven aan het MAC adres van de Alfen laadpaal.
Dit is hoe ik dat heb gedaan:
1. Verbind de Alfen ethernetpoort met je switch of router en kijk of de lampjes branden op je switch/router die aangeven dat de link actief is
2. Schakel de laadpaal met de aardlekautomaat uit en weer in, dit zodat de laadpaal via DHCP een IP adres probeert te verkrijgen
3. Kijk op je router bij DHCP leases welk adres er aan je laadpaal vergeven is en noteer het MAC hardware adres
4. Configureer je DHCP server om met een 'static mapping', 'static lease' of ook soms 'reservering' genoemd, altijd hetzelfde IP adres aan de laadpaal te vergeven
5. (In mijn geval heb ik een IP adres buiten de DHCP ip pool ingesteld)
6. Schakel de aardlekautomaat van de laadpaal opnieuw uit en in, zodat de laadpaal bij opstarten het gereserveerde IP adres van de DHCP server verkrijgt.
7. Probeer het IP te pingen om te kijken of alles werkt.

![Voorbeeld static DHCP mapping ](/docs/img/Router_DHCP_static_mapping.png ""Voorbeeld DHCP static mapping"")

Beschikt je DHCP server niet over de mogelijkheid om een vast IP adres te koppelen aan een MAC adres? Configureer de laadpaal dan om zelf een statisch ip aan te nemen.

# Configuratie van de software
Nu de laadpaal verbonden is met het netwerk en geconfigureerd is, kunnen we de software gaan installeren.
## EVCC Sponsortoken
Om de Alfen EVCC integratie te kunnen gebruiken moet je op de website van EVCC een sponsortoken ophalen. Dat kost je 2 USD per maand. Dit is hoe het werkt: Als je de github repo van EVCC met 2 USD/mnd sponsort, dan kan je op de website van EVCC een token ophalen. Zie deze link voor meer info: https://sponsor.evcc.io/
## Pas .env configuratiebestand aan
Open het `.env bestand in de root van de git repository en configureer de variabelen met de juiste instellingen.
## Start de containers
Download de source van deze git repository, navigeer in bash shell naar het pad waar docker-compose.yml is opgeslagen en voer uit `docker-compose up -d`

## DSMR-Reader API actieveren voor EVCC
We gaan gebruik maken van een open source project dsmr-reader om de P1 poort uit te lezen. Met mijn Landis Gyr E350 slimme meter werkte alles out of the box. Er zijn twee manieren om EVCC de data uit DSMR-Reader te laten ophalen, via de WebAPI of via MQTT. Ik kies voor de WebAPI omdat ik dan niet de extra schakel van de MQTT server nodig heb.

Start de DSMR docker container en navigeer naar http://JOUW_DOCKER_HOST:7777/admin/

Klik vervolgens op API configuratie om een API key te genereren, noteer deze key
![DSMR-Reader API key](/docs/img/DSMR_API_Configuratie.png ""DSMR Reader API key"")

Het leuke van DSMR-Reader is dat je ook een energiedashboard van je huis, als de docker draait hier te vinden: http://JOUW_DOCKER_HOST:7777/
## Wijzig  evcc.yaml configuratiebestand
Open `./data/evcc/evcc.yaml`
1. Vul je sponsor token in bij `PUT_YOUR_EVCC_SPONSOR_TOKEN_HERE`
2. Vervang `PUT_YOUR_DSMR_API_KEY_HERE` (let op, 7x, evcc.yaml ondersteund helaas geen environment vars of secrets.yaml)
3. Vervang `PUT_THE_IP_OF_YOUR_ALFEN_CHARGER_HERE` door het IP adres van je laadpaal zoals in de statische DHCP mapping geconfigureerd
4. Nu EVCC herstarten: `$ docker restart evcc` en check de logs op evt fouten: `$ docker logs -f evcc`
5. Benader EVCC op http://DOCKER_HOST_IP:7070 en kijk of het werkt!

## Testen maar!
1. Hang je EV aan de lader en gebruik evt. je laadpas om de laadsessie te starten.
2. Wijzig tijdens de laadsessie de instelling ""uit"" ""pv"" ""pv+min"" en ""snel"" en kijk of het laadvermogen zoals verwacht reageert (duurt telkens even)
3. Beeindig de laadsessie en controleer evt. in de E-flux/LMS backoffice of de laadsessie daar ook geregistreerd is en of de kostenregistratie op de juiste manier verloopt.
",3,3,1,0,solar-energy,"[alfen, docker, docker-compose, dsmr-reader, electric-vehicles, evcc, growatt, p1, solar-energy]",00000
855,SolMod,dazhiyang,N/A,https://github.com/dazhiyang/SolMod,https://api.github.com/repos/dazhiyang/SolMod,Transposition modeling of solar irradiance,"# Transposition modeling of solar irradiance

Transposition models convert solar irradiance received by a horizontal surface to that received by an arbitrary tilted surface. The inverse transposition models are used to convert irradiance from tilt to horizontal. This package gives several popular models to perform such bidirectional conversion. 

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. 

### Prerequisites

This is an R package, so you need to install [R](https://www.r-project.org/) on your computer first. In addition, [RStudio](https://www.rstudio.com/) is an integrated development environment (IDE) for R; it is highly recommended.

### Installing

Once R and RStudio are installed. Open R or RStudio and install the [devtools](https://cran.r-project.org/web/packages/devtools/index.html) package, which allows you to install R package from GitHub

```
install.packages(""devtools"")
```

Load the package that you just installed

```
library(""devtools"")
```

Now, you can install the SolMod package, using

```
install_github(""dazhiyang/SolMod"")
```

## Running the tests

This code segment gives an example on how to run transposition modeling (horizontal to tilt) using a variety of models. 

```
library(""SolMod"")
data(""NREL"") #load data
slope = c(40, 90, 90, 90, 90) # initialize tilt angles
azimuth.PV = c(180, 0,  90, 180, 270) # initialize azimuth angles

Gc <- list()
for(i in 1:length(slope)) #loop for the 5 tilts
{
	NREL$theta <- NREL[,which(substr(names(NREL), 1, 2)==""th"")[i]]
	NREL$s <- slope[i]

  	Rd <- data.frame(tm = NREL$Tm) #initialize a data.frame

	#there are a total of 26 models, use 3 for demonstration purposes
  	Rd$Liu <- Liu(NREL) #Liu
      	Rd$Perez4 <- Perez4(NREL) #Perez4
  	Rd$Gueymard <- Gueymard(NREL) #Gueymard

	#compute tilted irradiance
  	Rd <- Rd[,-1]
  	Ic <- cos(d2r(NREL$theta))/cos(d2r(NREL$Z))*(NREL$Gh-NREL$Dh)
  	Dg <- NREL$Gh*0.5*NREL$rho*(1-cos(d2r(NREL$s)))
  	Dc <- Rd*NREL$Dh
  	Gc[[i]] <- Ic + Dg + Dc
}

#save predicted and measured Gc values
pred <- Gc
meas <- NREL[,which(substr(names(NREL), 1, 2)==""Gc"")]

#error calculation
rmse <- matrix(unlist(lapply(1:length(slope), function(y) apply(Gc[[y]], 2, function(x) round(RMSE(x, meas[,y]),1)))), ncol = length(slope))
rownames(rmse) <- names(Gc[[1]])
colnames(rmse) <- paste("" ("", slope, "", "", azimuth.PV, "")"", sep = """")
rmse
```

## For more information

* The original paper, a review published in Solar Energy, describing these transposition models can be found [here](https://doi.org/10.1016/j.solener.2016.06.062).
* The original document describing the best performing model, namely, the Perez model, can be found [here](https://doi.org/10.1016/0038-092X(90)90055-H).


## License

This package is free and open source software, licensed under GPL-3.
",3,3,1,0,solar-energy,[solar-energy],00000
856,PvExcess,otti,N/A,https://github.com/otti/PvExcess,https://api.github.com/repos/otti/PvExcess,Use your photovoltaics excess power,"# PV Excess
This software will enable you to turn on your appliances automatically if your pv system is supplying enough excess power.
The device will receive the current power from your meter by MQTT. Positive values mean that you are receiving power from the grid. 
Negative values mean that you are feeding power into the grid.
If the excess power will rise above an adjustable level and will stay above that level for an adjustable ammount of time, 
an output of the ESP will turn on.  
Two outputs are avilable. The first will stay on permanently after the trigger threshold will be exceeded. E.g. a relay can be connected 
to this output to power your appliances. The second output will just stay on for 500 ms. E.g. this can ""push"" the start button of a device by bridging it´s start button with a relay.

<img src=""https://github.com/otti/PvExcess/blob/main/pics/display_scrren1.jpg"" width=""200"">
<img src=""https://github.com/otti/PvExcess/blob/main/pics/display_scrren2.jpg"" width=""200"">

# How to install
* Checkout this repo
* Rename and adapt [Config.h.example](https://github.com/otti/PvExcess/blob/master/SRC/PvExcess/Config.h.example) to Config.h with your compile time settings
* Flash the TTGO with ARduino IDE
* Connect to the setup wifi called PvExcess (PW: PvExcess) and configure the firmware via the webinterface at http://192.168.4.1
   * Select your WiFi and enter your password
   * Set MQTT server, port, username, password, topic and the JSON entry within the MQTT data
* If you need to reconfigure the stick later on you have to press the ap button for a few seconds (next beside the reset button)

## Features
Implemented Features:
* Built-in simple Webserver for debugging and firmware update
* It supports convenient OTA firmware update (`http://<ip>/firmware`)
* Wifi manager with own access point for initial configuration of Wifi and MQTT server (IP: 192.168.4.1, SSID: PvExcess, Pass: PvExcess)

## Supported devices
* LILYGO TTGO T-Display ESP32 1.14 Inch (240x135 pixel)


## JSON Format Data

The value of ´ElectricalPower´ has to be a signed integer

example:
`{  
  ""ElectricalPower"": -500  
}`  

## Some keywords
ESP32, Arduino, MQTT, JSON, photovoltaics, solar, excess power, excessive power, surplus power, overflow power





",3,3,1,0,solar-energy,"[arduino, arduino-ide, esp32, photovoltaic, platformio, solar, solar-energy]",00000
857,SEGS_exergy,fwitte,N/A,https://github.com/fwitte/SEGS_exergy,https://api.github.com/repos/fwitte/SEGS_exergy,TESPy model for the exergy analysis of the Solar Energy Generating System (SEGS),"# Exergy Analysis of a Solar Thermal Power Plant in TESPy

Example for the exergy analysis in [TESPy][]. Find more information
about the exergy analysis feature in the respective [online
documentation][].

The so called ""Solar Energy Generating System (SEGS)"" model has the following
topology:

<figure>
<img src=""./flowsheet_TESPy.svg"" class=""align-center"" />
</figure>

Find the model specifications and results in the SEGS.py script and the
corresponding [pdf model report][].

## Usage

Clone the repository and build a new python environment. From the base
directory of the repository run

``` bash
pip install -r ./requirements.txt
```

to install the version requirements for the SEGS.py python script.

On top of the python script, an EBSILON model (v14.03.01) for the
identical setup is provided for validation. The results are available in
the respective flowsheet. The solar field is not considered for further
investigation, thus it represents a heat input only.

<figure>
<img src=""./flowsheet_EBSILON.svg"" class=""align-center"" />
</figure>

The original data of the plant are partially obtained from the following
reports:

*F. Lippke, Simulation of the part-load behavior of a 30 MWe SEGS plant,
Technical Report SAND-95-1293, Sandia National Lab., Albuquerque, 1995.
URL:https://www.osti.gov/biblio/95571. doi:10.2172/95571.*

*D. Kearney, C. E. Miller, Technical Evaluation of Project Feasibilty
for SEGS VI, Technical Report,1988. Submitted to Luz Solar Partners VI.*

## Exergy Analysis Results

### Connection results

|    |   e_PH in kJ/kg |   e_T in kJ/kg |   e_M in kJ/kg |   E_PH in MW |   E_T in MW |   E_M in MW |
|:---|----------------:|---------------:|---------------:|-------------:|------------:|------------:|
| 1  |          1197.3 |         1187.4 |            9.9 |        46.66 |       46.27 |        0.39 |
| 2  |          1197.3 |         1187.4 |            9.9 |        46.66 |       46.27 |        0.39 |
| 3  |           977.5 |          974.2 |            3.3 |        38.09 |       37.96 |        0.13 |
| 4  |           977.5 |          974.2 |            3.3 |        35.20 |       35.08 |        0.12 |
| 5  |           869.2 |          867.5 |            1.8 |        31.30 |       31.24 |        0.06 |
| 6  |           869.2 |          867.5 |            1.8 |        29.14 |       29.08 |        0.06 |
| 7  |          1074.3 |         1072.7 |            1.6 |        36.01 |       35.96 |        0.05 |
| 8  |           884.5 |          883.8 |            0.7 |        29.65 |       29.63 |        0.02 |
| 9  |           884.5 |          883.8 |            0.7 |        27.46 |       27.43 |        0.02 |
| 10 |           653.7 |          653.6 |            0.2 |        20.29 |       20.29 |        0.01 |
| 11 |           653.7 |          653.6 |            0.2 |        19.14 |       19.13 |        0.01 |
| 12 |           469.8 |          469.8 |           -0.0 |        13.75 |       13.75 |       -0.00 |
| 13 |           469.8 |          469.8 |           -0.0 |        13.00 |       13.00 |       -0.00 |
| 14 |           287.9 |          287.9 |           -0.1 |         7.97 |        7.97 |       -0.00 |
| 15 |           287.9 |          287.9 |           -0.1 |         7.65 |        7.65 |       -0.00 |
| 16 |           115.8 |          115.9 |           -0.1 |         3.08 |        3.08 |       -0.00 |
| 17 |            99.7 |           99.8 |           -0.1 |         3.10 |        3.10 |       -0.00 |
| 18 |             1.7 |            1.8 |           -0.1 |         0.05 |        0.06 |       -0.00 |
| 19 |             3.3 |            1.9 |            1.4 |         0.10 |        0.06 |        0.04 |
| 20 |             3.8 |            2.5 |            1.4 |         0.12 |        0.08 |        0.04 |
| 21 |            10.4 |            9.5 |            0.9 |         0.32 |        0.29 |        0.03 |
| 22 |            11.7 |           10.8 |            0.9 |         0.36 |        0.34 |        0.03 |
| 23 |            29.4 |           28.6 |            0.8 |         0.91 |        0.89 |        0.02 |
| 24 |            30.6 |           29.9 |            0.8 |         0.95 |        0.93 |        0.02 |
| 25 |            59.0 |           58.3 |            0.7 |         1.83 |        1.81 |        0.02 |
| 26 |           115.4 |          114.7 |            0.7 |         4.50 |        4.47 |        0.03 |
| 27 |           130.2 |          117.8 |           12.4 |         5.07 |        4.59 |        0.48 |
| 28 |           135.6 |          123.2 |           12.4 |         5.28 |        4.80 |        0.48 |
| 29 |           176.6 |          165.5 |           11.1 |         6.88 |        6.45 |        0.43 |
| 30 |           180.1 |          169.0 |           11.1 |         7.02 |        6.59 |        0.43 |
| 31 |           232.6 |          222.3 |           10.3 |         9.06 |        8.66 |        0.40 |
| 32 |           412.0 |          401.8 |           10.2 |        16.06 |       15.66 |        0.40 |
| 33 |           418.1 |          407.9 |           10.2 |        32.90 |       32.09 |        0.81 |
| 34 |           736.9 |          726.6 |           10.2 |        57.98 |       57.17 |        0.81 |
| 35 |          1055.6 |         1045.4 |           10.2 |        41.14 |       40.74 |        0.40 |
| 36 |           977.5 |          974.2 |            3.3 |         2.89 |        2.88 |        0.01 |
| 37 |           237.0 |          233.7 |            3.3 |         0.70 |        0.69 |        0.01 |
| 38 |           187.0 |          183.8 |            3.3 |         0.55 |        0.54 |        0.01 |
| 39 |           185.9 |          184.1 |            1.8 |         0.55 |        0.54 |        0.01 |
| 40 |           869.2 |          867.5 |            1.8 |         2.16 |        2.16 |        0.00 |
| 41 |           498.2 |          496.4 |            1.8 |         2.71 |        2.70 |        0.01 |
| 42 |           177.0 |          175.2 |            1.8 |         0.96 |        0.95 |        0.01 |
| 43 |           135.3 |          133.5 |            1.8 |         0.74 |        0.73 |        0.01 |
| 44 |           133.9 |          133.2 |            0.7 |         0.73 |        0.73 |        0.00 |
| 45 |           884.5 |          883.8 |            0.7 |         2.20 |        2.19 |        0.00 |
| 46 |           653.7 |          653.6 |            0.2 |         1.16 |        1.16 |        0.00 |
| 47 |            63.9 |           63.8 |            0.2 |         0.11 |        0.11 |        0.00 |
| 48 |            37.1 |           37.0 |            0.2 |         0.07 |        0.07 |        0.00 |
| 49 |            36.9 |           36.9 |           -0.0 |         0.07 |        0.07 |       -0.00 |
| 50 |           469.8 |          469.8 |           -0.0 |         0.75 |        0.75 |       -0.00 |
| 51 |           242.3 |          242.3 |           -0.0 |         0.82 |        0.82 |       -0.00 |
| 52 |            32.7 |           32.7 |           -0.0 |         0.11 |        0.11 |       -0.00 |
| 53 |            14.8 |           14.8 |           -0.0 |         0.05 |        0.05 |       -0.00 |
| 54 |            14.6 |           14.7 |           -0.1 |         0.05 |        0.05 |       -0.00 |
| 55 |           287.9 |          287.9 |           -0.1 |         0.32 |        0.32 |       -0.00 |
| 56 |            82.3 |           82.4 |           -0.1 |         0.37 |        0.37 |       -0.00 |
| 57 |            11.9 |           12.0 |           -0.1 |         0.05 |        0.05 |       -0.00 |
| 58 |             4.6 |            4.7 |           -0.1 |         0.02 |        0.02 |       -0.00 |
| 59 |             4.0 |            4.1 |           -0.1 |         0.02 |        0.02 |       -0.00 |
| 60 |             0.9 |            0.9 |            0.0 |         1.94 |        1.93 |        0.01 |
| 61 |             0.9 |            0.9 |            0.0 |         1.94 |        1.93 |        0.01 |
| 62 |             0.2 |            0.2 |            0.0 |         0.37 |        0.37 |        0.00 |
| 63 |             0.2 |            0.2 |            0.0 |         0.41 |        0.37 |        0.04 |
| 64 |            -0.0 |           -0.0 |            0.0 |        -0.00 |       -0.00 |        0.00 |
| 65 |             0.0 |            0.0 |            0.0 |         0.49 |        0.00 |        0.49 |
| 66 |             0.0 |            0.0 |            0.0 |         0.49 |        0.49 |        0.00 |
| 70 |           278.5 |          276.4 |            2.1 |       112.89 |      112.04 |        0.85 |
| 71 |           278.5 |          276.4 |            2.1 |       112.89 |      112.04 |        0.85 |
| 72 |           278.5 |          276.4 |            2.1 |        98.39 |       97.65 |        0.74 |
| 73 |           261.4 |          259.3 |            2.0 |        92.35 |       91.63 |        0.72 |
| 74 |           186.2 |          184.3 |            1.9 |        65.80 |       65.13 |        0.67 |
| 75 |           165.0 |          163.1 |            1.8 |        58.28 |       57.64 |        0.64 |
| 76 |           278.5 |          276.4 |            2.1 |        14.50 |       14.39 |        0.11 |
| 77 |           122.8 |          121.0 |            1.8 |         6.39 |        6.30 |        0.09 |
| 78 |           159.3 |          157.5 |            1.8 |        64.60 |       63.86 |        0.74 |
| 79 |           162.7 |          158.9 |            3.8 |        65.94 |       64.41 |        1.53 |

### Component results

|                                      |   E_F in MW |   E_P in MW |   E_D in MW |   ε in % |   y_Dk in % |   y*_Dk in % |
|:-------------------------------------|------------:|------------:|------------:|---------:|------------:|-------------:|
| Superheater                          |        6.05 |        5.53 |        0.52 |     91.4 |         1.1 |          3.4 |
| Cycle closer power cycle             |         nan |         nan |         nan |      nan |         nan |          nan |
| HP turbine 1                         |        8.57 |        7.47 |        1.10 |     87.2 |         2.3 |          7.1 |
| Splitter 1                           |         nan |         nan |         nan |      nan |         nan |          nan |
| HP turbine 2                         |        3.90 |        3.40 |        0.50 |     87.2 |         1.0 |          3.2 |
| Splitter 2                           |         nan |         nan |         nan |      nan |         nan |          nan |
| Reheater                             |        8.11 |        6.88 |        1.23 |     84.9 |         2.6 |          8.0 |
| LP turbine 1                         |        6.36 |        5.68 |        0.69 |     89.2 |         1.4 |          4.5 |
| Splitter 3                           |         nan |         nan |         nan |      nan |         nan |          nan |
| LP turbine 2                         |        7.16 |        6.54 |        0.62 |     91.3 |         1.3 |          4.0 |
| Splitter 4                           |         nan |         nan |         nan |      nan |         nan |          nan |
| LP turbine 3                         |        5.39 |        4.95 |        0.44 |     91.9 |         0.9 |          2.8 |
| Splitter 5                           |         nan |         nan |         nan |      nan |         nan |          nan |
| LP turbine 4                         |        5.03 |        4.36 |        0.67 |     86.7 |         1.4 |          4.4 |
| Splitter 6                           |         nan |         nan |         nan |      nan |         nan |          nan |
| LP turbine 5                         |        4.57 |        2.91 |        1.66 |     63.7 |         3.5 |         10.8 |
| Merge 1                              |        0.00 |        0.00 |        0.00 |      0.0 |         0.0 |          0.0 |
| Condenser                            |        3.07 |        1.56 |        1.51 |     50.9 |         3.2 |          9.8 |
| Condenser pump                       |        0.07 |        0.05 |        0.02 |     68.0 |         0.0 |          0.1 |
| Low pressure preheater 3             |        1.04 |        0.88 |        0.16 |     84.5 |         0.3 |          1.1 |
| Feedwater tank                       |        2.01 |        1.75 |        0.26 |     87.0 |         0.5 |          1.7 |
| Feedwater pump                       |        0.76 |        0.58 |        0.18 |     75.9 |         0.4 |          1.2 |
| High pressure preheater 2            |        2.22 |        2.08 |        0.14 |     93.5 |         0.3 |          0.9 |
| Economizer                           |        7.52 |        6.99 |        0.52 |     93.0 |         1.1 |          3.4 |
| Drum                                 |       74.03 |       74.03 |        0.00 |    100.0 |         0.0 |          0.0 |
| Evaporator                           |       26.55 |       25.08 |        1.47 |     94.5 |         3.1 |          9.6 |
| Valve 1                              |        0.00 |         nan |        0.00 |      nan |         0.0 |          0.0 |
| Merge 2                              |       -0.00 |        0.00 |       -0.00 |     -0.0 |        -0.0 |         -0.0 |
| High pressure preheater 1            |        1.80 |        1.65 |        0.15 |     91.6 |         0.3 |          1.0 |
| Valve 2                              |        0.01 |         nan |        0.01 |      nan |         0.0 |          0.0 |
| Valve 3                              |        0.00 |         nan |        0.00 |      nan |         0.0 |          0.0 |
| Merge 3                              |        0.36 |        0.36 |       -0.00 |    100.0 |        -0.0 |         -0.0 |
| Low pressure preheater 2             |        0.71 |        0.55 |        0.16 |     77.9 |         0.3 |          1.0 |
| Valve 4                              |        0.00 |         nan |        0.00 |      nan |         0.0 |          0.0 |
| Merge 4                              |       -0.00 |        0.00 |       -0.00 |     -0.0 |        -0.0 |         -0.0 |
| Low pressure preheater 1             |        0.33 |        0.22 |        0.11 |     66.3 |         0.2 |          0.7 |
| Valve 5                              |        0.00 |         nan |        0.00 |      nan |         0.0 |          0.0 |
| Cycle closer cw                      |         nan |         nan |         nan |      nan |         nan |          nan |
| Cooling tower                        |        2.07 |        0.49 |        1.58 |     23.6 |         3.3 |         10.3 |
| Cooling water pump                   |        0.06 |        0.04 |        0.02 |     67.0 |         0.0 |          0.1 |
| Ambient air source                   |       -0.00 |         nan |         nan |      nan |         nan |          nan |
| Cooling tower fan                    |        0.87 |        0.49 |        0.37 |     57.0 |         0.8 |          2.4 |
| Ambient air sink                     |         nan |        0.49 |         nan |      nan |         nan |          nan |
| Parabolic trough                     |       47.63 |       46.95 |        0.68 |     98.6 |         1.4 |          4.4 |
| Cycle closer pt                      |         nan |         nan |         nan |      nan |         nan |          nan |
| Splitter 7                           |         nan |         nan |         nan |      nan |         nan |          nan |
| Merge 5                              |        1.98 |        1.90 |        0.08 |     95.9 |         0.2 |          0.5 |
| HTF pump                             |        1.79 |        1.34 |        0.45 |     75.1 |         0.9 |          2.9 |
| Low pressure preheater 1 subcooling  |        0.03 |        0.02 |        0.02 |     54.0 |         0.0 |          0.1 |
| Low pressure preheater 2 subcooling  |        0.06 |        0.04 |        0.02 |     69.4 |         0.0 |          0.1 |
| Low pressure preheater 3 subcooling  |        0.05 |        0.04 |        0.01 |     80.1 |         0.0 |          0.1 |
| High pressure preheater 1 subcooling |        0.23 |        0.21 |        0.02 |     91.9 |         0.0 |          0.1 |
| High pressure preheater 2 subcooling |        0.15 |        0.14 |        0.01 |     93.1 |         0.0 |          0.1 |

### Network results

|   E_F in MW |   E_P in MW |   E_D in MW |   E_L in MW |   ε in % |
|------------:|------------:|------------:|------------:|---------:|
|       47.63 |       31.77 |       15.37 |        0.49 |     66.7 |

## Citation

The state of this repository is archived via zenodo. If you are using
the TESPy model within your own research, you can refer to this model
via the zenodo doi: [10.5281/zenodo.4726800][].

## MIT License

MIT License

Copyright (c) 2022 Francesco Witte, Julius Meier, Ilja Tuschy,
Mathias Hofmann

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

  [TESPy]: https://github.com/oemof/tespy
  [online documentation]: https://tespy.readthedocs.io/
  [pdf model report]: SEGS_model_report.pdf
  [10.5281/zenodo.4726800]: https://zenodo.org/record/4726800
",3,3,2,0,solar-energy,"[exergy, solar-energy, thermodynamics]",00000
858,MatahariTerbit,TerbitlahTerang,TerbitlahTerang,https://github.com/TerbitlahTerang/MatahariTerbit,https://api.github.com/repos/TerbitlahTerang/MatahariTerbit,A tool for estimating a cost effective rooftop solar system in Indonesia 🇮🇩,"# Matahari Terbit ![image](src/assets/icons/logo-sunrise.svg)

Easily calculate how many solar panels you should buy for the best ROI. If you live in Indonesia 🇮🇩.

 * 🌎 [Web](https://matahariterbit.web.app/)
 * 🍏 [iOS](https://apps.apple.com/id/app/solar-calculator-indonesia/id1618024702)
 * 🤖 [Android](https://play.google.com/store/apps/details?id=com.sjappelodorus.MatahariTerbit)

On grid solar power can be very profitable in Indonesia. However, it is not so easy to calculate how many solar panels you should buy. This depends on three factors: 
1. how much sunshine there is at your home
2. how high your monthly electricity bill is
3. the power of your electricity connection

Based on these factors, this application calculates how many panels you should install. It will also estimate the return on investment, using up to date PLN tariffs.


## Plans

### Irradiance
 - [X] Current location selection
 - [X] Determine yearly irradiance for a coordinate

### Calculations
 - [X] Subtract minimum costs from number of panels
 - [x] Cap production based on connection size
 - [x] Include taxes
 - [x] Enhanced vs simple mode

### Explanation
 - [x] Show ROI graph
 - [x] Display costs breakdown
 - [ ] Add examples with embedding instructions

## Dependencies & Libraries
- Snowpack
- React
- Ant Design
- TypeScript
- Chart.JS

## Getting Started

```bash
npm run serve
# or
yarn serve
```
",3,3,3,8,solar-energy,"[indonesia, react, renewable-energy, solar-energy]",00000
859,Zero-Surplus-Dimmer,frtz13,N/A,https://github.com/frtz13/Zero-Surplus-Dimmer,https://api.github.com/repos/frtz13/Zero-Surplus-Dimmer,"The microcontroller regularly requests the energy flow from the energy meter. When surplus energy is available, it commands the Robotdyn dimmer to deliver more energy to a water heater.","# Zero-Surplus-Dimmer

## When is this project useful?

- You have some energy production (typically solar panels).
- You want to self-consume as much as possible of this energy.
- You have a device (typically a water heater) which could consume the part of the energy, which would otherwise be injected into the public electricity grid.
- You have an energy meter which measures the power consumed by your household (a Shelly EM). The power can be either positive (power is consumed) or negative (power is injected into the public electricity grid).

Please note if you want to integrate such a system in some home automation project, it may be useful to have a look at another project: the [Energy Router](https://github.com/frtz13/EnergyRouter/).

## What do you need?

- A **Shelly EM** energy meter
- The **dimmer**. You will need some basic electronic skills to assemble it yourself. You will also need to uplaod the binary to the micro controller.

![](./img/overview_zsd.png)

## How does it work ?

The Dimmer is composed of a ESP8266 microcontroller, connected to a Robotdyn dimmer.

The microcontroller regularly requests the energy flow from the energy meter. When the energy flow is negative, i.e. we have surplus energy available, it commands the Robotdyn dimmer to deliver more energy to the Water heater.

The microcontroller implements a regulation loop to send as much energy as possible to the water heater, thus keeping the energy flow close to zero whenever possible.

When the energy flow is positive, meaning the household consumes energy, the Robotdyn dimmer is shut down.

## How to put this together?

#### The Shelly EM energy meter

- Install the Shelly EM as required in the fuse box of the household.

- Connect it to your wireless network.

- Once connected to your wireless network, find out its IP address. How? You may have a look in the configuration pages of your wireless router (DHCP leases page), or use a tool like the [advanced IP scanner]([Advanced IP Scanner - Download Free Network Scanner.](https://www.advanced-ip-scanner.com/download/)).

- Once you know it IP address, you can use your favourite browser to connect to the Shelly EM web interface.

#### The Dimmer

- Make a choice for the micro-controller, either a ESP32-C3 or a ESP8266. Both should work, but if you have to order one anyway, I'd recommend the ESP32-C3. For the ESP32-C3, an ESP32-C3-Mini development board works fine. For the ESP8266, a D1-Mini board works fine.

- Assemble the dimmer, according to the schematics in this repository. A 35x35x10mm 5V fan should fit between the radiator and the screw terminals of the dimmer board.
  
  ![Dimmer assembly](./img/Dimmer-ESP32C3.jpg)
  
  ![Dimmer detail: bimetal switch, thermal fuse](./img/Dimmer-bimetal.jpg)

- Download the binary, or compile it yourself with ESPHome.

- Flash the ESPHome binary to the ESP32-C3 or ESP8266. Either use the ESPHome tools, or the  [NodeMCU-PyFlasher]([Releases · marcelstoer/nodemcu-pyflasher · GitHub](https://github.com/marcelstoer/nodemcu-pyflasher/releases)). In this procedure, you should completely erase the ESP flash memory.

- Power on the dimmer. Connect your smartphone to the WiFi hotspot of the dimmer, then navigate to the IP address 192.168.4.1. Select your wireless network and enter its password.

- When the dimmer reboots, it should connect to your wireless network. Now you will need to find out the IP Address it has been assigned in your wireless network (using the same procedure as above, with the Shelly EM.

- Once you found the IP address of the dimmer, use a browser to connect to its web interface.

## Parameters

![](./img/zsd-config.jpg)

First of all, you should enter the IP address of the Shelly EM. Once this is done correctly, you should get grid power readings (line 21). Note that the Automatic mode switch should be in the ""On"" position. Grid power readings should be positive for power consumption, negative for power injection into the public power grid.

Please configure the value of the Connected Load (electric power of the water heater).

You can leave the Regul... parameters at the default values.

#### Operation

**Automatic mode** means: the Dimmer will try to send the surplus power to the water heater. The Dimmer power (line 22) gives you an estimate how much power is sent to the water heater. In automatic mode, with sufficient solar power, the grid power readings should be small (less than +-20W), unless we have rapid changes of power production or power consumption inside the house.

The Power limit in auto. mode (line 11) lets you set the maximum power to send to the water heater in automatic mode. Sometimes, water heaters have a security feature imprlemented by a bi-metal switch, which interrupts the current flow when the heating elements get too hot. If you do not want to use this feature, just set the limit to the highest possible value.

**Manual mode** (Automatic mode: off) means that the dimmer sends power to the water heater, regardless if surplus power is available, or not. The Power in manual mode (line 12) decides how much power is sent to the water heater. Thus you can get hot water even in bad weather.

#### The ESPHome code

For simplicity, all security features have been removed in the ESPHome code. You may want to recompile the binary, after enabling passwords for access to the web interface and Over-the-air updates, or hard coding the credentials of your WiFi network.
",3,3,3,0,solar-energy,"[energy, esphome-devices, self-consumption, solar-energy]",00000
860,meteo-station-code,alicjamusial,N/A,https://github.com/alicjamusial/meteo-station-code,https://api.github.com/repos/alicjamusial/meteo-station-code,Meteo station project - code for ESP32.,"# METEO STATION – ESP32 code
[![](https://img.shields.io/badge/-METEO%20STATION%20PROJECT%20-f17892)](https://alicja.space)


![image](img/grafana.png)

### ◾ About the project

**Meteo station** is my small after-hours project that contains of **three** repositories:
- Meteo station code (this repo)
- [Meteo station PCB based on ESP32 ](https://github.com/alicjamusial/meteo-station-pcb)
- [Meteo station 3D prints](https://github.com/alicjamusial/meteo-station-3d-print)

As the name suggest, is a DIY self-sufficient weather measuring device. I decided to design it as a PCB board with goldpins to stick-in or stick-out individual components and sensors (ESP32, BME280 etc.) to make it more reusable. It could have - of course - been integrated on board, but it would be more expensive and time-consuming to create.

The code was written using **Arduino IDE**. It was meant to be quick and clear, not the best.

> **Warning** <br>
> This is a hobbyist project, so I take no responsibility for any possible issues you may encounter :)


I was inspired by solution created by [this guy on Instructables](https://www.instructables.com/Solar-Powered-WiFi-Weather-Station-V30/). He did a good job, so I strongly recommand exploring his meteo projects!

### ◾ How to run this code?
1. Install Arduino IDE.
2. Add ESP32 board to Arduino IDE [as it is described e.g. here](https://randomnerdtutorials.com/installing-the-esp32-board-in-arduino-ide-windows-instructions/).
3. Install needed libraries - `OneWire`, `BH1750`, `Adafruit_BME280`, `DallasTemperature` etc.
4. Copy `data-example.h` and rename it to `data.h`. Uncomment all lines and fill it with your values:
   - SSID - your WiFi name,
   - Password = your WiFi password,
   - Influx =  fill `[IP_ADDRESS]` and `[DB-NAME]` fields with your Influx instance data (see next paragraph ""Server setup"").
5. Check if your ESP32 connects to WiFi and sends data to Influx properly. If you set `IsDebug` to `True` you will see additional debugging logs via UART.


### ◾ Server setup

1. Install Influx on the Raspberry Pi or other computer that you use as a local server. This code works with Influx v. 1.8.
2. Set up Influx to be always running on port 8086 (or change the port in the `data.h`').
3. Create a database for the data.
4. That's all 😊 The ESP32 should connect to it (after filling up `data.h`) and send all the information to the created database. I recommend Grafana to preview all charts real-time.


### ◾ Adjust it to your needs!
This is an absolutely hobbyst project :) You can use it as a reference to create something a lot better.


### ◾ License
Meteo Station project is available on Creative Commons Attribution Share Alike 4.0 International license (more in [license file](LICENSE.txt)). You are free to use it, modify it and produce as many of your own boards as you need.

### ◾ Final result

Cable tie and tape for the win ;)

<p align=""center"">
  <img alt=""Meteo station"" src=""img/meteo-station.jpg"" width=""65%"">
</p>
",3,3,1,0,solar-energy,"[diy-electronics, esp32, esp32-wroom, meteo-station, solar-energy, weather, weather-station]",00000
861,SolarLogAPI,cmkohnen,N/A,https://github.com/cmkohnen/SolarLogAPI,https://api.github.com/repos/cmkohnen/SolarLogAPI,"An API to interact with Data from your SolarLog (weekly backup mails, FTP backups and the JSON Interface)","# SolarLogAPI
![Maven](https://github.com/ChaosMelone9/SolarLogAPI/workflows/Java%20CI%20with%20Maven/badge.svg)
![CodeQL](https://github.com/ChaosMelone9/SolarLogAPI/workflows/CodeQL/badge.svg)
[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/ChaosMelone9/SolarLogAPI/blob/main/LICENSE)

Hello everyone and thank you for checking out this little project. This API is for reading data and converting it from the weekly backup files sent by your Solarlog.

The goal is to keep a modular way to easily read and manipulate the data to be able to work with it in other projects. I am also working on a UI for visualizing it directly, you might want to check this out [here](https://github.com/ChaosMelone9/SolarLogVisualizer).

If you want to improve some functions or contribute feel free to do so, also feel free to use this project in any way that could help you personally.

Greetings, ChaosMelone9
(Sorry for the lack of english skills :P )

## Features

- Read from .dat-files
- Read from .js-files
- Direct .tar.gz support
- FTP support
- InfluxDB support
- MySQL support
- EML file support
- Persistent storage support
- SolarLog JSON Interface support
- Very Basic UI elements

## How to use

This will guide you through a very basic process of being able to use data for your own.

### Importing 

Sadly this project is not hosted anywhere (yet), so you have to import it on your own. I'll assume you use Maven for this case, steps for other platforms or IDEs are well documented in the internet. To import type the following:

```
export version=4.0.6
#If you haven't downloaded the binary run the following:
wget ""https://github.com/ChaosMelone9/SolarLogAPI/releases/download/$version/SolarLogAPI-$version.jar""

#Run this to install into your local repository
mvn install:install-file -Dfile=SolarLogAPI-$version.jar -DgroupId=me.meloni -DartifactId=SolarLogAPI -Dversion=$version -Dpackaging=jar
```

Now it is installed in your local repository, and you are free to add it as a dependency for your project.
Simply drop this in your pom.xml:

```xml
<dependency>
    <groupId>me.meloni</groupId>
    <artifactId>SolarLogAPI</artifactId>
    <version>4.0.6</version>
</dependency>
```

### Usage

This project is structured around the SolarMap object. You can easily add data to it and retrieve from it.

Here's an example:

```java
import me.meloni.SolarLogAPI.BasicGUI.GetChosenFile;
import me.meloni.SolarLogAPI.SolarMap;

import java.io.File;
import java.util.Date;
import java.util.List;
import java.util.Map;


public class Class {
    public static Map<Date, List<Integer>> getSolarData() {
        SolarMap solarMap = new SolarMap();

        File dataFile = GetChosenFile.chosenSolarLogFile();

        solarMap.addFromDataFile(dataFile);

        return solarMap.getAsMap();
    }
}
```

Now you can work with the map further on.

If you even want a basic Graph for display usages simply run the following:

```
JPanel graph = new DayView(solarMap, {YOURDATE});
```

There is also implementation of some UI Interfaces:
```
SolarMap solarMap = BasicSolarMapCustomizer.solarMap();
```
or 
```
GraphCustomizer.visualize(BasicSolarMapCustomizer.solarMap());
```
",3,3,1,5,solar-energy,"[api, energy, java, java-8, photovoltaic, solar, solar-energy, solarlog, solarlogger]",00000
862,electricity-stats,alpozcan,N/A,https://github.com/alpozcan/electricity-stats,https://api.github.com/repos/alpozcan/electricity-stats,A simple and lightweight daemon that fetches electricity production and consumption values from a Fronius inverter's JSON API and writes into a PostgreSQL/TimescaleDB database.,"# Contents

```
├── collector.py : The main script that fetches data and inserts into a database
├── db : Contains 
│   ├── electricity.sql : PostgeSQL/TimescaleDB schema for the database table
│   └── home.sql : PostgeSQL/TimescaleDB schema for the database
├── grafana
│   ├── electricity-prod-load-graph-grafana.json: A simple grafana dashboard with production and load metrics
└── electricity-stats-collector.service : systemd unit file for running as a service
```

A simple [Grafana dashboard](grafana/electricity-stats.json) is also included.
![Grafana dashboard](grafana/electricity-stats.png)
",3,3,1,0,solar-energy,"[daemon, dashboard, database, grafana, metrics, monitoring, postgresql, python, solar-energy, sql, systemd-unit, timescaledb]",00000
863,pipowermeter,romaindudek,N/A,https://github.com/romaindudek/pipowermeter,https://api.github.com/repos/romaindudek/pipowermeter,Measure and monitor DC power out (of a solar panel or a wind turbinefor example) using a raspberry pi.,"![Logo](https://raw.githubusercontent.com/romaindudek/pipowermeter/main/assets/pipowermeter.png)

Measure DC power out of a solar panel or a wind turbine with any model of raspberry pi using a DFrobot SEN0291 I2C wattmeter module to evaluate power efficiency.
Produces CSV files to be able to make statistics over a long period of time.

## Features

- Continuously measure power
- Set the periodicity of the measurement (in seconds)
- Generate .csv files
    - Append one line for every measure
    - date/time (yyyymmddhhmmss) | Device name | Device location | date/time (Human readable) | value (w) | consommation (since last measure, Wh) [ optional weather infos via openweathermap ]
- OpenWeathermap infos (you need an internet connection and an openweathermap api key)
    - Temperature (°C) | Wind speed (Km/h) | Cloudiness (%)

### Don't forget to use a resistor to dissipate the power !

## Usage


```bash
git clone https://github.com/romaindudek/pipowermeter.git
```

The installer is setting up a service that will continuously take the measure. If for any reason the pi is shut down or the service is stopped, this service will automatically restart, preventing the measurement to stop.

The csv files will be stored in the data directory inside the current directory. They are named using the patern : [Project name].csv

Stopping the measure will not erase those files.

App installation and instructions via :
```bash
./setup.py
```

",3,3,2,0,solar-energy,"[csv-files, python3, raspberry-pi, solar-energy, wind-turbine]",00000
864,CLP-Macbook-A1286-Mods,lancewalk87,N/A,https://github.com/lancewalk87/CLP-Macbook-A1286-Mods,https://api.github.com/repos/lancewalk87/CLP-Macbook-A1286-Mods,"Hardware/Software | Macbook Pro A1286 17"" Modifications, Battery Expansion 2x, M.2 Array 2x (1TB), MCU/TTL SPI","# CLP-Macbook-A1286-Mods
",3,3,2,0,solar-energy,"[avr, bios-extension, c, c-plus-plus, debugging-tool, developer-tools, hardware, io-expanders, iscp, macbook-configuration, macbook-keyboard, macbook-pro, modifications, solar-energy, ws2812b]",00000
865,EnergyRouter,frtz13,N/A,https://github.com/frtz13/EnergyRouter,https://api.github.com/repos/frtz13/EnergyRouter,,"# Energy Router

## When is this project useful?

- You have some energy production (typically solar panels).

- You want to self-consume as much as possible of this energy.

- You have a device (typically a water heater) which could consume the part of the energy, which would otherwise be injected into the public electricity grid.

- You have an energy meter which measures the power consumed by your household (typically a Shelly EM). The power can be either positive (power is consumed) or negative (power is injected into the public electricity grid).

## What do you need?

An **MQTT broker** (available as an add-on for Home Assistant, and maybe
for other home automation systems).

An **energy meter** providing measurements via the MQTT broker, or which is accessible as a Sensor in Home Assistant.

Some **""always-on"" computer** for running the Energy Router
script. You will need one to run the MQTT broker, anyway.

A **home automation system** interacting with the MQTT
broker will be very helpful. This lets you control the operation of the whole thing. You will find some hints on how to do it with Home Asssistant in the [Wiki](https://github.com/frtz13/EnergyRouter/wiki).

The **dimmer**. You will need some basic electronic skills to assemble
it yourself. You will also need to program its ESP8266 micro controller with ESPHome, which is also available as an add-on for Home Assistant.

![](./img/overview.png)

Note (*): The preferred way for the energy meter communication is shown in the diagram. With Home Assistant, the Energy Router can also get energy meter readings from a Sensor state.

If you do not use a home automation system, and do not already have an MQTT broker running, you may want to have a look at another project, using less prerequisites: the [Zero-Surplus-Dimmer](https://github.com/frtz13/zero-surplus-dimmer/).

## The Energy Router at work

The orange line corresponds to the grid power readings of the energy meter, the central horizontal line being zero.

The blue line corresponds to the power sent to the water heater (multiplied by -1). We see the regulation at work, as soon as the orange line reaches negative values.

![](./img/regulation.png)

## How to assemble...

For more information how to put this together, please see the [Wiki](https://github.com/frtz13/EnergyRouter/wiki).
",3,3,1,0,solar-energy,"[appdaemon, appdaemon-apps, energy, esphome-devices, home-assistant, homeassistant, mqtt, self-consumption, solar-energy]",00000
866,Solar-Power-Datasets-and-Resources,Charlie5DH,N/A,https://github.com/Charlie5DH/Solar-Power-Datasets-and-Resources,https://api.github.com/repos/Charlie5DH/Solar-Power-Datasets-and-Resources,Resources about solar power systems for data science,"# Solar-Power-Datasets-and-Resources

Here are some open-source datasets related to solar energy along with their links:

- National Renewable Energy Laboratory (NREL) Solar Radiation Data: This dataset includes solar radiation and related climatic data for locations in the United States and its territories. The data is collected by NREL and is available for download at https://data.nrel.gov/search-page/Solar.

- Open PV Project: This dataset provides information on the installed photovoltaic (PV) systems in the United States. It includes data on the size, location, and cost of the installations, as well as information on the type of PV technology used. The data can be downloaded from https://openpv.nrel.gov/.

- Global Solar Atlas: This dataset provides information on solar resource potential globally. It includes maps of solar radiation, temperature, and other relevant parameters for every location on earth. The data is available for download at https://globalsolaratlas.info/.

- Photovoltaic Geographical Information System (PVGIS): This dataset provides estimates of the solar energy potential for locations in the European Union and other countries. It includes data on solar radiation, temperature, and other relevant parameters. The data can be downloaded from https://ec.europa.eu/jrc/en/pvgis.

- National Solar Radiation Database (NSRDB): This dataset provides hourly solar radiation and meteorological data for locations in the United States and its territories. The data is collected by NREL and is available for download at https://nsrdb.nrel.gov/.

- Solar Energy Industries Association (SEIA) Solar Market Insight: This dataset provides information on the solar market in the United States, including data on installation trends, market share, and pricing. The data can be downloaded from https://www.seia.org/research-resources/solar-market-insight.

- National Renewable Energy Laboratory (NREL): Institue provides tools and datasets for irridation monitoring, solar and wind integration in real-time or historical data. The site can be found at [https://www.nrel.gov/grid/solar-resource/sun-position.html](https://www.nrel.gov/grid/all-data-tools.html).

- PV-Live: This dataset provides real-time data on solar energy generation in the United Kingdom. It includes data on the total amount of solar energy generated, as well as data on individual solar installations. The data can be downloaded from https://www.solar.sheffield.ac.uk/pvlive/.

- Solar Energy Forecasting System (SEFS): This dataset provides short-term forecasts of solar energy generation for locations in the United States. The data is collected by NREL and is available for download at https://www.nrel.gov/grid/solar-resource/sefs.html.

- PV Performance Modeling Collaborative (PVPMC): This dataset provides a set of tools and models for predicting the performance of photovoltaic (PV) systems. The data can be downloaded from https://pvpmc.sandia.gov/.


## Datasets:
- [Kaggle Solar Power Generation Data](https://www.kaggle.com/datasets/anikannal/solar-power-generation-data?resource=download&select=Plant_1_Generation_Data.csv)
- [Kaggle Solar Power Plant EDA and Output Prediction](https://www.kaggle.com/code/shumaylasmawi/solar-power-plant-eda-and-output-prediction)
- [Photovoltaic system thermography](https://www.kaggle.com/datasets/marcosgabriel/photovoltaic-system-thermography)
- [Photovoltaic system thermal inspection](https://www.kaggle.com/datasets/marcosgabriel/photovoltaic-system-thermal-inspection)
- [NIST Campus Photovoltaic (PV) Arrays and Weather Station Data Sets](https://catalog.data.gov/dataset/nist-campus-photovoltaic-pv-arrays-and-weather-station-data-sets-05b4d)
- [Photovoltaic (PV) Solar Panel Energy Generation data](https://data.london.gov.uk/dataset/photovoltaic--pv--solar-panel-energy-generation-data)

## Resources

- [Key Performance Indicators for Solar PV Plants.](https://trackso.in/knowledge-base/key-performance-indicators-for-solar-pv-plants/)
- [Exploratory Data Analysis - Solar Power Generation](https://www.youtube.com/watch?v=thYLG4JmaFI)
- [How to Calculate Solar Insolation (kWh/m2) for a Solar Power Plant using Solar Radiation (W/m2)](https://trackso.in/knowledge-base/how-to-calculate-solar-insolation-for-a-solar-power-plant-using-solar-radiation/)
- [Solar panel power generation analysis](https://towardsdatascience.com/solar-panel-power-generation-analysis-7011cc078900)
- [Data and Tools to Model Pv Systems | PyData Global 2021](https://www.youtube.com/watch?v=sweUakFg3I8)
- [pvlib python 03: ModelChain and PVSystem](https://www.youtube.com/watch?v=gNgKSduzDLY)
- [pvlib python](https://pvlib-python.readthedocs.io/en/stable/)
- [Example of PV Modules String Outage Anomaly - Infrared Camera](https://www.youtube.com/watch?v=oIVdclhyFNU)
",3,3,1,0,solar-energy,"[data-science, datasets, documentation, solar, solar-energy, solar-system]",00000
867,EnvoyCharts,cloudkucooland,N/A,https://github.com/cloudkucooland/EnvoyCharts,https://api.github.com/repos/cloudkucooland/EnvoyCharts,Small data tracking/charting tool for envoy IQ solar systems,"# EnvoyCharts
A small data tracking/charting tool for envoy IQ solar systems

envoy-chart does two things
* runs in the background and polls the envoy every 10 minutes, putting that data into a database
* acts as a web server which displays the charts

# Still a work-in-progress
I'm just getting started.

Right now it supports a single graph (past 24-hours). I will work on adding 7-day and monthly graphs as well, after I collect enough data from my own system.

# Design decisions (or indecisions)
* 10 minute sampling frequency seems good enough. During initial testing I did every minute, but the graph isn't any more informative at this higher frequency, so I'll stick with 10 minutes for now. Eventually it will be configurable.
* go-echarts spits out Javascript Apache echarts (an older version at that). It seems nice enough for our purposes and is very simple to work with.
* sqlite because it works ; early experiments with objectbox were fun, but it was too fiddly for me
* go, because I like go

# To Do
* not have all the parameters hard coded, especially the hostname/ip address
* implement dns-sd in the go-envoy package so you don't have to set a hostname/ip at all
* more charts
",3,3,1,0,solar-energy,"[envoy, envoy-iq, golang-application, solar-energy]",00000
868,pv-balkonkraftwerk,hegessne,N/A,https://github.com/hegessne/pv-balkonkraftwerk,https://api.github.com/repos/hegessne/pv-balkonkraftwerk,Dokumentation PV Balkonkraftwerk,"# Git Repo meines PV Balkonkraftwerks

Gibhub Pages in `/docs`
",3,3,2,1,solar-energy,"[balkonkraftwerk, balkonpv, energy, gitlab-pages, green-energy, jekyll, kramdown, markdown, photovoltaic, pv, solar, solar-energy, stecker-solar, stecker-solaranlage]",00000
869,Restep,restep-eco,N/A,https://github.com/restep-eco/Restep,https://api.github.com/repos/restep-eco/Restep,Repository for all Restep Power System source files and documentation,"# Restep
The Restep Power System is currently composed of four Modules:

The Mother Module: the foundation of the power system, much like a Motherboard in a computer

The Battery Charger Module: provides battery charge control, MPPT, and system voltage control

The Off-Line Module: provides power input from a wall outlet

The PV Module: provides power input from a photovoltaic panel
  
All four Modules are at an initial release phase (Rev.X1) 7/14/21. This revision is a prototype release. No Modules are fully tested or qualified.

All Modules are licensed under CERNOHL-S v2:
This source describes Open Hardware and is licensed under the CERNOHL-S v2. You may redistribute and modify this
source and make products using it under the terms of the CERN-OHL-S v2 (https://ohwr.org/cern ohl s v2.txt ).
This source is distributed WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING OF MERCHANTABILITY,
SATISFACTORY QUALITY AND FITNESS FOR A PARTICULAR PURPOSE. Please see the CERN-OHL-S v2 for applicable conditions.

Source files developed in KiCad 4.0.7 (https://www.kicad.org/). Custom libraries and footprints are provided in the source files .zip.

The Restep-X1 Arduino firmware for the Mother Module is licensed under GPL v3.0 (https://www.gnu.org/licenses/gpl-3.0.en.html).
Use the Caterina-Genuino-Micro.hex bootloader, set fuse bits: EXT: CB  HI: D8  LO:  FF
(https://www.arduino.cc/) 

All documentation is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License (https://creativecommons.org/licenses/by-sa/4.0/).

LTSpice circuit models (.asc), Mathcad (.mcdx), and Excel (.xlsx/.xlsm) design files are licensed under the MIT license.
(https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html)
(https://www.mathcad.com/en)

Visit www.restep.eco for more information.
",2,2,1,0,solar-energy,"[arduino, battery, battery-monitor, dc-dc-converter, farmbot, iot, kicad, microcontroller, mppt-charger, plx-daq, pmbus, power, power-supply, power-system, renewable-energy, solar-energy]",00000
870,PocketSolar,BrokenSource,BrokenSource,https://github.com/BrokenSource/PocketSolar,https://api.github.com/repos/BrokenSource/PocketSolar,☀️ Solar Panel IV curve tracker using Arduino and a front end GUI in Rust. WIP,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",2,2,1,0,solar-energy,"[arduino, arduino-uno, diy-electronics, iv-curve, solar-energy, solar-panel]",00000
871,DeepSolar_adoption_Virginia,bessammehenni,N/A,https://github.com/bessammehenni/DeepSolar_adoption_Virginia,https://api.github.com/repos/bessammehenni/DeepSolar_adoption_Virginia,Visualizations and in-depth analysis thanks to machine learning of the factors that can explain the adoption of solar energy in residential in Virginia state USA.,"#### **Date: 27th January 2021**
#### **Author : Bessam Mehenni**

### Adoption of solar energy in residential in Virginia state

Report is available and can be downloaded (“Report_solar_adopt_EN”)<br/><br/>

##  **1.	References**

[1] Data source: Stanford’s Deepsolar dataset, dec.2018
http://web.stanford.edu/group/deepsolar/home

[2] Python notebook / data analysis: 
https://www.kaggle.com/andromedasagan/implementation-of-solar-energy-in-the-us<br/><br/>

##  **2.	Context**

The source of data is Stanford University’s DeepSolar project, a deep learning framework that analyzed satellite images to detect solar panels throughout the country. The data collected are the size, type (residential/non-residential) of the power systems distributed in the 48 states in the U.S. The associated socioeconomic data for these locations were recorded over several years.

My ambition in this work is to build a socio-economic analysis of the last mile to understand what are the profiles within a homogeneous group of households that is adopting solar energy. It focuses on the state of Virginia.

This work is based on a first chapter of data analysis [2] that highlights key trends and correlations in the deployment of solar power based on the full Deepsolar dataset.<br/><br/>

##  **3.	Goal**
-	Explore the data, handle missing values.
-	Make visualizations to identify trends. Identify the characteristics of a homogeneous group of households that makes the majority of installed systems.
-	Model by ML the adoption of solar energy by households. we take the target variable **`Solar_panel_area_per_capita`** to illustrate the adoption of solar systems. Using ML to show the factors involved in explaining the adoption.


Explanations about the way I proceed:

* Importing Deepsolar dataset restricted to Virginia state

* Creation of column 'employment_rate' and calculation of the employment rate

* Deleting 'employed' and 'unemployed' columns

![PIC1](/md_images/pic1.PNG)<br/><br/>
 
##  **4.	Data exploration**

We will measure the **adoption of solar systems** through the variable `solar_panel_area_per_capita`. We will draw up a matrix of correlations of deemed and less deemed factors over the target.
Certain factors are deemed to be decisive in the choice for households to equip with solar systems. These factors become evident when the following observations are made:
-	households are likely to equip themselves with solar equipment where the solar resource is the most abundant.
-	households that can afford it financially are more likely to invest in solar systems.
-	incentives can facilitate access to solar systems, especially for households that initially lacked the capacity to afford them.
-	feed-in tariffs for grid electricity are decisive for acquiring solar systems.

Two missing factors that will unfortunately not be studied here, as they have not been collected in the present dataset:
-	I think that data about the **intensity of incentives** would have been useful, i.e. special retail electricity tariffs (in c$/kWh) or investment incentives for the purchase of solar systems. This can make the difference and allow households to move from a situation of non-accessor to potential accessor of a solar system.
-	the **ecological awareness** is a more personal factor that is likely to be influential. Maybe it could have been read in voting intentions for example.




Explanations about the way I proceed:

* Variables are renamed : `incentive_count_residential` in `incentive_count_resid`, `incentive_residential_state_level` in `incentive_count_resid_state`



*Short description of the extracted dataset*

Dataset contains socio-economic and environmental data.
-	county - county name
-	average_household_income - average annual household income ($),ACS 2015 (5-Year Estimates)
-	daily_solar_radiation - daily solar radiation (kWh/m2/d),NASA Surface Meteorology and Solar Energy
-	incentive_count_resid - number of incentives for residential solar,www.dsireusa.org
-	avg_electricity_retail_rate - average residential retail electricity price over the past 5 years,EIA
-	incentive_count_resid_state - number of state-level incentives for residential solar,www.dsireusa.org
-	solar_panel_area_per_capita - solar panel area per capita (m2/capita),deepsolar
-	age_median - median age,ACS 2015 (5-Year Estimates)
-	number_of_years_of_education - number of years of education,ACS 2015 (5-Year Estimates)
-	employed,number of employed people,ACS 2015 (5-Year Estimates)
-	unemployed,number of unemployed people,ACS 2015 (5-Year Estimates)<br/><br/>

##  **5.	Missing values**

In the dataset, there is a problem with very large floating-point numbers for which INF values are returned. To solve the problem, the max values are filtered and then discarded.

Explanations about the way I proceed:

* Data cleaning: deletion of values Inf

* Printing a dataset describe

![PIC2](/md_images/pic2.PNG)
 
* Fill NaN with the column median value (except in`daily_solar_radiation` with the mean value)

* Delete rows without values in `Solar_panel_area_per_capita`.<br/><br/>

##  **6.	Vizualisations**

* Visualization of the different behaviors between the main factors and the target in order to identify possible outliers
![PIC3](/md_images/pic3.PNG)

* Data cleaning: We see several outliers that can be deleted after 0.125
![PIC5](/md_images/pic5.PNG)
<br/><br/>
We take the target variable **`Solar_panel_area_per_capita`** to illustrate the **adoption of solar systems**.

* To not skew the analysis by zero-values, we keep a dataset with only rows `solar_panel_area_per_capita` > 0

* At this time, we ignore variables that are identical in value within the entire population (std = 0)

* Drop_elements = [`county`,`incentive_count_resid`,`incentive_count_resid_state`,`avg_electricity_retail_rate`]

Putting the factors face to face on graphs will allow us to see how what the locality has in household profiles contributes to adoption.

![PIC6](/md_images/pic6.PNG)<br/><br/>


According to the `Solar_panel_area_per_capita` histogram, the group of vast majority of installed solar systems is located where `Solar_panel_area_per_capita` is below **0.03 m2/capita**.


![PIC7](/md_images/pic7.PNG)


Let's look at the ranges of median age, income and education level of 60% of the records of this sample, between the 20% and 80% percentiles.

We note the very meaningful characteristics of the group of households whose 
`Solar_panel_area_per_capita` is below 0.03 m2/capita for the vast majority of installed solar systems. For **60% of the records in this sample**:
-	average household income is between **56000** and **128000$**
-	median age is between **33** and **44 years old**.
-	level of education is between **13** and **16 years of education**.<br/><br/>

##  **7.	Correlational analysis**
![PIC8](/md_images/pic8.PNG)

There is a very strong correlation between `average_household_income` and `number_of_years_of_education`. We can easily explain this correlation. In general, education opens doors to higher-paying jobs.

`Age_median` is much less correlated with average_household_income.

It would have been interesting to see how these factors correlate with other factors that reflect the ""green"" mentality or the motivation to do savings.<br/><br/>

* What are the features without variance?

![PIC9](/md_images/pic9.PNG)

* We ignore variables without variance that will not bring to a modeling.

* Despite there is a strong correlation of the target with `number_of_years_of_education`, the model gives better prediction results with it, that's why we keep it. And it works better without `employment_rate`.

* retained = [`number_of_years_of_education`,`daily_solar_radiation`,`age_median`,`average_household_income`]<br/><br/>


##  **8.	Forecasting solar adoption**

######  **8.1	Preliminary modeling**

* 3D visualization between selected factors in a first view

![PIC10](/md_images/pic10.PNG)

* 3D visualization between selected factors in a second view

![PIC11](/md_images/pic11.PNG)

* Preliminary modeling using a RandomForestRegressor

![PIC12](/md_images/pic12.PNG)
 
Good fitting on the training data. The test score could be much higher.

* Feature importance: ranking of the features in the explanation of the target

![PIC13](/md_images/pic13.PNG)
 
**A limited number of descriptives variables can acceptably explain the adoption of solar energy: the predominant are the `average_household_income` of the locality, `age_median` and `number_of_years_of_education` factors.**

**The level of education (`number_of_years_of_education`) factor may be influencing the adoption because of partly an intrinsec factor which is the level of income again (`average_household_income`). We have seen that these factors are highly correlated.**

**`Age_median` has also a contribution to the adoption.**<br/><br/>
 
* We continue with the same descriptive variables for the fine-tuned model

* retained = [`average_household_income`,`age_median`,`daily_solar_radiation`,`number_of_years_of_education`]<br/><br/>



######  **8.2	Fine-tuning the parameters of the model**

* GridSearch

![PIC14](/md_images/pic14.PNG)

Correct fitting on the training data, the test score is acceptable. The model shows some signs of overfitting, i.e. weaknesses in its generalizability.

* Feature importance : ranking of the features in the explanation of the target

![PIC15](/md_images/pic15.PNG)

![PIC16](/md_images/pic16.PNG)<br/><br/>
 

######  **8.3	Conclusions**

The fine-tuned model confirms that the `average_household_income` of the locality,
`number_of_years_of_education`, `age_median` and `daily_solar_radiation` factors can acceptably explain the adoption of solar energy in Virginia state.

The `average_household_income` factor has the most important contribution.

The level of education (`number_of_years_of_education`) is also an important factor in which we can find intrinsically the level of income (`average_household_income`), as seen before in the correlation matrix.

Concerning the contribution of `age_median`, to explain this we should rather look at what advancement in age and career brings: perhaps the rationality of the choices of household members, the stability of its income and the ability to make investments in order to project savings in the upcoming years.

This ranking could be made more realistic by taking into account adoption factors here absent from the analysis such as the **ecological motivation of households** or the **intensity of financial incentives** provided for the purchase of a solar system. Unfortunately, we did not find data illustrating these considerations in the DeepSolar dataset. This would need to be improved.
",2,2,1,0,solar-energy,"[adoption-of-solar, deepsolar, machine-learning, python, satellite, solar-energy, usa]",00000
872,PaHoy,DM6JM,N/A,https://github.com/DM6JM/PaHoy,https://api.github.com/repos/DM6JM/PaHoy,nRF24L01+ PCB for Raspberry Pi to use with aHoy,"# PaHoy

This project aims to have a neat integration of a nRF24L01+ into a Raspberry Pi 4B based system.
Background of the project is the use of [aHoy](https://github.com/lumapu/ahoy) with a RasPi to monitor Hoymiles Solar-Inverters. Most solutions are rather fiddly with open wiring and no fitting case.
To overcome these issues, I (DM6JM) created the **PaHoy**: 
+ A small PCB containing everything to smoothly connect the nRF24L01+ to the PI using its 40pin Dev-Block
+ Using standard pinning, so most code doesn't need any adjustment
+ Comes with an u-FL connector, so you may connect any 50-Ohm 2.4GHz antenna you want.
+ And, biggest plus, to fit into the [CoolerMaster Pi Case 40 V2](https://www.coolermaster.com/de/de-de/catalog/gehause/raspberry-pi/pi-case-40-v2/)

## How is this done? 
The [CoolerMaster Pi Case 40 V2](https://www.coolermaster.com/de/de-de/catalog/gehause/raspberry-pi/pi-case-40-v2/) has a small internal PCB, the sits on the 40-pin Dev-Block of the Pi and routes these pins in an 90degree angle to the outside of the case. I just took the dimensions of this PCB and replaced it by the **PaHoy** PCB. 

## Assembly
Before starting assembly: Make sure you are properly grounded in some way! ESD will kill the PCB and maybe the Pi as well, so pay attention. Use a wrist-wrap or other means of discharging yourself properly!
+ Before turing it on for the first time, double check that all parts are soldered correctly. A flipped IC might short your IOs of the Pi and cause damage!
+ Remove the original PCB out of the case by releasing the screw and the two distance bolts.
+ If you want to use an antenna built directly into the case, I recommend [this antenna by Linx](https://www.digikey.de/de/products/detail/linx-technologies-inc/ANT-2-4-PW-QW-UFL/4747969). It can be ordered together with the special low height 40pin connector at Digikey or Mouser (see Ordering). If applicable, drill the mounting hole into the Pi case and remove any left strands carefully. Mount the antenna in place and pay attention to already check if the antenna's u.FL connector is oriented the right way, so that it can be attached to the PCB later easily.
+ Before assembling everything togheter, it might make sense to run a dry check.

<img src=""/PaHoy/Docu/Pictures_Assembly/Proto1.JPG"" height=""400"" alt=""Dry check of a prototype"">  <img src=""/PaHoy/Docu/Pictures_Assembly/Proto2.JPG"" height=""400"" alt=""Dry check of a prototype"">

+ If you can talk to the nRF24L01+, go ahead with assembly. Mount the **PaHoy** the same way the original PCB has been mounted before. Do not overtight the screw and the distance bolts!
+ Before putting the Pi on top of the **PaHoy**, check the RF-wire to the antenna one last time. Is it routed properly within the case? (The antenna recommended above has a quite long cable for what is needed inside the case.) It must not be folded, bent or routed in small diameters and should not be sqeezed in between somewhere. Open the rubber lid at the side an check if the u.FL connector sits properly on the PCB's counterpart?

<img src=""/PaHoy/Docu/Pictures_Assembly/Assemb1.JPG"" height=""300"" alt=""Check antenna wiring"">  <img src=""/PaHoy/Docu/Pictures_Assembly/Assemb2.JPG"" height=""300"" alt=""Check connector"">

+ If everything is alright, mount the Pi according to the case's instructions and before closing the lid, make one final check if the RF cable is still where it should be. (E.g. not squished above the USB ports). Once the case is closed, attach power and enjoy the nRF24L01+ for your project!

## Data
The project has been done in Altium, but Gerbers, Schematics as PDF and alle production data is in the repo, so you can use it also without having an Altium licence. Pay attention, the PCB is just 1.2mm in height! Otherwise it doesn't fit.

## Ordering
Right now, there is no commercial way of buying these PCBs and I can't name any shop. I don't supply them by myself, since I got no registered business. 
I can just recommend the way of ordering I went through:
+ Take the Gerbers, the BOM and the PicknPlace data and head over to JLC-PCB. They offer cheap PCB service and assembly in a one-stop-manner. Get familiar with how their service works (e.g. buying the parts before starting the PCB and assembly order) and let them do it. All my prototypes where made by them and apart from one mistake (wrong PicknPlace data from my side) I had never an issue with them. When ordering there, always choose ""review assembly data"", so that you have a chance to see the IC orientation in their tools. The nRF24L01+ is flipped every time. You then have the chance to correct it.
+ The data (BOM, PicknPlace) is already prepared to comply with JLCPCB partnumbering, so you can start right away.
+ JLCPCB can assembly only on one side. SMT-side is bottom in this case. The 40pin connector towards the Pi has to be soldered by yourself. It is hard to get, since it is of lower hight than standard 100mil connectors. You can order it at Digikey or Mouser (both supply also private customers), P/N M20-7812045.
+ When ordering the PCB, pay attention, the PCB is just 1.2mm in height, otherwise it won't fit into the case properly!
",2,2,2,0,solar-energy,"[ahoy, dtu, hoymiles, inverter, inverter-control, raspberry, raspberry-pi, raspberrypi, solar-energy]",00000
873,solivia-scraper,kinow,N/A,https://github.com/kinow/solivia-scraper,https://api.github.com/repos/kinow/solivia-scraper,Scraper for Solivia Monitoring ,"# Solivia Scraper

Scraper for Solivia Solar Inverters web site.

## Set up

Clone the project.

    git clone https://github.com/kinow/solivia-scraper.git

Create a dotEnv file

    cd solivia-scraper
    touch .env

Here's an example dotEnv file.

```
SOLIVIA_USER=myemail@myemaildomainname.lo
SOLIVIA_PASS=MyPassWord
SOLIVIA_INVERTERS=comma,separated,list,of,inverters
SOLIVIA_PLANTGUID=my-plant-gui-id
```

You also need to install the project dependencies

    pip install -r requirements.txt

Finally, you can run the scrap.

    python scraper.py --date YYYY-MM-DD

The output will be logged to your console, as in the follow example.

```
user@host$ python scraper.py --date 2016-08-09
2016-08-09 13:58:55,759 Starting Solivia scraper, for date 09/08/2016
2016-08-09 13:58:55,763 Starting new HTTPS connection (1): login.solar-inverter.com
2016-08-09 13:58:58,213 Starting new HTTPS connection (1): monitoring.solar-inverter.com
2016-08-09 13:59:07,054 Time,RPI M10A[1],,,
, AC Power (P1), AC Power (P2), AC Power (P3), Total Power
07:53,""0"",""0"",""0"",""0""
07:58,""0"",""0"",""0"",""0""
08:03,""0.015"",""0.009"",""0.022"",""0.046""
08:08,""0.033"",""0.023"",""0.037"",""0.093""
08:13,""0.042"",""0.033"",""0.045"",""0.12""
08:18,""0.052"",""0.042"",""0.052"",""0.146""
08:23,""0.059"",""0.05"",""0.061"",""0.17""
08:28,""0.065"",""0.056"",""0.066"",""0.187""
...
```

## Usage

You can simply call the script with `python scraper.py`, or you can specify the date
you would like to download the data.

    python scraper.py --date 2016-08-04

Where the format is YYYY-MM-DD (i.e. year with four digits, month with two digits, and
finally day with two digits too).

The complete usage:

```
usage: scraper.py [-h] [--date DATE] [--from FROM_] [--to TO] --types TYPES
                  [--interval INTERVAL]

Solivia Monitoring scraper

optional arguments:
  -h, --help           show this help message and exit
  --date DATE          Date (YYYY-mm-dd)
  --from FROM_         Date (YYYY-mm-dd)
  --to TO              Date (YYYY-mm-dd)
  --types TYPES        Comma separated types e.g. Power,Energy,AcParam,DcParam
  --interval INTERVAL  Being nice to servers, and waiting for an interval in
                       milliseconds before firing more requests (defaults to
                       300)

the --date parameter is exclusive to --to and --from. If --date is used, then
the others will be ignored
```

## Output

For every time you execute the script, you should see two files in your script directory.
One CSV and one JSON file, named with the timestamp for the date used to retrieve data.

Examples:

* 20160809000000.csv
* 20160809000000.json

The names will match.
",2,2,3,0,solar-energy,"[python, scraper, solar, solar-energy, solar-power, solivia]",00000
874,GrowattRequests,thiagoc01,N/A,https://github.com/thiagoc01/GrowattRequests,https://api.github.com/repos/thiagoc01/GrowattRequests,An API to get data from a Growatt server.,"# <img src=""https://indykoning.nl/wp-content/uploads/2020/01/Growatt-G.png"" alt= “” width=""100"" height=""100"">rowattRequests

<br>

## [README em português](README-pt-BR.md)
---

<br>

## API developed in order to get data from a Growatt Server for plants, devices, inverters etc.

---

<p style=""text-align:center;""><img src = ""https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Node.js_logo.svg/2560px-Node.js_logo.svg.png"" width = 500></p>

<br>

### <p style=""text-align:center;"">Implementation based on NodeJS using Promises</p>


<br>

# Project dependencies

-   ## Axios
-   ## Url
-   ## Https
-   ## Assert
-   ## Prompt-sync


<br>

# How to get it?

In any directory, type on terminal:

``` bash
$ git clone https://github.com/thiagoc01/GrowattRequests
```

Change the index.js file to some content desired by you.

Inside the created directory, type:

```bash
$ npm install
```

All the dependecies will be installed and you'll be ready to use the API.

<br>

# Using the library

The two main files are calls.js and sessao.js, which are in api folder.

To use the Calls class, you must initialize a Sessao class' object from sessao.js.

See the index.js for example.

**Notice: You should execute all methods from Calls class inside a async function!**

<br>

# File sessao.js

## Sessao class

```JS
class Sessao
```

Contains methods to login and logout, as well as storage of cookies and headers' information to the requests.

## `constructor`
---
<br>

### Class's constructor

| Parameter | Type   | Default    | Description             |
| --------- | ------ | --------- | ----------------------- |
| usuario   | `string` | Must be given | Access credential user |
| senha   | `string` | Must be given | Access credential password |
| servidor   | `string` | `""https://server.growatt.com""` | Server that will receive all the requests |
| headers   | `Object` | `{'User-Agent' : userAgentDefault, Connection: 'keep-alive'}` | Header that will be part of requests. This header is a set of parameters and values from a standard HTTP header. |

Usage example:

```JS
let session = new sessionModule.Sessao('usuario', 'senha')
```

<br>

`async realizarLogin()`
---
<br>

### Login in the server with settings based on attributes from this object.

<br>

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the result of the response and a success message |

Usage example:

```JS
await session.realizarLogin();
```

<br>

## `async realizarLogout()`
---
<br>

### Logout from the server.

<br>

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the result of the response and a success message |

Usage example:

```JS
await session.realizarLogout();
```

**Notice: After logout, any new request in a Calls object containing the session that logged out will fail and a new login will be done automatically.**

<br>

# File calls.js

## Calls class

```JS
class Calls
```

Contains methods to make the requests to the server and get data from all plants and devices.

## `constructor`
---
<br>

### Class's constructor

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| sessao   | `Sessao` | Must be given | Object of type `Sessao` that contains an initialized session and available to use |

Usage example:

```JS
let calls = new callsModule.Calls(sessao)
```

**Notice: If a session has not been initialized, the object initialization will throw a exception and finish the script execution.**

<br>

## `async obterListaPlanta()`
---

Use to get the list of objects that contain all plants managed by your account. 

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Array<Object>>` | Array containing objects with data from all managed plants |

Usage example:

```JS
let plantList = await calls.obterListaPlanta();
```

<br>

## `async obterDispositivosPlanta(idPlanta)`
---

Use to get the list of devices in the given plant by arguments.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |

**Return**:

 Tipo     | Descrição               
 -------- |  -------------------------------|
 `Promise<Array<Object>>` | Array containing objects with data from all devices in the given plant by arguments. |

Usage example:

```JS
let deviceList = await calls.obterDispositivosPlanta('1111111');
```

<br>

## `async obterInfoDispositivo(idPlanta, numeroSerial, tipo = 'storage')`
---

Use to get information from a device. 

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerial | `string`| Must be given | String containing the device ID to be verified
| tipo | `string` | `'storage'` | Information type (datalog or storage)

**Return**:

 Tipo     | Descrição               
 -------- |  -------------------------------|
 `Promise<Object>` | Object with device's information |

Usage example:

```JS
let deviceInfo = await calls.obterInfoDispositivo('1111111', 'W2E4Q9202', 'datalog');
```

<br>

## `async obterCondicaoTempoPlanta(idPlanta)`
---

Use to get information about weather on the given plant by arguments.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |

**Return**:

 Tipo     | Descrição               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing weather information on the given plant |

Usage example:

```JS
let weatherInfoDevice = await calls.obterCondicaoTempoPlanta('1111111');
```

<br>

## `async obterDadosPlanta(idPlanta)`
---

Use to get more specific data from the given plant by arguments.

| Parameter | Tipo   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |

**Return**:

 Tipo     | Descrição               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing plant data |

Usage example:

```JS
let plantData = await calls.obterDadosPlanta('1111111');
```

<br>

## `async obterDadosEnergiaInversor(idPlanta, data, tempo = 'dia')`
---

Use to get energy data (pac) from inverter in a certain date.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| data  | `Date` | Must be given | Date instance containing timestamp to get information |
| tempo   | `string` | `'dia'` | Time range to be verified (can be dia (day), mes (month), ano (year) or total) |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the pac parameter with a empty list or list with values |

Usage example:

```JS
let energyDataInverter = await calls.obterDadosEnergiaInversor('1111111', new Date(), 'mes');
```

<br>

## `async obterDadosEnergiaDispositivo(idPlanta, data, sn = '', param = parametros.parametrosInversor.potencia.pac, tipo = 'max', tempo = 'dia')`
---

Use to get data from a device, where the data is given by the param argument.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| data  | `Date` | Must be given | Date instance containing timestamp to get information |
| sn   | `string` | `''` | Device's serial number |
| param   | `string` | `'pac'` | Parameters that will be used to get data (it's a string with parameters splitted by ,). You can use the parametros.js file to reference.|
| tipo   | `string` | `'max'` | Device type |
| tempo   | `string` | `'dia'` | Time range to be verified (it can be dia (day), mes (month), ano (year) or total) |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the requested parameters on the list given by param |

Usage example:

```JS
let energyDataDevice = await calls.obterDadosEnergiaDispositivo('1111111', new Date(), 'E2A33Q2004', 'pac, ppv', 'max', 'dia');
```

**Notice: If the tempo parameter is 'dia', an array will be given containing the values every 5 minutes of the day.**

<br>

## :warning: The section below only applies if you have a storage device.

<br>

## `async infoTotalArmazenamento(idPlanta, numeroSerialArmazenamento)`
---

Use to get storage information from a plant in the whole period.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerialArmazenamento  | `string` | Must be given | Contains the storage device's serial number |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the storage's plant information |

Usage example:

```JS
let totalInfoStorage = await calls.obterInformacaoTotalArmazenamentoPlanta('1111111', 'E2A33Q2004');
```
<br>

## `async obterInformacaoStatusArmazenamentoPlanta(idPlanta, numeroSerialArmazenamento)`
---

Use to get current storage information from a plant.

| Parameter | Type   | Default    | Descrption               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerialArmazenamento  | `string` | Must be given | Contains the storage's device serial number |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the storage's plant information |

Usage example:

```JS
let currentInfoStorage = await calls.obterInformacaoStatusArmazenamentoPlanta('1111111', 'E2A33Q2004');
```

<br>

## `async obterInformacaoBateriaArmazenamentoPlanta(idPlanta, numeroSerialArmazenamento)`
---

Use to get current information of a storage battery of a plant.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerialArmazenamento  | `string` | Must be given | Contains the storage device's serial number |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the information of a plant's storage battery |

Usage example:

```JS
let batteryInfoStorage = await calls.obterInformacaoBateriaArmazenamentoPlanta('1111111', 'E2A33Q2004');
```

<br>

## `async obterInformacaoEnergiaDiaArmazenamentoPlanta(idPlanta, numeroSerialArmazenamento, data)`
---

Use to get information of a storage's battery of a plant in a certain date.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerialArmazenamento  | `string` | Must be given | Contains the storage device's serial number |
| data | `Date` | Must be given | Date to use as reference to get information

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing information of a storage's battery of a plant in a certain date |

Usage example:

```JS
let infoBatteryDateStorage = await calls.obterInformacaoEnergiaDiaArmazenamentoPlanta('1111111', 'E2A33Q2004', new Date());
```

# File parametros.js

This file contains parameters which can be used in the obterDadosEnergiaDispositivo method.

You can concatenate any parameter that you want to use, separating then with comma.

Usage example:

```JS
const parametrosModule = require('./util/parametros.js');

let param = parametrosModulo.parametros.potencia.pac + ',' + parametrosModulo.parametros.voltagem.mppt1;

let energyDataDevice = await calls.obterDadosEnergiaDispositivo('1111111', new Date(), 'E2A33Q2004', param, 'max', 'dia');
```

# Files in tipos folder

The files planta.js, weather.js, armazenamento_dados_total.js, armazenamento_dados_status.js, armazenamento_bateria_dados.js, dados_planta.js, dispositivo_info.js, dispositivo_planta.js e armazenamento_energia_grafico_dia.js can be used to get the object with their respective fields translated to pt-BR. Import the module and use the function passing the object that you receive from the server.

Usage example:

```JS

const plantTranslater = require('./tipos/planta.js');

let plantList = await calls.obterListaPlanta();
let translatedList = []

for (let i = 0 ; i < plantList.length ; i++)
    translatedList.push(plantTranslater.obterObjPlanta(plantList[i]))
```

# Tests

This repository contains a directory of tests (testes).
Run:

```bash
$ npm test
```

The necessary data will be requested in order to connect to the server.

<br>

# Initializing the API

Import both modules:

```JS
const sessionModule = require(""./api/sessao.js"");
const callsModule = require(""./api/calls.js"");
```

Initialize an object of Sessao class like this:

```JS
let session = new sessionModule.Sessao('login', 'senha');
```

Where login and senha are your credentials (username and password). Then, call the realizarLogin method to authenticate on the server. If everything is right, the object will be available to be used in a object of Calls class.

```JS
await session.realizarLogin();

let calls = new callsModule.Calls(session);
```

After that, you can call all methods in the Calls class, based on the parameters documented above.

## Example:

```JS
let plantList = calls.obterListaPlanta();
```

An array containing objects that have identification data of plants will be returned.

# Bugs and inconsistencies

The methods and functions envolving storage and time's information gathering have not been test due to account's limitation on my possession. Any problem seen by you, please report as an <i>issue</i>.










",2,2,1,0,solar-energy,"[growatt, growatt-api, growatt-server, inverters, solar-energy]",00000
875,solar-system,DoshiNaman,N/A,https://github.com/DoshiNaman/solar-system,https://api.github.com/repos/DoshiNaman/solar-system,This cool repository represent our solar system,"# solar-system
This cool repository represent our solar system.<br>
You can see the final result by clicking <a href=""https://doshinaman.github.io/solar-system/"" target=""_blank"">this</a>.<br>
Created by <a href=""https://github.com/DoshiNaman"" target=""_blank"">me</a> and I use only <i>HTML-CSS-JS</i>.
",2,2,1,0,solar-energy,"[cool, doshi-naman, html-css-javascript, solar, solar-energy, solar-systems, solar2d, solarsystem]",00000
876,froniview_backend,neidigsi,N/A,https://github.com/neidigsi/froniview_backend,https://api.github.com/repos/neidigsi/froniview_backend,"FroniView is an OpenSource app that allows all owners of a ""Fronius"" inverter to view the energy generated by the solar system without having to go through a third-party server.","![FroniView](readme/banner.png)
# FroniView | RESTful-API
FroniView is an OpenSource app that allows all owners of a ""Fronius"" inverter to view the energy generated by the solar system without having to go through a third-party server. <p>
With some small changes in the backend is an use of others firm's inverters possible! <p>

## Functionality
This backend provides the data uploaded by the system function of the inverter to the ""FroniView"" app.<p>

## Documentation
The API documentation is written in OpenAPI 3 and could be found in the folder ""documentation"".",2,2,2,10,solar-energy,"[backend, expressjs, fronius, froniview, inverter, nodejs, rest-api, restful, restful-api, solar, solar-energy, solar-system]",00000
877,fineapple,KPMG-Fineapple,KPMG-Fineapple,https://github.com/KPMG-Fineapple/fineapple,https://api.github.com/repos/KPMG-Fineapple/fineapple,2022 KPMG Ideation Challenge 우승,"# Financial Investments for Net-zero Emissions: fineapple

![fineapple](https://user-images.githubusercontent.com/60145951/154900239-172f5d22-8fcb-40a7-90c8-d8da5c964ac5.png)

<div align=""center"">
<img src=""https://img.shields.io/badge/react-61DAFB?style=for-the-badge&logo=react&logoColor=black"">
<img src=""https://img.shields.io/badge/nest-E0234E?style=for-the-badge&logo=nestjs&logoColor=white"">
<img src=""https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white"">
<img src=""https://img.shields.io/badge/nginix-009639?style=for-the-badge&logo=nginx&logoColor=white"">
<img src=""https://img.shields.io/badge/GitHub Actions-2088FF?style=for-the-badge&logo=Github Actions&logoColor=white"">
<br>
<img src=""https://img.shields.io/badge/pandas-150458?style=for-the-badge&logo=pandas&logoColor=white"">
<img src=""https://img.shields.io/badge/numpy-013243?style=for-the-badge&logo=numpy&logoColor=white"">
<img src=""https://img.shields.io/badge/PyTorch-EE4C2C?style=for-the-badge&logo=PyTorch&logoColor=white"">
<img src=""https://img.shields.io/badge/scikitlearn-F7931E?style=for-the-badge&logo=scikit-learn&logoColor=white"">
<img src=""https://img.shields.io/badge/TensorFlow-FF6F00?style=for-the-badge&logo=TensorFlow&logoColor=white"">
</div align=""center"">

## Overview

fineapple은 사용과 투자의 진입 장벽이 높았던 태양광 발전 산업의 문제점을 해결하고자 설립되었습니다.
자사는 이를 타개하기 위해 소비자들에게 다음과 같은 두 가지 서비스들을 제공하고 있습니다.

1. 가정용 태양광 발전시 설치
2. 대규모 태양광 발전소 사업 개인 투자

fineapple의 서비스는 아래 링크에서 확인하실 수 있습니다.

- ~[fineapple 배포링크](https://fineapple.nemne.dev)~ (배포중단)

## 서비스 상세

### 1. 가정용 태양광 올인원 서비스 (HOME-Solar)

- 전력 소비 데이터를 바탕으로 전력/전기세 감축량을 예측해주는 인공지능 서비스
- 태양광 설치부터 수익성 계산, 잔여 전력 판매까지 해주는 스마트 올인원 서비스

### 2. 태양광 발전소 개인 투자 플랫폼 (Invest-Solar)

- 펀딩 형태로 개인이 소액으로 대규모 에너지 설비에 투자할 수 있는 플랫폼
- 전력 생산에 따른 비용을 지분에 따라 배분하여 수익 창출

## How to Run

1. `git clone https://github.com/KPMG-Fineapple/fineapple.git`
2. 환경 설정
   ```bash
   # python == 3.8
   $ cat requirements.txt | xargs -n 1 pip install
   ```
3. In your terminal

   ```
   # fineapple/BE
   $ npm install
   $ npm run start:dev

   # fineapple/FE
   $ npm install
   $ npm run dev
   ```

4. 로컬 서버 실행: http://localhost:3000
",2,2,0,0,solar-energy,"[data-analysis, solar-energy]",00000
878,Balcony,OxMarco,N/A,https://github.com/OxMarco/Balcony,https://api.github.com/repos/OxMarco/Balcony,An automatic gardener for your terrace,"# Balcony Project
![logo](https://cdn.dribbble.com/users/1797520/screenshots/5983584/thatsamole_thumbnail.jpg)

## Abstract
The _n-th_ project about multiple redundant power-independent sensors to monitor environmental parameters of a balcony garden.

What makes it different from other projects is the modular and easily extensible structure and the extensive debug logging. The final goal is to create a robust IoT device able to run for several years without requiring maintenance.

## Description
The design consists of two separate elements, multiple _sensor boxes_ and a single _hub_. 
Sensor boxes are autonomous thanks to a solar panel while the hub is connected to a wall adapter and to the Internet via WiFi through the MQTT IoT protocol. A remote server acts as a MQTT broker and performs data analysis.

The sensor boxes perform environmental data collection and stream it via MQTT to the hub at a configurable frequency. They support OTA updates from a server and can receive new congurations on a separate channel. Errors are streamed via MQTT to the hub that logs and uploads them to the remote server. In case of need, sensor boxes can save errors locally on SPIFFS to stream them later when reconnecting to the hub.

The hub acts as a gateway forwarding MQTT connections to a remote server and, in case of power issues, logging sensor data to be streamed when the connection is re-established.

Using sensor data, the remote server chooses watering timing and sends a message to the hub to open the main water valve. Manual flow control valves can be used to reduce the water flow if needed. In the future, sensor boxes could independently open secondary valves in order to selectively irrigate according to the crop needs. Plants like rosemary need very little watering while basil or parsley prefers a wet ground.

Sensor boxes perform light, temperature, humidity, pressure and soil moisture measurements while the hub only checks the internal temperature and humidity to identify possible moisture problems.
Thus, sensors need special enclosures to allow enough airflow to prevent moisture without altering the environmental parameters. My choice is 3mm plywood with white varnish to reflect sunlight.
The main hub, instead, can be put in a classical enclosed plastic box with silica gel.

## Long-Term Reliability
Most IoT solutions suffer several issues in the long run, some dependent on the hardware choice others on the programming.

### Problems
1. Insufficient power supply coming from the solar panel
2. Connection issues
3. Eccessive insulation or moisture damage
4. Components degradation

### Possible Solutions
1. Leverage deep sleep functions of ESP SoC and use a higher wattage solar panel
2. WiFi Mesh and WiFi repeaters
3. Stevenson's screen boxes and silica gel (except when performing weather monitoring)
4. Reduce file write and sensor reading


## Bill of Materials

### Hub-specific
* Esp8266 Wemos D1 mini pro + external antenna
* RTC logger shield + 2GB SD card
* 5V Relay board
* 12V 1/2"" solenoid N/C water valve
* 12V wall adapter
* DHT11 temperature and humidity sensor
* ZPH02-PM2.5 dust sensor

### Box-specific
* Esp8266 Wemos D1 mini
* 18650 Li-ion battery
* Wemos LiPo charger and 5V booster circuit
* 1.25W 5V polycrystalline solar panel
* BME280 environmental sensor (temperature, humidity and pressure )
* MAX44009 ambient light sensor
* Sealed soil moisture sensor

## Working Diagram

![working diagram](https://raw.githubusercontent.com/grcasanova/Balcony/master/working_scheme.png)

## MQTT Scheme
Here is a scheme, in orange the hardware nodes (sensor boxes and the hub), in grey the software nodes running on the remote server.

![mqtt scheme](https://raw.githubusercontent.com/grcasanova/Balcony/master/mqtt_scheme.png)

## Credits
* logo - Fabrizio Garda (https://dribbble.com/fgarda)
* OTA - Erik H. Bakke (https://www.bakke.online/)
",2,2,1,0,solar-energy,"[esp8266, garden-automation, iot, mqtt, solar-energy]",00000
879,PVOutput-Power-One-Aurora-ABB-Blackpill,BertHav,N/A,https://github.com/BertHav/PVOutput-Power-One-Aurora-ABB-Blackpill,https://api.github.com/repos/BertHav/PVOutput-Power-One-Aurora-ABB-Blackpill,Power-One (ABB) Aurora pvoutput uploader for Black pill Arduino 1.8.19,"# PVOutput-Power-One-Aurora-ABB-Blackpill

Arduino library to poll an Power-One (ABB) Aurora inverter and upload the readed values to PVoutput.org.

The sketch is written for a Blackpill SOC in conjunction with external flash, RS-485 duplex module and an ethernet W5500 module.<br>
Some features:<br>
- Retrieving weather from weerlive.nl<br>
- Retreaving rain information from buienradar.nl<br>
- Using NTP.<br>
- Automatic switching between summer/winter time.<br>
- registering dynamic DNS at freedns.com.<br>
- Detecting WAN IP changes and reregistering at freedns.<br>
- controls 3 fans for inverter cooling preventing power degradation at hot days.<br>
- includes a webserver for remote control and statusinformation.<br>
- Acts as a honeypot and reports to abuseipdb.<br>
- Uses wolfSSL for TLS connections.<br>
- Has different loglevels for monitoring and debugging.<br>
- Has TFTP server for up- and download whitelist IP en blacklist HTTP commands if honeypot functionality is desired.
<br>
Rename userdefs_empty.h to userdefs.h and make all the necessary keys personal.<br>
SPI0 is used for flash and ethernet.<br>
<br>
All connections from specific module → Black pill<br>
Wiring diagram: for relay board, all the relays on the board has the same function, so pick your favorite positions.<br>
Relay_fanC    → PB6<br>
Relay_Power_R → PB7<br>
Relay_fanB    → PB8<br>
Relay_Power   → PB9<br>
Relay_C_DIST  → PB12<br>
Relay_fanA    → PB13<br>
<br>
keyswitch     → PA0  // keyswitch is PA0, but is forced low at activation<br>
<br>
RS-485 module:<br>
GND → GND → G<br>
TXD → TX2 → PA2 UART used for RS-485<br>
RXD → RX2 → PA3  UART used for RS-485<br>
Vcc → 5V<br>
<br>
Ethernet module<br>
5V → 5V<br>
GND → G<br>
SCS → PA15 (ETHERNET_SS)<br>
MISO → A6<br>
MOSI → A7<br>
SCLK → A5<br>
RST → Not Connected<br>
INT Not Connected<br>
<br>
flash module:<br>
Vcc → 3,3V<br>
CS  → FLASH_SS → PA4<br>
DO  → A6<br>
GND → G → GND<br>
CLK → A5<br>
DI  → A7<br>
<br>
The system is based on many different code snippets from around. AFAIK no license infringements for personal use.<br>
<br>

![blackpill-v2](https://user-images.githubusercontent.com/10601859/204104731-bc914b1f-df20-4c2a-9d31-30f6142fd4bf.jpg)
![Blackpill_Pinout1](https://user-images.githubusercontent.com/10601859/204104740-60a7a9cd-f710-499a-9736-66a5dcf68e12.png)
![W5500](https://user-images.githubusercontent.com/10601859/204104969-a928f4c0-71a8-410d-a407-b95739595a6f.jpg)
![w5500back](https://user-images.githubusercontent.com/10601859/204110043-442cb5fb-81ec-4ecf-85bd-cdf6a9f45011.jpeg)
![RS485](https://user-images.githubusercontent.com/10601859/204104552-89688f90-0441-424a-b63f-f716f95fc0c2.jpg)
![W25Q32-W25Q64-W25Q128-Norflash-Opslag-Module-32Mbit-64Mbit-128Mbit-Flash-Opslag-Controle-Module-Spi-interface-STM32](https://user-images.githubusercontent.com/10601859/204105194-f2666641-6d25-42c5-8856-bac904f237fd.jpg)
![8relay](https://user-images.githubusercontent.com/10601859/204109138-024d6533-d693-4059-b235-392ba3f33888.jpg)

",2,2,1,0,solar-energy,"[abb, arduino, aurora, blackpill, buienradar, data-logging, inverter, ntp, power-one, pv-systems, pvi, pvoutput, rs485, solar, solar-energy, stm32, tftp, tls, weerlive, wolfssl]",00000
880,solar-weather-station,rahul4271,N/A,https://github.com/rahul4271/solar-weather-station,https://api.github.com/repos/rahul4271/solar-weather-station,,"This is the IoT based solar powered weather station based on Wemos D1 mini and data is sent to adafruit servers.
",2,2,1,0,solar-energy,"[adafruit-io, solar-energy, solarpower, weather-station]",00000
881,Dual-Axis-Solar-Tracker,Rushik2900,N/A,https://github.com/Rushik2900/Dual-Axis-Solar-Tracker,https://api.github.com/repos/Rushik2900/Dual-Axis-Solar-Tracker,Automated dual axis Photo-Voltaic(PV) panel (Solar Panel) rotation to achieve maximum surface area exposure to sunlight. This will optimize solar power generation with 30%-50% improvement in efficiency over fixed panel installations.,# Dual-Axis-Solar-Tracker,2,2,1,0,solar-energy,"[renewable-energy, solar-energy, solar-tracker, solar-tracking, solar-tracking-panels]",00000
882,stecagrid-exporter,vvicaretti,N/A,https://github.com/vvicaretti/stecagrid-exporter,https://api.github.com/repos/vvicaretti/stecagrid-exporter,Prometheus exporter for StecaGrid Inverter 2000 written in Go.,"# StecaGrid 2000 Exporter
Prometheus exporter for StecaGrid Inverter 2000 written in Go.

Metrics are fetched from `http://<steca-grid-ip>/measurements.xml`


## Getting started

1. Run `make` to build the binary
2. Setup a service with systemd ([example](./systemd/stecagrid-exporter.service))

## Supported settings
```
λ stecagrid-exporter -h
Usage of stecagrid-exporter:
  -frequency int
    	Polling frequency in seconds (default 5)
  -steca-ip string
    	StecaGrid IP address (default ""192.168.50.144"")
  -steca-path string
    	StecaGrid path (default ""/measurements.xml"")
```

## Grafana dashboard

![](img/dashboard.png?raw=true)
",2,2,3,0,solar-energy,"[grafana-dashboard, inverter, prometheus-exporter, solar-energy, stecagrid]",00000
883,PaHoy,DM6JM,N/A,https://github.com/DM6JM/PaHoy,https://api.github.com/repos/DM6JM/PaHoy,nRF24L01+ PCB for Raspberry Pi to use with aHoy,"# PaHoy

This project aims to have a neat integration of a nRF24L01+ into a Raspberry Pi 4B based system.
Background of the project is the use of [aHoy](https://github.com/lumapu/ahoy) with a RasPi to monitor Hoymiles Solar-Inverters. Most solutions are rather fiddly with open wiring and no fitting case.
To overcome these issues, I (DM6JM) created the **PaHoy**: 
+ A small PCB containing everything to smoothly connect the nRF24L01+ to the PI using its 40pin Dev-Block
+ Using standard pinning, so most code doesn't need any adjustment
+ Comes with an u-FL connector, so you may connect any 50-Ohm 2.4GHz antenna you want.
+ And, biggest plus, to fit into the [CoolerMaster Pi Case 40 V2](https://www.coolermaster.com/de/de-de/catalog/gehause/raspberry-pi/pi-case-40-v2/)

## How is this done? 
The [CoolerMaster Pi Case 40 V2](https://www.coolermaster.com/de/de-de/catalog/gehause/raspberry-pi/pi-case-40-v2/) has a small internal PCB, the sits on the 40-pin Dev-Block of the Pi and routes these pins in an 90degree angle to the outside of the case. I just took the dimensions of this PCB and replaced it by the **PaHoy** PCB. 

## Assembly
Before starting assembly: Make sure you are properly grounded in some way! ESD will kill the PCB and maybe the Pi as well, so pay attention. Use a wrist-wrap or other means of discharging yourself properly!
+ Before turing it on for the first time, double check that all parts are soldered correctly. A flipped IC might short your IOs of the Pi and cause damage!
+ Remove the original PCB out of the case by releasing the screw and the two distance bolts.
+ If you want to use an antenna built directly into the case, I recommend [this antenna by Linx](https://www.digikey.de/de/products/detail/linx-technologies-inc/ANT-2-4-PW-QW-UFL/4747969). It can be ordered together with the special low height 40pin connector at Digikey or Mouser (see Ordering). If applicable, drill the mounting hole into the Pi case and remove any left strands carefully. Mount the antenna in place and pay attention to already check if the antenna's u.FL connector is oriented the right way, so that it can be attached to the PCB later easily.
+ Before assembling everything togheter, it might make sense to run a dry check.

<img src=""/PaHoy/Docu/Pictures_Assembly/Proto1.JPG"" height=""400"" alt=""Dry check of a prototype"">  <img src=""/PaHoy/Docu/Pictures_Assembly/Proto2.JPG"" height=""400"" alt=""Dry check of a prototype"">

+ If you can talk to the nRF24L01+, go ahead with assembly. Mount the **PaHoy** the same way the original PCB has been mounted before. Do not overtight the screw and the distance bolts!
+ Before putting the Pi on top of the **PaHoy**, check the RF-wire to the antenna one last time. Is it routed properly within the case? (The antenna recommended above has a quite long cable for what is needed inside the case.) It must not be folded, bent or routed in small diameters and should not be sqeezed in between somewhere. Open the rubber lid at the side an check if the u.FL connector sits properly on the PCB's counterpart?

<img src=""/PaHoy/Docu/Pictures_Assembly/Assemb1.JPG"" height=""300"" alt=""Check antenna wiring"">  <img src=""/PaHoy/Docu/Pictures_Assembly/Assemb2.JPG"" height=""300"" alt=""Check connector"">

+ If everything is alright, mount the Pi according to the case's instructions and before closing the lid, make one final check if the RF cable is still where it should be. (E.g. not squished above the USB ports). Once the case is closed, attach power and enjoy the nRF24L01+ for your project!

## Data
The project has been done in Altium, but Gerbers, Schematics as PDF and alle production data is in the repo, so you can use it also without having an Altium licence. Pay attention, the PCB is just 1.2mm in height! Otherwise it doesn't fit.

## Ordering
Right now, there is no commercial way of buying these PCBs and I can't name any shop. I don't supply them by myself, since I got no registered business. 
I can just recommend the way of ordering I went through:
+ Take the Gerbers, the BOM and the PicknPlace data and head over to JLC-PCB. They offer cheap PCB service and assembly in a one-stop-manner. Get familiar with how their service works (e.g. buying the parts before starting the PCB and assembly order) and let them do it. All my prototypes where made by them and apart from one mistake (wrong PicknPlace data from my side) I had never an issue with them. When ordering there, always choose ""review assembly data"", so that you have a chance to see the IC orientation in their tools. The nRF24L01+ is flipped every time. You then have the chance to correct it.
+ The data (BOM, PicknPlace) is already prepared to comply with JLCPCB partnumbering, so you can start right away.
+ JLCPCB can assembly only on one side. SMT-side is bottom in this case. The 40pin connector towards the Pi has to be soldered by yourself. It is hard to get, since it is of lower hight than standard 100mil connectors. You can order it at Digikey or Mouser (both supply also private customers), P/N M20-7812045.
+ When ordering the PCB, pay attention, the PCB is just 1.2mm in height, otherwise it won't fit into the case properly!
",2,2,2,0,solar-energy,"[ahoy, dtu, hoymiles, inverter, inverter-control, raspberry, raspberry-pi, raspberrypi, solar-energy]",00000
884,solar-weather-station,rahul4271,N/A,https://github.com/rahul4271/solar-weather-station,https://api.github.com/repos/rahul4271/solar-weather-station,,"This is the IoT based solar powered weather station based on Wemos D1 mini and data is sent to adafruit servers.
",2,2,1,0,solar-energy,"[adafruit-io, solar-energy, solarpower, weather-station]",00000
885,Dual-Axis-Solar-Tracker,Rushik2900,N/A,https://github.com/Rushik2900/Dual-Axis-Solar-Tracker,https://api.github.com/repos/Rushik2900/Dual-Axis-Solar-Tracker,Automated dual axis Photo-Voltaic(PV) panel (Solar Panel) rotation to achieve maximum surface area exposure to sunlight. This will optimize solar power generation with 30%-50% improvement in efficiency over fixed panel installations.,# Dual-Axis-Solar-Tracker,2,2,1,0,solar-energy,"[renewable-energy, solar-energy, solar-tracker, solar-tracking, solar-tracking-panels]",00000
886,stecagrid-exporter,vvicaretti,N/A,https://github.com/vvicaretti/stecagrid-exporter,https://api.github.com/repos/vvicaretti/stecagrid-exporter,Prometheus exporter for StecaGrid Inverter 2000 written in Go.,"# StecaGrid 2000 Exporter
Prometheus exporter for StecaGrid Inverter 2000 written in Go.

Metrics are fetched from `http://<steca-grid-ip>/measurements.xml`


## Getting started

1. Run `make` to build the binary
2. Setup a service with systemd ([example](./systemd/stecagrid-exporter.service))

## Supported settings
```
λ stecagrid-exporter -h
Usage of stecagrid-exporter:
  -frequency int
    	Polling frequency in seconds (default 5)
  -steca-ip string
    	StecaGrid IP address (default ""192.168.50.144"")
  -steca-path string
    	StecaGrid path (default ""/measurements.xml"")
```

## Grafana dashboard

![](img/dashboard.png?raw=true)
",2,2,3,0,solar-energy,"[grafana-dashboard, inverter, prometheus-exporter, solar-energy, stecagrid]",00000
887,solivia-scraper,kinow,N/A,https://github.com/kinow/solivia-scraper,https://api.github.com/repos/kinow/solivia-scraper,Scraper for Solivia Monitoring ,"# Solivia Scraper

Scraper for Solivia Solar Inverters web site.

## Set up

Clone the project.

    git clone https://github.com/kinow/solivia-scraper.git

Create a dotEnv file

    cd solivia-scraper
    touch .env

Here's an example dotEnv file.

```
SOLIVIA_USER=myemail@myemaildomainname.lo
SOLIVIA_PASS=MyPassWord
SOLIVIA_INVERTERS=comma,separated,list,of,inverters
SOLIVIA_PLANTGUID=my-plant-gui-id
```

You also need to install the project dependencies

    pip install -r requirements.txt

Finally, you can run the scrap.

    python scraper.py --date YYYY-MM-DD

The output will be logged to your console, as in the follow example.

```
user@host$ python scraper.py --date 2016-08-09
2016-08-09 13:58:55,759 Starting Solivia scraper, for date 09/08/2016
2016-08-09 13:58:55,763 Starting new HTTPS connection (1): login.solar-inverter.com
2016-08-09 13:58:58,213 Starting new HTTPS connection (1): monitoring.solar-inverter.com
2016-08-09 13:59:07,054 Time,RPI M10A[1],,,
, AC Power (P1), AC Power (P2), AC Power (P3), Total Power
07:53,""0"",""0"",""0"",""0""
07:58,""0"",""0"",""0"",""0""
08:03,""0.015"",""0.009"",""0.022"",""0.046""
08:08,""0.033"",""0.023"",""0.037"",""0.093""
08:13,""0.042"",""0.033"",""0.045"",""0.12""
08:18,""0.052"",""0.042"",""0.052"",""0.146""
08:23,""0.059"",""0.05"",""0.061"",""0.17""
08:28,""0.065"",""0.056"",""0.066"",""0.187""
...
```

## Usage

You can simply call the script with `python scraper.py`, or you can specify the date
you would like to download the data.

    python scraper.py --date 2016-08-04

Where the format is YYYY-MM-DD (i.e. year with four digits, month with two digits, and
finally day with two digits too).

The complete usage:

```
usage: scraper.py [-h] [--date DATE] [--from FROM_] [--to TO] --types TYPES
                  [--interval INTERVAL]

Solivia Monitoring scraper

optional arguments:
  -h, --help           show this help message and exit
  --date DATE          Date (YYYY-mm-dd)
  --from FROM_         Date (YYYY-mm-dd)
  --to TO              Date (YYYY-mm-dd)
  --types TYPES        Comma separated types e.g. Power,Energy,AcParam,DcParam
  --interval INTERVAL  Being nice to servers, and waiting for an interval in
                       milliseconds before firing more requests (defaults to
                       300)

the --date parameter is exclusive to --to and --from. If --date is used, then
the others will be ignored
```

## Output

For every time you execute the script, you should see two files in your script directory.
One CSV and one JSON file, named with the timestamp for the date used to retrieve data.

Examples:

* 20160809000000.csv
* 20160809000000.json

The names will match.
",2,2,3,0,solar-energy,"[python, scraper, solar, solar-energy, solar-power, solivia]",00000
888,GrowattRequests,thiagoc01,N/A,https://github.com/thiagoc01/GrowattRequests,https://api.github.com/repos/thiagoc01/GrowattRequests,An API to get data from a Growatt server.,"# <img src=""https://indykoning.nl/wp-content/uploads/2020/01/Growatt-G.png"" alt= “” width=""100"" height=""100"">rowattRequests

<br>

## [README em português](README-pt-BR.md)
---

<br>

## API developed in order to get data from a Growatt Server for plants, devices, inverters etc.

---

<p style=""text-align:center;""><img src = ""https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Node.js_logo.svg/2560px-Node.js_logo.svg.png"" width = 500></p>

<br>

### <p style=""text-align:center;"">Implementation based on NodeJS using Promises</p>


<br>

# Project dependencies

-   ## Axios
-   ## Url
-   ## Https
-   ## Assert
-   ## Prompt-sync


<br>

# How to get it?

In any directory, type on terminal:

``` bash
$ git clone https://github.com/thiagoc01/GrowattRequests
```

Change the index.js file to some content desired by you.

Inside the created directory, type:

```bash
$ npm install
```

All the dependecies will be installed and you'll be ready to use the API.

<br>

# Using the library

The two main files are calls.js and sessao.js, which are in api folder.

To use the Calls class, you must initialize a Sessao class' object from sessao.js.

See the index.js for example.

**Notice: You should execute all methods from Calls class inside a async function!**

<br>

# File sessao.js

## Sessao class

```JS
class Sessao
```

Contains methods to login and logout, as well as storage of cookies and headers' information to the requests.

## `constructor`
---
<br>

### Class's constructor

| Parameter | Type   | Default    | Description             |
| --------- | ------ | --------- | ----------------------- |
| usuario   | `string` | Must be given | Access credential user |
| senha   | `string` | Must be given | Access credential password |
| servidor   | `string` | `""https://server.growatt.com""` | Server that will receive all the requests |
| headers   | `Object` | `{'User-Agent' : userAgentDefault, Connection: 'keep-alive'}` | Header that will be part of requests. This header is a set of parameters and values from a standard HTTP header. |

Usage example:

```JS
let session = new sessionModule.Sessao('usuario', 'senha')
```

<br>

`async realizarLogin()`
---
<br>

### Login in the server with settings based on attributes from this object.

<br>

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the result of the response and a success message |

Usage example:

```JS
await session.realizarLogin();
```

<br>

## `async realizarLogout()`
---
<br>

### Logout from the server.

<br>

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the result of the response and a success message |

Usage example:

```JS
await session.realizarLogout();
```

**Notice: After logout, any new request in a Calls object containing the session that logged out will fail and a new login will be done automatically.**

<br>

# File calls.js

## Calls class

```JS
class Calls
```

Contains methods to make the requests to the server and get data from all plants and devices.

## `constructor`
---
<br>

### Class's constructor

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| sessao   | `Sessao` | Must be given | Object of type `Sessao` that contains an initialized session and available to use |

Usage example:

```JS
let calls = new callsModule.Calls(sessao)
```

**Notice: If a session has not been initialized, the object initialization will throw a exception and finish the script execution.**

<br>

## `async obterListaPlanta()`
---

Use to get the list of objects that contain all plants managed by your account. 

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Array<Object>>` | Array containing objects with data from all managed plants |

Usage example:

```JS
let plantList = await calls.obterListaPlanta();
```

<br>

## `async obterDispositivosPlanta(idPlanta)`
---

Use to get the list of devices in the given plant by arguments.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |

**Return**:

 Tipo     | Descrição               
 -------- |  -------------------------------|
 `Promise<Array<Object>>` | Array containing objects with data from all devices in the given plant by arguments. |

Usage example:

```JS
let deviceList = await calls.obterDispositivosPlanta('1111111');
```

<br>

## `async obterInfoDispositivo(idPlanta, numeroSerial, tipo = 'storage')`
---

Use to get information from a device. 

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerial | `string`| Must be given | String containing the device ID to be verified
| tipo | `string` | `'storage'` | Information type (datalog or storage)

**Return**:

 Tipo     | Descrição               
 -------- |  -------------------------------|
 `Promise<Object>` | Object with device's information |

Usage example:

```JS
let deviceInfo = await calls.obterInfoDispositivo('1111111', 'W2E4Q9202', 'datalog');
```

<br>

## `async obterCondicaoTempoPlanta(idPlanta)`
---

Use to get information about weather on the given plant by arguments.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |

**Return**:

 Tipo     | Descrição               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing weather information on the given plant |

Usage example:

```JS
let weatherInfoDevice = await calls.obterCondicaoTempoPlanta('1111111');
```

<br>

## `async obterDadosPlanta(idPlanta)`
---

Use to get more specific data from the given plant by arguments.

| Parameter | Tipo   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |

**Return**:

 Tipo     | Descrição               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing plant data |

Usage example:

```JS
let plantData = await calls.obterDadosPlanta('1111111');
```

<br>

## `async obterDadosEnergiaInversor(idPlanta, data, tempo = 'dia')`
---

Use to get energy data (pac) from inverter in a certain date.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| data  | `Date` | Must be given | Date instance containing timestamp to get information |
| tempo   | `string` | `'dia'` | Time range to be verified (can be dia (day), mes (month), ano (year) or total) |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the pac parameter with a empty list or list with values |

Usage example:

```JS
let energyDataInverter = await calls.obterDadosEnergiaInversor('1111111', new Date(), 'mes');
```

<br>

## `async obterDadosEnergiaDispositivo(idPlanta, data, sn = '', param = parametros.parametrosInversor.potencia.pac, tipo = 'max', tempo = 'dia')`
---

Use to get data from a device, where the data is given by the param argument.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| data  | `Date` | Must be given | Date instance containing timestamp to get information |
| sn   | `string` | `''` | Device's serial number |
| param   | `string` | `'pac'` | Parameters that will be used to get data (it's a string with parameters splitted by ,). You can use the parametros.js file to reference.|
| tipo   | `string` | `'max'` | Device type |
| tempo   | `string` | `'dia'` | Time range to be verified (it can be dia (day), mes (month), ano (year) or total) |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the requested parameters on the list given by param |

Usage example:

```JS
let energyDataDevice = await calls.obterDadosEnergiaDispositivo('1111111', new Date(), 'E2A33Q2004', 'pac, ppv', 'max', 'dia');
```

**Notice: If the tempo parameter is 'dia', an array will be given containing the values every 5 minutes of the day.**

<br>

## :warning: The section below only applies if you have a storage device.

<br>

## `async infoTotalArmazenamento(idPlanta, numeroSerialArmazenamento)`
---

Use to get storage information from a plant in the whole period.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerialArmazenamento  | `string` | Must be given | Contains the storage device's serial number |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the storage's plant information |

Usage example:

```JS
let totalInfoStorage = await calls.obterInformacaoTotalArmazenamentoPlanta('1111111', 'E2A33Q2004');
```
<br>

## `async obterInformacaoStatusArmazenamentoPlanta(idPlanta, numeroSerialArmazenamento)`
---

Use to get current storage information from a plant.

| Parameter | Type   | Default    | Descrption               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerialArmazenamento  | `string` | Must be given | Contains the storage's device serial number |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the storage's plant information |

Usage example:

```JS
let currentInfoStorage = await calls.obterInformacaoStatusArmazenamentoPlanta('1111111', 'E2A33Q2004');
```

<br>

## `async obterInformacaoBateriaArmazenamentoPlanta(idPlanta, numeroSerialArmazenamento)`
---

Use to get current information of a storage battery of a plant.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerialArmazenamento  | `string` | Must be given | Contains the storage device's serial number |

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing the information of a plant's storage battery |

Usage example:

```JS
let batteryInfoStorage = await calls.obterInformacaoBateriaArmazenamentoPlanta('1111111', 'E2A33Q2004');
```

<br>

## `async obterInformacaoEnergiaDiaArmazenamentoPlanta(idPlanta, numeroSerialArmazenamento, data)`
---

Use to get information of a storage's battery of a plant in a certain date.

| Parameter | Type   | Default    | Description               |
| --------- | ------ | --------- | ----------------------- |
| idPlanta   | `string` | Must be given | String containing the plant ID to be verified |
| numeroSerialArmazenamento  | `string` | Must be given | Contains the storage device's serial number |
| data | `Date` | Must be given | Date to use as reference to get information

**Return**:

 Type     | Description               
 -------- |  -------------------------------|
 `Promise<Object>` | Object containing information of a storage's battery of a plant in a certain date |

Usage example:

```JS
let infoBatteryDateStorage = await calls.obterInformacaoEnergiaDiaArmazenamentoPlanta('1111111', 'E2A33Q2004', new Date());
```

# File parametros.js

This file contains parameters which can be used in the obterDadosEnergiaDispositivo method.

You can concatenate any parameter that you want to use, separating then with comma.

Usage example:

```JS
const parametrosModule = require('./util/parametros.js');

let param = parametrosModulo.parametros.potencia.pac + ',' + parametrosModulo.parametros.voltagem.mppt1;

let energyDataDevice = await calls.obterDadosEnergiaDispositivo('1111111', new Date(), 'E2A33Q2004', param, 'max', 'dia');
```

# Files in tipos folder

The files planta.js, weather.js, armazenamento_dados_total.js, armazenamento_dados_status.js, armazenamento_bateria_dados.js, dados_planta.js, dispositivo_info.js, dispositivo_planta.js e armazenamento_energia_grafico_dia.js can be used to get the object with their respective fields translated to pt-BR. Import the module and use the function passing the object that you receive from the server.

Usage example:

```JS

const plantTranslater = require('./tipos/planta.js');

let plantList = await calls.obterListaPlanta();
let translatedList = []

for (let i = 0 ; i < plantList.length ; i++)
    translatedList.push(plantTranslater.obterObjPlanta(plantList[i]))
```

# Tests

This repository contains a directory of tests (testes).
Run:

```bash
$ npm test
```

The necessary data will be requested in order to connect to the server.

<br>

# Initializing the API

Import both modules:

```JS
const sessionModule = require(""./api/sessao.js"");
const callsModule = require(""./api/calls.js"");
```

Initialize an object of Sessao class like this:

```JS
let session = new sessionModule.Sessao('login', 'senha');
```

Where login and senha are your credentials (username and password). Then, call the realizarLogin method to authenticate on the server. If everything is right, the object will be available to be used in a object of Calls class.

```JS
await session.realizarLogin();

let calls = new callsModule.Calls(session);
```

After that, you can call all methods in the Calls class, based on the parameters documented above.

## Example:

```JS
let plantList = calls.obterListaPlanta();
```

An array containing objects that have identification data of plants will be returned.

# Bugs and inconsistencies

The methods and functions envolving storage and time's information gathering have not been test due to account's limitation on my possession. Any problem seen by you, please report as an <i>issue</i>.










",2,2,1,0,solar-energy,"[growatt, growatt-api, growatt-server, inverters, solar-energy]",00000
889,solar-system,DoshiNaman,N/A,https://github.com/DoshiNaman/solar-system,https://api.github.com/repos/DoshiNaman/solar-system,This cool repository represent our solar system,"# solar-system
This cool repository represent our solar system.<br>
You can see the final result by clicking <a href=""https://doshinaman.github.io/solar-system/"" target=""_blank"">this</a>.<br>
Created by <a href=""https://github.com/DoshiNaman"" target=""_blank"">me</a> and I use only <i>HTML-CSS-JS</i>.
",2,2,1,0,solar-energy,"[cool, doshi-naman, html-css-javascript, solar, solar-energy, solar-systems, solar2d, solarsystem]",00000
890,rfm69-arduino,qqqlab,N/A,https://github.com/qqqlab/rfm69-arduino,https://api.github.com/repos/qqqlab/rfm69-arduino,Arduino with RFM69 ISM radio running at 1.8V,"# rfm69-arduino
Arduino with RFM69 ISM radio running at 1.8V

Designed to run from small indoor solar cells delivering a few micro Amperes current.

### Installation in the Arduino IDE

 - Start Arduino IDE 1.8.4 or later
 - Menu File->Preferences
 - Add this URL in ""Additional Board Managers URLs"" and press OK
```
https://qqqlab.github.io/rfm69-arduino/package_qqqlab_index.json 
```
 - Menu Tools->Board->Board Manager
 - Type ""qq"", or scroll down the list to ""qqqlab Board""
 - Click on the item to reveal the ""Install"" button and click Install.
 - Now you should have ""qqqlab Board"" under menu Tools->Boards

![](docs/1.jpg?raw=true)

![](https://qqqlab.github.io/rfm69-arduino/2.jpg)
",2,2,0,0,solar-energy,"[arduino, arduino-boards, low-power, rfm69, rfm69cw, rfm69hcw, rfm69hw, rfm95, rfm95w, solar, solar-cells, solar-energy]",00000
891,Ausgrid-Dataset,rockey-abhishek,N/A,https://github.com/rockey-abhishek/Ausgrid-Dataset,https://api.github.com/repos/rockey-abhishek/Ausgrid-Dataset,"Data Cleaning, EDA and Visulization of solar enegy production, comsuption price and demand data from Augrid","# Ausgrid-Dataset
Data Cleaning, EDA and Visulization of solar enegy production, comsuption price and demand data from Augrid

Unzip Data.zip to access data before running the notebooks

Brief Description and link to the raw Data can be found in Ausgrid solar home electricity data notes (Aug 2014).pdf

The python notebook Cleaning_Energy_Dataset.ipynb contains the code for to clean the Data and generate
the file 'Energy_Dataset.csv' which contains the cleaned data. 

The raw data files can be found in the folder ..Dataset/RawData.
Ensure the RawData folder is downloaded and saved in the same folder as the python notebook before executing it.

Raw Data sources:
Energy data: https://www.ausgrid.com.au/Industry/Our-Research/Data-to-share/Solar-home-electricity-data (July 2012- June 2013)
Price and Demand Data: https://aemo.com.au/energy-systems/electricity/national-electricity-market-nem/data-nem/aggregated-data

The code for visualizing the data is in the notebooks titled EDA.
",2,2,2,0,solar-energy,[solar-energy],00000
892,pv2mqtt,MartijnVdS,N/A,https://github.com/MartijnVdS/pv2mqtt,https://api.github.com/repos/MartijnVdS/pv2mqtt,Service that publishes data from SunSpec-compliant inverters to an MQTT broker,"# pv2mqtt 

## Description

Publish data from SunSpec-compliant inverters to an MQTT broker, including
Home Assistant MQTT discovery.

This service allows me to have all of the data of my PV inverters together in
once place on a local machine, instead of using a different API (and possibly
cloud service) for each one. It also allows multiple ""readers"" to use the data
without conflict.

One `pv2mqtt` instance can poll multiple devices on multiple buses and the
refresh interval is configurable per device.

## Configuration

To configure `pv2mqtt`, make a copy of `pv2mqtt.dist.yml` and edit the copy
to match your setup.

You need to define a ""connection"" for each physical connection (= modbus bus)
your devices are connected to and a ""device"" for each device you want to read
data from.

In addition, you may need to set up a user account on your MQTT broker.

## Building/installing/running

The easiest way to run `pv2pqtt` is to use a container:

```shell
$ docker pull ghcr.io/martijnvds/pv2mqtt:latest
$ # (images are available for amd64, i386, arm64 and arm/v7)

$ # Or build it yourself:
$ docker build -t pv2mqtt .
```

This way, you will always have a supported Python version, and you won't clutter
up the system with dependencies.

It's also possible to install the dependencies manually, outside of a container
by using the included  `requirements.txt`.

Once you've downloaded or built the container, you can run it:

```shell
$ docker run --rm \
    --volume $(pwd)/pv2mqtt.yml:/pv2mqtt.yml:ro \
    martijnvds/pv2mqtt:latest
```

This makes the configuration file available in the container as `/pv2mqtt.yml`.
The container is built with to automatically start `pv2mqtt` using that
configuration file. You can specify a different one on the command line:

```shell
$ docker run --rm \
    --volume $(pwd)/pv2mqtt.yml:/etc/pv2mqtt.yml:ro \
    martijnvds/pv2mqtt:latest \
    /etc/pv2mqtt.yml
```

If you use a serial (RS-485) connection, you also need to pass through the
serial device to the container at startup. Make sure you use the same device
name in your configuration file!

```shell
$ docker run --rm \
    --volume=$(pwd)/pv2mqtt.yml:/pv2mqtt.yml:ro \
    --device=/dev/ttyUSB0:/dev/ttyUSB0:rw \
    ghcr.io/martijnvds/pv2mqtt:latest
```

## Limitations

Currently, only inverter data is read and published.

## Tested devices

The program has been tested with the following devices:

| Device | Type | Comment |
|-|-|-|
| AP Systems YC600 | Micro inverter with external monitoring box | Works (via ECU-R-Pro); make sure Modbus is enabled; default TCP port is 502 |
| SolarEdge SE3680H-RW000BNN4 | ""Regular"" inverter | Works over wifi, should also work over wired ethernet and RTU; for wifi/ethernet usage, Modbus-TCP needs to be enabled; default TCP port is 1502 |

## Links

* [pysunspec2](https://github.com/sunspec/pysunspec2) - SunSpec library that does the heavy lifting.
* [Home Assistant SunSpec integration](https://github.com/CJNE/ha-sunspec) - Alternative if all your inverters support Modbus-TCP and you only need your data in Home Assistant.
",2,2,1,0,solar-energy,"[home-assistant, mqtt-client, solar-energy, sunspec]",00000
893,SOLAR-AND-WIND-ENERGY-PREDICTION,mehakagg1313,N/A,https://github.com/mehakagg1313/SOLAR-AND-WIND-ENERGY-PREDICTION,https://api.github.com/repos/mehakagg1313/SOLAR-AND-WIND-ENERGY-PREDICTION,Predicts real-time solar and wind energy,"<h1 align=""center"">
SOLAR AND WIND ENERGY PREDICTION
</h1>

<p align=""center"">
<a href=""https://www.youtube.com/watch?v=BQPUwUDnKRE"" target=""_blank"">Video Demo</a>
</p>

SOLAR AND WIND ENERGY PREDICTION using Machine and Deep Learning models


   
<!-- TABLE OF CONTENTS -->
<details open=""open"">
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
      <ul>
        <li><a href=""#salient-features"">Salient Features</a></li>
       <li><a href=""#built-with"">Built With</a></li>
        <li><a href=""#compatible-platforms"">Compatible Platforms</a></li>    
      </ul>
    </li>
    <li>
      <a href=""#description"">Description</a>
      <ul>
        <li><a href=""#dataset"">Dataset</a></li>
        <li><a href=""#data-preprocessing"">Data Preprocessing</a></li>
         <ul>
            <li><a href=""Removing Null Values"">Removing Null Values</a></li>
            <li><a href=""Correlation analysis"">Correlation analysis</a></li>
            <li><a href=""Feature Importance"">Feature Importance</a></li>
         </ul>
      </ul>
    </li>
    <li>
      <a href=""#results"">Results</a>
    </li>
    <li>
      <a href=""#navigating-the-website"">Navigating the Website</a>
    </li>
    <li>
      <a href=""#team"">Team</a>
    </li>
    
  </ol>
</details>

<!-- ABOUT THE PROJECT -->
## About the project
* Solar energy is one of several sustainable sources that is becoming increasingly important in the energy sector due to its potential to cut carbon emissions and counteract growing electricity prices. The main issue with solar energy is that it cannot be used due to the constantly shifting and unpredictable weather, cloud cover, climate, and seasons. As a result, solar energy generation varies. Therefore, resource planners and businesses are looking for models that take these uncertainties into account for the daily design and management of solar energy production, which could enable them to meet consumer demand and supply regardless of weather conditions.
* Weather complexity makes accurate synthesis of wind output difficult, and commercial confidentiality means that historical data is frequently limited. We present and validate a model for simulating the hourly power output of wind farms located anywhere in the world.

### Salient Features
Predicts real-time solar and wind energy. Accuracy, mean square error, root mean square error, mean absolute error are calculated for each algorithm and different hyperparameters and the best one is chosen.

### Compatible Platforms
Laptops, Desktops and Tablet PCs

### Built With

### Tech stack used
* Frontend: HTML, CSS, Bootstrap
* Backend: JavaScript, Python
* Prediction models: ML/DL models
* ML Models: Lasso Regression, Ridge Regression, Decision Tree, SVM, Random Forest
* DL Model: LSTM
* Concordium Used


## Description
### Dataset 
Data was collected from https://open-power-system-data.org/ which is a free open source platform with data on power systems for 37 European countries. But we chose to focus on a specific country, Germany, due to having the highest proportion of renewable energy than any other country(about 46 percent of its energy come from solar, wind, biomass) and hence it is a good indicator of where the rest of the world is headed. The data file contained about 16 variables like utc_time stamp,solar capacity,wind capacity,solar profile, wind profile,wind_onshore, wind_offshore profile.

### Data Preprocessing
#### Removing null values
1.For solar generation actual, wherever there is a null value, it has been filled with the value for a day before.For the first day of the month, since   there is no previous day value, it has been filled with 0 assuming there is no solar generation before 6 am.Then we replaced leftover Nan values with mean of the data of solar generation actual 
2. For wind generation actual, wherever there is a null value, it has been filled with the mean value of the entire wind generation actual column.

#### Correlation analysis 
It show that some features are more correlated to target variables. Solar profile is most correlated with solar generation output. In case of wind energy, wind profile, wind onshore profile, wind onshore generation followed by wind offshore profile and wind offshore generation.

![image](https://user-images.githubusercontent.com/87893594/211166795-6f554565-dee5-4d3d-8998-0795c909fd10.png)

#### Feature Importance
Along with correlation analysis, feature importance was used to select the most appropriate features of our dataset for robust model training. Useless data must be removed for low bias. It is a technique that calculates the score of each input feature. The score indicates the importance of that feature. 

## Results
We applied machine learning algorithms like Ridge and Lasso Regression, SVM, Random Forest, Decision Tree and LSTM on our data. We tested our models on various regression metrics like Accuracy, mean square error, root mean square error etc with  different hyperparameters. After considering these models, we found that SVM model was best suited for wind energy and Random forest for solar energy.Amongst Deep learning models, LSTM gave the best accuracy 0f about 98.2% for solar energy.

![WhatsApp Image 2023-01-08 at 12 51 55 PM](https://user-images.githubusercontent.com/74909133/211185941-6d9292c6-acee-476a-9dd6-467f804c80b5.jpeg)
![WhatsApp Image 2023-01-08 at 12 51 55 PM (1)](https://user-images.githubusercontent.com/74909133/211185945-1c4de132-e170-4307-b1b0-94b7b6e4fef5.jpeg)

![WhatsApp Image 2023-01-08 at 12 51 55 PM (2)](https://user-images.githubusercontent.com/74909133/211186083-d5179172-9220-4d6b-b62a-08490c9e6b7e.jpeg)

<h6> LSTM graph showing true values and predicted values </h6>





## Navigating the website

<img width=""1439"" alt=""cover page 1"" src=""https://user-images.githubusercontent.com/74909133/211185833-7900ed1d-5cef-4d75-b128-0e1953ec526d.png"">
<img width=""1440"" alt=""cover page 2"" src=""https://user-images.githubusercontent.com/74909133/211185843-3c5464cd-8dbc-4c21-bac7-02035c74433d.png"">
<img width=""1440"" alt=""solar predictor"" src=""https://user-images.githubusercontent.com/74909133/211185851-e1f6a5cb-2258-4bef-ae44-5aa2d266cc92.png"">
<img width=""1439"" alt=""advantages of product"" src=""https://user-images.githubusercontent.com/74909133/211185852-9a6cc865-e25b-4e64-b2fa-603197d3117d.png"">
<img width=""1440"" alt=""wind_predictor"" src=""https://user-images.githubusercontent.com/74909133/211185854-f65a083c-1ef2-4a82-b974-cde3e9249800.png"">



### Team
- Mehak Aggarwal
- Sonanshi Goel
- Shambhavi Rai
- Princy Singhal
",2,2,1,0,solar-energy,"[deep-learning, machine-learning, solar-energy, windenergy]",00000
894,solar-system,AndyMagwayer,N/A,https://github.com/AndyMagwayer/solar-system,https://api.github.com/repos/AndyMagwayer/solar-system,"Facts About Our Solar System Our solar system consists of our star, the Sun, and everything bound to it by gravity – the planets Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune; dwarf planets such as Pluto; dozens of moons; and millions of asteroids, comets, and meteoroids.","# solar-system
Facts About Our Solar System Our solar system consists of our star, the Sun, and everything bound to it by gravity – the planets Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune; dwarf planets such as Pluto; dozens of moons; and millions of asteroids, comets, and meteoroids.



Our planetary system is located in an outer spiral arm of the Milky Way galaxy.

The Latest
 New NASA Map Details 2023 and 2024 Solar Eclipses in the US
Our solar system consists of our star, the Sun, and everything bound to it by gravity – the planets Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune; dwarf planets such as Pluto; dozens of moons; and millions of asteroids, comets, and meteoroids. Beyond our own solar system, we have discovered thousands of planetary systems orbiting other stars in the Milky Way.


The Solar System[c] is the gravitationally bound system of the Sun and the objects that orbit it. The largest of such objects are the eight planets, in order from the Sun: four terrestrial planets named Mercury, Venus, Earth and Mars, two gas giants named Jupiter and Saturn, and two ice giants named Uranus and Neptune. The terrestrial planets have a definite surface and are mostly made of rock and metal. The gas giants are mostly made of hydrogen and helium, while the ice giants are mostly made of 'volatile' substances such as water, ammonia, and methane. In some texts, these terrestrial and giant planets are called the inner Solar System and outer Solar System planets respectively.

![Solar Sytem
](https://github.com/AndyMagwayer/solar-system/blob/main/ss2.jpg)





Composition
The overall structure of the charted regions of the Solar System consists of the Sun, four smaller inner planets surrounded by a belt of mostly rocky asteroids, and four giant planets surrounded by the Kuiper belt of mostly icy objects. Astronomers sometimes informally divide this structure into separate regions. The inner Solar System includes the four terrestrial planets and the asteroid belt. The outer Solar System is beyond the asteroids, including the four giant planets.[40] Since the discovery of the Kuiper belt, the outermost parts of the Solar System are considered a distinct region consisting of the objects beyond Neptune.[41]

The principal component of the Solar System is the Sun, a low-mass star that contains 99.86% of the system's known mass and dominates it gravitationally.[42] The Sun's four largest orbiting bodies, the giant planets, account for 99% of the remaining mass, with Jupiter and Saturn together comprising more than 90%. The remaining objects of the Solar System (including the four terrestrial planets, the dwarf planets, moons, asteroids, and comets) together comprise less than 0.002% of the Solar System's total mass.[f]

The Sun is composed of roughly 98% hydrogen and helium,[46] as are Jupiter and Saturn.[47][48] A composition gradient exists in the Solar System, created by heat and light pressure from the early Sun; those objects closer to the Sun, which are more affected by heat and light pressure, are composed of elements with high melting points. Objects farther from the Sun are composed largely of materials with lower melting points.[49] The boundary in the Solar System beyond which those volatile substances could coalesce is known as the frost line, and it lies at roughly five times the Earth's distance from the Sun.[3]

The objects of the inner Solar System are composed mostly of rocky materials,[50] such as silicates, iron or nickel.[51] Jupiter and Saturn are composed mainly of gases with extremely low melting points and high vapor pressure, such as hydrogen, helium, and neon.[51] Ices, like water, methane, ammonia, hydrogen sulfide, and carbon dioxide,[50] have melting points up to a few hundred kelvins.[51] They can be found as ices, liquids, or gases in various places in the Solar System.[51] Icy substances comprise the majority of the satellites of the giant planets, as well as most of Uranus and Neptune (the so-called ""ice giants"") and the numerous small objects that lie beyond Neptune's orbit.[50][52] Together, gases and ices are referred to as volatiles.[53]

## Portfolio: https://portfolio-magamed.netlify.app/

![Image alt](https://github.com/AndyMagwayer/Portfolio-Website/blob/main/Screenshot%202023-09-17%20094045.png)
# My Portfolio Website
![Image alt](https://github.com/AndyMagwayer/solar-system/blob/main/solar-sytem.jpg)
",2,2,1,0,solar-energy,"[nasa, solar-energy, solar-system, solar-system-simulation, website]",00000
895,Libra-X,Quantum-Dynamics-Hub,Quantum-Dynamics-Hub,https://github.com/Quantum-Dynamics-Hub/Libra-X,https://api.github.com/repos/Quantum-Dynamics-Hub/Libra-X,,"# Libra-X program

Due to the increased volume of technical questions about installing and using the 
Libra, Libra-X, Pyxaid and Pyxaid2 codes, I have decided to create a convenient public forum 
for all users with the intent:

a) to share my replies with not only a single user that have a trouble, but also other
potential users who may found that information useful;
b) so that the users/developers who have had some experience with the code would be able to share their
knowledge and skills with others;

Among different platforms I found that the Google Group Forum is perhaps the best option.
https://groups.google.com/forum/#!forum/quantum-dynamics-hub

So, since Aug. 31, 2017, please post your questions about Libra, Libra-X, Pyxaid, or Pyxaid2 there.

This is only a test practice, I don't know how well it'll go, but lets try it. If you have ideas and suggestions for 
a better forum platform, please email me. 


   
   This file introduces how to execute Libra-X_program

0. Install Libra and GAMESS on your PC or server.
   For installation, access the websites below:
    Libra:  http://www.acsu.buffalo.edu/~alexeyak/libra/index.html
   GAMESS:  http://www.msg.ameslab.gov/gamess/

1. Create a working directory,say, /home/work . 

2. There, create input files(*.inp).(H2O.inp and 23waters.inp in "".../libra-gamess_interface/run"" are the simple examples.)
   For more details about how to create that, 
   please see the website http://www.msg.ameslab.gov/gamess/GAMESS_Manual/input.pdf .
   Here, Keep in mind 3 things.
   A. Only semi-empirical methods have been connected to libra so far;
      set GBASIS=MNDO, AM1, PM3, or RM1 in $BASIS section. 
   B. Set RUNTYP=GRADIENT in $CONTROL section.
   C. Use cartesian coordinates in $DATA section like this:

      Cn 1

      C  6.000000 4.377921 -4.769170 -2.758971
      C  6.000000 3.858116 -4.331728 -3.995136
      C  6.000000 2.478331 -4.387937 -4.267327
                           .
                           .
                           .
   
   * set blank line between ""Cn 1"" and 1st coordinate line.

3. For convinience, copy run_gms.py in "".../libra-gamess_interface/run"" to the working place.

4. Modify copied run_gms.py for calculation.
   Concretely, set variables for GAMESS, Molecular Dynamics(MD), excited electron dynamics, and debugs.
   See the input manual in "".../libra-gamess_interface/run"" to know more about the variables.

5. copy elements.txt in "".../libra-gamess_interface/run"" to the working directory.

6. Create ""res"" and ""sd_ham"" directories under the working place, where the results will be output.

7. When the precedures above are finished, it is the time to execute this program.
   Here, 2 types of execution can be used.
   A. Only invoke ""python run_gms.py"" in the working place.
   B. Use queuing system. submit_templ_gms.lsf or submit_templ_gms.slurm in "".../libra-gamess_interface/run"" are the simple examples for using this.
      Modify the files following your queuing system.   
   
8. After the calculation finished, the results will be set in ""res"" directory.
",2,2,5,0,solar-energy,"[dynamics, materials, modeling, modeling-tools, nonadiabatic, photochemical-reaction, photovoltaic, quantum, quantum-chemistry, solar-energy]",00000
896,iglu-server,Nacdlow,Nacdlow,https://github.com/Nacdlow/iglu-server,https://api.github.com/repos/Nacdlow/iglu-server,This is the main server code for iglü's web server.,"# iglü Server

## Description

iglü server is the web server and control system for the smart home. Its
purpose is to control home appliances and Internet-connected devices. It 
is self-contained, handling access-control among other things, and should work
without Internet connection.

## Requirements

The following packages are required.

- git
- Go (1.12+)
- GNU Make
- go-bindata

### Installing go-bindata

```sh
$ go get -u github.com/go-bindata/go-bindata/...
$ go install github.com/go-bindata/go-bindata/...
```

## Building

You can build by running:
```sh
$ make
```

And to run the web server:
```
$ make
$ ./nacdlow-server run [--port 443] [--dev]
```

## Configuration

A configuration file is created `./config.toml`. New fields will be
automatically added. You might need to set the Dark Sky API key, which you can
find on our Internal Wiki.

## Plugins

Plugins are added in the `plugins/` folder. Plugins may also be downloaded
directly from the marketplace.
",2,2,1,0,solar-energy,"[plugin-api, simulation, smart-home, smart-home-solution, solar-energy]",00000
897,froniview_scriptable,neidigsi,N/A,https://github.com/neidigsi/froniview_scriptable,https://api.github.com/repos/neidigsi/froniview_scriptable,"FroniView is an OpenSource application that allows all owners of a ""Fronius"" inverter to view the energy generated by the solar system without having to go through a third-party server.","![FroniView](readme/banner.png)
# FroniView | Scriptable

This respository was migrated to GitLab: [https://gitlab.com/neidigsi/widgets](https://gitlab.com/neidigsi/widgets)!

FroniView is an OpenSource application that allows all owners of a ""Fronius"" inverter to view the energy generated by the solar system without having to go through a third-party server. <p>
With some small changes in the backend is an use of others firm's inverters possible! <p>

## iPhone-Widget
This repository contains the implementation of a widget for the iOS app ""[Scriptable](https://scriptable.app)"".

The widget displays the current output of the Fronius solar system as well as the target value for the day.

The adjustment to the iPhone-wide light and dark mode is done automatically, as can be seen on the screenshots below.

<img src=""readme/dark.png"" width=""400"" /> &nbsp; <img src=""readme/light.png"" width=""400"" /><br/>

## Preconditions
The script uses a connection to a RESTful API as implemented in this repository:
[Froniview | Backend](https://github.com/neidigsi/froniview_backend)
",2,2,1,0,solar-energy,"[fronius, inverter, ios, ios-widget, iphone, iphone-widget, javascript, scriptable, scriptable-app, solar, solar-energy, widget]",00000
898,mppt-experiment-scheduler,Alarchemn,N/A,https://github.com/Alarchemn/mppt-experiment-scheduler,https://api.github.com/repos/Alarchemn/mppt-experiment-scheduler,A script for scheduling experiments and testing MPPT (Maximum Power Point Tracking) algorithms for solar energy systems.,"# MPPT Experiment Scheduler
**Scheduling experiments and testing MPPT (Maximum Power Point Tracking) algorithms for solar energy systems.**

Developing, training, and evaluating a machine learning algorithm for tracking the maximum power point is a task that is influenced by external factors, particularly the weather conditions. This repository provides a tool for scheduling and conducting tests based on weather forecasts to evaluate the performance of the algorithm under various climate scenarios.

## Conditions of interest
- **Evaluation under ideal conditions**: Assess the algorithm's speed and accuracy under ideal weather conditions.
- **Partial shading analysis**: Evaluate the algorithm's ability to distinguish between partially shaded local minima.
- **Stability assessment in rainy conditions**: Test the system's stability and performance during rainy weather conditions.
- **Data collection for prediction models and reinforcement learning**: Gather data required for training prediction models and reinforcement learning algorithms.

## Functionality
This tool utilizes weather forecasts to schedule and automate tests based on the predicted weather conditions, including the percentage of clouds, ultraviolet radiation, and general weather information. The scheduled experiment details are sent as WhatsApp messages at specified times of interest. The script can be executed from an Amazon EC2 instance or a Raspberry Pi.

## Overview
The general architecture of the project consists of using a weather API to obtain up-to-date weather conditions, while Twilio is used for sending WhatsApp messages to notify and schedule the experiments.

![Architecture](figures/MPPT.png ""Architecture"")

## Instructions
To set up and run the project, follow these steps:

1. Install the required packages listed in `requirements.txt`.
2. Create accounts on the weather API and Twilio platforms.
3. Obtain the necessary API tokens, phone numbers, and user information.
4. Save the obtained credentials as environment variables.
5. Make sure to correctly configure the request with the city of interest
6. Run the `main.py` script to initiate the experiment scheduling process.

## License
This project is licensed under the MIT License.",2,2,1,0,solar-energy,"[automated-testing, data-engineering, mppt, solar-energy]",00000
899,Statistical-Analysis-and-Forecasting-of-Solar-Energy,Kalit31,N/A,https://github.com/Kalit31/Statistical-Analysis-and-Forecasting-of-Solar-Energy,https://api.github.com/repos/Kalit31/Statistical-Analysis-and-Forecasting-of-Solar-Energy,Forecasting Solar Energy using Time Series Analysis.,"# Statistical-Analysis-and-Forecasting-of-Solar-Energy

This repository contains the project ""Statistical Analysis and Forecasting of Solar Energy - Inter States"" completed in the partial fulfillment of the course Applied Statistical Methods.

## Project Objectives

The aim of the project is to analyse solar energy in 4 different states and to train an appropriate time series model for solar energy forecasting.

## Methodology :

<p align=""center"">
    <img src=""images/workflow.png"" height=600 />
</p>

## Time Series Model Validation :

This is forecasting obtained from SARIMA (1,1,1)(1,1,1,52) with a 95% confidence interval.

![](images/Andhra-Pradesh.png)

## Analysis on different states :

This tables shows the different error rates for the SARIMA model for each of the 4 locations.

![](images/errors.png)

#### For more details about the methodology and results, refer to the [project report](ASM-Assignment-2.pdf)
",2,2,3,0,solar-energy,"[arima, sarima, solar-energy, solar-energy-forecasting, time-series-analysis, time-series-forecasting]",00000
900,CB-The-Solar-Solution,liorleiba,N/A,https://github.com/liorleiba/CB-The-Solar-Solution,https://api.github.com/repos/liorleiba/CB-The-Solar-Solution,"A project analyzing the rapid growth, development, global spread and other ongoing activities of solar energy farms on recent decades around the globe.","# ***CodeBridge - The Solar Solution***

## Table of contents
- [General description](#general-description)<br>
    - [A Yandex.Practicum DA project](#the-project-was-done-as-a-part-of-a-code-bridge-competition-hosted-by-yandexpracticum-)
    - [Project's website reference>>](https://qiuhanzhou.github.io/CODEBRIDGE/)
- [Instructions prior to loading the analysis notebook](#instructions-prior-to-loading-the-analysis-notebook)
- [Used Technology](#used-technology)
- [Project's cause and purpose](#projects-cause-and-purpose)
- [Teaser Points of Interest](#teaser-points-of-interest)
  - [Data cleaning](#data-cleaning)
  - [Geomapped missing locations](#geomapped-missing-locations)
  - [Explored global energy output on a ""heatmaplot""](#explored-global-energy-output-on-a-heatmaplot)
- [The Dataset's Description](#the-datasets-description)
  - [GEM Disclaimer](#disclaimer-note-the-analyzed-dataset-contains-the-initials-gem-which-stands-for-the-global-energy-monitor-an-organization-that-monitors-the-global-energy-markets-status-around-the-world-the-dataset-was-taken-straightly-from-the-gem-data-sources)

---
### **General description:**
A project analyzing the rapid growth, development, global spread and other ongoing activities of solar energy farms on recent decades around the globe. <br>
###### The project was done as a part of a Code-Bridge competition hosted by Yandex.Practicum. <br>
Feel free to check the project's landing page created by my partner: <a href='https://qiuhanzhou.github.io/CODEBRIDGE/' target='_blank'>Reference>></a>

###### [⭱ Back to Top](#codebridge---the-solar-solution)

---
### **Instructions prior to loading the analysis notebook:**
Before reading the analysis, make sure to **download the dataset**, in order for the code to work you should paste the local path to the file & make sure to keep its original name.

**The Jupyter NB would require you (*****i.e. the reader*****) to install some non-builtin libraries that were used in the project**.<br>
However, notice they will only install them **locally** in the specific notebook you'll open, and will not affect your general used environment.
###### Notice the interactive plots would not be available for sight in the preview mode of the Jupyter NB from the github repo.<br>

###### [⭱ Back to Top](#codebridge---the-solar-solution)

---


### **Used Technology:**
**Python Version:** 3.9.12 <br>
**Packages:** pandas (1.4.2), numpy, scipy, matplotlib, seaborn, plotly, missingno, geopy, itertools, translators, loguru, pathos, re, requests
  
###### [⭱ Back to Top](#codebridge---the-solar-solution)
---
### **Project's cause and purpose:**
When residential solar energy equipment was first made available to homeowners it was costly. The people who made the switch were usually those who wanted to make a conscious effort to reduce their carbon footprints. But they also had the means to invest in the equipment and services needed to make that switch. In the beginning, like many other new technologies, initial adopters often paid more until the technologies become more mainstream.

Yes, solar energy is increasingly becoming a viable fuel source for everyone. Today, switching to solar energy is far more affordable with the help of programs like the Investment Tax Credit (ITC). This incentive provides a tax credit of 26 percent of the cost to install solar power at your home. While this credit is in effect at 26% until the end of 2022, once it expires, solar energy will still remain a low-priced source of power as prices will most likely continue to drop. Meanwhile, oil, gas, and coal prices are likely to continue to increase, especially as sources are depleted and the costs to obtain these fuels grow.

I've explored the alternate solution to the energy problem, which is **the solar market**. I've researched it's growth and it's spread globally in the past years, to see how the world is running into the inevitable shifting to using solar energy as the planet's main resource.

###### [⭱ Back to Top](#codebridge---the-solar-solution)

---
# ***Teaser Points of Interest***
***Below are some teasers from the analysis:***

## Data cleaning

Used some heavy tools like the `missingno` library to explore the missing-values columns' possible connections and handling options across the 15 out of the 27 columns of the data which contained missing values.

##### Some exploratory plotting methods with `missingno` used in the project:

###### ***A nullity bar chart that represent the amount of non-missing values on each column:*** 
![An image of a `missingno`-created nullity bar chart](https://user-images.githubusercontent.com/117908614/201458019-b539f62e-f3d3-42b1-b8aa-990ea1448d26.png)
###### ***A nullity correlation dendrogram; the closer the connected columns' tail, the stronger the appearance correlation:***
![An image of a `missingno` co-appearance correlation dendrogram plot](/images/image.png)

###### [⭱ Back to Top](#codebridge---the-solar-solution)

## Geomapped missing locations

Created a selective reverse geomapping function ***which is able to execute reverse-mapping to `lat-lon` formatted coordinates*** according to a given query parameter ***to find accurate addresses***, with a punctuality that moves deeply from mapping the coordinnates continent, country and state, up to the suburb and street name. <br>
Values are available to be received both in the English language (The default), in the local language of a location, or at any other defined language available (internal). <br>

On that project, I used that function to fill 4 different location columns, all missing-values-inclusive, ranging from 7% up to 47% missing values of each column. 

###### [⭱ Back to Top](#codebridge---the-solar-solution)

## Explored global energy output on a ""heatmaplot""

Visualized a ***fully interactive*** heatmap plot showcasing the capacity of each declared solar plant on Earth using the coordinates of each solar project on the data. The heatmaplot can be used in order to identify countries and areas that invest deeper on solar energy than others, and recognize trends that aren't visible on the non-plotted analyses parts of the report. <br>
###### *For example, below you can see a zoomed screenshot of Asia's countries' solar energy output:*<br>

![A zoomed look of china at the global energy heatmap](/images/newplot%20(1).png)

###### [⭱ Back to Top](#codebridge---the-solar-solution)

---
# ***The Dataset's Description***

The analyzed ""Global Solar Power Tracker"" data contains 27 columns describing different aspects of solar energy projects that their rows are grouped by the hosting country of each (Alphabetically). <br>
Each of the rows represents a single solar project's (*at a certain developement status stage*) unique characteristics information, the main ones are:
* <b><i>Project name</i></b>.
* <b><i>Energy capacity</i></b> information.
* <b><i>Developement status stage</i></b>.
* The <b><i>start year</i></b> the dev. status stage began, and also <b><i>retired year</i></b>, if available.
* <b><i>Coordinates</i></b> (Latitude-Longitude) and <b><i>location columns</i></b> ranging from continental region to city of the solar project.
* <b><i>Ownership</i></b> / <b><i>Operator</i></b> names.

The dataset also contains local language names for non-English native countries for a few of the above aspects and others, as well as a Wikipedia page link for each project.

###### ***Disclaimer Note:*** *The analyzed dataset contains the initials '[GEM](https://globalenergymonitor.org/)', which stands for the ""Global Energy Monitor"", an organization that monitors the global energy markets status around the world. The dataset was taken straightly from the GEM data sources.*

###### [⭱ Back to Top](#codebridge---the-solar-solution)
",2,2,1,1,solar-energy,"[data-analysis, data-visualization, eda, geomapping, python, solar-energy, solar-energy-potential]",00000
901,Solar-Energy-Landing-Page,Hashuudev,N/A,https://github.com/Hashuudev/Solar-Energy-Landing-Page,https://api.github.com/repos/Hashuudev/Solar-Energy-Landing-Page,"A Solar Energy Site deployed using SCSS, JavaScript Template.  Here you can get every solar energy product for your home, industries and agriculture - a business build for your profitable investment.","# Solar-Energy [![Netlify Status](https://api.netlify.com/api/v1/badges/5bbebd4c-026d-45c1-978a-cbaa100951dc/deploy-status)](https://app.netlify.com/sites/hashuudev-solar-site/deploys)
This is a Solar Energy Introductory Web Application. <br> Here you can get every solar energy product for your home, industries and agriculture - a business build for your profitable investment.

# Technology-Used
* HTML
* CSS
* JavaScript
* Bootstrap
* SCSS
* Php
* Carousel Library

# Screenshot

![smart-energy-full-page](https://github.com/Hashuudev/Solar-Energy-Landing-Page/assets/94761963/b57ca584-9136-4f32-be0e-a6b9c17ef3a4)
",2,2,2,0,solar-energy,"[beginner-project, carousel, css, event-management, front-end-development, html, intersection-observer, javascript, junior-developer, landing-page, php, scss, smooth-scrolling, solar-energy, solar-website, ui-ux, united-elite-group-of-companies]",00000
902,homebridge-iammeter-accessory,Al-Mclean,N/A,https://github.com/Al-Mclean/homebridge-iammeter-accessory,https://api.github.com/repos/Al-Mclean/homebridge-iammeter-accessory,Homebridge Plug-in to support IAMMeter power meter,"<p align=""center"">
<img src=""https://github.com/homebridge/branding/raw/master/logos/homebridge-wordmark-logo-vertical.png"" width=""150"">
</p>

# IAMMeter HomeBridge Plug-in

The aim of this plug-in is to make the HomeKit environment aware of when a household equipped with power generation (typically a solar system), is exporting power. This will allow the construction of automations which can take advantage of the excess power (e.g. running heating or cooling systems, hot water systems, and clothes dryers).

This plug-in utilises the HomeBridge system, and is designed to interface with a Iammeter power meter. IAMMeter provide single and three phase power meters which are bi-directional (i.e. capable of measuring both forward / Grid and reverse/ export power). These devices are suited to monitoring power consumption and export for sites equipped with grid connected solar systems.

This project will initially focus on only the single phase meter.

## About

This project provides an output via a virtual light bulb which is configured to come on at a set export level (onThreashold) and turn off when the output drops to a set level (offThreshold). To avoid rapid on/off cycling of devices, the on thread hold should exceed the off thread hold by the usage of any automated devices. A large polling interval is also recommended (default 120 seconds) to further avoid cycling. 

This project has now achieved MVP for the single phase meter and is released for user evaluation. Feedback will be warmly welcomed.

## Install Development Dependencies

To install this plug-in via the HomeBridge GUI, simply search for ""IAMMeter"" within the plug-in search and then install the package ""homebridge-iammeter-accessory"" from the list.

For Manual install, enter the below command into the system terminal
```
npm install homebridge-iammeter-accessory
```


## Configuration

edit your Homebridge's config.json to include the following in the accessories section:

```json
""accessories"": [
        {
            ""accessory"": ""Meter"",
            ""name"": ""Meter"",
            ""ip"": ""192.168.1.177"",
            ""username"": ""admin"",
            ""password"": ""admin"",
            ""pollInterval"": 120,
            ""onThreashold"": -1000,
            ""offThreashold"": 0
        }
]
```


### Core
| Key | Description | Default |
| --- | --- | --- |
| `accessory` | Must be `Meter` | N/A |
| `name` | Name to appear in the Home app | N/A |
| `ip` | The IP address of the Meter | N/A |

### Optional fields
| Key | Description | Default |
| --- | --- | --- |
| `username` | The username required to log in to the Meter | `admin` |
| `password` | The password required to log in to the meter | `admin` |
| `pollInterval` | Time (in seconds) between device polls | `120` |
| `onThreashold` | The power value at which the Meter output will turn on (generally negative)| `-2000`|
| `offThreashold` | The power value at which the Meter output will turn off | `0` |


## Output 

I am currently toying with several ideas in this space. Similar implementations have used various parameters such as volume and brightness to act as a proxy for power which is currently unsupported in HomeKit. From a functional point of view, I expect the likely use case to be something like ""when export power exceeds x, then turn on device Y"". Thus I have implemented a simple virtual indicator (lamp) with a pre-defined ""on"" value as the most useful way to implement the functionality.


## Justification

In many areas of the world exported solar energy is readily consumed by the grid and offers financial incentives to the exporter. However, some area's, such as my home state of South Australia, have now reached very high levels of solar generation and are producing excess available power. In these area's it is now more beneficial for both the owner and environment to utilise this excess power to avoid the use of fossil fuel based energy sources when the sun is not shining. This is the impetus for building this plug-in. An ""export aware"" smart home could intelligently utilise this power to:
 - Pre-heat or cool the house
 - Charge an electric vehicle
 - Operate a clothes dryer
 - Run an electric hot water heater
 - Charge batteries and battery operated devices
        
Hopefully this plug-in will be useful to members of the Homebridge Community and will increase in uptake as the penetration of embedded solar generation increases.


## Acknowledgements:

This plug-in was developed from the following base example:

https://github.com/homebridge/homebridge-examples

",2,2,1,1,solar-energy,"[export, homebridge, homebridge-plugin, homekit, homekit-accessory, iammeter, meter, power, power-export, power-management, solar, solar-energy, solar-system]",00000
903,SCAPS1D-material_database,paramphy,N/A,https://github.com/paramphy/SCAPS1D-material_database,https://api.github.com/repos/paramphy/SCAPS1D-material_database,A collection of material files for SCAPS1D simulation. ,"# SCAPS1D-material_database
[![DOI](https://zenodo.org/badge/514662176.svg)](https://zenodo.org/badge/latestdoi/514662176)",2,2,2,0,solar-energy,"[database, material, photovoltaic, scaps1d, solar-energy]",00000
904,Heliophile,RanjeetHambire,N/A,https://github.com/RanjeetHambire/Heliophile,https://api.github.com/repos/RanjeetHambire/Heliophile,Heliophile is a lover of the sun😜. It is a Single Axis Solar Tracking Project.,"# Heliophile

Heliophile is a lover of the sun😜. It is a single-axis solar tracking system uses a tilted PV panel mount and one electric motor to move the panel on an approximate trajectory relative to the Sun's position

## Project Overview

Sun 🌞 Tracking Solar Panel using Arduino, In which we will use two LDRs (Light-dependent Resistor) to sense the light and a servo motor to automatically rotate the solar panel in the direction of sunlight. 
  
   The advantage of this project is that the solar panel will always follow the sunlight will always face the sun to get charge all the time and can provide the supply the maximum Power.

## Features:
1. Live sun tracking with LDR: Tracking the sun automatically using 2 LDR is one of the feature this project has. I achieve this by  calculating The difference between 2 LDR, and comparing the difference with an error threshold of 5.

2. Adjust solar panel to face towards the sunlight: After tracking, another feature of project is to adjust the solar pane to face towards the sun maximum power output


## Contributing

Pull requests are welcome. For major changes, please open an issue first
to discuss what you would like to change.

Please make sure to update tests as appropriate.

## License

[MIT](https://choosealicense.com/licenses/mit/)
",2,2,1,0,solar-energy,"[solar-energy, solar-tracking, tinkercad-project]",00000
905,csenergy-python,pacomunuera,N/A,https://github.com/pacomunuera/csenergy-python,https://api.github.com/repos/pacomunuera/csenergy-python,Concentrated Solar Power library,"# csenergy-python
Library for Concentrated Solar Energy Systems


El usuario selecciona:
    
    - Fichero Weather, se crea dataframe con registros a intervalos temporales
    - Configuración de planta (N_campos, N_lazos, N_SCA_lazo, N_HCE_SCA)
    - Modelo de planta:
        - Modelo 1: Parámetros sin dispersión
        - Modelo 2: Parámetros con dispersión
    - Tipo de simulacion:
        - Simulacion 1: Comparación con datos de generacion
        - Simulacion 2: Simulación de planta
    
    - Se genera la planta:
        - Modelo 1: Por ser todos iguales no sería necesario crear N_lazosxN_SCA_lazoxN_HCE_SCA
        sino que se va a recurrir a bucles para generar las salidas de temperatura y guardarlos
        en el dataframe
        
        - Modelo 2: Se crean los N_lazosxN_SCA_lazoxN_HCE_SCA HCE con sus atributos cargados según 
        las funciones de dispersión que toque. 
        
    - Simulación:
        - Simulación 1: para cada registro temporal se toma el caudal real y se calcula la temperatura de
        salida con el modelo seleccionado. Hay que manejar las temperaturas por encima del setpoint como pérdidas de energía por 
        culpa del desenfoque
        
        - Simulación 2:  para cada registro temporal se calcula el caudal para conseguir la temperatura
        de salida.
        
        datos que debe almacenarse en cada HCE
        - Rendimiento, tin, tout, massflow
        
        datos que debe almacenarse en cada SCA
        - Rendimiento (promedio de sus HCE), tin, tout, t_probe,  massflow, status (desenfoque, etc...)
        
        datos que debe almacenarse en cada LOOP
        - Rendimiento (promedio de sus SCA), tin, tout, massflow
",2,2,2,3,solar-energy,"[concentrated-solar-power, csp, solar-energy, solar-thermal-electricity, ste]",00000
906,hsp-brasil,vrufine,N/A,https://github.com/vrufine/hsp-brasil,https://api.github.com/repos/vrufine/hsp-brasil,Biblioteca de índices solarimétricos medidos no território brasileiro.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,0,0,solar-energy,"[brasil, energia, hsp, index, indices, solar, solar-energy, solares, solarimetrico]",00000
907,FNACSP_2010-2110,billy-idle,N/A,https://github.com/billy-idle/FNACSP_2010-2110,https://api.github.com/repos/billy-idle/FNACSP_2010-2110,Five New Algorithms for the Computation of Sun Position from 2010 to 2110 in Java Language.,"# Five New Algorithms for the Computation of Sun Position from 2010 to 2110 in Java Language

Proposed by [Dr. Roberto Grena.](https://www.researchgate.net/profile/Roberto_Grena)  
Implemented in Java language by [Guillermo Guzmán Sánchez.](mailto:guillesupremacy@gmail.com) 

[![CircleCI](https://circleci.com/gh/guillesup/FNACSP_2010-2110.svg?style=svg)](https://circleci.com/gh/guillesup/FNACSP_2010-2110)  
[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=guillesup_FNACSP_2010-2110&metric=alert_status)](https://sonarcloud.io/dashboard?id=guillesup_FNACSP_2010-2110)

## Overview

This project is based on the [original C++ source code](http://www.solaritaly.enea.it/StrSunPosition/SunPositionEn.php), translated and refactored in Java language simplifying the extensibility and portability via a pattern-oriented OO design along with the SOLID principles and test-driven development allowing the addition of new algorithms (e.g., `AlgorithmSix`).

## Sun Position Class Diagram

![alt text][fnacsp-class-diagram]

## How to compute the sun position

There are two ways to compute the sun position:

1. The first one uses the highest precision algorithm: `AlgorithmFive`, getting the current date-time from the system's clock; the time-zone or `zoneId` is passed as String:

```java
double longitude = 0.21787;     // Domain -> [0, 2PI] rad
double latitude = 0.73117;      // Domain -> [-PI/2, PI/2] rad
double pressure = 1.0;          // Domain -> [0.85, 1.069] atm
double temperature = 20.0;      // Domain -> [-89.2, 54.0] °C
String zoneId = ""Europe/Rome"";

SunPosition sp = new SunPosition(zoneId, longitude, latitude, pressure, temperature);

sp.compute();
```

2. In the second one, you have to pass the algorithm's name as `String` (`AlgorithmOne`, `AlgorithmTwo`, `AlgorithmThree`, `AlgorithmFour`, or, `AlgorithmFive`) along with the specific date-time needed, therefore `zoneId` is replaced with a `ZonedDateTime` object instead:

```java
int year = 2020;
int month = 1;
int day = 25;
int hour = 13;
int minute = 30;
int second = 0;
int nanoSecond = 0;
String zoneId = ""Europe/Rome"";

ZonedDateTime romeZDT = ZonedDateTime.of(year, month, day, hour, minute, second, nanoSecond, ZoneId.of(zoneId));

double longitude = 0.21787;     // Domain -> [0, 2PI] rad
double latitude = 0.73117;      // Domain -> [-PI/2, PI/2] rad
double pressure = 1.0;          // Domain -> [0.85, 1.069] atm
double temperature = 20.0;      // Domain -> [-89.2, 54.0] °C

String algorithm = ""AlgorithmFive""; // ""AlgorithmOne"", ""AlgorithmTwo"", ""AlgorithmThree"", ""AlgorithmFour"", or, ""AlgorithmFive"".

SunPosition sp = new SunPosition(algorithm, romeZDT, longitude, latitude, pressure, temperature);

sp.compute();
```

*For more information about time zones, see: <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>*

## Printing the sun position

```java
System.out.println(sp);
```

```console
Sun Ephemeris for Europe/Rome at Long. 0.217870 and Lat. 0.731170 on January 25 of 2020

Time       Zenith     Azimuth    Right Asc.    Declination     Hour Angle    Pres.    Temp.      ToD
13:30:00    1.097       0.315       5.364         -0.332         -5.988       1.0      20.0   Daytime

* angles in radians (rad)
* Pressure in atmospheres (atm)
* Temperature in Celsius degrees (°C)
* ToD stands for ""Time of Day""
```

## Sun Ephemeris

`SunEphemeris` (as the name implies) allows you to compute the sun ephemeris for one day starting at 00:00:00 hours evenly spaced in minutes. In order to compute the ephemeris you have to pass the `zoneId` along with the `longitude`, `latitude`, `pressure` and `temperature`. `SunEphemeris` gets the current date from the system's clock and uses the `AlgorithmFive`.

## Sun Ephemeris Class Diagram

![alt text][se-class-diagram]

## How to compute the sun ephemeris

```java
double temperature = 20.0;
double pressure = 1.0;
double latitude = 0.73117;
double longitude = 0.21787;

SunEphemeris se = new SunEphemeris(""Europe/Rome"", longitude, latitude, pressure, temperature);
se.compute();
```

## Printing the sun ephemeris

```java
System.out.println(se);
```

```console
Sun Ephemeris for Europe/Rome at Long. 0.217870 and Lat. 0.731170 on November 19 of 2018

Time       Zenith     Azimuth    Right Asc.    Declination     Hour Angle    Pres.    Temp.      ToD
00:00:00    2.748      -3.091       4.088         -0.338         -9.404       1.0      20.0     Night
00:01:00    2.748      -3.081       4.088         -0.338         -9.400       1.0      20.0     Night
00:02:00    2.748      -3.070       4.088         -0.338         -9.396       1.0      20.0     Night
...
07:10:00    1.561      -1.105       4.094         -0.339         -7.528       1.0      20.0   Daytime
07:11:00    1.558      -1.102       4.094         -0.339         -7.524       1.0      20.0   Daytime
07:12:00    1.556      -1.099       4.094         -0.339         -7.520       1.0      20.0   Daytime
...
23:59:00    2.753      -3.104       4.107         -0.342         -9.410       1.0      20.0     Night

* angles in radians (rad)
* Pressure in atmospheres (atm)
* Temperature in Celsius degrees (°C)
* ToD stands for ""Time of Day""
```

[fnacsp-class-diagram]: images/fnacsp-class-diagram.png ""Sun Position Class Diagram""
[se-class-diagram]: images/se-class-diagram.png ""Sun Ephemeris Class Diagram""
",1,1,1,0,solar-energy,"[grena, java, roberto, roberto-grena, solar, solar-energy, sun, sun-position]",00000
908,PVLimit-Web-App,SarthakJariwala,N/A,https://github.com/SarthakJariwala/PVLimit-Web-App,https://api.github.com/repos/SarthakJariwala/PVLimit-Web-App,Web application to calculate maximum theoretical efficiency limits for solar cells,"# PV-Thermodynamic-Limit-Calculator

This is the repository for the **solar cell thermodynamic calculator** web application at https://sarthakjariwala-pvlimit-web-app-app-k0dl22.streamlitapp.com/

![](SQCalculator-Demo.gif)
",1,1,2,0,solar-energy,"[efficiency, solar-cells, solar-energy]",00000
909,Solar-Irradiance-Forecasting-using-ANNs-from-Scratch,MFHChehade,N/A,https://github.com/MFHChehade/Solar-Irradiance-Forecasting-using-ANNs-from-Scratch,https://api.github.com/repos/MFHChehade/Solar-Irradiance-Forecasting-using-ANNs-from-Scratch,This works develops a deep artificial neural network (ANN) model to forecast solar irradiance at a given time and place based on several meteorological factors. ,"# Solar-Irradiance-Forecasting-using-ANNs-from-Scratch
This works develops a deep artificial neural network (ANN) model to forecast solar irradiance at a given time and place based on several meteorological factors. 

The ANN is designed from scratch and optimized using gradient and stochastic gradient descent with diminishing step-size and gradient clipping. The weights of the neural network are initialized using a special scheme. The performance of the model is also compared to that of a linear regression model, also built from scratch. 

Special thanks to contributors on https://www.kaggle.com/datasets/dronio/SolarEnergy for providing the dataset, EDA, data preprocessing and a starting point for the neural network archiecture. It should be noted that the works present in the mentioned source utilize built-in functions for the machine learning task as opposed to this work and do not go through the process of optimization, step-size decision, gradient clipping and weights initialization. 

As for this project, one can run the main file, and it will take care of importing other files. A PDF report is also found in the repository. A presentation file is also found. 
",1,1,2,0,solar-energy,"[artificial-neural-networks, forecasting-models, machine-learning, optimization, renewable-energy, solar-energy]",00000
910,AEMO-POWERBI,djouallah,N/A,https://github.com/djouallah/AEMO-POWERBI,https://api.github.com/repos/djouallah/AEMO-POWERBI,Analyzing AEMO data using PowerBI ,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,2,0,solar-energy,"[aemo, powerbi, renewable-energy, solar-energy]",00000
911,Solar-Tracking-System-using-Arduino-UNO,wittyicon29,N/A,https://github.com/wittyicon29/Solar-Tracking-System-using-Arduino-UNO,https://api.github.com/repos/wittyicon29/Solar-Tracking-System-using-Arduino-UNO,"A solar tracking system using Arduino UNO is a device that automatically adjusts the position of a solar panel to follow the movement of the sun, increasing the efficiency of electricity generation.","# Solar-Tracking-System-using-Arduino-UNO

# Description - 
A solar tracking system using an Arduino UNO is a system that tracks the position of the sun and adjusts the angle of a solar panel to ensure it is always facing the sun directly. The Arduino UNO is a microcontroller board that is commonly used in electronic projects due to its ease of use and flexibility.

The solar tracking system typically consists of light sensors, a motor, and an Arduino UNO. The light sensors are used to detect the position of the sun and send data to the Arduino UNO. The Arduino UNO then processes this data and sends signals to the motor to adjust the angle of the solar panel.

The system can be programmed to track the sun’s movement throughout the day and adjust the solar panel accordingly. This allows the solar panel to capture the maximum amount of solar energy, which can be used to power various electronic devices or stored in a battery for later use.

Overall, a solar tracking system using an Arduino UNO is an efficient and cost-effective way to improve the performance of solar panels and increase their energy output.

For the mathematical analysis of the system check out the research paper - [Mathematical Model and Analysis of Dual Axis Solar Tracking Mechanism by Rashmi Chawla](https://www.researchgate.net/publication/334129311_Mathematical_Model_and_Analysis_of_Dual_Axis_Solar_Tracking_Mechanism)

# Components 
Light sensors: Light sensors, such as photodiodes or phototransistors, are used to detect the position of the sun. These sensors are cost-effective, easy to use, and can provide accurate readings of light intensity.

Motor: The motor is used to adjust the angle of the solar panel based on the readings from the light sensors. A stepper motor is often used because it allows precise control over the angle of the panel.

Arduino UNO: The Arduino UNO is a popular microcontroller board that is easy to program and can interface with various sensors and components. It is a cost-effective and flexible option for controlling the solar tracking system.

Breadboard and jumper wires: These components are used to connect the light sensors, motor, and Arduino UNO together. A breadboard allows for easy and temporary prototyping, while jumper wires provide a convenient way to make connections between components.

# Requirements -
Hardware requirements:

1.Arduino UNO board

2.Two light sensors (photodiodes or phototransistors)

3.Stepper motor

4.Stepper motor driver board

5.Solar panel

6.Breadboard and jumper wires

7.Power supply (9V battery or AC adapter)

Software requirements:

1.Arduino IDE (Integrated Development Environment)

2.Accurate time-keeping library (such as DS3231)

3.Stepper motor library (such as AccelStepper)

4.Light sensor library (if needed, depending on the sensor used)

Mechanical requirements:

1.A frame or structure to hold the solar panel and motor assembly

2.A mounting bracket to attach the motor to the frame or structure

3.A gear or pulley system to connect the motor to the solar panel for adjusting the angle


PPT - [Presentation](https://www.canva.com/design/DAFhxNUzIiE/k0H-OpufIGb3DtMTwagJfQ/watch?utm_content=DAFhxNUzIiE&utm_campaign=designshare&utm_medium=link&utm_source=publishsharelink)

Report - [Report](https://1drv.ms/w/s!Al_XftKqLfUvmw0zH3WcLVN8huRj?e=9BUKuF)
",1,1,1,0,solar-energy,"[arduino, arduino-uno, atmega328p, control-systems, open-source, solar-energy]",00000
912,Ginlong-Solar-InfluxDB-MQTT,pcmvanveen,N/A,https://github.com/pcmvanveen/Ginlong-Solar-InfluxDB-MQTT,https://api.github.com/repos/pcmvanveen/Ginlong-Solar-InfluxDB-MQTT,A python script to send GinLong results direct to your own influxDB and pubilsh te solar results in MQTT ,"# Overview
 
This is a daemon that will listen on a port for connections from a Ginlong Solar Inverter. Currently tested with a Solis 4G single Phase Inverter (Solis-mini-1500-4G firmware version H4.01.51Y4.0.02W1.0.57 (2017-12-211-D)

Many thanks go to Graham0 and his script for an older version. https://github.com/graham0/ginlong-wifi

# Details
The Solis solar inverters come with the option for wired or wireless monitoring 'sticks'. These are designed to talk to their own portal at http://www.ginlongmonitoring.com/ where
the stats will gather. This software allows you to run your own gatherer on a server and push these stats into an MQTT queue for use in other systems such as the OpenHAB home
automation software. It is also possable to fill your own influxDB database. There is no need to send all data to ginlong anymore. 

You will need a system running python with the following modules:
* paho.mqtt.publish
* socket
* binascii
* time
* sys
* string
* influxdb
* json

You will also need a running MQTT server.
To store values in the database you need a running influxDB server(version 1.4 or higher is recomended)


# Setup

1. Log into the monitoring device, and configure the second IP option to point to the server that this daemon is running on. (Daemon defaults to port 9999)
2. Make sure that the MQTT and INFLUXDB settings are correct in the daemon (config.ini file). If yoy do not want to use the MQTT option or the Influx option, you only have to remove the values behind the keyś. Do not remove the keyś self.  
3. Start the daemon
4. Add the following to your OpenHAB items (Replace XXXXXXXXXX with the serial number of your inverter)
```
// Environmentals
Number Solis_Temp ""Temperature [%.2f °C]"" (Solis) { mqtt=""<[mymosquitto:ginlong/XXXXXXXXXX/Temp:state:default"" }

// DC
Number Solis_DC1Volt ""DC Volts [%.2f V]"" (Solis) { mqtt=""<[mymosquitto:ginlong/XXXXXXXXXX/Vpv1:state:default"" }
Number Solis_DC1Amp ""DC Current [%.2f A]"" (Solis) { mqtt=""<[mymosquitto:ginlong/XXXXXXXXXX/Ipv1:state:default"" }

// AC
Number Solis_AC1Volt ""AC Volts [%.2f V]"" (Solis) { mqtt=""<[mymosquitto:ginlong/XXXXXXXXXX/Vac1:state:default"" }
Number Solis_AC1Amp ""AC Current [%.2f A]"" (Solis) { mqtt=""<[mymosquitto:ginlong/XXXXXXXXXX/Iac1:state:default"" }

// Stats
Number Solis_kWhToday ""kWh today [%.2f kWh]"" (Solis) { mqtt=""<[mymosquitto:ginlong/XXXXXXXXXX/kwhtoday:state:default"" }
Number Solis_kWhTotal ""kWh total [%.2f kWh]"" (Solis) { mqtt=""<[mymosquitto:ginlong/XXXXXXXXXX/kwhtotal:state:default"" }
```
5. These items should now be accessible in your rules. If you have influxdb and grafana set up, you should also be able to start producing graphs




",1,1,2,0,solar-energy,"[ginlong, influxdb, inverter, mqtt, solar-energy, solar-system, solarpanels]",00000
913,Bangladseh-Power-Plant-Database,zia-foisal,N/A,https://github.com/zia-foisal/Bangladseh-Power-Plant-Database,https://api.github.com/repos/zia-foisal/Bangladseh-Power-Plant-Database,"The Global Power Plant Database is a comprehensive, open source database of power plants around the world. It centralizes power plant data to make it easier to navigate, compare and draw insights for Bangladesh . The database covers approximately 35,000 power plants from 167 countries and includes thermal plants (e.g. coal, gas, oil, nuclear, biomass, waste, geothermal) and renewables (e.g. hydro, wind, solar). Each power plant is geolocated and entries contain information on plant capacity, generation, ownership, and fuel type. It will be continuously updated as data becomes available.","# Bangladseh-Power-Plant-Database
Power Plants is an establishment for power generation. In Bangladesh, the consumption of per capita generation is very low only 220 kWh. Presently about 47% of the total population have access to electricity. Bangladesh Power Development Board' (BPDB) is the sole government authority for generation of electricity. Major power distribution agencies include the BPDB itself and the rural electrification board (REB). The Dhaka Electric Supply Authority (desa) and Dhaka Electric Supply Company (DESCO) for Dhaka or the Khulna Electric Supply Company (KESCO) for Khulna. The power division of the Ministry of Energy and Mineral Resources is the umbrella organisation that controls power generation, transmission and distribution. An Independent Power Project (IPP) of the ministry is under implementation for improvement in generation and distribution of electricity by government and private agencies.<br><br><br>
[Power Plant Database Webmap](https://zia-foisal.github.io/Bangladseh-Power-Plant-Database/)
",1,1,1,0,solar-energy,"[bangladesh, coal, energy, gas, hydro, oil, solar-energy]",00000
914,solar-radiation-ISB-MLOps,kingabzpro,N/A,https://github.com/kingabzpro/solar-radiation-ISB-MLOps,https://api.github.com/repos/kingabzpro/solar-radiation-ISB-MLOps,"Flask app to predict daily radiation from the time series of Solcast from Islamabad, Pakistan.","# End-to-End Machine Learning of Historical Solar Radiation for Islamabad

Link: https://solar-isb-flaskapp.herokuapp.com/



Flask app to predict daily radiation from the time series of Solcast from Islamabad, Pakistan.

Input: `month`, `day`, `Daily_Temp`, `Daily_Precip`, `Daily_Humidity`, `Daily_Pressure`, `Daily_WindDir`, `Daily_WindSpeed`, `Daily_DNI`, `Daily_GHI`
Output: `Daily_radiation`

## Use Json Input

```json
{
    ""month"":12,
    ""day"":3,
    ""Daily_Temp"":10.98,
    ""Daily_Precip"":9.07,
    ""Daily_Humidity"":59.20,
    ""Daily_Pressure"":929.06,
    ""Daily_WindDir"":167.30,
    ""Daily_WindSpeed"":1.86,
    ""Daily_DNI"":522.20,
    ""Daily_GHI"":324.60
}
```

## Results
```json
[
    {
        ""Daily_DNI"": 522.2,
        ""Daily_GHI"": 324.6,
        ""Daily_Humidity"": 59.2,
        ""Daily_Precip"": 9.07,
        ""Daily_Pressure"": 929.06,
        ""Daily_Temp"": 10.98,
        ""Daily_WindDir"": 167.3,
        ""Daily_WindSpeed"": 1.86,
        ""day"": 3,
        ""month"": 12
    },
    {
        ""solar irradiance"": 92.71980683342349
    }
]
```

### Postman
![result1](results/postman_test.jpeg)
### Mlflow
![result2](results/mlflow2.jpeg)
### NeptuneAI
![result3](results/neptune.jpeg)
",1,1,1,0,solar-energy,"[flaskapi, heroku, mlops, radiation, regression-models, sklearn, solar-energy]",00000
915,meteocontrol_alert_manager,henfrydls,N/A,https://github.com/henfrydls/meteocontrol_alert_manager,https://api.github.com/repos/henfrydls/meteocontrol_alert_manager,Alert management system for monitoring Solar Plant with Meteocontrol's Bluelog via email.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,1,0,solar-energy,"[database, email, monitoring-tool, photovoltaic, python, solar-energy, solar-system, sql, sqlite3]",00000
916,solar-controller,mxx-lxg,N/A,https://github.com/mxx-lxg/solar-controller,https://api.github.com/repos/mxx-lxg/solar-controller,Simple Arduino-based system to control solar heating for swimming pools.,"# solar-controller
Simple Arduino Uno-based PlatformIO project to control solar heating for swimming pools. The purpose of this controller is to save energy by not letting the circulation-pump run permanently. 

All you need is an Arduino Uno, a relay (that can handle a pump) and two temperature sensors.

The pump for the solar-panels is turned on every few minutes and runs for 10 seconds to move heated water from the panels to the outlet temperature sensor. If the temperature is 1°C warmer than the water on the inlet side, it will continue to run for another 2 minutes and then check the temperature again. If the temperature isn't warmer, the pump will turn off.

All intervals and values can be changed in code.

Inlet- and outlet-temperature are sent over serial for displaying in the Arduino IDE Serial Plotter.",1,1,1,0,solar-energy,"[arduino, energy, solar-energy, water]",00000
917,Single-Axis-Solar-Tracker,Rushik2900,N/A,https://github.com/Rushik2900/Single-Axis-Solar-Tracker,https://api.github.com/repos/Rushik2900/Single-Axis-Solar-Tracker,Automated single axis Photo-Voltaic(PV) panel (Solar Panel) rotation to achieve maximum surface area exposure to sunlight. This will optimize solar power generation with 20%-30% improvement in efficiency over fixed panel installations.,# Single-Axis-Solar-Tracker,1,1,1,0,solar-energy,"[renewable-energy, solar-energy, solar-system, solar-tracker, solar-tracking-panels]",00000
918,pytalent-monitor,LenzGr,N/A,https://github.com/LenzGr/pytalent-monitor,https://api.github.com/repos/LenzGr/pytalent-monitor,A Python Script to gather some data from the Talent Monitoring REST API,"# pyTalent Monitor - Gather data from the www.talent-monitoring.com REST API

## Motivation

Our small home PV (a [priWatt priWall Duo](https://priwatt.de/stecker-solaranlagen/fassade/priwall-duo/SW10354.1)) came with a Tsuness TSOL-MS800 inverter that only shares its metrics with a proprietary cloud service hosted on https://www.talent-monitoring.com/. We either need to use their web application or a mobile app to understand how our solar power plant is performing.

`pytalent-monitor.py` is a simple Python script that I hacked together to explore the Talent Monitoring REST API that is used by the vendor's mobile and web applications.

**Note: This software is not affiliated with or supported by Tsuness or any other company involved in this product.**

I used the [Network Monitor](https://firefox-source-docs.mozilla.org/devtools-user/network_monitor/index.html) built into [Firefox Developer Tools](https://firefox-dev.tools/) and [Postman](https://www.postman.com/) to extract and analyze the API calls used by the Talent Monitoring web application to populate its dashboards.

## Current Status

The script currently connects to the API using the username and password required by the mobile and web application and prints out a few values that I am interested in. It makes a lot of assumptions to simplify the code (only one power plant, only two PV panels).

The login credentials can be provided via the `--username` and `--password` command line arguments, or via environment variables (`PYTALENT_USERNAME` and `PYTALENT_PASSWORD`).

Example Output:
```
./pytalent-monitor.py -u user@example.com -p password
Status: ready
StationName: priwatt priWall duo
TotalActivePower(W): 192.0
DailyEnergy(Wh): 2490.0
MonthlyEnergy(Wh): 5020.0
YearlyEnergy(Wh): 107460.0
Panel1Voltage(V): 33.4
Panel1Current(A): 4.67
Panel1Power(W): 156.0
Panel2Voltage(V): 34.4
Panel2Current(A): 1.28
Panel2Power(W): 44.1
```

The script can also generate JSON output by using the ``--json`` command line argument.

Example Output:
```
 ./pytalent-monitor.py -u user@example.com -p password --json
{
    ""Status"": ""ready"",
    ""StationName"": ""priwatt priWall duo"",
    ""TotalActivePower(W)"": 192.0,
    ""DailyEnergy(Wh)"": 2490.0,
    ""MonthlyEnergy(Wh)"": 5020.0,
    ""YearlyEnergy(Wh)"": 107460.0,
    ""Panel1Voltage(V)"": 33.4,
    ""Panel1Current(A)"": 4.67,
    ""Panel1Power(W)"": 156.0,
    ""Panel2Voltage(V)"": 34.4,
    ""Panel2Current(A)"": 1.28,
    ""Panel2Power(W)"": 44.1
}
```

## Next Steps

I use this script as an opportunity to brush up on my (admittedly lousy) Python coding skills and learn more about connecting to REST APIs.

My final goal is to be able to visualize these metrics in a [Home Assistant Dashboard](https://www.home-assistant.io/dashboards/), but this requires a number of additional steps that I need to learn more about:

- [ ] [Add more useful values to the output](https://github.com/LenzGr/talent-monitoring/issues/2)
- [X] [Convert the script to use object-oriented programming paradigms](https://github.com/LenzGr/talent-monitoring/issues/1)
- [ ] [Convert the script into a proper Python module/package](https://github.com/LenzGr/talent-monitoring/issues/3)
- [ ] Publish the Python Module on the [Python Package Index](https://pypi.org/)
- [ ] Create a [Home Assistant Integration](https://www.home-assistant.io/integrations/) that uses the module

If you have any experience in performing these steps, I gladly accept pull requests and suggestions!

Some other projects/resources to study in order to achieve this goal include:

* [tsun-talent-monitoring](https://github.com/asciidisco/tsun-talent-monitoring) by [@asciidisco](https://github.com/asciidisco) - a Node.js project / Docker container that pulls data from Talent Monitoring cloud and converts it into a digestible JSON structure for consumption via HTTP/REST
* [pyAdax](https://github.com/Danielhiversen/pyAdax) by [@Danielhiversen](https://github.com/Danielhiversen/)

## LICENSE

MIT License (see `LICENSE` for details)
",1,1,2,3,solar-energy,"[monitoring, python-script, rest-api, solar-energy]",00000
919,Sun_Tracking_Solar_Panel,Some1OutThere,N/A,https://github.com/Some1OutThere/Sun_Tracking_Solar_Panel,https://api.github.com/repos/Some1OutThere/Sun_Tracking_Solar_Panel,"To increase the efficiency of the solar panel, LDRs are used to track the panel towards the sun. Arduino UNO is used to control the panel using a stepper motor.","# Sun_Tracking_Solar_Panel
To increase the efficiency of the solar panel, LDRs are used to track the panel towards the sun. Arduino UNO is used to control the panel using a stepper motor.
",1,1,2,0,solar-energy,"[arduino, arduino-uno, servo-motor, solar, solar-energy, solar-panels, tracker]",00000
920,SolarRayspvt,mohsinrazaq,N/A,https://github.com/mohsinrazaq/SolarRayspvt,https://api.github.com/repos/mohsinrazaq/SolarRayspvt,solar rays private limited company project,"# SolarRaysInternational
company portfolio website for
solar rays private limited (a company which deals in the solar products in all sectors).
",1,1,1,0,solar-energy,"[inverter, solar, solar-energy, solar-system]",00000
921,myenergy,mmaciejow,N/A,https://github.com/mmaciejow/myenergy,https://api.github.com/repos/mmaciejow/myenergy,PV monitoring anytime and anywhere,"# My Energy

This folder contains tools for monitoring pv system from Ginlong Data Logging Stick Wi-Fi for Solis Inverters. Currently tested with a Solis 4G Three Phase Inverter.
There is a possibility it also works with the following inverters: Omnik Solar, Solarman and Trannergy Inverters

The repository has two folders:
- python-myenergy - app for data collection
- android-myenergy - app for preview data

The Python script gets PV statistics from an internal website and stores in the database. To view the data, you need to submit your statistics to Firestore.

The following data are collected:
- current production 
- total production
- power
- (optional) weather / sunrise, sunset via ([openweathermap.org](https://openweathermap.org/ ""openweathermap.org""))

## Setup

### Firebase
[Set up your Android app for Firestore]( https://firebase.google.com/docs/firestore/client/setup-android)

1. Go to the Firebase console.
2. In the center of the project overview page, click the Android icon or Add app
	- Use the package name **net.myenv.myenergy**
3. Register app.
4. Download ""google-services.json"" to obtain your Firebase

### Python App

1. Download **python-myenergy**

	`git clone https://github.com/mmaciejow/myenergy.git `

2. Create python virtual environments and install all modules required by this project

	```bash
	cd myenergy/python-myenergy/
	pip install virtualenv
	virtualenv venv
	source venv/bin/activate
	pip install -r requirements.txt 
	```
3. Put your firebase credentials (google-services.json) into app folder
4. Copy config.ini.org to config.ini and edit 

	`cp config.ini.org config.ini `

 
	- set IP address, username, password to your system pv web
	- set path to database file
	- set path to Firebase credential
	- set api key and geographical coordinates (latitude, longitude) for openweathermap if you want to get information about the day


### Android App
1. Download **android-myenergy** and open in Android Studio
2. Put your firebase credentials (google-services.json) into module app folder`android-myenergy\app\`
3. Compile app
4. Run the app on an Android device or emulator.

## Usage

`path/to/venv/bin/python app.py config.ini`

You can add to crontab

	`*/5 5-21 * * * /path/to/venv/bin/python /path/to/myenergy/app.py /path/to/myenergy/config.ini`

## Screenshots
<table width=""100%"">
	<tr>
	  <th><img src=""https://github.com/mmaciejow/myenergy/blob/main/screenshots/myenergy-real-time.jpg?raw=true"" width=""100%""></th>
	  <th><img src=""https://github.com/mmaciejow/myenergy/blob/main/screenshots/myenergy-history.jpg?raw=true"" width=""100%""></th>
	</tr>
	<tr>
	  <th><img src=""https://github.com/mmaciejow/myenergy/blob/main/screenshots/myenergy-day.jpg?raw=true"" width=""100%""></th>
	</tr>
</table>",1,1,3,0,solar-energy,"[ginlong, solar-energy, solis]",00000
922,TFG,Pablosornp,N/A,https://github.com/Pablosornp/TFG,https://api.github.com/repos/Pablosornp/TFG,Recurrent neural networks to predict solar radiation measurements.,"# Trabajo de Fin de Grado: Predicción de la Radiación mediante el Uso de Redes Neuronales Recurrentes

El objetivo de este trabajo es el estudio de distintas configuraciones de Redes Neuronales para la predicción de datos de radiación solar. Este proyecto ha sido realizado por Pablo Heras entre Septiembre de 2019 y Junio de 2020

## Resumen
En la actualidad, el cambio climático es un hecho constatable que nos obliga a cambiar la manera de relacionarnos con el medio ambiente. En este proceso de transición ecológica en el que nos encontramos, las energías renovables juegan un papel fundamental. Sin embargo, este tipo de energías a menudo no se obtienen de manera constante, sino que fluctúan debido a causas meteorológicas y a los ciclos estacionales. Las tecnologías de almacenamiento de energía aún no están lo suficientemente desarrolladas para ser una solución a gran escala, por lo que las redes eléctricas deben adaptarse y estar preparadas para recibir cantidades variables de electricidad. En el caso particular de la energía solar, es fundamental poder predecir la cantidad de radiación que una placa fotovoltaica va a recibir para así calcular la cantidad de energía que será volcada a la red eléctrica. De esta forma, la red estará preparada para asumirla. En esta área, las redes neuronales han probado su capacidad de predicción dada una gran cantidad de datos. En concreto las redes recurrentes son de especial utilidad para casos en los que los datos tienen una relación temporal. La tecnología IoT (Internet de las cosas) aplicado a los paneles solares nos permiten obtener una gran cantidad de datos de radiación para entrenar estas redes. Así el objetivo de este trabajo es explorar la capacidad de distintos tipos de redes neuronales recurrentes para predecir datos de radiación solar en un conjunto de placas fotovoltaicas para distintos horizontes de predicción.

## Abstract
Nowadays, climate change is an observable fact which force us to change the way we interact with the environment. Renewable energy sources play a central role in the ecologic transition process we are in. However, in most cases these types of energy are not obtained in a constant way. They fluctuate due to meteorological causes and seasonal cycles. Electricity storing technologies are not yet fully developed to be a large-scale solution to the problem. Because of this, the energy grids must be adapted and prepared to receive variable amounts of electricity. In the case of photovoltaic panels, it is fundamental to be able to predict the amount of solar radiation the panel will receive, in order to calculate the amount of electricity that will be supplied to the grid. Thus, the grid would be ready to handle it. In this field, neural networks have proved their prediction power given huge sets of data. Recurrent neural networks (RNN) specially come in handy in cases where the data presents time correlations. Internet of Things (IoT) technology applied to solar panels now offers us huge amounts radiation data to train these networks. Therefore, the goal of this project is to explore the capacity of several types of recurrent neural networks to predict radiation measurements in a set of solar panels for different forecast horizons.

## Enlaces
Enlace a la memoria: http://oa.upm.es/63345/

LinkedIn: https://www.linkedin.com/in/pablo-heras-aranzana/

Los datos de radiación solar empleados en este proyecto corresponden a:
Sengupta, M.; Andreas, A. (2010). Oahu Solar Measurement Grid (1-Year Archive):
1-Second Solar Irradiance; Oahu, Hawaii (Data); NREL Report No. DA-5500-56506.
http://dx.doi.org/10.5439/1052451

Los datos usados han sido preprocesados antes de comenzar el proyecto por Ignacio Iker Prado Rujas:
https://github.com/iipr/solar-irradiance/blob/master/etl-data/etl-data.ipynb
",1,1,1,0,solar-energy,"[forecasting-models, keras, machine-learning, neural-networks, python, solar-energy]",00000
923,PicoWeatherStationV2,zNitche,N/A,https://github.com/zNitche/PicoWeatherStationV2,https://api.github.com/repos/zNitche/PicoWeatherStationV2,RPi Pico & strawberryAPI powered off-grid weather station,"## PicoWeatherStationV2

Off-grid, standalone version of [PicoWeatherStation](https://github.com/zNitche/PicoWeatherStation) powered
by [strawberryAPI](https://github.com/zNitche/strawberryAPI).

---

![interior](.media/pw_interior.jpg)
![exterior](.media/pw_exterior.jpg)

#### Features

- Logging temperature & humidity.
- Logging battery & pv voltage.
- Access to logged data through WiFi hotspot and web app.
- Logs visualisation using `chart.js`.

#### Setup

1. clone repo
2. clone submodules

```
git submodule update --init --recursive
```

3. set `HOTSPOT_SSID` and `HOTSPOT_PASSWORD` in `config.py`
4. set `WEATHER_LOGS_PER_HOUR` in `config.py` (default logging sensors data every 20 minutes).
5. format sd card (FAT32).
6. `chart.js` setup:
   rpi pico doesn't have enough space for flashing css/js libs, get `chart.js` from
   cdns (`https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js`),
   then put it on sd card `/static/libs/chart.js`.
7. flash `RPi Pico`.

#### Wiring

ToDo

#### Parts

| Part Name                              | Quantity |
|----------------------------------------|:--------:|
| Raspberry Pi Pico W                    |    1     |
| DHT20 temperature and humidity sensor  |    1     |
| DS3231 I2C RTC module                  |    1     |
| MicroSD card                           |    1     |
| SPI MicroSD card reader module         |    1     |
| Circuit board (70x90mm)                |    1     |
| Waterproof case                        |    1     |
| Gold pin connectors                    |    ?     |
| Connecting wires                       |    ?     |
| Cell holder for 2x 18650 battery       |    1     |
| 18650 li-ion battery                   |    2     |
| Step-down Voltage Regulator - 1,0V-17V |    1     |
| Step-up converter 5V                   |    1     |
| TP4056 1S 3,7V with protection         |    1     |
| 6V solar panel 165x135x3mm             |    2     |
| 1A fuse with wires                     |    1     |
| 3.3V zener diode                       |    2     |
| 4.7k resistor                          |    1     |
| 1k resistor                            |    1     |
| 10k resistor                           |    2     |
| ARK connector raster 5.0mm 2 pin       |    3     |
| 3mm screws and nuts                    |    ?     |
| 4mm screws and nuts                    |    ?     |

#### 3D printed parts

all models are provided in `freecad` project files for easier modifications.

| Part Name         | Quantity |
|-------------------|:--------:|
| bat_mount         |    1     |
| case_backplate    |    1     |
| case_bridge       |    2     |
| case_m_top        |    1     |
| case_th_connector |    1     |
| pcb_mount         |    1     |
| pv_b_holder       |    2     |
| pv_b_s_mount      |    2     |
| pv_t_mount        |    1     |
| pv_s_mount        |    2     |
| pv_t_s_mount      |    2     |
| th_holder         |    1     |
| th_holder_b       |    1     |
| th_holder_mount   |    1     |
",1,1,1,0,solar-energy,"[3d-printing, raspberry-pi-pico, solar-energy, weather-app, weather-station]",00000
924,fitvut-ims-simulation,tkachyna,N/A,https://github.com/tkachyna/fitvut-ims-simulation,https://api.github.com/repos/tkachyna/fitvut-ims-simulation,The project deals with the simulation of electricity production by solar panels for water heating in a family house in C++ within the IMS (Modeling and Simulation) course.,"# Modeling and Simulation (IMS)

> @author Tadeáš Kachyňa, <xkachy00@stud.fit.vutbr.cz>

> @date 15/12/2022

The project deals with the simulation of electricity production by solar panels for water heating in a family house in C++ within the IMS (Modeling and Simulation) course.
",1,1,1,0,solar-energy,"[cplusplus, modelling, simulation, solar-energy, solar-system]",00000
925,solarapp,motia,N/A,N/A,https://api.github.com/repos/motia/solarapp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:505E:2CB224:5CA568:652240EF.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
926,pv_sizing,joceliovieira,N/A,https://github.com/joceliovieira/pv_sizing,https://api.github.com/repos/joceliovieira/pv_sizing,On-grid and off-grid PV solar system sizing using Python and Jupyter Notebooks.,"# Sistema Solar Fotovoltaico


Dimensionamento sistema solar fotovoltaico on-grid e off-grid, desenvolvido como projeto da disciplina de Sistema Fotovoltaico, do curso de Engenharia de Energias Renováveis do CEAR-UFPB. 

Para acessar cada dimensionamento, basta selecionar os arquivos .ipynb na pasta /nb_dimensionamentos.
",1,1,1,0,solar-energy,"[photovoltaic-systems, pv, pv-systems, solar-energy]",00000
927,OPVPredictor,NU-CUCIS,NU-CUCIS,https://github.com/NU-CUCIS/OPVPredictor,https://api.github.com/repos/NU-CUCIS/OPVPredictor,Predictor for Highest Occupied Molecular Orbital (HOMO) Energy for Organic Photovoltaic Donor Molecules,"# Organic Photovoltaic Predictor 
This calculator is published at (http://info.eecs.northwestern.edu/OPVPredictor)

## Pre-requisites: 
1. Python 2.7 (or higher) 
2. Sklearn 0.14 (or higher) 
3. Rdkit 2012.9 (or higher)  
4. Numpy 1.4.1 (or higher) 

## List of Files: 
* \__init__.py: Core python file that launches the predictor  
* atomModel.pkl: Pickle file containing the model for predicting HOMO from Atom Pair fingerprints 
* maccsModel.pkl: Pickle file containing the model for predicting HOMO from MACCS fingerprints 
* static directory: This directory contains the static elements (boostrap theme files, images etc)
* templates directory: This directory contains 2 files 
  - index.html: HTML file for the homepage (request page)
  - OPV.html: HTML file for the response page 


## Developer Team

The code was developed by the <a href=""http://cucis.ece.northwestern.edu/"">CUCIS</a> group at the Electrical and Computer Engineering Department at Northwestern University. 

1. Arindam Paul (arindam.paul@eecs.northwestern.edu)
2. Ankit Agrawal (ankitag@eecs.northwestern.edu)
3. Wei-keng Liao (wkliao@eecs.northwestern.edu)
4. Alok Choudhary (choudhar@eecs.northwestern.edu)


The development team would like thank our collaborator <a href=""https://www.feinberg.northwestern.edu/faculty-profiles/az/profile.html?xid=40386"">Prof. Alona Furmanchuk</a> from <a href=""https://www.feinberg.northwestern.edu/"">Northwestern Feinberg School of Medicine</a>. 


## Citation
If you use this code or data, please cite:

Arindam Paul, Alona Furmanchuk, Wei-keng Liao, Alok Choudhary, Ankit Agrawal. Property Prediction of Organic Donor Molecules for Photovoltaic Applications using Extremely Randomized Trees. Journal of Molecular Informatics, 2019


## Questions/Comments:

email: arindam.paul@eecs.northwestern.edu or ankitag@eecs.northwestern.edu</br>
Copyright (C) 2019, Northwestern University.<br/>
See COPYRIGHT notice in top-level directory.

## Funding Support

This work was performed under the following financial assistance awards 70NANB14H012 and 70NANB19H005 from U.S. Department of Commerce, National Institute of Standards and Technology as part of the Center for Hierarchical Materials Design (CHiMaD). Partial support is also acknowledged from DOE awards DE-SC0014330, DE-SC0019358.
",1,1,3,0,solar-energy,"[machine-learning, molecular-modeling, solar-energy, web-application]",00000
928,solar-models,btaute,N/A,https://github.com/btaute/solar-models,https://api.github.com/repos/btaute/solar-models,Solar Power Modeling with R and Python,"Solar Modeling with R and Python
================
Brock Taute
4/29/2020

# Background

This repo contains a library for modeling the energy output of a
photovoltaic system in R. It leverages several Python modules, most
notably PVLib and PVFactors, using the reticulate package. R was
selected as the main user-interfacing language because it connects these
powerful Python packages with the rapid prototyping capabilities of the
R shiny package, enabling quick development of applications that
incorporate solar energy prediction models.

# Setup

In order to use these libraries, you need Python 3 installed. The
solar\_models.R script will then install the necessary Python modules in
a virtual environment when you source it. If your default Python
interpreter is version 2, you may need to explicitly choose your Python
3 interpretter through reticulate’s “use\_python” function.

Some of the functions also take advantage of an NREL Developer Network
API Key. You can get one of those at
<https://developer.nrel.gov/signup/>. Having one will allow you to
download weather data directly from NREL’s National Solar Resource
Database.

# Examples

## 1\. Run an Energy Estimate

We will use the weather file included in the repo for all site modeling.
This example uses that weather file to estimate the production of a
100MWac / 130MWdc utility scale solar farm with single-axis trackers. A
common industry metric for evaluating renewable power plant performance
is to look at its “Net Capacity Factor” (or NCF.) This is the ratio of
total plant output over the course of a year to the total plant output
theoretically possible (in this case 100MW \* 8760 hours). We can look
at that metric for this facility as well as a diurnal heat map showing
average plant production over the course of a day for each month of the
year.

``` r
# Load in a weather and site-specific data
weather <- read_csv('sample-data/weather.csv') %>%
    mutate(datetime = mdy_hm(datetime)) %>%
    column_to_rownames(var = 'datetime')

utc_offset <- as.integer(-8)
lat <- 37.45
lon <- -122.45
elevation <- 91

# Run default energy estimate and visualize results
energy <- estimate_energy(dc_capacity = 130e6, ac_capacity = 100e6,
                          racking = 'tracker', lat = lat, lon = lon,
                          weather = weather, utc_offset = utc_offset,
                          elevation = elevation)

print(paste0('NCF = ', round(energy$mc$ncf * 100, 2), '%'))
```

    ## [1] ""NCF = 26.29%""

``` r
energy$output %>%
    group_by(month, hour) %>%
    summarise(output = mean(output) / 1e6) %>%
    ggplot(aes(x = hour, y = as.factor(month), fill = output)) +
    geom_tile() +
    scale_fill_gradient(low='navyblue', high=""yellow"") +
    labs(x = 'Hour', y = 'Month', fill = 'Output (MW)')
```

![](README_files/figure-gfm/example_1_plot-1.png)<!-- -->

## 2\. Model PV Degradation by batch running energy estimates

One of the biggest advantages of using a scripted language for an energy
estimate over using a software like PVSyst is the ease with which you
can run multiple iterations. A very common situation for rapid energy
iterations arises when modeling PV module degrdation over time. While
degradation warranties are typically linear, the degradation rate on the
AC output of a facility often isn’t, due to the ratio of a plants DC
Capacity to AC Capacity. To properly model degradation over time, it is
thus necessary to run a different energy estimate for each year. One of
the functions in this library is designed for this exact
purpose.

``` r
# Let's do a ground-mounted, fixed-tilt system this time instead of a tracker
multiyear <- estimate_multiyear_energy(last_year = 30, dc_capacity = 12e6,
                                       ac_capacity = 10e6,
                                       racking = 'ground-mount',
                                       lat = lat, lon = lon,
                                       weather = weather,
                                       utc_offset = utc_offset,
                                       elevation = elevation)

multiyear$output %>%
    group_by(year) %>%
    summarise(aep = sum(output)) %>%
    mutate(delta = aep / lag(aep)) %>%
    ggplot(aes(x = year - 1900, y = delta)) +
    geom_path() +
    labs(x = 'Operation Year', y = 'Percent of Prior Year Production')
```

![](README_files/figure-gfm/example_2-1.png)<!-- -->

## 3\. Customize Default Inputs

While the functions are set up to make an energy estimate as easy as
posible to run, they are completely customizable. All default inputs can
be overwritten by including the value you want to overwrite in the
custom\_inputs parameter list. Here we can calculate the difference that
albedo and tracker spacing (also known as the “ground coverage ratio”)
makes on the energy yield for a bifacial solar plant.

``` r
result_vector <- rep(0, 20)

i <- 1

for (albedo_rate in c(.2, .4)) {
    
    for (coverage in seq(.31, .5, .02)) {
        
        result <- estimate_energy(dc_capacity = 130e6, ac_capacity = 100e6,
                                  racking = 'tracker', lat = lat, lon = lon,
                                  weather = weather, utc_offset = utc_offset,
                                  elevation = elevation,
                                  custom_inputs = list(albedo = albedo_rate,
                                                       gcr = coverage))
        
        result_vector[i] <- result$mc$aep
        
        i <- i + 1
    }
}

data.frame(albedo_0.2 = result_vector[1:10], albedo_0.4 = result_vector[11:20],
           gcr = seq(.31, .5, .02)) %>%
    gather('key', 'value', -gcr) %>%
    ggplot(aes(x = gcr, y = value / 1e9, color = key)) +
    geom_path() +
    labs(x = 'Ground Coverage Ratio', y = 'Annual Output (GWh)')
```

![](README_files/figure-gfm/example_3-1.png)<!-- -->
",1,1,2,0,solar-energy,"[photovoltaics, python, r, solar-energy]",00000
929,weather-station,droidbot2000,N/A,https://github.com/droidbot2000/weather-station,https://api.github.com/repos/droidbot2000/weather-station,Raspberry Pi weather station,"# Solar Powered Raspberry Pi Weather Station

We used a Raspberry Pi to collect data from a SparkFun HIH6130 temperature and relative humidity sensor using I2C, and a PiCamera to take a still photo of conditions in our outdoor discovery centre. The information is then tweeted out by our STEAM account, @lks_steam. The whole thing is powered by a sealed lead acid battery, charged by a solar panel and PWM solar charge controller.

The project needs Twython in order to tweet. Check out https://github.com/ryanmcgrath/twython for how to install.

For the temperature and relative humidity sensor to communicate with the Raspberry Pi, open a terminal window and install:

1. python-smbus
2. i2c-tools

You will also need to install the HIH6130 Python library: https://github.com/dhhagan/python-hih6130 

Future build will include an adafruit anemometer.
",1,1,3,2,solar-energy,"[raspberry-pi, raspberry-pi-camera, solar-energy]",00000
930,SolarSimulation,kilarinikhil,N/A,https://github.com/kilarinikhil/SolarSimulation,https://api.github.com/repos/kilarinikhil/SolarSimulation,This includes tutorials for MATLAB and programming Simulink through MATLAB,"## Contains my internship work at 14w technologies

Automated the process of generation of simulink model of a solar panel network with necessary inputs as parameters
",1,1,1,0,solar-energy,"[matlab, matlab-functions, matlab-script, pv-systems, simulink, solar, solar-energy]",00000
931,sunspec,svrooij,N/A,https://github.com/svrooij/sunspec,https://api.github.com/repos/svrooij/sunspec,Reading data from your solar inverter,"# SunSpec interface

[![Support me on Github][badge_sponsor]][link_sponsor]
[![npm][badge_npm]][link_npm]
[![github issues][badge_issues]][link_issues]
[![Run tests from package.json][badge_build]][link_build]
[![semantic-release][badge_semantic]][link_semantic]

Sunspec is a specification to communicate with your solar power inverter. See [specs](https://www.solaredge.com/sites/default/files/sunspec-implementation-technical-note.pdf).

You can use this library to read the data from your inverter supporting modbus tcp (like SolarEdge).

```JavaScript
const SunspecReader = require('@svrooij/sunspec').SunspecReader;

const reader = new SunspecReader('192.168.x.x', 502);
reader.readInverterInfo() // Reads model info (only needed once)
  .then(() => {
    return reader.readData() // Read other data
  })
  .then(d => {
    console.log(d);
  })
  .catch(err => {
    console.warn(err);
  })
```

## Tested on

|Manufacturer|Model|Tested on|Tested by|
|------------|-----|---------|---------|
|SolarEdge|SE3680|2020-05-30|[@svrooij](https://github.com/svrooij)|

Send a PR, if you tested this on your inverter.

## Developer stuff

This library is written in TypeScript. You'll need to compile it before you can run.

```bash
npm install
npm run compile
```

[badge_sponsor]: https://img.shields.io/badge/Sponsor-on%20Github-red
[badge_issues]: https://img.shields.io/github/issues/svrooij/sunspec
[badge_npm]: https://img.shields.io/npm/v/@svrooij/sunspec
[badge_semantic]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg
[badge_build]: https://github.com/svrooij/sunspec/workflows/Run%20tests%20from%20package.json/badge.svg

[link_build]: https://github.com/svrooij/sunspec/actions
[link_sponsor]: https://github.com/sponsors/svrooij
[link_issues]: https://github.com/svrooij/sunspec/issues
[link_npm]: https://www.npmjs.com/package/@svrooij/sunspec
[link_semantic]: https://github.com/semantic-release/semantic-release",1,1,2,1,solar-energy,"[home-automation, solar-energy, solaredge, sunspec]",00000
932,thesolar.website,Alvaro-c,N/A,https://github.com/Alvaro-c/thesolar.website,https://api.github.com/repos/Alvaro-c/thesolar.website,An autonomous website powered only by solar power,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,1,0,solar-energy,"[django, green-energy, solar-energy, web, web-server]",00000
933,LiquidAirPlant,smyng91,N/A,https://github.com/smyng91/LiquidAirPlant,https://api.github.com/repos/smyng91/LiquidAirPlant,"LiquidAirPlant is a MATLAB code allowing its users to model various liquid air power plant configurations driven by natural gas combustors, parabolic trough solar collectors, and/or ambient air.","# LiquidAirPlant

[![View LiquidAirPlant on File Exchange](https://www.mathworks.com/matlabcentral/images/matlab-file-exchange.svg)](https://www.mathworks.com/matlabcentral/fileexchange/106080-liquidairplant)

## Overview 
LiquidAirPlant is a MATLAB code allowing its users to model various liquid air power plant configurations driven by natural gas combustors, parabolic trough solar collectors, and/or ambient air. 

## Citation
Please cite the following paper if you reference/use the code
> S. Yang, _Solar-driven liquid air power plant modeling, design space exploration, and multi-objective optimization_, Energy, 2022 [https://doi.org/10.1016/j.energy.2022.123324](https://doi.org/10.1016/j.energy.2022.123324)

* **Please note that the PTC rim angle in the paper should be 70 degrees, not 50 degrees. Credit to Kevin Lu at OSU for identifying/reporting the discrepancy.**

* **Feel free to use/improve the code/model as needed and submit pull requests.**

## Dependencies
* [MATLAB 2021a or above](https://www.mathworks.com/products/matlab.html)
* [CoolProp for MATLAB](http://www.coolprop.org/coolprop/wrappers/MATLAB/index.html). You may need to install CoolProp from source for Python 3.8 or above. Read [THIS](http://www.coolprop.org/coolprop/wrappers/Python/index.html) for manual installation.

## Quickstart
After cloning the repository, run
```MATLAB
driver_verification
```
in MATLAB to simulate ambient air-driven, natural gas-driven, and recuperative natural gas-driven liquid air power plants (LAPPs) as described in 

[Antonelli, M., Barsali, S., Desideri, U., Giglioli, R., Paganucci, F. and Pasini, G., 2017. Liquid air energy storage: Potential and challenges of hybrid power plants. Applied energy, 194, pp.522-529.](https://doi.org/10.1016/j.apenergy.2016.11.091)

which were referenced as validation cases for the proposed modeling framework.

You can also run 
```MATLAB
driver
```
to simulate a solar-driven LAPP as described in my [paper](https://doi.org/10.1016/j.energy.2022.123324). 

## Model description
The input file is
```MATLAB
plant_input.m
```
I recommend using structures for clarity/simplicity.

You can find all component models under
```MATLAB
.\components\
```
defined as MATLAB functions. You may also add new component models as functions, e.g., 
```MATLAB
function [out1, out2,...,out] = fcn_componentname( struct1, struct2,...,struct )
```

If you want to model and simulate other plant configurations, you can follow the same system assembly convention as
```MATLAB
model_X.m
```
where X is AA, AANG, RAANG, or AAS. 
",1,1,2,0,solar-energy,"[engineering, liquid-air, solar-energy, thermal]",00000
934,esphome-sunpower,kpfleming,N/A,https://github.com/kpfleming/esphome-sunpower,https://api.github.com/repos/kpfleming/esphome-sunpower,A set of experimental ESPHome components for gathering data from SunPower PV Supervisor devices.,"# esphome-sunpower

<a href=""https://opensource.org""><img height=""150"" align=""left"" src=""https://opensource.org/files/OSIApprovedCropped.png"" alt=""Open Source Initiative Approved License logo""></a>
[![License - GNU GPL v3.0+](https://img.shields.io/badge/License-GNU%20GPL%203.0%2b-9400d3.svg)](https://spdx.org/licenses/GPL-3.0-or-later.html)

This repo contains a series of experimental ESPHome components which
gather data from SunPower PV Supervisor (PVS) devices.

Open Source software: [GNU General Public License v3.0 or later](https://spdx.org/licenses/GPL-3.0-or-later.html)

## &nbsp;

## Comparison with other integrations

The most commonly used other integration is
[hass-sunpower](https://github.com/krbaker/hass-sunpower), so this
comparison focuses on the differences between it and esphome-sunpower.

### Advantages

#### Synthesized 'from grid' and 'to grid' sensors

hass-sunpower reports the 'kWh from Grid' and 'kWh to Grid' sensors
from the PVS, when they are available. Unfortunately they are not
always available, and so to improve consistency esphome-sunpower
synthesizes its own sensors. Users can choose to use them or not, as
their needs dictate. In addition, the PVS only provides *energy*
sensors of this type, but esphome-sunpower also provides *power*
sensors.

#### Explicit control over sensor visibility and names

ESPHome configurations require explicit enablement of every sensor to
be reported to HA (opt-in), which is a different design from Home
Assistant integrations which typically don't offer such controls. Home
Assistant itself provides the ability to 'hide' and even 'disable'
sensors being reported by an integration, but this does not remove
them from the overall system configuration.

Home Assistant also allows users to override sensor names, but these
overrides are lost if the integration is ever deleted from the Home
Assistant configuration and re-added. ESPHome's usage of a separate
configuration system means that the user's defined sensor names will
always be used, even if the ESPHome device is deleted from the Home
Assistant configuration and re-added (or added to another Home
Assistant instance).

#### Support for aggregating panels into arrays

Some SunPower customers have panels in arrays (strings), on separate
roof surfaces and oriented in different directions. esphome-sunpower
provides the ability to aggregate current, power, and energy sensors
from the panels in each array and present these to HA as 'array'
sensors.

#### Ability to manipulate sensor data before it is delivered to Home Assistant

While it is unlikely to be needed frequently, some users may wish to
manipulate PVS sensor data before displaying it in Home Assistant
dashboards. Using hass-sunpower, those modifications must be done by
creating `template sensors` in Home Assistant, and then hiding the
original sensor. With esphome-sunpower, various types of data
filtering and manipulation can be performed directly in the ESPHome
configuration, with only the resulting data delivered to Home
Assistant (and no 'extra' sensors).

#### Reduction of startup time and workload in Home Assistant

Because the PVS responds to API queries so slowly (see the [PVS Data
Collection](#pvs-data-collection) section below), users of
hass-sunpower are warned during Home Assistant startup that the
'integration is taking too long to startup', even though there is
nothing wrong. This also results in delays for data being delivered to
dashboards. Using esphome-sunpower, the data collection is happening
outside of Home Assistant, and is immediately available the moment
that Home Assistant connects to the ESPHome device. Even with more
than 100 sensors in the esphome-sunpower configuration, delivery of
the most current data for those sensors to Home Assistant happens
almost instantly during startup.

#### Reduction of Home Assistant 'Recorder' database growth

Because the esphome-sunpower user controls the number and type of
sensors to be reported to Home Assistant, they have complete control
over the growth of the Recorder database. Hiding sensors in Home
Assistant doesn't stop them from being stored in the database, so
hass-sunpowers users are often storing much more data than they
actually need.

#### Direct publication of data to InfluxDB

Some PVS users store their long-term solar data in InfluxDB; using
hass-sunpower means that this data must go into Home Assistant before
being pushed to InfluxDB. esphome-sunpower users can make use of
InfluxDB components for ESPHome itself, ensuring that the data always
flows to InfluxDB without needing Home Assistant's help.

### Disadvantages

#### Lack of 'device' support

ESPHome does not currently support the Home Assistant Device Registry
in a way which allows components to associate entities (sensors, etc.)
with multiple devices. As a result all of the sensors enabled in an
esphome-sunpower configuration will appear under a single device in
Home Assistant. There is a proposal to enhance ESPHome to provide
support for this, though, see the [Roadmap](#roadmap) section below.

#### Requires additional hardware

Until ESPHome supports multiple network connections in a single device
(allowing the ESP32 device to be installed in the PVS cabinet, see the
[Roadmap](#roadmap) section below), esphome-sunpower users need *both*
a device in the PVS cabinet to provide connectivity to the PVS `LAN`
port *and* an ESP32 device to collect and process the data.

## Requirements

* One or more SunPower PVS 6 (may also work with PVS 5).
* An ESP32-based device; note that this has only been tested with the
  original ESP32 (dual-core Tensilica 240MHz CPU, 520KB SRAM) with at
  least 4MB of flash memory attached. The other ESP32 variants are
  likely to be usable, depending on the complexity of the PVS networks
  being monitored and the number of individual sensors enabled in the
  configuration. The device should be dedicated to PVS
  monitoring. Since there are no GPIOs used, any ESP32 board will
  work.
* Network connectivity between the ESP32, the PVS, and Home Assistant,
  on a *single* network connection; if dual network connectivity
  becomes available in a future ESPHome release, this requirement
  would be eliminated and the ESP32 device could be installed in the
  PVS cabinet in place of any other device used for the _LAN_ network
  connection. If you don't already have connectivity to the PVS, you
  should review the [long
  topic](https://community.home-assistant.io/t/options-for-sunpower-solar-integration/289621)
  on the Home Assistant Discourse forum to learn about your options.

## PVS Data Collection

Throughout the examples in this documentation, you will see a `<PVS>`
placeholder; in your actual configuration you will need to replace
this with the IP address you've made available to reach the PVS (or
the DNS name, if you've setup DNS for it and your ESP32 is able to use
DNS.)

The PVS responds to the data collection API request quite slowly; in a
configuration with 37 panels, the response takes between 9 and 10
seconds in most cases. As a result, the example configurations include
an override for the ESP-IDF 'watchdog timer' to ensure that the ESP32
won't be restarted while waiting for the response. This is a rather
inelegant workaround, but it is necessary until such time as ESPHome
can issue HTTP requests and wait for responses in an asynchronous
manner. If your PVS takes longer than 10 seconds to respond, you may
need to increase the watchdog timeout correspondingly (be sure to
leave a few seconds buffer in case there are any network traffic
problems which might increase the response time).

You will need to determine two buffer sizes to be used in the ESPHome
configuration:

* `http_request->rx_buffer_size`: this needs to be large enough to
  hold the entire response from the PVS (see below).

* `sunpower_solar_pvs->buffer_size->data`: this needs to be large
  enough to hold the portion of the JSON data from the PVS that is
  used to populate the sensors. In a configuration with _all_ sensors
  enabled it needs to be about 25% of the `rx_buffer_size`, but if
  fewer sensors are enabled it can be reduced.

To determine the buffer sizes required for your configuration and
confirm that you have PVS connectivity, you can use `curl`:

```shell
$ curl -o pvs-data.json http://<PVS>/cgi-bin/dl_cgi?Command=DeviceList
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 31195  100 31195    0     0   3385      0  0:00:09  0:00:09 --:--:--  7789
```

The resulting `pvs-data.json` file should look similar to the one in
the [examples directory](examples). You will need this file in order
to build your configuration, since it contains the serial numbers of
all of the SunPower devices.

In the output above you can see that the transfer took 9 seconds, and
the resulting JSON document was 31,195 bytes long. For that system,
`rx_buffer_size` should be set to 34000, and `buffer_size->data`
should be set to 10000 if all sensors are enabled.

Once the system is running you can monitor the logs (with
`logger->level` set to `debug`) to see how much of the JSON data buffer
is being used; if a large portion is unused, reconfigure for a lower
size, but be prepared to increase it again if you enable more
sensors. If the JSON data buffer is not large enough, an error will
be emitted in the logs and no sensor data will be published.

## Configuration

The ESPHome 'logger' defaults to `debug` level; while this can be
useful for troubleshooting ESPHome configurations, it also means that
sensor data publication can be slowed down substantially. If you have
the level set to `debug`, and you enable more than 7 or 8 sensors in
total in the esphome-sunpower component, then you will see a warning
in the ESPHome log every time esphome-sunpower publishes data. The
warning will indicate that component `sunpower_solar_pvs` too *too
much time* to do its work, but if as suggested previously you've
dedicated an ESP32 board for this task, then you can safely ignore the
warning as no other important ESPHome activities will be missed.

You will see the same type of warning for the `http_request`
component, since it will block ESPHome activities for many seconds
while it waits for a response from the PVS.

This component relies on a not-yet-merged version of the ESPHome
`http_request` component; that version is compatible with the ESP-IDF
framework, and also improves the way that HTTP responses are made
available to automations. Those improvements allow esphome-sunpower to
avoid copying the entire response while parsing it, which would
dramatically increase overall RAM requirements.

### Minimal

This section is a walkthrough of [minimal.yml](examples/minimal.yml)
from the `examples` directory. It is the most basic configuration
needed to support the Home Assistant 'Energy Dashboard' (which
requires three sensors).

```yaml
esphome:
  name: pvs-minimal
  friendly_name: Minimal PVS Monitor

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: ""15""

wifi:
  networks:
    - ssid: example-network
      password: network-password

api:
```

This section fulfills basic ESPHome requirements: node information,
board selection, and WiFi/API connectivity. The only relevant item
here is `CONFIG_ESP_TASK_WDT_TIMEOUT_S`, which is necessary due to the
issues described in the [PVS Data Collection](pvs-data-collection)
section.

```yaml
external_components:
  - source: github://pr#3256
    components: [ http_request ]
  - source: github://kpfleming/esphome-sunpower@v2
```

This configuration requires two external components; esphome-sunpower,
and the modified version of `http_request` as noted in the
[Configuration](#configuration) section.

```yaml
sunpower_solar:
  serial: PVS1
  consumption_meter:
    serial: CM1
  production_meter:
    serial: PM1
```

This section configures esphome-sunpower to accept data from the
PVS, including its consumption meter and production meter. The serial
numbers of all three components must be specified, and they can be
obtained from the JSON data file gathered while following the steps in
[PVS Data Collection](pvs-data-collection).

Since this configuration only publishes data for three sensors, the
default values for the esphome-sunpower buffer sizes are sufficient,
and they are not included in the example configuration.

```yaml
sensor:
  - platform: sunpower_solar

    energy_from_grid: Energy From Grid
    energy_to_grid: Energy To Grid

    consumption_meter:
      lifetime_energy:
        name: Energy Consumed
        internal: true

    production_meter:
      lifetime_energy: Energy Produced
```

This section configures the three sensors required by the Energy Dashboard:

* Energy From Grid

* Energy To Grid

* Energy Produced

In addition an `Energy Consumed` sensor is configured but marked as
`internal` so it will not be published to Home Assistant. It is
required for the `Energy From Grid` and `Energy To Grid` sensor
calculations.

```yaml
http_request:
  useragent: esphome/pvs
  rx_buffer_size: 35000
```

This section configures the `http_request` component; see the [PVS
Data Collection](pvs-data-collection) section for details about
`rx_buffer_size`.

```yaml
interval:
  interval: 1min
  then:
    - delay: 15s
    - http_request.get:
        url: http://<PVS>/cgi-bin/dl_cgi?Command=DeviceList
        capture_response: true
        on_response:
          then:
            - delay: 3s
            - sunpower_solar.process: response.data
```

This final section configures an `interval` component so that ESPHome
can periodically pull data from the PVS and push it to
esphome-sunpower.

The trigger is used to poll the PVS every minute, capture the
response, wait three seconds (for other activities in ESPHome, which
were blocked during the HTTP request, to be processed), and then
supply the response to esphome-sunpower for parsing and sensor
publication. The initial 15 second delay in the trigger is necessary
because the `interval` component will immediately trigger during
ESPHome boot, and the blocking HTTP request will cause initialization
of other parts of the ESPHome system to fail.

### Full Featured

See [FULL_CONFIGURATION](FULL_CONFIGURATION.md).

## Roadmap

### Device Support

The author of these components also plans to work on 'connected
device' support for ESPHome, which would resolve one of the major
differences between this integration and hass-sunpower. If you are
interested, you can follow the [feature-requests
issue](https://github.com/esphome/feature-requests/issues/1335).

### Dual Network Support

There is an open [feature-requests
issue](https://github.com/esphome/feature-requests/issues/2102) on
this topic; the author of these components may try to tackle that one
too at some point in the near future!

## Issues, Feature Requests, Discussions

If you need to report an issue, or suggest a new feature, please do so
in the
['Issues'](https://github.com/kpfleming/esphome-sunpower/issues) area
of this repository.

If you'd like to discuss usage of these components, or ask for help
with them (but not with ESPHome itself or PVS connectivity), please do
so in the
['Discussions'](https://github.com/kpfleming/esphome-sunpower/discussions)
area of this repository.

## Chat

If you'd like to chat with the esphome-sunpower community, join us on
[Matrix](https://matrix.to/#/#esphome-sunpower:km6g.us)!

## Credits

This project was inspired by the excellent
[hass-sunpower](https://github.com/krbaker/hass-sunpower) project by
[@krbaker](https://github.com/krbaker).
",1,1,1,0,solar-energy,"[esphome, esphome-component, homeassistant, solar-energy, sunpower]",00000
935,pysenechome,mailq,N/A,https://github.com/mailq/pysenechome,https://api.github.com/repos/mailq/pysenechome,Async library for interfacing with SENEC.home solar and battery solution,"pysenechome library
===================

SENEC Webconnect library for Python 3. The library was originally created
to integrate a SENEC.Home Hybrid battery with HomeAssistant

See <https://senec.com> for more information about the SENEC home
battery storage solutions.

Currently tested on SENEC.Home V3 hybrid, but should work for the whole product line.
If you can access your SENEC via your browser, this might work for you.

Example usage
=============

See [example.py](./example.py) for a basic usage and tests

HomeAssistant
=============

The HomeAssistant SENEC sensor documentation can be found
[here](https://www.home-assistant.io/components/senec)

Daily or monthly usage is not available from the API.
It is possible to get around this by using an additional
[utility meter](https://www.home-assistant.io/components/utility_meter)
",1,1,2,0,solar-energy,"[battery-monitor, grid-system, home-automation, pyhton3, solar-energy]",00000
936,solar-saved-money,riquellopes,N/A,https://github.com/riquellopes/solar-saved-money,https://api.github.com/repos/riquellopes/solar-saved-money,Application to monitoring how much money I saved at moment with my photovoltaic system,"![](https://github.com/riquellopes/solar-saved-money/workflows/SolarSavedMoney/badge.svg)
[![Coverage Status](https://coveralls.io/repos/github/riquellopes/solar-saved-money/badge.svg?branch=master)](https://coveralls.io/github/riquellopes/solar-saved-money?branch=master)

Saved money
===========

Ref:
 * https://community.home-assistant.io/t/help-reading-json-from-auroravision-api-solar-inverter-data/135916",1,1,2,1,solar-energy,"[python, saved-money, solar-energy]",00000
937,solar-panel-protection-system,HyrumDickinson,N/A,https://github.com/HyrumDickinson/solar-panel-protection-system,https://api.github.com/repos/HyrumDickinson/solar-panel-protection-system,Software portion of tool that allows solar panels to be monitored and controlled by a remote operator.,"# Solar Panel Protection System

## Project overview
This code represents the software portion of an ongoing effort to build a tool that monitors solar energy systems and keeps panels from overheating.

This project is funded by the University of Illinois Department of Electrical & Computer Engineering and is based out of the Center for Electric Machinery & Electromechanics. The project lies under the direction of Arijit Banerjee, Assistant Professor in ECE. The software portion of the project is undergoing construction by undergraduate student workers Hyrum Dickinson and Benjamin Olaivar, supervised by Kevin Colravy, Research Engineer at CEME. Only the software portion of the solar panel protection system project is hosted on this repo.

The original solar panel protection system was created by then-undergraduate students Dillon Vadgama, Douglas Lee, and Sachin Reddy for their fall 2019 senior design project. Dubbed ""Smart Interface for ECEB Research Solar Panels,"" the project won the Texas Instruments Best Project Award. Now, researchers from the University of Illinois are attempting to improve on their prototype to create a robust, scalable tool that can monitor entire solar energy systems and reliably keep individual panels from overheating.

This branch is primarily focused on the development of the onboard arduino code. This code will encompass everything from ethernet communication to sensor data reading. The majority of work done in this branch will be done under the 'arduino_data' directory, the 'test' files. Files in this directory are organized using platformio, which allows for convenient access/storage of libraries, test code, and other files. 

## Repository setup
### `main`
The latest stable, deployable version of the code is stored in the `main` branch.
### `python-2-version` and `python-3-version`
Until code is fully ported to Python 3, these branches are the `main` branches of the code in their respective language.
### `original`
It is important to note that the original code for this project is not our own. It was written by Dillon Vadgama, Douglas Lee, and Sachin Reddy as part of a senior design project. The exact original code, including the original README, is stored in this branch. 

## System tools  
### Software  
Microprocessor code - Arduino Language  
Original GUI - Python 2 & Tkinter  
New GUI - Processing 3  
README & WRITEME files - Markdown  
### Hardware (not included in repo)  
Arduino Uno with Wifi  
Custom PCB Arduino Shield  

## Old Python GUI
### Dependencies
- matplotlib  
- tkinter (Python 3) or Tkinter (Python 2)  
- sqlite3  
- pillow  
- datetime  
The original code was written to for PIL. PIL is now unsupported - its own website recommends against its use. Pillow is a maintained backwords-compatible fork of PIL.
### Run
run Main.py in your preferred Python environment
### Building
source venv/bin/activate  
python2 Setup.py py2app -A  
",1,1,2,0,solar-energy,"[arduino, processing3, python, solar-energy, tkinter, uiuc-ece]",00000
938,axpertbot-lite,david-ueman,N/A,https://github.com/david-ueman/axpertbot-lite,https://api.github.com/repos/david-ueman/axpertbot-lite,A set of programs to read and post the general status parameters of an Axpert Inverter-Charger through USB ,"# axpertbot-lite
A set of programs to read and post the general status parameters of an Axpert Inverter-Charger through USB

# About

Axpertbot-lite is a set of programs designed to run as cron jobs in a raspberry or any other computer to **query, read, and post the general status parameters and values of an Axpert Inverter-charger** (such as battery voltage,  output power) through a USB connection, so that this information can be available without the need to be insitu.

These set of programs, and particularly the connection method to the inverter through the USB, is based and inspired on the project [axpertbot](https://github.com/ciberflaite/axpertbot) created by [ciberflaite](https://github.com/ciberflaite).

# Installation

## Parts of the application

This application is divided in two parts:

**local** : The scripts that should be installed in the rapsberry connected to the inverter (or inverters) by USB. This raspberry should have internet connection so that the information can be posted to a server.

**serverside** : The scripts that should be hosted in the cloud and can receive the information posted by the raspberry.

## Prerequisites

* A linux environment with root privileges to store and run the _local part_ of the application
* A web server reachable by the raspberry with capabilities to run PHP scripts
* A database server to store the data sent by the raspberry

## Requirements in the Raspberry connected to the inverter(s)

* python3
* python3-usb
* python3-crc16

* php
* php-curl

# Requirements in the Server side

* php
* MySQL Server or alike

## Installation Steps

### serverside (cloud)

1. Put the scripts corresponding to the serverside in the webserver and make them reachables.

2. Create tables in the SQL Server running the script create_table.sql

3. Update the line in which the link to the database is created so that it corresponds to your database location, user and password.

    ```$link = mysqli_connect(""url.mysql.db"", ""database-name"", ""database-password"",```

### localside (Raspberry)

1. Get a running copy of a Linux environment. All development and tests of this application were made in Raspbian, so the following instructions are intented for Raspbian installations.

2. Download or clone the project into your linux environment.

3. Install PHP

    ```sudo apt-get install php```

4. Install needed PHP libraries

    ```sudo apt-get install php-curl```

3. Install Python3

    ```sudo apt-get install python3```

4. Install Pip, the recommended tool for installing Python packages

    ```sudo apt-get install python3-pip```

5. Install needed Python3 libraries with pip. **Notice** that you have to install the libraries using sudo, since the axpertbot-lite needs to run with root privileges to access the USB

    ```sudo pip3 install crc16```
    ```sudo pip3 install pyusb```

6. Go to the **local** folder and check that you can communicate with the inverter-charger by running the inverter_data_read.py specifying the serial number of the inverter-chager that you want to query. Replace the `92931712101193` with the serial number of your inverter.

    ```sudo python3 inverter_data_read.py 92931712101193```

    you should get a string similar to:

    ```92931712101193 00.0 230.0 49.9 0390 0343 007 398 49.60 000 074 0036 0000 058.6 49.36 00007 00110000 00 00 00000 010Aç```

7. Run the script that tries to post the information to the server

    ```sudo php inverter_data_send.php 92931712101193```

8. Check that the data was stored in the database by getting the information through the script that reads the data from the database

    ```wget -O /dev/stdout http://your-server-name/show_last_reading.php?network_id=92931712101193```


",1,1,2,0,solar-energy,"[axpert, device-monitor, inverter-control, pyusb, remote-sensing, solar-energy]",00000
939,mlops-for-ai-course,kingabzpro,N/A,https://github.com/kingabzpro/mlops-for-ai-course,https://api.github.com/repos/kingabzpro/mlops-for-ai-course,"To learn about the key components of MLOps, APIs and API designs. ","# MLOps for AI Engineers and Data Scientists
**To learn about the key components of MLOps, APIs and cloud deployment.** 

- A glance at ML Life Cycle

	- Challenges facing MLOps
- Introduction to MLOps


	- What is MLOps?
	- Why the need for MLOps?
	- Where & when do we adopt MLOps
	- Components of MLOps
	- Introduction to APIs
	- Challenges and the need for APIs in MLOps
- Containers for  ML Deployment


	- Introduction to Docker
	- Introduction to kubernetes
	- Deploy machine learning models using docker
	- Deployment of containers on kubernetes(EKS, GKE, etc)
	- An introduction to automating ML deployment workflow
- Leveraging Cloud Computing for MLOps
	- Deploying machine learning model through AWS
	- Deploying deep learning model though google cloud 
	- Train and deploy ML model through Azure Auto ML
	- Deploy model via Fastapi, Streamlit, Heroku
- Monitoring and Automation
	- Overview of Monitoring
	- System infrastructure monitoring
	- Data pipeline monitoring
	- Monitor and evaluate model performance
	- Maintenance guide for model updating
- An introduction to CI/CD for automated model deployment

Learn more about course [here](https://omdena.com/course/mlops-for-ai-engineers-and-data-scientists/).",1,1,1,0,solar-energy,"[api, azure, machinelearning-python, mlops, mlpipelines, solar-energy]",00000
940,SolarTools,NBrown140,N/A,https://github.com/NBrown140/SolarTools,https://api.github.com/repos/NBrown140/SolarTools,An ArcGIS toolbox for lidar-based solar rooftop modelling,"# SolarTools
An ArcGIS toolbox for lidar-based solar rooftop modelling

Written in Python.
Requires the license for ArcGIS Spatial Analyst toolbox.

Tools:
- Build Raster from Lidar Point Cloud
- Extract Building Footprints from Lidar Point Cloud
- Calibrate Solar Potential
",1,1,2,0,solar-energy,"[arcgis, arcgis-toolbox, arcpy, lidar, lidar-point-cloud, solar, solar-energy]",00000
941,PPC_Sim,JoshMcguigan,N/A,https://github.com/JoshMcguigan/PPC_Sim,https://api.github.com/repos/JoshMcguigan/PPC_Sim,A solar power plant controller simulation and testing tool,"# PPC_Sim

![PPC Sim - Simulation Settings](https://cloud.githubusercontent.com/assets/22216761/19877705/c3c2748e-9f9e-11e6-8ccc-38e148be91cd.png)

![PPC Sim - Irradiance Settings](https://cloud.githubusercontent.com/assets/22216761/19877703/c3bfab3c-9f9e-11e6-9aa0-7b5a3007918e.png)

![PPC Sim - Set Point Settings](https://cloud.githubusercontent.com/assets/22216761/19877704/c3c21ca0-9f9e-11e6-9836-8bcbb4010772.png)

![PPC Sim - Controller Settings](https://cloud.githubusercontent.com/assets/22216761/19877702/c3a9c7e0-9f9e-11e6-94e3-2c87b5314fa1.png)
",1,1,4,0,solar-energy,"[renewable-energy, simulation, solar-energy]",00000
942,solar_harvester_bq25505,rykovv,N/A,https://github.com/rykovv/solar_harvester_bq25505,https://api.github.com/repos/rykovv/solar_harvester_bq25505,"Solar harvesting board PCB EAGLE design based on TI BQ25505 PMIC with MPPT, MAX17040 fuel gauge and INA226 PV performance measurement.","# Solar Harvester v1.0_m1

Solar harvesting power supply board based on TI BQ25505 PMIC with MPPT functionality configured for tracking 80% of the PV input. The board provides voltage/current measurement IC (INA226) intended for measurement of the PV input and a fuel gauge system based on MAX17040 IC to check and monitor battery state.

## Table of Contents ##

[[_TOC_]]

## Rev1 manufactured and assembled

![rev1_man_assem.png](/img/rev1_man_assem.jpg)

## Rev2 simulated

![rev2_top.png](/img/rev2_top.png)

![rev2_bottom.png](/img/rev2_bottom.png)

## Detailed Overview

The BQ25505 was created for special needs of ultra low power applications. Therefore, it is designed for extract uW and mW of power generated from multiple energy harvesting sources. The board configuration suits only for solar power applications.

Once a PV pannel and Lipo battery are connected to the board and load capacitors are charged (>=1.8V) the main boost charger starts working extracting energy from the PV pannel. The ouput power is driven based on VBAT_OK threshold (3.3V) which is set based on R~ok1-3~ resistors. If the attached battery voltage is less then VBAT_OK, than only charging circuitry will work. This way the battery is saved from being damaged by undervoltage condition. Once the battery voltage rises up to VBAT_OK_HYST (3.7V), the load will be connected to the battery again. The BQ25505 provides overvoltage protection functionality set based on R~ov1,2~ resistors. That is, when the battery voltage reaches VBAT_OV voltage (4.2V) the main boost charger cease charging and only monitors voltage levels. Summing up, the BQ25505 will charge the storage element always unless its voltage is less than VBAT_OV. Refer to the Battery over-voltage, under-voltage and operating range section for examining concrete values calculation.

There is a possibility for supercap input energy storage instead of the Lipo battery. The maximum voltage for the supercap must be 5V. This modification implies changes in VBAT_OK, VBAT_OK_HYST, and VBAT_OV threasholds; and R~ok1-3~ resistors must be reselected accordingly. Refer to the BQ25505 datasheet to see corresponding formulas and equations (Section 8.2.1.2 Detailed Design Procedure).

Adjust CSTOR load capacitors depending on energy storage voltage. Remove C11 if VBAT_SEC < 3.0V.

## Specifications

Input:
 - PV panel 5V, 150mA
 - Lipo 3.7V battery

Output:
 - 3.3V, 1.2A
 - 5V, 1.8A

Maximum charging curerrent is 100mA.

## ICs
 - BQ25505
 - TPS613221A (3.3V)
 - TPS613222A (5V)
 - INA226
 - MAX17040
 - DMP3085LSD (dual pmos)

## Data Out - I^2^C
In order to extract information from the voltage/current measurement IC and the fuel gauge the proper I^2^C connection is needed. External pin headers fulfill this purpose. Note the internal I^2^C bus is **not pulled up**. Make sure the I^2^C bus from your main MCU board pulls up the bus.

## Battery over-voltage, under-voltage and operating range

### Over-voltage

Battery over-voltage protection is determined by R1 and R2 resistors according to 7.3.3

**VBAT_OV** = 3/2 * VBIAS * (1 + R1/R2)

Since, VBIAS is internally set to 1.21V, we have

VBAT_OV = 3/2 * 1.21V * (1 + 7.32M/5.62M) = **4.179V ~= 4.2V**

### Under-voltage

Battery under-voltage is internally set to 1.95V (see 7.3.2), hence being to suitable for the application, the push-pull multiplexer drivers (see 7.3.5) were used for the purpose. According to VBAT_OK and VBAT_OK_HYST values (see Operating range section).

### Operating range

The battery operating range is established by R3, R4, and R5 resistors which determine VBAT_OK and VBAT_OK_HYST values. According to the selected resistors values,

**VBAT_OK** = VBIAS * (1 + R4/R5) = 1.21V * (1 + 7.5M/4.3M) = **3.32V**

and

**VBAT_OK_HYST** = VBIAS * (1 + [R4 + R3]/R5) = 1.21V * (1 + [7.5M + 1.2M]/4.3M) = **3.658V**

## Issues

Despite all values of resistors R~ok1-3~ and R~ov1,2~ were correctly calculated (see 3.7V 860mAh Li-po battery and Battery over-voltage, under-voltage and operating range section) BQ25505 does not behave as expected and presents serious instabilities incompatible with deployment in real applications. When the battery is fully charged and attached, on one hand, and there is enough PV power input to start the circuitry, on the other hand, the BQ25505 starts working as expected until the battery is discharged (voltage below VBAT_OK). When the battery is half-discharged (voltage about VBAT_OK_HYST), and independently of the PV power input, VSTOR is unable to give stable output. What happens is when the 3.3V & 5V voltage regulators reach predefined output levels and the load starts to consume power (especially when the power is greater than 200mA, perhaps max transitory current in this state is much lower), the BQ25505 switches constantly on and off #VBAT_SEC_ON for a couple of milliseconds. It makes impossible to provide enough power for stable MCU launching.

A potential solution for this drawback is to substitute the current Under-voltage protection scheme with a battery management IC that would be in charge of over- and under-voltage protection.

## Revisions

### Rev 0
### Rev 1
 - Components with 0603 metric footprint were substituted by 0603 imperial
### Rev 2
 - Board size increased to 30x55
 - Changed C3 footprint to 3528, C4 and C11 to 1608
 - Changed C9 and C10 to 100u 3528
 - Rewired PCB
 - Components font size increased to 32mil
",1,1,1,2,solar-energy,"[bq25505, eagle, energy-harvesting, pcb, solar-energy]",00000
943,thesolar.website,Alvaro-c,N/A,https://github.com/Alvaro-c/thesolar.website,https://api.github.com/repos/Alvaro-c/thesolar.website,An autonomous website powered only by solar power,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,1,0,solar-energy,"[django, green-energy, solar-energy, web, web-server]",00000
944,LiquidAirPlant,smyng91,N/A,https://github.com/smyng91/LiquidAirPlant,https://api.github.com/repos/smyng91/LiquidAirPlant,"LiquidAirPlant is a MATLAB code allowing its users to model various liquid air power plant configurations driven by natural gas combustors, parabolic trough solar collectors, and/or ambient air.","# LiquidAirPlant

[![View LiquidAirPlant on File Exchange](https://www.mathworks.com/matlabcentral/images/matlab-file-exchange.svg)](https://www.mathworks.com/matlabcentral/fileexchange/106080-liquidairplant)

## Overview 
LiquidAirPlant is a MATLAB code allowing its users to model various liquid air power plant configurations driven by natural gas combustors, parabolic trough solar collectors, and/or ambient air. 

## Citation
Please cite the following paper if you reference/use the code
> S. Yang, _Solar-driven liquid air power plant modeling, design space exploration, and multi-objective optimization_, Energy, 2022 [https://doi.org/10.1016/j.energy.2022.123324](https://doi.org/10.1016/j.energy.2022.123324)

* **Please note that the PTC rim angle in the paper should be 70 degrees, not 50 degrees. Credit to Kevin Lu at OSU for identifying/reporting the discrepancy.**

* **Feel free to use/improve the code/model as needed and submit pull requests.**

## Dependencies
* [MATLAB 2021a or above](https://www.mathworks.com/products/matlab.html)
* [CoolProp for MATLAB](http://www.coolprop.org/coolprop/wrappers/MATLAB/index.html). You may need to install CoolProp from source for Python 3.8 or above. Read [THIS](http://www.coolprop.org/coolprop/wrappers/Python/index.html) for manual installation.

## Quickstart
After cloning the repository, run
```MATLAB
driver_verification
```
in MATLAB to simulate ambient air-driven, natural gas-driven, and recuperative natural gas-driven liquid air power plants (LAPPs) as described in 

[Antonelli, M., Barsali, S., Desideri, U., Giglioli, R., Paganucci, F. and Pasini, G., 2017. Liquid air energy storage: Potential and challenges of hybrid power plants. Applied energy, 194, pp.522-529.](https://doi.org/10.1016/j.apenergy.2016.11.091)

which were referenced as validation cases for the proposed modeling framework.

You can also run 
```MATLAB
driver
```
to simulate a solar-driven LAPP as described in my [paper](https://doi.org/10.1016/j.energy.2022.123324). 

## Model description
The input file is
```MATLAB
plant_input.m
```
I recommend using structures for clarity/simplicity.

You can find all component models under
```MATLAB
.\components\
```
defined as MATLAB functions. You may also add new component models as functions, e.g., 
```MATLAB
function [out1, out2,...,out] = fcn_componentname( struct1, struct2,...,struct )
```

If you want to model and simulate other plant configurations, you can follow the same system assembly convention as
```MATLAB
model_X.m
```
where X is AA, AANG, RAANG, or AAS. 
",1,1,2,0,solar-energy,"[engineering, liquid-air, solar-energy, thermal]",00000
945,esphome-sunpower,kpfleming,N/A,https://github.com/kpfleming/esphome-sunpower,https://api.github.com/repos/kpfleming/esphome-sunpower,A set of experimental ESPHome components for gathering data from SunPower PV Supervisor devices.,"# esphome-sunpower

<a href=""https://opensource.org""><img height=""150"" align=""left"" src=""https://opensource.org/files/OSIApprovedCropped.png"" alt=""Open Source Initiative Approved License logo""></a>
[![License - GNU GPL v3.0+](https://img.shields.io/badge/License-GNU%20GPL%203.0%2b-9400d3.svg)](https://spdx.org/licenses/GPL-3.0-or-later.html)

This repo contains a series of experimental ESPHome components which
gather data from SunPower PV Supervisor (PVS) devices.

Open Source software: [GNU General Public License v3.0 or later](https://spdx.org/licenses/GPL-3.0-or-later.html)

## &nbsp;

## Comparison with other integrations

The most commonly used other integration is
[hass-sunpower](https://github.com/krbaker/hass-sunpower), so this
comparison focuses on the differences between it and esphome-sunpower.

### Advantages

#### Synthesized 'from grid' and 'to grid' sensors

hass-sunpower reports the 'kWh from Grid' and 'kWh to Grid' sensors
from the PVS, when they are available. Unfortunately they are not
always available, and so to improve consistency esphome-sunpower
synthesizes its own sensors. Users can choose to use them or not, as
their needs dictate. In addition, the PVS only provides *energy*
sensors of this type, but esphome-sunpower also provides *power*
sensors.

#### Explicit control over sensor visibility and names

ESPHome configurations require explicit enablement of every sensor to
be reported to HA (opt-in), which is a different design from Home
Assistant integrations which typically don't offer such controls. Home
Assistant itself provides the ability to 'hide' and even 'disable'
sensors being reported by an integration, but this does not remove
them from the overall system configuration.

Home Assistant also allows users to override sensor names, but these
overrides are lost if the integration is ever deleted from the Home
Assistant configuration and re-added. ESPHome's usage of a separate
configuration system means that the user's defined sensor names will
always be used, even if the ESPHome device is deleted from the Home
Assistant configuration and re-added (or added to another Home
Assistant instance).

#### Support for aggregating panels into arrays

Some SunPower customers have panels in arrays (strings), on separate
roof surfaces and oriented in different directions. esphome-sunpower
provides the ability to aggregate current, power, and energy sensors
from the panels in each array and present these to HA as 'array'
sensors.

#### Ability to manipulate sensor data before it is delivered to Home Assistant

While it is unlikely to be needed frequently, some users may wish to
manipulate PVS sensor data before displaying it in Home Assistant
dashboards. Using hass-sunpower, those modifications must be done by
creating `template sensors` in Home Assistant, and then hiding the
original sensor. With esphome-sunpower, various types of data
filtering and manipulation can be performed directly in the ESPHome
configuration, with only the resulting data delivered to Home
Assistant (and no 'extra' sensors).

#### Reduction of startup time and workload in Home Assistant

Because the PVS responds to API queries so slowly (see the [PVS Data
Collection](#pvs-data-collection) section below), users of
hass-sunpower are warned during Home Assistant startup that the
'integration is taking too long to startup', even though there is
nothing wrong. This also results in delays for data being delivered to
dashboards. Using esphome-sunpower, the data collection is happening
outside of Home Assistant, and is immediately available the moment
that Home Assistant connects to the ESPHome device. Even with more
than 100 sensors in the esphome-sunpower configuration, delivery of
the most current data for those sensors to Home Assistant happens
almost instantly during startup.

#### Reduction of Home Assistant 'Recorder' database growth

Because the esphome-sunpower user controls the number and type of
sensors to be reported to Home Assistant, they have complete control
over the growth of the Recorder database. Hiding sensors in Home
Assistant doesn't stop them from being stored in the database, so
hass-sunpowers users are often storing much more data than they
actually need.

#### Direct publication of data to InfluxDB

Some PVS users store their long-term solar data in InfluxDB; using
hass-sunpower means that this data must go into Home Assistant before
being pushed to InfluxDB. esphome-sunpower users can make use of
InfluxDB components for ESPHome itself, ensuring that the data always
flows to InfluxDB without needing Home Assistant's help.

### Disadvantages

#### Lack of 'device' support

ESPHome does not currently support the Home Assistant Device Registry
in a way which allows components to associate entities (sensors, etc.)
with multiple devices. As a result all of the sensors enabled in an
esphome-sunpower configuration will appear under a single device in
Home Assistant. There is a proposal to enhance ESPHome to provide
support for this, though, see the [Roadmap](#roadmap) section below.

#### Requires additional hardware

Until ESPHome supports multiple network connections in a single device
(allowing the ESP32 device to be installed in the PVS cabinet, see the
[Roadmap](#roadmap) section below), esphome-sunpower users need *both*
a device in the PVS cabinet to provide connectivity to the PVS `LAN`
port *and* an ESP32 device to collect and process the data.

## Requirements

* One or more SunPower PVS 6 (may also work with PVS 5).
* An ESP32-based device; note that this has only been tested with the
  original ESP32 (dual-core Tensilica 240MHz CPU, 520KB SRAM) with at
  least 4MB of flash memory attached. The other ESP32 variants are
  likely to be usable, depending on the complexity of the PVS networks
  being monitored and the number of individual sensors enabled in the
  configuration. The device should be dedicated to PVS
  monitoring. Since there are no GPIOs used, any ESP32 board will
  work.
* Network connectivity between the ESP32, the PVS, and Home Assistant,
  on a *single* network connection; if dual network connectivity
  becomes available in a future ESPHome release, this requirement
  would be eliminated and the ESP32 device could be installed in the
  PVS cabinet in place of any other device used for the _LAN_ network
  connection. If you don't already have connectivity to the PVS, you
  should review the [long
  topic](https://community.home-assistant.io/t/options-for-sunpower-solar-integration/289621)
  on the Home Assistant Discourse forum to learn about your options.

## PVS Data Collection

Throughout the examples in this documentation, you will see a `<PVS>`
placeholder; in your actual configuration you will need to replace
this with the IP address you've made available to reach the PVS (or
the DNS name, if you've setup DNS for it and your ESP32 is able to use
DNS.)

The PVS responds to the data collection API request quite slowly; in a
configuration with 37 panels, the response takes between 9 and 10
seconds in most cases. As a result, the example configurations include
an override for the ESP-IDF 'watchdog timer' to ensure that the ESP32
won't be restarted while waiting for the response. This is a rather
inelegant workaround, but it is necessary until such time as ESPHome
can issue HTTP requests and wait for responses in an asynchronous
manner. If your PVS takes longer than 10 seconds to respond, you may
need to increase the watchdog timeout correspondingly (be sure to
leave a few seconds buffer in case there are any network traffic
problems which might increase the response time).

You will need to determine two buffer sizes to be used in the ESPHome
configuration:

* `http_request->rx_buffer_size`: this needs to be large enough to
  hold the entire response from the PVS (see below).

* `sunpower_solar_pvs->buffer_size->data`: this needs to be large
  enough to hold the portion of the JSON data from the PVS that is
  used to populate the sensors. In a configuration with _all_ sensors
  enabled it needs to be about 25% of the `rx_buffer_size`, but if
  fewer sensors are enabled it can be reduced.

To determine the buffer sizes required for your configuration and
confirm that you have PVS connectivity, you can use `curl`:

```shell
$ curl -o pvs-data.json http://<PVS>/cgi-bin/dl_cgi?Command=DeviceList
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 31195  100 31195    0     0   3385      0  0:00:09  0:00:09 --:--:--  7789
```

The resulting `pvs-data.json` file should look similar to the one in
the [examples directory](examples). You will need this file in order
to build your configuration, since it contains the serial numbers of
all of the SunPower devices.

In the output above you can see that the transfer took 9 seconds, and
the resulting JSON document was 31,195 bytes long. For that system,
`rx_buffer_size` should be set to 34000, and `buffer_size->data`
should be set to 10000 if all sensors are enabled.

Once the system is running you can monitor the logs (with
`logger->level` set to `debug`) to see how much of the JSON data buffer
is being used; if a large portion is unused, reconfigure for a lower
size, but be prepared to increase it again if you enable more
sensors. If the JSON data buffer is not large enough, an error will
be emitted in the logs and no sensor data will be published.

## Configuration

The ESPHome 'logger' defaults to `debug` level; while this can be
useful for troubleshooting ESPHome configurations, it also means that
sensor data publication can be slowed down substantially. If you have
the level set to `debug`, and you enable more than 7 or 8 sensors in
total in the esphome-sunpower component, then you will see a warning
in the ESPHome log every time esphome-sunpower publishes data. The
warning will indicate that component `sunpower_solar_pvs` too *too
much time* to do its work, but if as suggested previously you've
dedicated an ESP32 board for this task, then you can safely ignore the
warning as no other important ESPHome activities will be missed.

You will see the same type of warning for the `http_request`
component, since it will block ESPHome activities for many seconds
while it waits for a response from the PVS.

This component relies on a not-yet-merged version of the ESPHome
`http_request` component; that version is compatible with the ESP-IDF
framework, and also improves the way that HTTP responses are made
available to automations. Those improvements allow esphome-sunpower to
avoid copying the entire response while parsing it, which would
dramatically increase overall RAM requirements.

### Minimal

This section is a walkthrough of [minimal.yml](examples/minimal.yml)
from the `examples` directory. It is the most basic configuration
needed to support the Home Assistant 'Energy Dashboard' (which
requires three sensors).

```yaml
esphome:
  name: pvs-minimal
  friendly_name: Minimal PVS Monitor

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: ""15""

wifi:
  networks:
    - ssid: example-network
      password: network-password

api:
```

This section fulfills basic ESPHome requirements: node information,
board selection, and WiFi/API connectivity. The only relevant item
here is `CONFIG_ESP_TASK_WDT_TIMEOUT_S`, which is necessary due to the
issues described in the [PVS Data Collection](pvs-data-collection)
section.

```yaml
external_components:
  - source: github://pr#3256
    components: [ http_request ]
  - source: github://kpfleming/esphome-sunpower@v2
```

This configuration requires two external components; esphome-sunpower,
and the modified version of `http_request` as noted in the
[Configuration](#configuration) section.

```yaml
sunpower_solar:
  serial: PVS1
  consumption_meter:
    serial: CM1
  production_meter:
    serial: PM1
```

This section configures esphome-sunpower to accept data from the
PVS, including its consumption meter and production meter. The serial
numbers of all three components must be specified, and they can be
obtained from the JSON data file gathered while following the steps in
[PVS Data Collection](pvs-data-collection).

Since this configuration only publishes data for three sensors, the
default values for the esphome-sunpower buffer sizes are sufficient,
and they are not included in the example configuration.

```yaml
sensor:
  - platform: sunpower_solar

    energy_from_grid: Energy From Grid
    energy_to_grid: Energy To Grid

    consumption_meter:
      lifetime_energy:
        name: Energy Consumed
        internal: true

    production_meter:
      lifetime_energy: Energy Produced
```

This section configures the three sensors required by the Energy Dashboard:

* Energy From Grid

* Energy To Grid

* Energy Produced

In addition an `Energy Consumed` sensor is configured but marked as
`internal` so it will not be published to Home Assistant. It is
required for the `Energy From Grid` and `Energy To Grid` sensor
calculations.

```yaml
http_request:
  useragent: esphome/pvs
  rx_buffer_size: 35000
```

This section configures the `http_request` component; see the [PVS
Data Collection](pvs-data-collection) section for details about
`rx_buffer_size`.

```yaml
interval:
  interval: 1min
  then:
    - delay: 15s
    - http_request.get:
        url: http://<PVS>/cgi-bin/dl_cgi?Command=DeviceList
        capture_response: true
        on_response:
          then:
            - delay: 3s
            - sunpower_solar.process: response.data
```

This final section configures an `interval` component so that ESPHome
can periodically pull data from the PVS and push it to
esphome-sunpower.

The trigger is used to poll the PVS every minute, capture the
response, wait three seconds (for other activities in ESPHome, which
were blocked during the HTTP request, to be processed), and then
supply the response to esphome-sunpower for parsing and sensor
publication. The initial 15 second delay in the trigger is necessary
because the `interval` component will immediately trigger during
ESPHome boot, and the blocking HTTP request will cause initialization
of other parts of the ESPHome system to fail.

### Full Featured

See [FULL_CONFIGURATION](FULL_CONFIGURATION.md).

## Roadmap

### Device Support

The author of these components also plans to work on 'connected
device' support for ESPHome, which would resolve one of the major
differences between this integration and hass-sunpower. If you are
interested, you can follow the [feature-requests
issue](https://github.com/esphome/feature-requests/issues/1335).

### Dual Network Support

There is an open [feature-requests
issue](https://github.com/esphome/feature-requests/issues/2102) on
this topic; the author of these components may try to tackle that one
too at some point in the near future!

## Issues, Feature Requests, Discussions

If you need to report an issue, or suggest a new feature, please do so
in the
['Issues'](https://github.com/kpfleming/esphome-sunpower/issues) area
of this repository.

If you'd like to discuss usage of these components, or ask for help
with them (but not with ESPHome itself or PVS connectivity), please do
so in the
['Discussions'](https://github.com/kpfleming/esphome-sunpower/discussions)
area of this repository.

## Chat

If you'd like to chat with the esphome-sunpower community, join us on
[Matrix](https://matrix.to/#/#esphome-sunpower:km6g.us)!

## Credits

This project was inspired by the excellent
[hass-sunpower](https://github.com/krbaker/hass-sunpower) project by
[@krbaker](https://github.com/krbaker).
",1,1,1,0,solar-energy,"[esphome, esphome-component, homeassistant, solar-energy, sunpower]",00000
946,EVCM,XinFinOrg,XinFinOrg,https://github.com/XinFinOrg/EVCM,https://api.github.com/repos/XinFinOrg/EVCM,EV Charging Monitoring Software,"# EVCM
EV Charging Monitoring Software
",1,1,1,0,solar-energy,"[chargepoint, electric-vehicles, ev, solar-energy, tesla]",00000
947,zevercloud-api,rogiervandergeer,N/A,https://github.com/rogiervandergeer/zevercloud-api,https://api.github.com/repos/rogiervandergeer/zevercloud-api,Python wrapper for the Zevercloud API,"# Zevercloud API

Python wrapper for the Zevercloud API

**Note**: _This piece of software is not approved or endorsed by ZeverCloud. Nor do I endorse their products._

## Installation

You can install `zevercloud-api` using your favorite package manager. For example:

```shell
pip install zevercloud-api
```

## Credentials

Three keys are needed to connect to the Zevercloud API:
- `api_key`
- `app_key`
- `app_secret`

Your `api_key` can be found on the Zevercloud site, under `Configuration > Plant Configuration > 5. Api Key`.
The `app_key` and `app_secret` can be found under `Account Management > Security Settings`, but are only 
visible once approved by Zeversolar Support. Send an email to service.eu@zeversolar.net, for example, and
ask them to make the `app_key` and `app_secret` visible to you. They typically do so within a day.

## Usage

To see the last known status of your site, as well as some yield statistics:
```python
from zevercloud import ZeverCloud

zc = ZeverCloud(API_KEY, APP_KEY, APP_SECRET)

print(zc.overview)
```
```shell
>>  {
        ""last_updated"": datetime(2022, 2, 3, 13, 57, 26),
        ""online"": False,
        ""power"": 0,
        ""site_id"": 12345,
        ""yield"": {
            ""today"": 5.9,
            ""month"": 218.42,
            ""total"": 5800,
            ""year"": 1770,
        },
    }
```

### Historical power and yield

Historical yield and power figures can also be obtained:
```python
zc.get_output(date=date(2022, 8, 1))
```
```shell
>>  [
       ...
        {""power"": 1183, ""timestamp"": datetime(2022, 8, 1, 12, 0)},
        {""power"": 1240, ""timestamp"": datetime(2022, 8, 1, 12, 20)},
        {""power"": 1815, ""timestamp"": datetime(2022, 8, 1, 12, 40)},
        ...
    ]
```

```python
zc.get_daily_output(month=date(2022, 8, 1))
```
```shell
>>  [
        {""date"": date(2022, 3, 1), ""yield"": 4.1},
        {""date"": date(2022, 8, 2), ""yield"": 5.2},
        {""date"": date(2022, 8, 3), ""yield"": 0.2},
        ...
    ]
```

```python
zc.get_monthly_output(year=2022)
```
```shell
>>  [
       {""date"": date(2022, 1, 1), ""yield"": 40.1},
       {""date"": date(2022, 2, 1), ""yield"": 52.1},
       {""date"": date(2022, 3, 1), ""yield"": 113},
       {""date"": date(2022, 4, 1), ""yield"": 8.11},
        ...
    ]
```

```python
zc.get_yearly_output()
```
```shell
>>  [
       {""year"": 2012, ""yield"": 4069},
       {""year"": 2013, ""yield"": 308},
        ...
    ]
```


Power is always presented in W (Watt), and yield in kWh (kiloWatt-hour). Due to the
internals of the Zevercloud API, all numbers may be rounded up to two significant digits.

### Events

Events (errors) can be listed:
```python
zc.get_events(start_date=date(2022, 1, 1), end_date=date(2022, 8, 1))
```
```shell
>>  [
        ZeverSolarEvent(
            event_time=datetime(2022, 1, 1, 12, 34, 56), 
            inverter_id=""ZS12345678"", 
            event_code=3, 
            event_type=101,
        )
    ]
```

The `ZeverSolarEvent` has a human-readable `event_description`.

**Note**: the internal Zevercloud API can only return events for 7 days at a time. Using
the `get_events`-method on a large date range will result in many API-calls being made,
and may hence possibly take a rather long time.

### Detailed logs

More detailed logs can be retrieved with `get_details`. This endpoint requires the id of the monitor
as input. This monitor can be found on the ZeverCloud website.

```python
zc.get_details(date=date(2022, 1, 1), psno=""EAB1234C5678"")
```
```shell
>>  [
       {
          'ac_frequency': 50,
          'ac_power': 30,
          'ac_current_p1': 0,
          'ac_current_p2': 0,
          'ac_current_p3': 0,
          'ac_voltage_p1': 236.8,
          'ac_voltage_p2': 0,
          'ac_voltage_p3': 0,
          'inverter_id': 'ZS12345678',
          'pv_current_1': 0,
          'pv_current_2': 0,
          'pv_current_3': 0,
          'pv_voltage_1': 271.4,
          'pv_voltage_2': 0,
          'pv_voltage_3': 0,
          'temperature': 26.7,
          'timestamp': datetime.datetime(2022, 8, 1, 6, 49, 37),
          'yield_today': 0.1,
          'yield_total': 5615.2
       },
       ...
    ]  
```

## Releases

- `0.2.1` Improve security by adding timestamp and nonce to requests
- `0.2.0` Add `get_details` method
- `0.1.0` First working version
",1,1,1,0,solar-energy,"[monitoring, python3, solar-energy, zeversolar]",00000
948,epsolar-tracer-influxdb,pcgeek86,N/A,https://github.com/pcgeek86/epsolar-tracer-influxdb,https://api.github.com/repos/pcgeek86/epsolar-tracer-influxdb,Write metrics from solar ☀ charge controller to InfluxDB Cloud 📈,"# EP Solar Tracer 3210an Metrics Writer

This repository contains a Python script that retrieves metrics from an EP Solar charge controller, via modbus, and writes them to [InfluxDB cloud](https://www.influxdata.com/products/influxdb-cloud/).
I'm using this code to pull metrics from a Tracer 3210an charge controller and feed them into InfluxDB. 

In order to connect a computer, such as a Raspberry Pi, to the charge controller, you'll need a modbus (RS-485) interface cable.
I am using a DTECH cable along with an RJ-45 cable to connect my Raspberry Pi to the charge controller.
",1,1,4,0,solar-energy,"[solar, solar-energy, time-series]",00000
949,solar-panels-energy,vector011,vector011,https://github.com/vector011/solar-panels-energy,https://api.github.com/repos/vector011/solar-panels-energy,"JP Green Energy, s.r.o. - Alternative Energy Resources","<p align=""center"">
  <a href=""https://jpenergy.eu"" target=""_blank"">
    <img src=""public/assets/logo-short.svg"" height=""60"" />
  </a>
</p>

<h1 align=""center"">JP Green Energy, s.r.o.</h1>

<center>

[![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)
&nbsp;
![Pull Request](https://img.shields.io/github/issues-pr/vector011/solar-panels-energy)
&nbsp;
![GitHub last commit](https://img.shields.io/github/last-commit/vector011/solar-panels-energy)
&nbsp;
[![GPLv3 license](https://img.shields.io/badge/License-GPLv3-blue.svg)](http://perso.crans.org/besson/LICENSE.html)
</center>

![title image](public/assets/thumbnail.jpeg)

<center>

Created by [`Vector011`](https://vector011.com)

</center>
",1,1,2,0,solar-energy,"[energy, green-energy, jp-green-energy, jpenergy, solar-energy, solar-panels, website]",00000
950,ml-solar-forecaster,b-rbmp,N/A,https://github.com/b-rbmp/ml-solar-forecaster,https://api.github.com/repos/b-rbmp/ml-solar-forecaster,"Final Graduation Project for the Electrical Engineering degree at the Federal University of Bahia (UFBA), implementing Neural Networks and other ML algorithms for day-ahead hourly forecasting of solar irradiance (24 hours), using past and future weather data","# ml-solar-forecaster

🇧🇷 🇵🇹 Trabalho de Conclusão de Curso (TCC) de Engenharia Elétrica na Universidade Federal da Bahia (UFBA), implementando redes neurais artificiais e outros métodos de Machine Learning para a previsão de irradiância solar para as próximas 24 horas a partir de dados de medição de uma estação do INMET e dados do modelo numérico MERRA-2, disponível na plataforma NASA POWER.

🇺🇸 🇬🇧 Final Graduation Project for the Electrical Engineering degree at the Federal University of Bahia (UFBA), implementing Neural Networks and other ML algorithms for day-ahead hourly forecasting of solar irradiance (24 hours), using measurements from a local weather station from the Brazilian National Weather Institute (INMET) and data from the numerical model MERRA-2.

🇫🇷 Projet de fin d'études pour l'obtention du diplôme d'Ingénieur Génie Électrique dans l'Université Fédérale de Bahia (UFBA) sur l'implementation des réseaux neuronaux et d'autres algorithmes d'Apprentissage Machine pour la prévision des prochaines 24 heures à partir de mesures d'une station locale de l'Institut National de Météorologie du Brésil (INMET) et des données météo du modèle numérique MERRA-2.

## Paper 

[Download the Senior Thesis](https://github.com/b-rbmp/ml-solar-forecaster/blob/main/Senior_Thesis.pdf)
",1,1,1,0,solar-energy,"[data-science, electrical-engineering, keras, machine-learning, neural-network, sklearn, solar-energy]",00000
951,SolarTools,NBrown140,N/A,https://github.com/NBrown140/SolarTools,https://api.github.com/repos/NBrown140/SolarTools,An ArcGIS toolbox for lidar-based solar rooftop modelling,"# SolarTools
An ArcGIS toolbox for lidar-based solar rooftop modelling

Written in Python.
Requires the license for ArcGIS Spatial Analyst toolbox.

Tools:
- Build Raster from Lidar Point Cloud
- Extract Building Footprints from Lidar Point Cloud
- Calibrate Solar Potential
",1,1,2,0,solar-energy,"[arcgis, arcgis-toolbox, arcpy, lidar, lidar-point-cloud, solar, solar-energy]",00000
952,PPC_Sim,JoshMcguigan,N/A,https://github.com/JoshMcguigan/PPC_Sim,https://api.github.com/repos/JoshMcguigan/PPC_Sim,A solar power plant controller simulation and testing tool,"# PPC_Sim

![PPC Sim - Simulation Settings](https://cloud.githubusercontent.com/assets/22216761/19877705/c3c2748e-9f9e-11e6-8ccc-38e148be91cd.png)

![PPC Sim - Irradiance Settings](https://cloud.githubusercontent.com/assets/22216761/19877703/c3bfab3c-9f9e-11e6-9aa0-7b5a3007918e.png)

![PPC Sim - Set Point Settings](https://cloud.githubusercontent.com/assets/22216761/19877704/c3c21ca0-9f9e-11e6-9836-8bcbb4010772.png)

![PPC Sim - Controller Settings](https://cloud.githubusercontent.com/assets/22216761/19877702/c3a9c7e0-9f9e-11e6-94e3-2c87b5314fa1.png)
",1,1,4,0,solar-energy,"[renewable-energy, simulation, solar-energy]",00000
953,solar_harvester_bq25505,rykovv,N/A,https://github.com/rykovv/solar_harvester_bq25505,https://api.github.com/repos/rykovv/solar_harvester_bq25505,"Solar harvesting board PCB EAGLE design based on TI BQ25505 PMIC with MPPT, MAX17040 fuel gauge and INA226 PV performance measurement.","# Solar Harvester v1.0_m1

Solar harvesting power supply board based on TI BQ25505 PMIC with MPPT functionality configured for tracking 80% of the PV input. The board provides voltage/current measurement IC (INA226) intended for measurement of the PV input and a fuel gauge system based on MAX17040 IC to check and monitor battery state.

## Table of Contents ##

[[_TOC_]]

## Rev1 manufactured and assembled

![rev1_man_assem.png](/img/rev1_man_assem.jpg)

## Rev2 simulated

![rev2_top.png](/img/rev2_top.png)

![rev2_bottom.png](/img/rev2_bottom.png)

## Detailed Overview

The BQ25505 was created for special needs of ultra low power applications. Therefore, it is designed for extract uW and mW of power generated from multiple energy harvesting sources. The board configuration suits only for solar power applications.

Once a PV pannel and Lipo battery are connected to the board and load capacitors are charged (>=1.8V) the main boost charger starts working extracting energy from the PV pannel. The ouput power is driven based on VBAT_OK threshold (3.3V) which is set based on R~ok1-3~ resistors. If the attached battery voltage is less then VBAT_OK, than only charging circuitry will work. This way the battery is saved from being damaged by undervoltage condition. Once the battery voltage rises up to VBAT_OK_HYST (3.7V), the load will be connected to the battery again. The BQ25505 provides overvoltage protection functionality set based on R~ov1,2~ resistors. That is, when the battery voltage reaches VBAT_OV voltage (4.2V) the main boost charger cease charging and only monitors voltage levels. Summing up, the BQ25505 will charge the storage element always unless its voltage is less than VBAT_OV. Refer to the Battery over-voltage, under-voltage and operating range section for examining concrete values calculation.

There is a possibility for supercap input energy storage instead of the Lipo battery. The maximum voltage for the supercap must be 5V. This modification implies changes in VBAT_OK, VBAT_OK_HYST, and VBAT_OV threasholds; and R~ok1-3~ resistors must be reselected accordingly. Refer to the BQ25505 datasheet to see corresponding formulas and equations (Section 8.2.1.2 Detailed Design Procedure).

Adjust CSTOR load capacitors depending on energy storage voltage. Remove C11 if VBAT_SEC < 3.0V.

## Specifications

Input:
 - PV panel 5V, 150mA
 - Lipo 3.7V battery

Output:
 - 3.3V, 1.2A
 - 5V, 1.8A

Maximum charging curerrent is 100mA.

## ICs
 - BQ25505
 - TPS613221A (3.3V)
 - TPS613222A (5V)
 - INA226
 - MAX17040
 - DMP3085LSD (dual pmos)

## Data Out - I^2^C
In order to extract information from the voltage/current measurement IC and the fuel gauge the proper I^2^C connection is needed. External pin headers fulfill this purpose. Note the internal I^2^C bus is **not pulled up**. Make sure the I^2^C bus from your main MCU board pulls up the bus.

## Battery over-voltage, under-voltage and operating range

### Over-voltage

Battery over-voltage protection is determined by R1 and R2 resistors according to 7.3.3

**VBAT_OV** = 3/2 * VBIAS * (1 + R1/R2)

Since, VBIAS is internally set to 1.21V, we have

VBAT_OV = 3/2 * 1.21V * (1 + 7.32M/5.62M) = **4.179V ~= 4.2V**

### Under-voltage

Battery under-voltage is internally set to 1.95V (see 7.3.2), hence being to suitable for the application, the push-pull multiplexer drivers (see 7.3.5) were used for the purpose. According to VBAT_OK and VBAT_OK_HYST values (see Operating range section).

### Operating range

The battery operating range is established by R3, R4, and R5 resistors which determine VBAT_OK and VBAT_OK_HYST values. According to the selected resistors values,

**VBAT_OK** = VBIAS * (1 + R4/R5) = 1.21V * (1 + 7.5M/4.3M) = **3.32V**

and

**VBAT_OK_HYST** = VBIAS * (1 + [R4 + R3]/R5) = 1.21V * (1 + [7.5M + 1.2M]/4.3M) = **3.658V**

## Issues

Despite all values of resistors R~ok1-3~ and R~ov1,2~ were correctly calculated (see 3.7V 860mAh Li-po battery and Battery over-voltage, under-voltage and operating range section) BQ25505 does not behave as expected and presents serious instabilities incompatible with deployment in real applications. When the battery is fully charged and attached, on one hand, and there is enough PV power input to start the circuitry, on the other hand, the BQ25505 starts working as expected until the battery is discharged (voltage below VBAT_OK). When the battery is half-discharged (voltage about VBAT_OK_HYST), and independently of the PV power input, VSTOR is unable to give stable output. What happens is when the 3.3V & 5V voltage regulators reach predefined output levels and the load starts to consume power (especially when the power is greater than 200mA, perhaps max transitory current in this state is much lower), the BQ25505 switches constantly on and off #VBAT_SEC_ON for a couple of milliseconds. It makes impossible to provide enough power for stable MCU launching.

A potential solution for this drawback is to substitute the current Under-voltage protection scheme with a battery management IC that would be in charge of over- and under-voltage protection.

## Revisions

### Rev 0
### Rev 1
 - Components with 0603 metric footprint were substituted by 0603 imperial
### Rev 2
 - Board size increased to 30x55
 - Changed C3 footprint to 3528, C4 and C11 to 1608
 - Changed C9 and C10 to 100u 3528
 - Rewired PCB
 - Components font size increased to 32mil
",1,1,1,2,solar-energy,"[bq25505, eagle, energy-harvesting, pcb, solar-energy]",00000
954,IoT_timeseries_analysis,opsabarsec,N/A,https://github.com/opsabarsec/IoT_timeseries_analysis,https://api.github.com/repos/opsabarsec/IoT_timeseries_analysis,Analysis of time series data from IoT devices ,"﻿# Time series from IoT devices: anomaly detection and forecast 
![main](dom.jpg)

## 1.Background
A young couple wants to buy a house with connected devices and solar panels. The owner has collected and shared data from IoT devices. 

Expected goals for this project: 

- Illustrate trends of energy consumption and generation
- Detect eventual appliance anomalies that may have boosted the consumption
- Predict future consumption 

## 2. The data

The smart-home dataset available on Kaggle

https://www.kaggle.com/datasets/taranvee/smart-home-dataset-with-weather-information

a 130MB csv file with several features including weather, power generated, and consumption by appliance detector.


## 3. The model outcome

Application of CUSUM method for anomaly detection showed that there were some consumption spikes, correlated to the weather but no points of steady increase. 

Models built with LightGBM can predict future energy consumption when weather information was added to the simple time information. 

![model](model.png)

## 4. Conclusions

- Consumption is high during the night, and increases significantly during hot months in the summer. This is likely due to air conditioning, house insulation may be improved.

- Almost no solar energy produced in the morning: panels orientation must be checked.

- Home appliances work well, no evident faults detected from trends anomaly.

![EDA](EDA.png)

",1,1,1,0,solar-energy,"[iot, kats, lightgbm-regressor, solar-energy, time-series-analysis]",00000
955,pysenechome,mailq,N/A,https://github.com/mailq/pysenechome,https://api.github.com/repos/mailq/pysenechome,Async library for interfacing with SENEC.home solar and battery solution,"pysenechome library
===================

SENEC Webconnect library for Python 3. The library was originally created
to integrate a SENEC.Home Hybrid battery with HomeAssistant

See <https://senec.com> for more information about the SENEC home
battery storage solutions.

Currently tested on SENEC.Home V3 hybrid, but should work for the whole product line.
If you can access your SENEC via your browser, this might work for you.

Example usage
=============

See [example.py](./example.py) for a basic usage and tests

HomeAssistant
=============

The HomeAssistant SENEC sensor documentation can be found
[here](https://www.home-assistant.io/components/senec)

Daily or monthly usage is not available from the API.
It is possible to get around this by using an additional
[utility meter](https://www.home-assistant.io/components/utility_meter)
",1,1,2,0,solar-energy,"[battery-monitor, grid-system, home-automation, pyhton3, solar-energy]",00000
956,solar-saved-money,riquellopes,N/A,https://github.com/riquellopes/solar-saved-money,https://api.github.com/repos/riquellopes/solar-saved-money,Application to monitoring how much money I saved at moment with my photovoltaic system,"![](https://github.com/riquellopes/solar-saved-money/workflows/SolarSavedMoney/badge.svg)
[![Coverage Status](https://coveralls.io/repos/github/riquellopes/solar-saved-money/badge.svg?branch=master)](https://coveralls.io/github/riquellopes/solar-saved-money?branch=master)

Saved money
===========

Ref:
 * https://community.home-assistant.io/t/help-reading-json-from-auroravision-api-solar-inverter-data/135916",1,1,2,1,solar-energy,"[python, saved-money, solar-energy]",00000
957,axpertbot-lite,david-ueman,N/A,https://github.com/david-ueman/axpertbot-lite,https://api.github.com/repos/david-ueman/axpertbot-lite,A set of programs to read and post the general status parameters of an Axpert Inverter-Charger through USB ,"# axpertbot-lite
A set of programs to read and post the general status parameters of an Axpert Inverter-Charger through USB

# About

Axpertbot-lite is a set of programs designed to run as cron jobs in a raspberry or any other computer to **query, read, and post the general status parameters and values of an Axpert Inverter-charger** (such as battery voltage,  output power) through a USB connection, so that this information can be available without the need to be insitu.

These set of programs, and particularly the connection method to the inverter through the USB, is based and inspired on the project [axpertbot](https://github.com/ciberflaite/axpertbot) created by [ciberflaite](https://github.com/ciberflaite).

# Installation

## Parts of the application

This application is divided in two parts:

**local** : The scripts that should be installed in the rapsberry connected to the inverter (or inverters) by USB. This raspberry should have internet connection so that the information can be posted to a server.

**serverside** : The scripts that should be hosted in the cloud and can receive the information posted by the raspberry.

## Prerequisites

* A linux environment with root privileges to store and run the _local part_ of the application
* A web server reachable by the raspberry with capabilities to run PHP scripts
* A database server to store the data sent by the raspberry

## Requirements in the Raspberry connected to the inverter(s)

* python3
* python3-usb
* python3-crc16

* php
* php-curl

# Requirements in the Server side

* php
* MySQL Server or alike

## Installation Steps

### serverside (cloud)

1. Put the scripts corresponding to the serverside in the webserver and make them reachables.

2. Create tables in the SQL Server running the script create_table.sql

3. Update the line in which the link to the database is created so that it corresponds to your database location, user and password.

    ```$link = mysqli_connect(""url.mysql.db"", ""database-name"", ""database-password"",```

### localside (Raspberry)

1. Get a running copy of a Linux environment. All development and tests of this application were made in Raspbian, so the following instructions are intented for Raspbian installations.

2. Download or clone the project into your linux environment.

3. Install PHP

    ```sudo apt-get install php```

4. Install needed PHP libraries

    ```sudo apt-get install php-curl```

3. Install Python3

    ```sudo apt-get install python3```

4. Install Pip, the recommended tool for installing Python packages

    ```sudo apt-get install python3-pip```

5. Install needed Python3 libraries with pip. **Notice** that you have to install the libraries using sudo, since the axpertbot-lite needs to run with root privileges to access the USB

    ```sudo pip3 install crc16```
    ```sudo pip3 install pyusb```

6. Go to the **local** folder and check that you can communicate with the inverter-charger by running the inverter_data_read.py specifying the serial number of the inverter-chager that you want to query. Replace the `92931712101193` with the serial number of your inverter.

    ```sudo python3 inverter_data_read.py 92931712101193```

    you should get a string similar to:

    ```92931712101193 00.0 230.0 49.9 0390 0343 007 398 49.60 000 074 0036 0000 058.6 49.36 00007 00110000 00 00 00000 010Aç```

7. Run the script that tries to post the information to the server

    ```sudo php inverter_data_send.php 92931712101193```

8. Check that the data was stored in the database by getting the information through the script that reads the data from the database

    ```wget -O /dev/stdout http://your-server-name/show_last_reading.php?network_id=92931712101193```


",1,1,2,0,solar-energy,"[axpert, device-monitor, inverter-control, pyusb, remote-sensing, solar-energy]",00000
958,solar-panel-protection-system,HyrumDickinson,N/A,https://github.com/HyrumDickinson/solar-panel-protection-system,https://api.github.com/repos/HyrumDickinson/solar-panel-protection-system,Software portion of tool that allows solar panels to be monitored and controlled by a remote operator.,"# Solar Panel Protection System

## Project overview
This code represents the software portion of an ongoing effort to build a tool that monitors solar energy systems and keeps panels from overheating.

This project is funded by the University of Illinois Department of Electrical & Computer Engineering and is based out of the Center for Electric Machinery & Electromechanics. The project lies under the direction of Arijit Banerjee, Assistant Professor in ECE. The software portion of the project is undergoing construction by undergraduate student workers Hyrum Dickinson and Benjamin Olaivar, supervised by Kevin Colravy, Research Engineer at CEME. Only the software portion of the solar panel protection system project is hosted on this repo.

The original solar panel protection system was created by then-undergraduate students Dillon Vadgama, Douglas Lee, and Sachin Reddy for their fall 2019 senior design project. Dubbed ""Smart Interface for ECEB Research Solar Panels,"" the project won the Texas Instruments Best Project Award. Now, researchers from the University of Illinois are attempting to improve on their prototype to create a robust, scalable tool that can monitor entire solar energy systems and reliably keep individual panels from overheating.

This branch is primarily focused on the development of the onboard arduino code. This code will encompass everything from ethernet communication to sensor data reading. The majority of work done in this branch will be done under the 'arduino_data' directory, the 'test' files. Files in this directory are organized using platformio, which allows for convenient access/storage of libraries, test code, and other files. 

## Repository setup
### `main`
The latest stable, deployable version of the code is stored in the `main` branch.
### `python-2-version` and `python-3-version`
Until code is fully ported to Python 3, these branches are the `main` branches of the code in their respective language.
### `original`
It is important to note that the original code for this project is not our own. It was written by Dillon Vadgama, Douglas Lee, and Sachin Reddy as part of a senior design project. The exact original code, including the original README, is stored in this branch. 

## System tools  
### Software  
Microprocessor code - Arduino Language  
Original GUI - Python 2 & Tkinter  
New GUI - Processing 3  
README & WRITEME files - Markdown  
### Hardware (not included in repo)  
Arduino Uno with Wifi  
Custom PCB Arduino Shield  

## Old Python GUI
### Dependencies
- matplotlib  
- tkinter (Python 3) or Tkinter (Python 2)  
- sqlite3  
- pillow  
- datetime  
The original code was written to for PIL. PIL is now unsupported - its own website recommends against its use. Pillow is a maintained backwords-compatible fork of PIL.
### Run
run Main.py in your preferred Python environment
### Building
source venv/bin/activate  
python2 Setup.py py2app -A  
",1,1,2,0,solar-energy,"[arduino, processing3, python, solar-energy, tkinter, uiuc-ece]",00000
959,mlops-for-ai-course,kingabzpro,N/A,https://github.com/kingabzpro/mlops-for-ai-course,https://api.github.com/repos/kingabzpro/mlops-for-ai-course,"To learn about the key components of MLOps, APIs and API designs. ","# MLOps for AI Engineers and Data Scientists
**To learn about the key components of MLOps, APIs and cloud deployment.** 

- A glance at ML Life Cycle

	- Challenges facing MLOps
- Introduction to MLOps


	- What is MLOps?
	- Why the need for MLOps?
	- Where & when do we adopt MLOps
	- Components of MLOps
	- Introduction to APIs
	- Challenges and the need for APIs in MLOps
- Containers for  ML Deployment


	- Introduction to Docker
	- Introduction to kubernetes
	- Deploy machine learning models using docker
	- Deployment of containers on kubernetes(EKS, GKE, etc)
	- An introduction to automating ML deployment workflow
- Leveraging Cloud Computing for MLOps
	- Deploying machine learning model through AWS
	- Deploying deep learning model though google cloud 
	- Train and deploy ML model through Azure Auto ML
	- Deploy model via Fastapi, Streamlit, Heroku
- Monitoring and Automation
	- Overview of Monitoring
	- System infrastructure monitoring
	- Data pipeline monitoring
	- Monitor and evaluate model performance
	- Maintenance guide for model updating
- An introduction to CI/CD for automated model deployment

Learn more about course [here](https://omdena.com/course/mlops-for-ai-engineers-and-data-scientists/).",1,1,1,0,solar-energy,"[api, azure, machinelearning-python, mlops, mlpipelines, solar-energy]",00000
960,Project2Group1,sheygarga,N/A,https://github.com/sheygarga/Project2Group1,https://api.github.com/repos/sheygarga/Project2Group1,State of the Sun,"# State of the Sun

Our initial objective:
Provide the user an opportunity to explore the “good” and the “bad” side of the sun across the US at a state-level. The primary focus is the “good”: solar project completion by state and associated metrics, including visualization of correlations by metric (e.g., system size vs. cost). The “bad” component is a review of skin cancer rates by state.

Objective updates:
Data source NREL reporting of installation costs is very inconsistent. We are unable to provide related analysis as a result.

Related topics we might explore in the future: 
Visualize installations over time.
Explore additional relationships such as installation by sector, proxies for solar resource, and state policies/programs.

Link to Deployed App: https://state-of-the-sun.herokuapp.com/
",1,1,2,0,solar-energy,"[medical, solar-energy, visualization]",00000
961,motorized_solarpanel,ayham291,N/A,https://github.com/ayham291/motorized_solarpanel,https://api.github.com/repos/ayham291/motorized_solarpanel,SMSP(Smart Motorized Solarpanel). This is a PMT2/SoSe21 project at Ostbayerische Technische Hochschule Regensburg/Germany.,"# Motorized Solarpanel - PMT2

## The preferred way of cloning this repo

**use bare clone:**

```bash
$ git clone --bare https://github.com/ayham291/motorized_solarpanel motorized_solarpanel
$ cd motorized_solarpanel/
$ git worktree add master
$ cd master/
```

Now you have a bare repo with the worktree master

If you want to know more go to [devel](https://github.com/ayham291/motorized_solarpanel/tree/devel) branch

## The *app* directory - HOWTO

This directory is intended to be used with Platformio

```bash
$ cd /path/to/the/repo/motorized_solarpanel/devel/app && code .
```

_**IMPORTANT**_ change the settings in [platformio.ini](https://github.com/ayham291/motorized_solarpanel/blob/devel/app/platformio.ini#L16-18) to your own settings.

You could also leave it as is if your setup autorecognizes the ports

## The included webserver is only for testing purposes

<span style=""color:red"">NOT FOR PRODUCTION - VERY UNSAFE SETTINGS ARE ENABLED</span>.

## Project Participants

- Ayham Alhalaibi
- Andreas Schneider
- Johannes Schiessel
- Stefan Weig

## Author

[Ayham Alhalaibi](https://github.com/ayham291)
",1,1,1,0,solar-energy,"[arduino, motorized, pmt2, solar-energy]",00000
962,spg,proffapt,N/A,https://github.com/proffapt/spg,https://api.github.com/repos/proffapt/spg,DIY project for first year course in IIT Kharagpur,"# SPG - Sunflower Power Generator

We made a model using Arduino UNO R3 ,servos motor, solar panels ,MPPT System and bunch of photo resistors(two actually).<br>
In this our solar panels is rotating 360 degree according to the direction of the Sun.
Which maximizes the output reducing the power wastage and thus increasing the efficiency.
This energy can be used in various purposes according to the power output.<br>
We also used electronic means to maximize the power generated further more by controlling the panel voltage to maximum power point using MPPT(Maximum power point tracking) device.

Working demonstration of the project: https://www.youtube.com/watch?v=L-F57fD6aOg
",1,1,1,0,solar-energy,"[arduino, diy, diy-project, diy-projects, do-it-yourself, efficient-solar-panel, iit-kgp, iitkgp, project, solar-cells, solar-energy, spg, sunflower-power-generator]",00000
963,SunnySideUp,pforret,N/A,https://github.com/pforret/SunnySideUp,https://api.github.com/repos/pforret/SunnySideUp,Get info from solar monitoring sites,"# Solar monitoring site data retrieval

[![Latest Version on Packagist](https://img.shields.io/packagist/v/pforret/sunnysideup.svg?style=flat-square)](https://packagist.org/packages/pforret/sunnysideup)
[![Tests](https://img.shields.io/github/actions/workflow/status/pforret/sunnysideup/run-tests.yml?branch=main&label=tests&style=flat-square)](https://github.com/pforret/sunnysideup/actions/workflows/run-tests.yml)
[![Total Downloads](https://img.shields.io/packagist/dt/pforret/sunnysideup.svg?style=flat-square)](https://packagist.org/packages/pforret/sunnysideup)

![](assets/unsplash.sunny.jpg)

works for
* [x] FusionSolar (Huawei) - Kiosk URL
* [x] SunnyPortal (SMA Solar) - PV System Overview URL
* [ ] ...

## Installation

You can install the package via composer:

```bash
composer require pforret/sunnysideup
```

## Usage

```php
$sunny = new SunnySideUp();
$response = $sunny::get(""https://region04eu5.fusionsolar.huawei.com/pvmswebsite/nologin/assets/build/index.html#/kiosk?kk=$id"");
```

## Retrieved data

### Huawei/FusionSolar Kiosk URL

![](assets/fusionsolar_kiosk.png)

* Example URL: [region04eu5.fusionsolar.huawei.com/pvmswebsite/nologin/assets/build/index.html#/kiosk?kk=(unique ID)](https://region04eu5.fusionsolar.huawei.com/pvmswebsite/nologin/assets/build/index.html#/kiosk?kk=fo0x7vgtd9Noeqj9FHx2ofD0fPvAyj9b)
* Data:

```json
{
    ""stationData"": {
        ""url"": ""https:\/\/region04eu5.fusionsolar.huawei.com\/rest\/pvms\/web\/kiosk\/v1\/station-kiosk-file?kk=(key)"",
        ""name"": ""(name)"",
        ""id"": ""(id)"",
        ""address"": ""(address)"",
        ""city"": null,
        ""country"": null,
        ""timezone"": null,
        ""panel_count"": null,
        ""watt_peak"": null,
        ""date_commissioning"": null
    },
    ""dayWeather"": {
        ""timeSunrise"": null,
        ""timeSunset"": null,
        ""maxTemperature"": null,
        ""currentTemperature"": null,
        ""currentPrecipitation"": null
    },
    ""currentData"": {
        ""currentPowerKw"": 0.64,
        ""timeSampled"": null
    },
    ""dayProduction"": {
        ""kwhSystem"": 8.72,
        ""equivalentTrees"": null,
        ""equivalentKgCoal"": null,
        ""equivalentKgCo2"": null
    },
    ""monthProduction"": {
        ""kwhSystem"": 98.2,
        ""equivalentTrees"": null,
        ""equivalentKgCoal"": null,
        ""equivalentKgCo2"": null
    },
    ""yearProduction"": {
        ""kwhSystem"": 129.46,
        ""equivalentTrees"": 1,
        ""equivalentKgCoal"": 51.78,
        ""equivalentKgCo2"": 61.49
    },
    ""totalProduction"": {
        ""kwhSystem"": 184.84,
        ""equivalentTrees"": 1,
        ""equivalentKgCoal"": 73.94,
        ""equivalentKgCo2"": 87.8
    }
}
```

### SMA/SunnyPortal.com URL

![](assets/sunnyportal_public.png)
* Example URL: [www.sunnyportal.com/Templates/PublicPageOverview.aspx?page=(pageID)&plant=(plantID)&splang=en-US](https://www.sunnyportal.com/Templates/PublicPageOverview.aspx?page=3e371bac-b19a-4257-853c-aac4d3601c0b&plant=46e9985f-128a-4da8-a70d-e95f72085ca4&splang=en-US)
* data:
```json
{
    ""stationData"": {
        ""url"": ""https:\/\/www.sunnyportal.com\/Templates\/PublicPageOverview.aspx?page=3e371bac-b19a-4257-853c-aac4d3601c0b&plant=46e9985f-128a-4da8-a70d-e95f72085ca4&splang=en-US"",
        ""name"": null,
        ""id"": null,
        ""address"": null,
        ""city"": null,
        ""country"": null,
        ""timezone"": ""Romance Standard Time"",
        ""panel_count"": null,
        ""watt_peak"": 1800,
        ""date_commissioning"": """"
    },
    ""dayWeather"": {
        ""timeSunrise"": null,
        ""timeSunset"": null,
        ""maxTemperature"": null,
        ""currentTemperature"": null,
        ""currentPrecipitation"": null
    },
    ""currentData"": {
        ""currentPowerKw"": 138,
        ""timeSampled"": ""2023-02-24T09:45:00""
    },
    ""dayProduction"": {
        ""kwhSystem"": 0.077,
        ""equivalentTrees"": null,
        ""equivalentKgCoal"": null,
        ""equivalentKgCo2"": 0.054
    },
    ""monthProduction"": {
        ""kwhSystem"": null,
        ""equivalentTrees"": null,
        ""equivalentKgCoal"": null,
        ""equivalentKgCo2"": null
    },
    ""yearProduction"": {
        ""kwhSystem"": null,
        ""equivalentTrees"": null,
        ""equivalentKgCoal"": null,
        ""equivalentKgCo2"": null
    },
    ""totalProduction"": {
        ""kwhSystem"": 16385,
        ""equivalentTrees"": null,
        ""equivalentKgCoal"": null,
        ""equivalentKgCo2"": 11000
    }
}
```
## Testing

```bash
composer test
```

## Changelog

Please see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.

## Contributing

Please see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.

## Security Vulnerabilities

Please review [our security policy](../../security/policy) on how to report security vulnerabilities.

## Credits

- [Peter Forret](https://github.com/pforret)
- [All Contributors](../../contributors)

## License

The MIT License (MIT). Please see [License File](LICENSE.md) for more information.
",1,1,2,3,solar-energy,"[php, solar-energy]",00000
964,limao,dpohanlon,N/A,https://github.com/dpohanlon/limao,https://api.github.com/repos/dpohanlon/limao,Projected sunlight intensities for arbitrary building elevations using satellite-derived LIDAR🌞🏡,"<p align=""center"">
  <img width=""731"" height=""250"" src=""assets/limao.jpg"">
</p>

Limão calculates projected direct sunlight intensities over time for arbitrary building elevations. See how direct sunlight varies throughout the year for windows at different orientations, and heights above ground level, or compare sunlight intensities for different locations.

Primarily this depends on the the building orientation, the latitude, and the time of the year, but also on occluding obstacles. Limão incorporates time and location dependent sunlight intensity projections, with digital surface and terrain maps, to determine an estimated overall intensity as a function of time.


# Applications

For illumination of a wall (for example, for photovoltaic panel placement), Limão provides predicted sunlight intensities on a user-defined vertical plane in real space:

<p align=""center"">
  <img width=""600"" height=""229"" src=""assets/profile.png"">
</p>

Here the intensities are averaged over the year, and the variation is mostly due to occluding buildings. The intensities over time for a single point `(lat, lon, height)` can also be queried:

<p align=""center"">
  <img width=""400"" height=""300"" src=""assets/weekAvg.png"">
</p>

This is useful for comparing the intensity from different directions, and the produced plots indicate the maximum and minimum intensity during daylight hours.

# Installation

Either from the PyPI release

```bash
pip install limao
```

or the bleeding edge via GitHub

```bash
git clone git@github.com:dpohanlon/limao.git
cd limao
pip install .
```

# Usage

Limão requires digital surface models (DSM) and digital terrain models (DTM) for the region of interest, in addition to the latitude and longitude. For the UK these are available from [DEFRA](https://www.data.gov.uk/dataset/f0db0249-f17b-4036-9e65-309148c97ce4/national-lidar-programme) ([direct link](https://environment.data.gov.uk/DefraDataDownload/?Mode=survey)), and are derived from satellite LIDAR measurements. Latitude and longitude can be obtained from Google Maps, and must correspond to a point on the DSM and DTMs.

**Currently this assumes UK DSM/DTMs, as the lat/lon is converted into UK Ordnance Survey map coordinates.**

Limão ships with a standalone executable and as a library - here we'll just use the command line interface. All use cases require the latitude, longitude, a DSM, and a DTM:

```bash
limao --lat 52.198 --lon 0.135 -s TL45ne_LZ_DSM_2m.tif -t TL45ne_DTM_2m.tif
```

By default this will just produce the intensity from the north and south on the point defined by the latitude and longitude coordinates. To produce the 2D projection, additionally pass the `--proj` argument, with optional horizontal and vertical extent of the surface in metres:

```bash
--proj --horizontal 20 --vertical 8
```
",1,1,1,0,solar-energy,"[digital-surface-model, gardening, heating, heightmap, lidar, lidar-data, satellite-data, solar-energy]",00000
965,watering,santiagobattaglino,N/A,https://github.com/santiagobattaglino/watering,https://api.github.com/repos/santiagobattaglino/watering,Watering system powered by solar energy with ESP32. It contains a relay to power on / off a water bump using deep sleep mode. It can be configured using an Android App running Ktor server. ,,1,1,1,0,solar-energy,"[android, arduino, battery-monitor, deepsleep-mode, esp32, http-client, http-server, ktor, relay, solar-energy, webserver]",00000
966,solcast-ts,Siliconrob,N/A,https://github.com/Siliconrob/solcast-ts,https://api.github.com/repos/Siliconrob/solcast-ts,Solcast API TypeScript Client library,"[![Build Status](https://travis-ci.org/Siliconrob/solcast-ts.svg?branch=master)](https://travis-ci.org/Siliconrob/solcast-ts)
[![NPM:](https://img.shields.io/npm/v/node-npm-template.svg)](https://www.npmjs.com/package/solcast)
[![Join the chat at https://gitter.im/solcast-ts/Lobby](https://badges.gitter.im/solcast-ts/Lobby.svg)](https://gitter.im/solcast-ts/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

# Live Glitch :sun_with_face:[Demo](https://solcast-demo.glitch.me/):sun_with_face:

## Solcast TypeScript API Client library

TypeScript library for querying the Solcast API async/Promise based

This module allows a registered users to query the Solcast API [https://api.solcast.com.au](https://api.solcast.com.au).  You will need to register your user account to obtain an API key [https://solcast.com.au/api/register](https://solcast.com.au/api/register/).  Without an API key you will not be able to successfully obtain valid API results.


### API async/Promise based
#### Power.forecast(LatLng point, PowerOptions options?)
Returns a PowerForecast promise at the location of the LatLng point input

``` javascript
export interface PowerForecast {
    forecasts: Forecast[];
}

export interface Forecast {
    period_end: Date;
    period: string;
    pv_estimate: number;
}
```

#### Radiation.forecast(LatLng point, RadiationOptions options?)
Return RadiationForecast promise at the location of the LatLng point input

``` javascript
export interface RadiationForecast {
    forecasts: Forecast[];
}

export interface Forecast {
    ghi: number;
    ghi90: number;
    ghi10: number;
    ebh: number;
    dni: number;
    dni10: number;
    dni90: number;
    dhi: number;
    air_temp: number;
    zenith: number;
    azimuth: number;
    cloud_opacity: number;
    period_end: Date;
    period: string;
}
```

### Examples

#### NOTE: 
You can use standard environment variables to hold your API key and not need to pass the optional {Radiation|Power}Options object to each function

Environment variable names
```
SOLCAST_API_KEY
SOLCAST_API_URL
```

Accessible through common process environment variable.
```
process.env.SOLCAST_API_KEY
process.env.SOLCAST_API_URL
```


#### Typescript
``` javascript
import * as solcast from 'solcast';

const point = solcast.latLng(-33.865143, 151.209900); // Sydney, Australia

const radiationOptions = solcast.Options.radiation();
radiationOptions.APIKey = 'YOUR API KEY HERE';

const promiseFn = solcast.Radiation.forecast(point, radiationOptions);
promiseFn.then(results => {
	console.log(results);
})
.catch(err => {
	console.log(err);
});

```

#### Javascript Radiation async
``` javascript
const solcast = require('solcast');
const point = solcast.latLng(-33.865143, 151.209900); // Sydney, Australia
const radiationOptions = solcast.Options.radiation();
radiationOptions.APIKey = 'YOUR API KEY HERE';
const fn = async function() {
	return await solcast.Radiation.forecast(point, radiationOptions)
};
fn().then(results => {
	console.log(results);
})
.catch(err => {
	console.log(err);
});
```

#### Javascript Radiation Promise
``` javascript
const solcast = require('solcast');
const point = solcast.latLng(-33.865143, 151.209900); // Sydney, Australia
const radiationOptions = solcast.Options.radiation();
radiationOptions.APIKey = 'YOUR API KEY HERE';
const results = solcast.Radiation.forecast(point, radiationOptions);
results.then(results => {
    console.log(results);
})
.catch(err => {
    console.log(err);
});
```

#### JSON sample results
```
{ forecasts: 
   [ { ghi: 0,
       ghi90: 0,
       ghi10: 0,
       ebh: 0,
       dni: 0,
       dni10: 0,
       dni90: 0,
       dhi: 0,
       air_temp: 10,
       zenith: 103,
       azimuth: -88,
       cloud_opacity: 3,
       period_end: '2017-08-31T19:30:00.0000000Z',
       period: 'PT30M' },
    ...
   ]
}
```

### Development note
1. Copy `.env.json.sample` to `.env.json` 
2. Set `SOLCAST_API_KEY` on json file after register from <https://solcast.com.au/api/register/>
",1,1,2,5,solar-energy,"[api-client, async, forecast, forecasting, power, radiation, solar-energy, typescript, worldwide]",00000
967,tracer-log,spacestate1,N/A,https://github.com/spacestate1/tracer-log,https://api.github.com/repos/spacestate1/tracer-log,Lightweight Rust program to extract data from the Epsolar/Epever Tracer BN Series MPPT. ,"# tracer-log
Lightweight program to record data from TEpsolar/Epever Tracer BN MPPT solar charge controllers. This works with a USB to RS485 adapter to read and record data as a CSV file or easy to read data points. Output is suitable for a database import or processing with other programs.  Also has options to extract data from an attached eLOG01 reader.  

Install instructions: 

1. git clone https://github.com/spacestate1/tracer-log.git
2. cd tracer-log
3. cargo build --release 
4. sudo ./target/release/tracer-log -h

#D3 dashboard. 
Simply put the index.html and the d3.v4.js files into a web hosting directory and point tracer-log's output to the same directory. 
The datafile's name is 711_2022.csv by default but can be changed to anything else in index.html.
Example: 
Apache's default web dir is /var/www/html
![d3-dashboard](https://user-images.githubusercontent.com/7908850/181916472-9f50b997-98f7-4d35-886b-6217487992b0.jpg)
",1,1,2,0,solar-energy,"[epever, mppt, raspberry-pi, rs485, rust, solar-energy]",00000
968,SolarTrackingPanel,vbala29,N/A,https://github.com/vbala29/SolarTrackingPanel,https://api.github.com/repos/vbala29/SolarTrackingPanel,JHU-APL Intern Challenge 2021.,"# SolarTrackingPanel
JHU-APL FPS Intern Challenge 2021. Vikram Bala, Thomas Nguyen, Michael Bock, Jared Gibson, Ethan Cua

This is the code written for a dual axis solar panel that tracks the sun throughout the day on its azimuth as well as elevation angle.
Code programs an Arduino UNO microcontroller and controllers two 28-BYJ stepper motors via the ULN2003 driver board. 
",1,1,1,0,solar-energy,"[arduino, esp8266, solar-energy]",00000
969,solax_monitor,GitHub4Eddy,N/A,https://github.com/GitHub4Eddy/solax_monitor,https://api.github.com/repos/GitHub4Eddy/solax_monitor,This QuickApp monitors your Solax managed Solar Panels,"# solax_monitor

This QuickApp monitors your Solax managed Solar Panels
The QuickApp has (child) devices for Solarpower/m², Today production, Total production, Total Power to Grid, Total Energy to Grid, Consumed Energy, Energy from Grid, Total Power/m², Battery Energy, AC Power R, AC Power S, AC Power T, Battery Power, Power DC1, Power DC2, Power DC3 and Power DC4
The rateType interface of child device Today Energy is automatically set to ""production""
The readings from the child device Today Energy will be shown in the new energy panel 
The readings from the child device Total Energy is automatically set to the right Wh unit (Wh, kWh, MWh or GWh) 
See API documentation on https://www.eu.solaxcloud.com/phoebus/resource/files/userGuide/Solax_API.pdf
User can get a specific range of information through the granted tokenID. Please obtain your tokenID on the API page of Solaxcloud for free.
The tokenID can be used to obtain real-time data of your inverter system. The obtain frequency need to be lower than 10 times/min and 10,000 times/day.

TODO: 
- change to standard ratetypes

Version 3.0 (11th January 2023)
- Changed the descriptions of the Solax Cloud values
- Converted the feedinpower value from positive to negative or from negative to positive
- Added translation for English, Dutch and Portugese
- Added child device for consumeenergy

Version 2.1 (4th December 2022)
- Prevented almost empty responses like these: {""success"":false,""exception"":""Query success!"",""result"":""this sn did not access!""}
- Added log text to main device if no data from Solax Cloud 

Version 2.0 (16th April 2022)
- Added Child Devices for feedinpower, feedinenergy, consumeenergy, feedinpowerM2, soc, peps1, peps2, peps3, batPower, powerdc1, powerdc2, powerdc3, powerdc4
- Added all values returned from the Solax Cloud to the labels
- Changed all the device types to the most current ones
- Changed the handling of bad responses from the Solax Cloud
- Replaced null values in responses with 0.0
- Optimized some code

Version 1.0 (17th November 2021)
- Tested, ready for release

Version 0.2 (15th November 2021)
- Changed json response

Version 0.1 (13th November 2021)
- First (test) version

Variables (mandatory and created automatically): 
- tokenId = token ID of your Solax Inverter, obtain your tokenID on the API page of Solaxcloud for free
- inverterSN = Unique identifier (Serial No.) of your Solax inverter
- solarM2 = The amount of m2 Solar Panels (use . for decimals) for calculating Solar Power m² (default = 0)
- interval = The default is 300 seconds (5 minutes), the daily API limitation is maximum 10 times/min and 10,000 times/day
- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)

Example json string (https://www.solaxcloud.com:9443/proxy/api/getRealtimeInfo.do?tokenId={tokenId}&sn={sn}):
{""exception"":""Query success!"",""result"":{""inverterSN"":""XBT422Fnnnnnnn"",""sn"":""SNWERTYUIO"",""acpower"":480.0,""yieldtoday"":876.0,""yieldtotal"":99860.6,""feedinpower"":0.0,""feedinenergy"":0.0,""consumeenergy"":0.0,""feedinpowerM2"":0.0,""soc"":0.0,""peps1"":0.0,""peps2"":0.0,""peps3"":0.0,""inverterType"":""4"",""inverterStatus"":""102"",""uploadTime"":""2021-11-15 10:54:36"",""batPower"":0.0,""powerdc1"":26.0,""powerdc2"":29.0,""powerdc3"":null,""powerdc4"":null},""success"":true}
{""success"":true,""exception"":""Query success!"",""result"":{""inverterSN"":""H3UE*********"",""sn"":""SW********"",""acpower"":575.0,""yieldtoday"":2.5,""yieldtotal"":445.3,""feedinpower"":-44.0,""feedinenergy"":6.23,""consumeenergy"":1292.27,""feedinpowerM2"":0.0,""soc"":15.0,""peps1"":0.0,""peps2"":0.0,""peps3"":0.0,""inverterType"":""5"",""inverterStatus"":""102"",""uploadTime"":""2022-04-16 07:55:03"",""batPower"":-355.0,""powerdc1"":0.0,""powerdc2"":213.0,""powerdc3"":null,""powerdc4"":null}}

API items: Description (Accuracy) (Unit) 
- inverterSN: Unique identifier of inverter (Serial No.)
- sn: Unique identifier of communication module (Registration No.)
- acpower: Inverter.AC.power.total (1) (W)
- yieldtoday: Inverter.AC.energy.out.daily (0.1) (KWh)
- yieldtotal: Inverter.AC.energy.out.total (0.1) (KWh) 
- feedinpower: Grid.power.total (1) (W)
- feedinenergy: Grid.energy.toGrid.total (0.01) (KWh) 
- consumeenergy: Grid.energy.fromGrid.total (0.01) (KWh) 
- feedinpowerM2: Inverter.Meter2.AC.power.total (1) (W) 
- soc: inverter.DC.battery.energy.SOC (1) (%)
- peps1: Inverter.AC.EPS.power.R (1) (W)
- peps2: Inverter.AC.EPS.power.S (1) (W)
- peps3: Inverter.AC.EPS.power.T (1) (W)
- inverterType: Inverter type, details refer to Table 4 in appendix
- inverterStatus: Inverter status, details refer to Table 5 in appendix
- uploadTime: Update time (format 2016-10-26 17:33:01)
- batPower: Inverter.DC.Battery.power.total (1) (W)
- powerdc1: Inverter.DC.PV.power.MPPT1 (1) (W)
- powerdc2: Inverter.DC.PV.power.MPPT2 (1) (W)
- powerdc3: Inverter.DC.PV.power.MPPT3 (1) (W)
- powerdc4: Inverter.DC.PV.power.MPPT4 (1) (W)
",1,1,1,0,solar-energy,"[energy, energy-meter, energy-monitor, fibaro, fibaro-hc3, fibaro-home-center, quickapp, solar, solar-energy, solar-system, solax, solax-inverter, solax-power]",00000
970,SolMultinomClass,frimane,N/A,https://github.com/frimane/SolMultinomClass,https://api.github.com/repos/frimane/SolMultinomClass,A Dirichlet-multinomial mixture model-based approach for daily solar radiation classification,"# SolMultinomClass: Daily Solar Irradiance Clustering

## `SolMultinomClass`

`SolMultinomClass` package offers an R-implimentation of a new non-parametric Bayesian method for daily solar irradiance clustering. In many situations, there will be insufficient prior information and data to select the appropriate model complexity and size that best describe the data, which often lead to misleading results when one or more model assumptions are violated. Hence `SolMultinomClass` allows a more flexible and Bayesian specification of distributions, so that the essential characteristics of the model are **learned only from the data** rather than specified in advance. The method is detailed in the attached paper below published in the Journal of [Solar Energy](https://www.sciencedirect.com/science/article/pii/S0038092X1830611X). 

`SolMultinomClass` package includes a set of functions allowing: 
- a clustering method namely Dirichlet multinomial mixture model. 
- a function to calculate the extraterrestrial solar radiation at a given location. 
- a function to calculate the day duration. 
- a function to encode the data as vectors of occupation numbers (as multinomial distribution samples)___for more details, see the attached paper below. 
- a method for sizing stand-alone PV systems based on the loss of load probability concept.

## Software

You can install SolMultinomClass with the [remotes](https://install-github.me/r-lib/remotes) package:
```
remotes::install_github(""frimane/SolMultinomClass"")
```
or with [devtools](https://cran.r-project.org/web/packages/devtools/index.html):
```
devtools::install_github(""frimane/SolMultinomClass"")
```

## License

This package is free and open source software, licensed under GPLv2. Users are invited to adopt and adapt this work for whatever purpose they desire.

## Citation

If you use `SolMultinomClass` in a publication, please cite the original paper describing the model implemented in this software as:
```
Frimane, Â., Aggour, M., Ouhammou, B., Bahmad, L., 2018. A dirichlet-multinomial mixture model-based approach for
daily solar radiation classification. Solar Energy 171, 31–39. URL: http://www.sciencedirect.com/science/article/pii/S0038092X1830611X, doi:https://doi.org/10.1016/j.solener.2018.06.059.
```
For BibTeX users:
```
@article{Frimane2018,
title = ""A Dirichlet-multinomial mixture model-based approach for daily solar radiation classification "",
journal = ""Solar Energy "",
volume = ""171"",
pages = ""31-39"",
year = ""2018"",
issn = ""0038-092X"",
doi = ""https://doi.org/10.1016/j.solener.2018.06.059"",
url = ""https://www.sciencedirect.com/science/article/pii/S0038092X1830611X"",
author = ""Âzeddine Frimane and Mohammed Aggour and Badr Ouhammou and Lahoucine Bahmad""
}
```

## Contact
For any queries, please email Azeddine.frimane@yahoo.com or Azeddine.frimane@uit.ac.ma, I will be happy to help.
",1,1,2,0,solar-energy,"[classification-methods, nonparametric-statistics, solar-energy]",00000
971,EnvoyVenusDriver,jaedog,N/A,https://github.com/jaedog/EnvoyVenusDriver,https://api.github.com/repos/jaedog/EnvoyVenusDriver,A driver to integrate the Enphase Envoy device with Victron Venus OS as a PV Inverter. The Envoy provides data from the IQ7 micro inverters.,# EnvoyVenusDriver,1,1,1,1,solar-energy,"[enphase, solar, solar-energy, venusos-device, victron]",00000
972,tesla-optimizer-tutorial,tesla-optimizer,tesla-optimizer,https://github.com/tesla-optimizer/tesla-optimizer-tutorial,https://api.github.com/repos/tesla-optimizer/tesla-optimizer-tutorial,Tutorial for DYI Tesla charge optimization ,"# tesla-optimizer-tutorial
[![CC BY-SA 4.0][cc-by-sa-shield]][cc-by-sa]

[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/
[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png
[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg

[Guide de montage d’un système d’optimisation de charge en continu pour véhicules Tesla](https://tesla-optimizer.github.io/) 
",1,1,1,0,solar-energy,"[electric-vehicles, solar, solar-energy, tesla]",00000
973,pv_parameters,jesuscapistran,N/A,https://github.com/jesuscapistran/pv_parameters,https://api.github.com/repos/jesuscapistran/pv_parameters,"This Jupyter Notebook extract the basic PV parameters from the J-V curve of µSMU: Voc, Jsc, FF, Rs, Rp ","# pv_parameters

**Research Objective**

The current Jupyter Notebook extract the basic PV parameters from the J-V curve of [µSMU](https://github.com/joeltroughton/uSMU) device: Voc, Jsc, FF, Rs, Rp.

**Note:** The conversión efficiency is not calculated at this moment. If the insidence irradiance its know you can calculate using the following equation: Efficiency  = (Voc Jsc FF)/(Irradiance [W/m2])

---

<img src=""img/microSMU-and-Solarcell.png"" alt=""micro-SMU and Si Solar cell"">
Fig.1  µSMU   device and a silicon (Si) solar cell

<img src=""img/JV-Curve-4thQuadrant.png"" alt=""micro-SMU and Si Solar cell"">
Fig.2 Curve JV from µSMU and plotted in JupyterNotebook 

##  Device parameters (Si mini Module)

The basic PV parameters were obteined with the following Jupyter Notebook: [light_jv_parameters.ipynb](/light_jv_parameters.ipynb) 


| Parameter     | Approximated  | statsmodels.api | 
| ------------- | ------------- | -------------   |
| Voc [V]       |  2.0999       | 2.0794          |
| Jsc [mA/cm2]  | -0.5867       | -0.5863         |
| FF            |  0.6888       | 0.696           |
| efficiency    |      -        |       -         |
|               |      -        |       -         |
| Rs [ohm cm2]  |      -        |       -         |
| Rp [ohm cm2]  |      -        |       -         |


---

If this code helps you to extract the PV-parameters of JV curves. Please consider buying a cup of coffee to keep coding.

<center>
<a href=""https://www.buymeacoffee.com/capis"" target=""_blank""><img src=""https://cdn.buymeacoffee.com/buttons/default-orange.png"" alt=""Buy Me A Coffee"" height=""41"" width=""174""></a>
<center>
",1,1,1,0,solar-energy,"[jv-curve, photovoltaic, solar-cells, solar-energy]",00000
974,PixelCANLibrary,starfactorypixel,starfactorypixel,https://github.com/starfactorypixel/PixelCANLibrary,https://api.github.com/repos/starfactorypixel/PixelCANLibrary,CAN-based framework for the Pixel (solar-powered car open project),"# Using in your project

In `platformio.ini` add library to the `lib_deps`:
```
lib_deps = 
	# Pixel's CAN library
	https://github.com/starfactorypixel/PixelCANLibrary
```

If you need particular branch or tag, use this syntax:
```
lib_deps = 
	https://github.com/username/library_name#branch_name
	https://github.com/username/library_name#v2.0
```



# Update library in you project

Two ways:
1. Run command in the terminal
2. Create task and run it

## Run command in the terminal
Open terminal in the project's folder and run this command:
`pio lib update`

## Create task and run it
Add the following task ""Update Libraries"" to your project and run it with `ctrl+alt+P` → `Tasks: Run Task` → `Update Libraries` → `Continue without scanning the task output`.  
Task code (place it in the `.vscode\tasks.json`):
```
{
	""version"": ""2.0.0"",
	""tasks"": [
		{
			""type"": ""PlatformIO"",
			""task"": ""Build"",
			""problemMatcher"": [
				""$platformio""
			],
			""group"": ""build"",
			""label"": ""PlatformIO: Build""
		},
		{
			""type"": ""shell"",
			""label"": ""Update Libraries"",
			""command"": ""pio lib update"",
			""presentation"": {
				""echo"": true,
				""reveal"": ""always"",
				""focus"": false,
				""panel"": ""shared"",
				""showReuseMessage"": true,
				""clear"": false
			}
		}
	]
}
```",1,1,1,0,solar-energy,"[library, pixel, solar-car, solar-energy]",00000
975,brest_sun_position,gmaze,N/A,https://github.com/gmaze/brest_sun_position,https://api.github.com/repos/gmaze/brest_sun_position,🌞 🏡 Position du soleil de la maison ,"# Position du soleil à Brest, France

![badge](https://img.shields.io/endpoint?style=flat-square&url=https://raw.githubusercontent.com/gmaze/brest_sun_position/master/data/last_update.json)
![badge](https://img.shields.io/endpoint?style=social&url=https://raw.githubusercontent.com/gmaze/brest_sun_position/master/data/current_azimuth.json)
![badge](https://img.shields.io/endpoint?style=social&url=https://raw.githubusercontent.com/gmaze/brest_sun_position/master/data/current_altitude.json)


<img src=""https://raw.githubusercontent.com/gmaze/brest_sun_position/master/data/position_soleil.png""/> 

```bash
https://raw.githubusercontent.com/gmaze/brest_sun_position/master/data/position_soleil.png
```",1,1,0,0,solar-energy,"[solar, solar-energy]",00000
976,Arduino-Solar-Tracker,the-engineer4,N/A,https://github.com/the-engineer4/Arduino-Solar-Tracker,https://api.github.com/repos/the-engineer4/Arduino-Solar-Tracker,Automated single or dual axis Photo-Voltaic(PV) panel array rotation to achieve maximum surface area exposure to sunlight with automatic nightly orientation reset.  This will optimize solar power generation with 40%-60% improvement in efficiency over fixed PV panel installations.  ,"# Arduino-Solar-Tracker
Automated single or dual axis Photo-Voltaic(PV) panel array rotation to achieve maximum surface area exposure to sunlight with automatic nightly orientation reset.  This will optimize solar power generation with 40%-60% improvement in efficiency over fixed PV panel installations.  
",1,1,1,0,solar-energy,"[renewable-energy, solar-energy, solar-system, solar-tracking-panels, solarpanels]",00000
977,API-calculation-of-solar-explosions-in-frequency-Terahertz,faganello60,N/A,https://github.com/faganello60/API-calculation-of-solar-explosions-in-frequency-Terahertz,https://api.github.com/repos/faganello60/API-calculation-of-solar-explosions-in-frequency-Terahertz,API Developed over the code of Wellington (2016) for calculating solar explosions in the range TeraHertz,"# ISR/CSR Code 

## Dependencies
- jdk 1.8 (or higher)
- maven 3.3.9 (or higher)
## How to build and run
Go to project root folder and run `mvn clean install`.
An `.jar` file will be created at `target/` folder.
To run the server, execute the following `java -jar target/RadioAstronomia-0.0.1-SNAPSHOT.jar`
(make sure java installation is set in your `$PATH` or `%PATH%` (for Unix-like and Windows systems respectively)

## Avaiable Resources

### Request

###### Request: ``` GET /isrcsr ex=<Double>&ntotal=<Double>&bmagco=<Double>&bmagex=<Double>&angle=<Double>&scsize=<Double>&scheight=<Double>&sesize=<Double>&seheight=<Double>&j1=<Double>&j2=<Double>&etr=<Double>&npco=<Double>&npex=<Double>&ecsr=<Double>&xnisrex=<Double>&xncsr=<Double>&tb=<Double>&kf=<Double>```

###### Response example: 
```json
{
  ""isr"": {
    ""frequency"": [Int],
    ""flux"": ""[Int]""
  },
  ""csr"": {
    ""frequency"": [Int],
    ""flux"": ""[Int]""
  },
  ""total"": {
    ""frequency"": [Int],
    ""flux"": ""[Int]""
  },
  ""high"": {
    ""frequency"": [Int],
    ""flux"": ""[Int]""
  },
  ""low"": {
    ""frequency"": [Int],
    ""flux"": ""[Int]""
  },
  ""compact"": {
    ""frequency"": [Int],
    ""flux"": ""[Int]""
  },
  ""extended"": {
    ""frequency"": [Int],
    ""flux"": ""[Int]""
  },
} 
```
",1,1,1,0,solar-energy,"[api-rest, final-year-project, java, server, solar-energy, spring-boot]",00000
978,SRC_Exporter,OkemosSRC,OkemosSRC,https://github.com/OkemosSRC/SRC_Exporter,https://api.github.com/repos/OkemosSRC/SRC_Exporter,Okemos Solar Racing Club data exporter for Prometheus and Grafana monitoring.,"# SRC Exporter

OHS Solar Racing Club data exporter for Prometheus and Grafana.

<img src=""https://cdn.discordapp.com/attachments/991536650414985338/1001024698919944272/unknown.png"" alt=""Grafana Dashboard"">

## Quick Start

SRC Exporter receives data steams from API endpoints and converts them to Prometheus readable metrics.
It is strongly recommended to run the exporter in a [Docker Container](https://www.docker.com/).

Run SRC Exporter in a Docker Container with the following command:

```bash
docker run -p 8090:8080 --name src-exporter -d ghcr.io/okemossrc/src_exporter:main
```

The SRC Exporter metrics will be available at http://localhost:8090/metrics

## Sample Data Submission

To submit sinusoidal sample data streams to the SRC Exporter for testing, add the API endpoint URL and the authorization
token to the `test.js` file.

Example:

```js
const config = {
    token: ""A0b1C2d3E4f5G6"", // replace with your token
    endpoint_url: ""https://example.com"" // replace with your endpoint url 
    // excluding any directory paths but including the protocol (http:// or https://).
}
```

and execute the following command:

```bash
npm test
# or node test.js
```

The sample data generator will then submit sinusoidal data to the SRC Exporter.

### Tokens

Hashes of some tokens are stored in the `lib/hashes.txt` file.

Token - Hash pairs can be generated with the following code:

```node
const {generate_token, hash_token} = require('./lib/auth.js');
const fs = require('fs');

function generate_token_hash_pairs() {
    const token = generate_token();
    fs.appendFileSync('lib/tokens.txt', token + '\n');
    fs.appendFileSync('lib/hashes.txt', hash_token(token) + '\n');
}

generate_token_hash_pairs();
```

## Running the Exporter without Docker

Although not recommended, it is possible to run the SRC Exporter without Docker.

```bash
git clone https://github.com/OkemosSRC/SRC_Exporter.git
cd SRC_Exporter
npm install
npm start
```

The SRC Exporter metrics will be available at http://localhost:8090/metrics

## Prometheus Configuration

After starting the SRC Exporter, you need to configure Prometheus to scrape the SRC Exporter metrics.

Append the following lines to your `prometheus.yml` file, under the `scrape_configs` section:

```yaml
  - job_name: src_exporter
    static_configs:
      - targets: [ 'localhost:8090' ]
```

Then, restart Prometheus:

```bash
sudo systemctl restart prometheus
```

## Grafana Configuration

An importable Grafana dashboard json file can be found [here](grafana/SRC_Grafana_Dashboard.json).

Grafana must be configured to work with Prometheus first.
A detailed guide can be found [here](https://prometheus.io/docs/visualization/grafana/).
",1,1,0,0,solar-energy,"[green-energy, hacktoberfest, hacktoberfest-accepted, solar-car, solar-energy]",00000
979,ENG1135---Projeto-de-Gradua-o-em-Engenharia-TCC-,rafaelvilelasr,N/A,https://github.com/rafaelvilelasr/ENG1135---Projeto-de-Gradua-o-em-Engenharia-TCC-,https://api.github.com/repos/rafaelvilelasr/ENG1135---Projeto-de-Gradua-o-em-Engenharia-TCC-,Graduation Final Project on electrical engineering (PUC-Rio),"# TCC-Plane-of-array
Graduation Final Project on electrical engineering at PUC-Rio university.

My final graduation project in Electrical Engineering at PUC-Rio University involved two key tasks. Firstly, I utilized Python code to handle irradiance outliers in meteorological data through non-linear regression (from scipy curve_fit function), employing functions from the pvlib library to calculate the plane of the array. Secondly, I compared these plane of array results with simulations using the Perez Model in PVsyst and the Perez and Hay-Davies Models in HelioScope.

Additionally, I wrote a final paper titled ""TCC Rafael Vilela Santa Rosa.pdf"".

https://www.maxwell.vrac.puc-rio.br/colecao.php?strSecao=resultado&nrSeq=63761@1
",1,1,1,0,solar-energy,"[helioscope, non-linear-regression, nrel, photovoltaic, pvsyst, python, sam, solar-energy]",00000
980,SolarController,balogh-attila,N/A,https://github.com/balogh-attila/SolarController,https://api.github.com/repos/balogh-attila/SolarController,Solar Inverter Monitor and Controller for Voltronic Solar Inverters.,"# Solar Inverter Controller for inverters based on Voltronic protocol

The main goals of this software is to provide monitoring and control to Voltronic solar inverters in an open source and container native way. It can read metrics form the inverter and write it to an influxdb database, and can write inverter settings from a yaml configuration file to the inverter. The configuration file is monitored for changes and apply any changes without reload.

Tested and in production use on a Growatt 3000-24 SPL and a Growatt 5000 SL solar inverter.

May be working on Voltronic Axpert series inverters and related OEM brand names.

![sample dashboard](docs/dashboard_sample.png)

## Building docker container image
```sh
docker build . -f docker/Dockerfile -t solar:latest
```

## Starting external dependencies
```sh
docker run -dt --name influx --restart unless-stopped \
  --network host \
  --volume /srv/influx/db:/var/lib/influxdb \
  influxdb:1.8.4-alpine

docker run -dt --name grafana --restart unless-stopped \
  --network host \
  --volume /srv/grafana/lib:/var/lib/grafana \
  --volume /srv/grafana/etc:/etc/grafana \
  --volume /srv/grafana/log:/var/log/grafana \
  grafana/grafana:latest
```
Recommended to use better network topology or a firewall in production.

There is an example grafana dashboard in the grafana subdirectory. You need to add an influxdb data source pointed towards the installed influxdb instance to work.

## Running Solar Inverter Controller
Preload the built docker image on the runner machine.
Place the customized configuration file in the /srv/solar directory.

```sh
docker run -d --name solar --restart unless-stopped \
  --env CONFIG=/cfg/config.yaml \
  --volume /srv/solar:/cfg \
  --device /dev/ttyUSB0:/dev/ttyUSB0 \
  solar:latest
```

There is environment variables to configure the influxdb connection, defaulted to localhost:8086. Please see src/influxdbhandler.py.
",1,1,1,0,solar-energy,"[solar-energy, solar-inverter, voltronic, voltronic-axpert-inverters]",00000
981,solar_de,ArnPiano,N/A,https://github.com/ArnPiano/solar_de,https://api.github.com/repos/ArnPiano/solar_de,:de: :sunny: :battery: Germany solar power generation analysis for Space-Time Statistics course CM0477,"# solar_de
:de: :sun: :battery: Germany solar power generation analysis for Space-Time Statistics course CM0477
",1,1,2,0,solar-energy,"[data-analysis, germany, solar-energy, statistics, temporal-data]",00000
982,smapy,jonkerj,N/A,https://github.com/jonkerj/smapy,https://api.github.com/repos/jonkerj/smapy,Submit SMA Solar inverter data to InfluxDB,"# Description
SMApy is a python framework to extract performance data from SMA Solar inverters
and submit it to InfluxDB. It can run standalone, in Docker or even on
Kubernetes.

# Operation
`submitter.py` is the workhorse. It takes a single argument, pointing to a
YAML configfile, which requires the following structure:

```yaml
sma:
  url: https://url-or-ip-of-inverter
  group: usr
  password: user-password
influxdb:
  host: influx-host
  port: influx-port
  ssl: using ssl?
  verify_ssl: True
  username: username
  password: password
  database: database
tags:
  whichever: tags
  you: want
interval: 30
```

# Reverse engineering Webconnect
I have opened the web portal of my inverter while looking at Chrome inspector to
see which HTTP resources where getting fetched. The application fetches these
files upon startup:
* `ObjectMetadata_Istl.json`
* `en-US.json`

The former is an object model of all tags and their meaning. It looks like this:
```json
{
  ""6100_40263F00"": {
    ""Prio"": 1,
    ""TagId"": 416,
    ""TagIdEvtMsg"": 10030,
    ""Unit"": 18,
    ""DataFrmt"": 0,
    ""Scale"": 1,
    ""Typ"": 0,
    ""WriteLevel"": 5,
    ""TagHier"": [
      835,
      230
    ],
    ""Min"": true,
    ""Max"": true,
    ""Sum"": true,
    ""Avg"": true,
    ""Cnt"": true,
    ""SumD"": true
  }
}
```

It appeared that `TagId`, `TagIdEvtMsg`, `Unit` and `TagHier` are entries you
can retrieve from the language file (`en-US.json` in my case). Here is an
excerpt:

```json
{
  ""18"": ""W"",
  ""230"": ""Grid measurements"",
  ""416"": ""Power"",
  ""835"": ""AC Side"",
  ""10030"": ""Power""
}
```

Next, I saw that I, when watching ""Instantaneous values"", the app periodically
retrieved the file `getAllOnValues.json`, with the following structure:

```json
{
  ""result"": {
    ""0199-12345678"": {
      ""6100_40263F00"": {
        ""1"": [
          {
            ""val"": 2600
          }
        ]
      }
    }
  }
}
```

So, what we see here is: ""AC Side - Grid Measurements - Power"" with the value
2600 W.

# Links
Other projects that are similar:
* [pysma](https://github.com/kellerza/pysma)
",1,1,2,1,solar-energy,"[docker, influxdb, kubernetes, python, solar-energy]",00000
983,How-much-energy-can-you-get-from-your-heliostat,pierreloicq,N/A,https://github.com/pierreloicq/How-much-energy-can-you-get-from-your-heliostat,https://api.github.com/repos/pierreloicq/How-much-energy-can-you-get-from-your-heliostat,How much energy can you get from your heliostat?,"# How-much-energy-can-you-get-from-your-heliostat

This code is the R version of the online calculator available on 
<a href=""https://helioreflect.com/en/how-much-energy-can-you-get-from-your-heliostat"">helioreflect.com</a>.

You just need to download the R program <a href=""https://cran.r-project.org/mirrors.html"">here</a> to run this file.

<h2>Sources : </h2>
The computation uses the typical meteorological year of 
<a href=""https://re.jrc.ec.europa.eu/pvg_tools/en/tools.html#TMY"">PVGIS</a>.

CO2 estimations for electricity comes from 
<a href=""https://github.com/tmrowco/electricitymap-contrib/blob/master/config/co2eq_parameters.json"">electricitymap.org</a>.

Glazing transmissivity <a href=""https://energie.wallonie.be/fr/07-06-facteur-solaire-g.html?IDC_PEB=9491&IDD=113659&IDC=9094"">here</a>.


<a href=""https://elyotherm.fr/comparatif-cout-energies-kwh"">Others estimations</a>.

Some code lines come from <a href=""http://cerebralmeltdown.com/"">cerebralmeltdown.com</a>.
",1,1,2,0,solar-energy,"[heliostat, reflector, solar, solar-energy]",00000
984,unofficial-psm3-userguide,AssessingSolar,AssessingSolar,https://github.com/AssessingSolar/unofficial-psm3-userguide,https://api.github.com/repos/AssessingSolar/unofficial-psm3-userguide,,"# unofficial-psm3-userguide

The repository hosts ""unofficial"" (community-developed) documentation about
the NSRDB's PSM3 dataset.

For more information, see the rendered website:
https://assessingsolar.github.io/unofficial-psm3-userguide
",1,1,4,6,solar-energy,"[photovoltaics, solar, solar-energy]",00000
985,SoPan-Finder,YohanssenPardede,N/A,https://github.com/YohanssenPardede/SoPan-Finder,https://api.github.com/repos/YohanssenPardede/SoPan-Finder,"SoPan Finder is an innovative solar panel recommendation platform that leverages weather data collection, machine learning algorithms, and real-time energy production prediction to assist individuals and businesses in making informed decisions about adopting solar energy.","# SoPan-Finder

![logo SoPan.png](https://github.com/YohanssenPardede/SoPan-Finder/blob/ed16622623954e28fa4a54ac207ddc64f6b92535/logo%20SoPan.png)

## Introduction
SoPan Finder is an innovative solar panel recommendation platform that leverages weather data collection, machine learning algorithms, and real-time energy production prediction to assist individuals and businesses in making informed decisions about adopting solar energy. Our mission is to simplify the process of assessing the suitability of installing solar panels and empower users to embrace renewable energy solutions. 

## Background
Based on the article “A Technical and Economic Potential of Solar Energy Application with Feed-in Tariff Policy in Indonesia” (Fathoni, Utama and Kristianto, 2014) Renewable energy especially solar energy is one of the most potential energy sources as Indonesia lies in the equator line where the daylight is abundant and available throughout the year. However, due to the high initial investment costs and many people who do not understand the steps needed to choose and install the most suitable renewable energy systems based on their living environment, especially photovoltaic systems, we would like to introduce SoPan (Solar Panel) Finder as a solution. SoPan Finder will collect weather data (temperature, humidity and wind speed). LSTM algorithm is implemented on the machine learning model to predict the energy production for the solar panel. The platform will utilize user’s input to estimate the energy produced from the solar panel in real-time or in a certain period of time. Based on the result of energy production analysis, the user will be able to consider the suitability of installing the solar panels on their house. In this platform, users will also be able to buy products related to the solar panel recommended by the system.

## Team Member
| Student ID | Name | University | Path |
| ----------- | :--------- | :----------: | :----------: |
| A264DSY1409 | Christine | Universitas Multimedia Nusantara Jakarta | Mobile Developer |
| A264DSY1420 | Ela Setiorini | Universitas Multimedia Nusantara Jakarta | Mobile Developer |
| C088DSY3277 | Nisa Agni Afifah | Sekolah Tinggi Teknologi Cipasung | Cloud Computing|
| C240DSX2669 | Rizki Zulfian Nasrul Muna | Universitas Mataram | Cloud Computing |
| M350DSX0236 | Yohanssen Pradana Pardede | Universitas Sumatera Utara | Machine Learning |
| M350DSY0442 | Nasywa Choiriana Safitri | Universitas Sumatera Utara | Machine Learning |

## Project Scope
* A system to predict solar panel performance
* A system to provide solar panel recommendations to users

### Branch
Our repository has 5 branches:
* machine-learning to see the progress of machine learning.
* auth-CC, and predict-API to see the progress of Cloud Computing
* mobile-dev to see the progress of Mobile Developer
* main to see profile our repository
",1,1,1,0,solar-energy,"[android-application, cloud, cloud-computing, expressjs, lstm, machine-learning, renewable-energy, solar-energy, solar-panels]",00000
986,ElectricSelfConsumptionMonitor,Umochi,N/A,https://github.com/Umochi/ElectricSelfConsumptionMonitor,https://api.github.com/repos/Umochi/ElectricSelfConsumptionMonitor,"Progetto per monitor autoconsumo, produzione, consumo e scambio energia elettrica","<h1>#ElectricSelfConsumptionMonitor</h1>
<h2>Progetto per il monitoraggio della produzione, cosumo e scambio di energia elettrica di un sistema che integara un impianto di pannelli solari o eolico.</h2>
<p>L'hardware che si occupa di ricavare le quantit&agrave;di energia transitati sui fili dell'impianto &egrave; costituito da una scheda <strong>Arduino Uno</strong>,<br /> collegata alla rete tramite <strong>Ethernet-Shield</strong>.<br />La lettura dell'energia trasitate viene ricavata tramite 3 pinze amperometriche non invasive che vengono applicate</p>
<ul>
<li>sul filo che collega l'impiamto fotovoltaico al contatore.</li>
<li>sul filo che arriva dalla rete elettrica verso il contatore.</li>
<li>sul filo che collega il contatore con l'impiato elettrico di casa.</li>
</ul>
<p><img src=""https://raw.githubusercontent.com/Umochi/AutomaticHenHouse/master/images/arduino_uno_main_board.jpg"" alt="""" width=""200"" height=""200"" /><img src=""https://raw.githubusercontent.com/Umochi/AutomaticHenHouse/master/images/ethernet-shield.jpg"" alt=""Ethernet-Shield"" width=""200"" />&nbsp;</p>
<p><img src=""https://raw.githubusercontent.com/Umochi/ElectricSelfConsumptionMonitor/master/images/schemaEnergia.jpg"" width=""439"" height=""405"" /></p>
<hr />
<p>La parte Hardware del sistema di monitoraggio, &egrave; costituira da un modulo <strong>Arduino Uno</strong>, integrato con una <strong>ethernet-shield</strong>, si collega alla rete lan e invia periodicamente le informazioni al server.<br />Al fine di ridurre il traffico dati, viene inviata una nuova lettura, solo quando questa varia in modo sensibile rispetto all'ultima inviata.<br />Viene invece inviata anche in caso di variazioni minime allo scadere di un timeout.</p>
<hr />
<h3>Il comportamento del sistema &egrave; il seguente:</h3>
<ul>
<li>Arduino</li>
<li>L'interfaccia pu&ograve; essere esposta su internet, nel mio caso utilizzo un servizio gratuito di <strong>DDNS</strong> e <strong>NginX</strong> per gestire reverse proxy e autenticazione.</li>
</ul>
",1,1,2,0,solar-energy,"[amperometric-clamp, ampherometric-, arduino, ethernet-shield, gauge, iot, java, json, node-red, node-red-dashboard, postgres, rest-api, segment-display, self-consumption, solar-energy, spring-boot]",00000
987,suntracker2-r2,fm4dd,N/A,https://github.com/fm4dd/suntracker2-r2,https://api.github.com/repos/fm4dd/suntracker2-r2,,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,1,0,solar-energy,"[arduino, astrometry, photovoltaic, solar-energy]",00000
988,CDR-Ledger-Foundation,Epurepass,N/A,https://github.com/Epurepass/CDR-Ledger-Foundation,https://api.github.com/repos/Epurepass/CDR-Ledger-Foundation,CDR Ledger Foundation is an American Research and Product Development non-profit entity.,"# CDR-Ledger-Foundation
CDR Ledger Foundation is an American Research and Product Development non-profit entity.

Contract Address:
https://etherscan.io/address/0x9bcab41dd68329af9839dbcd021acf39a40abed2 

To support our efforts for Research and Product Development to reduce Carbon Emission, please send contributions to Ethereum Wallet: 0x6a4512461d195aBB1c300430498bba8be08B588f

CDR Ledger Foundation currently only excepts Ethereum. 
",1,1,1,0,solar-energy,"[biomas, carbon-emissions, cdr-crypo, epurepass, epurepass-labs-inc, geothermal-energy, investing, recycling, research-and-development, social-responsibility, solar-energy, wind-energy]",00000
989,Solar4FarmIA,sudogauss,N/A,https://github.com/sudogauss/Solar4FarmIA,https://api.github.com/repos/sudogauss/Solar4FarmIA,Solar4FarmIA aims to describe and to simulate a autonomous power system composed of batteries and solar panels which allows its user to provide enough energy for smart agriculture robot,"# Solar4FarmIA

This project contains a [report](https://github.com/sudogauss/Solar4FarmIA/blob/main/docs/Alimentation%20de%20FarmBot%20et%20son%20impact%20carbone.pdf) describing an autonomous power system based on renewable solar energy and its carbon footprint. This report discusses a way to build this type of system, evaluates energy requirements of a smart agriculture bot(FarmBot), describes a way to simulate solar activity, bot's activity and power system behavior. It gives some formulas to calculate the carbon footprint of solar panels and all the power system.

## Code

The Solar4FarmIA folder contains the code simulating FarmBot(***bot.py***), Power system(***power_system.py***) and Solar activity(***solar_activity.py***). It also contains a ***timer.py*** iterator for the each-day-and-hour-of-the-year iteration. You can change consts in ***const.py*** to modify simulation parameters.

## Run

***Note: follow this steps only for Linux, use your own method to generate venv and run code for Windows.***

***Attention!!!: You must respect the right format of your csv data files. Take a look at the examples in data folder***

Clone the repository:

```bash
    $ git clone git@github.com:sudogauss/Solar4FarmIA.git
    $ cd Solar4FarmIA
```

Run the following commands to generate virtual environment and install all dependencies

```bash
    $ python3 -m venv venv
    $ source venv/bin/activate
    $ pip3 install -r requirements.txt
```

There is two simulations available: solar panel comparison ***(panel_simulation.py)*** and solar panel surface comparison ***(surface_simulation.py)***. Run:

```bash
    $ cd Solar4FarmIA
    $ python3 panel_simulation.py <epochs> \
    $ <solar_data_file.csv> <solar_panels.csv>
```

or

```bash
    $ cd Solar4FarmIA
    $ python3 surface_simulation.py <epochs> \
    $ <solar_data_file.csv>
```

Example for panel comparison simulation. You must open solar_panel.csv to see the corrseponding number of each solar panel:

```bash
    $ cd Solar4FarmIA
    $ python3 panel_simulation.py 20 data/solar_data.csv data/solar_panel.csv
```

Example for panel surface simulation:

```bash
    $ cd Solar4FarmIA
    $ python3 panel_simulation.py 20 data/solar_data.csv
```",1,1,1,0,solar-energy,"[python3, scientific, solar-energy, solar-system, solar-system-simulation]",00000
990,duke-solar-graphs,aklowther,N/A,https://github.com/aklowther/duke-solar-graphs,https://api.github.com/repos/aklowther/duke-solar-graphs,"Various bits of my evangelistic site, providing real data from my Duke power bill","# duke-solar-graphs

[![Uptime Robot status](https://img.shields.io/uptimerobot/status/m778918918-3e92c097147760ee39d02d36.svg)](https://victorious-stone-089b1c90f.2.azurestaticapps.net)

Various bits of my evangelistic site, providing real data from my Duke power bill",0,0,2,0,solar-energy,"[solar, solar-energy, solarcity]",00000
991,Tracking,orestispanago,N/A,https://github.com/orestispanago/Tracking,https://api.github.com/repos/orestispanago/Tracking,SCoSCo Tracking absorber - Optical simulations,"# SCoSCo tracking absorber

### File types

- **.stinput** : SolTrace project - Contains all device elements and properties. Loading from the GUI is not necessary

- **.csi** :  spline file - Reflector shape

- **.lk** : scripts

### Scripts

- singletrace: runs trace for only one sun position
 
- sunpos_0_1000: test for multiple sun position simulations

- trace2csv: Runs simulation for each sun position and saves ray hit coordinates on flat absorber to csv

- plot_csv2gif: Reads csv files, plots and creates gif
",0,0,1,0,solar-energy,"[lk, solar-energy, sun-position]",00000
992,Soltrace-SCO4,orestispanago,N/A,https://github.com/orestispanago/Soltrace-SCO4,https://api.github.com/repos/orestispanago/Soltrace-SCO4,Optical simulations for SCO4 prototype with SolTrace software and LK Script,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,2,0,solar-energy,"[lk-script, solar-energy, soltrace]",00000
993,solaredge-forecast,nelbs,N/A,https://github.com/nelbs/solaredge-forecast,https://api.github.com/repos/nelbs/solaredge-forecast,Home assistant component that forecasts the total solar energy generation for a specified time period.,"# Solaredge Forecast integration

Home assistant component that forecasts the total solar energy generation for a specified time period by using the [solaredge library](https://pypi.org/project/solaredge/)

## How to install

1. Make sure yo have [hacs](https://hacs.xyz/) installed
2. Add this repository as custom repository to hacs by going to hacs, integrations, click on the three dots in the upper right corner and click on custom repositories.
3. In the repository field, fill in the link to this repository (https://github.com/nelbs/solaredge-forcast) and for category, select `Integration`. Click on `Add`
4. Go back to hacs, integrations and add click on the blue button `Exlore and download repositories` in the bottom left corner, search for `Solaredge Forecast` and install it 
5. Reboot HA
6. In HA goto Config -> Integrations. Add the Solaredge-Forecast integration to HA.
7. In your lovelace dashboard, add a card with the Solaredge-Forecast entities.

## Options

The Solaredge Forecast integration has the following options:

**Site id**

The ID of the solar installation. You can find the ID at the Solaredge web portal.
Go to https://monitoring.solaredge.com and login with your Solaredge account. Then go to Admin >> Site access >> API access

**Account key**

The api key which you can find at the same place as the site ID

**Startday of the forecast period**

Day of the month from which the total energy will be summed.  

**Startmonth of the forecast period**

Month from which the total energy will be summed. If the startdate is after the current date the
previous year is used for the startdate. If the startdate is before the current date the current year will be used.

**Endday of the forecast period**

Day of the month for which the total energy will be predicted.  

**Endmonth of the forecast period**

Month of the month for which the total energy will be predicted. If the enddate is after the current date the
current year is used for the enddate. If the enddate is before the current date the next year will be used.
",0,0,1,0,solar-energy,"[forecast, hacs-integration, python, solar-energy, solaredge-api]",00000
994,Solar_energy_estimator_v01,amritPVre,N/A,https://github.com/amritPVre/Solar_energy_estimator_v01,https://api.github.com/repos/amritPVre/Solar_energy_estimator_v01,,"# Solar_energy_estimator_v01

# Solar Energy Estimator App Documentation

## Overview

The Solar Energy Estimator App is a powerful tool for predicting solar energy production based on specific parameters. It allows users to input various parameters such as plant capacity, location coordinates, tilt angle, azimuth angle, and module type. Based on these inputs, the app generates hourly, daily, and monthly solar irradiance values on an inclined plane (GII) and estimates the corresponding solar energy generation.

The primary data source for the application is the PVLIB library, which uses the NASA Power Database.

## Key Features

### Location-Based Solar Energy Estimation

The user can enter their location coordinates (latitude and longitude), which the app uses to estimate solar irradiance and energy production for that specific location.

### Solar Panel Configuration

The app allows the user to configure their solar panel settings by entering the plant capacity, tilt angle, azimuth angle, and the desired module type. These settings are used to more accurately estimate the energy production.

### Time-Based Energy Estimation

The app provides solar energy generation values for different time frames: hourly, daily, and monthly. This allows users to understand the variability of solar energy production over time and plan accordingly.

### Visual Representation

The app generates dynamic charts for visual representation of the estimated solar energy values, using the powerful plotting library, Plotly.

## API Used

The app leverages the PVLIB Python library to make solar energy predictions. PVLIB provides a set of procedures and functions that allow developers to model solar energy production with a high degree of accuracy.

## Functionality

Upon receiving user input, the app employs PVLIB's solar position algorithm to calculate the position of the sun at various times of the day. The solar irradiance on an inclined plane is then calculated based on these solar positions. Finally, the app estimates solar energy production based on the calculated solar irradiance and the solar panel configuration specified by the user.

## Conclusion

The Solar Energy Estimator App is a user-friendly and robust tool for anyone interested in estimating solar energy production. Whether for home use, commercial projects, or academic research, this app provides accurate estimations and insightful visualizations, making the complex task of predicting solar energy generation simple and straightforward.
",0,0,1,0,solar-energy,"[pvlib, python, solar-energy, streamlit]",00000
995,solarlog-api,Trickfilm400,N/A,https://github.com/Trickfilm400/solarlog-api,https://api.github.com/repos/Trickfilm400/solarlog-api,Nodejs-Api for solar-log devices to fetch inverter values and more,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,"[node, nodejs, nodejs-api, nodejs-modules, npm, npm-api, npm-package, solar, solar-energy, solar-log, solar-logger, solar-system]",00000
996,solar,dmkeen,N/A,https://github.com/dmkeen/solar,https://api.github.com/repos/dmkeen/solar,"Spring Boot app to pull data from the Fronius Solar API, persist to MySQL and display in Grafana. Includes solar forecast integration with Solcast.","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,"[fronius, fronius-datamanager, fronius-solar-api, grafana-dashboard, photovoltaic, pv-systems, solar-energy, solcast]",00000
997,rctjavalib,Baumus,N/A,https://github.com/Baumus/rctjavalib,https://api.github.com/repos/Baumus/rctjavalib,"A library for communication with solar power inverters of the RCT power brand, not endorsed by or affiliated with the eponymous company.","# rctjavalib

A library for communication with solar power inverters of the RCT power brand. This library is designed to interface with RCT power inverters using JavaScript.

RCT power is a registered trademark of RCT Power GmbH. This library is not provided by, endorsed by, supported by, or affiliated with the company in any way.

It is provided without any warranties, entirely for use at your own risk under an LGPL 2.1 license.

## Installation

To use the `rctjavalib` library in your project, you can install it via npm:

```bash
npm install rctjavalib
```

## Usage

After installation, you can import and use the library in your JavaScript project:

```javascript
const Connection = require('rctjavalib/connection.js');
const { Identifier } = require('rctjavalib/datagram.js');

// Establish a connection
const conn = new Connection('my-RCT-hostname-or-IP-address');
await conn.connect();

// Example: Query the power generated by Solar Generator A
const power = await conn.queryFloat32(Identifier.SOLAR_GEN_A_POWER_W);
console.log(`Solar generator A power: ${Math.round(power)} W`);

// Close the connection when done
conn.close();
```

## Architecture

- `datagram.js`: Defines basic constants such as commands, on-device identifiers, and datagram packets. It also handles conversions of datagram payloads to JavaScript types.
- `crc.js`: Implements the cyclic redundancy check algorithm to ensure data integrity used by the RCT.
- `build.js`: Provides functionality for assembling datagrams to send.
- `parse.js`: Parses incoming bytes into datagrams.
- `connection.js`: Integrates builders and parsers into a bidirectional connection with the device. It also offers convenience methods for synchronously querying identifiers.

## Testing

The library uses Jest for testing. To run tests, use the following command:

```bash
npm test
```

---

This example demonstrates how to establish a connection, query the power generated by Solar Generator A, and then close the connection. You can use similar methods to query other data points by referencing the appropriate identifiers from the `Identifier` class in `datagram.js`.
",0,0,1,0,solar-energy,"[javascript-library, rct-power, solar-energy]",00000
998,solcast-bash,Siliconrob,N/A,https://github.com/Siliconrob/solcast-bash,https://api.github.com/repos/Siliconrob/solcast-bash,Solcast API bash shell scripting,"# Solcast API shell scripting

[Bash](https://www.gnu.org/software/bash/) & [cURL](https://curl.haxx.se) examples for querying the [Solcast API](https://api.solcast.com.au)

This guide demonstrates using curl and bash for registered users to query the Solcast API [https://api.solcast.com.au](https://api.solcast.com.au).  You will need to register your user account to obtain an API key [https://solcast.com.au/api/register](https://solcast.com.au/api/register/).  Without an API key you will not be able to successfully obtain valid API results.

## Note
It is **recommended** to use a robust client library for programmable use of the API, **but** sometimes a direct approach is useful

### Recommended aliases to add to your `.bash_profile`
``` bash
# Add get-json alias
echo ""alias=get-json=\""curl -X GET -H 'Accept: application/json'\"""" >> ~/.bash_profile;
# Add get-csv alias
echo ""alias=get-csv=\""curl -X GET -H 'Accept: text/csv'\"""" >> ~/.bash_profile;
# Update shell
source ~/.bash_profile;
```

### Recommended `environment variables` to add to your `.bash_profile`
``` bash
# Add solcast API url
echo ""export SOLCAST_API_URL=https://api.solcast.com.au"" >> ~/.bash_profile;
# Add solcast API key
echo ""export SOLCAST_API_KEY=YOUR_API_KEY"" >> ~/.bash_profile;
# Update shell
source ~/.bash_profile;
```

### Check if your `environment variables` are loaded if not you may need to rerun the command `source ~/.bash_profile` or re-initialize your terminal
``` bash
# Print environment variables
echo ""SOLCAST_API_URL = ${SOLCAST_API_URL}"";
echo ""SOLCAST_API_KEY = ${SOLCAST_API_KEY}"";
```

### Session variables for Radiation requests
``` bash
export lat=149.117;
export lng=-35.277;
```

### Put it together and make a Radiation request
``` bash
get-csv ""${SOLCAST_API_URL}/radiation/forecasts?longitude=${lat}&latitude=${lng}&api_key=${SOLCAST_API_KEY}""
```

[Sample Result](samples/radiation.csv)

### Sample bash script to read a csv file and get a radiation forecast for each

[Radiation Forecast Script](get-rad-forecasts.sh)

Make the script executable `chmod a+x get-rad-forecasts.sh`

Outputs results to current directory
``` bash
./get-rad-forecasts.sh -i samples/sample_latlngs.csv
```
Specify a results folder directory
``` bash
./get-rad-forecasts.sh -i samples/sample_latlngs.csv -o results
```
",0,0,2,0,solar-energy,"[api-client, bash-script, curl, forecast, radiation, solar-energy]",00000
999,Solar-Pant-Calc,Manuelopez,N/A,https://github.com/Manuelopez/Solar-Pant-Calc,https://api.github.com/repos/Manuelopez/Solar-Pant-Calc,Calulates the generation of a Solar plant using the Hottel model,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,3,2,solar-energy,"[model, solar-energy]",00000
1000,DART01B,Robozor-network,Robozor-network,https://github.com/Robozor-network/DART01B,https://api.github.com/repos/Robozor-network/DART01B,Solar dragster powered by small photovoltaic cells.,"# DART01B

Solar dragster powered by small photovoltaic cells.  Version with improved maximum power point tracker.

The vehicle was developed for [Napajeni Sluncem](https://www.vsb.cz/cs/detail-novinky?reportId=33054) competition. 

![DART01A](./DART_Small.jpg)
",0,0,3,0,solar-energy,"[photovoltaic-panels, photovoltaics, solar-cells, solar-energy, vehicle]",00000
1001,Tesla-Wallbox-solar-charging,TobiasRadtke,N/A,https://github.com/TobiasRadtke/Tesla-Wallbox-solar-charging,https://api.github.com/repos/TobiasRadtke/Tesla-Wallbox-solar-charging,Tesla Wallbox green energy charging ,"# Tesla-Wallbox-solar-charging
This code enables a tesla Wallconnector to only use the power generated by your photovoltaik setup.
It communicates with Solaredge Inverters over Modbus.
The esp8266 then sends the collected data to the wallconnector over its RS-485 port.
Therefor you need a adapter like this:https://www.ebay.de/itm/TTL-RS485-Adapter-485-UART-Seriell-3-3V-5-Volt-Level-Konverter-Modul-Arduino/252852473229?ssPageName=STRK%3AMEBIDX%3AIT&_trksid=p2057872.m2749.l2649

The esp8266 also hosts a webserver which displays everything.
Once you´ve uploaded the sketch, the esp opens an acess point.
At 192.168.4.1, there you can enter your wifi credentials and the ip Adress and port of your solaredge inverter.
I know the code isnt perfect, but I hope it helps someone.
I don´t currently have time to write a full explanation,but if you have any questions or ideas just let me know.
Special thanks to @dracoventions, https://github.com/dracoventions/TWCManager
for his detailted documentation on the wallconnectors´s protocoll.

",0,0,1,0,solar-energy,"[solar, solar-energy, tesla]",00000
1002,omnikdataloggerproxy,jbouwh,N/A,https://github.com/jbouwh/omnikdataloggerproxy,https://api.github.com/repos/jbouwh/omnikdataloggerproxy,Proxy script to forward Omnik inverter messages to omnikdatalogger,"# OMNIKDATALOGGERPROXY
![omnikdatalogger](https://github.com/jbouwh/omnikdatalogger/workflows/omnikdatalogger/badge.svg)
![PyPI version](https://badge.fury.io/py/omnikdataloggerproxy.svg) 

The `omnikdataloggerproxy.py` script and supporting files can be used intercept your inverters data messages. See the comments in the example shell script enand the config.ini example about how to use them.
Good luck with them.
The output can be processed with [omnikdatalogger](https://github.com/jbouwh/omnikdatalogger) for output to pvoutput, mqtt, influxdb and integration with Home Assistant.

## Install using pip
`sudo pip3 install omnikdataloggerproxy`

The supporting files are installed at the folder */usr/local/share/omnikdataloggerproxy/*

### Command line
```
usage: omnikloggerproxy.py [-h] --serialnumber SERIALNUMBER [SERIALNUMBER ...]
                           [--settings FILE  Path to .yaml configuration file]
                           [--section  Section to .yaml configuration file to use. Defaults to the first section found.]
                           [--config FILE  Path to configuration file (ini) (DECREPATED!)]
                           [--loglevel LOGLEVEL]
                           [--listenaddress LISTENADDRESS]
                           [--listenport LISTENPORT]
                           [--omniklogger OMNIKLOGGER]
                           [--omnikloggerport OMNIKLOGGERPORT]
                           [--mqtt_host MQTT_HOST] [--mqtt_port MQTT_PORT]
                           [--mqtt_retain MQTT_RETAIN]
                           [--mqtt_discovery_prefix MQTT_DISCOVERY_PREFIX]
                           [--mqtt_client_name_prefix MQTT_CLIENT_NAME_PREFIX]
                           [--mqtt_username MQTT_USERNAME]
                           [--mqtt_password MQTT_PASSWORD]
                           [--mqtt_device_name MQTT_DEVICE_NAME]
                           [--mqtt_logger_sensor_name MQTT_LOGGER_SENSOR_NAME]
                           [--mqtt_tls MQTT_TLS]
                           [--mqtt_ca_certs MQTT_CA_CERTS]
                           [--mqtt_client_cert MQTT_CLIENT_CERT]
                           [--mqtt_client_key MQTT_CLIENT_KEY]
```
### Configuration file
The proxy parameters will fallback to the `config.yaml` in under key `omnikdatalogger->proxy`. Specify a configfile using the --config option.
This way it easier tot run omnikdatalogger proxy as a docker container.
> NOTE: The use of config.ini will is decrepated and config.yaml replaces config.ini.

```yaml
omnikdatalogger:
  proxy:
    serialnumber:
    - serial1232323
    ...
    ...
```

key | optional | type | default | description
-- | --| -- | -- | --
`serialnumber` | False | list | [] | List of serialnumbers of the inverters supported
`loglevel` | True | string | `INFO` | The basic loglevel [DEBUG, INFO, WARNING, ERROR, CRITICAL]
`listenaddress` | True | string | `127.0.0.1` | A local available address to listen to
`listenport` | True | int | `10004` | The local port to listen to
`omniklogger` | True | string | _None_ | Forward to an address omnik/SolarmanPV datalogger server listens to. Set this to `176.58.117.69` as final forwarder.
`listenport` | True | int | `10004` | The port the omnik/SolarmanPV datalogger server listens to.

You can use the mqtt based client of omnikdatalogger `localproxy.hassapi`. You need to specify `mqtt_host` to activate this feature and specify all needed attributes.

Config file settings will overrule the command line settings. The MQTT parameters will fallback to the settings in the section `output.mqtt:`. Specify a config file using the --settings (or --config) option.
For details see the [Omnik Data Logger README.md](https://github.com/jbouwh/omnikdatalogger#mqtt_proxy-plugin-for-the-localproxy-client-in-the-section-clientlocalproxymqtt_proxy-of-appsyaml-or-configini)

There are example config files included:
- [`config.yaml_example.txt`](https://github.com/jbouwh/omnikdataloggerproxy/blob/main/config.yaml_example.txt)
- [`config.ini_example.txt`](https://github.com/jbouwh/omnikdataloggerproxy/blob/main/config.ini_example.txt).

#### MQTT configuration
Omnikdatalogger proxy supports forwarding using MQTT. The Omnikdatalogger mqtt_proxy and hassapi plugin (localproxy client) can use the data published by Omnikdataloggerproxy. The MQTT can also be read from the config.yaml file under key `omnikdatalogger->proxy`.

```yaml
omnikdatalogger:
    ...
    ...
  mqtt:
    discovery_prefix: homeassistant
    ...
    ...    
```

| key                  | optional | type    | default                 | description                                                                                                                                                      |
| -------------------- | -------- | ------- | ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `discovery_prefix`   | True     | string  | _'homeassistant'_       | The mqtt plugin supports MQTT auto discovery with Home Assistant. The discovery_prefix configures the topic prefix Home Assistant listens to for auto discovery. |
| `device_name`        | True     | string  | _'Datalogger proxy'_    | Omnik data logger proxy only setting. Overrides the name of the datalogger.                                                                                      |
| `logger_sensor_name` | True     | string  | _'Datalogger'_          | Omnik data logger proxy only setting. Overrides the name of the datalogger datalogger sensor entity.                                                             |
| `append_plant_id`    | True     | bool    | _False_                 | When a device_name is specified the plant id can be added to the name te be able to identify the plant.                                                          |
| `host`               | True     | string  | `localhost`             | Hostname or fqdn of the MQTT server for publishing.                                                                                                              |
| `port`               | True     | integer | _1883_                  | MQTT port to be used.                                                                                                                                            |
| `retain`             | True     | bool    | _True_                  | Retains the data send to the MQTT service                                                                                                                        |
| `client_name_prefix` | True     | string  | _'ha-mqtt-omniklogger'_ | Defines a prefix that is used as client name. A 4 byte uuid is added to ensure an unique ID.                                                                     |
| `username`           | False    | string  | _(none)_                | The MQTT username used for authentication                                                                                                                        |
| `password`           | False    | string  | _(none)_                | The MQTT password used for authentication                                                                                                                        |
| `tls`                | True     | bool    | _False_                 | Secures the connection to the MQTT service, the MQTT server side needs a valid certificate                                                                       |
| `ca_certs`           | True     | string  | _(none)_                | File path to a file containing alternative CA's. If not configure the systems default CA is used                                                                 |
| `client_cert`        | True     | string  | _(none)_                | File path to a file containing a PEM encoded client certificate                                                                                                  |
| `client_key`         | True     | string  | _(none)_                | File path to a file containing a PEM encoded client private key                                                                                                  |


## Using Docker

### Run the docker container

The config files for omnikdataloggerproxy in the container will be will /config/config.yaml (settings), or if you would like to use the config.ini /config/config.ini. 

The following command will pull the `Docker` image, mount the `config.yaml` (in the root of the container) and create the `Docker` container.

```
$ docker run --name omnikdataloggerproxy -d -v ${PWD}/config.yaml:/config.yaml -p 10004:10004 --name omnikdataloggerproxy --restart unless-stopped jbouwh/omnikdataloggerproxy:latest
```

I also added a `docker-compose.yml` that can be used. Run it at the folder where your `config.yaml` file resites. It is still possible to use `config.ini` files as well. This option is decrepated now.

So, doing exactly the same ... but using `docker-compose`:

```
$ docker-compose -f /path/to/docker-compose.yml up -d
```


## Prearing to run omnikdataloggerproxy.py script (manual install)

* Make sure you have shell access (ssh or telnet).
* Install pip: `curl -k https://bootstrap.pypa.io/get-pip.py | python3` See: (https://stackoverflow.com/questions/47649902/installing-pip-on-a-dsm-synology)
* Install the paho mqtt client: `/volume1/@appstore/py3k/usr/local/bin/pip3 install paho-mqtt`. The path may be diferent. I used a Synology DS218 play

On upgrades it might be necessary to reinstall pip and paho-mqtt. Make sure you chack on this after an update for your Synology.

Now take the following steps:
* Place the omnikloggerproxy.py script, the bash script (omnikproxy_example_startup.sh) and `config.ini_example.txt` to a folder that will not be affected by upgrades. E.g. `/volume1/someshare/yourscriptfolder`.
* Rename `config.ini_example.txt` to `config.ini` and configure settings.
* check the commandline settings in the shell script.
* Try to execute the script to test if it is working. (You can use task plannel later to start the script at boot automatically as activated task)
* The lines to configure iptables should run as root. The omnikproxylogger script works at userlevel too.
* On your internet router/gateway, set up a static route for `176.58.117.69/32` to your synology.
* Configure MQTT to forward the data to be able to use the localproxy plugin with `hassapi` or `mqtt_proxy`.

You can forward the logger trafic to the omnik servers, but if you rerouted yhe traffic for 176.58.117.69 you need to forward to a linux server elswere in the internet.

## Running omnikdataloggerproxy as a service on a Debian based system

You can find the following sample service config at `/usr/local/share/omnikdataloggerproxy/omnikdatalogggerproxy.service` after installing `pip3 install omnikdataloggerproxy` as root.

```ini
[Unit]
Description=Omnik datalogger proxy
After=network.target
[Service]
Type=simple
ExecStart=/usr/local/bin/omnikloggerproxy.py --serialnumber NLDN123456789012 --listenaddress 0.0.0.0 --omniklogger 176.58.117.69 --omnikloggerport 10004
User=omnik
Group=users
Restart=on-failure
RestartSec=30s
[Install]
WantedBy=multi-user.target
```
The template service file shows a forwarding only setup.

To setup omnikdatalogger proxy as root do:
- Create a config folder and copy the sample service script:
  - `cd /etc/`
  - `mkdir omnikdataloggerproxy`
  - `cp /usr/local/share/omnikdataloggerproxy/omnikdatalogggerproxy.config .`
- Update `User` and *serialnumber* in the script `omnikdatalogggerproxy.config` using your favorite editor.
  - `nano omnikdatalogggerproxy.config`
- Link the script to systemd: to `ln -s /etc/omnikdataloggerproxy/omnikdatalogggerproxy.service /etc/systemd/system/omnikdatalogggerproxy.service`
- Enable the service: `systemctl enable omnikdatalogggerproxy`
- Start the service: `systemctl start omnikdatalogggerproxy`
- check if the service is running: `systemctl status omnikdatalogggerproxy`

After some time the logging should show something similar like this:
```
# systemctl status omnikdataloggerproxy
● omnikdataloggerproxy.service - Omnik datalogger proxy
   Loaded: loaded (/etc/omnikdataloggerproxy/omnikdataloggerproxy.service; enabled; vendor preset: enabled)
   Active: active (running) since Sun 2020-06-21 13:33:21 CEST; 16min ago
 Main PID: 28182 (omnikloggerprox)
    Tasks: 4 (limit: 4915)
   Memory: 9.8M
   CGroup: /system.slice/omnikdataloggerproxy.service
           └─28182 /usr/bin/python3 /usr/local/bin/omnikloggerproxy.py --serialnumber NLDN123456789012 --listenaddress 0.0.0.0 --omniklogger 176.58.117.69 --omnikloggerport 10004

Jun 21 13:33:22 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: Forwarding succesful.
Jun 21 13:38:33 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: Processing message for inverter 'NLDN123456789012'
Jun 21 13:38:33 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: 2020-06-21 13:38:33.795477 Forwarding to omnik logger ""176.58.117.69""
Jun 21 13:38:33 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: Forwarding succesful.
Jun 21 13:43:38 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: Processing message for inverter 'NLDN123456789012'
Jun 21 13:43:38 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: 2020-06-21 13:43:38.937148 Forwarding to omnik logger ""176.58.117.69""
Jun 21 13:43:38 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: Forwarding succesful.
Jun 21 13:48:50 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: Processing message for inverter 'NLDN123456789012'
Jun 21 13:48:50 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: 2020-06-21 13:48:50.194599 Forwarding to omnik logger ""176.58.117.69""
Jun 21 13:48:50 alpha omnikloggerproxy.py[28182]: omnikloggerproxy: Forwarding succesful.
```
The log shows when messages were forwarded.
",0,0,2,2,solar-energy,"[datalogger, home-assistant, iot, mqtt, omnik, pvoutput, solar-energy, solarmanpv]",00000
1003,sereno_bot,atosborges00,N/A,https://github.com/atosborges00/sereno_bot,https://api.github.com/repos/atosborges00/sereno_bot,The Cruze bot for monitoring the solar power systems installed and superveised by the company.,"# Sereno Bot

The Cruze bot for scraping data from the clients in all monitoring platforms used by the company.

- Tech Leader: [Atos Borges](https://www.linkedin.com/in/atos-borges/)

## Version

The bot is currently on `version 1.2.0`, collecting data from Sices and Aurora Vision platforms.

## Packages

Run the following commands on the terminal to install the dependencies needed on the virtual environment. 
We highly recommend the use of a library to manage and run your virtual environments.

- `$ pip install -r requirements.txt`

## Licensing

 All rights reserved to [Cruze Energia](https://energiacruze.com/).
",0,0,1,0,solar-energy,"[bot, python, solar, solar-energy]",00000
1004,SolarCharger,NeoSecundus,N/A,https://github.com/NeoSecundus/SolarCharger,https://api.github.com/repos/NeoSecundus/SolarCharger,Arduino Project that transforms Solar Panel Voltage to USB Voltage,"# Solar Charger

**DISCLAIMER: I cannot guarantee that this works with every setup. With the download of this repository you agree that everything you do with the repository is at your own risk.**

## Basic Information

Arduino Based Voltage Transformer for Small Solar Panels. Should always supply 5V (Typical USB Voltage). 

You may not need the exact parts that I used for this Project and the code should work with most Arduino-based microcontrollers. I recommend that you understand everything that happens in this circuit before you try to make changes or rebuild the project at all.

## Requirements

You may need to download additional requirements. The includes in the ""SolarCharger.ino"" file will show you which ones you need. Just download the missing dependencies from the built-in Arduino library manager.

If you need help with anything just email or dm me. :)
",0,0,1,0,solar-energy,"[arduino, c, cpp, power-monitor, power-monitoring, solar-energy, voltage-regulator]",00000
1005,mySollarium,LucasKleaL,N/A,https://github.com/LucasKleaL/mySollarium,https://api.github.com/repos/LucasKleaL/mySollarium,Project made for the NASA's hackathon Space Apps.,"
# mySollarium ☀️

### A solar energy data provider, consuming the NASA's POWER API.

#### You can access the application on: https://mysollarium.vercel.app/

This project was concepted at the NASA's hackathon Space Apps 2021, for the ""You are my sunshine"" challenge. Our project consist on take raw information from database and do a simple processing and show to user useful data to consider when you are planning install a solar power production system.
Our original idea is make a algorith what take envoriment and system parameters and make a advanced evaluation of power production, costs and valiability of power generation.

## Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## How to run

First you probably need to run the `yarn install` or `npm install` to get the project dependencies.

After, you can run:

### `yarn start` or `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.
",0,0,0,0,solar-energy,"[data, data-visualization, hackathon, javascript, nasa, react, reactjs, solar, solar-energy, space, space-apps]",00000
1006,Project-Z-NEV,Z-NEV,Z-NEV,https://github.com/Z-NEV/Project-Z-NEV,https://api.github.com/repos/Z-NEV/Project-Z-NEV,"Project: Z-NEV is a global, open source collaboration to design and build a modular zero-net energy vessel. All are welcome.",# Project-Z-NEV,0,0,1,0,solar-energy,"[composites, electrolysis, energy-generation, engineering, fuel-cell, hydrogen, materials-science, naval-architecture, photovoltaic, polymer, renewable-energy, renewables, social-impact, solar-energy, vessel-design, wave-energy, wind-energy, wind-turbine, zero-energy, zeronet]",00000
1007,ManuscritThese,JeremyBois,N/A,https://github.com/JeremyBois/ManuscritThese,https://api.github.com/repos/JeremyBois/ManuscritThese,Outil d’Aide à la Décision pour la Conception de Maisons Solaires à Énergie Positive (https://tel.archives-ouvertes.fr/tel-01679255)),"## Description
Template et sources de mon manuscrit de thèse portant sur le **développement d'un outil
d'aide à la décision pour la conception de maisons solaires à énergie positive**.

Le Manuscrit est disponible à l'adresse [suivante](https://tel.archives-ouvertes.fr/tel-01679255).

***

## Résumé
Les enjeux énergétiques et environnementaux liés au réchauffement climatique amènent à
généraliser la sobriété énergétique des bâtiments neufs ainsi que la production locale
d’énergie à l’horizon 2020. Ce travail de thèse se concentre sur le secteur de la maison
individuelle qui représente près de la moitié des logements neufs construits en France
pour un volume d’environ 200000 unités par an.

Le contexte de la maison individuelle à énergie positive 100% solaire consiste à
rechercher les compromis entre le niveau de performance du bâti qui détermine les besoins
en énergie et la capacité des équipements à valoriser l’énergie solaire pour d’une part
subvenir aux besoins en chaleur pour assurer le chauffage et la production d’eau chaude
sanitaire, et d’autre part produire l’électricité nécessaire à l’éclairage et aux autres
usages spécifiques (matériels électroménager, vidéo, etc.).

Après un examen des différents concepts de bâtiments à énergie positive, une analyse a été
menée pour identifier les solutions techniques de systèmes solaires combinés capables de
fournir le double service de production d’eau chaude et de chauffage. Un modèle détaillé a
été développé dans l’environnement Dymola et vérifié par inter-comparaison de modèles à
l’échelle des composants. Un algorithme de contrôle original a été mis au point pour
maximiser la performance globale du système. Une première étude paramétrique a montré que
ce système est capable dans certaines conditions de couvrir près de 80% des besoins en
chaleur de la maison étudiée. Néanmoins, son dimensionnement demeure complexe et la
recherche de compromis entre la sobriété de la maison et le dimensionnement des systèmes
solaires thermiques et photovoltaïques doit s’appuyer sur un algorithme d’optimisation
multi-objectifs adapté.

Un chapitre est donc consacré à l’élaboration d’un algorithme d’optimisation multi-
objectifs qui s’appuie sur la méthode des colonies d’abeilles virtuelles. Cette approche
s’est avérée particulièrement pertinente vis à vis du problème (paramètres discrets,
continus et qualitatifs) à caractère multi-objectifs (maximiser la valorisation du solaire
thermique pour le chauffage d’une part et pour la production d’eau chaude d’autre part,
minimiser la consommation d’énergie conventionnelle) et sous contrainte car seules les
solutions à bilan d’énergie positif sur l’année seront retenues. L’algorithme
d’optimisation développé ici a été confronté à une série de problèmes classiques et a
démontré sa capacité à construire l’ensemble des solutions avec un nombre relativement
faible d’évaluations du modèle.

Le dernier chapitre présente deux applications de conception de maisons à énergie
positive. La première se situe en région bordelaise alors que la seconde est située à
proximité de Strasbourg. Ces deux conditions climatiques permettent de mettre en évidence
la capacité de l’algorithme d’optimisation à proposer un éventail de solutions optimales
présentant des compromis différents en termes de performance du bâti et de dimensionnement
des équipements solaires. Enfin, un outil d’aide à la décision permet d’explorer les
fronts optimaux pour dégager les solutions à retenir.

***

## Abstract

With energy-related and environmental climate change challenges, energy sobriety and local
energy production are yet to become a mainstream practice for new buildings construction by
$2020$. This works focuses on single-family houses which in France represent half of new
buildings constructions with 200000 new units new units each year.

Near zero energy single-family houses with 100% solar energy consists on compromising
between performance of building envelope which defines energy needs and the ability
for equipments to value free solar energy. Hence solar energy must be able to cover
space heating and domestic hot water demands but also provide enough energy for
lightning and other specific uses such as domestic appliances.

After a literature review of near zero energy house concepts, an analysis was undertaken
to provide a clear view of solar combi-systems technical solutions with the ability to
provide enough energy for both needs: space heating and domestic hot water. Using Dymola
environment a detailed model was developed and its consistency was checked by
inter-comparison at component scale. An innovative control algorithm has been worked out to
maximize the solar system’s global performance. A first parametric study has shown that the system
was able to cover close to 80% of house heat requirement. However sizing of a solar
combi-system is a complex task and requires to find compromises between building sobriety, solar
thermal energy efficiency, and photovoltaics solar energy sizing. Because of the problem’s
complexity, a decision aid tool with an appropriate multi-criteria optimization algorithm
is required.

To that end a chapter is dedicated to the development of a multi-criteria optimization
algorithm based on artificial bee colony behavior. This approach has proved to be quite effective
to solve the problem and to handle continuous, discrete and qualitative decision variables.
Chosen solution was constrained to have a positive energy balance and must maximize solar
space heating and domestic fraction in a view to reduce total energy consumption.
A validation process has also been set up and the developed optimization algorithm
has proved its ability to solve standard problems with a fairly short number of evaluations.

Adopted methodology was illustrated by two applications of the design phase of
a near zero energy detached house. First one is located at Bordeaux an second one
in Strasbourg. Selected climate conditions emphasize the ability of the proposed
approach to identify a wide range of optimal solutions showing differences within
the building's performance as well as the solar system sizing. Lastly a decision aid tool
allows to explore optimal front in a convenient way to shape adapted solutions.

***

## Obtention d'un PDF A pour l'archivage:
```gs -dCompatibilityLevel=1.4 -dPDFSETTINGS=/prepress -dCompressFonts=true -dSubsetFonts=true -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=outputPdf.pdf -c "".setpdfwrite <</NeverEmbed [ ]>> setdistillerparams"" -f original.pdf```
",0,0,1,0,solar-energy,"[buildings, metaheuristics, modelica, optimization, solar-energy, solar-system, thesis]",00000
1008,ESP8266_MultiSensor,ctvarlan,N/A,https://github.com/ctvarlan/ESP8266_MultiSensor,https://api.github.com/repos/ctvarlan/ESP8266_MultiSensor,Multi Analog Sensors using the Multiplexation on Analog Input on the ESP8266.,"# ESP8266_MultiSensor
ESP8266, nodeMCU v3.0, GoogleHomeNotifier, ThingSpeak, Twitter, Solar, Humidity, Moisture, AnalogMultiplex, IFTTT

Multi Analog Sensors using the only Analog Input on the ESP8266

The need to have control over my indoor window garden pushed me to find this solution.
So, this measures the soil moisture for (by now) four pots but can be extended for how many GPIOs are available on the ESP8266 (nodeMCU v3.0). The next step was to use it for outdoor (garden or balcony) with the intention to power it up by solar panels with a minimum of energy used. The solar charger is present and do the job but everything is still for indoor application. For now, there is no automation that kicks in and start pumping water. The results are sent to ThingSpeak, which performs some data processing and graphical presentation and - if conditions arise - send me a notification using the IFTTT platform and also to Google Home Mini to warn me that either the moisture is low or the battery is low.



Hardware Setup

At the beginning is checked the status of PIN_Mode: if it is LOW then start a calibration loop, if it is HIGH continues with the main program. This is not implemented yet. Be sure to have PIN_Mode not connected to GND!
Do not forget to setup the Twitter settings in Thingspeak.

Any ESP8266 based board can do the job with the minimal condition to have the Analog Input available (ESP-01 are not usable) and as many GPIOs avalable as the Moisture Sensors needed. This project handles four sensors.
The idea is simple: all four sensors have connected each each one the GND to the general GND of the circuit, all four Analog Outputs to the A0, the Analog Input of the ESP8266 and each other Vcc of the sensor to another GPIO of the ESP8266.

The data is visible here https://thingspeak.com/channels/15699
",0,0,0,0,solar-energy,"[analog-mux, deepsleep, esp8266, googlehome, humidity, ifttt-webhooks, moisture, nodemcu, solar-energy, thingspeak, twitter]",00000
1009,The-Sun,adelmofilho,N/A,https://github.com/adelmofilho/The-Sun,https://api.github.com/repos/adelmofilho/The-Sun,The Sun é um projeto de estudo dos dados de captação de energia solar no Brasil.,"
<!-- README.md is generated from README.Rmd. Please edit that file -->

<p align=""center"">
<img src=""https://pm1.narvii.com/6798/b4de2872ee071e6f5d0c3c69aa1892b28aa0b27ev2_hq.jpg"" align=""center"" height=220/>
</p>

<h2 align=""center"">The Sun</h2>

<!-- badges: start -->

<p align=""center"">
<a href=""http://www.repostatus.org/#active""><img alt=""Project Status: Active – The project has reached a stable, usable state and is being actively developed."" src=""https://www.repostatus.org/badges/latest/active.svg""></a>
<a href=""https://www.tidyverse.org/lifecycle/#experimental""><img alt=""Lifecycle Status"" src=""https://img.shields.io/badge/lifecycle-experimental-orange.svg""></a>
<a href=""https://www.gnu.org/licenses/gpl-3.0""><img alt=""License"" src=""https://img.shields.io/badge/License-GPLv3-blue.svg""></a>
<a href=""https://travis-ci.org/adelmofilho/The-Sun""><img alt=""Travis build status"" src=""https://travis-ci.org/adelmofilho/The-Sun.svg?branch=master""></a>
<a href=""https://ci.appveyor.com/project/adelmofilho/The-Sun""><img alt=""AppVeyor build status"" src=""https://ci.appveyor.com/api/projects/status/github/adelmofilho/The-Sun?branch=master&svg=true""></a>
<a href=""https://codecov.io/gh/adelmofilho/The-Sun?branch=master""><img alt=""Code Coverage"" src=""https://codecov.io/gh/adelmofilho/The-Sun/branch/master/graph/badge.svg""></a>
</p>
<!-- badges: end -->

The Sun é um projeto de estudo dos dados de captação de energia solar no
Brasil.

O pacote `sunR` tem como objetivo criar uma aplicação `shiny` para
visualização dos dados e análises do projeto.

## Instalação

A instalação da versão de desenvolvimento do pacote `softr` pode ser
realizada via `devtools`.

``` r
devtools::install_github(""adelmofilho/The-Sun"")
```

## Licença

Os arquivos neste repositório estão sob licença GPL 3.
",0,0,2,0,solar-energy,"[docker-image, r-package, r-shiny, solar-energy]",00000
1010,Solstice-SCO4,orestispanago,N/A,https://github.com/orestispanago/Solstice-SCO4,https://api.github.com/repos/orestispanago/Solstice-SCO4,Python scripts to run Solstice simulations on SCO4,"## Solstice-SCO4

Python scripts to run Solstice simulations on SCO4

* ```geometry/receiver.yaml``` : name and active sides of receiver
* ```geometry/*.yaml``` : position and optical properties of shapes, generated using ```mod_geometry.py```

```geometry/heatmap``` folder: receiver and mirror geometries to export heatmap

```export/raw``` folder: trace results, open with ```analysis.py```

```export/shapes``` folder: 3D object ```.obj```, and ray paths ```.vtk``` files. Open with Paraview
",0,0,2,0,solar-energy,"[optical, physics, simulations, solar-energy, solstice]",00000
1011,Arska,Netgalleria,Netgalleria,https://github.com/Netgalleria/Arska,https://api.github.com/repos/Netgalleria/Arska,NOT IN USE,"# This repository is not in use 

 Current repository: [https://github.com/Netgalleria/arska-node](https://github.com/Netgalleria/arska-node) 
",0,0,1,0,solar-energy,"[esp32, nordpool, shelly3em, smarthome, solar-energy]",00000
1012,tesseract,TheBeachLab,N/A,https://github.com/TheBeachLab/tesseract,https://api.github.com/repos/TheBeachLab/tesseract,Documentation page for the Mobile version of The Beach Lab,"# The Beach Lab Tesseract

![](img/tess.svg)

Project Tesseract is the mobile version of The Beach Lab. The most advanced digital fabrication tools retrofitted in the most fabulous (1) vehicle to bring digital fabrication to the most extreme and remote places on Earth. Get ready for the Tesseract journey!

- [Organization](doc/organization.md)
- [Solar powered Fab Lab](doc/solar.md)
- The machines and tools
	- [Roland MDX-20](doc/mdx20.md)
	- [Dobot Magician](doc/dobot.md)
	- [Full Spectrum Laser 5th Gen](doc/fullspectrum.md)
	- [Roland GX-24](doc/gx24.md)
	- [Othermill](doc/othermill.md)
	- [Shaper Origin](doc/shaper.md)
	- [Highway](https://github.com/fellesverkstedet/fabricatable-machines/tree/master/highway-mobile-large-format-cnc)
	- Ultimaker 2
	- Silhouette Cameo 4
	- Electronics bench
	- Owon DS7102 oscilloscope
	- Logic analizer
- The vehicle: Mercedes G Wagon
	- [Roof rack](doc/roofrack.md)
	- [Service and maintance](doc/service.md)
	- [Cockpit control panel](doc/cockpit.md)
- [European trip](doc/eurotrip.md)
- [Supply chain](doc/supply.md)
- [To Do](doc/todo.md)

(1) and unaerodynamic, cx=0.54 and 2.97 sqm front surface
",0,0,2,0,solar-energy,"[4x4, adventure, built-to-last, digital-fabrication, diy, g-wagon, mercedes-benz, mobile-fablab, social-innovation, solar-energy, solar-power]",00000
1013,Solstice-SCO1,orestispanago,N/A,https://github.com/orestispanago/Solstice-SCO1,https://api.github.com/repos/orestispanago/Solstice-SCO1,Python scripts to run Solstice simulations on SCO1 shape,"## Solstice-SCO1

Python scripts to run Solstice simulations on SCO1

geometry folder:

* receiver.yaml : name and active sides of receiver
* geometry_my_stl.yaml : position and optical properties of shapes
* SCO1_CPC_thinm.stl : concentrator shape (made with Freecad)

raw folder:

Trace results
",0,0,3,0,solar-energy,"[simulation, solar-energy, solstice, stl]",00000
1014,solar-models,brock-taute,N/A,https://github.com/brock-taute/solar-models,https://api.github.com/repos/brock-taute/solar-models,Solar Power Modeling with R and Python,"Solar Modeling with R and Python
================
Brock Taute
4/29/2020

# Background

This repo contains a library for modeling the energy output of a
photovoltaic system in R. It leverages several Python modules, most
notably PVLib and PVFactors, using the reticulate package. R was
selected as the main user-interfacing language because it connects these
powerful Python packages with the rapid prototyping capabilities of the
R shiny package, enabling quick development of applications that
incorporate solar energy prediction models.

# Setup

In order to use these libraries, you need Python 3 installed. The
solar\_models.R script will then install the necessary Python modules in
a virtual environment when you source it. If your default Python
interpreter is version 2, you may need to explicitly choose your Python
3 interpretter through reticulate’s “use\_python” function.

Some of the functions also take advantage of an NREL Developer Network
API Key. You can get one of those at
<https://developer.nrel.gov/signup/>. Having one will allow you to
download weather data directly from NREL’s National Solar Resource
Database.

# Examples

## 1\. Run an Energy Estimate

We will use the weather file included in the repo for all site modeling.
This example uses that weather file to estimate the production of a
100MWac / 130MWdc utility scale solar farm with single-axis trackers. A
common industry metric for evaluating renewable power plant performance
is to look at its “Net Capacity Factor” (or NCF.) This is the ratio of
total plant output over the course of a year to the total plant output
theoretically possible (in this case 100MW \* 8760 hours). We can look
at that metric for this facility as well as a diurnal heat map showing
average plant production over the course of a day for each month of the
year.

``` r
# Load in a weather and site-specific data
weather <- read_csv('sample-data/weather.csv') %>%
    mutate(datetime = mdy_hm(datetime)) %>%
    column_to_rownames(var = 'datetime')

utc_offset <- as.integer(-8)
lat <- 37.45
lon <- -122.45
elevation <- 91

# Run default energy estimate and visualize results
energy <- estimate_energy(dc_capacity = 130e6, ac_capacity = 100e6,
                          racking = 'tracker', lat = lat, lon = lon,
                          weather = weather, utc_offset = utc_offset,
                          elevation = elevation)

print(paste0('NCF = ', round(energy$mc$ncf * 100, 2), '%'))
```

    ## [1] ""NCF = 26.29%""

``` r
energy$output %>%
    group_by(month, hour) %>%
    summarise(output = mean(output) / 1e6) %>%
    ggplot(aes(x = hour, y = as.factor(month), fill = output)) +
    geom_tile() +
    scale_fill_gradient(low='navyblue', high=""yellow"") +
    labs(x = 'Hour', y = 'Month', fill = 'Output (MW)')
```

![](README_files/figure-gfm/example_1_plot-1.png)<!-- -->

## 2\. Model PV Degradation by batch running energy estimates

One of the biggest advantages of using a scripted language for an energy
estimate over using a software like PVSyst is the ease with which you
can run multiple iterations. A very common situation for rapid energy
iterations arises when modeling PV module degrdation over time. While
degradation warranties are typically linear, the degradation rate on the
AC output of a facility often isn’t, due to the ratio of a plants DC
Capacity to AC Capacity. To properly model degradation over time, it is
thus necessary to run a different energy estimate for each year. One of
the functions in this library is designed for this exact
purpose.

``` r
# Let's do a ground-mounted, fixed-tilt system this time instead of a tracker
multiyear <- estimate_multiyear_energy(last_year = 30, dc_capacity = 12e6,
                                       ac_capacity = 10e6,
                                       racking = 'ground-mount',
                                       lat = lat, lon = lon,
                                       weather = weather,
                                       utc_offset = utc_offset,
                                       elevation = elevation)

multiyear$output %>%
    group_by(year) %>%
    summarise(aep = sum(output)) %>%
    mutate(delta = aep / lag(aep)) %>%
    ggplot(aes(x = year - 1900, y = delta)) +
    geom_path() +
    labs(x = 'Operation Year', y = 'Percent of Prior Year Production')
```

![](README_files/figure-gfm/example_2-1.png)<!-- -->

## 3\. Customize Default Inputs

While the functions are set up to make an energy estimate as easy as
posible to run, they are completely customizable. All default inputs can
be overwritten by including the value you want to overwrite in the
custom\_inputs parameter list. Here we can calculate the difference that
albedo and tracker spacing (also known as the “ground coverage ratio”)
makes on the energy yield for a bifacial solar plant.

``` r
result_vector <- rep(0, 20)

i <- 1

for (albedo_rate in c(.2, .4)) {
    
    for (coverage in seq(.31, .5, .02)) {
        
        result <- estimate_energy(dc_capacity = 130e6, ac_capacity = 100e6,
                                  racking = 'tracker', lat = lat, lon = lon,
                                  weather = weather, utc_offset = utc_offset,
                                  elevation = elevation,
                                  custom_inputs = list(albedo = albedo_rate,
                                                       gcr = coverage))
        
        result_vector[i] <- result$mc$aep
        
        i <- i + 1
    }
}

data.frame(albedo_0.2 = result_vector[1:10], albedo_0.4 = result_vector[11:20],
           gcr = seq(.31, .5, .02)) %>%
    gather('key', 'value', -gcr) %>%
    ggplot(aes(x = gcr, y = value / 1e9, color = key)) +
    geom_path() +
    labs(x = 'Ground Coverage Ratio', y = 'Annual Output (GWh)')
```

![](README_files/figure-gfm/example_3-1.png)<!-- -->
",0,0,1,0,solar-energy,"[python, r, solar-energy]",00000
1015,worlds-largest-solar-power-plants,Data-Design-Dimension,Data-Design-Dimension,https://github.com/Data-Design-Dimension/worlds-largest-solar-power-plants,https://api.github.com/repos/Data-Design-Dimension/worlds-largest-solar-power-plants,#MakeoverMonday project for week of 20210912 dataset,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,0,0,solar-energy,"[energy, global, makeover-monday, makeovermonday, python, solar, solar-energy, visualisation, visualization]",00000
1016,solarpi,wgabrys88,N/A,https://github.com/wgabrys88/solarpi,https://api.github.com/repos/wgabrys88/solarpi,"Solar powered, scalable, remotely controlled platform for Raspberry Pi projects.","# solarpi
Platform for every kind of project:
independent intercom, remote toy, drone, and even a new Mars rover.

A detailed description will be available soon...
DEMO: https://www.youtube.com/playlist?list=PLBDOR9ZqNeNpt7bb4EgzuAOABzgbZ3tNt

# The most important assumptions of the project are: low price of components, simplicity (hardware/software), reliability, versatility.

Solar panel and battery may be smaller or larger, but the principle of operation
of the system is to be the same)

![image](https://user-images.githubusercontent.com/40343971/164025055-a6231c62-9c2d-4821-b359-883b62252c78.png)
",0,0,1,1,solar-energy,"[cellular-network, cheap, motor-controller, motors, platform, project, rapsberrypi, raspberry, raspberry-pi, raspberry-pi-3, remote, remote-control, remote-sensing, scalability, scalable, simple, solar, solar-energy, solar-panel]",00000
1017,growatt-solar-modbus,henols,N/A,https://github.com/henols/growatt-solar-modbus,https://api.github.com/repos/henols/growatt-solar-modbus,Growatt solar modbus integration for Home Assistant,"[![hacs_badge](https://img.shields.io/badge/HACS-Custom-41BDF5.svg)](https://github.com/hacs/integration)

# Growatt Solar Modbus for Home Assistant

## Installation
",0,0,1,0,solar-energy,"[growatt, hacs, home-assistant, modbus, modbus-rtu, solar-energy]",00000
1018,Smart-Immersion-Heater-Booster,robkwhitehouse,N/A,https://github.com/robkwhitehouse/Smart-Immersion-Heater-Booster,https://api.github.com/repos/robkwhitehouse/Smart-Immersion-Heater-Booster,Smart Hot Water booster. A python program to initiate an immersion heater.,"# Smart-Immersion-Heater-Booster
Smart Hot Water booster.
A small python program to initiate an immersion heater boost period.
The boost period is dynamically adjusted according to the current charge state of my  domestic battery
The idea is that it will use surplus battery charge only (no grid power)
My domestic battery is charged during the day by solar panels only (but yours might not be)

This program is fairly specific to my own solar power installation. This consists of
* A Givenergy 5KW Inverter
* A Givenergy Battery (5.2KWh)
* A Myenergi EDDI immersion controller

It makes use of the cloud APIs that are exposed by Myenergi and Givenergy for their products and
is (I think) a useful example of how to use those APIs

I run this program on a Raspberry Pi Zero W which is running the standard Pi OS (i.e. Debian Linux)
but it could be run on anthing that has a python interpreter and an internet connection.

I run this program at 06:00 every day using cron. It provides me with free hotwater in the morning.
The crontab entry is;
00 06 * * * python $HOME/HotWater.py

But it can be invoked manually or however you want

It creates (or overwrites) a new log file every time in the working directory called HotWater.log
The log file will tell you what the program did (or didn't do) and any errors and warnings

**N.B. YOU MUST EDIT THE PYTHON FILE AND CHANGE THE API KEYS AND SERIAL NUMBERS. 
THESE ARE DEFINED AS CONSTANTS AT THE TOP OF THE FILE**

",0,0,1,0,solar-energy,"[givenergy, myenergi, solar-energy]",00000
1019,pvsc49-satellite-sampling,mikofski,N/A,https://github.com/mikofski/pvsc49-satellite-sampling,https://api.github.com/repos/mikofski/pvsc49-satellite-sampling,Investigation on the effect of averaging interval and sampling rate on hourly modeling errors. Available online: https://doi.org/10.1109/JPHOTOV.2023.3238512,"# Intro
`pvsc49-satellite-sampling` is an investigation on the effect of averaging interval and sampling rate on hourly modeling errors, presented in **Effects of Solar Resource Sampling Rate and Averaging Interval on Hourly Modeling Errors** published in IEEE _Journal of Photovoltaics_, available from IEEE Xplore, DOI: [10.1109/JPHOTOV.2023.3238512](https://doi.org/10.1109/JPHOTOV.2023.3238512). This repository contains the analysis as well as the LaTeX files used to generate the preprint for submission.

# Analysis
The [analysis folder](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/) containes a separate [Jupyter notebook](https://jupyter.org/) for each of the seven SURFRAD sites:
* [Bondville, IL](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-bon.ipynb)
* [Desert Rock, NV](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-dra.ipynb)
* [Fort Peck, MT](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-fpk.ipynb)
* [Goodwin Creek, MS](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-gwn.ipynb)
* [Penn State, PA](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-psu.ipynb)
* [Sioux Falls, SD](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-sxf.ipynb)
* [Table Mountain (Boulder), CO](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-tbl.ipynb)

Each Jupyter notebook is a based on a template. Therefore, the organization of each is the same:
1. Useful Functions
2. Accessing SURFRAD Data
3. Narrowing Selection
4. Quality Assurance & Control
5. Load SURFRAD Daily Weather Data
6. Simulate Sampled Data at Different Rates
7. Visual Comparisons
8. PV Model
9. All (Good) Years Results

## Python Packages
The analysis uses [pvlib](https://pvlib-python.readthedocs.io/en/stable/) to model PV performance.
[![powered by pvlib](https://pvlib-python.readthedocs.io/en/stable/_images/pvlib_powered_logo_horiz.png)](https://pvlib-python.readthedocs.io/en/stable/)

Other [Python](https://www.python.org/) libraries used are [Matplotlib](https://matplotlib.org/), [NumPy](https://numpy.org/), [Pandas](https://pandas.pydata.org/), and [Seaborn](https://seaborn.pydata.org/).

## SURFRAD Data
[SURFRAD data](https://gml.noaa.gov/grad/surfrad/) is required to run the analysis. This data can be obtained using [`pvlib.iotools.read_surfrad`](https://pvlib-python.readthedocs.io/en/stable/reference/generated/pvlib.iotools.read_surfrad.html), but be patient. It's many gigabytes of data and can take a few hours to download.

# Preprint
This repo contains the manuscript that was submitted as original research and published in JPV at IEEE Xplore. LaTeX was used to render the manuscript. The coauthors collaborated online using [Overleaf](https://www.overleaf.com/), and I also used [Sublime Text](https://www.sublimetext.com/) with [LaTeXTools plugin](https://latextools.readthedocs.io/en/latest/) and [Sumatra](https://www.sumatrapdfreader.org/free-pdf-reader). A PDF is rendered and deployed to GitHub pages automatically on each commit using GitHub actions in the `workflows` folder. Note: this PDF is not the final version published by IEEE.

# Licences & Copyrights
* The LaTeX document in this repo is a preprint of **Effects of Solar Resource Sampling Rate and Averaging Interval on Hourly Modeling Errors** published in IEEE _Journal of Photovoltaics_, available from IEEE Xplore, DOI: [10.1109/JPHOTOV.2023.3238512](https://doi.org/10.1109/JPHOTOV.2023.3238512).
* The analysis code in this repo is [BSD-3 licensed](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/LICENSE).
* This README and all other text are licensed under [Creative Common BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/).

<p xmlns:cc=""http://creativecommons.org/ns#"" xmlns:dct=""http://purl.org/dc/terms/"">
<a href=""http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1"" target=""_blank"" rel=""license noopener noreferrer"" style=""display:inline-block;"">
<img style=""height:22px!important;margin-left:3px;vertical-align:text-bottom;"" src=""https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1""><img style=""height:22px!important;margin-left:3px;vertical-align:text-bottom;"" src=""https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1""><img style=""height:22px!important;margin-left:3px;vertical-align:text-bottom;"" src=""https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1""></a>
<a property=""dct:title"" rel=""cc:attributionURL"" href=""https://github.com/mikofski/pvsc49-satellite-sampling"">PVSC49-Satellite-Sampling</a> by <a rel=""cc:attributionURL dct:creator"" property=""cc:attributionName"" href=""https://mikofski.github.io/"">Mark A. Mikofski</a> is licensed under <a href=""http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1"" target=""_blank"" rel=""license noopener noreferrer"" style=""display:inline-block;"">CC BY-SA 4.0</a>

Mark A. Mikofski (c) 2023
",0,0,2,0,solar-energy,"[modeling, photovoltaics, renewable-energy, solar, solar-energy]",00000
1020,PZEM017modbus,croutonso,N/A,https://github.com/croutonso/PZEM017modbus,https://api.github.com/repos/croutonso/PZEM017modbus,"Python-based utility for interfacing with the PZEM-017 DC Energy Monitoring Device. Easily read, modify settings, and monitor energy consumption of your solar or battery systems. Developed with assistance from ChatGPT by OpenAI.","![Picture of PZEM-017 dive from amazon](https://github.com/croutonso/PZEM017modbus/blob/main/imgs/device.jpg?raw=true)

# PZEM-017 Modbus Interface

This repository contains two Python scripts for interfacing with PZEM-017 Modbus energy monitoring devices. The scripts allow you to read the data from the devices and change their parameters.

## Table of Contents

- [Requirements](#requirements)
- [Installation](#installation)
- [Usage](#usage)
  - [pzem_reading.py](#pzem_readingpy)
  - [change_settings.py](#change_settingspy)
- [FAQ](#faq)

## Requirements

- Raspberry Pi with Raspbian OS or any Linux system
- Python 3
- minimalmodbus Python library
- pySerial Python library
- PZEM-017 energy monitoring device
- USB to RS485 converter (e.g., FTDI USB-RS485 Cable)

## Installation

1. Install Python 3 from the [official website](https://www.python.org/downloads/).

2. Install the required Python libraries by running the following command in your terminal or command prompt:

   ```
   pip install minimalmodbus pyserial
   ```

3. Clone this repository or download the Python scripts `pzem_reading.py` and `change_settings.py`.

```
git clone https://github.com/croutonso/PZEM017modbus.git
```

4. Connect the PZEM device to your Raspberry Pi or Linux system using a USB to RS485 converter.

## Usage

### pzem_reading.py

This script reads data from the PZEM-017 device and displays the voltage, current, power, and energy values.

1. Open `pzem_reading.py` in a text editor and set the `DEVICE_ADDRESS`, `PORT`, and other parameters according to your device and connection.

2. Save the changes and close the text editor.

3. Open a terminal, navigate to the directory containing `pzem_reading.py`, and run the following command:

   ```
   python pzem_reading.py
   ```

4. The script will display the voltage, current, power, and energy values.

### change_settings.py

This script allows you to change the parameters of the PZEM-017 device, such as high and low voltage alarm thresholds, slave address, and current range (PZEM-017 only).

1. Open `change_settings.py` in a text editor and set the `SLAVE_ADDRESS`, `DEVICE_PORT`, and other parameters according to your device and connection.

2. Save the changes and close the text editor.

3. Open a terminal, navigate to the directory containing `change_settings.py`, and run the following command:

   ```
   python change_settings.py
   ```

4. The script will display a menu with options to change various device parameters.

## FAQ

**Q: Does the slave address matter?**

A: The slave address is important to avoid conflicts between multiple Modbus devices connected to the same computer. Each device should have a unique slave address to prevent clashes and ensure proper communication.

**Q: What should I do if I already have another Modbus device connected to my computer?**

A: Make sure that each Modbus device has a unique slave address. You can change the slave address of the PZEM devices using the `change_settings.py` script. Follow the steps in the [Usage](#usage) section to run the script and change the slave address.

**Q: What if the script does not work or shows an error message?**

A: Check the following:

- Ensure that the PZEM device is properly connected to your computer.
- Verify that the `DEVICE_ADDRESS`, `PORT`, and other parameters in the script are correctly set according to your device and connection.
- Confirm that you have installed the required Python libraries (`minimalmodbus` and `pySerial`).

**Q: Where can I find more information about the PZEM-004T and PZEM-017 devices?**

A: You can find more information about the devices on their respective product pages:

- [PZEM-017 info page](https://solarduino.com/pzem-017-dc-energy-meter-with-arduino/)

**Q: How do I identify the correct port for my device on my Raspberry Pi or Linux system?**

A: You can run the following command to list available serial ports:

```
dmesg | grep tty
```

Look for lines containing `ttyUSB` or `ttyAMA`. The port name should look like `/dev/ttyUSB0` or `/dev/ttyAMA0`. Use this port name in the `PORT` variable in the Python scripts.

**Q: Can I use these scripts on a Windows system?**

A: Yes, these scripts can be used on a Windows system. You will need to adjust the `PORT` variable in the Python scripts to the appropriate COM port for your device (e.g., `COM3`). You can check available COM ports in the Device Manager under ""Ports (COM & LPT)"".

**Q: How do I install the minimalmodbus and pySerial libraries on a Raspberry Pi or Linux system?**

A: You can install the libraries using the following command:

```
pip3 install minimalmodbus pyserial
```

Make sure you are using `pip3` for Python 3 installations.

**Q: How do I run the scripts with Python 3 on a Raspberry Pi or Linux system?**

A: You can run the scripts with Python 3 using the following command:

```
python3 script_name.py
```

Replace `script_name.py` with the name of the script you want to run, such as `pzem_reading.py` or `change_settings.py`.
",0,0,2,1,solar-energy,"[battery-monitor, dc-monitoring, energy, energy-management, energy-monitor, modbus, python, pzem-017, raspberry-pi, solar, solar-energy]",00000
1021,Solar-panel-calculator-UNITY,MarekHlavka,N/A,https://github.com/MarekHlavka/Solar-panel-calculator-UNITY,https://api.github.com/repos/MarekHlavka/Solar-panel-calculator-UNITY,Simple program to calculate estimate solar power output of solar panel.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,"[calculator, csharp, solar, solar-energy, unity, unity3d]",00000
1022,solaris,ctrlaltf2,N/A,https://github.com/ctrlaltf2/solaris,https://api.github.com/repos/ctrlaltf2/solaris,A performant Rust library to calculate the position of the Sun ☀️,"<div align=""center"">
  <img src=""https://github.com/ctrlaltf2/solaris/blob/main/assets/banner.png?raw=true"" width=""600""/>
</div>

<br>

<div align=""center"">
  Solaris is a Rust library to efficiently predict the position of the Sun at any time and any location on Earth between the years 2017 and 2116. 
</div>

# Paper
Solaris is a *clean-room* Rust implementation of SolTrack ([arXiv:2209.01557v1](https://arxiv.org/abs/2209.01557)). The equations are simple enough to run efficently on embedded systems. The equations were verified by the authors to have high accuracy between 2017 and 2116. This library is an implementation of the paper based _solely on the_ equations presented in the arXiv preprint.

# Validation
The library implementation will be validated using the same methods the paper presents as well as some extra validation. [VSOP87](https://www.caglow.com/info/compute/vsop87) will be used as ground-truth in all tests.

  ## Accuracy
- [ ] What the paper authors did:
  - [ ] VSOP87 comparison: Position of sun seen from Arnhem, Netherlands near sunset/sunrise time
- [ ] Further VSOP87 comparison: 
  - [ ] Random lat/long/time, scale up # timepoints proportionally based on size of sunset/sunrise time slice

  ## Performance
- TBD:
  - Need to be able to lock a CPU core to 2.67 GHz for a fair comparison against the paper-- likely possible with Linux
  
# Disclaimer
  In addition to the disclaimers noted in the license, the author(s) of this are in no way associated with the authors of the SolTrack paper and make no claim to be.


# FAQ
  ## Why ""Solaris""?
Predicting the position of three suns was done by *[Trisolaris](https://www.litcharts.com/lit/the-three-body-problem/terms/trisolaris)*, thus, the prediction of the position of just one sun must be done by none other than *Solaris* (it only makes sense!).

# Citations
```bibtex
@misc{https://doi.org/10.48550/arxiv.2209.01557,
  doi       = {10.48550/ARXIV.2209.01557},
  url       = {https://arxiv.org/abs/2209.01557}, 
  author    = {van der Sluys, Marc and van Kan, Paul},
  keywords  = {Instrumentation and Methods for Astrophysics (astro-ph.IM), Computational Physics (physics.comp-ph), FOS: Physical sciences, FOS: Physical sciences},
  title     = {SolTrack: a free, fast and accurate routine to compute the position of the Sun},
  publisher = {arXiv},
  year      = {2022},
  copyright = {Creative Commons Attribution Non Commercial Share Alike 4.0 International}
}
```
",0,0,1,0,solar-energy,"[astronomy, photovoltaic, physics, pv, renewable-energy, renewables, solar-energy, solar-system, solar-tracking]",00000
1023,Tesla-Tessie-Poweropti_Powerfox-Automation,eliaspfeffer,N/A,https://github.com/eliaspfeffer/Tesla-Tessie-Poweropti_Powerfox-Automation,https://api.github.com/repos/eliaspfeffer/Tesla-Tessie-Poweropti_Powerfox-Automation,"Start / Stop charging your Tesla, when your solar panel produces more energy than you need","# Tesla-Tessie-Poweropti_Powerfox-Automation
This script is primarily designed for German households, as they typically have a standardized electricity meter. With digital electricity meters, you can monitor whether your solar power system is importing or exporting energy to the grid. This script checks this every 60 seconds. If the solar power produced by your household minus your household consumption is sufficient to charge your Tesla, the script will initiate charging when the Tesla is at your home location. (Please ensure that you enter your home address exactly as it appears in your Tesla App / Tessie App).

# Prerequisites:
0.) A computer that can run 24/7

1.) The Tessie App for starting/stopping the charging: Tessie Website: https://tessie.com

2.) A reader to monitor your solar power output: Poweropti by Powerfox: https://poweropti.powerfox.energy/

3.) The code for your digital electricity meter, like this one: YouTube Video: https://poweropti.powerfox.energy/

# Costs:
Tessie App: Available as a monthly subscription (€6) or a one-time lifetime purchase (€230)

Powerfox: €90

# How to Run:
Download this GitHub repository onto a computer that runs 24/7.

Navigate to the folder where you saved the download.

Locate the Main.java file.

Open Main.java with a text editor.

Update the corresponding values like AUTHORIZATION, YOUR_AUTHENTICATION_TOKEN (from Powerfox), VRN (Vehicle Registration Number: see in your Tesla App), BEARER (see Tessie website: Tessie Developer Reference (log in to see the String)), and HOME_ADDRESS.

Save the file.

Copy the path where the Main.java file is located (e.g., C:\Users\YOUR_USERNAME\Documents\Visual Studio Code Projects\TeslaTessiePoweroptiScript\folderOne\src\main\java).

Open the Command Prompt (cmd).

Type cd, press Ctrl+V, (now it should say cd C:\......\src\main\java), write 'Main.java', and then press Enter

The script should now start running. You can minimize the Command Prompt window, but do not close it.

Finish.

# Please note:
If you need to charge your Tesla even when your solar panel doesn't produce enough energy / when your household uses up too much energy, then please close the Terminal window. Otherwise it will stop charging after 60 seconds again.
",0,0,1,0,solar-energy,"[charging, powerfox, poweropti, solar, solar-energy, solar-system, tesla, tessie]",00000
1024,solar-webapp,ep4ever,N/A,https://github.com/ep4ever/solar-webapp,https://api.github.com/repos/ep4ever/solar-webapp,ep4ever solar monitoring web app,"# solar-monitoring
ep4ever solar monitoring web app

## Getting started

```bash
npm install
```

```bash
# creates the dist folder (location of the web app)
npm run build
```

Next step is to:
 - unsure http-service has .env file edited correctly (path to the dist folder of this project)

Then you must use http-service project to run the web app.

(!) Web app does not hold any configuration. All configuration are readed from the **http-service** app through the API interface (/api).
",0,0,1,0,solar-energy,"[epever, mppt, realtime, renewables, solar-energy, solar-system, vuejs, webpack]",00000
1025,SolarTool,yashhere,N/A,https://github.com/yashhere/SolarTool,https://api.github.com/repos/yashhere/SolarTool,Project done as part of Non-Conventional Energy Systems course in 7th Semester,"# SolarTool
",0,0,2,0,solar-energy,"[course-project, css, energy-system, html5, javascript, jquery, non-conventional, semantic-ui, solar-energy, typeitjs]",00000
1026,Solar_API,ArturoBurela,N/A,https://github.com/ArturoBurela/Solar_API,https://api.github.com/repos/ArturoBurela/Solar_API,Database API for Solar ROI Drone Project,"# My Application

The project is generated by [LoopBack](http://loopback.io).",0,0,4,0,solar-energy,"[api, roi, ruby, ruby-on-rails, solar-energy]",00000
1027,TrackerAngleAnalysis,jalderman9,N/A,https://github.com/jalderman9/TrackerAngleAnalysis,https://api.github.com/repos/jalderman9/TrackerAngleAnalysis,,"# Tracker Angle Analysis

A quick program and R script to answer the question:
""What percent of time do single axis solar trackers spend within the range of +/- 5 degrees of horizontal?""

## Compile

    make clean
    make

## Run

    ./tracker_angle_calc

## Plot

Open AngleSummary_All.csv and plot results with the tool of choice.
This repo includes an R script that will do this.

## Results

    Percent of time within +/- 5 degrees:
    Seattle.........: 4.35%
    San_Francisco...: 4.30%
    Mexico_City.....: 4.39%
    San_Diego.......: 4.32%
    Anchorage.......: 4.81%

",0,0,0,0,solar-energy,[solar-energy],00000
1028,MEAN-NodeMCU,GienekGenin,N/A,https://github.com/GienekGenin/MEAN-NodeMCU,https://api.github.com/repos/GienekGenin/MEAN-NodeMCU,"Displaying data from solar panel using stm32f7, nodemcu and MEAN app","# Web

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.6.3.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).
",0,0,1,0,solar-energy,"[mean, nodemcu, solar-energy, stm32f767]",00000
1029,skycamIrr,samarth-b,N/A,https://github.com/samarth-b/skycamIrr,https://api.github.com/repos/samarth-b/skycamIrr,A deep learning approach to solar-irradiance forecasting in sky-videos,"# A deep learning approach to solar-irradiance forecasting in sky-videos
This is the project page for our paper titled ""A deep learning approach to solar-irradiance forecasting in sky-videos"" accepted to WACV 2019. 

Also check out our new work on future frame semantic segmentation that [is available on arXiv](https://arxiv.org/abs/1812.10786)

For further information please contact [Talha Siddiqui](mailto:tsiddiqu@andrew.cmu.edu) or [Samarth Bharadwaj](mailto:samarth.b@in.ibm.com).

Our presentation at WACV'19:

[![WACV'19 presentation](http://img.youtube.com/vi/GCMtjtbb0io/0.jpg)](http://www.youtube.com/watch?v=GCMtjtbb0io ""WACV'19 presentation"")
",0,0,4,1,solar-energy,"[ibm-research-ai, skycam, solar-energy, weather-forecast]",00000
1030,REFA,devdananthony,N/A,https://github.com/devdananthony/REFA,https://api.github.com/repos/devdananthony/REFA,REFA COIN For Easy Energy Transaction Using BlockChain Technology To Distribute Energy From Producers To Consumers,"Website: https://refa.energy

Telegram: https://t.me/refaenergy

Telegram C: https://t.me/refachannel

Twitter: https://twitter.com/refaenergy

Medium: http://refatoken.medium.com/

Reddit: https://www.reddit.com/user/refatoken

BSC Contract address: https://bscscan.com/token/0x0C073f661e7f040d8EBF86FB758aAA61Aa90C8a7

About REFACOIN:

Token Ticker: REFA

Token Name: REFACOIN

Blockchain: BEP-20 (Binance Smart Chain)


 27,000,000 REFA Total Supply


REFA Token (Renewable Energy For All) Is
interconnecting Producers of Renewable
energy products and Consumers, We are going to
produce an energy module that will serve as a
pay-as-go module for energy consumption (in-
view), which REFA will be sold to producers and
they will integrate it into their solar
systems/products and then sell to consumers who
will be buying energy unit from the REFA website
(in-view) to subscribe for their energy use,
through REFA Token, thereby increasing the
the market value of REFA.

Let them go to the moon, we are taking over the world!
",0,0,0,0,solar-energy,"[electricity-consumption, electricity-meter, renewable-energy, solar-energy, token]",00000
1031,trailsendmonitor,evansharp,N/A,https://github.com/evansharp/trailsendmonitor,https://api.github.com/repos/evansharp/trailsendmonitor,"A custom CMS, built on CodeIgnitor3, for tracking energy generation and consumption in an off-grid house.","# Trailsend Monitor
A custom CMS, built on CodeIgnitor3, for tracking energy generation and consumption in an off-grid house.
",0,0,1,0,solar-energy,"[codeignitor, monitor, solar-energy, timeseries-data]",00000
1032,RaspiInverter,cabellop5,N/A,https://github.com/cabellop5/RaspiInverter,https://api.github.com/repos/cabellop5/RaspiInverter,Php app for connect Axpert MKS Inverter with Raspberry Pi,"# RASPI INVERTER

Raspi Inverter is a small PHP app to collect data from inverter Axpert MKS (maybe should be compatible with more inverters).

Is ready to take the data through a usb port of a raspberry pi, although any Unix system should be compatible

This data are prepared and insert in InfluxDB for show in Grafana panels.

Soon I will add the links to grafana dashboard and improvements.

By the moment only get data from inverter, not can modify parameters.",0,0,4,4,solar-energy,"[inverter, php, raspberry-pi, solar-energy, solar-system, usb-hid]",00000
1033,data-science-solar-power-plant,luis-cj,N/A,https://github.com/luis-cj/data-science-solar-power-plant,https://api.github.com/repos/luis-cj/data-science-solar-power-plant,Data science project analysing a solar power plant's generation data.,"# Data science project: solar power plant analysis using power generation data
Data science project analysing solar power plant generation data to help a renewable energy supplier make strategic decisions.

This is a **discovery project**, where the main goal is to explore the data sources, check hypotheses and find out new patterns and insights relevant for the business without requiring any machine learning algorithm.

## Context
A renewable energy supplier owns solar power plants that produce electrical energy. Two of those power plants present power production anomalies and the maintenance team does not know the root of the problem.

<p align=""center"">
  <img width=""500"" height=""500"" src=""https://github.com/luis-cj/data-science-solar-power-plant/blob/main/images/plant2.gif"">
</p>

Before sending the technical team to fix the problem the data science team is required to analyse the sensors' data to make a first approximation to the root cause of failure of the equipment.

## Methodology

### 1. Objective
Analyse the available data to find out what is causing the problem in the power plants and conclude if it is necessary to send a technical team to fix the problem in site.

Before proceeding with the other points, it is important to know the basics of solar power production. 

### What is a solar power plant?

<p align=""center"">
  <img width=""542"" height=""238"" src=""https://github.com/luis-cj/data-science-solar-power-plant/blob/main/images/How_Solar_Power_Works.png"">
</p>

A solar power plant is a facility that generates electricity using photovoltaic (PV) cells that convert sunlight into electricity. The PV cells are arranged in arrays or modules and connected to inverters that convert the direct current (DC) electricity produced by the cells into alternate current (AC) electricity that can be fed into the power grid or directly used to switch on electrical household appliances.

During the day, the PV cells produce electricity as long as there is sunlight, and any excess electricity can be stored in batteries or exported to the grid. At night or when there is not enough sunlight, electricity is drawn from the grid or from the batteries.

In this case only the generation data is taken into account assuming there are no batteries as energy storage systems.

### 2. Levers (action variables)
It is necessary to have some knowledge about how the energy is generated in a solar power plant. The data science team has been informed by the technical team on how the process works. 

With that, the levers (variables that affect the business objective, which in this case is generating AC power) are the following:

- **Irradiance**: the greater the irradiance the more DC power can be generated. But there is a limit since at very high panel temperatures the generation capacity is decreased.
- **Panel status**: it is important to have clean modules so they can perform at their full capacity.
- **Inverters' performance**: the process of transforming DC into AC is never 100% efficient. But the closer to 100% the better.
- **Sensors**: if sensors do not work correctly then it is not possible to detect potential plant failures.

### 3. KPIs
- Irradiance: is measured as the rate of solar energy hitting a surface per squared meter [W/m<sup>2</sup>].
- Ambient temperature and module temperature: measured by the sensors [ºC].
- DC power: power measured in direct current from the panels to the inverters [kW].
- AC power: power measured in alternate current from the inverters to the grid [kW].
- Inverters' efficiency: ratio of the AC power delivered to the grid to the DC power generated by the PV panels [%].

### 4. Entities and data
The relevant entities we can retrieve data from in order to accomplish our objective are the following:

- Solar power plants: there are 2
- Inverters: there are many inverters in each plant
- Irradiance sensor: 1 for each plant
- Ambient temperature sensor: 1 for each plant
- Module temperature sensor: 1 for each plant

All the sensors retrieve data every 15 minutes, and the total data set comprises 34 days.

### 5. Seed questions
These are the first questions we need to start finding relevant insights. Different questions apply to each lever.

About irradiance:

- Is there enough irradiance every day?
- Is it similar for both power plants?
- What is its hourly distribution for each plant?
- How does it relate to ambient and module temperature?

About panel status (DC generation):

- What is the relationship between irradiance and DC generation?
- Is it affected by ambient or module temperature?
- Is it similar for both power plants?
- What is its daily distribution for each plant?
- Is it constant throughout the days?
- Has there been any failure?

About inverters' performance (AC generation):

- What is the relationship between DC and AC generation?
- Is it similar for both power plants?
- What is its daily distribution for each plant?
- Is it constant throughout the days?
- Is it constant for every inverter?
- Has there been any failure?

About sensors:

- Are the irradiance data reliable?
- Are the temperature data reliable?
- Are the DC data reliable?
- Are the AC data reliable?
- Are data between both power plants similar?

### 6. Analysis and insights
All the analysis is carried out in the following Jupyter Notebooks (Python):

[Solar power plant generation analysis - Python script (PART 1 - DATA QUALITY)](https://github.com/luis-cj/data-science-solar-power-plant/blob/main/solar_power_plant_part_1.ipynb)

[Solar power plant generation analysis - Python script (PART 2 - DATA TRANSFORMATION)](https://github.com/luis-cj/data-science-solar-power-plant/blob/main/solar_power_plant_part_2.ipynb)

[Solar power plant generation analysis - Python script (PART 3 - ANALYSIS AND INSIGHTS)](https://github.com/luis-cj/data-science-solar-power-plant/blob/main/solar_power_plant_part_3.ipynb)

### 7. Communication
For this project a report was generated in the format of a PowerPoint presentation, communicating all the analysis and found insights.
The report can be checked in the following file:

[Data analysis summary PDF](https://github.com/luis-cj/data-science-solar-power-plant/blob/main/solar_power_plant_conclusions.pdf)

## BONUS: Lessons learnt

- **Sometimes data do not make sense**. It is important to have good communication with the clients or stakeholders because at some point we may need some clarifications about data (missing values, wrong units, wrong dates, etc).
",0,0,2,0,solar-energy,"[business, data-science, python, sensors, solar-energy]",00000
1034,dwalt-gestao-empresa,luarrekcah,N/A,https://github.com/luarrekcah/dwalt-gestao-empresa,https://api.github.com/repos/luarrekcah/dwalt-gestao-empresa,"Site para gestão de projetos fotovoltaicos, essa ferramenta é destinada aos donos das empresas cadastradas na plataforma. Possibilita o registro de clientes, funcionários e projetos.","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,"[ejs, engineering, express, firebase, nodejs, solar, solar-energy]",00000
1035,maticas-hardware,maticas-org,maticas-org,https://github.com/maticas-org/maticas-hardware,https://api.github.com/repos/maticas-org/maticas-hardware,Hardware branch of Maticas.,"# maticas-hardware
Hardware branch of Maticas. Maticas is an  Automated hidroponic system. Project that seeks to create a fully automated hydroponic cultivation system using IoT, with a view to generating an agricultural revolution.
",0,0,0,0,solar-energy,"[bh1750, bme280, esp32, iot, micropython-esp32, mqtt-client, solar-energy]",00000
1036,semmy,roderickvd,N/A,https://github.com/roderickvd/semmy,https://api.github.com/repos/roderickvd/semmy,Personal Solar Energy Monitor,"Semmy
=====

Personal Solar Energy Monitor

Supported inverters
-------------------

Out-of-the-box support is provided for StecaGrid inverters that have an Ethernet interface and web portal with a ""Measurements"" page. If your inverter does have an Ethernet interface, but no such page, then you need to update the firmware.

Semmy is intended to be completely extensible. You can add support for other inverters by implementing the `Inverter` contract. Hook it up in the `InverterServiceProvider` and feel free to send a pull request.

Supported logging portals
-------------------------

Semmy currently supports logging to [PVOutput.org](http://pvoutput.org) and [Sonnenertrag.eu](https://www.sonnenertrag.eu/).

Support weather services
------------------------

Weather conditions can be retrieved from:
* [OpenWeatherMap](https://openweathermap.org)
* [KNMI](http://knmi.nl) (the Royal Netherlands Meteorological Institute)

You can add support for other weather services by implementing the `WeatherStationContract` contract. Hook it up in the `WeatherStationServiceProvider` and feel free to send a pull request.

Setup
-----

1. Copy `.env.example` to `.env`
2. Edit `.env` to suit your configuration
3. Add the following to your crontab:
```
* * * * * php /path/to/semmy/artisan schedule:run 1>> /dev/null 2>&1
```

Semmy also provides a real-time web dashboard that shows the current status of your solar generation and current weather conditions. In your web server, set the document root and index to `public/index.php` and be sure to enable rewrite support.

License
-------

This software by Roderick van Domburg is licensed under the terms of the MIT License.

Beautiful graphs are powered by Highcharts, which is licensed under a Creative Commons Attribution-NonCommercial 3.0 License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc/3.0/.

Free weather data from OpenWeatherMap is licensed under a Creative Commons Attribution-ShareAlike 2.0 License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/2.0/.
",0,0,1,2,solar-energy,"[laravel, logging, pv-systems, pvoutput, solar-energy, sonnenertrag]",00000
1037,solcast-slack,Siliconrob,N/A,https://github.com/Siliconrob/solcast-slack,https://api.github.com/repos/Siliconrob/solcast-slack,Slack Solcast Power Forecast Integration,"# 🌞Solcast Slack Power Forecast🌞
This project demonstrates how to build an app using Slack's commands

## Getting Started
To get started you need to:
- Set up your Slack App in Slack - Find more detailed setup instructions in `setup.md`.
- Invite the bot user to a channel where you want it to work",0,0,2,0,solar-energy,"[api, forecasting, glitch, openstreetmap, slack, slack-commands, solar-energy, worldwide]",00000
1038,Development,AusgreenSolarSolutions,AusgreenSolarSolutions,https://github.com/AusgreenSolarSolutions/Development,https://api.github.com/repos/AusgreenSolarSolutions/Development,Not for Public use,"# Development
Not for Public use
",0,0,1,0,solar-energy,"[australia, installation, inverter, panel, pv, solar, solar-energy, solar-power, solar-system]",00000
1039,IN,OscarGomezGonzalez,N/A,https://github.com/OscarGomezGonzalez/IN,https://api.github.com/repos/OscarGomezGonzalez/IN,,# IN,0,0,3,3,solar-energy,"[business-intelligence, solar-energy, vuejs, vuetify, website]",00000
1040,solarLOCAL,8xu,N/A,https://github.com/8xu/solarLOCAL,https://api.github.com/repos/8xu/solarLOCAL,Little web app to help you track your solar energy consumption and production.,"## SolarLOCAL ☀️
> Little web app to help you track your solar energy consumption and production.

#### Tested on [Fronius Symo 5.0-3-M](https://www.fronius.com/en-gb/uk/solar-energy/installers-partners/technical-data/all-products/inverters/fronius-symo/fronius-symo-5-0-3-m)

### Installation 🕹
> Before you use the app, make sure your inverter is connected to the internet and the local IP is set to the correct value [here](./src/server.js).

After cloning the repository, you can install the dependencies by running:
```bash
npm install
```
After installing all the NPM dependencies you can run the app by running:
```bash
npm run dev
```

### Contribution 👨🏽‍💻
Not sure what to add? Well, do your best and send a pull request! This project doesn't really need more features than the ones I've added so far, but if you have any suggestions, please let me know! 😄",0,0,1,0,solar-energy,"[fronius, fronius-api, localhost, solar, solar-energy, symo]",00000
1041,sunstone-rs,hughrawlinson,N/A,https://github.com/hughrawlinson/sunstone-rs,https://api.github.com/repos/hughrawlinson/sunstone-rs,☀️🪨 Read data from a Dutch DSMR5 solar panel controller ,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,3,0,solar-energy,"[netherlands, solar, solar-energy]",00000
1042,Prediksi-Radiasi-Solar,Adriansyahpratamaputra,N/A,https://github.com/Adriansyahpratamaputra/Prediksi-Radiasi-Solar,https://api.github.com/repos/Adriansyahpratamaputra/Prediksi-Radiasi-Solar,Deployment Prediksi Radiasi Solar menggunakan Machine Learning (Data Science) model Random Forest Regressor.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,1,solar-energy,"[data-science, deployment, flask, machine-learning, panel-surya, prediction-model, restful-api, solar-energy, solar-panel, solar-radiation]",00000
1043,FreeDS-SCADA,Linux-RISC,N/A,https://github.com/Linux-RISC/FreeDS-SCADA,https://api.github.com/repos/Linux-RISC/FreeDS-SCADA,FreeDS SCADA developed using Node-Red,"<a href=""https://www.buymeacoffee.com/rbpiuserf"" target=""_blank""><img src=""https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png"" alt=""Buy Me A Coffee"" style=""height: 60px !important;width: 217px !important;"" ></a>

# FreeDS-SCADA (Pyhon script added, work in progress, use for testing purposes only)
FreeDS SCADA developed using Node-Red

<img src=""FreeDS-SCADA.png"" title=""FreeDS-SCADA"">

#### Project objectives
This project implements a SCADA for FreeDS, developing these functions:
- shows information about FreeDS status
- allows enable/disable PWM and switching modes AUT<-->MAN
- implements two set points in order to switch to MAN mode when the temperature is <= Low_temperature_set_point and switches to AUTO mode when the temperature is >= Low_temperature_set_point+Temperature_increase_set_point

#### Requeriments
1. A Raspberry Pi, I'm using a Raspberry Pi 2 and a 16 GB SD card
2. Raspberry Pi administration skills
3. Install and configure Mosquito MQTT broker and required utilities:<br>
https://randomnerdtutorials.com/how-to-install-mosquitto-broker-on-raspberry-pi/
```
sudo apt install mosquitto mosquitto-clients screen
```
Edit /etc/mosquitto/mosquitto.conf and add at the end:
```
allow_anonymous true
listener 1883 0.0.0.0
```
Enable and restart Mosquitto:
```
sudo systemctl enable mosquitto.service
sudo service mosquitto restart
```
4. Install Node-Red:<br>
https://nodered.org/docs/getting-started/raspberrypi
```
bash <(curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered) 
sudo systemctl enable nodered.service
sudo service nodered restart
```
Access to Node-Red from a Internet browser:<br>
http://raspberry-pi-IP:1880<br>
http://raspberry-pi-IP:1880/ui (runtime)<br>

5. Optional but recommendable:
- download MQTT explorer in order to debug MQTT broker: http://mqtt-explorer.com/
- configure your timezone and enable time synchronization:<br>
raspi-config --> Localisation Options --> Timezone
```
sudo raspi-config
sudo systemctl enable systemd-timesyncd
```

6. Log into Node-Red using http://raspberry-pi-IP:1880 and install node-red-dashboard:<br>
Menu-->Manage Palete-->Install and search node-red-dashboard, select it for installation and accept

7. Download <a href=""FreeDS.py"" target=""_blank"">FreeDS.py</a> and run it in a screen session

8. Download <a href=""FreeDS-SCADA.json"" target=""_blank"">FreeDS-SCADA.json</a>, import it into Node-Red and enjoy !
",0,0,2,0,solar-energy,"[freeds, raspberry, raspberry-pi, scada, solar, solar-energy, surplus, surplus-production]",00000
1044,per_capita_solar_energy_consumption_in_Spain,luismarcoslc,N/A,https://github.com/luismarcoslc/per_capita_solar_energy_consumption_in_Spain,https://api.github.com/repos/luismarcoslc/per_capita_solar_energy_consumption_in_Spain,"Analysis of per capita solar energy consumption over time. Implementation of concepts learned during the course ""Business_economic_&_financial_data"" to a renewable energy dataset.","# Study of the per capita solar energy consumption in Spain.
Implementation of concepts learned during the course ""Business, economic and financial data"":

- Univariate diffusion models
- Multivariate difussion models
- (S)ARIMA(X)
- Non parametric regression: Regression and smoothing splines, loess, GAM and gradient boosting


Check Presentation.pdf file for more details of the results.
",0,0,2,0,solar-energy,"[economics, solar-energy, time-series-analysis]",00000
1045,invafetch,geschke,N/A,https://github.com/geschke/invafetch,https://api.github.com/repos/geschke/invafetch,A tool for retrieving processdata values from Kostal Plenticore inverters.,"# invafetch (inverter value fetcher)

Invafetch is a tool for retrieving processdata values from Kostal Plenticore inverters.

This tool is not affiliated with Kostal and is no offical product of KOSTAL Solar Electric GmbH or any subsidiary company of Kostal Gruppe.

## Description / Overview

Invafetch is one of several building blocks for generating a Grafana dashboard for Kostal Plenticore inverters. Invafetch reads the processdata values at regular intervals from the Inverter API and stores the results in JSON format in a MariaDB table. The Invaps tool uses these values, i.e. reads them and makes them available to Prometheus on request. Grafana, in turn, uses Prometheus as a data source to create a dashboard for the Kostal Plenticore inverter. Here, a modular concept was implemented so that one application, as small as possible, is responsible for a single task at a time. The MariaDB database serves as the interface of the Invafetch and Invaps tools and thus as a buffer for the processdata values. For a description of Invaps see [https://github.com/geschke/invaps](https://github.com/geschke/invaps), a complete example including definition of the Grafana dashboard and a Docker compose file to start all components in a Docker environment can be found at [https://github.com/geschke/grkopv-dashboard](https://github.com/geschke/grkopv-dashboard).


## Installation

The recommended installation method is to use the Docker image, a fully commented example can be found at [https://github.com/geschke/grkopv-dashboard](https://github.com/geschke/grkopv-dashboard). Besides that, Invafetch can be installed from source like any other program written in Go:

```text
$ git clone https://github.com/geschke/invafetch
$ cd invafetch/
$ go build
$ go install
```

This command builds the invafetch command, producing an executable binary. It then installs that binary as `$HOME/go/bin/invafetch` (or, under Windows, `%USERPROFILE%\go\bin\invafetch.exe`).
After that invafetch can simply be started in the command line interface.


## Configuration

All processdata values that can be read out can be found in the `processdata.json` file. These are almost all processdata values provided by the Kostal inverter (except for the scb:export and scb:update modules). If not all values should be read and stored, single processdata ids, but also complete module ids can be removed from the `processdata.json` file. When Invafetch is started, the file is read once and used as configuration parameter.

Invafetch uses the JSON data type of MariaDB and requires a running MariaDB installation. The corresponding definition of the table structure can be found in the sql/ directory in the solardata.sql file.

All configuration options can be passed either in a configuration file (default file name: `~/.env`), as environment variables or as command line parameters.

The following options exist:

|Name of environment variable|CLI flag|Defaults|Example|Hint|
|--------------------|-------------|------------|--------|-------|
|DBHOST|--dbhost|(empty)|""db.example.com""|database server|
|DBUSER|--dbuser|(empty)|""solardbuser""|database username|
|DBNAME|--dbname|(empty)|""solardb""|name of database|
|DBPASSWORD|--dbpassword|(empty)|""myDBPassword""|password of database user|
|DBPORT|--dbport|""3306""|""3306""|MariaDB port (optional)|
|INV_SERVER|--server|(empty)|""192.168.0.100""|inverter address (FQDN or IP)|
|INV_SCHEME|--scheme|""http""|""http""|possible values: http or https|
|INV_PASSWORD|--password|(empty)|""myPlantOwnerPassword""|plant owner password|
|TIME_REQUEST_DURATION_SECONDS|--time-request|3|5|time span between two requests in seconds, i.e. values are read every n seconds|
|TIME_NEW_LOGIN_MINUTES|--time-new-login|10|15|Duration of a session in minutes. A logout and subsequent login occurs after n minutes, so that a new session is created.|

## CLI

If invafetch is called without parameters or with the `--help` or `-h` flag, an overview of the available commands appears:

```text
~$ invafetch

A tool for retrieving values from Kostal Plenticore inverters


Usage:
  invafetch [command]

Available Commands:
  completion  Generate the autocompletion script for the specified shell
  help        Help about any command
  info        Returns miscellaneous information
  start       Start collecting and storing values from inverter

Flags:
      --config string        config file (default is ~/.env)
      --dbhost string        Database host
      --dbname string        Database name
      --dbpassword string    Database password
      --dbport string        Database port (default ""3306"")
      --dbuser string        Database user
  -h, --help                 help for invafetch
  -p, --password string      Password (required)
  -m, --scheme string        Scheme (http or https, default http)
  -s, --server string        Server (e.g. inverter IP address) (required)
      --time-new-login int   Duration in minutes between two logins to inverter and database (default 10)
      --time-request int     Request new processdata every n seconds (default 3)

Use ""invafetch [command] --help"" for more information about a command.

```

## Quick Start

The installation and setup of the MariaDB database will not be discussed further here. Should an existing MariaDB database server be used, a database must first be created in which the table '*solardata*' is generated from the file `sql/solardata.sql`.

To test the connection to the inverter, the ""`info`"" command can be used. If the connection can be established successfully, information about the inverter API is written:

```text
$ invafetch info version -s 192.168.X.Y -p ""MYPASSWORD""
hostname: _INVERTER HOSTNAME_
sw_version: 01.23.07734
api_version: 0.2.0
name: PUCK RESTful API
```

This information corresponds to a request to the inverter with the URL `http://192.168.X.Y/api/v1/info/version` . Although this request is also possible without authentication, invafetch uses the access as plant owner by default, which needs an authentication. If the password parameter is missing, this is acknowledged with an error message:

```text
~$ invafetch info version -s 192.168.X.Y
password parameter / INV_PASSWORD variable missing.
Please use --password options or add INV_PASSWORD to the config file or to ENV variables
```

All flags can be passed either as CLI parameters, in a config file or as environment variables. The CLI parameters have the highest priority, followed by the environment variables, followed by the information in the config file. If required parameters are missing completely, a corresponding error message is issued. For a list of configuration parameters, see [Configuration](#configuration).

The process for collecting and storing the data is started with the command ""`start`"". Thereby the file `processdata.json` must be in the current directory.

```text
$ invafetch start
Alloc = 0 MiB   TotalAlloc = 0 MiB      Sys = 8 MiB     NumGC = 0
[...]
```

In the current version some parameters about memory consumption and current state are written, this may be omitted or offered as an option in future versions. After startup, new content should be found in the *solardata* table. It should be mentioned again that it is recommended to use the Docker image. The author has been running the combination of invafetch and invaps in a Docker environment stably for several months.

## License

Invafetch is licensed under the MIT License. You can read the full terms here: [LICENSE](LICENSE).
",0,0,1,0,solar-energy,"[golang-application, inverter, kostal, kostal-plenticore, mariadb, plenticore, solar-energy]",00000
1046,solarRouter,tgatinea,N/A,https://github.com/tgatinea/solarRouter,https://api.github.com/repos/tgatinea/solarRouter,Solar router based upon Linky messages to pilot a dimmer connected to an electrical heating water tank,"# solarRouter
Solar router based upon Linky messages to pilot a dimmer connected to an electrical heating water tank

Some links related to Linky

https://hallard.me/demystifier-la-teleinfo/

http://hallard.me/pitinfov12/

https://gammatroniques.fr/connaitre-sa-consommation-electrique-avec-home-assistant/

https://morbret.monsite-orange.fr/page-59f35f96b4860.html

Documentation Enedis for Linky

https://www.enedis.fr/media/2035/download

This version of code was tested with an allogen lamp of 500W.

Next step is to test on a real electrical water tank.

Note that esp32 is used because it has several UARTS that helps to solve issues in reception of Linky messages (e.g. The library <AltSoftSerial.h> looses characters while it is not the case with <HardwareSerial.h>)
",0,0,1,0,solar-energy,"[arduino, linky, solar, solar-energy, solar-router, solar-system]",00000
1047,lora-mesh,syk-yaman,N/A,https://github.com/syk-yaman/lora-mesh,https://api.github.com/repos/syk-yaman/lora-mesh,"A solar-powered LoRa mesh network tested in the Olympic Park, London to sense weather parameters","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,2,0,solar-energy,"[current-sensor, esp32, grafana, heatmap, influxdb, iot, london, lopy4, lora, mesh-networks, mqtt, openthread, projection, sensors, solar, solar-energy, virtual-reality]",00000
1048,EU-JRC-Solar-PV-Model,WM-Energy,WM-Energy,https://github.com/WM-Energy/EU-JRC-Solar-PV-Model,https://api.github.com/repos/WM-Energy/EU-JRC-Solar-PV-Model,Python program to run multiple models through the EU JRC Solar PV model. Variables adjusted through CSV spreadsheet.,"# JRC PVGIS Solar Model - Simple calculator
    #### Description: Solar simulation and modelling calculator.
    ####              Users can set parameters to complete solar PV simulation for any location in the world.
    ####              Program will output as csv files project generation statistics, emission reductions, and some basic finacial parameters.



## General use guidelines:
There are a few basic requirements before running the program to ensure it works correctly. If you are not using an IDE like Jupyter or VScode, then remember to install python 3.9 or higher first before running the **""JRC_solar_model.py""** file.

If you would like to test the features of the program and are happy with the countries listed in the original **""JRC_API_Sheet.csv""** file, then simply download the entire **""JRC_Solar""** folder from this repo. Then run the **""JRC_solar_model.py""** file in order to execute the program. 

Due to the EU JRC model using primarily satellite data for solar data, there are some regions of the world with limited data. A baseline for each country has been established by completing a model for nearly every Capital city in the world if you would like to check these values to ensure the model will be useful for your scenario.

The program will then generate and save three files called **""data_used_in_calculations.csv""**, **""Solar_Model_Results.csv""**, **""Solar_Model_Results.xlsx""**.

The calcualted results for each location can be found in the **""Solar_Model_Results.csv/xlsx""** file, with the variables used in the calculations being found in the **""data_used_in_calculations.csv""** file.

More specific details, requirements, and user options are detailed below. The EU JRC solar PV model can be found at **""https://re.jrc.ec.europa.eu/pvg_tools/en/tools.html#PVP""**


## Requirements:
Make sure that the **""JRC_API_Sheet.csv""** is located within the same folder as the **""JRC_solar_model.py""** file. This is where the user can input data to be used when generating models and calculating values, and is directly read by the program.

Within the CSV file the user can input values under the columns **""Country"", ""Location"", ""PV_Power"", ""Lifespan"", ""Grid kgCO2/kWh"", ""Import _$/kW"" , & ""Solar $/kW"".** Generic values can be used but these cells must not be left empty. 

Coordinate (Lat, Lon) values are **not required** but please input values for these if program is having difficulty locating area from location description.

The original **""JRC_API_Sheet.csv""** contains data for several locations around the world already, so you may find suitable values for your chosen region in the default file.

See table below for the format the values that are input into the CSV file.

|Country|Location|Lat|Lon|PV_Power|Lifespan|Grid kgCO2/kWh|Import $/kWh|Export $/kWh|Solar $/kW|Utilisation Rate|
|:----|:----|:----:|:----:|:----:|----:|:----:|:----:|----:|----:|----:|
|UK|Belfast|||3.2|25|0.257|0.41|0.1766|1375|0.35|

### Input Variable Description:

**Country** = Country code for location being modelled. This is used as many countries have towns/cities with the same name, and this helps identify the correct coordinates.

**Location** = Desired location to complete the simulation and modelling. This can be as simple as a city/town name, or a specific address ""123 Test Street, Belfast""

**Lat** = Latitude coordinate value

**Lon** = Longitude coordinate value

**Pv_Power** = Size of installed solar PV system in kilowatts (kW)

**Lifespan** = Estimated lifespan of project. Standard warranty for solar PV is 25 years.

**Grid kgCO2/kWh** = Amount of CO2 emissions in kg per kWh of electricity obtained from the grid.

**Import $/kWh** = Price paid for electric when buying from the grid. Check local tariffs for this information

**Export $/kWh** = Price recieved for electric sold back to the grid. If unsure or unable to find conclusive data, an estimate of 33% of the import price is recommended.

**Solar $/kW** = Cost to install 1 kW of solar PV in the chosen area. 

**Utilisation Rate** = Value between 0-1 that represents the total % of generated power from solar PV that is consumed on site and not exported.

## How to change location solar PV simulation is completed for:

If you have a specific location that you would like to model, you can either enter a specific address in the **Location** column, or alternatively enter the specific latitude and longitude values under the **Lat** and **Lon** columns respectively.

In the **Location** column it is recommened to use short and specific information when referencing more obsurce locations, as this will help the program find the correct coordinates. An example of this is in the default file where the lecture hall in Harvard where CS50 is delivered can be referenced simply with **""Sanders Theatre""**

There is also little variation across regions in terms of solar potential, so it is also acceptable to simply type in the name of the closest city to the desired location being modelled. Results will not vary massively if you are off by 40-50km and are within an acceptable margin of error.

In order to ensure the correct location is being modelled when using this feature, the address for the coordinates generated are saved in a seperate csv file called **data_used_in_calculations.csv**. In this file the user can find all the variables used when completing the project calculations. This includes the full address produced by **geopy** when acquiring coordinates, so the user can check the location is correct.


## How to run:
Now to collect the data simply run the python file titled **""JRC_solar_model.py""** on the command line. This will calculate the solar potential for all the locations requested, and will generate a csv and excel (xlsx) file with all the data generated.

See explanation for each output provided below.


#### Output Variable Description:

**Location (city)** = Location where simulation and modelling was completed

**Yearly Generation (kWh)** = Total yearly electric generation from solar PV in kilowatts (kW)

**Total Generation (kWh)** = Total electric generation from solar PV over project lifetime in kilowatts (kW)

**Yearly Generation / kW Installed (kWh/kW)** = Total yearly electric generation per kilowatt installed of from solar PV(kW)

**Total Generation / kW Installed (kWh/kW)** = Total electric generation over project lifetime per kilowatt installed of from solar PV(kW)

**Yearly Emissions Saved (kgCO2)** = Kilogram of CO2 emissions saved from one year of project operation

**Yearly Emissions Saved / kW Installed (kgCO2/kW)** = Kilogram of CO2 emissions per kilowatt of solar installed during one year of project operation

**Total Emissions Saved (kgCO2)** = Kilogram of CO2 emissions saved over entire project lifespan

**Total Emissions Saved / kW Installed (kgCO2/kW)** = Kilogram of CO2 emissions per kilowatt of solar installed over entire project lifespan

**Total Project Cost ($)** = Total installation cost of project

**Yearly Savings ($/year)** = Savings from electric bill every year combined with revenues generated from exporting surplus power to the grid

**Total Savings ($)** = Savings from electric bill over project lifetime combined with revenues generated from exporting surplus power to the grid

**Project Payback Period (years)** = Time to recover intial investment cost into solar PV system


## Install through command line interface:

    pip install geopy
    pip install openpyxl
    pip install pandas


## Libraries used within JRC PVGIS Solar Model data calculator:

    from timeit import default_timer as timer
    from geopy.geocoders import Nominatim

    import math
    import os
    import os.path
    import pandas as pd
    import requests
    import sys


## References for default values used within JRC PVGIS Solar Model data calculator:

    Average Electricity prices resource:
    https://www.statista.com/statistics/263492/electricity-prices-in-selected-countries/

    Grid Carbon Intensity resource:
    https://ourworldindata.org/grapher/carbon-intensity-electricity

    Cost to install Solar PV resource:
    https://www.electronicsandyou.com/solar-energy-cost.html

    JRC Solar API Documentation:
    https://joint-research-centre.ec.europa.eu/photovoltaic-geographical-information-system-pvgis/getting-started-pvgis/api-non-interactive-service_en

    Example of returned data from API in JSON format:
    https://re.jrc.ec.europa.eu/api/v5_2/PVcalc?lat=54.59&lon=-5.95&peakpower=3.2&loss=14&outputformat=json&angle=40.0

    Example of returned data from API in CSV format:
    https://re.jrc.ec.europa.eu/api/PVcalc?lat=54.11&lon=-5.91&peakpower=1&loss=14&outputformat=csv

",0,0,0,0,solar-energy,"[energy, energy-calculator, eu-jrc, pvgis, solar, solar-energy, solar-model, solar-panels, solar-pv]",00000
1049,SunWave,nvargas24,N/A,https://github.com/nvargas24/SunWave,https://api.github.com/repos/nvargas24/SunWave,"Sistema que registra la intensidad de luz en una cierta zona en la cual se coloca un panel solar. Dependiendo de los datos obtenidos, por medio de un mecánismo de engranajes, se orienta el panel según la posición más eficiente.","# SunWave
Prototipo de sistema embedido ""seguidor de luz"" con EDUCIAA-NXP para la cátedra Técnicas Digitales 2 UTNFRH.
Se toma registro de la intensidad de luz en una cierta zona en la cual se coloca un panel solar. Dependiendo
de los datos obtenidos, por medio de un mecánismo de engranajes, se orienta el panel según la posición más eficiente.   
Con el objetivo de capturar la mayor intensidad de luz posible y de esta forma cargar una bateria de forma constante.     

# Autores  
Sr. Kyanka, Santiago  
Sr. Lopéz, Ignacio  
Sr. Vargas, Nahuel  

",0,0,1,0,solar-energy,"[data-analysis, educiaa, freertos, nxp, pcb-design, servo-motor-control, solar-energy]",00000
1050,solar-esp,nicetiger,N/A,https://github.com/nicetiger/solar-esp,https://api.github.com/repos/nicetiger/solar-esp,Wemos Based Solar Powered ESP8266 to geather environmental data,"# solar-esp

Wemos Based Solar Powered ESP8266 to geather environmental data

## Arduino Code

Within the Arduino Code the sensor data are published to MQTT

## MQTT to Database

on the server, the python script subscribes to MQTT and feeds the data to a mariadb table.

## Database to Visualization

Data is read from mariadb and visualized with matplotlib

example: <img src=""screenshots/plot.png""/>

### Credits

This project was inspired by the Solar Powered WiFi Weather Station on Instructables:
http://www.instructables.com/id/Solar-Powered-WiFi-Weather-Station
",0,0,0,0,solar-energy,"[bme280, esp8266, solar-energy, wemos-d1-mini]",00000
1051,solarMapper,waynehuu,N/A,https://github.com/waynehuu/solarMapper,https://api.github.com/repos/waynehuu/solarMapper,,"# Mapping solar array location, size, and capacity using deep learning and overhead imagery
## Jordan M. Malof, Boning Li, Bohao Huang, Kyle Bradbury, Artem Stretslov

The effective integration of distributed solar photovoltaic (PV) arrays into existing power grids will require access to high quality data; the location, power capacity, and energy generation of individual solar PV installations. Unfortunately, existing methods for obtaining this data are limited in their spatial resolution and completeness. We propose a general framework for accurately and cheaply mapping individual PV arrays, and their capacities, over large geographic areas. At the core of this approach is a deep learning algorithm called SolarMapper - which we make publicly available - that can automatically map PV arrays in high resolution overhead imagery. We estimate the performance of SolarMapper on a large dataset of overhead imagery across three US cities in California. We also describe a procedure for deploying SolarMapper to new geographic regions, so that it can be utilized by others. We demonstrate the effectiveness of the proposed deployment procedure by using it to map solar arrays across the entire US state of Connecticut (CT). Using these results, we demonstrate that we achieve highly accurate estimates of total installed PV capacity within each of CT's 168 municipal regions.

[Full text on arXiv](https://arxiv.org/abs/1902.10895)

Visulization webpage created by Wayne Hu. Built with Mapbox.
",0,0,3,0,solar-energy,"[geospatial-visualization, solar-energy]",00000
1052,mooc-renewables-outsmarting-intermittency-notes,arnaudj,N/A,N/A,https://api.github.com/repos/arnaudj/mooc-renewables-outsmarting-intermittency-notes,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C101:9CF4:27DC7A8:51B3FFF:65224057.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
1053,SolarData,shagadellic,N/A,https://github.com/shagadellic/SolarData,https://api.github.com/repos/shagadellic/SolarData,shared code base,"
Want to automate turning stuff on and off using home solar / battery conditions.........
----------------------------------------------------------------------------------------------------------

There are apps that will do this provided they can plug into the vendor API. I wanted to create my own
app and have had to fudge access to the data source as the vendor will not grant me access to their API.

miner.ps1 is a simple scrape program that works on the caveat that you can still cut and paste the 
text results created by server side java. You cannot parse the site as you normally would. I have
it running in a scheduled task every 15 minutes with a nightly reboot.

To make it work...

Edit the config.xml file to connect to your solar vendors web gui - tested with Chrome

Use find_page_title.ps1 to find the site title to put into config.xml

Add your authenticated tokenised URL to the <URL> field

update the fields with the line number you want to retrieve (copy your solar gui page 
and paste to notepad, count line number starting at zero)
  
This all runs well on a preloved (<150 bucks) Intel Nuc siting in the laundry. Very simple 
but it has proven to create a robust 'left field' data source! The field numbers specified
work with the Redback solar portal. They probably all work in a similar way.
                                       
I will get around to creating some apps that will use the data.      
                                     
You may find bits useful for a project.                                      
                                       
Twitter: @psanders_aus

",0,0,1,0,solar-energy,"[powershell-script, solar-energy]",00000
1054,invaps,geschke,N/A,https://github.com/geschke/invaps,https://api.github.com/repos/geschke/invaps,Inverter Value Prometheus Service,"# invaps (inverter value Prometheus service)

Invaps is a tool which reads inverter processdata values from a MariaDB database and acts as endpoint which can be scraped from Prometheus monitoring solution.

This tool is not affiliated with Kostal and is no offical product of KOSTAL Solar Electric GmbH or any subsidiary company of Kostal Gruppe.

## Description / Overview

Invaps is one of several building blocks for generating a Grafana dashboard for Kostal Plenticore inverters. Invafetch reads the processdata values at regular intervals from the Inverter API and stores the results in JSON format in a MariaDB table. The invaps tool uses these values, i.e. reads them and makes them available to Prometheus on request. Grafana, in turn, uses Prometheus as a data source to create a dashboard for the Kostal Plenticore inverter. Here, a modular concept was implemented so that one application, as small as possible, is responsible for a single task at a time. The MariaDB database serves as the interface for the invafetch and invaps tools and thus as a buffer for the processdata values. For a description of invafetch see [https://github.com/geschke/invafetch](https://github.com/geschke/invafetch), a complete example including definition of the Grafana dashboard and a Docker compose file to start all components in a Docker environment can be found at [https://github.com/geschke/grkopv-dashboard](https://github.com/geschke/grkopv-dashboard).

## Installation

The recommended installation method is to use the Docker image, a fully commented example can be found at [https://github.com/geschke/grkopv-dashboard](https://github.com/geschke/grkopv-dashboard). Besides that, invaps can be installed from source like any other program written in Go:

```text
$ git clone https://github.com/geschke/invaps
$ cd invaps/
$ go build
$ go install
```

This command builds the `invaps` command, producing an executable binary. It then installs that binary as `$HOME/go/bin/invaps` (or, under Windows, `%USERPROFILE%\go\bin\invaps.exe`).
Thus invaps can be started simply in the command line.

## Configuration

A `.env` file is used for configuration, which must be located either in the current directory, in a `./config` or `/config` directory. Furthermore, the use of environment variables is possible. Invaps requires access to the database used by invafetch. As with invafetch, invaps requires read and write access, as the stored values are currently deleted by default after two days to reduce space requirements. To prevent deletion from the database the parameter PURGE_DAYS can be set to *0*.

In addition to the database connection, the web server port can also be configured, with this set to *8080* by default.

Overview of the configuration options:

|Name of environment variable|Defaults|Example|Hint|
|----------------------------|--------|-------|----|
|DBHOST|(empty)|""db.example.com""|database server|
|DBUSER|(empty)|""solardbuser""|database username|
|DBNAME|(empty)|""solardb""|name of database|
|DBPASSWORD|(empty)|""myDBPassword""|password of database user|
|DBPORT|""3306""|""3306""|MariaDB port (optional)|
|PORT|""8080""|""8080""|Webserver port|
|PURGE_DAYS|2|14|Purge from database after n days; 0 disables purge process (optional)|


## Quick Start

Invaps is built on top of the [Gin](https://gin-gonic.com/) HTTP web framework. Gin uses the environment variable `GIN_MODE` to set up debug mode, which contains additional output not required for operation. If `GIN_MODE` is not set, debug mode is enabled; for operation and to disable debug mode, set `GIN_MODE=release`.

When invaps is started, the configuration file `.env` is read. If this is missing or no connection can be established, invaps is terminated.

A successful start of invaps looks like the following:

```text
$ ./invaps
2022/08/11 18:10:56 invaps starting on port 8080...
2022/08/11 18:10:56 in recordCurrentValues again!
2022/08/11 18:10:56 in recordcurrentValues again with last values!
[...]
```

Invaps then makes the inverter metrics available at the URL http://[server][:port]/metrics.

## License

Invaps is licensed under the MIT License. You can read the full terms here: [LICENSE](LICENSE).
",0,0,1,0,solar-energy,"[golang-application, inverter, inverter-graphs, kostal, kostal-plenticore, plenticore, prometheus, prometheus-metrics, solar-energy]",00000
1055,Gobel-Power-PC-BMS-RS485-ModBus,fancyui,N/A,https://github.com/fancyui/Gobel-Power-PC-BMS-RS485-ModBus,https://api.github.com/repos/fancyui/Gobel-Power-PC-BMS-RS485-ModBus,Gobel Power LiFePO4 Battery PC BMS RS485 Modbus Communication,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,"[battery-management-system, battery-monitor, modbus-protocol, solar-energy, solar-system]",00000
1056,S3-Switch,Berg0162,N/A,https://github.com/Berg0162/S3-Switch,https://api.github.com/repos/Berg0162/S3-Switch,Smart Solar Surplus Switch,"# S3-Switch &nbsp;&nbsp;Smart-Solar-Surplus-Switch
In Europe many households are equiped with modern meters (a.k.a. smart meters) for billing the energy consumption without human interference. These smart meters send readings to the energy supplier automatically but they also have a P1 port that gives you access to all measured energy data.
The present project uses a commercial device to read constantly this P1 port: [Homewizard P1 Meter](https://www.homewizard.com/p1-meter/). This P1 Meter is compatible with most modern meters in Europe.</br>

It becomes even more interesting when your solar panels are involved in the energy equasion. The Homewizard P1 meter is able to monitor and record the energy management of the household at any moment in time. That includes the solar energy sent from the inverter back into the power grid with revenue grade accuracy. The total energy consumption is the basis of the utility bills from the energy supplier(s) every month. One wants a maximum benefit of the solar energy for good reasons!</br>

The net power is the difference between the power the household is importing from and the power the inverter exports to the utility grid at any moment in time. When the net power is negative the export (solar production) exceeds the import of power and you might want to switch on extra electric appliances (like a battery charger, kitchen boiler or something else) to have maximum benefit of the solar surplus power. A smart switch with exactly that capabibilty would come in very handy! No doubt commercial parties (like [Homewizard](https://www.homewizard.com/energy-plus/)) offer this service but always at a recurring pricing model and a security compromise...</br>

## Homewizard WiFi P1 meter API </br>
Homewizard should be praised for their openness with respect to the well documentated access to the P1 Meter!</br>
[Get started with the Homewizard API](https://homewizard-energy-api.readthedocs.io/index.html)</br>

The present project created 2 instances of a <b>Smart-Solar-Surplus-Switch</b> that share most of the software but differ in the selected electronic components:
## 1 S3-Switch with LilyGo ESP32S3 T-display
This board and ESP32S3 processor was selected for its excellent specifications and crisp display. Aside of gaining experience with the [TFT_eSPI](https://github.com/Bodmer/TFT_eSPI) library, creating a nice visual user interface was a dominant incentive. A lot of inspiration and practical knowledge was obtained by studying on Youtube: [the Volos Projects](https://www.youtube.com/c/VolosProjects). This ended up in a good working and visually attractive S3-Switch but definitively not the most cost-effective or simple solution to build! The solution works in the living space (as a ""green"" charging point) rather than hidden under the kitchen sink!

## 2 S3-Switch with Sonoff Basic R2 (ESP8266)
The Sonoff was selected for its very low cost, ready for-the-purpose-package, is meant to be hacked and to upload/flash custom firmware. It ended up as the reliable S3-Switch workhorse that is tucked away aside the fuse box...<br>

## Arduino IDE 2.2
The present code is developed on Arduino IDE 2.2. Notice that you will need for each of these processors (<b>ESP32S3</b> and/or <b>ESP8266</b>) an Arduino IDE that is tailored for the specific type!<br>

# 1 S3-Switch with ESP32S3-T-display

## 1.0 Before you start
Please follow the installation instructions for the [ESP32S3 T-display](https://github.com/Xinyuan-LilyGO/T-Display-S3)<br>
If you select in the menu bar of Arduino IDE 2.2 <b>Tools</b>, the settings for the <b>ESP32S3</b> processor and the project are the following:
<p align=center>
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/LilyGO_ESP32S3_Tools_Settings.png"" width=""350"" height=""400"" alt=""S3-Switch"">
</p>
<br clear=""left"">

## 1.1 Electronic Components </br>
### LilyGo ESP32S3 T-display<br>
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/T-DISPLAY-S3.jpg"" align=""left"" width=""500"" height=""500"" alt=""S3-Switch"">
LilyGo T-Display-S3 is an ESP32-S3 development board. It is equipped with a color 1.9"" LCD screen (170*320) and two programmable buttons. Communication with the display is using an I8080 interface. Its overall size has the same layout as the T-Display. The ESP32S3 allows for USB communication and can be programmed in the Arduino Integrated Development Environment (IDE).<br>

See for specifications, installation and setup: [LilyGo ESP32S3 T-display](https://github.com/Xinyuan-LilyGO/T-Display-S3)
<br clear=""left"">

### 5V Relay 1-Channel High-active or Low-active</br>
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/relay high low active 1 channel-600x600h.jpg"" align=""left"" width=""200"" height=""200"" alt=""S3-Switch"">

Specifications:<br>
- Supply voltage: 5V DC
- Signal voltage: 3.3-5V
- Maximum voltage through relay: 250V AC or 110V DC
- Resistive load: 10A (125V AC), 7A (240V AC) or 7A (28V DC)
- Inductive load: 3A (120V AC) or 3A (28V DC)
- Status led shows relay switched ON or OFF
  
Pinout:<br>
- DC+: 5V supply voltage
- DC-: Ground/GND
- IN: Signal pin
- NO: Relay normally open
- COM: Relay common
- NC: Relay normally closed
<br clear=""left"">

### PCB Power supply</br>
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/hi-link-pcb-power-supply-5vdc-1a-hlk-5m05-front-side-600x600.jpg"" align=""left"" width=""200"" height=""200"" alt=""S3-Switch""> 

Specifications:<br>
- Input voltage (AC pins): 100 - 240V AC (recommended), 90 - 264V AC (maximum)
- Output voltage (+Vo and -Vo pins): 5V DC
- Maximum output current: 1000mA (continuous)
- Voltage control:  ±0.2%
- Load regulation:  ±0.5%
- Exit ripple: <70mV
<br clear=""left"">

## 1.2 Circuitry and physical setup</br>
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/Circuitry.jpg"" width=""820"" height=""461"" ALIGN=""left"" alt=""S3-Switch"">
<br clear=""left"">

>[!WARNING] 
>Some components are connected to 220 Volt AC mains, you really need to know what you are doing since this can be potentially dangerous!

<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/113236.jpg"" width=""620"" height=""440"" ALIGN=""left"" alt=""S3-Switch""></br>
<br clear=""left"">

<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/093314.jpg"" width=""492"" height=""536"" ALIGN=""left"" alt=""S3-Switch""></br>
<br clear=""left"">

## 1.3 Functionality
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/093440.jpg"" width=""315"" height=""453"" ALIGN=""left"" alt=""S3-Switch"">

- Connects to your local WiFi network (you have to supply SSID and its Passphrase)
- Will autodetect the Homewizard P1 Meter on the same network and connects to it. Every 5 seconds it will poll for new info.
- Displays actual time retrieved from Internet
- Displays Switch Status in addition to the Led status of the Relay board
- Displays Net Power in digits and gauge presentation (surplus: green CCW and consumption: brown CW)
- Switches the relay ON when Net Power reaches more than or equal -500 kW surplus (value of your choice)
- Allows for 4 fixed clock switch moments (and duration) independent of Net Power level, visible in the display (red blocks)
- Displays time intervals when the smart switch was activated (green ribbon)
- Has a builtin simple webserver for local access to show status and edit remotely clock switch moments and duration
- Point a browser to the local fixed IP address: <b>192.168.2.100</b> or to: <b>esp32s3.local</b> 
<br clear=""left"">

# 2 S3-Switch with Sonoff ESP8266

## 2.0 Before you start

Please follow the installation instructions for the [ESP8266 processor](https://arduino-esp8266.readthedocs.io/en/latest/installing.html)<br>
If you select in the menu bar of Arduino IDE 2.2 <b>Tools</b>, the settings for the <b>ESP8266</b> processor and the project are the following:
<p align=center>
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/Sonoff_ESP8266_Tools_Settings.jpg"" width=""500"" height=""500"" alt=""S3-Switch"">
</p>
<br clear=""left"">

## 2.1 Electronic Components </br>
### Sonoff Basic R2
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/094905.jpg"" width=""416"" height=""554"" ALIGN=""left"" alt=""S3-Switch""></br>
Specifications:<br>

- Voltage range: 90-250V AC (50/60Hz)
- Max current: 10A
- Max. Power: 2200W
- WiFi chip: ESP8266 or ESP8285
- Dimensions: 91\*43\*25mm (l\*b\*h)
- Wireless standard: 802.11 b/g/n
- Security mechanism: WPA-PSK/WPA2-PSK
- Working temperature: 0ºC-40ºC

See the following page for more information about this product: [Sonoff Basic R2 - WiFi Switch - ESP8266/ESP8285](https://sonoff.tech/product/diy-smart-switches/basicr2/)
<br clear=""left"">
### CP2102 USB UART Board<br>

The CP2102 USB UART Board (type A) is an accessory board that features the single-chip USB to UART bridge CP2102 onboard.
The board used in the project is from manufacturer: [Waveshare](https://www.waveshare.com/CP2102-USB-UART-Board-type-A.htm)<br>
This board is only used to flash/upload new firmware to the Sonoff. It can afterwards be disconnected and will only serve again when you need to update the firmware.

<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/FTDI.jpg"" width=""259"" height=""471"" ALIGN=""left"" alt=""S3-Switch"">
CP2102 features:<br>

- Single-Chip USB to UART Data Transfer
- No external resistors required, no external crystal required
- On-chip power-on reset circuit and voltage regulator
- Integrated 1024-Byte EEPROM

Virtual COM Port Device Drivers<br>
- Windows 8/7/Vista/Server 2003/XP/2000
- MAC OS-X/OS-9
- Linux 2.40 or higher
- USBXpress Direct Driver Support
- Windows 7/Vista/Server 2003/XP/2000
- Windows CE
<br clear=""left"">

Features<br>
- Supports Mac, Linux, Android, WinCE, Windows 7/8/8.1/10/11...
- Voltage output support: 5V or 3.3V <b>--> Check for 3.3V setting!!!</b>
- Integrated USB protection device: SP0503
- 3 LEDs: TXD LED, RXD LED, POWER LED
- Pins accessible on pinheaders: TXD, RXD, RTS, CTS

## 2.2 Functionality
- Connects to your local WiFi network (you have to supply SSID and its Passphrase)
- Will autodetect the Homewizard P1 Meter on the same network and connects to it. Every 5 seconds it will poll for new info.
- Led will indicate switch status: blue blinking -> connecting; blue continuous -> AP mode; red continuous S3-Switch is ON
- Switches the relay ON when Net Power reaches more than or equal -500 kW surplus (value of your choice)
- Allows for 4 fixed clock switch moments (and duration) independent of Net Power level
- Button allows for toggling the switch on or off
- Has a builtin simple webserver for local access to show status and edit remotely fixed clock switch moments and duration
- Point a browser to the local fixed IP address: <b>192.168.2.200</b> or to: <b>esp8266.local</b>

## 2.3 Boot your Sonoff in Flashing Mode<br>
The Internet is crowded with instructions on how to flash your code to a Sonoff device. [Search now.](https://www.google.com/search?q=flash+sonoff) One of the most detailed instructions you can find is 
on [Random Nerd Tutorials](https://randomnerdtutorials.com/how-to-flash-a-custom-firmware-to-sonoff/). Study their tutorial to get acquainted with the technique!

<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/095604.jpg"" width=""356"" height=""473"" ALIGN=""left"" alt=""S3-Switch"">
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/095604_detail.jpg"" width=""426"" height=""323"" ALIGN=""left"" alt=""S3-Switch"">
<br clear=""left"">

## 2.4 Connection scheme and colors used in the project<br>
<b>Check for 3.3V jumper setting on the Waveshare board!</b>
|Waveshare pins|SONOFF pins|Color|
|--------------|--------------|--------------|
|Vcc |3.3V|Red|
|TxD |Rx|Orange|
|RxD |Tx|Yellow|
|Gnd |Gnd|Black|

## 2.5 Entering the SSID and Password of your local WiFi network
The <b>Sonoff S3-Switch</b> supports Access Point mode (at startup) that allows you to use the S3-Switch to create a temporary WiFi network to connect. This is similar to WiFi connection sharing available on phones (a.k.a. hotspot). As with phones, the operation of a WiFi router is simulated: this is known as a Soft AP (for “software” WiFi access point). With Access Point mode one creates a private WiFi local area network wholly isolated from others.
At startup the S3-Switch checks for a <b>valid</b> SSID and Passphrase to connect to your local WiFi network. If this check fails the S3-Switch starts Access Point mode to allow you to enter the credentials of the WiFi router of your choice and allows the Sonoff S3-Switch to connect to the local WiFi network. Most connected objects use this principle to connect to the home WiFi.
After the valid SSID and Passphrase is checked this information is stored persistently and the S3-Switch will use these data, the next time it is powered or reset. Entering the SSID info is a one-time user action! 
If the S3-Switch is in AP mode:
- On your phone/tablet search for the open WiFi network with name: <b>ESP8266-AP</b> (NO password!)
- Connect your phone to this hotspot
- Point your browser to the fixed IP Address: <b>192.168.4.1</b>
- Your browser will show a form
- Enter the SSID and Password. Press Submit button..
- Receipt will be confirmed!
If all goes well, the S3-Switch now (always) connects to the local WiFi network of your choice!

## 2.6 Sonoff S3-Switch remote access using the browser<br>
The Sonoff S3-Switch can remotely be accessed by pointing the browser (on your desktop, tablet or smartphone) to a fixed host IP address: <b>192.168.2.200</b> or to: <b>esp8266.local</b>. The simple builtin web server will respond with a start page, that helps you select the different options.<br>

<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/Sonoff_01.jpg"" width=""350"" height=""380"" ALIGN=""left"" alt=""S3-Switch"">
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/Sonoff_02.jpg"" width=""350"" height=""380"" ALIGN=""left"" alt=""S3-Switch"">
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/Sonoff_03.jpg"" width=""350"" height=""380"" ALIGN=""left"" alt=""S3-Switch"">
<img src=""https://github.com/Berg0162/s3-switch/blob/main/images/Sonoff_04.jpg"" width=""350"" height=""380"" ALIGN=""left"" alt=""S3-Switch"">


",0,0,1,0,solar-energy,"[esp32s3, esp8266, lilygo-tdisplay-s3, smart-switch, solar-energy, sonoff-basic, surplus]",00000
1057,zendure_ble,epicRE,N/A,https://github.com/epicRE/zendure_ble,https://api.github.com/repos/epicRE/zendure_ble,Zendure SolarFlow - Bluetooth protocol,"# zendure_ble
Zendure SolarFlow - Bluetooth protocol
",0,0,1,0,solar-energy,"[ble, bluetooth, pv, solar-energy, solarflow, zendure]",00000
1058,SilverRover,nsilveri,N/A,https://github.com/nsilveri/SilverRover,https://api.github.com/repos/nsilveri/SilverRover,A small Rover made with 2 DVD cases,"# SilverRover

ROVER:
  ![alt text](https://github.com/nsilveri/SilverRover/blob/main/images/photo_2022-04-18_17-26-45.jpg)
  ![alt text](https://github.com/nsilveri/SilverRover/blob/main/images/photo_2022-04-18_17-26-41.jpg)
  ![alt text](https://github.com/nsilveri/SilverRover/blob/main/images/photo_2022-04-18_17-26-34.jpg)

WEB UI CONTROL:

  WiFi connection:
    ![alt text](https://github.com/nsilveri/SilverRover/blob/main/images/Screenshot(20).png)
    ![alt text](https://github.com/nsilveri/SilverRover/blob/main/Web_UI_control.png)


  4G connection:
    ![alt text](https://github.com/nsilveri/SilverRover/blob/main/images/Screenshot(21).png)

    
    Web UI is based on work of [@MrDyne](https://github.com/MrDyne/PiRover/blob/master/www/index.htm), the difference with him work is that I have added some features and changed some functionality: switch to MQTT for commands and receive telemetry, joystick support for control rover and other buttons for specific actions.

https://github.com/nsilveri/SilverRover/blob/main/VID-20210402-WA0045.mp4

A small Rover made with 2 DVD cases, 5 servomotors (Servo 9G), 4 rotary servomotors (Servo 9G R), 4 solar panels (5v 500mA * 4) managed by 2 Servo 9G each and 5 Lidars, with the sensor front motorized with 1 of 5 9G Servos, a Raspberry Pi Camera with IR for night vision, a Waveshare Solar Power Manager(B) with 10000mA battery;
all this driven by Raspberry Pico which receives commands from a Raspbery Pi via USB Serial, the Raspberry Pi receives commands from Web UI via MQTT and sends back the status of the Rover via MQTT.
    
    
  UPGRADES:
    
  24/01/2021
  
    1) Radar alert: every loop Arduino ask distance to all HC-SR04 and if one of this distance is <20, alert is true; this function is used to STOP the rover while it is       running; this feature can be disabled pressing 5 key.
    2) Added continuos running pressing E key: the rover run forward until the user press back key (S key on keyboard) or the radar alert income, the user can use all functions( right, left,....) while the rover is running.
    3) I decided to use 2 powerbank (1 as power supply for RPi, 1 as power supply for PCA9285 (all motors)) to solve the crash problem i have only with 1 powerbank to power all.
    4) I removed the WebCam and bought an RPi Camera with IR for night vision (https://www.amazon.it/gp/product/B07DRH5Y5S/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&psc=1), now the videostream is 1920X1080, and the delay of video stream is between 0.2 and 0.5 seconds with high wifi signal
    5) I switch to from Orange Pi to Raspberry Pi 2 with an USB WiFi dongle becouse the RPi Cam is only Raspberry PI compatible.
    6) Switched from motion software to this https://elinux.org/RPi-Cam-Web-Interface for now.

  20/02/2021
   
    1) [POWER ENERGY UNIT] Added 2 Waveshare Solar Power Management Module with a 5000mA battery for each, one battery for Arduino and PCA9685 module, one battery for        Raspberry Pi 2 and Camera
            
    2) [POWER ENERGY UNIT] positioned higher
          
  27/02/2021
   
    1) I put my phone with hotspot on the rover and used the software ""remoteit"" to connect remotely with SSH and Cam Website, it works very well without lags (i used an S8           with 4G conection). I just bought a 4G Dongle USB, i will try with it

   26/06/2021
   
    1) Switched from Raspberry Pi 2 to Raspberry Pi Zero to reduce battery consumption
    2) Switched from Arduino Nano to Raspberry Pico
    3) Switched from HC-SR04 to front and center position with Lidar sensor, the rear sensor remains HCSR-04
    4) Now the rover uses the second core on Pico,
    core0 (to the manager commands received by Serial from Rapberry Pi Zero), core1 (manage the Lidar sensor to update the distances around the rover,
    core0 will read the distances and handle the situation based on the distances)
    5) Added the ""Skirt wall"" function to make the rover able to automatically steer to always keep the same distance from a side wall as it advances
    6) Added Ackermann angle
    7) Added support for 4G Wingle to connect to the rover via 4G allowing you to go anywhere without limits due to the range of the WiFi connection
    8) Added slot to insert an additional 2500mAh power bank inside the Rover to power the 4G Wingle separately
    9) Added module to read the battery voltage
    10) The PCA9685 module is now connected to I2C0, managed by core0 while the Lidar sensors are connected to I2C1 managed by core1

    I will update the photos as soon as possible

  18/04/2022
   
    1) Switched from Raspberry Pi Zero to Raspberry Pi Zero 2
    2) Added a multithread python script to manage outcoming (first thread) rover commands to Pico and read incoming (second thread) telemetry through Serial1 
    3) Added Web UI to control the rover
    4) Used MQTT protocol to make communication between Web UI and Python script
    5) Used Apache Reverse Proxy to transform service ports into urls (ex. http://RoverIpAddress:8082/stream --->  http://RoverIpAddress/camera), this make the       possibility to open only 1 port (:80 for Web UI) on Remoteit vs previously 3 ports (:80 for Web UI, :8082 for camera video, :1884 for MQTT over WS, :5002 for       microphone stream)
    6) Added audio board USB with microphone
    7) Added external WiFi antenna to expand range when used via WiFi
    8) the Python script recognise if the rover is connected to generic WiFI or LTE Wingle WiFi, if it's connected to generic Wifi it will print the signal and quality WiFi strength, if it's connected to LTE Wingle Wifi it will print the signal strength, quality and carrier name of the LTE connection.
    9) Added an INA219 to read the battery voltage and current, the INA219 is modded with a 050R resistior to make more current readable and it is connected to I2C1 and is managed by core1, on Web UI if the nattery is discharging it will show a yellow value on Web UI, instead if the battery is charging it will show a green value.
    10) Added 2 solar panels with 5v 500mA each for a total of 4 solar panels, i tried under high sunlight and it produced about 1300mA, make the battery charging when the rover is stopped and the solar panels are open. 
    11) Added shock absorber to the wheels.
    12) Added magnetic plug to plug the battery charger to the battery. Actually the is a problem, when the plug is connected, the current is stopped for some ms and the Raspberry Pi reboot itself.
    13) Modded Servo9G for wheel, now they are DC motor and are controlled by L9110S driver, the L9110S driver is connected to 2 ports of PCA9685 module and driven by a PWM signal.
    14) Switch from two Solar Power Manager (A) to one Solar Power Manager (B) (A: only 5V 500mA, B: 5V 3000mA for each port)
    15) Switch from RPi Cam Web Interface to uStreamer [https://github.com/pikvm/ustreamer]

  19/04/2022
   
    1) Added the ability to select the resolution and quality of the camera stream during its use, if you have a bad wifi reception you can select a lower resolution and quality to reduce the bandwidth usage, or if you have a good wifi reception, you can select a higher resolution and quality

  06/06/2022

    1) Added a servomotor to rotate the WiFi antenna (planar antenna) to find the best gain(dB) / position, 3 buttons have been added through which it is possible to manually rotate the antenna or perform an automatic scan that will position the antenna in the direction with the greatest gain(dNAdded a servomotor to rotate the WiFi antenna (planar antenna) to find the best gain / position, 3 buttons have been added through which it is possible to manually rotate the antenna or perform an automatic scan that will position the antenna in the direction with the greatest (dB) (Photo and Video will be added)

    


  TO DO:

      OLD:
        +===============================================================================+
        |     - Solar battery charge capability |OK|                                    |
        |                                                                               |
        |     - Put battery position higher     |OK|                                    |
        |                                                                               |
        |     - 4G connection to control rover with a teorically infinite distance |OK| |
        |                                                                               |
        |     - Battery monitoring voltage |OK|                                         |
        |                                                                               |
        |     - Web UI to remote control the rover |OK|                                 |
        |                                                                               |
        |     - Joystick to remote control the rover via Web UI |OK|                    |
        |                                                                               |
        |     - Add shock absorber to the wheels |OK|                                   |
        |                                                                               |
        |     - Add magnetic plug to charge the battery |OK|                            |
        |                                                                               |
        |     - Add external antenna to expand the range of the rover |OK|              |
        |                                                                               |
        |     - Add audio board USB with microphone |OK|                                |
        |                                                                               |
        |     - Add selectable resolution and quality of the camera stream |OK|         |
        |                                                                               |
        +===============================================================================+
        
      CURRENT:
        +======================+
        |    Nothing for now   |
        +======================+
        
      NEW:
        +==============================================================+
        |  - Make the battery chargable without stopping the current   |
        |                                                              |
        |  - Add the automatic function to change resolution and       |
        |    quality of the camera stream according to signal quality  |
        |                                                              |
        +==============================================================+
    
",0,0,0,0,solar-energy,"[arduino-ide, battery-monitor, i2c, mqtt-protocol, pca9685, power-monitoring, python, raspberry-pi-pico, raspberrypi, rover, roverbot, rpi-camera, servo-motor, solar-energy, uart, website, wifi]",00000
1059,solcast-go,Siliconrob,N/A,https://github.com/Siliconrob/solcast-go,https://api.github.com/repos/Siliconrob/solcast-go,Solcast API Go Client library,"[![Build Status](https://travis-ci.org/Siliconrob/solcast-go.svg?branch=master)](https://travis-ci.org/Siliconrob/solcast-go) [![Go Report Card](https://goreportcard.com/badge/github.com/Siliconrob/solcast-go)](https://goreportcard.com/report/github.com/Siliconrob/solcast-go) [![GoDoc](https://godoc.org/github.com/Siliconrob/solcast-go/solcast?status.svg)](https://godoc.org/github.com/Siliconrob/solcast-go/solcast) 

### Live Glitch :sun_with_face:[Demo](https://solcast-demo.glitch.me/):sun_with_face:

# Solcast Go API Client library

Go client library for querying the [Solcast API](https://api.solcast.com.au) 

This module allows a registered users to query the Solcast API [https://api.solcast.com.au](https://api.solcast.com.au).  You will need to register your user account to obtain an API key [https://solcast.com.au/api/register](https://solcast.com.au/api/register/).  Without an API key you will not be able to successfully obtain valid API results.

## Install
```
go get github.com/Siliconrob/solcast-go/solcast
```

## Documentation

Read [GoDoc](https://godoc.org/github.com/Siliconrob/solcast-go/solcast)

### Windows setup Solcast API Key

Setup **System/User** `environment variable`.  Details on advanced editing [StackOverflow superuser walkthrough](https://superuser.com/questions/949560/how-do-i-set-system-environment-variables-in-windows-10)

```
WinKey + R
```

**Copy and Paste** the following text to the **Open:** input text box for the Run Dialog

```
%windir%\System32\rundll32.exe sysdm.cpl,EditEnvironmentVariables
```

That will present this screen

![Run Windows Environment Editor](/imgs/win_launch_environment_editor.png)

Add a `USER` or `SYSTEM` `environment variable` to hold the Solcast API key.  User environment variables will only be available to your particular user, system environment variables are shared for all users on the system

![Add Windows User Solcast API key](/imgs/win_env_user_variable.png)

After you have added the `environment variable` you will see the key listed in the current variables

![Added Windows User Solcast API key](/imgs/win_solcast_variable.png)

**NOTE**: To reference this key you will need to reopen your shell prompt to read these variables again from the system (cmd, command.com, powershell, etc)


### Linux / mac OS

Open a terminal prompt
- mac OS: Spotlight search for `terminal`
- Linux: Open `bash`

```
nano .bash_profile
```

If you do not have `nano` it is a simpler text editor than `vi`.  Use your package manager to download and install or use `vi`.  The preferred package manager for mac OS is [Homebrew](https://brew.sh/) and once installed on your system you can issue similar commands to Linux `apt-get` and `yum` with the `brew` package manager.

Add the **Solcast API Key** to your user profile variables.

![Added mac OS User Solcast API key](/imgs/mac_os_environment_variable.png)

### Latitude and Longitude

- First as stated above you will need an API key to make **valid** API requests to the Solcast system.
- Second for all current library calls you will need a **valid** Lat/Lng coordinate in the [EPSG:4326](http://spatialreference.org/ref/epsg/wgs-84/) format.  If you are familiar with modern web maps you most likely have used the expected format or a decimal point that expresses a position on the Earth.

Clarification as I often forget the coordinate planes of Latitude and Longitude along with bounds.
![Lat/Lng](/imgs/Lat_Long.gif)

[Credits - Learner.org](http://www.learner.org/jnorth/tm/LongitudeIntro.html)

The Solcast API expects **West** for Longitude and **South** for Latitude to be expressed as a negative numbers

Example Locations on the Globe

Name | Latitude | Longitude
--- | --- | ---
Sydney, Australia | -33.865143 | 151.209900
Mumbai, India |‎ 19.228825 | 72.854118
Tokyo, Japan | 35.6895 | 139.69171
Paris, France | 48.864716 | 2.349014
Los Angeles, USA | 34.052235 | -118.243683

### Need help?
* [Documentation](https://solcast.com.au/api/docs/)
* [Forums](https://forums.solcast.com.au)
* [Gitter](https://gitter.im/Solcast/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link)

### How to contribute
 * Fork the repository
 * Add something awesome
 * Create a pull request
 * :sun_with_face: Celebrate :sun_with_face:


### Examples

```go

import (
	solcast ""github.com/Siliconrob/solcast-go/solcast""
	datatypes ""github.com/Siliconrob/solcast-go/solcast/types""
)

rad_forecasts := solcast.RadiationForecast(datatypes.LatLng{Longitude: -97, Latitude: 32})
```

#### JSON sample results
```
{ forecasts: 
   [ { ghi: 0,
       ghi90: 0,
       ghi10: 0,
       ebh: 0,
       dni: 0,
       dni10: 0,
       dni90: 0,
       dhi: 0,
       air_temp: 10,
       zenith: 103,
       azimuth: -88,
       cloud_opacity: 3,
       period_end: '2017-08-31T19:30:00.0000000Z',
       period: 'PT30M' },
    ...
   ]
}
```  

#### NOTE: 
You can use standard environment variables to hold your API key and not need to pass the optional `apiKey` to the current methods

Environment variable name if you care to work with it directly
```
SOLCAST_API_KEY
```

Accessible through process environment variable directly or with helper API method.


License
-------
License can be found here: [LICENSE](LICENSE)
",0,0,2,0,solar-energy,"[api-client, async, forecast, forecasting, golang, power, radiation, solar-energy, worldwide]",00000
1060,VBUS-decoder-library,saidlm,N/A,https://github.com/saidlm/VBUS-decoder-library,https://api.github.com/repos/saidlm/VBUS-decoder-library,Resol VBUS decoder library for Arduino,"# VBUS-decoder-library

The aim of the project is to create library which open way to decode VBUS communication on VBUS. VBUS is point-to-multipoint communication environment define by RESOL.

The primary reason why the project has been started is to decode information from Solar regulator from Viessmann - Vitosolic 200. However, the way to add any new devices is open and is pretty easy.

Curent version 1.0 is decoding data from temperature sensors, pupms power and state of relays.
",0,0,0,0,solar-energy,"[arduino, heating, home-automation, resol, solar-energy, solar-system, vbus, viessmann, vitosolic]",00000
1061,SolarLog-UI,ManuelBu96,N/A,https://github.com/ManuelBu96/SolarLog-UI,https://api.github.com/repos/ManuelBu96/SolarLog-UI,Angular UI for the SolarLog REST API. The project is started using Docker and is immediately ready for use through an Angular frontend. All data is stored within the Postgres database and can be accessed within the Docker container.,"# AngularSolarlog
This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 11.2.4.

## Example
https://github.com/fossasia/susi.ai

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.
",0,0,1,2,solar-energy,"[angular, api-client, java, photovoltaic, solar, solar-energy, solarlog, solarlogger]",00000
1062,solar-energy-logger,tiberiucorbu,N/A,https://github.com/tiberiucorbu/solar-energy-logger,https://api.github.com/repos/tiberiucorbu/solar-energy-logger,Learing FreeRTOS by doing a project,"# ESP SOLAR CHARGER Logger

A device that logs the solar panel output, playing with freertos while building a small tool

## Current development status 

SPIKE-ing

## Motivation

Logging the voltage and current output/input on the solar and the battery ends, requires a lot of manual work, using traditional methods like a regular multimeter. So I started to build a dual chanel multimeter for voltage and current that, stores at a certain tick the readings. 

Because wifi/ble MCUs come in cheap these days and they provide an simple way of logging data, I strongly consider implementing at least one of the two remote interface : either BLE and MQTT.

---------- 

## Prototypes modules

- 1 x TTGO ESP32 Battery - a development board with an ESP32, a sd card slot, a battery charger and a joystick
- 2 x INA219 Module - a current and voltage sensor
- 1 x a real time clock


## Considering implementing

- BLE Interface
- TCP (MQTT) Interface

## Lessons Learned

1. <strike> Wire lib is not working in tasks with low priority.</strike> because of #2.
2. CPP variables don't outlive the block scopes; that is why setup has a while(true) {noop();} at the end
3. QueueHandle_t is a pointer already, no nead to convert it to a pointer 
4. Downside of INA219 is that you must connect a common ground with the MCU to measure the voltage (Hope I'm wrong)",0,0,1,7,solar-energy,"[mcu, multimeter, node-red, platformio, solar-energy]",00000
1063,primos-log-parser,gotbadger,N/A,https://github.com/gotbadger/primos-log-parser,https://api.github.com/repos/gotbadger/primos-log-parser,Primos 250 solar thermal controller log parser,"# primos-log-parser

The Primos is a solar thermal controller manufactured by [prozeda](https://prozeda.de/en/product-details/primos-250-sr-2/). The device has an SD card slot that can be used to log sensor readings but unfortunately this log is in a binary format that requires a windows only program to view the data.

This project is an attempt to reverse the binary format so data can be extracted programmatically.

The device with WiFi SD card attached:
![contoller with SD card extender attached](https://user-images.githubusercontent.com/699436/75481558-2a239780-599b-11ea-98d0-9051e925c352.png)

You should be able to read logs for any of the other primos devices.

For further info you can see a simple example implmentation using a wifi sd card here: https://github.com/gotbadger/solar-monitor
",0,0,2,4,solar-energy,"[home-automation, primos, prozeda, solar-energy]",00000
1064,Single-Axis-Solar-Tracker,ArghyaShubhshiv,N/A,https://github.com/ArghyaShubhshiv/Single-Axis-Solar-Tracker,https://api.github.com/repos/ArghyaShubhshiv/Single-Axis-Solar-Tracker,"A good, optimized modification of Solar Panel systems.","# Single-Axis-Solar-Tracker
Solar Panels allow to use Sun's energy as a clean energy resource. Solar Trackers allow Solar Panels to rotate to the direction where the Sun is, pretty much like a Sunflower, this is a Single Axis Solar Tracker, an optimized solution for Global warming and Climate change, which I've built using an Arduino.
",0,0,1,0,solar-energy,"[arduino, solar-energy]",00000
1065,tech_talks,TAPADYUTIBARAL,N/A,https://github.com/TAPADYUTIBARAL/tech_talks,https://api.github.com/repos/TAPADYUTIBARAL/tech_talks,"Here i am discussed on wise changes in the technological areas like Automation Enginnering, Clean Energy sector & Cybersecurity domian specially those part are directly connected with IoT.","# Tech_talks
Here i am discussed on wise changes in the technological areas like Automation Enginnering, Clean Energy sector & Cybersecurity domian specially those part are directly connected with IoT.  
",0,0,1,0,solar-energy,"[automation, electronics-projects, iot-platform, solar-energy]",00000
1066,qse,Christina1281995,N/A,https://github.com/Christina1281995/qse,https://api.github.com/repos/Christina1281995/qse,Visit the Live Website: http://qse.zorenboehmer.com/,"<!-- ![footer](https://user-images.githubusercontent.com/81073205/174623631-e02b70d9-3385-45de-9ee5-72bf1be2a71b.png) -->

## A ""Quick Solar Estimates Platform"" 
<img src=""https://user-images.githubusercontent.com/81073205/177124964-9dff80cd-2c41-456f-9faf-aeaf8fa8759b.png"" align=""right"" width=""45%"">

This project is intended to help <b>you</b> take a first look into solar panels for your own home. Many websites out there can be quite complex (how are we supposed to know what the exact tilt and orientation of our roofs are... in degrees?!). <br> <br>
This website is therefore designed to give you a basic first insight into the solar potential. The main focus is simply to get you started on your own <b>journey towards sustainable energy</b>.

<br>
<b>Visit the Live Website</b> at http://quicksolarestimates.zorenboehmer.com/
 <br>
 <br>

 Read the documentation at https://github.com/Christina1281995/qse/blob/master/Zorenboehmer_FinalManuscript.pdf
 <br>
 <br>
 <br>
 <br>

 ## Demo Video
 
 <br>

https://user-images.githubusercontent.com/81073205/174623363-0be06328-4804-4301-bb21-07861f943b8d.mp4

",0,0,1,0,solar-energy,"[flask-application, photovoltaic, solar-energy]",00000
1067,Thermal-analysis-Flat-plate-collectors,Ebrahim-Mahmoud,N/A,https://github.com/Ebrahim-Mahmoud/Thermal-analysis-Flat-plate-collectors,https://api.github.com/repos/Ebrahim-Mahmoud/Thermal-analysis-Flat-plate-collectors,Thermal analysis of different connections of Flat plate collectors,"# Thermal-analysis-Flat-plate-collectors
Thermal analysis of different connections of Flat plate collectors
## Example
### inputs
![image](https://user-images.githubusercontent.com/106403390/172158134-1d853cc2-a073-4e68-bd3b-4ff71d2e5b35.png)
### Outputs
![image](https://user-images.githubusercontent.com/106403390/172158080-c0e0fe3e-f4d3-41ba-968d-fc7e207d60ec.png)
## Flat plate connection drawer program 
you can open this program by click on draw connection button 
### Githup repository:
https://github.com/Ebrahim-Mahmoud/Flat-plate-connection-drawer
",0,0,1,0,solar-energy,"[engineering, flat, flate-plate-collectors, solar, solar-energy]",00000
1068,solarTracker,tgatinea,N/A,https://github.com/tgatinea/solarTracker,https://api.github.com/repos/tgatinea/solarTracker,"Solar tracker based upon arduino, compass and GPS module","# solarTracker

## Description

The code is dedicated to managed a solar tracker that supports 4 solar pannels (480W peak power each pannel).

The solar tracker frame is composed with 3 car wheels.

One wheel is motorized with an electrical motor of a rolling shutter, a car flywheel and car starter pinion.

The tracker is managed via a hardware composed with:
* arduino uno
* GPS module
* Compass module
* 2 relays module
* LCD screen

The library Ephem_Soleil.h is used to computes the sun ephemeris (Few changes had been done inside this library).

## Principles

At setup, the GPS module is used to recover the date (day/month/year), time(hour/minutes/seconds), longitude, latitude and altitude.

The GPS time is used to initialize an internal time based upon millis() function.

Thanks to the library Ephem_Soleil.h, the GPS date, latitude, longitude and altitude combined with the current time provides:
* sunrise time
* sundown time
* current azimuth of sun

The compass provides the azimuth of the tracker.

The code computes the sunrise, sundown, sun azimuth and tracker azimuth to pilot the 2 relays module to go to Est or West.

Every day at 3 o'clock, the whole hardware is reseted via the watchdog of the arduino to recover the new date and reinitialize the time.

The tracker returns to the Est at the end of the day.

## Tricks

* GPS module is incompatible with arduino delay() and too long Serial.print() as it is needed to pool regulary the serial link of GPS module
* serialSoftware libray cannot be used. Conflict between I2C of compass and serial link of GPS. Workaround: Usage of AltSoftSerial library. https://arduino.stackexchange.com/questions/26240/which-pins-of-an-arduino-uno-can-be-used-as-tx-and-rx-pins-for-connecting-to-gsm#26277
* Factorization of GPS to recover only once a day the date, time, longitude, latitude, altitude. Computation of time locally on arduino via millis().
* Usage of arduino watchdog timer to secure freezing potential bug and also to reset the board every day at 3:00 UTC to resynchronize the time and date with GPS data 
* A forbiden zone is checked to prevent the tracker to turn arround and to mess the electric wires connected to my house. In this zone, a manual intervention is needed to move the tracker and arduino is in permanent reset
* Be careful with 2 relays module to isolate ground from arduino via a separated power supply on JD VCC
* Be carefull with electromagnetic interference: Put arduino, GPS and compass into aluminium box
* Put a capacitor on each 220V wires of the motor to avoid electrical arc on the relays.  
* Compass need to be calibrated. See calibration sketch to find to min/max values for XYZ.
  
",0,0,1,0,solar-energy,"[arduino, arduino-sketch, arduino-uno, compass, ephemeris, ephemeris-calculations, gps-device, solar, solar-energy, solar-tracker, solar-tracking-panels, solartracker, sun-tracker, sun-tracking]",00000
1069,solhycool_optimization,juan11iguel,N/A,https://github.com/juan11iguel/solhycool_optimization,https://api.github.com/repos/juan11iguel/solhycool_optimization,"Source code of web app for the visualization of an optimization methodology applied to a combined cooling system for solar thermal processes within the Spanish national project SOLHYCOOL, from the Plataforma Solar de Almería - CIEMAT. ","# solhycool_optimization
Source code of web app for the visualization of an optimization methodology applied to a combined cooling system for solar thermal processes within the Spanish national project SOLHYCOOL, from the Plataforma Solar de Almería - CIEMAT. 

## Deployment

1. In the server, create three new folders:
- `docker_compose_files`, where the compose files for the deployment of the app, traefik, portainer, etc will be loaded. Templates are available in the [docker_compose_files](docker_compose_files) directory.
- `configuration_files`, where the `hjson` file with the app configuration is stored. A template is avaialable at [wascop_app.hjson](configuration_files)
- `assets/wascop_app`, here the necessary assets to lauch the app are stored: diagrams, logo images, result files, css stylesheets, etc.

2. Launch the base services:
```bash
docker compose -f docker_compose_files/portainer.yml --project-name base up -d
```
```bash
docker compose -f docker_compose_files/traefik.yml --project-name base up -d
```
```bash
docker compose -f docker_compose_files/watchtower.yml --project-name base up -d
```
3. Run the web app and the dynamic results updater to make new results available (pareto front and diagrams) as soon as new data is copied to the assets folder.
```bash
docker compose -f docker_compose_files/wascop_app.yml --project-name solhycool up -d
```

## Features

- Continous integration. New docker images are built automatically at every tagged push.
- Continuous deployment. By using watchtower, every time a new image is pushed to the repository registry, the deployment at PSA is updated (i.e. broken most likely).
- When new results are made available, new diagrams are generated and the results dicitionary is updated with the new data making it available at runtime in the app.
- Cached outputs via a redis server.

## Pending

- In mobile version, header should not be permanent (takes too much space in lanscape mode)
- In mobile version, remove icons from evaluate and export buttons.
- When pareto optimization is not available, just show the cloud of points and display the identified minimums.
- Generate a pdf report when some operation conditions are selected.
- When a point is selected, generate some plots to evaluate the contributors to the electrical consumption, and compare the operation point with some extremes (only DC or only WCT).
- In mobile version, remove padding and margins from paper components to better take advantage of the available space.
- Add telemetry just to gather some basic anonymous information (number of visitors, etc)

## How to

### Create a new image

In order to trigger an image build:

1. Create a new tag (must be preceded by a v):
```
 git tag v1.0.X
```

2. Push the tag:
```
 git push --tags
```

3. Push the new commit that will trigger the build
```
 git push
```


### Running the application locally

1. Set up the environment installing the dependencies from `requirerments.txt`

2. Set the required environment variables

```bash
    export CONF_FILE= ""...""
```
3. Run the app

```bash
    gunicorn --env CONF_FILE=$CONF_FILE -b 0.0.0.0:8000 app:server
```

## Warning

This is a work in progress made public for a particular implementation of the results visualization of an optimization strategy. At the current conditions it is not expected to be used by any users, but the source code is freely available to check and a running implementation is avaialable at [external.psa.es/solhycool/optimization](https://external.psa.es/solhycool/optimization).

### Acknowledgments
",0,0,1,0,solar-energy,"[cooling, optimization-visualization, solar-energy, solar-thermal]",00000
1070,SOLAR_GUI_APP,MichaelAndrew22,N/A,https://github.com/MichaelAndrew22/SOLAR_GUI_APP,https://api.github.com/repos/MichaelAndrew22/SOLAR_GUI_APP,~~<>~SOLAR_GUI_APP~<>~~,"# SOLAR_GUI_APP
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::<><><><><><><><><><>

----------------------GUI FOR SOLAR INSTALLATION DATA

><><><><><><><><><><><><><><><>::::::::::::::::::::::::::::::::::::::::::::
",0,0,2,0,solar-energy,[solar-energy],00000
1071,solcast-go,Siliconrob,N/A,https://github.com/Siliconrob/solcast-go,https://api.github.com/repos/Siliconrob/solcast-go,Solcast API Go Client library,"[![Build Status](https://travis-ci.org/Siliconrob/solcast-go.svg?branch=master)](https://travis-ci.org/Siliconrob/solcast-go) [![Go Report Card](https://goreportcard.com/badge/github.com/Siliconrob/solcast-go)](https://goreportcard.com/report/github.com/Siliconrob/solcast-go) [![GoDoc](https://godoc.org/github.com/Siliconrob/solcast-go/solcast?status.svg)](https://godoc.org/github.com/Siliconrob/solcast-go/solcast) 

### Live Glitch :sun_with_face:[Demo](https://solcast-demo.glitch.me/):sun_with_face:

# Solcast Go API Client library

Go client library for querying the [Solcast API](https://api.solcast.com.au) 

This module allows a registered users to query the Solcast API [https://api.solcast.com.au](https://api.solcast.com.au).  You will need to register your user account to obtain an API key [https://solcast.com.au/api/register](https://solcast.com.au/api/register/).  Without an API key you will not be able to successfully obtain valid API results.

## Install
```
go get github.com/Siliconrob/solcast-go/solcast
```

## Documentation

Read [GoDoc](https://godoc.org/github.com/Siliconrob/solcast-go/solcast)

### Windows setup Solcast API Key

Setup **System/User** `environment variable`.  Details on advanced editing [StackOverflow superuser walkthrough](https://superuser.com/questions/949560/how-do-i-set-system-environment-variables-in-windows-10)

```
WinKey + R
```

**Copy and Paste** the following text to the **Open:** input text box for the Run Dialog

```
%windir%\System32\rundll32.exe sysdm.cpl,EditEnvironmentVariables
```

That will present this screen

![Run Windows Environment Editor](/imgs/win_launch_environment_editor.png)

Add a `USER` or `SYSTEM` `environment variable` to hold the Solcast API key.  User environment variables will only be available to your particular user, system environment variables are shared for all users on the system

![Add Windows User Solcast API key](/imgs/win_env_user_variable.png)

After you have added the `environment variable` you will see the key listed in the current variables

![Added Windows User Solcast API key](/imgs/win_solcast_variable.png)

**NOTE**: To reference this key you will need to reopen your shell prompt to read these variables again from the system (cmd, command.com, powershell, etc)


### Linux / mac OS

Open a terminal prompt
- mac OS: Spotlight search for `terminal`
- Linux: Open `bash`

```
nano .bash_profile
```

If you do not have `nano` it is a simpler text editor than `vi`.  Use your package manager to download and install or use `vi`.  The preferred package manager for mac OS is [Homebrew](https://brew.sh/) and once installed on your system you can issue similar commands to Linux `apt-get` and `yum` with the `brew` package manager.

Add the **Solcast API Key** to your user profile variables.

![Added mac OS User Solcast API key](/imgs/mac_os_environment_variable.png)

### Latitude and Longitude

- First as stated above you will need an API key to make **valid** API requests to the Solcast system.
- Second for all current library calls you will need a **valid** Lat/Lng coordinate in the [EPSG:4326](http://spatialreference.org/ref/epsg/wgs-84/) format.  If you are familiar with modern web maps you most likely have used the expected format or a decimal point that expresses a position on the Earth.

Clarification as I often forget the coordinate planes of Latitude and Longitude along with bounds.
![Lat/Lng](/imgs/Lat_Long.gif)

[Credits - Learner.org](http://www.learner.org/jnorth/tm/LongitudeIntro.html)

The Solcast API expects **West** for Longitude and **South** for Latitude to be expressed as a negative numbers

Example Locations on the Globe

Name | Latitude | Longitude
--- | --- | ---
Sydney, Australia | -33.865143 | 151.209900
Mumbai, India |‎ 19.228825 | 72.854118
Tokyo, Japan | 35.6895 | 139.69171
Paris, France | 48.864716 | 2.349014
Los Angeles, USA | 34.052235 | -118.243683

### Need help?
* [Documentation](https://solcast.com.au/api/docs/)
* [Forums](https://forums.solcast.com.au)
* [Gitter](https://gitter.im/Solcast/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link)

### How to contribute
 * Fork the repository
 * Add something awesome
 * Create a pull request
 * :sun_with_face: Celebrate :sun_with_face:


### Examples

```go

import (
	solcast ""github.com/Siliconrob/solcast-go/solcast""
	datatypes ""github.com/Siliconrob/solcast-go/solcast/types""
)

rad_forecasts := solcast.RadiationForecast(datatypes.LatLng{Longitude: -97, Latitude: 32})
```

#### JSON sample results
```
{ forecasts: 
   [ { ghi: 0,
       ghi90: 0,
       ghi10: 0,
       ebh: 0,
       dni: 0,
       dni10: 0,
       dni90: 0,
       dhi: 0,
       air_temp: 10,
       zenith: 103,
       azimuth: -88,
       cloud_opacity: 3,
       period_end: '2017-08-31T19:30:00.0000000Z',
       period: 'PT30M' },
    ...
   ]
}
```  

#### NOTE: 
You can use standard environment variables to hold your API key and not need to pass the optional `apiKey` to the current methods

Environment variable name if you care to work with it directly
```
SOLCAST_API_KEY
```

Accessible through process environment variable directly or with helper API method.


License
-------
License can be found here: [LICENSE](LICENSE)
",0,0,2,0,solar-energy,"[api-client, async, forecast, forecasting, golang, power, radiation, solar-energy, worldwide]",00000
1072,VBUS-decoder-library,saidlm,N/A,https://github.com/saidlm/VBUS-decoder-library,https://api.github.com/repos/saidlm/VBUS-decoder-library,Resol VBUS decoder library for Arduino,"# VBUS-decoder-library

The aim of the project is to create library which open way to decode VBUS communication on VBUS. VBUS is point-to-multipoint communication environment define by RESOL.

The primary reason why the project has been started is to decode information from Solar regulator from Viessmann - Vitosolic 200. However, the way to add any new devices is open and is pretty easy.

Curent version 1.0 is decoding data from temperature sensors, pupms power and state of relays.
",0,0,0,0,solar-energy,"[arduino, heating, home-automation, resol, solar-energy, solar-system, vbus, viessmann, vitosolic]",00000
1073,SolarLog-UI,ManuelBu96,N/A,https://github.com/ManuelBu96/SolarLog-UI,https://api.github.com/repos/ManuelBu96/SolarLog-UI,Angular UI for the SolarLog REST API. The project is started using Docker and is immediately ready for use through an Angular frontend. All data is stored within the Postgres database and can be accessed within the Docker container.,"# AngularSolarlog
This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 11.2.4.

## Example
https://github.com/fossasia/susi.ai

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.
",0,0,1,2,solar-energy,"[angular, api-client, java, photovoltaic, solar, solar-energy, solarlog, solarlogger]",00000
1074,LighHarvest,5ANTI-726,N/A,https://github.com/5ANTI-726/LighHarvest,https://api.github.com/repos/5ANTI-726/LighHarvest,LightHarvest Consulting,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,"[powergeneration, solar-energy, solarmodels]",00000
1075,solar-energy-logger,tiberiucorbu,N/A,https://github.com/tiberiucorbu/solar-energy-logger,https://api.github.com/repos/tiberiucorbu/solar-energy-logger,Learing FreeRTOS by doing a project,"# ESP SOLAR CHARGER Logger

A device that logs the solar panel output, playing with freertos while building a small tool

## Current development status 

SPIKE-ing

## Motivation

Logging the voltage and current output/input on the solar and the battery ends, requires a lot of manual work, using traditional methods like a regular multimeter. So I started to build a dual chanel multimeter for voltage and current that, stores at a certain tick the readings. 

Because wifi/ble MCUs come in cheap these days and they provide an simple way of logging data, I strongly consider implementing at least one of the two remote interface : either BLE and MQTT.

---------- 

## Prototypes modules

- 1 x TTGO ESP32 Battery - a development board with an ESP32, a sd card slot, a battery charger and a joystick
- 2 x INA219 Module - a current and voltage sensor
- 1 x a real time clock


## Considering implementing

- BLE Interface
- TCP (MQTT) Interface

## Lessons Learned

1. <strike> Wire lib is not working in tasks with low priority.</strike> because of #2.
2. CPP variables don't outlive the block scopes; that is why setup has a while(true) {noop();} at the end
3. QueueHandle_t is a pointer already, no nead to convert it to a pointer 
4. Downside of INA219 is that you must connect a common ground with the MCU to measure the voltage (Hope I'm wrong)",0,0,1,7,solar-energy,"[mcu, multimeter, node-red, platformio, solar-energy]",00000
1076,lg-ess,Ephigenia,N/A,https://github.com/Ephigenia/lg-ess,https://api.github.com/repos/Ephigenia/lg-ess,API Wrapper for LG-ESS Home Storage System,"Typescript/Javascript API Wrapper for accessing the REST API of an [LG ESS Home Energy Storage system](https://www.lg.com/de/business/ess-homeseries).

**Work in progress**

# range

    npm run start -s -- range pv 2023-05-02 2023-08-10

# graph

    ESS_PASSWORD=""<password>"" \
    ESS_IP=""<ip>"" \
    npm run start -s graph

Convert graph entries to CSV:

    npm run start -s -- graph | jq -rM '.loginfo[] | to_entries | map(.value)|@csv'

# info

Using [jq](https://jqlang.github.io/jq/)

    npm run start -s -- info | jq '.statistics.pcs_pv_total_power | tonumber' | figlet

# Other Projects & Links

- [pyess](https://www.lg.com/de/business/ess-homeseries) python library
- [lg-ess pv home assistant](https://github.com/Buktahula/hassio-addons)
- [English Manual](https://www.manualslib.de/manual/634794/Lg-Ess-Home-10.html#manual)
- [Installateur Manual (de)](https://www.lg.com/global/business/download/resources/ess/LG_ESS_Residential_EnerVu_Installer_Manual_DE.pdf)
- [iobroker.lg-ess-home](https://www.npmjs.com/package/iobroker.lg-ess-home)
",0,0,1,3,solar-energy,"[api, lg-ess, power, solar-energy]",00000
1077,new-novecology,Developer-Zahid,N/A,https://github.com/Developer-Zahid/new-novecology,https://api.github.com/repos/Developer-Zahid/new-novecology,,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,"[company-site, crm-system, france, power, solar-energy, solar-system]",00000
1078,SolarTool,yashhere,N/A,https://github.com/yashhere/SolarTool,https://api.github.com/repos/yashhere/SolarTool,Project done as part of Non-Conventional Energy Systems course in 7th Semester,"# SolarTool
",0,0,2,0,solar-energy,"[course-project, css, energy-system, html5, javascript, jquery, non-conventional, semantic-ui, solar-energy, typeitjs]",00000
1079,TrackerAngleAnalysis,jalderman9,N/A,https://github.com/jalderman9/TrackerAngleAnalysis,https://api.github.com/repos/jalderman9/TrackerAngleAnalysis,,"# Tracker Angle Analysis

A quick program and R script to answer the question:
""What percent of time do single axis solar trackers spend within the range of +/- 5 degrees of horizontal?""

## Compile

    make clean
    make

## Run

    ./tracker_angle_calc

## Plot

Open AngleSummary_All.csv and plot results with the tool of choice.
This repo includes an R script that will do this.

## Results

    Percent of time within +/- 5 degrees:
    Seattle.........: 4.35%
    San_Francisco...: 4.30%
    Mexico_City.....: 4.39%
    San_Diego.......: 4.32%
    Anchorage.......: 4.81%

",0,0,0,0,solar-energy,[solar-energy],00000
1080,Solar_API,ArturoBurela,N/A,https://github.com/ArturoBurela/Solar_API,https://api.github.com/repos/ArturoBurela/Solar_API,Database API for Solar ROI Drone Project,"# My Application

The project is generated by [LoopBack](http://loopback.io).",0,0,4,0,solar-energy,"[api, roi, ruby, ruby-on-rails, solar-energy]",00000
1081,MEAN-NodeMCU,GienekGenin,N/A,https://github.com/GienekGenin/MEAN-NodeMCU,https://api.github.com/repos/GienekGenin/MEAN-NodeMCU,"Displaying data from solar panel using stm32f7, nodemcu and MEAN app","# Web

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.6.3.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).
",0,0,1,0,solar-energy,"[mean, nodemcu, solar-energy, stm32f767]",00000
1082,REFA,devdananthony,N/A,https://github.com/devdananthony/REFA,https://api.github.com/repos/devdananthony/REFA,REFA COIN For Easy Energy Transaction Using BlockChain Technology To Distribute Energy From Producers To Consumers,"Website: https://refa.energy

Telegram: https://t.me/refaenergy

Telegram C: https://t.me/refachannel

Twitter: https://twitter.com/refaenergy

Medium: http://refatoken.medium.com/

Reddit: https://www.reddit.com/user/refatoken

BSC Contract address: https://bscscan.com/token/0x0C073f661e7f040d8EBF86FB758aAA61Aa90C8a7

About REFACOIN:

Token Ticker: REFA

Token Name: REFACOIN

Blockchain: BEP-20 (Binance Smart Chain)


 27,000,000 REFA Total Supply


REFA Token (Renewable Energy For All) Is
interconnecting Producers of Renewable
energy products and Consumers, We are going to
produce an energy module that will serve as a
pay-as-go module for energy consumption (in-
view), which REFA will be sold to producers and
they will integrate it into their solar
systems/products and then sell to consumers who
will be buying energy unit from the REFA website
(in-view) to subscribe for their energy use,
through REFA Token, thereby increasing the
the market value of REFA.

Let them go to the moon, we are taking over the world!
",0,0,0,0,solar-energy,"[electricity-consumption, electricity-meter, renewable-energy, solar-energy, token]",00000
1083,skycamIrr,samarth-b,N/A,https://github.com/samarth-b/skycamIrr,https://api.github.com/repos/samarth-b/skycamIrr,A deep learning approach to solar-irradiance forecasting in sky-videos,"# A deep learning approach to solar-irradiance forecasting in sky-videos
This is the project page for our paper titled ""A deep learning approach to solar-irradiance forecasting in sky-videos"" accepted to WACV 2019. 

Also check out our new work on future frame semantic segmentation that [is available on arXiv](https://arxiv.org/abs/1812.10786)

For further information please contact [Talha Siddiqui](mailto:tsiddiqu@andrew.cmu.edu) or [Samarth Bharadwaj](mailto:samarth.b@in.ibm.com).

Our presentation at WACV'19:

[![WACV'19 presentation](http://img.youtube.com/vi/GCMtjtbb0io/0.jpg)](http://www.youtube.com/watch?v=GCMtjtbb0io ""WACV'19 presentation"")
",0,0,4,1,solar-energy,"[ibm-research-ai, skycam, solar-energy, weather-forecast]",00000
1084,trailsendmonitor,evansharp,N/A,https://github.com/evansharp/trailsendmonitor,https://api.github.com/repos/evansharp/trailsendmonitor,"A custom CMS, built on CodeIgnitor3, for tracking energy generation and consumption in an off-grid house.","# Trailsend Monitor
A custom CMS, built on CodeIgnitor3, for tracking energy generation and consumption in an off-grid house.
",0,0,1,0,solar-energy,"[codeignitor, monitor, solar-energy, timeseries-data]",00000
1085,RaspiInverter,cabellop5,N/A,https://github.com/cabellop5/RaspiInverter,https://api.github.com/repos/cabellop5/RaspiInverter,Php app for connect Axpert MKS Inverter with Raspberry Pi,"# RASPI INVERTER

Raspi Inverter is a small PHP app to collect data from inverter Axpert MKS (maybe should be compatible with more inverters).

Is ready to take the data through a usb port of a raspberry pi, although any Unix system should be compatible

This data are prepared and insert in InfluxDB for show in Grafana panels.

Soon I will add the links to grafana dashboard and improvements.

By the moment only get data from inverter, not can modify parameters.",0,0,4,4,solar-energy,"[inverter, php, raspberry-pi, solar-energy, solar-system, usb-hid]",00000
1086,hunting-sims,birkaransachdev,N/A,https://github.com/birkaransachdev/hunting-sims,https://api.github.com/repos/birkaransachdev/hunting-sims,Hunting Simulations using OpenDSS code,"# Hunting Simulator
## Summary of Tool
This repository provides the code required to run iterations of power flow to arrive at overvoltages and undervoltage situations on various sizes of power distribution grids. The voltage overvoltages and undervoltages can enable hunting between grid devices, which can result in voltage oscillations. As prerequisites to run the code, you will need Python 3 and the power flow program OpenDSS installed.

## Installation
Using pip/pip3, you should install the following libraries:
- networkx (run `pip install networkx`)
- pandas (run `pip install pandas`)
- re (run `pip install re`)
- opendssdirect (`pip install OpenDSSDirect.py`)
- matplotlib (`pip install matplotlib`)
- numpy (`pip install numpy`)
- UliPlot (`pip install UliPlot`)

## Using the Tool

Step 1)  Clone this `hunting-sims` repository. Navigate into the src directory by running: `cd introDSSsim` in the Command Prompt/Terminal.

Step 2) Run the command `python create_hunting.py` in your terminal.
This is the file responsible for creating various hunting scenarios.

Step 3) Now the program will walk through a series of user input requests to setup your desired hunting scenario: 
1. ""Please enter your feeder name:"" -> e.g. enter `123` or `13bal` (for 123 node feeder and 13 node feeder respectively).
2. ""Please choose your 1st hunting node:"" -> e.g. enter `48` (can be any node number on the feeder you choose).
3. ""Please choose your 2nd hunting node:"" -> e.g. enter `83` (any other node on the feeder, distinct from 1st hunting node).
4. ""Do you want an overvoltage, undervoltage, or both?"" -> e.g. (type o for overvoltage, u for undervoltage, or 'b' for both of these voltage issues).
5. ""Do you want to keep previous output (type y to save, n to clear)"" -> Tell the program whether you'd like to write the results under previous results (save) or to overwrite them with the latest results (clear).

Step 4) The simulation will run to convergence and display the output of the successful over/undervoltage values in the command line. 
Access the outputted results with the `hunting_results.xlsx` file. Consider the common ancestor node (CAN) between the given `high_node` and `low_node`. The nodal power setup that creates the overvoltage or undervoltage is comprised of zero loads from the CAN to the substation, constant loads from high_node to the CAN of value (`P_hi+j Q_hi`), and constant loads from low_node to the CAN of value (`P_lo+j Q_lo`). The rest of the network's PQ bus powers are the default spot loads given by the IEEE: https://cmte.ieee.org/pes-testfeeders/resources/

The image below shows an example of what the contents of the `hunting_results.xlsx` file look like:

![This is an image](https://github.com/birkaransachdev/hunting-sims/blob/main/hunting_results_screenshot.png?raw=true)
",0,0,2,0,solar-energy,"[electric-grid, power-systems, solar-energy]",00000
1087,solar-lights,stringfellow,N/A,https://github.com/stringfellow/solar-lights,https://api.github.com/repos/stringfellow/solar-lights,☀️ Home PV indicator lights (for Pimoroni + Blinkt!) 🚥,"# Solar lights

This small script is intended for use with a Pimoroni + Blinkt! header to show
domestic PV Production / Consumption / Grid usage data as indicator lights,
using the SolarEdge monitoring API.

It does not intend to replicate the functionality of the SolarEdge monitoring
portal, but to give a physical indicator in-place of the 'feeling' of how the
home system is performing.

## Features
- Shows:
    - Production
    - If overall system is currently importing, exporting or neutral
    - The 'tilt' away from neutral if importing/exporting
    - Consumption
    - End-of-day retrospective of export to self-consumption
- Use of sunrise/sunset to increase/decrease refresh rate (API is limited!)
- Has settable dim and off times
- Web UI explaining current visuals, and current production/consumption values
- Web UI to modify config (times, colours, etc) and restart

## Ideas
- Flashing to indicate to reduce or increase self-consumption of energy (e.g. after a long period of high import or export respectively)
- Use of time-of-year to limit max expected production capacity

## Security
**The web ui (flask app) is really really insecure!**

It re-writes a python config file via a web form and issues a reboot command.
Do not expose it to the Internet! In the example crontab below, it also uses the
Flask dev server -- this is not advised.

## Running on a Pi
There's no install script yet, so you just have to bodge it together with a git checkout and a crontab...

### Example crontab
```
@reboot cd /home/pi/Code/solar-lights/ && /home/pi/Envs/solar-lights/bin/python /home/pi/Code/solar-lights/power.py -w 60 > /home/pi/logs/power.log 2>&1 &
@reboot cd /home/pi/Code/solar-lights/ && FLASK_APP=configurator /home/pi/Envs/solar-lights/bin/flask run --host=0.0.0.0 --port=8080 > /home/pi/logs/configurator.log 2>&1 &
```
",0,0,1,0,solar-energy,"[modbus, pimoroni, pimoroni-blinkt, pv, pygame, solar-energy]",00000
1088,Solar-Energy,A-M-H-F,N/A,N/A,https://api.github.com/repos/A-M-H-F/Solar-Energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C8:1364:74A168:F094B5:6522411A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
1089,pseudo-labeller,openclimatefix,openclimatefix,https://github.com/openclimatefix/pseudo-labeller,https://api.github.com/repos/openclimatefix/pseudo-labeller,Pseudo Labeller for generating training labels for other PV generation forecasting,"# Pseudo-Labeller
Pseudo Irradience Labeller for generating training labels for other PV generation forecasting, and hindcasts.

## Install

You can install this package by doing `pip install pseudo-labeller`

## Usage

## Train

## Notes
",0,0,3,8,solar-energy,"[forecasting, labeling, machine-learning, nowcasting, solar-energy]",00000
1090,sunstone,hughrawlinson,N/A,https://github.com/hughrawlinson/sunstone,https://api.github.com/repos/hughrawlinson/sunstone,☀️🪨 Read data from a Dutch DSMR5 solar panel controller,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,3,0,solar-energy,"[solar, solar-energy]",00000
1091,alternative-solarmax-display,manugrb,N/A,https://github.com/manugrb/alternative-solarmax-display,https://api.github.com/repos/manugrb/alternative-solarmax-display,Web app to display interesting information and stats about your solarmax system,"# alternative-solarmax-display
A simple website to display more intersting information about your solar panels with a solarmax power inverter
",0,0,1,9,solar-energy,"[co2-emissions, energy-monitor, iot, javascript, react, solar-energy, solarmax]",00000
1092,Solar-Panel-SmartDevice,Glovania,N/A,https://github.com/Glovania/Solar-Panel-SmartDevice,https://api.github.com/repos/Glovania/Solar-Panel-SmartDevice,My first project on Smart Devices :3,"# Smart Device

This repository will be used to host all files related to the Smart Device Project in Building and Programming Circuits.

Update this document will images/videos of your project.

## Theme & Behaviours

[Design Document](design.md)

## Programming Logic

[Programming Logic](logic.md)

## Wiring Diagram

> Export the wiring diagram as a PNG, named wiring.png, and save the file in the repository. It will then display here.

![Wiring Diagram](wiring.png)

",0,0,1,0,solar-energy,[solar-energy],00000
1093,semmy,roderickvd,N/A,https://github.com/roderickvd/semmy,https://api.github.com/repos/roderickvd/semmy,Personal Solar Energy Monitor,"Semmy
=====

Personal Solar Energy Monitor

Supported inverters
-------------------

Out-of-the-box support is provided for StecaGrid inverters that have an Ethernet interface and web portal with a ""Measurements"" page. If your inverter does have an Ethernet interface, but no such page, then you need to update the firmware.

Semmy is intended to be completely extensible. You can add support for other inverters by implementing the `Inverter` contract. Hook it up in the `InverterServiceProvider` and feel free to send a pull request.

Supported logging portals
-------------------------

Semmy currently supports logging to [PVOutput.org](http://pvoutput.org) and [Sonnenertrag.eu](https://www.sonnenertrag.eu/).

Support weather services
------------------------

Weather conditions can be retrieved from:
* [OpenWeatherMap](https://openweathermap.org)
* [KNMI](http://knmi.nl) (the Royal Netherlands Meteorological Institute)

You can add support for other weather services by implementing the `WeatherStationContract` contract. Hook it up in the `WeatherStationServiceProvider` and feel free to send a pull request.

Setup
-----

1. Copy `.env.example` to `.env`
2. Edit `.env` to suit your configuration
3. Add the following to your crontab:
```
* * * * * php /path/to/semmy/artisan schedule:run 1>> /dev/null 2>&1
```

Semmy also provides a real-time web dashboard that shows the current status of your solar generation and current weather conditions. In your web server, set the document root and index to `public/index.php` and be sure to enable rewrite support.

License
-------

This software by Roderick van Domburg is licensed under the terms of the MIT License.

Beautiful graphs are powered by Highcharts, which is licensed under a Creative Commons Attribution-NonCommercial 3.0 License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc/3.0/.

Free weather data from OpenWeatherMap is licensed under a Creative Commons Attribution-ShareAlike 2.0 License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/2.0/.
",0,0,1,2,solar-energy,"[laravel, logging, pv-systems, pvoutput, solar-energy, sonnenertrag]",00000
1094,solcast-slack,Siliconrob,N/A,https://github.com/Siliconrob/solcast-slack,https://api.github.com/repos/Siliconrob/solcast-slack,Slack Solcast Power Forecast Integration,"# 🌞Solcast Slack Power Forecast🌞
This project demonstrates how to build an app using Slack's commands

## Getting Started
To get started you need to:
- Set up your Slack App in Slack - Find more detailed setup instructions in `setup.md`.
- Invite the bot user to a channel where you want it to work",0,0,2,0,solar-energy,"[api, forecasting, glitch, openstreetmap, slack, slack-commands, solar-energy, worldwide]",00000
1095,Development,AusgreenSolarSolutions,AusgreenSolarSolutions,https://github.com/AusgreenSolarSolutions/Development,https://api.github.com/repos/AusgreenSolarSolutions/Development,Not for Public use,"# Development
Not for Public use
",0,0,1,0,solar-energy,"[australia, installation, inverter, panel, pv, solar, solar-energy, solar-power, solar-system]",00000
1096,IN,OscarGomezGonzalez,N/A,https://github.com/OscarGomezGonzalez/IN,https://api.github.com/repos/OscarGomezGonzalez/IN,,# IN,0,0,3,3,solar-energy,"[business-intelligence, solar-energy, vuejs, vuetify, website]",00000
1097,solarLOCAL,8xu,N/A,https://github.com/8xu/solarLOCAL,https://api.github.com/repos/8xu/solarLOCAL,Little web app to help you track your solar energy consumption and production.,"## SolarLOCAL ☀️
> Little web app to help you track your solar energy consumption and production.

#### Tested on [Fronius Symo 5.0-3-M](https://www.fronius.com/en-gb/uk/solar-energy/installers-partners/technical-data/all-products/inverters/fronius-symo/fronius-symo-5-0-3-m)

### Installation 🕹
> Before you use the app, make sure your inverter is connected to the internet and the local IP is set to the correct value [here](./src/server.js).

After cloning the repository, you can install the dependencies by running:
```bash
npm install
```
After installing all the NPM dependencies you can run the app by running:
```bash
npm run dev
```

### Contribution 👨🏽‍💻
Not sure what to add? Well, do your best and send a pull request! This project doesn't really need more features than the ones I've added so far, but if you have any suggestions, please let me know! 😄",0,0,1,0,solar-energy,"[fronius, fronius-api, localhost, solar, solar-energy, symo]",00000
1098,sunstone-rs,hughrawlinson,N/A,https://github.com/hughrawlinson/sunstone-rs,https://api.github.com/repos/hughrawlinson/sunstone-rs,☀️🪨 Read data from a Dutch DSMR5 solar panel controller ,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,3,0,solar-energy,"[netherlands, solar, solar-energy]",00000
1099,Prediksi-Radiasi-Solar,Adriansyahpratamaputra,N/A,https://github.com/Adriansyahpratamaputra/Prediksi-Radiasi-Solar,https://api.github.com/repos/Adriansyahpratamaputra/Prediksi-Radiasi-Solar,Deployment Prediksi Radiasi Solar menggunakan Machine Learning (Data Science) model Random Forest Regressor.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,1,solar-energy,"[data-science, deployment, flask, machine-learning, panel-surya, prediction-model, restful-api, solar-energy, solar-panel, solar-radiation]",00000
1100,FreeDS-SCADA,Linux-RISC,N/A,https://github.com/Linux-RISC/FreeDS-SCADA,https://api.github.com/repos/Linux-RISC/FreeDS-SCADA,FreeDS SCADA developed using Node-Red,"<a href=""https://www.buymeacoffee.com/rbpiuserf"" target=""_blank""><img src=""https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png"" alt=""Buy Me A Coffee"" style=""height: 60px !important;width: 217px !important;"" ></a>

# FreeDS-SCADA (Pyhon script added, work in progress, use for testing purposes only)
FreeDS SCADA developed using Node-Red

<img src=""FreeDS-SCADA.png"" title=""FreeDS-SCADA"">

#### Project objectives
This project implements a SCADA for FreeDS, developing these functions:
- shows information about FreeDS status
- allows enable/disable PWM and switching modes AUT<-->MAN
- implements two set points in order to switch to MAN mode when the temperature is <= Low_temperature_set_point and switches to AUTO mode when the temperature is >= Low_temperature_set_point+Temperature_increase_set_point

#### Requeriments
1. A Raspberry Pi, I'm using a Raspberry Pi 2 and a 16 GB SD card
2. Raspberry Pi administration skills
3. Install and configure Mosquito MQTT broker and required utilities:<br>
https://randomnerdtutorials.com/how-to-install-mosquitto-broker-on-raspberry-pi/
```
sudo apt install mosquitto mosquitto-clients screen
```
Edit /etc/mosquitto/mosquitto.conf and add at the end:
```
allow_anonymous true
listener 1883 0.0.0.0
```
Enable and restart Mosquitto:
```
sudo systemctl enable mosquitto.service
sudo service mosquitto restart
```
4. Install Node-Red:<br>
https://nodered.org/docs/getting-started/raspberrypi
```
bash <(curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered) 
sudo systemctl enable nodered.service
sudo service nodered restart
```
Access to Node-Red from a Internet browser:<br>
http://raspberry-pi-IP:1880<br>
http://raspberry-pi-IP:1880/ui (runtime)<br>

5. Optional but recommendable:
- download MQTT explorer in order to debug MQTT broker: http://mqtt-explorer.com/
- configure your timezone and enable time synchronization:<br>
raspi-config --> Localisation Options --> Timezone
```
sudo raspi-config
sudo systemctl enable systemd-timesyncd
```

6. Log into Node-Red using http://raspberry-pi-IP:1880 and install node-red-dashboard:<br>
Menu-->Manage Palete-->Install and search node-red-dashboard, select it for installation and accept

7. Download <a href=""FreeDS.py"" target=""_blank"">FreeDS.py</a> and run it in a screen session

8. Download <a href=""FreeDS-SCADA.json"" target=""_blank"">FreeDS-SCADA.json</a>, import it into Node-Red and enjoy !
",0,0,2,0,solar-energy,"[freeds, raspberry, raspberry-pi, scada, solar, solar-energy, surplus, surplus-production]",00000
1101,per_capita_solar_energy_consumption_in_Spain,luismarcoslc,N/A,https://github.com/luismarcoslc/per_capita_solar_energy_consumption_in_Spain,https://api.github.com/repos/luismarcoslc/per_capita_solar_energy_consumption_in_Spain,"Analysis of per capita solar energy consumption over time. Implementation of concepts learned during the course ""Business_economic_&_financial_data"" to a renewable energy dataset.","# Study of the per capita solar energy consumption in Spain.
Implementation of concepts learned during the course ""Business, economic and financial data"":

- Univariate diffusion models
- Multivariate difussion models
- (S)ARIMA(X)
- Non parametric regression: Regression and smoothing splines, loess, GAM and gradient boosting


Check Presentation.pdf file for more details of the results.
",0,0,2,0,solar-energy,"[economics, solar-energy, time-series-analysis]",00000
1102,invafetch,geschke,N/A,https://github.com/geschke/invafetch,https://api.github.com/repos/geschke/invafetch,A tool for retrieving processdata values from Kostal Plenticore inverters.,"# invafetch (inverter value fetcher)

Invafetch is a tool for retrieving processdata values from Kostal Plenticore inverters.

This tool is not affiliated with Kostal and is no offical product of KOSTAL Solar Electric GmbH or any subsidiary company of Kostal Gruppe.

## Description / Overview

Invafetch is one of several building blocks for generating a Grafana dashboard for Kostal Plenticore inverters. Invafetch reads the processdata values at regular intervals from the Inverter API and stores the results in JSON format in a MariaDB table. The Invaps tool uses these values, i.e. reads them and makes them available to Prometheus on request. Grafana, in turn, uses Prometheus as a data source to create a dashboard for the Kostal Plenticore inverter. Here, a modular concept was implemented so that one application, as small as possible, is responsible for a single task at a time. The MariaDB database serves as the interface of the Invafetch and Invaps tools and thus as a buffer for the processdata values. For a description of Invaps see [https://github.com/geschke/invaps](https://github.com/geschke/invaps), a complete example including definition of the Grafana dashboard and a Docker compose file to start all components in a Docker environment can be found at [https://github.com/geschke/grkopv-dashboard](https://github.com/geschke/grkopv-dashboard).


## Installation

The recommended installation method is to use the Docker image, a fully commented example can be found at [https://github.com/geschke/grkopv-dashboard](https://github.com/geschke/grkopv-dashboard). Besides that, Invafetch can be installed from source like any other program written in Go:

```text
$ git clone https://github.com/geschke/invafetch
$ cd invafetch/
$ go build
$ go install
```

This command builds the invafetch command, producing an executable binary. It then installs that binary as `$HOME/go/bin/invafetch` (or, under Windows, `%USERPROFILE%\go\bin\invafetch.exe`).
After that invafetch can simply be started in the command line interface.


## Configuration

All processdata values that can be read out can be found in the `processdata.json` file. These are almost all processdata values provided by the Kostal inverter (except for the scb:export and scb:update modules). If not all values should be read and stored, single processdata ids, but also complete module ids can be removed from the `processdata.json` file. When Invafetch is started, the file is read once and used as configuration parameter.

Invafetch uses the JSON data type of MariaDB and requires a running MariaDB installation. The corresponding definition of the table structure can be found in the sql/ directory in the solardata.sql file.

All configuration options can be passed either in a configuration file (default file name: `~/.env`), as environment variables or as command line parameters.

The following options exist:

|Name of environment variable|CLI flag|Defaults|Example|Hint|
|--------------------|-------------|------------|--------|-------|
|DBHOST|--dbhost|(empty)|""db.example.com""|database server|
|DBUSER|--dbuser|(empty)|""solardbuser""|database username|
|DBNAME|--dbname|(empty)|""solardb""|name of database|
|DBPASSWORD|--dbpassword|(empty)|""myDBPassword""|password of database user|
|DBPORT|--dbport|""3306""|""3306""|MariaDB port (optional)|
|INV_SERVER|--server|(empty)|""192.168.0.100""|inverter address (FQDN or IP)|
|INV_SCHEME|--scheme|""http""|""http""|possible values: http or https|
|INV_PASSWORD|--password|(empty)|""myPlantOwnerPassword""|plant owner password|
|TIME_REQUEST_DURATION_SECONDS|--time-request|3|5|time span between two requests in seconds, i.e. values are read every n seconds|
|TIME_NEW_LOGIN_MINUTES|--time-new-login|10|15|Duration of a session in minutes. A logout and subsequent login occurs after n minutes, so that a new session is created.|

## CLI

If invafetch is called without parameters or with the `--help` or `-h` flag, an overview of the available commands appears:

```text
~$ invafetch

A tool for retrieving values from Kostal Plenticore inverters


Usage:
  invafetch [command]

Available Commands:
  completion  Generate the autocompletion script for the specified shell
  help        Help about any command
  info        Returns miscellaneous information
  start       Start collecting and storing values from inverter

Flags:
      --config string        config file (default is ~/.env)
      --dbhost string        Database host
      --dbname string        Database name
      --dbpassword string    Database password
      --dbport string        Database port (default ""3306"")
      --dbuser string        Database user
  -h, --help                 help for invafetch
  -p, --password string      Password (required)
  -m, --scheme string        Scheme (http or https, default http)
  -s, --server string        Server (e.g. inverter IP address) (required)
      --time-new-login int   Duration in minutes between two logins to inverter and database (default 10)
      --time-request int     Request new processdata every n seconds (default 3)

Use ""invafetch [command] --help"" for more information about a command.

```

## Quick Start

The installation and setup of the MariaDB database will not be discussed further here. Should an existing MariaDB database server be used, a database must first be created in which the table '*solardata*' is generated from the file `sql/solardata.sql`.

To test the connection to the inverter, the ""`info`"" command can be used. If the connection can be established successfully, information about the inverter API is written:

```text
$ invafetch info version -s 192.168.X.Y -p ""MYPASSWORD""
hostname: _INVERTER HOSTNAME_
sw_version: 01.23.07734
api_version: 0.2.0
name: PUCK RESTful API
```

This information corresponds to a request to the inverter with the URL `http://192.168.X.Y/api/v1/info/version` . Although this request is also possible without authentication, invafetch uses the access as plant owner by default, which needs an authentication. If the password parameter is missing, this is acknowledged with an error message:

```text
~$ invafetch info version -s 192.168.X.Y
password parameter / INV_PASSWORD variable missing.
Please use --password options or add INV_PASSWORD to the config file or to ENV variables
```

All flags can be passed either as CLI parameters, in a config file or as environment variables. The CLI parameters have the highest priority, followed by the environment variables, followed by the information in the config file. If required parameters are missing completely, a corresponding error message is issued. For a list of configuration parameters, see [Configuration](#configuration).

The process for collecting and storing the data is started with the command ""`start`"". Thereby the file `processdata.json` must be in the current directory.

```text
$ invafetch start
Alloc = 0 MiB   TotalAlloc = 0 MiB      Sys = 8 MiB     NumGC = 0
[...]
```

In the current version some parameters about memory consumption and current state are written, this may be omitted or offered as an option in future versions. After startup, new content should be found in the *solardata* table. It should be mentioned again that it is recommended to use the Docker image. The author has been running the combination of invafetch and invaps in a Docker environment stably for several months.

## License

Invafetch is licensed under the MIT License. You can read the full terms here: [LICENSE](LICENSE).
",0,0,1,0,solar-energy,"[golang-application, inverter, kostal, kostal-plenticore, mariadb, plenticore, solar-energy]",00000
1103,solarRouter,tgatinea,N/A,https://github.com/tgatinea/solarRouter,https://api.github.com/repos/tgatinea/solarRouter,Solar router based upon Linky messages to pilot a dimmer connected to an electrical heating water tank,"# solarRouter
Solar router based upon Linky messages to pilot a dimmer connected to an electrical heating water tank

Some links related to Linky

https://hallard.me/demystifier-la-teleinfo/

http://hallard.me/pitinfov12/

https://gammatroniques.fr/connaitre-sa-consommation-electrique-avec-home-assistant/

https://morbret.monsite-orange.fr/page-59f35f96b4860.html

Documentation Enedis for Linky

https://www.enedis.fr/media/2035/download

This version of code was tested with an allogen lamp of 500W.

Next step is to test on a real electrical water tank.

Note that esp32 is used because it has several UARTS that helps to solve issues in reception of Linky messages (e.g. The library <AltSoftSerial.h> looses characters while it is not the case with <HardwareSerial.h>)
",0,0,1,0,solar-energy,"[arduino, linky, solar, solar-energy, solar-router, solar-system]",00000
1104,SunWave,nvargas24,N/A,https://github.com/nvargas24/SunWave,https://api.github.com/repos/nvargas24/SunWave,"Sistema que registra la intensidad de luz en una cierta zona en la cual se coloca un panel solar. Dependiendo de los datos obtenidos, por medio de un mecánismo de engranajes, se orienta el panel según la posición más eficiente.","# SunWave
Prototipo de sistema embedido ""seguidor de luz"" con EDUCIAA-NXP para la cátedra Técnicas Digitales 2 UTNFRH.
Se toma registro de la intensidad de luz en una cierta zona en la cual se coloca un panel solar. Dependiendo
de los datos obtenidos, por medio de un mecánismo de engranajes, se orienta el panel según la posición más eficiente.   
Con el objetivo de capturar la mayor intensidad de luz posible y de esta forma cargar una bateria de forma constante.     

# Autores  
Sr. Kyanka, Santiago  
Sr. Lopéz, Ignacio  
Sr. Vargas, Nahuel  

",0,0,1,0,solar-energy,"[data-analysis, educiaa, freertos, nxp, pcb-design, servo-motor-control, solar-energy]",00000
1105,lora-mesh,syk-yaman,N/A,https://github.com/syk-yaman/lora-mesh,https://api.github.com/repos/syk-yaman/lora-mesh,"A solar-powered LoRa mesh network tested in the Olympic Park, London to sense weather parameters","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,2,0,solar-energy,"[current-sensor, esp32, grafana, heatmap, influxdb, iot, london, lopy4, lora, mesh-networks, mqtt, openthread, projection, sensors, solar, solar-energy, virtual-reality]",00000
1106,EU-JRC-Solar-PV-Model,WM-Energy,WM-Energy,https://github.com/WM-Energy/EU-JRC-Solar-PV-Model,https://api.github.com/repos/WM-Energy/EU-JRC-Solar-PV-Model,Python program to run multiple models through the EU JRC Solar PV model. Variables adjusted through CSV spreadsheet.,"# JRC PVGIS Solar Model - Simple calculator
    #### Description: Solar simulation and modelling calculator.
    ####              Users can set parameters to complete solar PV simulation for any location in the world.
    ####              Program will output as csv files project generation statistics, emission reductions, and some basic finacial parameters.



## General use guidelines:
There are a few basic requirements before running the program to ensure it works correctly. If you are not using an IDE like Jupyter or VScode, then remember to install python 3.9 or higher first before running the **""JRC_solar_model.py""** file.

If you would like to test the features of the program and are happy with the countries listed in the original **""JRC_API_Sheet.csv""** file, then simply download the entire **""JRC_Solar""** folder from this repo. Then run the **""JRC_solar_model.py""** file in order to execute the program. 

Due to the EU JRC model using primarily satellite data for solar data, there are some regions of the world with limited data. A baseline for each country has been established by completing a model for nearly every Capital city in the world if you would like to check these values to ensure the model will be useful for your scenario.

The program will then generate and save three files called **""data_used_in_calculations.csv""**, **""Solar_Model_Results.csv""**, **""Solar_Model_Results.xlsx""**.

The calcualted results for each location can be found in the **""Solar_Model_Results.csv/xlsx""** file, with the variables used in the calculations being found in the **""data_used_in_calculations.csv""** file.

More specific details, requirements, and user options are detailed below. The EU JRC solar PV model can be found at **""https://re.jrc.ec.europa.eu/pvg_tools/en/tools.html#PVP""**


## Requirements:
Make sure that the **""JRC_API_Sheet.csv""** is located within the same folder as the **""JRC_solar_model.py""** file. This is where the user can input data to be used when generating models and calculating values, and is directly read by the program.

Within the CSV file the user can input values under the columns **""Country"", ""Location"", ""PV_Power"", ""Lifespan"", ""Grid kgCO2/kWh"", ""Import _$/kW"" , & ""Solar $/kW"".** Generic values can be used but these cells must not be left empty. 

Coordinate (Lat, Lon) values are **not required** but please input values for these if program is having difficulty locating area from location description.

The original **""JRC_API_Sheet.csv""** contains data for several locations around the world already, so you may find suitable values for your chosen region in the default file.

See table below for the format the values that are input into the CSV file.

|Country|Location|Lat|Lon|PV_Power|Lifespan|Grid kgCO2/kWh|Import $/kWh|Export $/kWh|Solar $/kW|Utilisation Rate|
|:----|:----|:----:|:----:|:----:|----:|:----:|:----:|----:|----:|----:|
|UK|Belfast|||3.2|25|0.257|0.41|0.1766|1375|0.35|

### Input Variable Description:

**Country** = Country code for location being modelled. This is used as many countries have towns/cities with the same name, and this helps identify the correct coordinates.

**Location** = Desired location to complete the simulation and modelling. This can be as simple as a city/town name, or a specific address ""123 Test Street, Belfast""

**Lat** = Latitude coordinate value

**Lon** = Longitude coordinate value

**Pv_Power** = Size of installed solar PV system in kilowatts (kW)

**Lifespan** = Estimated lifespan of project. Standard warranty for solar PV is 25 years.

**Grid kgCO2/kWh** = Amount of CO2 emissions in kg per kWh of electricity obtained from the grid.

**Import $/kWh** = Price paid for electric when buying from the grid. Check local tariffs for this information

**Export $/kWh** = Price recieved for electric sold back to the grid. If unsure or unable to find conclusive data, an estimate of 33% of the import price is recommended.

**Solar $/kW** = Cost to install 1 kW of solar PV in the chosen area. 

**Utilisation Rate** = Value between 0-1 that represents the total % of generated power from solar PV that is consumed on site and not exported.

## How to change location solar PV simulation is completed for:

If you have a specific location that you would like to model, you can either enter a specific address in the **Location** column, or alternatively enter the specific latitude and longitude values under the **Lat** and **Lon** columns respectively.

In the **Location** column it is recommened to use short and specific information when referencing more obsurce locations, as this will help the program find the correct coordinates. An example of this is in the default file where the lecture hall in Harvard where CS50 is delivered can be referenced simply with **""Sanders Theatre""**

There is also little variation across regions in terms of solar potential, so it is also acceptable to simply type in the name of the closest city to the desired location being modelled. Results will not vary massively if you are off by 40-50km and are within an acceptable margin of error.

In order to ensure the correct location is being modelled when using this feature, the address for the coordinates generated are saved in a seperate csv file called **data_used_in_calculations.csv**. In this file the user can find all the variables used when completing the project calculations. This includes the full address produced by **geopy** when acquiring coordinates, so the user can check the location is correct.


## How to run:
Now to collect the data simply run the python file titled **""JRC_solar_model.py""** on the command line. This will calculate the solar potential for all the locations requested, and will generate a csv and excel (xlsx) file with all the data generated.

See explanation for each output provided below.


#### Output Variable Description:

**Location (city)** = Location where simulation and modelling was completed

**Yearly Generation (kWh)** = Total yearly electric generation from solar PV in kilowatts (kW)

**Total Generation (kWh)** = Total electric generation from solar PV over project lifetime in kilowatts (kW)

**Yearly Generation / kW Installed (kWh/kW)** = Total yearly electric generation per kilowatt installed of from solar PV(kW)

**Total Generation / kW Installed (kWh/kW)** = Total electric generation over project lifetime per kilowatt installed of from solar PV(kW)

**Yearly Emissions Saved (kgCO2)** = Kilogram of CO2 emissions saved from one year of project operation

**Yearly Emissions Saved / kW Installed (kgCO2/kW)** = Kilogram of CO2 emissions per kilowatt of solar installed during one year of project operation

**Total Emissions Saved (kgCO2)** = Kilogram of CO2 emissions saved over entire project lifespan

**Total Emissions Saved / kW Installed (kgCO2/kW)** = Kilogram of CO2 emissions per kilowatt of solar installed over entire project lifespan

**Total Project Cost ($)** = Total installation cost of project

**Yearly Savings ($/year)** = Savings from electric bill every year combined with revenues generated from exporting surplus power to the grid

**Total Savings ($)** = Savings from electric bill over project lifetime combined with revenues generated from exporting surplus power to the grid

**Project Payback Period (years)** = Time to recover intial investment cost into solar PV system


## Install through command line interface:

    pip install geopy
    pip install openpyxl
    pip install pandas


## Libraries used within JRC PVGIS Solar Model data calculator:

    from timeit import default_timer as timer
    from geopy.geocoders import Nominatim

    import math
    import os
    import os.path
    import pandas as pd
    import requests
    import sys


## References for default values used within JRC PVGIS Solar Model data calculator:

    Average Electricity prices resource:
    https://www.statista.com/statistics/263492/electricity-prices-in-selected-countries/

    Grid Carbon Intensity resource:
    https://ourworldindata.org/grapher/carbon-intensity-electricity

    Cost to install Solar PV resource:
    https://www.electronicsandyou.com/solar-energy-cost.html

    JRC Solar API Documentation:
    https://joint-research-centre.ec.europa.eu/photovoltaic-geographical-information-system-pvgis/getting-started-pvgis/api-non-interactive-service_en

    Example of returned data from API in JSON format:
    https://re.jrc.ec.europa.eu/api/v5_2/PVcalc?lat=54.59&lon=-5.95&peakpower=3.2&loss=14&outputformat=json&angle=40.0

    Example of returned data from API in CSV format:
    https://re.jrc.ec.europa.eu/api/PVcalc?lat=54.11&lon=-5.91&peakpower=1&loss=14&outputformat=csv

",0,0,0,0,solar-energy,"[energy, energy-calculator, eu-jrc, pvgis, solar, solar-energy, solar-model, solar-panels, solar-pv]",00000
1107,hana-manage-solar-panel,oarthursilva,N/A,https://github.com/oarthursilva/hana-manage-solar-panel,https://api.github.com/repos/oarthursilva/hana-manage-solar-panel,IOT: Solar panel monitored by a SAP HANA cockpit (custom),"# SAP-HANA: Solar

IoT project which consists in monitoring solar panels through a cockpit based on UI5(Fiori-like) technology and data persistence in SAP HANA database.
",0,0,1,0,solar-energy,"[iot, sap-hana, solar-energy]",00000
1108,Solar-System-using-Spacekit,Khokon9363,N/A,https://github.com/Khokon9363/Solar-System-using-Spacekit,https://api.github.com/repos/Khokon9363/Solar-System-using-Spacekit,Solar system using Spacekit,"# Solar system using Spacekit
",0,0,1,0,solar-energy,"[solar-energy, solar-system, solar-system-simulation, spacekit, spacekitjs]",00000
1109,SolarDirectionClass,HenniePeters,N/A,https://github.com/HenniePeters/SolarDirectionClass,https://api.github.com/repos/HenniePeters/SolarDirectionClass,A class to calculate the direction and elevation for a solar panel to point it accurately to the position of the sun,"# SolarDirectionClass (for solar panels)
A class to calculate the direction and elevation of a solar panel to point it accurately to the position of the sun  
It can also be used to prove that the earth is NOT flat :-)
    
Please note that calculations are only valid for dates between 1901 and 2099, due to an approximation used in the Julian Day calculation.
    
When you are pleased with this class and you wish to donate for the work that was  
involved with the conversion from VBA to C++. I will appreciate a donation on my patreon page:  
https://www.patreon.com/hennep    

An example of how to use this class can be found in the main function at the end of main.cpp

Good luck,  
Hennie Peters  
Zevenaar, Netherlands
",0,0,1,0,solar-energy,"[solar-energy, solar-panels, tracker]",00000
1110,golrackpi,geschke,N/A,https://github.com/geschke/golrackpi,https://api.github.com/repos/geschke/golrackpi,Go Library Rest Api Client (for) Kostal Plenticore Inverters (with CLI),"# golrackpi is a Go (Golang) Library Rest Api Client (for) Kostal Plenticore Inverters (with CLI)

[![Go Reference](https://pkg.go.dev/badge/github.com/geschke/golrackpi.svg)](https://pkg.go.dev/github.com/geschke/golrackpi)

This repository provides a Go (Golang) library for the undocumented REST-API of Kostal Plenticore Inverters. It uses the PIKO IQ / PLENTICORE plus API with its swagger documentation found at ""inverter ip address""/api/v1/.

This library is not affiliated with Kostal and is no offical product of KOSTAL Solar Electric GmbH or any subsidiary company of Kostal Gruppe.

## Features

* Authenticate (Login, Logout, Check authentication)
* Read settings
* Read processdata
* Read events

Additional:

* Commandline interface (CLI) to get any kind of returned inverter data

## Getting Started

Please be patient. The library is in development and currently in the last stage before a release will be published. So I'm cleaning up a bit and try to add some senseful comments and documentation in the next step.

...todo...

### Installing the library

...todo...

### Using the command line interface




```shell

 golrackpi is a small CLI application to read values from Kostal Plenticore Inverters.

Usage:
  golrackpi [command]

Available Commands:
  completion  Generate the autocompletion script for the specified shell
  events      Get the latest events
  help        Help about any command
  info        Returns miscellaneous information
  modules     List modules content
  processdata List processdata values
  settings    List settings content

Flags:
  -h, --help              help for golrackpi
  -p, --password string   Password (required)
  -m, --scheme string     Scheme (http or https, default http)
  -s, --server string     Server (e.g. inverter IP address) (required)

Use ""golrackpi [command] --help"" for more information about a command.


```

 
### Using the library from Go

...todo...


## Documentation

...todo...

## License

MIT

## Thanks to

* [kilianknoll](https://github.com/kilianknoll) for the kostal-RESTAPI project 
* [stegm](https://github.com/stegm) for the pykoplenti Python REST client API project
* Marco Tröster ([Bonifatius94](https://github.com/Bonifatius94)) in the issue of openhab-addons for some Java code provided in https://github.com/openhab/openhab-addons/issues/7492
",0,0,1,0,solar-energy,"[api, cli, go, golang, golang-library, kostal, kostal-plenticore, library, plenticore, solar-energy]",00000
1111,k-volt-v1,kristiangreif,N/A,https://github.com/kristiangreif/k-volt-v1,https://api.github.com/repos/kristiangreif/k-volt-v1,DIY Smart Solar Generator,"# K-Volt V1
K-Volt is a DIY ""solar generator"" - a rather big powerbank with a built-in inverter and a PV input. Its main purpose is to provide you with energy off the grid.

![IMG_20190224_204149](https://user-images.githubusercontent.com/62846329/181819526-70e9aecc-f7db-4a82-85e8-80e913dd4d5c.jpg)

## Unique Features
* Lightweight and portable
* External Battery Input
* WiFi Control & Monitoring

## Specs
* **Battery**: 10Ah 4S LiFePO4
* **Input**: DC/PV input 14-30V @50W
* **Output**: 230V AC @100W, 12V DC @100W
* **Battery current limit:** 10A
* **External battery options:**
  * LiFePO4 4S
  * Li-ion 3S
  * Pb 12V
* **Weight**: 1.3kg

## Block diagram
![k-Volt-v1-diagram](https://user-images.githubusercontent.com/62846329/181918167-1012422c-2a04-4a6d-8fa3-04418f66bfe5.png)

## Schematic
![Schematic_K-Volt_2022-07-30](https://user-images.githubusercontent.com/62846329/181919954-8beaf8f7-092d-4b4f-aa8c-5fff287451a0.png)
",0,0,1,0,solar-energy,"[arduino-ide, blynk, energy-monitor, energy-storage, nodemcu, solar-energy, solar-system]",00000
1112,TCC_UEMG_ARIANE,aricoelhog,N/A,https://github.com/aricoelhog/TCC_UEMG_ARIANE,https://api.github.com/repos/aricoelhog/TCC_UEMG_ARIANE,Photovoltaic Solar Energy Monitoring System with Cloud Data Storage,"# Photovoltaic Solar Energy Monitoring System with Cloud Data Storage

With the constant growth of photovoltaic energy generation and the great potential of of these systems in Brazil, monitoring factors that 
may influence downfalls in generation is extremely important. This project describes a online monitoring system, storage and visualization 
of data in the cloud applied to a photovoltaic module, allowing to keep up with electricity generation, power, voltage, direct current, 
module temperature, umidity, ambient temperature, lightness and irradiance upon the module, from any location with an internet connection. 
Using the ESP32 microcontroller along with analog and digital sensors, a hardware prototype was built developed using the Arduino \ac{IDE}, 
enabling the system to collect data and send it to the AWS cloud via Wi-Fi storing it in a database and visualizing it graphically 
through the QuickSight service. Furthermore, through the SNS, AWS has allowed alerting when the module was dirty or when the 
temperature was high enough to reduce electrical generation.

View the complete project in portuguese(BR): https://drive.google.com/file/d/1ge0Wb9ZYfXhWafDIYcRNHqw6Q1MuCGXX/view?usp=sharing

GONÇALVES, A. **Sistema de Monitoramento de Energia Solar Fotovoltaica com Armazenamento de Dados em Nuvem**. Projeto de Conclusão 
de Curso — Universidade do Estado de Minas Gerais, 2023.
",0,0,1,0,solar-energy,"[arduino-ide, aws, aws-iot, aws-iot-core, cloud, current-sensor, database, dht22, esp32, esp32-arduino, humidity, iot, lm35, lm35dz, photovoltaic, solar-energy, solar-system, temperature, voltage-sensor]",00000
1113,therealnaail.github.io,therealnaail,N/A,https://github.com/therealnaail/therealnaail.github.io,https://api.github.com/repos/therealnaail/therealnaail.github.io,Static HTML and CSS website. Displays similar information to GUI app in addition to some infographics about how solar panels work.,"# therealnaail.github.io
Static HTML and CSS website about my GCSE Design & Technology NEA Project. Displays information about solar energy and link to GUI app in addition to some infographics about how solar panels work. Aims to increase awareness of renewables. JavaScript web app inputs the area of a solar panel (m2), calculates and outputs estimated energy output (kWh) and cost savings (GBP) on a clear day and a cloudy day.
",0,0,1,0,solar-energy,"[designandtechnology, html, js, school-project, solar, solar-energy]",00000
1114,growatt,mendel5,N/A,https://github.com/mendel5/growatt,https://api.github.com/repos/mendel5/growatt,Information about Growatt MIC microinverters for photovoltaic systems / solar power systems,"# growatt
Information about Growatt MIC microinverters for photovoltaic systems / solar power systems

Note: Some content is focused on Germany.

## Claim
>Der growatt mic 600, 800 bis vermutlich 2500 sind baulich identisch. Es ist über modbus möglich die Software leistungsbegrenzung auf 600w auf 800w hoch zusetzen. Das ist nach growatt Support natürlich nicht erlaubt (Garantie geht verloren), aber wer nach der Anleitung im Internet sucht wird sie auch finden (und ob das bei Garantiefall wirklich nachweisbar ist..).
>
>Für mich persönlich ein Argument bzgl growatt, da elektroschrott vermieden wird bei dem absehbaren 800w Upgrade.
>
>Zur Google Referenz.. Suchen nach : ""changing Mode on Growatt MIC-Series changes rated output power""

Source: https://www.computerbase.de/forum/threads/anker-solix-rs40p-im-test-steckerfertige-mini-pv-anlage-mit-balkonhalterung.2141563/#post-28144202

The following link seems to be the right one:
- https://diysolarforum.com/threads/changing-mode-on-growatt-mic-series-changes-rated-output-power.60674/ changing Mode on Growatt MIC-Series changes rated output power

## Links
- Example product: Growatt MIC 600TL-X https://geizhals.de/growatt-mic-600tl-x-a2787099.html
",0,0,2,0,solar-energy,"[growatt, inverter, microinverter, photovoltaic, photovoltaic-systems, photovoltaics, pv, solar, solar-energy, solar-system]",00000
1115,solar-field-sim,carlos-rpg,N/A,https://github.com/carlos-rpg/solar-field-sim,https://api.github.com/repos/carlos-rpg/solar-field-sim,A stochastic approach to generate and simulate solar field designs,"# solar-field-simulator
A stochastic approach to generate and simulate solar field designs

## Background
This code was part of my master thesis written back in 2014. It is based on the paper
[_A conceptual design of solar boiler (2009)_](https://www.researchgate.net/publication/222729870_A_conceptual_design_of_solar_boiler),
published by some of the professors at the department of energy engineering at
the school of industrial engineering (Polytechnical university of Madrid, UPM).

### What is a solar boiler?
It is a concept of solar thermal power plant that aims to recycle the knowledge
of a century using fossil fuel boilers to produce electrical energy,
substituting the conventional fuel totally or partially with solar energy.

## Aim
This project aimed to give an answer to how a solar field that feeds this kind
of power plant should be (number of heliostats, size of the mirrors, size of
the land, performance, heliostat distribution...).
",0,0,0,0,solar-energy,"[monte-carlo, solar-boiler, solar-energy]",00000
1116,SI-thylakoid,teokem,teokem,https://github.com/teokem/SI-thylakoid,https://api.github.com/repos/teokem/SI-thylakoid,Electron diffusion model for micropatterned chips for photocurrent generation,"[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/teokem/SI-thylakoid/master)

# Electron diffusion model for micropatterned chips for photocurrent generation

This repository contains a [Jupyter](http://jupyter.org) Notebook for reproducing the theoretical calculations of the scientific paper _Micropatterned Carbon-on-Quartz Electrode Chips for Photocurrent Generation from Thylakoid Membranes_, [DOI: 10.1021/acsaem.8b00500](http://dx.doi.org/10.1021/acsaem.8b00500).

### Layout

- `notebook.ipynb` Jupyter Notebook to perform calculations and generate plots
- `notebook.html` Jupyter Notebook in HTML format 

### Usage

To open the Notebooks, install python via [Miniconda](https://conda.io/miniconda.html) and make sure all required packages are loaded
by issuing the following terminal commands

```bash
    conda env create -f environment.yml
    source activate thylakoid
    jupyter-notebook
```
",0,0,3,0,solar-energy,"[diffusion-equation, jupiter-notebook, reproducible-science, solar-energy]",00000
1117,pvoutput-mycroft,wildmountainfarms,wildmountainfarms,https://github.com/wildmountainfarms/pvoutput-mycroft,https://api.github.com/repos/wildmountainfarms/pvoutput-mycroft,A pvoutput skill for the Mycroft AI voice assistant,"# <img src='https://raw.githubusercontent.com/wildmountainfarms/pvoutput-mycroft/master/sun_and_panel_logo.png' card_color='#40DBB0' height='50' style='vertical-align:bottom'/> PVOutput
Informs you about energy generation and consumption

## About
With this skill, you can ask Mycroft for the status of your solar panel system. 
This retrieves data from https://pvoutput.org. You can ask it for today's
energy generation or last week's energy consumption.

Recommended to be used with [SolarThing](https://github.com/wildmountainfarms/solarthing), which can upload data to PVOutput.
There are also [numerous other programs](https://github.com/topics/pvoutput) that can upload data to PVOutput.

This requires you to set up an account on https://pvoutput.org to get an API key.

## Examples 
* ""How much energy have the panels produced today?""
* ""How much energy have I used today?""
* ""How much energy was produced yesterday?""
* ""How much energy was generated last month?""
* ""How much energy have I used this year?""
* ""How much power am I using right now?""
* ""How much power are the solar panels generating?""
* ""What was my peak power?""

## Credits 
Joshua Shannon (@retrodaredevil)

## Category
**IoT** Productivity

## Tags
#SolarPower 
#PVOutput
#Energy
",0,0,3,0,solar-energy,"[mycroft, mycroft-skill, pvoutput, solar, solar-energy, solarthing]",00000
1118,Solar-System,poetter-sebastian,N/A,https://github.com/poetter-sebastian/Solar-System,https://api.github.com/repos/poetter-sebastian/Solar-System,Some small circuit for a DIY solar system.,"# Solar system

Some small circuit for a DIY solar system.

## Sketch
![alt text](https://github.com/poetter-sebastian/solarcell/blob/main/img/circuit.png ""Sketch of the system"")
* VCC B: voltage of the battery
* GND B: ground of the battery
* VCC S: voltage of the solar panels
* GND S: ground of the solar panels

See [circuit-diagram.org](https://www.circuit-diagram.org/editor/) with .cddx save file

## Used hardware
Here is the list of the used hardware for the system.
* 3x 24V solar panels (120W)
* 3x MBR1645 16A 45V schottky diode
* Arduino Nano v3 (soon)
* 3S BMS PCB Protection Board For 18650
* 8ZED PWM Solar Charge Controller 12V/24V 20A-30A
* DC(12V)-AC(240V-50hz) converter

# Diagrams
(soon)

# Pictures of the system
(soon)

No liability for damage or injury!
",0,0,1,0,solar-energy,"[18650, battery, solar-controller, solar-energy, solar-system]",00000
1119,Self-adaptive-pattern-matching,alidoostnia,N/A,https://github.com/alidoostnia/Self-adaptive-pattern-matching,https://api.github.com/repos/alidoostnia/Self-adaptive-pattern-matching,A Random Walk-Based Pattern-Matching Simulator for Verification of Incomplete Markov Models in Self-Adaptive Systems,"# Self-adaptive-pattern-matching
A pattern generator and pattern-matching system for self-adaptive solar energy harvesting systems.

The project includes two branches:

1- Self-adaptive pattern generator that simulates the behavior of solar energy harvesting system according to the changes imposed from the environment.

2- Self-adaptive pattern matching system that matches incomplete models with the previously generated patterns of the self-adaptive system. Finally, it estimates the unknown parameters of the system if need be.

# Technical Specifications
The project is written by JAVA programming language and developed by Netbeans IDE. We have applied the proposed system to a case study about self-adaptive solar energy harvesting system. Formal models of the case study is placed in ""Models"" directory that is developed in PRISM probabilistic model-checker including the local system and the environment formal models. 
",0,0,1,0,solar-energy,"[energy-harvesting, markov-decision-processes, random-walk, self-adaptive-systems, solar-energy]",00000
1120,pvsc46_solarfarmer_bifacial,mikofski,N/A,https://github.com/mikofski/pvsc46_solarfarmer_bifacial,https://api.github.com/repos/mikofski/pvsc46_solarfarmer_bifacial,Bifacial PV modeling with SolarFarmer,"# pvsc46_solarfarmer_bifacial
Bifacial PV modeling with SolarFarmer. Available online: https://doi.org/10.1109/PVSC40753.2019.8980572

## Citation
>M. A. Mikofski, R. Darawali, M. Hamer, A. Neubert and J. Newmiller, ""Bifacial Performance Modeling in Large Arrays,"" 2019 IEEE 46th Photovoltaic Specialists Conference (PVSC), Chicago, IL, USA, 2019, pp. 1282-1287, doi: 10.1109/PVSC40753.2019.8980572.
",0,0,1,0,solar-energy,"[bifacial, photovoltaics, renewable-energy, solar, solar-energy, solar-power, solar-power-prediction]",00000
1121,eastec.corona,dumtux,N/A,https://github.com/dumtux/eastec.corona,https://api.github.com/repos/dumtux/eastec.corona,"Bluetooth ESP32-controlled power management for LED strip, Li-ion battery, and solar panel","# LED Light Controller with Solar MPTT Charging Controller and ESP32 BLE

## Quickstart

### Building Firmware

Clone the repository, init submodules.

```
$ git clone https://github.com/hotteshen/eastec.corona
$ git submodule init
$ git submodule update
$ ./idf.sh
$ cd firmware/
$ idf.py build
```

CAUTION: Do not run `idf.py set-target esp32c3` because it will overwrite `sdkconfig`, which is manually revised.

### Running Script to Communicate with the Device

Requires Bluetooth peripheral or USB dongle is present on the computer.

```
$ python3 -m venv devenv
$ source devenv/bin/activate
(devenv) $ pip install -r scripts/requirements.txt
(devenv) $ scripts/send_cmd.py --help
```

NOTE: Use another terminal session to activate the development environment. If using the same session wwhere IDF is activated, it will override IDF's virtual environment.

## Controlling LEDs via PWM

The initial design used WS2312 LEDs via its 1-wire interface.
```sh
python scripts/send_cmd.py set-led ADDRESS 0xRRGGBB
```
, where `0xRRGGBB` is the HEX values representing brightness of red, blue and green colors.

From commit XXXX , the hardware is modified to use normal LEDs via PWM control.
```sh
python scripts/send_cmd.py set-led ADDRESS 0xMMNNPP
```
, where `0xMMNNPP` is the HEX values for controlling PWM duty cycle, that is, brightness of the LED strip.
The duty cycle is caldulated as:

$$ D = \frac{\text{0xMM} + \text{0xNN} + \text{0xPP}}{\text{0xff} + \text{0xff} + \text{0xff}} \times 100 = \frac{M + N + P}{255 + 255 + 255} \times 100 $$

For example,
* `0x000000` is for 0% duty cycle, LED turned off.
* `0xff0000`, `0x00ff00` or `0x0000ff` is for 33% duty cycle, LED is darkly on.
* `0x808080` is for 50% duty cycle, LED turned on with half brightness.
* `0xffff00`, `0x00ffff` or `0xff00ff` is for 67% duty cycle, LED is brightly on.
* `0xffffff` is for 100% duty cycle, LED turned on with full brightness.
",0,0,1,2,solar-energy,"[battery-monitor, bluetooth, esp32, mptt, solar-energy]",00000
1122,Hashimoto-Solar,KendiHashimoto,N/A,https://github.com/KendiHashimoto/Hashimoto-Solar,https://api.github.com/repos/KendiHashimoto/Hashimoto-Solar,☀️ Hashimoto Solar website,"# Hashimoto Solar

[![Website shields.io](https://img.shields.io/website-up-down-green-red/http/shields.io.svg)](http://shields.io/) 
[![GitHub license](https://img.shields.io/github/license/Naereen/StrapDown.js.svg)](https://github.com/Naereen/StrapDown.js/blob/master/LICENSE)
[![GitHub commits](https://badgen.net/github/commits/Naereen/Strapdown.js)](https://GitHub.com/Naereen/StrapDown.js/commit/)

![Logo!](assets/img/logo.png ""logo"")

<h3 align=""center""> 🚀 Hashimoto Solar ☀️ Concluído ✅ </h3>

<p align=""center"">
   <a href=#sobre>Sobre</a> •
   <a href=#site>Site</a> •
   <a href=#clone>Clone</a> •
   <a href=#layout>Layout</a> •
   <a href=#tecnologias>Tecnologias</a> • 
   <a href=#licença>Licença</a> •
   <a href=#autor>Autor</a> 
</p>

## 💻 Sobre


☀️ Hashimoto Solar - é um site estático institucional voltado para o ramo da energia solar e também, maior presença da empresa na internet

---

## 🌐 Site
<a href=""https://hashimoto-solar.vercel.app/"">📎 Clique aqui</a> 

---

## 📥 Clone
```bash
git clone https://github.com/Hashimoto1312/Hashimoto-Solar.git
```

---

## 🎨 Layout
![Layout!](assets/img/layout-gif.gif ""layout"")

---

## 👾 Tecnologias

Ferramentas usadas para construir o projeto

- **[Bootstrap](https://getbootstrap.com/)**
- **[Font Awesome](https://fontawesome.com/)**
- **[Form Submit](https://formsubmit.co/)**
- **[Fonte](https://fonts.google.com/specimen/Comfortaa?query=comfortaa)**


---

## 👨‍💻 Autor
 <img style=""border-radius: 50%;"" src=""https://avatars.githubusercontent.com/u/71889483?v=4"" width=""100px;"" alt=""""/>
 <br/>🚀 Kendi Hashimoto

[![Linktree Badge](https://img.shields.io/badge/linktree-1de9b6?style=for-the-badge&logo=linktree&logoColor=white)](https://linktr.ee/Hashimoto01)
[![Linkedin Badge](https://img.shields.io/badge/-KendiHashimoto-blue?style=flat-square&logo=Linkedin&logoColor=white&link=https://www.linkedin.com/in/tgmarinho/)](https://www.linkedin.com/in/kendi-hashimoto-202359220/) 
[![Gmail Badge](https://img.shields.io/badge/-kendcampos@gmail.com-c14438?style=flat-square&logo=Gmail&logoColor=white&link=mailto:tgmarinho@gmail.com)](https://mail.google.com/mail/u/0/#inbox)

---

## 📝 Licença
Este projeto esta sobe a licença [MIT](./LICENSE).
",0,0,1,2,solar-energy,"[bootstrap5, css3, font-awesome, form-submit, html5, layout, solar-energy]",00000
1123,DadsEnergyReporter,Aldaviva,N/A,https://github.com/Aldaviva/DadsEnergyReporter,https://api.github.com/repos/Aldaviva/DadsEnergyReporter,"Send monthly electricity usage reports from SolarCity, aligned to Orange & Rockland utility billing cycles.","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,4,3,solar-energy,"[coned, electricity-bill, electricity-consumption, electricity-meter, solar-energy, tesla]",00000
1124,going-green,stephanie-K,N/A,https://github.com/stephanie-K/going-green,https://api.github.com/repos/stephanie-K/going-green,"A responsive website to help exploring various possibilities when you are planning green changes in your house or garden (ON HOLD at the moment, pending further User Research)","
# Going green
This is a personal project. 
I'm designing a responsive website to help exploring various possibilities when you are planning green changes in your house or garden.
This is to get a better idea of what to expect, and decide if these changes are worth doing without checking various sources of information, as it would all be in one place.

To visit the website under construction: http://going-green.chezleskrus.com/

![An animation of the homepage](https://github.com/stephanie-K/going-green/blob/master/assets/screencast-going-green.chezleskrus.com-2018.09.07-09-46-05.gif ""homepage in action"")

---

15/01/18: two languages working : FR and EN

29/01/18: change of unit working - chicken and water sections mostly done

05/02/18: add cookies to memorise the preferences and add a cookie policy

07/02/18: add 2 more colour themes and the possibility to switch from one another - to be revisited later

19/02/18: add solar panel section - save values on index page in local storage - save open panels onbeforeunload 

02/03/18: add new wireframes

04/03/18: improved accessibility after checking with WAVE, and tab navigation - add a skip content option

19/06/18: improved accessiblity after chrome dev tool audit, improve footer, and review design plan


**next steps:**
- prototype a different navigation to replace the 'Hamburger menu' on small screens by tab bars
- organise user research to assess the actual design and user needs (navigation - Grow and email sections)
- improve navigation
- work on the email results section
- work on the 'Grow your own' section
- improve error handling if needed (following usability testing)
- add more languages


**This project is on hold at the moment as I would need to do some User Research before going further**

---

## Design goals
- Ease of use for expert users but also for users with little experience of apps
- Give a green feel visual, but still accommodate colour-blind users
- Choice of French or English - and more
- Responsive website so you can use it on a mobile or a desktop

---

## Technical aspects
I'm using [**Bootstrap**](https://getbootstrap.com/docs/3.3/getting-started/) and a mobile first design approach.


The various components will be adapted so they look as good as possible on various screens sizes.


This is using [Node.js](https://nodejs.org/en/), [EJS](http://www.ejs.co/), [Sails](https://sailsjs.com/get-started), [SASS](https://github.com/twbs/bootstrap-sass#d-npm--nodejs), [LESS](https://getbootstrap.com/2.0.4/less.html).



",0,0,1,0,solar-energy,"[chicken, gardening, green, permaculture, recycling, solar-energy]",00000
1125,beskar,Ahsoka,N/A,https://github.com/Ahsoka/beskar,https://api.github.com/repos/Ahsoka/beskar,🧪 Redesigning the SEAL kit software for compatibility with modern operating systems.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,2,8,solar-energy,"[hydrogen, pyqt, seal-kit, solar-army, solar-energy]",00000
1126,lovelace-energy-flow-card,Rai-Rai,N/A,https://github.com/Rai-Rai/lovelace-energy-flow-card,https://api.github.com/repos/Rai-Rai/lovelace-energy-flow-card,Simple and compact card to show the energy flow from grid and photovoltaik as well as the building consumption,"# lovelace-energy-flow-card
Simple and compact card to show the energy flow from grid and photovoltaik as well as the building consumption
",0,0,2,0,solar-energy,"[consumption, energyflow, powerwheel, solar, solar-energy]",00000
1127,GreenHouse,Khushi-Singh-Git,N/A,https://github.com/Khushi-Singh-Git/GreenHouse,https://api.github.com/repos/Khushi-Singh-Git/GreenHouse,GreenHouse Climate Controller System For Agri Research Applications,"# :seedling: GreenHouse Climate Controller System For Agri Research Applications

* A greenhouse is a framed or inflated structure covered with a transparent or translucent material in which fruits or vegetables or flower crops can be grown under the Controlled Climatic Conditions or at least partially controlled environment.

* Its mostly used in Agricultural Research to Study impact of Environmental Parameters on Crop Yield and its Nutritional Contents.

* Environmental Parameters like Temperature, Humidity, Ambient Light and Soil Moisture are kept under control as per crop need, using Sensors and Devices like AC, Dehumidifiers, Light, Foggers, and Water Pumps.


# :blossom: Prototype Picture 
<p align=""center"" width=""100%"">
<kbd><img src=""https://user-images.githubusercontent.com/107871742/178546891-35e91919-0fdf-49b0-93a9-52b36529b197.png"" width=""800px"" height=""500px"" /></kbd>
</p>


# :mushroom: Block Diagram
<p align=""center"" width=""100%"">
<kbd><img src=""https://user-images.githubusercontent.com/107871742/178546620-953da747-8f96-40de-920d-7587a599cb73.png"" width=""800px"" height=""600px"" /></kbd>
</p>

# :herb: Working
* I am collecting Environmental Parameters like Temperature, Humidity , Ambient Light and Soil Moisture using appropriate Sensors in real time.

* Based on Pre-Defined Values (as per crop research need) of these Parameters ,I am switching on/off devices like Cooling System, Dehumidifier , Water Pump etc.

* Sensor Data is being uploaded to Cloud.

* To Demonstrate these Capabilities , I controlled functioning of DC Pump , DC Motor, DC Fans and Light using suitable Relay Control.

* I used Arduino Mega with WiFi Development Board, Arduino IDE, Temperature Sensor, Humidity Sensor, Light Sensor , Soil Moisture Sensor , LCD Display , ESP8266 WiFi Board and 4 channel DC Relays.

<hr>
",0,0,1,0,solar-energy,"[actuator, arduino-mega2560-board, cpp, embedded-c, embedded-systems, greenhouse-monitoring, oled-display, relay, sensors-data-collection, solar-energy]",00000
1128,dwalt-site,luarrekcah,N/A,https://github.com/luarrekcah/dwalt-site,https://api.github.com/repos/luarrekcah/dwalt-site,"Site principal informativo sobre a empresa D | Walt Engenharia, com informações, desrições e até mesmo loja.","# Site D Walt Engenharia

- Em desenvolvimento.
",0,0,1,0,solar-energy,"[ejs, engineering, express, nodejs, solar-energy, strapi]",00000
1129,photovoltaic-system-modeling,risto-trajanov,N/A,https://github.com/risto-trajanov/photovoltaic-system-modeling,https://api.github.com/repos/risto-trajanov/photovoltaic-system-modeling,Photovoltaic System Modeling and Predictions,"# Photovoltaic System Modeling and Predictions for Data Mining 2020 FCSE

## Getting started with airflow
```
cd airflow
docker-compose up -d
```
Then visit `localhost:8080`

Place DAG files in `airflow\dags`. See examples at https://airflow.apache.org/docs/stable/tutorial.html#example-pipeline-definition .


Place python requirements at `airflow\requirements.txt` and then restart the containers with
`docker-compose up -d --force-recreate`
",0,0,1,1,solar-energy,"[airflow, data-mining, docker, solar-energy, time-series]",00000
1130,3-phase_energy_gauges_card,Swerfer,N/A,N/A,https://api.github.com/repos/Swerfer/3-phase_energy_gauges_card,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C100:29CE:32E0BAF:67D4C91:6522410E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,solar-energy,"[N, /, A]",00000
1131,Machinehack_forecasting_solar_energy_efficiency,hariprasath-v,N/A,https://github.com/hariprasath-v/Machinehack_forecasting_solar_energy_efficiency,https://api.github.com/repos/hariprasath-v/Machinehack_forecasting_solar_energy_efficiency,create a model to predict solar energy efficiency based on the measurements of various meteorological parameters over a period of time.,"# Machinehack_forecasting_solar_energy_efficiency

## Private Leaderboard
* Rank :28
* Score :2620.31278

### Competition hosted on <a href=""https://machinehack.com/hackathons/forecasting_solar_energy_efficiency_engage_in_the_challenge_and_win"">Machinehack</a>

### Problem
create a model to predict solar energy efficiency based on the measurements of various meteorological parameters over a period of time.

### Evaluation
#### Evaluation metric for this competition is Mean Square Error.

### Dataset

You can download the dataset <a href=""https://machinehack.com/hackathons/forecasting_solar_energy_efficiency_engage_in_the_challenge_and_win/data"">here</a>    

### Solution:

### Exploratory Data Analysis
#### The basic exploratory data analysis of the data,
* Numerical Distribution Analysis
* Correlation Analysis
* Stationary Analysis
#### The above analysis had done by using,
* pandas 
* numpy
* seaborn
* matplotlib
* statemodels

### Model
#### Trained each target label separately by using pycaret tool and the model was evaluated with an MSE score.
#### Final model was blended from the top 3 performing models.


### File information

machinehack-forecasting-solarenergy-efficiency-eda.ipynb[![Open in Kaggle](https://img.shields.io/static/v1?label=&message=Open%20in%20Kaggle&labelColor=grey&color=blue&logo=kaggle)](https://www.kaggle.com/code/hari141v/machinehack-forecasting-solarenergy-efficiency-eda)
 
mh-forecasting-solarenergy-efficiency-model.ipynb[![Open in Kaggle](https://img.shields.io/static/v1?label=&message=Open%20in%20Kaggle&labelColor=grey&color=blue&logo=kaggle)](https://www.kaggle.com/code/hari141v/mh-forecasting-solarenergy-efficiency-model)
 
 
   
        

",0,0,1,0,solar-energy,"[exploratory-data-analysis, machine-learning, metpy, pandas, pvlib, python, solar-energy]",00000
1132,Solar-Power-Prediction-R,safwanshamsir99,N/A,https://github.com/safwanshamsir99/Solar-Power-Prediction-R,https://api.github.com/repos/safwanshamsir99/Solar-Power-Prediction-R,Trained Random Forest model using R programming language for two problems; regression and classification based on the solar power generation that was compiled by Ph.D. candidate Alexandra Constantin.,"![R](https://img.shields.io/badge/r-%23276DC3.svg?style=for-the-badge&logo=r&logoColor=white)
![RStudio](https://img.shields.io/badge/RStudio-4285F4?style=for-the-badge&logo=rstudio&logoColor=white)
![Kaggle](https://img.shields.io/badge/Kaggle-035a7d?style=for-the-badge&logo=kaggle&logoColor=white)
![solar](static/solar.png)

# Outcomes Prediction of Regression and Classification Problems Based On a Machine Learning Model; Random Forest By Using R Programming for Solar Power Generation Dataset.
Trained Random Forest model using R programming language for two problems; regression and classification based on the solar power generation that was compiled by Ph.D. candidate Alexandra Constantin.

## Introduction
Solar power systems, also known as photovoltaic (PV) systems, are a popular choice for generating clean, renewable energy as they use solar panels to convert sunlight into electricity. These systems can be used for a variety of applications, making them an efficient and cost-effective source of electricity. In recent years, the development of solar power technology has been an active area of research and innovation, with efforts focused on improving the efficiency of solar power systems.

There are several factors that impact the efficiency of solar power systems, including the size and type of the system, the location and weather conditions, and the efficiency of the solar panels. The type and size of the solar power system are important considerations, as different systems are suited for different applications. For example, large systems may be more suitable for commercial or industrial applications, while small systems may be more suitable for residential use. The location and weather conditions also play a role in the efficiency of solar power systems, as the amount of sunlight received can vary significantly depending on the location and time of year. Finally, the efficiency of the solar panels themselves is an important factor, as more efficient panels can produce more electricity from the same amount of sunlight.

## Description
1. The first project's objectives is to identify the correlations between the available features and solar power generation: By analyzing the data and determining which factors have the most significant impact on solar power generation, the dataset can has a better understanding how to optimize the performance of a solar power system. The second project's objectives is to predict the output of a solar power system based on past performance: By using machine learning algorithms and historical data, a machine-learning model can be developed that accurately predicts the output of a solar power system based on various input parameters. This can help optimize the performance and efficiency of the system and make informed decisions about its operation and maintenance.
2. Based on the dataset description, the dataset is the output of a solar power system installed in Berkeley, California. The dataset also was compiled by a Ph.D. candidate, Alexandra Constantin.
3. The dataset contains13 continuous features, 3 categorical features, 2 type of targets; regression and classification. It has no duplicate data but has a lot of NaNs (which have been purposely dirty the dataset) and a lot of outliers from the dataset. The dataset can be downloaded from the link given in the credit section below.
4. For the regression problem, the target colum is 'Power Generated', while the target colum for the classification problem is 'Is Daylight' column.
5. By using only Random Forest model for both regression and classification, the model successfully achieved 93.4% and 99.0% accuracy respectively.
6. Methods that used to improve the model are by fine tuning the Random Forest model and removing the outliers. 

### Machine learning model link
[randomForest: Classification and Regression with Random Forest](https://www.rdocumentation.org/packages/randomForest/versions/4.7-1.1/topics/randomForest)

## Results

### Model score for regression:

![score_r](static/score_r.PNG)

### Model score for classification:

![score_c](static/score_c.PNG)

## Discussion
1. Based on the outcome of machine learning development and evaluation via Random Forest, the model is able to accurately predict the Power.Generated and Is.Daylight with accuracy score of 93% and 99% respectively for both regression and classification problem. In reference to the model evaluation, the model indicates very low MAE, RMSLE and RMSE (< 0.1) for regression problem and >0.99 for F1, AUC, Precision and Recall for classification problem. 
2. The adoption of Random Forest ifor both of regression and classification problem are considered successful in predicting the target output and can be used to improve the performance and efficiency of solar power systems in the future. 
3. This project documentation has been published in RPubs:
[Link for RPubs](https://rpubs.com/safwanshamsir/994854)

![rpubs](static/rpubs.PNG)

## Credits:
Shout out to Alexandra Constantin and Vipul Gote from Kaggle for the Solar Power Generation Dataset. Check out the dataset by clicking the link below. :smile:
### Dataset link
[Solar Power Generation Dataset](https://www.kaggle.com/datasets/vipulgote4/solar-power-generation?select=BigML_Dataset_5f50a4cc0d052e40e6000034.csv)
",0,0,1,0,solar-energy,"[caret, r, rpubs, rstudio, solar-energy]",00000
1133,solar-energy-app,sarahhsu,N/A,https://github.com/sarahhsu/solar-energy-app,https://api.github.com/repos/sarahhsu/solar-energy-app,Solar Energy App,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,[solar-energy],00000
1134,sununo_exporter,dvanderfaeillie,N/A,https://github.com/dvanderfaeillie/sununo_exporter,https://api.github.com/repos/dvanderfaeillie/sununo_exporter,Prometheus exporter for SAJ Sununo inverters,"# SAJ Sununo exporter #
A small Python script to export statistics of a SAJ Sununo solar inverter to a Prometheus server. 
Tested with a SAJ Sununo Plus 2K inverter and an attached WiFi module. Data is also exported to SAJ's [eSolar portal](https://fop.saj-electric.com) which kinda sucks... Using the following script takes back command of the data. Logging the date using Prometheus and graphing it using Grafana turns out to be easy!

The script outputs some metrics with the `saj` prefix (for easy retrieval) on port `9200`. The port can easily be changed in the python script. Note that `saj_device_running_state`-metric returns the following values:

    -1: Error        inverter is down (not enough light)
    0:  Undefined    'new' unknown state
    1:  Waiting      inverter is booting up/shutting down due to insufficient light
    2:  Normal       inverter is working normally
    
When the inverter is down all metrics but `saj_ac_output_power` are set to `NaN` to prevent `0` values from being graphed. The `saj_ac_output_power`-metric is set to `0` since that seems usefull for graphing and calculating averages and so on...

## Installation as systemd service ##
One needs `python3` (Although python2 would probably work as well) with the `requests` (installed by default) and `prometheus_client` libraries. 

To have it installed as root:
`sudo pip3 install prometheus_client`
Then clone the repo somewhere using
`git clone https://github.com/dvanderfaeillie/sununo_exporter.git`

You can test the script for errors using `/usr/bin/python3 INSTALL_DIR/sununo_exporter/sununo_exporter.py`. Use <kbd>CTRL</kbd>+<kbd>C</kbd> to end the script.

#### Systemd setup ####
I already had a node_exporter user which handles the other Prometheus exports on my system. The same user handles this script.
To add this user run: `sudo useradd --no-create-home --shell /bin/false node_exporter`.

Next make a `systemd` unit file
`sudo touch /etc/systemd/system/sununo-exporter.service`
and add the following:

    [Unit]
    Description=SAJ Sununo Exporter
    After=network-online.target

    [Service]
    User=node_exporter
    Group=node_exporter
    Type=simple
    ExecStart=/usr/bin/python3 INSTALL_DIR/sununo_exporter/sununo_exporter.py

    [Install]
    WantedBy=multi-user.target

If needed reload the `systemd-daemon` using `sudo systemctl daemon-reload`. All what is needed now is to start and enable the service using:
`sudo systemctl start sununo-exporter`. Check for errors using `sudo service sununo-exporter status`, and if all is well enable the service for auto-start using: `sudo systemctl enable sununo-exporter`.


## Prometheus setup ##
Add the following to your `prometheus.yaml` configuration file:

    - job_name: 'sununo'
      scrape_interval: 5s
      static_configs:
        - targets: ['ip:9200']

### status/status.php configuration ###
If a value is `65535` (which is the maximum of a `unsigned short int`) then this implies not applicable (N/A)

An example export might be the following:

    0   1,        Doesn't seem to mean anything...
    1   424257,   Total generated: 4242.57 kWh
    2   155335,   Total running time: 15533.5 h
    3   26,       Today generated:  0.26 kWh
    4   59,       Today running time: 5.9 h
    
    DC INPUT
    5   1008,     PV1 Voltage: 100.8V
    6   65535,    PV1 Current
    7   0,        PV2 Voltage
    8   65535,    PV2 Current
    9   65535,    PV3 Voltage
    10  65535,    PV3 Current
    
    AC OUTPUT
    11  638,      Grid-connected Power: 638W
    12  5000,     Grid-connected Frequency: 50.00Hz
    13  2369,     Line 1 Voltage: 236.9 V
    14  272,      Line 1 Current: 2.72A
    15  65535,    Line 2 Voltage
    16  65535,    Line 2 Current
    17  65535,    Line 3 Voltage
    18  65535,    Line 3 Current
    
    OTHER STATUS
    19  3675,     Bus Voltage: 367.5V
    20  344,      Device temperature: 34.4°C
    21  33304,    CO2 emission reduction: 3330.4 kg
    22  2         Running state, 1: Waiting, 2: Normal

## TODO ##
There are more statistics to be gathered from the solar inverters WiFi module. For example, the page `ip/info.php` containing firmware info can also be scraped.


### License ###
This project is licensed under the terms of the GNU General Public License v3.0.
",0,0,2,0,solar-energy,"[monitoring-scripts, prometheus, prometheus-exporter, solar-energy]",00000
1135,solva,shinyi-a,N/A,https://github.com/shinyi-a/solva,https://api.github.com/repos/shinyi-a/solva,Project management dashboard for multiple small project sites (solar PV system installation),"# [☀︎SOLVA](https://solva.vercel.app/) - A project management dashboard for SolarNova Project (Solar Photovoltaic (PV) System Installation)
## Preface
I was inspired to develop this project management dashboard from my time as a project engineer on [SolarNova](https://www.hdb.gov.sg/about-us/our-role/smart-and-sustainable-living/solarnova-page) the project. This dashboard is designed for projects with multiple small project sites, and based on the use case for the SolarNova project. It is able to track the different milestones dates, show overall completion graph, upload/download documents and for the Project Managers, able to know which project sites to prioritise at a glance.
</br>
#### Brief description of project:
Each project site is a HDB block, represented by a postal code.
</br>
Project lifecycle: 
Pending (not started yet) > Under construction > Ready for testing and commissioning > System turn on (project completion)

#### [View dashboard here](https://solva.vercel.app/)

## How to use
There are 3 different user roles and views for the dashboard – Admin, Project Manager and Auditor. The user matrix will be as follows: <br/>

![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/allusermatrix.jpg)

#### Logging in as Admin
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/admin.jpg)
- Admin can only view the dashboard as they are not in charge of the project.
- Admin can add a Project Manager user or an Auditor user.
- Admin can delete users.

#### Logging in as Project Manager
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/projectmanager.jpg)
- Project Managers are able to perform all the functions on the dashboard except for deleting other Project Manager type users.
- Project Managers are able to create blocks, update blocks and delete Auditor type users.

#### Logging in as Auditor
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/auditor.jpg)
- Auditor checks the testing and commissioning test reports as well as the as-built drawings of the turned on solar PV sites.
- Auditor will only be able to view the list of turned on blocks.
- Auditor is only able to download the test reports and as-built drawings.

## Features
#### - Log in page. Checks if you are already logged in previously, if yes, it will redirect you directly to the dashboard page. If you are a logged in Auditor, you will be redirected to the Turn On page.
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/login.jpg)
#### - Shows the overall progress of the project over a 1 year span. The months the graph is showing depends on the current month you are viewing it in.
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/graph.jpg)
#### - The app will check for the current logged in user and display the projects owned by the user. These projects shown on the home (dashboard) page are the ones that the users should prioritise. Admins and Auditors will not see this.
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/blocks.jpg)
#### - This page shows all the completed projects. This makes for the home page of the Auditors.
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/turnon.jpg)
#### - This is the detailed view of each project (HDB block)
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/cardview.jpg)
#### - This view is to update the project progress, only seen by the Project Managers (Staff)
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/update.jpg)
#### - Admin and Project Manager (Staff) roles can use this to manage the dashboard users.
![Alt Text](https://github.com/shinyi-a/readmeStorage/blob/main/solva/usermanagement.jpg)

## Technologies used

- Next.js
- MongoDB
- CSS
- axios
- Chart.js
- IPFS
- OneMap API
",0,0,1,0,solar-energy,"[axios, css, dashboard, ipfs, nextjs, onemap, onemapsg, project-management, solar, solar-energy, solarnova]",00000
1136,box-type-solar-cooker,rohankalbag,N/A,https://github.com/rohankalbag/box-type-solar-cooker,https://api.github.com/repos/rohankalbag/box-type-solar-cooker,Fundamentals of Energy Engineering - Spring Semester 2021 - Indian Institute of Technology Bombay ,"# Design and assembly of a fully functional box type solar cooker

Course Project - Fundamentals of Energy Engineering - EN 110 - Spring Semester 2020

## **Course Instructor - Prof S.B Kedare**

### Group Project by Rohan Rajesh Kalbag and Aabir Lal Biswas

- Designed and Assembled a fully functional Box Type Solar Cooker

- Wrote a program in Arduino IDE to monitor the temperature of the Box Type Solar Cooker using LM 35 Analog Temperature Sensor, plotted its heating curve using Python (matplotlib.pyplot library) and
calculated its steady state temperature.

- The code for that can be found here: <a href=""https://github.com/rohankalbag/Box-Type-Solar-Cooker-Design-Project/blob/main/Sensor.ino"">Arduino Code</a> and <a href=""https://github.com/rohankalbag/Box-Type-Solar-Cooker-Design-Project/blob/main/Graph%20Plotter.ipynb"">Python Code</a>

- The report can be found <a href=""https://github.com/rohankalbag/Box-Type-Solar-Cooker-Design-Project/blob/main/Solar%20Cooker%20Report.pdf"">here</a> 

- Calculated its performance parameters and First Figure of Merit F1
",0,0,1,0,solar-energy,"[arduino, python, solar-cooker, solar-energy]",00000
1137,JebSolarManager,Jebonicus,N/A,https://github.com/Jebonicus/JebSolarManager,https://api.github.com/repos/Jebonicus/JebSolarManager,"DIY Solar Net Metering Energy Storage System using Arduino ESP32. Cheap, efficient, flexible. ","﻿# JebSolarManager
DIY Solar Net Metering Energy Storage System. Cheap, efficient, flexible.

This repo holds the code for the ESP32 Arduino control/monitoring system. I have documented the whole project here too.

![v3 monitoring showing calculated power, grid consumption/export, target power/current to achieve net zero export](/images/jsm_v3.JPEG)

## Overview
New project for the year of 2022 is to get some Solar Power generation for my home in Manchester, UK.

My requirements are:
* **Grid tied.** As opposed to 'Off Grid', grid-tied systems can feed power into your house whilst it is also connected to the national grid
* **Batteries.** Peak solar generation happens when you need it the least. Mornings/evenings are when you need it. Batteries can help with this.
* **Integration.** Possible to integrate with [Home Assistant](https://www.home-assistant.io/) and get some nice monitoring/control
* **Variable Scale.** I wanted to start off small (2 panels on my Shed roof), then add to the system as funds allowed.
* **No Vendor Lock-in.** I hate that.

## Design Considerations
The basic architecture of a Solar PV ESS (Energy Storage System) is panels -> hybrid inverter <-> batteries & grid. Hybrid inverters manage the complicated process of charging the batteries and/or turning it into AC to feed into the house.

Hybrid Inverters are only one solution (DC Coupling) - another would be AC Coupling, where you turn the Solar DC into AC straight away. You then have some other kit physically separated that charges/discharges the batteries by converting AC<->DC. Either of these solutions is fine - they are each suitible for slightly different situations.

The magic happens in the Hybrid Inverter. There are a few brands on the market, such as:
* Solis
* SolaX (some good cheap low power options)
* SolarEdge
* Victron (great flexibility with the MultiPlus II, but SO expensive)
* SMA
* GivEnergy (know someone who has one and likes it)
* Growatt (good cheap ones)
* Fronius
* And some others

Most inverters you find tend to be 'off grid' - they generate sine wave AC, but they can't be connected to any other generation source (like the national grid) because they would be out of phase. This would cause flames fairly quickly!

Due to lockdowns and the ensuing supply/demand imbalances, all the Commercial Off The Shelf hardware has suddenly become extremely hard to purchase - you'll be lucky to find anywhere with stock, let alone any bargains! For my requirements, I'd really need to spend about £1000 or more. Batteries are can be anything from £500-£1000 **per Kilowatt-hour!!**, and the batteries all tend to be vendor-locked. The pay-back period (when it breaks even and pays for the initial outlay+maintenance) of these systems (when professionally installed) can be around 15+ years, or even never!

So I decided to take a heavily DIY-oriented approach (much to my wife's despair!).

After much research, I bought two 300W microinverters. My intention was to do 'AC Coupling'. However, I later changed my mind to DC coupling and ordered a 1000W normal grid-tie inverter plus a 'charge controller'. The brand I chose for the Charge Controller was Victron. I really love their philosophy of openness with their hardware/software - the make it easy to integrate any kit. You can change almost all settings via bluetooth, which I eventually hope to interface with via an Arduino. I was aware of their reputation for reliability and robustness as I had used some of their Maritime kit through work.

Net Metering is the name given to the problem of ensuring that your batteries+inverters don't just immediately drain in order to feed the grid. This isn't a problem in off-grid systems, because inverters naturally limit their output (and therefore also their battery input) depending on the demand of the load attached. However, when you're tied to the grid, the grid can absorb an almost unlimited amount of your stored energy. In fact you'd never even get to store any in the batteries, because it would all get instantly exported! The solution is the monitor how much energy is leaving your house in the direction of the grid. A CT-clamp energy monitor can monitor not only power consumption, but the **direction** of the current - so it can differentiate the incoming energy into the house (consumption), and the outgoing energy exported to the grid (production).

## Architecture

* 2 panels for my shed roof (Perlite 295W - selected due to smallest size 54-cell panel)
* Victron charge controller 100/20 48V
* 3x12V LiFePO4 batteries (30Ah each), which gives 1,152Wh of storage in total. (cheapest on eBay, within my requirements)
* Y&H 1000W Grid Tie Inverter (cheap eBay)
* Arduino ESP32-based control and monitoring
* Fibaro plug socket (ZWave RF control) as a 'master switch'
* Aeotec Gen5 ZWave Energy Monitor
* Home Assistant running on server (ZWave hub)

![System Architecture](/images/Architecture.png)

## Initial Testing and Assembly

I fitted the energy meter first. It requires wiring in -ideally, straight to the Consumer Unit. This ensures the measured voltage matches the incoming meter tails as closely as possible. CT Clamps only measure current (A) and direction - it must be multiplied by voltage (V) to get power (W), then integrated over time to get energy (kWh):

![Aeotec Gen5 Energy Meter](/images/aeotech_meter.JPEG)


Here's the info on the back of the panels:

![Panel Info](/images/panel.JPEG)

To save on cost, I fabricated my own mounting system from some angle brackets and nuts/bolts/washers:

![Bracket Parts](/images/bracket_parts.JPEG)

I used some roof sealant underneath and around the brackets to ensure water tightness:

![Bracket Parts](/images/bracket_installed.JPEG)

After this, I had a long wait (weeks) for the inverters and batteries to be delivered. Every delivery was late!

I constructed a quick and dirty battery tray to slide in under my workbench:

![Battery Tray](/images/battery_tray1.JPEG)
![Battery Tray - Installed](/images/battery_tray2.JPEG)

The Victron Charge Controller worked great when connected up to the batteries. It was more efficient at extracting power than my cheap Chinese inverters, and the batteries charged in no time even with fairly weak sun:

![Victron stats](/images/victron_1.PNG) ![Victron stats](/images/victron_2.PNG)


Here's a photo of the initial assembly (which doesn't work yet!):

![Initial assembly](/images/assembled_1.JPEG)

My main issue here was that I have no Net Metering yet. This was fine until I switched on the batteries and a massive inrush current trips the breakers and fries the 12A DC fuses in the micro-inverters! This was a major mistake. I connected the 300W microinverters (designed to only be connected to a <300W panel) directly to a very powerful current source with extremely low internal resistance, and, of course, it fried the inverters. Luckily I could just solder a new fuse onto the microinverters:

![Fixed Microinverter Fuses](/images/microinverter_fuse.jpeg)

With the new fuses I tried it again. The inverters ran ok this time, but their combined output was 620W - more than their rated capacity. And the batteries were draining fast. The power was all escaping out of the house into the grid!

So reluctantly I had to disconnect the batteries and the Victron Charge Controller. I connected the each of the panels to a Microinverter, and combined the AC output, which was then fed into the house by simply plugging in a standard 13A plug via the ZWave relay plug. Simple, but it works!

## Control Circuitry
Now began the main task - designing and building a monitoring & control circuit for my Net Zero requirement.

I decided to approach Net Metering by limiting the current that goes in to the inverter. When the inverter senses a current limitation via its MPPT algorithm, it will begin scaling back the voltage until it finds the optimal voltage/current. I was a bit worried this will produce some kind of oscillations, as often is the case when you have two competing control loops. Time will tell if this is the case!

My previous 'Go-To' Internet Of Things devices were either a Raspberry Pi or some sort of Arduino with Bluetooth, then a bluetooth dongle to a Pi/Server. I discovered to my horror that (due to lockdown supply chain woes) Raspberry Pis are now impossible to get hold of! There were none to be bought anywhere! I played with an old 'RedBearLabs Blend Micro' board I had (basically an Arduino Nano + Bluetooth) for a while, which worked fine but was very limited...the company had ceased to exist since I bought it in 2016.

Then I discovered the wonders of ESP32s. These amazing little boards have a powerful Arduino AND WiFi+Bluetooth. You can prototype on them simply by plugging them into USB - no need for any external wires etc, they don't even need to sit in a breadboard. Obviously as soon as you want to connect any peripherals to them, a breadboard becomes a necessity.

I bought an ADS1115 to perform 16-bit analogue-to-digital conversions. This is an awesome little board - it can do **differential** comparison, i.e. outputting the difference in voltage between two input pins. This is so insanely accurate (way better than a millivolt) compared to the native Arduino ground-referenced ADC. Interface is I2C.

I also bought a little 1.3"" 128x64 OLED I2C screen as an afterthought, and I was so glad I did - they were so easy to integrate.

The circuit would have two main functions - measurement/monitoring, and control (via current limiting)

### Measurements & Monitoring
Current measurement would be performed by a 50A 75mV shunt (using differential inputs A0+A1), connected to the 'low-side' (i.e. between the Load and Ground). Voltage was measured via differential pins A2+A3, connected to the +ve input, and Ground. A simple resistor network is needed to get the voltage into the correct range for the ADS1115.  

Here's the initial prototype:

![Prototype of power monitoring](/images/esp_1.JPEG)

And here it is in-situ (note that the Victron/batteries are now disconnected):

![Prototype of power monitoring - installed](/images/assembled_2.JPEG)


### Current Limiting
This circuit is not yet built. My intention is:
* Use one or more MOSFETs to vary the current that can pass. These will need to be beefy MOSFETS with nice chunky heatsinks, as they will be dissipating a lot of wasted energy (maybe 5-10 Watts).
* Drive the MOSFET gate using an Op Amp output (with feedback into the inverting input)
* Drive the Op Amp using a 0-3.3v analogue output from the ESP32 

## Software Overview

I set up an MQTT (Mosquitto) broker on my server, via Docker. This server also runs Home Assistant. I will use this nice lightweight publish/subscribe mechanism to get data to/from the ESP32.

### Algorithm
Here's a brief summary of the code contained in this repo.

#### Setup
* Initialise display
* Initialise ADS1115
* Connect to WiFi
* Initialise web server (only for debug purposes)
* Initialise MQTT + subscribe to inputs (grid consumption and previous cumulative energy)

#### Loop
* Perform measurements of volts + amps
* Calculate power and increment cumulative total of energy
* Calculate target power & target amps
* Apply an alpha smoothing filter (a.k.a exponential moving average, software low pass filter) to prevent sudden rapid changes
* Write target amps via DAC (Digital Analogue Conversion) to pin 25
* Every so often, update the OLED display 
* Every so often, publish readings/decisions to MQTT

#### Callback
* On MQTT topic update, read in new grid consumption

### Home Assistant Integration

Firstly, I created an Automation that triggers whenever the Aeotec Energy Meter updates the current power consumption to/from the grid. This simply forwards the value to an MQTT topic.

Then, I created a sensors.yaml file to map the MQTT topics output by the ESP32 into Entities. In HASS, every input is either an 'event' or an 'entity'. Entities can have states, which can be primitive values. (OK - that is a simplification and not quite correct, but it'll do for now). 

sensors.yaml:
```
- platform: mqtt
  name: ""JSM Volts""
  state_topic: ""jsm/volts""
  unit_of_measurement: 'V'
  device_class: voltage
  state_class: measurement

- platform: mqtt
  name: ""JSM Amps""
  state_topic: ""jsm/amps""
  unit_of_measurement: 'A'
  device_class: current
  state_class: measurement

- platform: mqtt
  name: ""JSM Power""
  state_topic: ""jsm/power""
  unit_of_measurement: 'W'
  device_class: power
  state_class: measurement

- platform: mqtt
  name: ""JSM Energy""
  state_topic: ""jsm/energy""
  unit_of_measurement: 'kWh'
  state_class: total_increasing
  device_class: energy
```


You can see here that at the time of screeshot, I was exporting a small amount of power to the grid (the negative sign on consumption shows this):

![HASS Dashboard showing readouts](/images/hass_export.PNG)

Then, I updated my energy summary dashboard to include these new entities. HASS has a great inbuilt Energy dashboard with some fancy animations for solar/grid usage. It even integrates with an online forecasting API that uses your lat/lon, the panel azimuth/elevation, etc to predict generation throughout the day.

This is a screenshot from the very first day I tried the monitoring software. As you can see, I underperformed the forecast quite significantly! The weather suddenly turned cloudy in the afternoon though.

![HASS Energy Dashboard](/images/hass_energy_dashboard.PNG)

## Current Situation
I've not yet done the current limiting circuit. Original architecture is not implemented - batteries/victron are disconnected.

v0.3 software currently deployed, and it does a great job of monitoring.

## Future goals

* Battery monitoring
* Interface to Victron, either by Bluetooth or VE Direct (2 or 4 pin serial-like interface, open interface)
* Get LOTS more solar panels
* Try the Victron MultiPlus II inverter - it does basically everything I want, but costs ~£1,000.
* Buy or Build a *large* battery pack. Depending on panels/inverters (and funds!), I'd go up to 10kWh of storage.


## Useful Links
[ESP-WROOM-32 Pinout](https://lastminuteengineers.com/esp32-pinout-reference/)
[Reading a Current Shunt with an Arduino](https://learnarduinonow.com/2015/05/11/reading-current-shunt-with-arduino.html)
[Victron SmartSolar 100/20 Manual](https://www.victronenergy.com/upload/documents/Manual_SmartSolar_MPPT_75-10_up_to_100-20/MPPT_solar_charger_manual-en.pdf)
[Victron VE Direct Protocol FAQ](https://www.victronenergy.com/live/vedirect_protocol:faq)",0,0,1,0,solar-energy,"[esp32-arduino, solar-energy]",00000
1138,Solar-Energy-Project_Arduino,GustavoHenriqueSchmitz,N/A,https://github.com/GustavoHenriqueSchmitz/Solar-Energy-Project_Arduino,https://api.github.com/repos/GustavoHenriqueSchmitz/Solar-Energy-Project_Arduino,"It`s a school project, where we are creating a model of solar energy generation, using arduino for some automations.","# Solar Energy Project With Arduino

It`s a school project, where we are creating a model of solar energy generation, using arduino for some automations.
The arduino control a system that according the ambient light, move the solar boards and turn on or turn off the leds.
",0,0,2,0,solar-energy,"[arduino, solar-energy]",00000
1139,Solar_Power_Output_Time_Series,aokdata,N/A,https://github.com/aokdata/Solar_Power_Output_Time_Series,https://api.github.com/repos/aokdata/Solar_Power_Output_Time_Series,Univariate time series analysis and modeling project of solar power output in the United States. ,"# U.S. Solar Power Output Time Series Analysis and Forecasting
Aidan O'Keefe

<img width=""921"" alt=""Stock_Solar_Panels"" src=""https://user-images.githubusercontent.com/120589094/228377991-11ed5604-4bb3-4fc4-a275-21271304ed66.png"">
*Image provided by Freepik*

# Overview
Univariate time series analysis and modeling project of solar power output in the United States.

# Business Overview
The North American Electric Reliability Corporation (NERC) regulates the electrical grid in the United States, Canada, and the northern part of Baja California, Mexico. They want to know how much power to expect from renewable sources so they can better prepare for power output variability. NERC has asked us to try to forecast solar output in order to help them manage the US grid better.

# Data Overview
Data for this project was taken from the U.S. Energy Information Administration's Electricy Data Browser. The data has monthly frequency from Jan 2001 to Dec 2022 of solar output in thousand megawatthours. Each row is a location with power output grouped by individual state, region, and US Total.

Upon exploring the data, there is obvious seasonality with more solar power being produced in the summer months.
![US Monthly Solar Output by Year](https://user-images.githubusercontent.com/120589094/228961427-3023b549-5c64-4a1b-a24c-751a5b6382be.png)

# Methods Overview
To preprocess the data, I turned our raw csv into a datetime indexed dataframe of only Total US Solar Power Output. After trying to use rolling statistics, differencing and other transformations, I successfully stationarized the timeseries data using time series decomposition and confirmed stationarity using the Augmented Dickey-Fuller Test. I implemented a Naive model, a variety of SARIMAX/ARIMA models (including parameter search), and a Facebook Prophet model.

# Evaluation Overview
An ARIMA (4,0,1) model was chosen as the final model based on it's AIC and RMSE. On test data, the final model had a RMSE of 0.033 thousand megawatthours and a MAPE of 2.32%. We then forecasted US Solar output 12 months out using our final ARIMA(4,0,1) model (as well as the FB Prophet model for comparison).

## Test- ARIMA(4,0,1)
![ARIMA401_Test](https://user-images.githubusercontent.com/120589094/228961206-6b0d5a76-f8ac-4b17-a872-e1ddfe378fe1.png)

## Forecast- ARIMA(4,0,1)
![ARIMA401_Solar_Predictions](https://user-images.githubusercontent.com/120589094/228961073-a4288d5b-e99b-43f6-ad79-480df491f146.png)


# Recommendations
I would recommend that NERC create a forecast to predict solar power supply and avoid blackouts/grid failure caused by under and overproduction. The NERC can then prepare plan to meet seasonal supply and demand in conjunction with other energy sources.

# Next Steps
I would testing this forecast in the next year and calculating errors to see if the model is accurate enough to be helpful moving forwad. I would also add in data on the number on power plants as well as environmental factors (weather, solar irradiation) so the model accounts for more external factors. In the future, I would look to repeat this time series modeling and forecasting at the regional and state level in order to provide more actionable data.







## Repository Structure
├── [data](https://github.com/aokdata/Solar_Power_Output_Time_Series/tree/main/data)<br>
├── [.gitignore](https://github.com/aokdata/Solar_Power_Output_Time_Series/blob/main/.gitignore) <br>
├── [README.md](https://github.com/aokdata/Solar_Power_Output_Time_Series/blob/main/README.md)<br>
├── [Solar_Power_Output_Time_Series_Notebook.ipynb](https://github.com/aokdata/Solar_Power_Output_Time_Series/blob/main/Solar_Power_Output_Time_Series_Notebook.ipynb) <br>
└── [presentation.pdf](https://github.com/aokdata/Solar_Power_Output_Time_Series/blob/main/presentation.pdf) <br>
",0,0,2,0,solar-energy,"[arima, prophet-model, sarimax, solar-energy, time-series]",00000
1140,Solar_Powered_Surveillance_Robot,Dh1A,N/A,https://github.com/Dh1A/Solar_Powered_Surveillance_Robot,https://api.github.com/repos/Dh1A/Solar_Powered_Surveillance_Robot,Solar powered surveillence Robot,"# Solar_Powered_Surveillance_Robot

![img_3988](https://user-images.githubusercontent.com/26909261/29425199-4f5e29ce-837a-11e7-97ce-566289ad2b4a.JPG)
The idea of ​​this project is new, in fact we propose to realize a surveillance robot
Capable of making a permanent video surveillance, controlled remotely from
Anywhere, and most importantly, renewable energy will be
The importance of this energy and especially the solar energy, it is simple to design this robot
With rechargeable batteries via a solar panel. Indeed, we want to keep a rhythm of
Permanent operation, allowing the robot to be operated as long as possible without
That there is no need to stop to charge its batteries from a power source.
",0,0,0,0,solar-energy,"[arduino, batteries, bluetooth, energy, robot, robotics, solar-energy]",00000
1141,belenus,kglavin,N/A,https://github.com/kglavin/belenus,https://api.github.com/repos/kglavin/belenus,"Belenus (the celtic sun god) provides a closed loop solar capture, solar time shifting, energy storage and un-interrupted run use case.","# Belenus 
Belenus (the celtic sun god)  provides a closed loop solar capture, solar time shifting, energy storage and un-interrupted run use case. 

## System Context
![alt text](documentation/diagrams/SystemContext_1.png ""System Context"")
As shown in the context diagram, the system consists of a number of distinct components and interconnections. 
* Solar Panels capturing solar energy.
* Maximium Power Point Tracking(MPPT) Solar Charge Controller
* Lithium Iron Phosphate Battery and accompanying Battery Management System(BMS)
* Electrical Grid power 
* Inverter/Battery Charger/AC Passthrough
* AC loads comsuming power

The Solar Panels/Charge Controller harvests solar energy used to charge the battery or if the battery is a 100% state of charge, feeds the inverter to power the AC loads.

The AC passthrough function may (if Electrical grid power is availalbe) feed this power to the AC loads without using any of the stored battery power.

The AC charger function may ( if Electrical grid power is available) charge the battery. 

## Monitoring
![alt text](documentation/diagrams/SystemContext_2.png ""System Monitoring Context"")
A monitoring system captures telemery or measurements of power generation, usage and storage at various points in the system. These measurements are used to provide real time monitoring dashboards and also are an input into the control functionality of the system.
The monitoring capabilities include:
* Telemetry from the MPPT charge controller that provides solar power generation metrics.
* Data from the BMS, which provides battery characteristics such as charge/discharge state, state of charge, battery voltage, current sink or draw.
* Invertor/Charger/Passthrough operating metrics 
* Non invasive coil based measurement of AC circuits providing Voltage, Power, Frequency metrics.

## Control
![alt text](documentation/diagrams/SystemContext_3.png ""System Control Context"")
Currently a single control point is provided in the form of an intelligent AC switch which allows for the engagement or disengagement of the Electrical grid power. With this switch it is possible to switch to using the stored battery power to feed the AC loads instead of the Grid power, this allowing for time shifting of power harvested either through solar capture or stored at a time of day with the cheaper time of day.

## Dashboard
![alt text](documentation/diagrams/dashboard-3hour.png ""Graphana Dashboard"")
Sensor data from the monitoring processes is stored in an influxdb timeseries databased and is then presented using the graphana dashboarding system. 
In the first Dashboard we see operation for the last three hours. The board presents the key instaneous and historic operating metrics. These include 
* The last measured (instaneous) values for battery voltage and current as measured. Power calculations indicating the power either being provided from the battery or being injected (as charging) into the battery. 
* battery state of charge.
* operating parameters (voltage, current, power) for the solar array and solar charge controller. 
* daily and cumulative yield figures 

![alt text](documentation/diagrams/dashboard-7day.png ""7 day Graphana Dashboard"")
The 7 day timescale on the dashboard shows the operating cycle of the system where the system has been charging during daytime/sunlight hours and then using that energy (currently by manual operation of AC power switch) when the battery has reached 100% state of charge or by configured control of the AC power switch from 4pm to 9pm ( future high cost time of date cost period from utility provider)",0,0,1,0,solar-energy,"[energy, monitoring, solar-energy, vedirect, victron]",00000
1142,solar-monitor,mattrude,N/A,https://github.com/mattrude/solar-monitor,https://api.github.com/repos/mattrude/solar-monitor,A simple solution to prevent a solar powered LoRaWAN gateway from going into brownout when the batteries drop in voltage.,"# Solar Monitor

A simple solution to prevent a solar powered LoRaWAN gateway from going into brownout when the batteries drop in voltages.

## The Backstory

I have a solar powered [Raspberry Pi](https://www.raspberrypi.org/) + [RAK2245](https://store.rakwireless.com/products/rak2245-pi-hat) + [RAK2013](https://store.rakwireless.com/products/rak2013-cellular-pi-hat) that has a problem where when it gets cold out, the batteries don't have the Amps to power the gateway when the sun comes up.  This puts the gateway into a brownout state where the cellular module disconnects and will not reconnect until the system is rebooted.

I have learned that a few minutes delay will resolve this issue, allow the batteries to charge and the system to boot correctly.  This project is an attempt to automate this task.

## Theory of Operation

When the voltage drops below about 3 volts, the `MCP102-300E/TO` will sit it's pin 2 `LOW`, once the voltages has stablized above 3 volts for more then 120 ms, pin 2 goes `HIGH`.

The `PIC16F15214-I/P` microcontroller reads the input from pin 2 on the `MCP102-300E/TO` (via pin 2 [INT] on the microcontroller) and set pin 0 `LOW`.  When microcontroller pin 0 is `LOW`, the `PN2222A` disables the power to the output pins of the board.

## Software

* [KiCad EDA](https://www.kicad.org/) - Version 6.0.2 - The Schematic & Board softare
* [MPLAB X IDE](https://www.microchip.com/en-us/tools-resources/develop/mplab-x-ide) - Version 6.0.0 - Software used to build the C code
  * [XC8](https://www.microchip.com/en-us/tools-resources/develop/mplab-xc-compilers) - Version 2.32 - The C compiler (A part of MPLAB X IDE)

## Hardware (BOM)


| **Identifier** | **Qty** | **Part #**      | **Description**    | **DigiKey**                                                                                                                      |
|:--------------:|:-------:|-----------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------|
|       U1       | 1       | PIC16F15214-I/P | Microcontroller    | [150-PIC16F15214-I/P-ND](https://www.digikey.com/en/products/detail/microchip-technology/PIC16F15214-I-P/12807471)               |
|       Q1       | 1       | PN2222A         | Transistor         | [PN2222AFS-ND](https://www.digikey.com/en/products/detail/onsemi/PN2222ABU/6534)                                                 |
|       Q2       | 1       | MCP102-300E/TO  | Voltage Supervisor | [MCP102-300E/TO-ND](https://www.digikey.com/en/products/detail/microchip-technology/MCP102-300E-TO/716307)                       |
|       C1       | 1       | 10pF            | Ceramic Capacitor  | [K100K15C0GF53L2-ND](https://www.digikey.com/en/products/detail/vishay-beyschlag-draloric-bc-components/K100K15C0GF53L2/2820158) |
|       D1       | 1       | 1N914           | Diode              | [1N914FS-ND](https://www.digikey.com/en/products/detail/onsemi/1N914/978749)                                                     |
|       RV1      | 1       | PV36W103C01B00  | 10K Ohm Trimmer    | [490-2875-ND](https://www.digikey.com/en/products/detail/bourns-inc/PV36W103C01B00/666502)                                       |
|       SW1      | 1       | 1825910-6       | Push Button - 6mm  | [450-1650-ND](https://www.digikey.com/en/products/detail/te-connectivity-alcoswitch-switches/1825910-6/1632536)          |

## Schematic

![Schematic Rev-B](Documentation/Schematic_RevB.PNG)

## Board

**The Top of the Board**
![Board Top Rev-A](Documentation/Board_Top_RevB.PNG)

**The Bottom of the Board**
![Board Bottom Rev-A](Documentation/Board_Bottom_RevB.PNG)
",0,0,1,0,solar-energy,"[mplab, mplabx, pcb, pic16, pic16f15214, solar-energy, solar-system]",00000
1143,Solar-Potential-Technical-Guide,Einavg7,N/A,https://github.com/Einavg7/Solar-Potential-Technical-Guide,https://api.github.com/repos/Einavg7/Solar-Potential-Technical-Guide,This repository contains the main code for the technical guide created as part of the thesis - 'Estimating Building Rooftop Solar Potential in a City from a Developing Country'. ,"## Technical Guide for Estimating Building Rooftop Solar Potential in a City

This guide introduces a step by step approach to map building rooftop solar potential in a city.  
The guide is intended for the use of city planners, infrastructure managers, and city data analysts. With the outputs of this guide, decision makers can make informed decisions to advance the implementation of sustainable and renewable energy solutions in their city.

The guide was created using [R Bookdown](https://bookdown.org/home/), and is hosted with [RStudio Connect](https://docs.rstudio.com/connect/user/).

The **Technical Guide**: https://www.bookdown.org/einavg7/sp_technical_guide/

",0,0,2,0,solar-energy,"[bookdown, guide, solar-energy]",00000
1144,solar-controller,nmasse-itix,N/A,https://github.com/nmasse-itix/solar-controller,https://api.github.com/repos/nmasse-itix/solar-controller,ESP32 firmware to control a thermal solar installation,"# Solar Controller

## System commands

### 1. Enable heating

```sh
echo -n '{""command"": ""set-parameter"", ""args"": { ""name"": ""heating_enabled"", ""value"": 1}}' | pub -broker ssl://mqtt.broker.name:443 -topic 'solar-controller/command' -username solar-controller -password secret -qos 1
```

## License

MIT
",0,0,2,0,solar-energy,"[esp32, esp32-idf, espressif, solar-energy]",00000
1145,sma2mqtt,vindolin,N/A,https://github.com/vindolin/sma2mqtt,https://api.github.com/repos/vindolin/sma2mqtt,Command line tool that listens to the multicast Speedwire of a SMA Energy Meter/Home Manger 2.0 and writes the values to a MQTT server.,"# sma2mqtt

Command line tool that listens to the multicast Speedwire of a SMA Energy Meter/Home Manger 2.0 and writes the values to a MQTT server.

I'm using this in my home to read the power consumption/generation from a SMA Home Manager 2.0.


Use at your own risk.



Install:
--------
```bash
pip install sma2mqtt
```

```bash
sma2mqtt --help
```

```
usage: sma2mqtt [-h] [--topic TOPIC] [--mqtt_client_id MQTT_CLIENT_ID]
                     [--mqtt_address MQTT_ADDRESS]
                     [--mqtt_port MQTT_PORT] [--mqtt_username MQTT_USERNAME]
                     [--mqtt_password MQTT_PASSWORD] [--just_print] [--dump_data]
                     [--serial_nr] [--force_print_serial] [--print_offsets]

Command line tool that listens to the multicast Speedwire of a SMA Energy Meter/Home Manger 2.0 and writes the values to a MQTT server.

optional arguments:
  -h, --help            show this help message and exit
  --topic TOPIC         Topic for the MQTT message. (default: sma)
  --mqtt_client_id MQTT_CLIENT_ID
                        Distinct client ID for the MQTT connection. (default: sma2mqtt)
  --mqtt_address MQTT_ADDRESS
                        Address for the MQTT connection. (default: localhost)
  --mqtt_port MQTT_PORT
                        Port for the MQTT connection. (default: 1883)
  --mqtt_username MQTT_USERNAME
                        User name for the MQTT connection. (default: None)
  --mqtt_password MQTT_PASSWORD
                        Password name for the MQTT connection. (default: None)
  --just_print
                        Don't connect to MQTT and just print the values.
  --dump_data
                        Write the binary datagram to {TMP}/sma_dump.bin.
  --serial_nr
                        Only watch packets for this serial number.
  --force_print_serial
                        Print the serial number, even if only one was found.
  --print_offsets
                        Print the offsets where the patterns were found.
```
",0,0,1,0,solar-energy,"[mqtt, sma, solar-energy]",00000
1146,marcos,Wess58,N/A,https://github.com/Wess58/marcos,https://api.github.com/repos/Wess58/marcos,,"# Marcos

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 12.0.0.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.
",0,0,2,0,solar-energy,"[ict, solar, solar-energy]",00000
1147,pv-estimate,mattburnett-repo,N/A,https://github.com/mattburnett-repo/pv-estimate,https://api.github.com/repos/mattburnett-repo/pv-estimate,A small AWS proof-of-concept project that retrieves photovoltaic electricity production (solar panels) estimates from a third-party API,"![repo header](images/header.png?raw=true 'Photovoltaic Estimate')

# Photovoltaic Estimate

This is a small, proof-of-concept project that retrieves photovoltaic electricity production estimates from a third-party API located [here](https://api.forecast.solar/estimate/52/12/37/0/5.67). Its purpose is to demonstrate how to use several common AWS services to request data from a third-party API, then process the returned data and return the processed results to a client app.

The project is [hosted on AWS S3](http://pv-estimate.s3-website.eu-north-1.amazonaws.com/).

This project implements an AWS-based version of an Express/Typescript/React stand-alone app located [here](https://github.com/mattburnett-repo/generic_code_challenge_02).

The provided functionality is very minimal:

- The React app is stored as a static asset in AWS S3.
- The React app sends a request to an AWS API Gateway endpoint.
- The API Gateway endpoint sends a request via an AWS Lambda function to a [third-party API](https://api.forecast.solar/estimate/52/12/37/0/5.67).
- The third-party API returns raw estimate data to the AWS API Gateway / Lambda function.
- The AWS API Gateway parses and reformats the raw estimate data using an AWS Lambda function, and returns it to the React app.
- The React app displays the parsed and formatted data to the user.

## Tech Stack

- React
- AWS
  - S3 Static Website Hosting
  - API Gateway
  - Lambda
  - IAM
- Third-party external API

## Dev Notes

This repo does not provide a 'ready to run' application, meaning that you can't follow the standard process of cloning / installing / running the code.

This repo is simply a place to archive the assets for the project.

To recreate the project you will need to:

- Build the React app
- Upload the build to an AWS S3 bucket.
- Set up an AWS API Gateway endpoint.
- Create AWS Lambda functions based on the folders in the 'backend/lambdaFunctions' folder.
- Copy the AWS Lambda functions code to their respective folders.
- Confiigure all of the required permissions in AWS IAM.

## To Do

- To Do items are listed in the repo's ['Issues'](https://github.com/mattburnett-repo/pv-estimate/issues) section.
",0,0,1,3,solar-energy,"[api-gateway, aws, iam, lambda-functions, react, s3, solar-energy, third-party-api]",00000
1148,Arduino_solar_track,grebano,N/A,https://github.com/grebano/Arduino_solar_track,https://api.github.com/repos/grebano/Arduino_solar_track,Diy project that involves the realization of an automatic sun tracker panel,"![Intro](/Photos/Uno_SunTracker.png)
# Arduino_solar_track
A self orienting solar panel that is able to track the sunlight.

Link to Tinkercad project: [Solar tracker](https://www.tinkercad.com/things/gveaNrLVcNt-solartrackarduino)

## Code
The [code](Arduino_Solar_Tracker2.ino) for this project is written in C++. It is provided in a .ino file, which can be opened in the arduino IDE. Just download the relevant libraries and it should work right out of the box.

If you would like to use a different IDE (like PlatformIO in VSCode for instance) you will just need to add:
```
#include <Arduino.h>
```
at the top of the file.

## Materials
<div align=""center"">

| Part      | Quantity | Notes| 
| :-------------- | :---: | :------ |
| Arduino Uno | 1 | You can use any arduino with analog inputs |
| Photoresistors | 4 | Consider their resistance |
| Wires    | a lot | Create freely your wire nest |
| 1 Kohm resistor  | 4 | Resistors used in order to create a voltage divider with photoresistors | 
| LED  | 1 | I used 1 Led to visualize if the motors are on or off | 
| potentiometers | 4 | Used only in the real device in order to calibrate resistors and get the same values |
| Servo Motors   | 2 | One for vertical axis and one for horizontal axis |
| Switch  | 1 | I used a switch to manually power off the device |
| Breadboard  | 1 | Useful for easy and rapid wiring |
</div>

## Circuit:
Pdf and jpg schematics are available here: [Circuit](/Circuit)

![alt text](https://github.com/grebano/Arduino_solar_track/blob/main/Circuit/Solar_track_circuit.jpg?raw=true)
",0,0,1,0,solar-energy,"[arduino, cpp, diy, diy-electronics, servo-motor, solar, solar-energy]",00000
1149,solar-energy-efficiency,muskan-setiya,N/A,https://github.com/muskan-setiya/solar-energy-efficiency,https://api.github.com/repos/muskan-setiya/solar-energy-efficiency,,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,solar-energy,"[data-analysis, data-visualization, elasticnet-regression, hyperparameter-tuning, polynomial-regression, random-forest-regression, randomizedsearchcv, solar-energy]",00000
1150,Domoticz-Solax-plugin,saidlm,N/A,https://github.com/saidlm/Domoticz-Solax-plugin,https://api.github.com/repos/saidlm/Domoticz-Solax-plugin,Plugin to monitor and control Solax inverter from Domoticz via ModBUS over TCP/IP,"# Domoticz-Solax-plugin
It is developed to be able to monitor and control Solax inverter from Domoticz software via ModBUS over TCP/IP. Current version is read only. It means that there is no possibility to change configuration or changes behavior of the inverter. 
All the information which are collected by default version are visible on pictures below.

### Utility tab

![Utility tab](images/Domoticz-Solax_1.png)

### Temperature tab

![Temperature tab](images/Domoticz-Solax_2.png)

### Switches tab

![Switches tab](images/Domoticz-Solax_3.png)

## Prerequsities
* Running Domoticz software
* The installation of additional python3 library – pymodbus is necessary.
```
sudo pip3 install -U pymodbus
```
The plugin was tested with Domoticz version 2023.2 and pymodbus 3.5.2

## Installation
* Place the folder inside Domoticz plugin folder e.g. :
```
/home/domoticz/plugin/Solax
```
* Copy plugin.py from repository folder to the folder created in previous step.
* Restart Domoticz.
```
sudo service domoticz.sh restart
```
or
```
docker restart domoticz
```
The exact command depends on your instalation.

## Configuration
![Hardware configuration](images/Domoticz-Solax_4.png)
",0,0,1,0,solar-energy,"[domoticz, domoticz-plugin, home-automation, modbus, modbus-tcp, solar, solar-energy, solar-system, solax, solax-inverter]",00000
1151,open-sustainable-technology,protontypes,N/A,N/A,https://api.github.com/repos/protontypes/open-sustainable-technology,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12D:7B5B:70FD35:E8F67B:65224073.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1152,awesome-earth,philsturgeon,N/A,https://github.com/philsturgeon/awesome-earth,https://api.github.com/repos/philsturgeon/awesome-earth,"""What can I do about the climate crisis?"" Here are 326 things you can do.","# Awesome Earth ![Ecologi (Carbon Offset)](https://img.shields.io/ecologi/carbon/philsturgeon) ![Ecologi (Trees)](https://img.shields.io/ecologi/trees/philsturgeon) [![Awesome](https://awesome.re/badge.svg)](https://awesome.re) <!-- omit in toc -->

The world is simultaneously underwater and on fire, and people want to know what they can do about it. Let's share resources, services, products and ideas you can use to stop kicking the planet in the face.

## Contents<!-- omit in toc -->

<!-- links:start -->
- [Carbon Reduction](#carbon-reduction)
- [Clothing](#clothing)
- [Consumer Products](#consumer-products)
- [Cooking](#cooking)
- [Documentaries](#documentaries)
- [Finance](#finance)
- [Food](#food)
- [Footprint Calculators](#footprint-calculators)
- [Home Improvements](#home-improvements)
- [Hygiene](#hygiene)
- [Jobs](#jobs)
- [Land Management](#land-management)
- [News](#news)
- [Other Services](#other-services)
- [Podcasts](#podcasts)
- [Politics](#politics)
- [Reforestation](#reforestation)
- [Renewable Energy](#renewable-energy)
- [Transportation](#transportation)
- [Travel](#travel)
- [Volunteering](#volunteering)
- [Waste](#waste)
- [YouTube Channels](#youtube-channels)
- [Zero Waste](#zero-waste)
## Carbon Reduction
- [1% for the Planet](https://www.onepercentfortheplanet.org/) - A membership program for businesses and individuals, allowing them to donate 1% of their gross yearly profits or salary back to environmental nonprofits to create a healthier planet.

- [Beam](https://www.beamproject.co/) - Make small automatic donations while you shop online, to support the cleantech startups trying to change the world. Clean Tech investment money has dried up over the years, so crowdsourcing is becoming the only option for many, and with a Chrome extension you can chuck in a dollar when you're buying other stuff.
- [Better Future Faster](https://betterfuturefaster.org/) - Breaks the climate problem into 4 pillars, lays out explicit actions required for each and allows businesses and policy makers to commit to these actions.

- [Brighter Planet CM1](http://impact.brighterplanet.com/) - Brighter Planet offers a free, simple API allowing you to calculate the carbon generated by almost any activity - transport, energy, shopping and more.
- [Carbon Pricing Dashboard](https://carbonpricingdashboard.worldbank.org/) - Maps and statistics on regional, national, and subnational carbon pricing initiatives.

- [Climate Action Tracker](https://climateactiontracker.org/countries/) - See which countries are on track for the Paris Agreement or similar, and which countries are failing horribly. Hint: it's everyone but Morocco and The Gambia.

- [ClimateWorks](https://www.climateworks.org/) - An NGO partnering with philanthropists to tackle the climate crisis. They seek to ensure investments have the maximum impact.

- [Climworks](http://climeworkspioneers.refr.cc/philsturgeon) - Climeworks Direct Air Capture technology captures CO₂ from air, mixes the CO₂ with water used by a geothermal energy plant, then pumps it deep underground. Through natural processes, the CO₂ reacts with the basaltic rock – and turns into stone within a few years, permanently and safely. Iceland is one of several locations around the world that provide ideal conditions for our pioneering process. Subscribe monthly to offset a little bit of your footprint, and support the growth of this early stage technology.
- [Cool Earth](https://www.coolearth.org/) - This charity was created to tackle climate change by reducing carbon emissions from rainforest loss.
- [Ecologi](https://ecologi.com/?r=5d01f2ed12ae7a358b75fdd7) - Help the planet from your sofa, for less than a cheap bottle of wine per month. Watch your own forest come to life and offset your entire footprint for $6.50/€6 per-month. Then get your friends, family, business, and even your dog signed up!
- [Ecosia](https://www.ecosia.org) - The search engine that plants trees. >50% of the ad revenue goes directly to planting trees.
- [Flight Free (UK)](https://flightfree.co.uk/) - Aviation is the fastest growing contributor to greenhouse gas emissions at a time when we desperately need to reduce them. Pledge to go flight free in 2020.
- [Flight Free (USA)](https://flightfreeusa.org/) - A grassroots campaign which asks people to agree not to fly in the year of 2020 – on condition that 100,000 others will also pledge to do the same.
- [Future Earth](https://futureearth.org/) - Future Earth is a global research programme designed to provide the knowledge needed to support transformations towards sustainability. They focus on systems-based approaches, seeking to deepen the understanding of complex Earth systems and human dynamics across different disciplines.

- [Giki](https://gikibadges.com/) - The Giki app provides accessible, independent, transparent information to help people change habits to live more sustainably. Our 14 badges cover sustainability, health and fairness.
- [Gold Standard](https://www.goldstandard.org/take-action/offset-your-emissions) - Offset carbon emissions by purchasing verified carbon credits from a variety of certified, environmentally friendly projects.
- [Google Cloud Computing](https://cloud.google.com/sustainability/) - Google are a long way from perfect, but Google Cloud advertises 100% renewable energy. They don't _just_ offset, they actually reduce the electricity usage too, and ""strive to build the world’s most energy-efficient computing network by squeezing more out of every watt of power we consume."" Their main rival, Amazon AWS, does not do that, and actively hosts oil and gas companies, who use the platform to find more places to dig. Switching to Google Cloud (or a host who in turn is on Google Cloud), is one of many ways to make your platform have less impact on the earth.
- [Green-E Carbon Offsets](https://www.green-e.org/certified-resources/carbon-offsets) - Green-e Climate is an excellent resource for carbon offsets. The organization holds retailers accountable by monitoring how offsets are transacted and advertised in the retail market, protecting both the buyer and the seller.
- [GreenMovi](https://www.greenmovi.com.br) - Earn discount coupons anytime, just download the app available for Android and iOS platforms, register, and use it every time you use a non-polluting means of transport and be rewarded with Carb Points.
- [Mijn Impact](https://www.mijnimpact.app/) - Discover the effect of your choices. The app that provides easy insight into the CO2 impact of your purchases - and challenges you to reduce your impact with personal goals.
- [No Meat Today](https://nomeat.today/) - Your companion to eat less meat. It's good for you and the planet, but let's be honest, eating less meat is hard. Don't do it alone!
- [Patch](https://www.usepatch.com) - Patch is the API for negative emissions. Developers can use Patch's API to make any transaction carbon neutral with a wide range of negative emission methods (e.g. direct air carbon capture, bio-oil geosequestration, enhanced weathering, reforestation and more).
- [Possible](https://www.wearepossible.org/) - Combining individual and local actions with larger systemic change, we face our climate dread with a can-do attitude and sense of fun. Possible are tackling the climate crisis by inspiring people to act in 5 key areas - eat & buy, travel, energy, nature and talking.

- [Project Wren](https://projectwren.com/) - Project Wren are a startup offering a web based, monthly subscription model for offsetting emissions. They also allow for offsetting of flights.
- [Restons Les Pieds Sur Terre](https://www.facebook.com/restonslespiedssurterre/) - Aviation is the fastest growing contributor to greenhouse gas emissions at a time when we desperately need to reduce them. Pledge to go flight free in 2020.
- [The National Grid ESO](https://www.nationalgrideso.com/news/introducing-our-carbon-intensity-app) - Monitor the generation types that make up your electricity supply and see when the cleanest time to use electricity will be. See the carbon impact level of electricity generation, how your region compares to others in the UK and be notified when a record towards decarbonisation breaks.
- [Trine - Solar Crowd-investing](https://www.trine.com/) - Invest in solar projects bringing clean energy to emerging markets. Local solar partners will distribute and manage the solar products on the ground. If the loan is successful you will receive your investment and interest in return.
- [We Mean Business](https://www.wemeanbusinesscoalition.org/) - A coalition aiming to catalyze business action and driving policy ambition to accelerate the zero-carbon transition.
- [Tradewater](https://tradewater.us/) - Finds and destroys the most potent greenhouse gases before they are released into the atmosphere. These are old refrigerants that would leak into the atmosphere unless collected and destroyed. Work is funded by selling Carbon Offsets. You can subscribe to offset your carbon emissions. 
## Clothing
- [4ocean](https://www.4ocean.com/) - Oeko-tex certificated, cruelty free customizable linen clothing brand. All of the packaging are plastic free.
- [Adidas Parley](https://adidas.com/parley) - Shoes, apparel and accessories made from upcycled marine plastic waste. Every piece in the collection is made of at least 75% intercepted plastic trash.
- [Allbirds](https://www.allbirds.com/) - Our shoes are made with merino wool, tencel made from rainfall-fed FSC-certified eucalyptus forests, recycled plastic bottles (for laces), 'Sweetfoam' soles made from castor bean oil and [ProForest](https://proforest.net/en)-protected sugarcane. At 7.6 kg per pair for our wool runners, our process uses 60% less energy than materials used in typical synthetic shoes. We offset the rest, making Allbirds a carbon-neutral business.

- [Alternative Apparel](https://www.alternativeapparel.com/) - Low impact dyes, and post-consumer recycled polyester are used with Fair Labor Association guidelines.
- [Arvin  Goods](https://www.arvingoods.com/) - Brand that makes fashionable socks through a sustainable supply chain process they have developed. They have removed excess water from their manufacturing process - leaving more water left for communities to drink!
- [Bam - Bamboo Clothing](https://bambooclothing.co.uk/) - Bamboo clothing company that are entirely dedicated to sustainability beyond purely carbon emissions, they're aiming for zero chemical pollution, zero waste to landfill, zero deforestation in their suppliers (and their suppliers, and _their_ suppliers...) and zero water wasted. They've got active wear, casual wear, underwear, gift cards for birthdays, the whole thing.

- [Boody Eco Wear Essentials](https://boody.co.uk) - Everyday essentials made from hypoallergenic and breathable FSC-certified bamboo viscose yarn, OEKO-TEX 100 certified organic by Ecocert.

- [Cariuma](https://cariuma.com/) - Old-School sneakers, new school ethics. Cariuma's sneakers are handcrafted with premium natural materials, an obsessive eye for detail, and a conscious mind. They care deeply about our craftsmen, and ensure that they earn fair wages and experience safe working conditions.  Some of their shoes are carbon _negative_, and they are committed to carbon-neutral shipping processes, which they do by purchasing carbon offsets for each shipment.
- [Dabchy](https://www.dabchy.com/) - Tunisian second hand clothes marketplace.
- [For Days](https://www.fordays.com/) - Subscription service that provides clothing with a zero-waste approach. When you sign up you purchase a membership and receive an organic cotton shirt - each time you want to purchase another article you send them back any old item to swap them out.
- [Knowledge Cotton Apparel](https://knowledgecottonapparel.com) - Clothing made from certified organic cotton, recycled PET, linen, wool, tencel, and recycled nylon sent via certified carbon neutral shipping in recyclable packaging.
- [Kushel](https://www.kushel.de) - Our bathrobes and towels are made from reforested beech wood and organic cotton, made in Portugal. Sourced from FSC-certified reforested forestry operations in Europe without irrigation. This mix needs 90% less water and emits 44% less CO2. By planting 2 trees for each towel and by compensating the carbon emissions and blue-water usage, we are a climate & resource positive textile brand, and the first certified B corporation in Germany.

- [Linen Fox](https://linenfoxclothes.com) - Small runs of customizable Oeko-tex certificated linen clothing with plastic free packaging.
- [Loop A Life - 100% Circular Fashion](https://loopalife.com/) - This circular textile award winning brand sets the new standard by clothing from local raw salvaged materials, recycling them without any chemicals, generating no wastewater, recycling their own products at end-of-life, researching and developing new ways to develop circular products.  They organize local sorting campaigns, workshops, collection campaigns, and facilitate other fashion companies in their circular transition.  Each sweater saves 500 liters of water, 60mJ of energy, uses zero chemicals, and saves at least 6kg of C02 emissions (when compared to traditional manufacturing).

- [Lost in Samsara - Bags, Jewelry, and Accessories](https://www.lostinsamsara.co.uk) - Stylish products produced ethically from upcycled materials.  Bags made from cement bags, tires, and jewelry made from upcycled bullet casings.

- [Love Linen](https://www.lovelinen.com.au/) - Linen clothing made with love in Australia
- [MUD Jeans](https://mudjeans.eu/) - Zero impact jeans production obeying circular economy principles, paying fair wages and offering a repair service.
- [Mezzoroni](https://mezzoroni.com/) - Oeko-tex certificated, cruelty free customizable linen clothing brand. All of the packaging are plastic free. 
- [NN07](https://www.nn07.com/) - Using its [sustainable material matrix](https://www.nn07.com/made-to-last), No Nationality designs made-to-last clothing primarily with recycled and non-cotton natural materials including hemp, linen, wool, alpaca, and silk.
- [Norm Shoes](https://norm.shoes/) - Our shoes are made from 90% recycled materials: recycled polyester (6 plastic bottles per pair), recycled rubber, and fairtrade rubber.  The impact for one pair of Norm shoes is only 6,5 kg of CO2 equivalent (80% lower than the industry average). We partner with a Belgian NGO, Graine de Vie, to plant two trees in Madagascar for each pair we sell and we offset our emissions as well.
- [Patagonia](https://www.patagonia.com/) - Sports clothing produced in the most sustainable way ([footprint](https://www.patagonia.com/our-footprint/): working towards carbon neutral, recycled, fair trade, organic, ...)
- [Pure Waste](https://www.purewaste.org/) - Helsinki based, making 100% recycled clothing out of waste materials.
- [REI Used](https://www.rei.com/used) - CO-OP owned company that sells reused hiking and outdoor gear and clothing with the goal of preventing waste and getting more people into outdoor activities. They offer gift cards in exchange for your used gear too.
- [Recover Brands](https://recoverbrands.com/) - Soft and strong T-shirts, each made from 8 plastic bottles. Closed Loop manufacturing from the start.
- [Runamics Running & Sports Gear](https://www.runamics.com) - Crowd-funded for-purpose eco-friendly alternatives to traditional sports gear. We combine merino wool with wood-based cellulosic fibres like Lyocell. We make experiments with highly innovative fibres like biodegradable elastic fibres or “polyester-like” substitutes.  WE're climate neutral always working to reduce our footprint, use plastic-free packaging and ship globally with DHL GoGreen.

- [Siizu](https://siizu.com/) - A mininalistic-styled brand that creates clothing with organic and natural fabrics - one such using oyster shell waste. They use an ethical manufacturing process by having their factories close to each other and their shipping only uses recyclable packaging.
- [Sustainable Hosiery](https://www.sustainablehosiery.com/) - OEKO-TEX certified, vegan-dyed hosiery made from 76% - 97% recycled post-production and post-consumer nylon waste in Zero Waste factories
- [TenTree](https://www.tentree.ca/) - Ten tree is a brand that actively promotes environmental stewardship. They have a wide variety of comfortable clothes and accessories and with each purchase, they pledge to plant 10 trees.
- [Vesica Piscis Shoes](https://vesicapiscisfootwear.com/) - Hand made stylish shoes made from recycled materials. Recycled cotton, recycled polyester fabric picking from plastic bottles, X-ray plates, fishing nets, etc. They use virgin natural rubber, bamboo, and a small amount of organic cotton.

- [Vinted Used Clothes Marketplace](https://www.vinted.com) - Your community for pre-loved fashion. Buy and sell quality used apparel.
- [Worn Wear](https://wornwear.patagonia.com/) - A set of tools to help our customers partner with Patagonia to take mutual responsibility to extend the life of the products Patagonia makes and customers purchase. You can buy second-hand repaired or re-crafted clothes, or trade in used Patagonia clothes for credit for new items.
- [Woron Store](https://www.woronstore.com/) - Lingerie and base wear essentials made from GOTS-certified, antibacterial 'Lenzing Modal' (Beech wood!) made from CO2-neutral FSC-certified native tree plantations.
- [thredUP](https://www.thredup.com/) - Second hand clothes, up-cycled to avoid the electricity, carbon, etc waste of making new clothes, and keeping them from a landfill. Women and kids but nothing for men.
## Consumer Products
- [A Good Company - The Plastic-Free Store](https://agood.com/) - Everyday products including notebooks, toothbrushes, phone cases, art supplies, water bottles, etc. designed with by a company with complete transparency that has extremely ambitious environmental standards including plastic-free low-carbon materials including bio-plastics, bamboo, stone paper, and recycled aluminum.

- [Earth Hero](https://earthhero.com/) - Our brands are made with better materials, cleaner production, a lower carbon footprint, higher quality, and with less waste. When you shop on EarthHero, you contribute to a better future for us all.
- [Fairphone](https://www.fairphone.com/) - A phone for everyone who cares about how their products are made. It improves the conditions of the people who make it and uses materials that are better for the planet.
- [Grayl Water Filter](https://grayl.com/) - Water bottle with built in filter that works like a french press. Great for urban and outdoor use.
- [Katadyn Water Filters](https://www.katadyn.com/en/de/products/water-filters#/1/filter?categories=32) - Katadyn develops and manufactures durable and portable water filters, desalinators and chemical disinfectants for daily use, camping, trekking, or global journeys. The vast product line ranges from water filters and Micropur tablets to the smallest manual desalinator for marine applications. Aid organizations as well as the military rely on them.
- [Lehman's](https://www.lehmans.com/) - One-stop shop for non-electric, homesteading, survival, handmade, Amish made, plastic free, durable, quality goods.  If you envision switching to live a simpler life, this place has all the tools you need to do so.
- [Palm-Oil Free Products](https://orangutanfoundation.org.au/palm-oil/) - Make sure your makeup, biofuel, popcorn, candy, and other [various products](https://www.ethicalconsumer.org/palm-oil/palm-oil-free-list) are palm-oil free. The World Wildlife Fund estimates that 48 football fields worth of rainforest are cut down every minute! It’s estimated that palm oil plantations now cover around 27 million hectares. The forests being clear cut are often habitat for orangutans, who will be completely gone within 5-10 years at this rate.
- [Pela Case](https://pelacase.com/) - 100% Compostable phone case for iPhone and Android made with flax. Also zero-waste screen protectors and sunglasses.
- [TomatoInk](https://www.tomatoink.com/) - TomatoInk is an eco-friendly, low-cost provider of ink and toner. By packaging ink in remanufactured cartridges, we pass along substantial savings both financial and environmental to you. “Our factory collects high-quality used cartridges. There, they are professionally cleaned and inspected and any defective parts get replaced. The cartridges then get filled with high-quality ink comparable to that used in name-brand cartridges. And finally, every single cartridge is inspected and test printed.”

## Cooking
- [Ecocina Rocket Stoves](http://www.stoveteam.org/) - Wood fired cook stove that uses ~40-50% less fuel than traditional fires and emits ~1/3 the CO2. Learn how to build one!  Check out their research center at [Aprovecho](http://aprovecho.org/).
- [Go Sun](https://www.gosun.co/) - An innovative portable ultra-efficient solar cooker that can be used for backpacking, boating, car camping, etc.
- [Insulated Cooking](https://www.milkwood.net/2015/07/06/thermal-cooking/) - Discover a great way not only to use less energy in food preparation, but to serve tastier and more nutritious meals at the same time.  Any recipe that calls for boiling, simmering, steaming, or roasting will often taste better— [hot from the haybox](https://www.motherearthnews.com/diy/haybox-cooking-zmaz80jfzraw) — than it would with regular stove preparation ... and you'll save heat energy at the same time.  You can pick up a pot-sized [thermal cooker](http://www.cookingworld.biz/thermal-cooker-guide/), or simply put a blanket in a cooler.
- [Preserve Extra Food With A Solar Dehydrator](https://www.motherearthnews.com/diy/tools/solar-food-dehydrator-plans-zm0z14jjzmar) - A solar food dehydrator is a device that removes moisture from food to aid in its preservation. You can [buy a simple one](https://www.kickstarter.com/projects/mixedmediaeng/dryceratop-solar-food-dehydrator-for-mason-jars/description) or make your own.  Food drying is a method of preserving fruit, vegetables, and animal proteins that has been practiced since antiquity.
- [Sun Oven](https://www.sunoven.com) - Insulated solar oven that can cook food just like a regular oven.
## Documentaries
- [Artifishial](https://www.patagonia.com/artifishal.html) - Artifishal is a film about people, rivers, and the fight for the future of wild fish and the environment that supports them. It explores wild salmon’s slide toward extinction, threats posed by fish hatcheries and fish farms, and our continued loss of faith in nature.
- [Before the Flood](https://www.imdb.com/title/tt5929776/) - A look at how climate change affects our environment and what society can do to prevent the demise of endangered species, ecosystems and native communities across the planet.
- [Biggest Little Farm](https://www.biggestlittlefarmmovie.com/) - The Biggest Little Farm chronicles the eight-year quest of John and Molly Chester as they trade city living for 200 acres of barren farmland and a dream to harvest in harmony with nature. Through dogged perseverance and embracing the opportunity provided by nature's conflicts, the Chesters unlock and uncover a biodiverse design for living that exists far beyond their farm, its seasons, and our wildest imagination. Featuring breathtaking cinematography, captivating animals, and an urgent message to heed Mother Nature's call, The Biggest Little Farm provides us all a vital blueprint for better living and a healthier planet.

- [Blue Planet II](https://www.imdb.com/title/tt6769208/) - David Attenborough returns to the world's oceans in this sequel to the acclaimed documentary filming rare and unusual creatures of the deep, as well as documenting the problems our oceans face, including showing how plastic waste is destroying marine life.

- [Chasing Coral](https://www.imdb.com/title/tt6333054/) - Coral reefs around the world are vanishing at an unprecedented rate. A team of divers, photographers and scientists set out on a thrilling ocean adventure to discover why and to reveal the underwater mystery to the world.
- [Garbage Warrior](http://www.garbagewarrior.com/) - Garbage Warrior is a feature-length documentary film telling the epic story of maverick architect Michael Reynolds, his crew of renegade house builders from New Mexico, and their fight to introduce radically different ways of living. Imagine a home that heats itself, that provides its own water, hat grows its own food. Imagine that it needs no expensive technology, that it recycles its own waste, that it has its own power source. And now imagine that it can be built anywhere, by anyone, out of the things society throws away. Thirty years ago, architect Michael Reynolds imagined just such a home - then set out to build it. Reynolds believes that in an age of ecological instability and impending natural disaster, his buildings can - and will - change the way we live.

- [GasLand Part II](https://www.imdb.com/title/tt2795078/) - The gas industry's portrayal of natural gas as a clean and safe alternative to oil is a myth, and that fracked wells inevitably leak over time, contaminating water and air, hurting families, and endangering the earth's climate with the potent greenhouse gas methane.
- [GasLand](https://www.imdb.com/title/tt1558250/) - An exploration of the fracking petroleum extraction industry and the serious environmental consequences involved.
- [Green Film Festival in Seoul](http://www.greenfund.org/en/m61.php) - Starting with Green Film Festival in Seoul in 2004, Korea Green Foundation has been seeking ways of coexistence of the environment and humans and has been exploring the alternatives and better practice for the future.
- [Flower Island](https://pt.wikipedia.org/wiki/Ilha_das_Flores_(curta-metragem)) - ""Ilha das Flores"", from portuguese, it's a brazilizan documentarie made in 1989 which portrays the influence of the economy on the relationship of human beings with each other and with the environment. It also contains a strong criticism of social inequality and the handling of organic waste. The short film depicts the situation of poor families in a given region of Porto Alegre who, on a priority scale, find themselves after pigs. Women and children who, within a specified time of five minutes, ensure the pigs' leftover food daily.
- [More than Honey](https://www.imdb.com/title/tt2263058/) - An in-depth look at why bees, worldwide, are facing extinction. With the tenacity of a man out to solve a world-class mystery, he investigates this global phenomenon.
- [No Impact Man](https://www.imdb.com/title/tt1280011/) - Follow the Manhattan-based Beavan family as they abandon their high consumption 5th Avenue lifestyle and try to live a year while making no net environmental impact.
- [Our Planet](https://www.imdb.com/title/tt9253866/) - Documentary series focusing on the breadth of the diversity of habitats around the world, from the remote Arctic wilderness and mysterious deep oceans to the vast landscapes of Africa and diverse jungles of South America.
- [Tapped](https://www.imdb.com/title/tt1344784/) - Examines the role of the bottled water industry and its effects on our health, climate change, pollution, and our reliance on oil.
- [The Coconut Revolution](https://www.imdb.com/title/tt0479000/) - This is the modern-day story of a native peoples' remarkable victory over Western Colonial power. A Pacific island rose up in arms against giant mining corporation Rio Tinto Zinc (RTZ) - and won despite a military occupation and blockade.
- [The Power of Community: How Cuba Survived Peak Oil](https://www.imdb.com/title/tt0814275/) - A great example of how a community can survive the oil apocalypse. Cubans were on the edge of starvation due to the oil crisis - the average Cuban lost 20 pounds. The Cuban people helped avert disaster from the bottom up by reclaiming land everywhere and began growing vegetables on them. Here we see the importance of recovering lost knowledge to ensure communal survival.
- [Virunga](https://www.imdb.com/title/tt3455224/) - A team of brave individuals risk their lives to protect the last mountain gorillas.
- [Where the Heck is Donlin?](https://vimeo.com/64608183) - Sited deep in the Bush of Southwestern Alaska, the Donlin Gold prospect is the largest proposed gold mine in Alaska's history. However, an overwhelming majority of Alaskan residents are unfamiliar with the details of it's development and implications. Noting the absence of available data, as well as the lack of awareness surrounding the proposal, Bjorn and Kim took on the ground-truth-trekking model of investigative research, and set out to explore some of the unanswered questions from the source. Completing a three-part, 1,000 mile human powered wilderness expedition through the proposed footprint of the mine, they engaged the people that they encountered on the subjects of perpetual waste storage, the significance of subsistence fisheries, the energy demands of a large-scale mine, and the challenges facing rural residents to name a few.

## Finance
- [Abundance Investment](https://www.abundanceinvestment.com/) - Abundance offer a crowdfunding marketplace for socially and environmentally beneficial projects. Make direct investments in a range of businesses that share your values, through an ISA or a pension.
- [Amalgamated Bank](https://amalgamatedbank.com/) - Personal and business banking from a Certified B Corporation. They're fossil fuel free in our lending, powered by 100% renewable energy and have a long, proud history of providing affordable access to banking and being a champion of immigrants’ and workers’ rights. _NOT_ a FDIC member, but part of GABV (the Global Alliance of Banking on Values).

- [Aspiration](https://www.aspiration.com/) - Aspiration offers socially-conscious and sustainable cash management services and investment products, so you can make money while making the world a better place. And, unlike the Big Banks, we don’t use your deposits to fund oil pipelines or turn your fees into campaign contributions to the politicians that work against you.**
- [Beneficial State Bank](https://beneficialstatebank.com/) - From fairly priced checking accounts for individuals and families that help you stay on track, to business and nonprofit financial tools that assist you in growing your organization. This bank is a B Corp, a FDIC member, and part of GABV (the Global Alliance of Banking on Values). Recommended by Stop The Money Pipeline.

- [Betterment - Socially Responsible Investing](https://www.betterment.com/socially-responsible-investing/?referral_key=philipsturgeon) - Super reliable, tax efficient, Traditional and Roth IRA / 401(k), and they now offer checking too. Betterment is not socially responsible by default, you need to select the SRI portfolio for each and every goal (account) you set up with them. They have divested from oil, but you should review [their SRI strategy](https://www.betterment.com/resources/socially-responsible-investing-portfolio-methodology/#sociallyresponsible) to see if you think it's good enough.
- [Climate-KIC Marketplace](https://www.climate-kic.org/marketplace/) - Marketplace full of investment opportunities into early-stage startups. The dealflow stems from EIT Climate-KIC’s Accelerator programme, the largest climate-focused acceleration programme in the world.
- [Corner Card](https://www.cornercard.ch/de/privatkunden/kreditkarten/liste/detail/climate-creditcard-de) - Discover Switzerland's first climate-friendly credit card: with every card you make an active contribution to the compensation of CO2 emissions - without any additional costs for you. Complete climate compensation Whether a flight ticket, a new shirt or an overnight stay in a hotel - goods and services paid for with the Climate Credit Card are 100% CO2 compensated.

- [Ditch Dirty Banks](https://www.ran.org/bankingonclimatechange2019/#data-panel) - Anyone with a Chase, Wells Fargo, Citi Bank account could do the world a favour by cutting that card in half. Customers of any of the fossil fuel funding banks in this list could. Phone up, tell them to cancel your account because they're funding _still funding coal and fracking_, and put another little ding in their bottom line. Find an ethical bank, they've usually got better fees and more friendly support staff anyway.
- [EQ Investors](https://eqinvestors.co.uk/individuals) - Impact investing is an exciting and rapidly growing industry powered by investors who are determined to generate social and environmental impact as well as financial returns.
- [Ecology Building Society](https://www.ecology.co.uk/) - Need a savings account or a mortgage, but don't want the money being used for the usual awful stuff banks fund? Ecology are dedicated to improving the environment by supporting and promoting ecological building practices and sustainable communities. They'll even give mortgage to folks trying to buy woodlands, or to buy fields and create woodland!
- [Global Alliance for Banking on Values](https://www.gabv.org/) - The Global Alliance for Banking on Values (GABV) is a network of banking leaders from around the world committed to advancing positive change in the banking sector. Their goal is to change the banking system so that it is more transparent, supports economic, social and environmental sustainability, and is composed of a diverse range of banking institutions serving the real economy.

- [Good Money Week](https://goodmoneyweek.com/) - Helping you find sustainable and ethical options for banking, pensions, savings and investments.
- [Hargreaves Lansdown Responsible Investment](https://www.hl.co.uk/) - Hargreaves Lansdown are a big name in finance, offering savings accounts and pensions. They will let you invest in pretty much anything, but they've put together a list of ""responsible investment"" funds to help you defer some of the thinking to the finance brains. The term 'responsible investment' is often used as a catch-all to describe funds managed with social, environmental, or other responsible criteria in mind, so maybe sift through this list to find ones that sound good to you, whether you use HL or not.
- [Market Forces AU: Sustainable Banks](https://www.marketforces.org.au/info/compare-bank-table/) - Find out which banks do and don’t have a record of funding fossil fuels. Each institution is sorted into categories clearly defining those that fund fossil fuels and those with no current record of funding the industry. Importantly, you can take action and contact every single bank, credit union and building society listed.
- [NextEnergy Solar Fund](https://www.nextenergysolarfund.com/) - NextEnergy Solar Fund is a specialist investment company that invests in operating solar power plants in the UK and Italy, with the objective of securing attractive shareholder returns through RPI-linked dividends. The Company achieves this by acquiring solar power plants on agricultural, industrial and commercial sites. Invest through an ISA or SIPP on usual UK trading platforms like HL/Fidelity/etc.
- [Stop the Money Pipeline](https://www.stopthemoneypipeline.com/) - Banks, insurance companies, and asset managers are funding, insuring and investing in the climate crisis. Stopping this money pipeline is one of the most important ways we can address the climate emergency.
- [Thrive Renewables](https://www.thriverenewables.co.uk/) - Thrive Renewables connects people to sustainable energy. We offer accessible opportunities for individuals and businesses to invest in clean energy projects that deliver financial, environmental and social rewards. With over 25 years in the industry, we have a wide network of professional contacts and are constantly on the look out for new projects which enhance our portfolio, match our investment criteria and have the potential to generate financial, environmental and social returns.
- [Tomorrow One Bank](https://www.tomorrow.one) - German bank which considers the future of our planet to be more important than access to VIP lounges at airports. Skip extra insurance products and fuel discounts, and get a premium account that focuses on climate protection.
- [TreeCard](https://www.treecard.org/) - TreeCard - The wooden debit card that plants trees.
- [Trine - Solar Crowd-investing](https://www.trine.com/) - Invest in solar projects bringing clean energy to emerging markets. Local solar partners will distribute and manage the solar products on the ground. If the loan is successful you will receive your investment and interest in return.
- [Triodos Bank](https://www.triodos.co.uk/) - Modern financial and banking services for savers, investors, and organisations who want to change the world for the better. Current accounts, personal savings, ISAs, business lending, and all sorts of other options for individuals, businesses, and charities.
- [Triodos Crowdfunding](https://www.triodoscrowdfunding.co.uk/) - Invest directly in pioneering organisations delivering positive change, such as community solar schemes, renewable energy projects, ethical food supermarkets.
## Food
- [Able & Cole](https://www.abelandcole.co.uk/) - Get fruit, veg, pantry staples, and other organic food delivered in returnable, reusable, recyclable packaging. Seasonal boxes of veg so its not traveling around the world, sustainably sourced fish, they've even got beer.
- [Agricool - Local, healthy, sustainable food](https://www.agricool.co/fr) - Des fruits et légumes, cultivés au coeur des villes, à moins de 15km de leur lieu de consommation. Frais, locaux, sans pesticides.
- [CrowdFarming.com] -  Buying food directly from farmers is the most powerful everyday act available to anyone to create a positive social and environmental impact. 
- [NotCo](https://notco.com) - The Not Company is a Foodtech, that reinvents animal-based foods using only plants. Unlike traditional food businesses, the company uses technology to recreate the same products we love to eat in a natural, sustainable and affordable way, keeping it functional, easy to use and mouthwateringly delicious. They use Artificial Intelligence to build a library of thousands of Plants and find how to use them, to recreate the same taste, smell, function, look and feel of the products we love. ALL PLANT-BASED.
- [All Plants - Vegan Prepared Meals](https://allplants.com/) - Get super tasty and 100% plant-based meals cooked by chefs and delivered straight to your door. Two people getting six meals works out at £5 a meal, which is amazing. Use [this referral link](https://allplants.mention-me.com/me/referee/registerko/48827185/206943008/er/796b4fb5d581862f565aa73f01fe733b8576831c/fe/cw?epr=1) to get £10 off your first box. We'll get £10 off our next box, so we'll spend that saving on trees on [Offset Earth](https://offset.earth/philsturgeon). 🥳
- [Bees Wrap](https://www.beeswrap.com/) - Stop using cling film and start using reusable recyclable wraps made from bees wax and organic jojoba oil.
- [Boulder Food Rescue](https://www.boulderfoodrescue.org/) - We facilitate the sustainable redistribution of healthy food that would otherwise be wasted to low-income communities, by bicycle. We work with communities to facilitate their own food redistribution and create decentralized systems to bypass barriers to food access. Our work envisions a world in which everyone has equitable access to healthy food.
- [City Harvest](https://www.cityharvest.org/) - City Harvest is New York City’s largest food rescue organization. They rescue food and deliver it to hundreds of food pantries, soup kitchens and other community partners.
- [EIT Food](https://www.eitfood.eu/) - EIT Food is Europe’s leading food innovation initiative, working to make the food system more sustainable, healthy and trusted by consumers.
- [Farm Drop](https://www.farmdrop.com/) - Next day delivery in London for groceries and household products from local and independent producers.
- [Food Cloud](https://food.cloud/) - FoodCloud is a social enterprise that connects businesses with surplus food to charities in their local communities that need it via a software platform.
- [Foodsharing.de](https://foodsharing.de/) - If you are located in Germany, join your local food rescuing group on foodsharing.de.
- [Forkful](https://www.forkful.app/) - Sustainable, nutritious eating that is as good for you as it is for the planet. With our powerful recipe search, you can view the nutritional benefit and environmental impact of thousands of recipes at a glance, empowering you to make awesome decisions.
- [Geev](https://corporate.geev.com/) - An online application to exchange stuffs and food between people. Easily discuss, meet and give a second life to objects and food.  The more you give the more people trust you when you want to get something.
- [Giki](https://gikibadges.com/) - The Giki app provides accessible, independent, transparent information to help people change habits to live more sustainably. Our 14 badges cover sustainability, health and fairness.
- [Grocy](https://grocy.info/) - Grocy is a web-based self-hosted groceries and household management solution for your home.  Scan barcodes, track your purchases, automate and optimize your shopping list, waste less by keeping track of what's expiring next, plan meals, and more.
- [GrowNYC Food Scrap Collection Schedule](https://www.grownyc.org/compost/locations) - Interactive map with over 150 residential Food Scrap Drop-Off sites in NYC.
- [Happy Cow](https://www.happycow.net) - Reduce or avoid meat entirely by finding great vegetarian or vegan food all over the world.
- [Impossible Foods](https://impossiblefoods.com/) - We’re making meat from plants so that we never have to use animals again.  Just one Impossible Burger (instead of a burger made from cows) will use 96% less land, 87% less water, and 89% fewer GHG emissions.
- [Karma](https://karma.life/) - Rescue unsold meals, delivered, always 50% off in hundreds of cities across Sweden, United Kingdom, and France.
- [Karma](https://new.karma.life/) - A Swedish company that lets restaurants sell surplus food at a lower price. It lets you pay less for food and prevent food waste.
- [Karrot](https://karrot.world/) - Join or start a group in your home town that rescues food. Karrot is a free and open-source tool for grassroots initiatives and groups of people that want to coordinate face-to-face activities on a local, autonomous and voluntary basis.
- [Kitche](https://kitche.co/) - Kitche works to reduce waste from inside users’ kitchens and makes it easier than ever before to manage food at home, saving money and reducing food waste all within one app. Scan receipts and stop wasting money!
- [Makkelijke Moestuin (Easy Vegetable Garden)](https://www.makkelijkemoestuin.nl/) - We make the vegetable garden easy. Thanks to our stuff and app, you can immediately garden like a pro.  Setting up your vegetable garden perfectly is 80% of the work. Our stuff is specially made for that. With the other 20% - maintenance - our app helps you completely.  You harvest 5 times as much per m² as from an ordinary vegetable garden. Ka-ching!
- [Milk Run](https://localmilkrun.com) - Shop for and subscribe to deliveries from our hub of local farmers, butchers, bakers, and makers in Portland, Oregon.
- [No Food Wasted](http://www.nofoodwasted.com/) - NoFoodWasted maps products that reach the best before date and shows where and how much you can save. Download the app, select a provider near you and start saving today.
- [No Meat Today](https://nomeat.today/) - Your companion to eat less meat. It's good for you and the planet, but let's be honest, eating less meat is hard. Don't do it alone!
- [No Waste](https://www.nowasteapp.com/) - With lists for your freezer, fridge and pantry, you can easily check what food you have left, see what food you need to use first, plan your meals, create a shopping list, avoid unnecessary purchases, reduce food waste and save a bunch of money.
- [Olio](https://olioex.com/) - We connect neighbors to share food, and other things, rather than chuck them away.
- [Pieter Pot](https://www.pieter-pot.nl/) - Your groceries, delivered without packaging. Pieter Pot delivers your groceries with a cargo bike in beautiful glass jars in The Netherlands. Empty pot? Then we fill it again. This is how we make it fun and easy to do shopping without all those unnecessary (plastic) packaging. That's nice, right?
- [Rethink Food NYC](https://www.rethinkfood.nyc/) - They pick up unused, excess food from restaurants, farms, and other food purveyors, and re-purpose it into delicious and nutritious meals for under-served New Yorkers.
- [Seafood Watch](https://www.seafoodwatch.org/) - Seafood Watch recommends seafood that is fished or farmed in ways that promote healthy oceans. They recommend best options, good alternatives, and things to avoid.
- [The Rotten Fruit Box](https://therottenfruitbox.com/) - 100% Natural Freeze-Dried Fruit Snacks from Spain and Portugal shipped to you. The fruit you’re enjoying would have otherwise gone unused and rotted away on the ground. We also think that the name ""Rotten"" helps bring attention to the serious issue of food waste. Delicious, healthy, 100% natural, with a long shelf life, our freeze dried fruit snack pouches are ideal for home, work, office, to take to school, camping or just about anywhere. Help reduce food waste. Help small local farmers. 100% compostable packaging, ships with your local postal service because it is the lowest carbon footprint option.
- [Tight5 farm](https://tight5.farm) - Delivered by cargo bicycle, our microgreens, sprouts, and culinary herbs are grown sustainably at production scale in an ultra-minimalist hydroponic vertical farming unit
- [Too Good To Go](https://toogoodtogo.co.uk/) - Sell your surplus food, easily and sustainably! Save delicious food and fight food waste. Find your favorite food and go rescue it.
- [We Are Phenix](https://wearephenix.com/en/) - Buy unsold goods from local businesses at a reduced price.  Sell expired products to clients, donate to charities, reuse organic waste for animal food, and more.  With over 100k meals saved per day, we are well on our way to reach the objective of zero food waste.  
- [The Felix Project](https://thefelixproject.org/) - London-based charity that collects fresh, nutritious food that cannot be sold. Deliver this surplus food to charities and schools so they can provide healthy meals and help the most vulnerable in our society. Reducing food waste and poverty.
- [OddBox](https://www.oddbox.co.uk) - English Certified B Corp that is reducing food waste. Collects food rejected by Supermarkets, directly from farms and delivers to your door. £10 off your first box with this link (https://mention-me.com/m/ol/qd4ho-0d5026f88d). I will plant trees through Ecologi with the £10 I get for this.
## Footprint Calculators
- [Carbon Analytics](https://www.co2analytics.com/) - Link a Xero accounts to assess each purchase a company makes, calculating the carbon impact of things like fuel, power purchases, transportation and more as well as supply chain impacts.

- [CarbonFootprint.com](https://www.carbonfootprint.com/) - Measure you carbon footprint, learn how to reduce your consumption, offset your impact, communicate, and comply.
- [CarbonFund.org](https://carbonfund.org/) - Calculate your footprint based on flights, driving, shipping, and make tax-deductible donations to offset your emissions.
- [Cloud Carbon Footprint](https://www.cloudcarbonfootprint.org/) - An open source tool that provides visibility and tooling to measure, monitor and reduce public cloud carbon emissions. It supports multiple cloud providers including AWS, Google Cloud, and Microsoft Azure, and displays energy and carbon emission metrics in a dashabord, command line interface or exportable to CSV.     
- [Eco Passenger](http://ecopassenger.hafas.de/) - More than a quarter of worldwide greenhouse gases emissions come from the transportation sector, and more important, it is the sector where we have seen the highest growth in these emissions the last decades and it is not stopping. To help, EcoPassenger is a calculator to compare the energy consumption, CO2 and exhaust atmospheric emissions for planes, cars, and trains, for passenger transport.

- [Emitwise](https://www.emitwise.com/) - The Emitwise Reportwise tool calculates company level GHG emissions in line with the GHG Protocol for scope 1 and 2 emissions. Primarily targeting the UK but would also be useful for other countries.
- [How Good](https://howgood.com/) - Future-Proof your products.  HowGood data offers data to businesses and consumers about product sustainability from 350+ independent sources on over 1 million products.  Extensive data library on product sustainability designed to help brands and retailers use that data to source better and consumers to buy better, to build a better world.
- [Impact Forecast](https://www.impactforecast.org/) - The Climate impact forecast is a quick-and-easy tool to see and improve the carbon footprint of business ideas in the startup phase, and a stepping stone towards more meticulous life cycle assessment for established companies.
- [Joro](https://www.joro.tech/) - Effortlessly track your personal carbon footprint by securely connecting your credit and debit cards. Joro combines financial data and academic datasets to develop real-time carbon footprint estimates. The bank integration uses Plaid, and is US only for now, but has plans to roll out to Europe. Sign up to the newsletter to find out.
- [MyClimate](https://myclimate.org/) - Helping reduce emissions through a whole bunch of different projects, from consulting companies on their footprint (and helping them to reduce), to education at schools, forest restoration, providing people in Rwanda with efficient cook stoves, and [a whole bunch more](https://www.myclimate.org/information/climate-protection-projects/). Fund them via donations, and use their flight/car/house/company footprint calculators.
- [Plan A](https://plana.earth/) - Software that helps your business calculate, monitor and reduce its carbon footprint. Our platform allows you to track your carbon footprint monthly and learn how to reduce it with the support of a custom sustainability action plan, automatically created based on your worst-performing indicators.

- [Protea OSS Carbon Footprint](https://github.com/protea-earth/carbon_footprint) - Open source carbon footprint calculator, the only emissions calculator to use a command line interface.

- [The US EPA's Carbon Footprint Calculator](https://www3.epa.gov/carbon-footprint-calculator/) - The calculator estimates your footprint in three areas- home energy, transportation and waste. Everyone's carbon footprint is different depending on their location, habits, and personal choices.
- [WWF UK Calculator](https://footprint.wwf.org.uk/) - The planet is in crisis - from climate change to the pollution in our oceans and devastation of our forests. It's up to all of us to fix it. Take your first step with our environmental footprint calculator.

- [Zellar](https://zellar.com/) - Get an energy profile for your company to understand your energy consumption, and how much CO2 is being generated to power your business. We’ll then let you compare your profile to other local businesses or similar businesses across the UK, then track performance over time. Get advice and even unlock funds to finance any investments you may need to make on your journey to zero carbon.
- [atmosfair](https://www.atmosfair.de/) - Calculate the footprint for flights and buy compensation or donate to offset any number of carbon emissions. Tax-deductible in Germany.
## Home Improvements
- [All Green](https://www.all-green.co.uk/) - A selection of environmentally friendly products for the home, garden, pets and other stuff.
- [Barry](https://barry.energy) - Få et smart strømforbrug. Udskift din gamle el-leverandør med en app til din strøm.

- [Berkley Water Filters](https://www.berkeyfilters.com/) - 21,000,000 Americans drink water that violates U.S. health standards. Berkey water filter systems are actually water purifiers because they remove bacteria and viruses that conventional filters cannot.
- [Domestic Renewable Heat Incentive (RHI)](https://www.gov.uk/domestic-renewable-heat-incentive) - You could get money towards renewable heating costs in your home. You can claim for biomass boilers, solar water heating, heat pumps. Payments are made for 7 years and are based on the amount of renewable heat made by your heating system.
- [EPA's Responsible Appliance Disposal](https://www.epa.gov/rad) - RAD is a voluntary partnership program that works with utilities, retailers, manufacturers, state and local government agencies, affiliates, and others to dispose of old refrigerated appliances using the best environmental practices available.
- [Ecobee](https://www.ecobee.com/) - Improve how people consume energy to create a more sustainable future. Live in harmony with a thermostat and sensor that learn and adapt to your schedule. _Lower the manufacturing footprint by buying one of their refurbished products._
- [EnergyStar.gov](https://www.energystar.gov/) - Energy efficiency ratings, suppliers, and tax credits for products, homes, utilities, and local governments. ENERGY STAR is the government-backed symbol for energy efficiency, providing simple, credible, and unbiased information that consumers and businesses rely on to make well-informed decisions.
- [Environmentally Friendly Roof Insulation](https://www.greenlivingtips.com/articles/environmentally-friendly-roof-insulation.html) - However you heat your home, make sure you aren't leaking heat through insufficient insulation, and save money.
- [Hamwells Showers](https://www.hamwells.com/) - Shower systems that utilize heat exchangers to recapture heat and filtered pumps to recycle water up to 7 times before it is drained, thus significantly reducing water usage and energy consumption.
- [Lancey](https://www.lancey.fr/) - An efficient radiator to control your electricity consumption while improving comfort, with a connected thermostat to adapt to your needs and the characteristics of your home. A built-in battery stores electricity during off-peak hours, allowing you to automatically use cheaper and cleaner energy.

- [Lehman's Appliances](https://www.lehmans.com/category/appliances) - Off the grid and super efficient appliances, including gas refrigerators, freezers, composting toilets, wood stoves, water heaters and pumps.
- [Mist Showers](https://www.lowtechmagazine.com/2019/10/mist-showers-sustainable-decadence.html) - The emissions of a typical shower equal 3.5 – 7 km of driving. The mist shower, a satisfying but forgotten technology which uses very little water and energy, could be a solution. You can DIY convert almost any shower into a mist shower. The five-nozzle mist shower offers significant water and energy savings compared to a “normal” shower and does so without sacrificing comfort.
- [NY State Home Energy Assessment tool](https://www.nyserda.ny.gov/All-Programs/Programs/Home-Energy-Efficiency-Upgrades) - Get a home energy audit and receive tools, resources, and aid to upgrade your home to be more energy efficient.
- [Nebia Showers](https://nebia.com/) - Nebia is proud to offer products that transform your mundane shower routine into a ritual, and also contribute to preserving the planet.
- [PlanetCare Microfibre Laundry Filters](https://www.planetcare.org) - 35% of microplastics are fibers that are released when we wash our clothes. With consumer and industrial laundry filters, tackle the problem close to the source – with a filter in your washing machine.  PlanteCare makes efficient, practical and affordable laundry filters that allow every household to stop sending microfibres into the environment.
- [PowerX](https://www.powerx.co/) - A plug-and-play smart-controller for water and gas headers. It learns what water temperatures you like and heats only as much water as you need. It will also detect the ideal time to heat your water, as prices change every 15 minutes, so you can save money with no impact on hot water levels. Save hundreds of dollars, reduce carbon emissions equivalent to 10 fully grown trees – every year!
- [Project Sunroof](https://www.google.com/get/sunroof) - Find out if you could save money switching to solar panels. This Google project uses Google Earth imagery to analyze your roof shape and local weather patterns to create a personalized solar plan. Adjust your electric bill to fine-tune your savings estimate and the recommended number of solar panels for your home, then compare loan, lease, and purchase options for your solar panels based on your results.
- [Regency Wood Stove Fireplace Inserts](https://www.regency-fire.com/en/Products/Wood/Wood-Inserts) - If solar heating is not an option, wood stove inserts can update your drafty, open wood fireplace. They'll send less heat out the chimney, and more heat around your house, drastically improving your wood burning efficiency. They pump the smoke back into the fire to burn that off too, which sends less crap into the atmosphere. Try to use [coffee logs](https://www.bio-bean.com/elements/coffee-logs-and-retailers/) instead of wood.
- [Rigo Paint - Made From Flax](https://www.rigoverffabriek.nl/) - Decorating your house? Check out RigoStep water-based paints, and oil paints depend on locally grown flax, which is heated and pressed by traditional windmills to extract the oil. Once mixed with other solvents, this forms the liquid base for the paint.
- [Sense](https://sense.com/) - Sense is a home energy monitor that gives real-time insight into your home’s energy usage. Sense gives people the knowledge they need to reduce their energy costs and usage, with profound effects on the environment- the company estimates that its users are saving a total of 53 million pounds of CO2 annually.
- [Solar Thermal Energy](https://en.wikipedia.org/wiki/Solar_thermal_energy) - Solar thermal technology can be used for cooking, heating your home through radiant floors, radiators, or forced air. It can be used to heat water directly for hot showers too.
- [Solar Water Heaters](https://www.energy.gov/energysaver/water-heating/solar-water-heaters) - Solar hot water systems capture thermal energy from the sun and use it to heat water for your home. Systems can either be passive or active – while passive systems use gravity and natural circulation, active systems use pumps and controls to circulate water.
## Hygiene
- [A Good Company - The Plastic-Free Store](https://agood.com/) - Everyday products including notebooks, toothbrushes, phone cases, art supplies, water bottles, etc. designed with by a company with complete transparency that has extremely ambitious environmental standards including plastic-free low-carbon materials including bio-plastics, bamboo, stone paper, and recycled aluminum.

- [Bidet Hose Toilet Attachment](https://www.homedecorous.com/Bidet-Diaper-Handheld-Sprayer-Set-Water-Shattaf-A132) - This sprayer will feel nice and sturdy in your hand as the whole thing is stainless steel. You will be able to adjust the water flow from zero to maximum by pushing the switch or by using the lever on the T-valve adapter.
- [Buy a F**king Bidet](https://buyafuckingbidet.com/) - Buying a bidet attachment for your toilet is cheap and easy, helps the environment and solves problems during the coronavirus pandemic. No more toilet-paper panic-buying/brawling. Do you have a basic understanding of how screwdrivers and hoses work? Congratulations, you're a goddamn bidet installation expert.
- [By Olive](https://byolive.org/) - By Olive is an online store with an extensive range of natural, organic and vegan health and beauty products from a newly launched own brand collection. All packaged responsibly; plastic-free and without waste packaging.

- [CuloClean Water Bottle Bidet](https://culoclean.com/) - CuloClean is the portable bidet that you can plumb in your plastic bottle, fully discreet, efficient and portable. It is specially designed so that it fits in the two most common diameters of water bottle on the market.
- [Good Condom Company](https://www.thegoodc.company/) - Fuck each other, not the planet. Condoms made of natural latex from sustainably managed rubber plantations in Malaysia.
- [Improve how you do laundry](https://greenlivingideas.com/2014/09/23/3-easy-ways-to-green-your-laundry/) - Six tips for a more sustainable laundry routine.
- [Ocean Savers Cleaning Supplies](https://www.ocean-saver.com/) - ""Pre-mixed"" cleaning sprays that you will find in the supermarket are over 90% water, with the active ingredient (the part that actually does the cleaning) making up a fraction of the total liquid. Oceansaver provide just the active ingredients, so people can reuse plastic bottles, reducing the consumption of single-use plastic.
- [RazorPit](https://www.razorpit.com/) - Cleans and sharpens your razor blades, making them last on average 6 times longer. They say their customers achieve 60-150, which can supposedly save you €120 on blades every year.
- [Smartliners](https://smartlinerpads.com/) - Reduce the impact on the environment caused by sanitary waste using Organic Cotton Period Pads.
- [Smol](https://smolproducts.com/) - Zero plastic dishwasher and laundry tablet subscription. Contains child lock, they're FSC certified, half the price of traditional brands, and animal cruelty free.
- [Sonny](https://www.indiegogo.com/projects/sonny-a-portable-bidet-for-eco-conscious-humans/x/17318484#/) - Never worry about running out of toilet paper again with Sonny, a sustainable alternative to wipes and paper for better hygiene and a greener planet.
- [The Cheeky Panda](https://cheekypanda.com) - 100% bamboo tissues shipped with zero plastic, wipes in recyclable plastic, and carbon balanced through the World Land Trust.
- [The Crappy Planet - Bamboo Toilet Paper](https://www.thecrappyplanet.com/) - According to the EPA, one hardwood tree produces approximately 45 kg of toilet paper and about 83 million toilet rolls are produced every day. Bamboo toilet paper production requires less energy, one-fifth of the water, produces considerably more fiber on less land area, generates 30-35% more oxygen than other plants and trees, and it reduces the amount of carbon dioxide by about the same amount.  In addition, the production process requires that water and other materials are collected, reused and recycled. Finally, we invest 25% of our profits to stop deforestation and global warming.
- [The Good Roll](https://www.thegoodroll.nl) - Mail order 100% tree-friendly toilet paper made from post-consumer recycled paper.  50% of net profit from sales of The Good Roll is invested in the installation of safe toilets in East Africa.
- [Who Gives a Crap](https://whogivesacrap.org/) - We make all of our products with environmentally friendly materials, and we donate 50% of our profits to help build toilets for those in need.
## Jobs
- [80,000 Hours](https://80000hours.org/job-board/) - This board presents some of the most promising publicly advertised vacancies we know about. Most of these roles are demanding and difficult to get, but if you’re a good fit for one of them, it could be your best opportunity to work on one of the world’s most pressing problems, or to get the career capital you need to have a big impact later.

- [awesome-sustainability-jobs](https://github.com/pogopaule/awesome-sustainability-jobs) - A curated, open source list of developer jobs in the sustainability sector.

- [Circul'R](https://www.circul-r.com/) - Bridging startups and companies so they can co-create circular economy solutions

- [Climate Careers](https://climate.careers/) - Site that helps people find high-impact, high-paying jobs at organizations advancing climate solutions, research, policy, education, and advocacy for climate action. Software engineers, photographers, sales, operations, researchers, all sorts of jobs here.

- [Climate Change Jobs (The Guardian)](https://jobs.theguardian.com/jobs/climate-change/) - The Guardian advertises the latest climate change jobs in the UK and some areas of Europe/Asia.
- [Data Science for Social Good](https://dssg-berlin.org/) - Berlin based group helping NGOs to make use of their data by connecting them with volunteer data scientists and analysts.

- [GoodWork](https://www.goodwork.ca/) - GoodWork is a Canadian community of environmental changemakers, sustainability professionals, job seekers and volunteers.

- [Green Jobs Network](https://greenjobs.greenjobsearch.org/) - Job board that connects employers with job seekers who are interested in jobs that focus on environmental or social responsibility. Not just tech jobs like some of these boards, they cover all sorts of jobs.

- [GreenJobs](https://greenjobs.com) - Site advertising a wide variety of green jobs to enhance your environmental career.
- [MakeSense Jobs](https://jobs.makesense.org) - Makesense inspires and empowers citizens, entrepreneurs and organizations to build an inclusive and sustainable society together.  MakeSense's Job and assignment announcements platform for associations and social entrepreneurs who recruit profiles passionate about the impact. Job types include internship, freelance, civic service, partner, program, volunteer mission, mentoring.

- [Practical guide to finding a climate change job in tech](https://medium.com/@leventov/how-to-find-a-job-in-a-tech-company-helping-to-combat-climate-change-practical-guide-e212e262a32) - Nice guide on finding a job in tech tackling climate change.

- [Reconsidered Jobs](https://www.reconsidered.co/jobs) - Aggregate jobs in social impact, sustainability and corporate social responsibility.

- [TBD Community](https://www.tbd.community/) - More than 3,000 impact-driven companies and organisations use tbd* to look for new team members, in English and German but many of the jobs are in Germany.

- [Tech Jobs for Good](https://techjobsforgood.com/) - Find tech jobs at social impact companies, foundations, and innovative nonprofits in the United States. They cover all sorts of impact areas, with Environment being one you can select. Some jobs are remote, some are in-office.

- [Terra.do](https://www.terra.do) - Climate learning and career transition platform, runs several fellowships on climate education (broad and sector-specific), hosts climate job fairs, connects to mentors and experts, etc.

## Land Management
- [Creating a Land Trust](https://conservationtools.org/guides/150-what-is-a-land-trust) - A land trust is a charitable organization that acquires land or conservation easements, or that stewards land or easements, for conservation purposes. Land owners may consider designating portions of their land as a land trust, in order to preserve natural features in perpetuity, and be eligible for tax benefits as a result.
- [Dronecoria](http://dronecoria.org/) - Open-source drone reforestation technology. Drones, coupled with native coated seeds, can transform the efficiency with which we restore ecosystems.
- [Droneseed](https://www.droneseed.com/) - They plant native trees & vegetation using drone swarms and spray to protect them. Provide valuable insights to customers by collecting data in the field. Work with governments, nonprofits, and private land owners as a service provider.
- [Farm Bot](https://farm.bot/) - Farm Bot is a fully automated, open-source, crowd-funded project, which helps you grow food for yourself, your family, and your community. Install FarmBot on a raised bed, urban rooftop, or in a small greenhouse at home. Hyper-local food production has never been easier.
- [Natural Resources Conservation Service (NRCS)](https://www.nrcs.usda.gov/) - NRCS will pay you to steward your land, in ways you define. It offers voluntary programs to eligible landowners and agricultural producers to provide financial and technical assistance to help manage natural resources in a sustainable manner. Programs include emergency watershed protection and flood prevention, watershed rehabilitation, surveys and planning, healthy forest reserve easements, agricultural conservation easements, conservation stewardship, and environmental quality incentives.
- [Permaculture Earthworks Handbook](https://newsociety.com/books/p/the-permaculture-earthworks-handbook) - A detailed guide to the proper design and construction of water harvesting earthworks. It covers the function, design, and construction methods for nine main types of water harvesting earthworks across a full range of climates. Free alternatives are an online course by [Permaculture Women](https://www.permaculturewomen.com/freepermaculturecourse.html), and a four-part documentary by [Geoff Lawton](https://www.geofflawtononline.com/).
- [Woodland Trust](https://www.woodlandtrust.org.uk/) - The Woodland Trust is reforesting the United Kingdom, working with communities, local authorities, and land owners, to get trees in the ground.
## News
- [Bloomberg Green](https://www.bloomberg.com/green) - Climate news and insights on the latest in science, environmental impacts, zero-emission tech and green finance.

- [Carbon Brief](https://www.carbonbrief.org/) - UK-based website covering the latest developments in climate science, climate policy and energy policy. Clear, data-driven articles and graphics to help improve the understanding of climate change, both in terms of the science and the policy response.
- [Democracy Now!](https://www.democracynow.org/topics/climate_change) - Independent global news produced daily, hosted by award-winning journalists Amy Goodman and Juan González. Our reporting includes breaking daily news headlines and in-depth interviews with people on the front lines of the world’s most pressing issues by a diversity of voices.  Free from government funding, corporate sponsorship, underwriting or advertising revenue.
- [Good](https://www.good.is/planet) - Good and upworthy news covering big issues, 'making purpose contagious'.
- [Heated](https://heated.world/) - Original reporting and analysis on the climate crisis at the top of your inbox every morning, Monday through Thursday. News should arm you with the knowledge you need to effectively fight this crisis.
- [iPanda](http://en.ipanda.com/) iPanda offers news and live broadcasts of events concerning the release of pandas into the wild, panda mating and breeding, the debut of new-born baby pandas, etc. Also strive to spread knowledge about the conservation of the giant panda and other rare wildlife species, raising awareness to audience around the world about environmental protection.
- [Metabolic](https://metabolic.nl/news) - Sustainability consultancy in The Netherlands, tracking and reporting on climate action, circular economy, reducing consumption, etc. all over the world.
- [State of the Planet](https://blogs.ei.columbia.edu/category/climate/) - News from the Earth Institute at Columbia University.  Columbia’s Earth Institute blends research in the physical and social sciences, education and practical solutions to help guide the world onto a path toward sustainability.
- [The Cleanest Line](https://www.patagonia.com/blog/) - Patagonia's blog on their efforts into political engagement for environmental protection of green spaces, global strikes, their efforts subsidizing solar energy in various communities, and all sorts of other climate action.
- [The Guardian](https://www.theguardian.com/uk/environment) - The Guardian covers international environmental issues and climate change.
- [US Green Build Council](https://www.usgbc.org/articles) - Transforming how buildings are designed, constructed and operated through the LEED construction standard. Articles about benchmarking energy efficiency of materials, city strategy, measuring the health of indoor spaces, reducing off-gassing, and improving air quality.
## Other Services
- [Ecotalk](https://www.ecotalk.co.uk) - UK-based mobile network powered by renewable energy. Profits are used to buy land which is then given back to nature.
## Podcasts
- [Democracy Now!](https://www.democracynow.org/topics/climate_change) - Independent global news produced daily, hosted by award-winning journalists Amy Goodman and Juan González. Our reporting includes breaking daily news headlines and in-depth interviews with people on the front lines of the world’s most pressing issues by a diversity of voices.  Free from government funding, corporate sponsorship, underwriting or advertising revenue.
- [How to Save a Planet](https://gimletmedia.com/shows/howtosaveaplanet) - weekly-ish podcast by Gimlet Media that asks the big questions: what do we need to do to solve the climate crisis, and how do we get it done? Journalist Alex Blumberg and scientist and policy nerd Dr. Ayana Elizabeth Johnson talk to people who are making a difference and work to figure out how to build the future we want, tackling a different subject related to the climate crisis each episode.
- [People Fixing the World - BBC World Service](https://www.bbc.co.uk/programmes/p04grdbc) - Brilliant solutions to the world’s problems. We meet people with ideas to make the world a better place and investigate whether they work.
- [Sustainababble](http://www.sustainababble.fish/) - A weekly podcast about the environment, for and by the confused. Your hosts Ol and Dave are supposed to be experts in how to save the planet. But why’s everything got to be so confusing? Each week they try to get a little bit closer to enlightenment. They may fail. They sift through the most egregious eco-guff out there, exposing the real eco-villians vs the hapless incompetents.
- [TIL Climate Podcast](https://climate.mit.edu/users/tilclimate-podcast) - This MIT podcast breaks down the science, technologies, and policies behind climate change, how it’s impacting us, and what we can do about it. Each quick episode gives you the what, why, and how on climate change -- from real scientists -- to help us make informed decisions for our future.
- [Talking Headways: A Book Club for the Future of Transportation](https://streetsblog.libsyn.com/) - We explore the intersection of sustainable transportation, urban planning, city living, economic development, and anything else that piques our interest. A staple and almost an obligatory source of information on the latest trends in urban mobility and urban planning.
- [The Climate Fix](https://theclimatefix.com/) - We shine a spotlight on people and organisations working on sustainable solutions, help connect them to talent & investment as well as give people hope that there are climate solutions as well as climate problems.
- [The Energy Transition Show](https://xenetwork.org/ets/) - Straight talk about the world’s transition from fossil fuels to renewables with energy expert Chris Nelder.
- [The Yikes Podcast](https://radiopublic.com/the-yikes-podcast-6nKDQq) - Climate Change, Human Rights and the messiness of everything going on at the moment can be really overwhelming BUT we want to provide a space to chat about these things and find hope in the midst of it all.
- [You've Been Warmed](https://www.youvebeenwarmed.com/) - By interviewing the top scientists, entrepreneurs, activists & politicians, we seek to find answers to all of the above while uncovering the leaders behind our fight for the preservation of our planet.
- [Green Pulse](https://omny.fm/shows/green-pulse-1) - The Straits Times (A Singapore news outlet) analyses the beat of the changing environment, from biodiversity conservation to climate change.
## Politics
- [EU: Right to Repair](https://repair.eu/) - Cracked screens, weak batteries, broken charging ports... We’d like to fix them, but instead we end up buying a new smartphone because repairs are too expensive, difficult or impossible. Reducing the lifespan of a product may drive sales, but this comes at the expense of consumers, workers and the planet. Ask the European Union to give people the Right to Repair by requiring manufacturers to design repairable smartphones and provide spare parts and repair information to all repairers and consumers.

- [Energy Innovation and Carbon Dividend Act](https://energyinnovationact.org/) - The Energy Innovation and Carbon Dividend Act (H.R. 763) will drive down America's carbon pollution and bring climate change under control, while unleashing American technology innovation and ingenuity. This policy was also introduced in the Senate in 2018 as S. 3791.
- [No Fracking in Alaska’s Arctic Wildlife Refuge](https://act.nrdc.org/letter/welcome-arctic-190603) - Alaska’s Arctic National Wildlife Refuge is one of our last truly wild places — and it has been off-limits to oil companies for decades. But the Trump administration is closer than any administration in history to tearing open the Arctic Refuge for destructive oil and gas drilling.
- [Our Children's Trust](https://www.ourchildrenstrust.org/) - Leading the game-changing, youth-driven, global climate recovery campaign to secure the legal right to a stable climate and healthy atmosphere.
- [Save Wild Orcas and Wild Salmon](https://www.change.org/p/wild-salmon-and-southern-resident-killer-whales-are-on-the-brink-of-extinction?signed=true) - Wild salmon and southern resident killer whales are on the brink of extinction. Now a misguided plan to feed the starving whales with hatchery salmon will push both endangered species closer to the edge, while costing taxpayers millions of dollars per year.
Tell NOAA Regional Administrator Barry Thom, WDFW Director Kelly Susewind, and our elected decision makers to stop wasting money on failed plans and invest in science-based solutions: reduce hatchery production, remove dams and change how we harvest salmon.

- [The Green Flying Duty](https://www.responsiblevacation.com/copy/write-to-politicians) - The UK is one of the few countries to tax aviation fuel, but it is too low, and not ringfenced for climate solutions. The Green Flying Duty proposal is a reformed version of the UK's APD, that will be ring-fenced for Research and Development (R&D) in electric aviation and to improve railway connectivity. Suggest this to politicians worldwide.
- [U.K. Double Tree Cover](https://act.friendsoftheearth.uk/petition/tell-uk-government-double-tree-cover) - Over the centuries the United Kingdom has cleared its forests, leaving it with some of the lowest levels of woodland in Europe. If the government is serious about protecting the climate, it needs to bring back the lost trees.
- [U.S. Gas-powered car free by 2040](https://www.curbed.com/2019/5/21/18632816/zero-emission-vehicles-act-ban-cars) - Federal legislation was proposed in both the House of Representatives and the Senate that could radically shift the way the U.S. tackles its climate crisis. The Zero-Emission Vehicles Act would eliminate the sale of gas-powered passenger cars in the U.S. by 2040.
- [U.S. Save the ""Clean Power Plan""](https://www.nrdc.org/save-clean-power-plan) - Fossil-fueled power plants are responsible for nearly 40 percent of America’s carbon footprint. The Clean Power Plan calls for setting limits on this climate-warming pollution from these power plants, specifically at least 32 percent by 2030, compared to 2005 levels. By 2030, the Clean Power Plan could save the United States $20 billion in climate-related costs and deliver up to $34 billion in health benefits.
- [UK Government: Act now on the Climate Emergency](https://secure.greenpeace.org.uk/page/s/declare-climate-emergency) - Now that Parliament has declared a Climate Emergency, we need you to act like it. For starters, that means banning all new oil and gas production in the UK, including fracking, tripling renewable energy by 2030, planting 700 million trees, introducing a Frequent Flyer Tax, ending the sale of all new petrol and diesel cars by 2030, and more.

- [US Damn Removal](https://www.change.org/t/dam-removal-en-us) - [70 percent of the dams in the United States](https://www.ussdams.org/our-news/americas-aging-dams-in-need-of-repair/) are now more than 50 years old, with almost 2,000 of them rated as ""high-hazard"". About [1,000 dams have failed](https://apnews.com/75b1cd657f3e4fa3be6adaf968eb7df4) over the past four decades, killing 34 people, and now many are no longer adequate to handle the intense rainfall and floods of a changing climate.
With dams causing wild salmon populations to go extinct, their only benefit is hydropower, yet dams are woefully inefficient by modern standards. For example, the Tugalo Dam in Georgia destroyed 597 acres of temperate rainforest to produce 45 Megawatts, which is the equivalent of 7,500 homes adding 6kw rooftop solar panels. We should tear down these dams as soon as possible, be that when their contract runs out or sooner, instead of wasting tax-payer money operating them or trying to revive them. [More on Last Week Tonight](https://www.youtube.com/watch?v=Wpzvaqypav8).
- [Climate Reality](https://climaterealityproject.org) - an initiative of former United States vice president and 2007 Nobel Peace Prize laureate Al Gore to make urgent action a necessity to address climate change issues through activism and cutting greenhouse gas emissions.


## Reforestation
- [Arbor Day Foundation](https://www.arborday.org/) - The Arbor Day Foundation is a 501(c)(3) nonprofit conservation and education organization. A million members, donors, and partners support our programs to make our world greener and healthier.
- [Bunq Greencard](https://www.bunq.com/easygreen) - Dutch online-only bank with a credit card which plants trees for the money you spend.
- [Coforest](https://coforest.co.uk/) - To create our first co-forest in the Bath & Bristol area, we’re inviting organisations and individuals to adopt up to an acre of land. You’ll be able to name your forest plot and even help to plant it. Together, we’ll create a whole new forest.
- [DigitalHumani](https://digitalhumani.com) - DigitalHumani offers a Reforestation as a Service, to help enterprises plant trees! Run by a volunteer collective, they provide simple Application Programming Interfaces (APIs) to help connect websites and mobile applications to trusted reforestation organizations to have trees planted.
- [Dronecoria](http://dronecoria.org/) - Open-source drone reforestation technology. Drones, coupled with native coated seeds, can transform the efficiency with which we restore ecosystems.
- [Droneseed](https://www.droneseed.co/) - They plant native trees & vegetation using drone swarms and spray to protect them. Provide valuable insights to customers by collecting data in the field. Work with governments, nonprofits, and private land owners as a service provider.
- [EcoTree](https://ecotree.green/) - Support the European forests and reap the benefits. Plant trees as an original and meaningful gift. Building complex, resistant, and multifunctional forests to promote resilience. For every tree harvested, three new ones are planted.
- [Ecologi](https://ecologi.com/?r=5d01f2ed12ae7a358b75fdd7) - Help the planet from your sofa, for less than a cheap bottle of wine per month. Watch your own forest come to life and offset your entire footprint for $6.50/€6 per-month. Then get your friends, family, business, and even your dog signed up!
- [Eden Reforestation Projects](https://edenprojects.org/) - Eden Reforestation Projects reduces extreme poverty and restores healthy forests by employing local villagers to plant millions of trees every year.
- [Form Ghana](https://www.formghana.com/) - A forest plantation management company based in central Ghana that provides services in the field of reforestation of degraded Forest Reserves and plantation management.
- [Form International](https://www.forminternational.nl/) - Form International is a forest management and services company that manages forest assets in Africa and delivers a range of technical and financial services to clients worldwide.
- [Land Life Company](https://landlifecompany.com/) - Using drones and automated planting, they plant at scale in urban environments using a fraction of the water. Their mission is to reforest the world’s 2 billion hectares of degraded land.
- [MyClimate](https://myclimate.org/) - Helping reduce emissions through a whole bunch of different projects, from consulting companies on their footprint (and helping them to reduce), to education at schools, forest restoration, providing people in Rwanda with efficient cook stoves, and [a whole bunch more](https://www.myclimate.org/information/climate-protection-projects/). Fund them via donations, and use their flight/car/house/company footprint calculators.
- [Reforestum](https://reforestum.com/) - Reforestum is an online marketplace to drive reforestation and forest conservation, incentivizing companies and individuals to easily offset their carbon footprint by acquiring and tracking forest shares and carbon credits. Reforestum offers transparency via remote sensing and AI, together with a comprehensible API for seamless integration.
- [Team Trees](https://teamtrees.org/) - TeamTrees started in May 2019 when the internet challenged [Mr. Beast](https://twitter.com/MrBeastYT) to plant 20 million trees to commemorate hitting the 20M subscriber milestone. Fans then suggested he band together with a bunch of other YouTubers and influencers to make it happen.
- [Tree-Nation](https://tree-nation.com/) - With Tree-Nation you can plant trees everywhere, even in the most remote locations. You will know who is planting your trees, where they are located and how they are being planted.

- [TreeCard](https://www.treecard.org/) - TreeCard - The wooden debit card that plants trees.
- [Treedom](https://www.treedom.net/) - Treedom lets you buy or gift a real tree, where somebody will plant it for you and follow it online.
- [Trees for the Future](https://trees.org/) - TREES plants all sorts of trees and plants, and nearly all of the trees used are either native or naturalized in the environments where they are planted. They partner with farmers to understand their needs and match them with species that will suit their needs and be environmentally benign.
- [Treeware](https://treeware.earth) - Loads of open-source developers have a ""Buy me a coffee"" button on their software. Now you can have ""Buy me a tree!"" on your GitHub repository. Get the same ""Yay somebody cares about my work"" AND lessen the existential dread all in one. Powered by [Offset Earth](https://offset.earth/).
- [WeForest](https://www.weforest.org/) - WeForest empowers communities to advance and implement innovative, high standard, scalable and lasting solutions to restore forest landscapes
## Renewable Energy
- [Big Clean Switch](https://bigcleanswitch.org/) - Do energy differently. Switch in minutes to a green electricity tariff from one of the UK's leading suppliers.
- [Community Power](https://communitypower.ie/) - Ireland's first community owned electricity supplier which collaborates with Local Sustainable Energy Communities! Whether you are a household, community, business, public or private building, you can switch and buy your electricity from Community Power.
- [Domestic Renewable Heat Incentive (RHI)](https://www.gov.uk/domestic-renewable-heat-incentive) - You could get money towards renewable heating costs in your home. You can claim for biomass boilers, solar water heating, heat pumps. Payments are made for 7 years and are based on the amount of renewable heat made by your heating system.
- [Ecotricity](https://www.ecotricity.co.uk/) - 100% green electricity. They generate 1/5th from their fleet of windmills and sunmills, and buy the rest from other green generators. They also turn our customers’ bills into new sources of green energy, making more green electricity all the time.
- [Electricity Map](https://www.electricitymap.org/) - A map showing the energy consumption, renewable penetration and carbon emissions from energy for many countries around the world. If you're country isn't covered you can contribute a data source.
- [Good Energy](https://www.goodenergy.co.uk/) - One of the few energy suppliers in the UK to generate renewable power from their own wind and solar farms, and buy renewable power from small independent renewable generators. From local farmers and community energy schemes to sustainable businesses that generate their own power and sell them the excess. A true renewable supplier, not just coal power + offset credits.
- [Green-E](https://www.green-e.org/) - Find a renewable energy provider near you. Green-e certified renewable energy and carbon offset products meet the most stringent environmental and consumer protection standards in North America. You can search below for certified green power and renewable energy certificate programs for your home or business, and carbon offset products to offset your emissions from activities like driving and flying. As a third-party certifier, Green-e® doesn't sell renewable energy or offsets, but offers these links to retailers that do.
- [Non-domestic Renewable Heat Incentive (RHI)](https://www.gov.uk/non-domestic-renewable-heat-incentive) - The non-domestic Renewable Heat Incentive helps businesses, public sector and non-profit organisations meet the cost of installing renewable heat technologies.
- [Project Sunroof](https://www.google.com/get/sunroof) - Find out if you could save money switching to solar panels. This Google project uses Google Earth imagery to analyze your roof shape and local weather patterns to create a personalized solar plan. Adjust your electric bill to fine-tune your savings estimate and the recommended number of solar panels for your home, then compare loan, lease, and purchase options for your solar panels based on your results.
- [SparkMeter](http://www.sparkmeter.io/) - Humanitarian smart energy metering solution that purchases wasted unused electricity from utilities and resells it to hard-to-reach places and under served markets, thus reducing overall energy consumption.
- [UK Carbon Intensity](https://carbonintensity.org.uk/) - This officially backed open API from Oxford University and the National Grid ESO gives a snapshot of how much carbon each unit of electricity consumed in the UK emits for every half hour. Also carries forecasts, regional breakdowns with some great charts and re-useable widgets. They also have [an app](https://www.cs.ox.ac.uk/people/alex.rogers/gridcarbon/).
## Transportation
- [Biking vs. Driving Calculator](https://bicycleuniverse.com/car-free-millionaire/) - Riding your bike can make you a millionaire! You're paying more for your car than you think. A typical American who goes car-free for 35 years can save nearly a million dollars, even adjusted for inflation, and even if they pay for taxi, bus, and car-share trips often. Use the calculator to find how much you can save in your particular situation.
- [BlaBlaCar](https://www.blablacar.com/) - The world’s leading long-distance carpooling platform, which is available in most of Europe and Mexico.
- [British Heart Foundation - Toxic Air Campaign](https://www.bhf.org.uk/toxicair) - Air pollution is toxic. Join us in demanding change now. Simply living in the worst hit areas of the UK could be as deadly as smoking over 150 cigarettes each year. British Heart Foundation is calling for the UK Government to update current air quality limits to match World Health Organization recommendations.

- [Change How You Travel from Climate Choice](https://climatechoice.co/change-how-you-travel) - 26% of the greenhouse gases emitted into our atmosphere are from the production and use of vehicles and airplanes. See what what you can do now, and learn about the benefits of changing your travel.
- [Commute on Electric Bicycles](https://ebiketips.road.cc/content/advice/buyers-guide/9-of-the-best-e-bikes-under-1000-2020-electric-bikes-on-a-budget-2209) - Like the idea of cycling but feel like it's a bit far, bit hilly, or no access to a shower at the other end? E-bikes aren't just for the older riders, they've pushed into the mainstream culturally and financially, and are a hell of a lot of fun. Combine it with local ""cycle to work schemes"" listed here for extra savings, some places do [specific deals on e-bikes](https://urbanebikes.com/pages/cycle-to-work-scheme-electric).

- [Commute on Electric Motorbikes](https://urbanebikes.com/collections/electric-motorbikes) - Electric cars are still priced beyond the reach of many, but swapping a car for an electric motorbike will leave plenty of cash in your pocket. The average used car sells for $20,840 in the USA, and you can get a lot of electric motorbike for $3,000. Finding a used electric motorbike will get that manufacturing footprint off your conscience too.

- [Cycle to Work Scheme Ireland](https://www.revenue.ie/en/jobs-and-pensions/taxation-of-employer-benefits/cycle-to-work-scheme.aspx) - Under the scheme your employer can buy a bicycle and safety equipment for you, up to €1,000 per bicycle and safety equipment.
- [Cycle to Work Scheme UK](https://www.cyclingweekly.com/news/latest-news/cycle-to-work-scheme-10-things-to-know-5055/amp) - This scheme allows employees to spend on bikes and equipment, tax-free, making a claimed saving of up to 42 per cent on the overall value.
- [DHL GoGreen](https://www.dpdhl.com/en/responsibility/environment-and-solutions.html) - GoGreen Solutions include both standardized products and customized solutions to help customers develop their own eco-friendly business models and green supply chains. With our carbon reports, climate neutral products, and green optimization, we give customers transparency, offset unavoidable emissions, and identify ways in which our customers can reduce emissions and waste. These optimization measures achieve savings potential that most companies would not be able to achieve on their own.

- [Pod Point](https://pod-point.com) - UK leaders in electric vehicle charging with innovative solutions for homes, workplaces and commercial organizations.
- [Poparide](https://www.poparide.com/) - Get a ride or fill a seat for rideshares between cities in Canada. Having 3 people in the car can be more efficient than some of their big-ass trains and is 1/5th the impact of flying.
- [Share Now](https://www.share-now.com/) - With car-sharing, you don't have to buy or lease a car. Share Now cars are available around every street corner in loads of cities around the world. Find us in 16 major cities in 8 countries in Europe and all over the US – for all your plans, big and small. Includes free parking, no need to pay for maintenance, insurance, or petrol, and loads of them are electric too! Package deals available for businesses to help employees ditch their car when active/public transportation is not an option.
- [TomTom's EV Station Finder](https://www.tomtom.com/products/ev-charging-availability-routing-services/) - With TomTom's EV charging infrastructure, 'eco-routing' to calculate energy efficient routes (!), in-range EV station finder, real-time availability monitoring, on-demand information, TomTom is continuing to invest in the largest electric vehicle map coverage with 330,000+ charging points in 50 countries throughout Europe, The Americas, the Middle East, and Asia.
- [VanMoof](https://www.vanmoof.com/) - ""City-proof"" bikes, with electric assist, which ship fully assembled. They're baked full of anti-theft tech, and they'll hunt your bike down if it does get stolen. In some countries there is a subscription service where they'll fix things up for you if you have any trouble, but just the base bike alone is a stunning beautiful electric bike with dynamo hubs, built in lights, and sturdy mudguards, so you can ride it all day and night.
- [WageWorks Bicycle Reimbursement Program](https://www.wageworks.com/employees/lifestyle-benefits-programs/bicycle-reimbursement-program/) - Ride your bike to work and pay for eligible bike-related expenses, and then get reimbursed for those expenses.
- [Waze Carpool](https://www.waze.com/carpool) - Choose to drive or ride, and match with people based on route and time of day.
- [Workhorse - Electric Delivery Vehicles](https://workhorse.com/) - All-electric by design, with composite technology, and a 100-mile range, it's expected to be more economical than traditional delivery vans. Our current delivery vans, E-100 and E-GEN, have more than 4 million miles on them and are used by some of the premier package delivery companies in the world.
## Travel
- [BlaBlaCar](https://www.blablacar.com/) - The world’s leading long-distance carpooling platform, which is available in most of Europe and Mexico.
- [Change How You Travel from Climate Choice](https://climatechoice.co/change-how-you-travel) - 26% of the greenhouse gases emitted into our atmosphere are from the production and use of vehicles and airplanes. See what what you can do now, and learn about the benefits of changing your travel.
- [EcoBnB](https://ecobnb.com/) - Find accommodation for a trip with a focus on sustainability. Most locations get their electricity from renewable sources, you wont find loads of single-use plastics, they recycle more than 80% of their waste, etc.
- [Flight Free (UK)](https://flightfree.co.uk/) - Aviation is the fastest growing contributor to greenhouse gas emissions at a time when we desperately need to reduce them. Pledge to go flight free in 2020.
- [Flight Free (USA)](https://flightfreeusa.org/) - A grassroots campaign which asks people to agree not to fly in the year of 2020 – on condition that 100,000 others will also pledge to do the same.
- [Green Tickets](https://greentickets.app/) - Traveling is amazing, right? We completely agree! But you probably know that traveling can have a large climate impact. With Green Tickets you can take responsibility of your travel behaviour and reduce your footprint, while still enjoying everything that traveling has to offer.
- [Home Exchange](https://www.homeexchange.com/) - Swap homes with another family instead of spending money at a fancy hotel, as hotels have a much higher footprint due to the constant cleaning, overactive AC, etc.
- [Maris - Freighter Cruises](http://www.freightercruises.com/) - These giant freight ships are not running on renewable energy, but if you need to cross an ocean this is the way to do it. Europe to North America, England to Australia, Shanghai to Argentina. It's slower, but your carbon footprint will be saved.
- [Poparide](https://www.poparide.com/) - Get a ride or fill a seat for rideshares between cities in Canada. Having 3 people in the car can be more efficient than some of their big-ass trains and is 1/5th the impact of flying.
- [Responsible Vacation](https://www.responsiblevacation.com/) - A travel company who run sustainable trips all over the world. Sail from Scotland to Iceland, cycle across Vietnam, hike in Peru. Admittedly some of these trips will require a flight to get there, but one trip a year (or alternative years) is probably reasonable. At least when you get there, these vacations will be helping and protecting local nature, wildlife and culture.
- [Restons Les Pieds Sur Terre](https://www.facebook.com/restonslespiedssurterre/) - Aviation is the fastest growing contributor to greenhouse gas emissions at a time when we desperately need to reduce them. Pledge to go flight free in 2020.
- [Rome2rio](https://rome2rio.com/) - Search any city, town, landmark, or address across the globe and find a whole bunch of different ways to get there. Rome2rio is pretty insistent on showing you flights, but it can help you find bus and train combinations to get from Lisbon to Azerbaijan if that's a trip you need to do.

- [Rubicon 3](https://www.rubicon3.co.uk/) - Join the crew of one of our sailing expeditions for one of the greatest adventures you can have. Sail from country to country, exploring the world’s most awe-inspiring areas. Learn to sail as you go from inspiring instructors. Make landfall and explore ashore far from the beaten track.
- [Seat61](https://www.seat61.com/) - Train travel is a more rewarding, low-stress alternative to flying, which brings us closer to the countries we visit and reduces our contribution to climate change. It's time to rediscover the pleasure, romance & adventure of travel by train or ship. This site explains how to travel comfortably & affordably by train or ferry where you might think air was now the only option. For help with train travel, ask the Man in Seat 61!
- [Slow Travel (Langsamreisen)](https://www.langsamreisen.de/) - A travel company all about sustainable and conscious travel. Piggy back on a cargo ship to get to that new job on the other side of the world. Sailing trips to get around without a footprint. Maybe take the trans-siberian railway.
- [Snow Carbon](http://snowcarbon.co.uk/) - Wish you could avoid airport queues, tedious transfers and long drives? Want to travel sustainably and enjoyably by train instead - to fantastic accommodation in the best ski resorts in the Alps? Snowcarbon is an independent guide founded by ski journalist Daniel Elkan to help you do exactly that.

- [Stay Grounded](https://stay-grounded.org/) - A global network of more than 150 member organisations, among them local airport opposition and climate justice groups, NGOs, trade unions, initiatives fostering alternatives to aviation like night trains, and organisations supporting communities which struggle against offset projects or biofuel plantations
- [Tentrr](https://www.tentrr.com/) - AirBnB for camping, with fully setup glamping sites to natural land where you bring your own gear. Land conservation is expensive. With Tentrr Landtrust, your qualifying trust can receive a professionally installed, fully equipped signature campsite. It's an instant revenue generator for your conservation efforts.
- [The Travel Foundation](https://www.thetravelfoundation.org.uk/) - Find hotels here which aren't all plastic all the time, amongst other things. This charity brings together travel businesses, suppliers, community groups, governments, local authorities and more to develop practical solutions which maximise the benefits and minimise the negative impacts of tourism in destinations.
## Volunteering
- [Citizens Climate Lobby](https://citizensclimatelobby.org/) - If you’re an English, economics or poly sci major, you probably should consider volunteering for Citizens’ Climate Lobby, an organization focused on confronting climate change through policy.
- [Clean Trails](https://www.cleantrails.org/join) - Step by step, and little by little, our aim is to eliminate waste on all the trails that grace our public lands.  We believe we can do that in a positive and proactive manner by educating, encouraging, and reconnecting outdoor users to our pristine places.
- [ClimateAction.Tech](https://climateaction.tech/) - A global community of tech professionals using our skills, expertise and platforms to support solutions to the climate crisis. The mission is to empower technology professionals to play our part — to meet, discuss, learn and take climate action.
- [ClimatePrediction.net](https://www.climateprediction.net/) - The world’s largest climate modelling experiment. Evidence of how our climate is changing is vital to reducing greenhouse gas emissions.  Help discover how the climate could look by running software on your computer.
- [Economists for Future](https://econ4future.org/) - Economists for Future growing movement of people committed to galvanising the economics community behind addressing the greatest challenge of our day. If the discipline which dedicates itself to studying the economy cannot sufficiently engage in the economic transformation that the climate science requires, then who else can be expected to do this?
- [Extinction Rebellion](https://rebellion.global/) - Extinction Rebellion is a decentralised, international and politically non-partisan movement using non-violent direct action and civil disobedience to persuade governments to act justly on the Climate and Ecological Emergency.
- [Eyes of the Reef Hawai'i](https://eorhawaii.org/2013/07/18/become-a-member/) - Network to inform, engage and train people to identify coral bleaching, disease and invasive species outbreaks. They have a broad outreach program that helps to provide critical training for rapid response monitoring and stewardship of precious marine resources.
- [Greenpeace](https://engage.us.greenpeace.org/onlineactions/Hx3BaZLxxkyUUo2Jfzsk7w2) - Greenpeace has many ways for people to get involved. Start small by launching and participating in campaigns and petitions, or go further and discover or create events. Play an active role in achieving a green and peaceful future!
- [Habitat for Humanity](http://www.habitat.org/getinv) - Habitat for Humanity is well known for building simple, affordable homes for people in need. But recently the organization has implemented new programs recognizing climate change as a major threat to the environment and which can destroy the homes they build.
- [MakeSense Jobs](https://jobs.makesense.org) - Makesense inspires and empowers citizens, entrepreneurs and organizations to build an inclusive and sustainable society together.  MakeSense's Job and assignment announcements platform for associations and social entrepreneurs who recruit profiles passionate about the impact. Job types include internship, freelance, civic service, partner, program, volunteer mission, mentoring.
- [Oceanic Society](https://www.oceanicsociety.org/) - Oceanic Society was founded in 1969 by a group of San Francisco Bay Area sailors and scientists who were concerned about the state of the oceans and decided to take action. Inspired by the events of their day—like the Santa Barbara oil spill of 1969, the publication of Rachel Carson's Silent Spring, and growing public concern for the environment—they came together to form Oceanic Society, the first non-profit organization in America dedicated to marine conservation. Their aim was to bring greater public awareness and political action to issues of ocean health and to grow the global community of people working toward improved ocean stewardship. Oceanic Society helped put ocean conservation on the public radar. Some of our many accomplishments include: Creating the Oceanic Society Patrol and Farallon Patrol, pioneering ecotourism and volunteer vacations, inspiring a generation of ocean lovers through Oceans magazine, Leading the way in whale watching, strengthening local sea turtle conservation, globally and innovating a focus on behavior change.
- [Precious Plastic](https://preciousplastic.com/) - Open-source community who share instructions for creating plastic shredders, injectors, and sheet presses, so you can create anything you want from used plastic. Collect plastic from neighbors, clean it, shred it, [3D print a mold](https://pinshape.com/blog/low-cost-injection-molding-using-3d-printing/), and create anything you can imagine! You can [buy the machines](https://preciousplastic.com/solutions/machines/overview.html) too if making them is out of your wheelhouse.

- [Take Climate Action](https://takeclimateaction.uk/) - Climate Action groups are made up of people like you and together they’ll bring about big systemic change. Join the network and kick-start climate action in your community.
- [Tell Microsoft to End Big Oil Contracts](https://engage.us.greenpeace.org/onlineactions/Hx3BaZLxxkyUUo2Jfzsk7w2) - Right now, while our planet speeds toward the brink of the climate crisis, Microsoft is putting its foot on the accelerator. As oil and gas profits continue to fall, giant oil corporations have turned to cloud computing and artificial intelligence (AI) to answer their problems. Microsoft promises companies like ExxonMobil that its analytical tools and other AI technologies will help them discover and pump even more oil at a lower cost. This Greenpeace petition will let Microsoft know this is not acceptable.
- [Transition Network](https://transitionnetwork.org) - A global movement of communities coming together to reimagine and actively rebuild our world. The terms transition town, transition initiative and transition model refer to grassroot community projects that aim to increase self-sufficiency to reduce the potential effects of peak oil, climate destruction, and economic instability.
- [Tree Folks](https://www.treefolks.org/volunteer/) - Tree planting and tree care events around Austin, Texas, from October to April.
- [Woodland Trust](https://www.woodlandtrust.org.uk/) - The Woodland Trust is reforesting the United Kingdom, working with communities, local authorities, and land owners, to get trees in the ground.
- [World Cleanup Day](https://www.worldcleanupday.org/) - World Cleanup Day is a civic movement, uniting 180 countries and millions of people across the world to clean up the planet. In one day. Volunteers and partners worldwide come together to rid our planet of trash – cleaning up litter and mismanaged waste from our beaches, rivers, forests, and streets.
## Waste
- [Algramo](https://www.algramoalmacenes.com/) - Vending machines and mobile refill units for refilling reusable plastic bottles with staple goods from shampoo to salad dressing in packaging that is designed to be returned, cleaned, and reused.  With over 2,000 bodegas in Santiago and plans to expand in the US soon, Algramo, translates to ""by the gram"", also solves the issue of ""poverty tax"" where small packages can cost as much as 50% more than the same product in a larger size.
- [Bio Bean](https://www.bio-bean.com/) - The world’s largest recycler of coffee grounds, Bio Bean recycle spent coffee grounds into sustainable products, like coffee logs for fires, and other biomass fuel.
- [Bio-plastic Trash Bags](https://www.amazon.com/Plant-Based-Kitchen-Handles-Gallon/dp/B071JMFKM5/) - Made from Plant Based (sugar cane) materials instead of fossil fuel.
- [Blue Jeans Go Green](https://bluejeansgogreen.org/) - Send in your used jeans to get transformed into natural cotton fiber insulation, some of which is used to help with building efforts around the country.
- [Boulder Food Rescue](https://www.boulderfoodrescue.org/) - We facilitate the sustainable redistribution of healthy food that would otherwise be wasted to low-income communities, by bicycle. We work with communities to facilitate their own food redistribution and create decentralized systems to bypass barriers to food access. Our work envisions a world in which everyone has equitable access to healthy food.
- [Burying Food Scraps](https://www.youtube.com/watch?v=yQFB9M2UdK0) - Composting can be time consuming, expensive, and if done incorrectly it can actually produce a lot of methane. If you've got a bit of space in your garden, this video shows how simply burying food scraps can be a quick and simple solution to get rid of waste and improve soil quality too.

- [Circular Berlin](http://circular.berlin/) - A Berlin based non-profit developing the local circular economy agenda through research, community-building and practical programmes. Good overview of events and initiatives happening in Berlin.

- [City Harvest](https://www.cityharvest.org/) - City Harvest is New York City’s largest food rescue organization. They rescue food and deliver it to hundreds of food pantries, soup kitchens and other community partners.
- [Clean Cult](https://cleancult.pvzi.net/qq4kq) - Cleaning supplies with zero-waste packaging, and a powerful clean that's better for you and the planet.
- [Donate Toys](https://www.moneycrashers.com/where-donate-used-toys/) - Donate toys that your children have grown out of instead of throwing them away.
- [EU: Right to Repair](https://repair.eu/) - Cracked screens, weak batteries, broken charging ports... We’d like to fix them, but instead we end up buying a new smartphone because repairs are too expensive, difficult or impossible. Reducing the lifespan of a product may drive sales, but this comes at the expense of consumers, workers and the planet. Ask the European Union to give people the Right to Repair by requiring manufacturers to design repairable smartphones and provide spare parts and repair information to all repairers and consumers.

- [Food Cloud](https://food.cloud/) - FoodCloud is a social enterprise that connects businesses with surplus food to charities in their local communities that need it via a software platform.
- [Geev](https://corporate.geev.com/) - An online application to exchange stuffs and food between people. Easily discuss, meet and give a second life to objects and food.  The more you give the more people trust you when you want to get something.
- [GrowNYC Food Scrap Collection Schedule](https://www.grownyc.org/compost/locations) - Interactive map with over 150 residential Food Scrap Drop-Off sites in NYC.
- [Kaiyo](https://kaiyo.com/) - Buy and sell used furniture to keep it out of landfill. They'll even come and pick it up! _I've used this to get rid of a giant sofa which nobody wanted to buy, it was about to go on the street and they got me a cheque._
- [Karma](https://new.karma.life/) - A Swedish company that lets restaurants sell surplus food at a lower price. It lets you pay less for food and prevent food waste.
- [Litterati](https://www.litterati.org/) - Empowering people to clean the planet. Photograph a piece of litter, tag it, and discard properly.  Participate in a challenge and hold wasteful brands accountable.
- [No Food Wasted](http://www.nofoodwasted.com/) - NoFoodWasted maps products that reach the best before date and shows where and how much you can save. Download the app, select a provider near you and start saving today.
- [Olio](https://olioex.com/) - We connect neighbors to share food, and other things, rather than chuck them away.
- [Open Circularity](https://opencircularity.info/) - Lars Zimmermann runs Mifactori Design & Activism Studio in Berlin. This website is where he shares content & thoughts on Open Source Circularity. General idea is - open source all products, allowing them to be repaired or repurposed if they break rather than ending up in landfill.

- [OpenStreetMap: Zero Waste (Overpass)](http://overpass-turbo.eu/?template=key&key=zero_waste) - OpenStreetMap has the tag zero_waste=* for shops who sell items without packaging.
- [Original Unverpackt](https://original-unverpackt.de/) - Zero packaging supermarket in Berlin. Original Unverpackt hat sich als erster Supermarkt weltweit dem Zero-Waste-Lifestyle gewidmet.
- [Pieter Pot](https://www.pieter-pot.nl/) - Your groceries, delivered without packaging. Pieter Pot delivers your groceries with a cargo bike in beautiful glass jars in The Netherlands. Empty pot? Then we fill it again. This is how we make it fun and easy to do shopping without all those unnecessary (plastic) packaging. That's nice, right?
- [Precious Plastic](https://preciousplastic.com/) - Open-source community who share instructions for creating plastic shredders, injectors, and sheet presses, so you can create anything you want from used plastic. Collect plastic from neighbors, clean it, shred it, [3D print a mold](https://pinshape.com/blog/low-cost-injection-molding-using-3d-printing/), and create anything you can imagine! You can [buy the machines](https://preciousplastic.com/solutions/machines/overview.html) too if making them is out of your wheelhouse.

- [Pure Waste](https://www.purewaste.org/) - Helsinki based, making 100% recycled clothing out of waste materials.
- [Recycle Now](https://www.recyclenow.com/) - Find out where to recycle pretty much anything, including aerosols, old mobile phones, soft plastics, and get advice on how to reduce waste too.
- [ReNu Furniture](https://renufurniture.co.uk/) - Prevent landfill waste and buy second-hand, upcycled and handmade furniture easily with ReNu Furniture. Based in Brighton and covering the UK southeast, this start up will manage the collection, delivery and payments for every furniture sale - they even plant a tree for every delivery to offset carbon emissions. 
- [Repair Café](https://repaircafe.org/) - Repair Cafés are free meeting places and they’re all about repairing things (together). You’ll find tools and materials to help you make any repairs to clothes, furniture, electrical appliances, bicycles, crockery, appliances, toys, et cetera. You’ll also find expert volunteers, with repair skills in all kinds of fields. Repair your stuff, or just enjoy a coffee. They're world-wide, and the site is multi-lingual.
- [Rethink Food NYC](https://www.rethinkfood.nyc/) - They pick up unused, excess food from restaurants, farms, and other food purveyors, and re-purpose it into delicious and nutritious meals for under-served New Yorkers.
- [Sonny](https://www.indiegogo.com/projects/sonny-a-portable-bidet-for-eco-conscious-humans/x/17318484#/) - Never worry about running out of toilet paper again with Sonny, a sustainable alternative to wipes and paper for better hygiene and a greener planet.
- [The Rotten Fruit Box](https://therottenfruitbox.com/) - 100% Natural Freeze-Dried Fruit Snacks from Spain and Portugal shipped to you. The fruit you’re enjoying would have otherwise gone unused and rotted away on the ground. We also think that the name ""Rotten"" helps bring attention to the serious issue of food waste. Delicious, healthy, 100% natural, with a long shelf life, our freeze dried fruit snack pouches are ideal for home, work, office, to take to school, camping or just about anywhere. Help reduce food waste. Help small local farmers. 100% compostable packaging, ships with your local postal service because it is the lowest carbon footprint option.
- [Too Good To Go](https://toogoodtogo.co.uk/) - Sell your surplus food, easily and sustainably! Save delicious food and fight food waste. Find your favorite food and go rescue it.
- [Vegware](https://vegware.co.uk/) - Napkins, carrier bags, salad boxes, sushi trays, cutlery, disposable coffee cups, all made from plants using renewable, lower carbon, recycled or reclaimed materials, and designed to be commercially compostable with food waste, where accepted.
- [What is my lamp worth?](https://www.watismijnlampwaard.nl/) - Find the nearest collection points for discarded electrical appliances and energy-efficient light bulbs. This site helps you responsibly recycle, donate, repair, or sell electrical appliances and lights.

## YouTube Channels
- [Climate Town](https://www.youtube.com/channel/UCuVLG9pThvBABcYCm7pkNkA) - Rollie Williams and a ragtag team of climate communicators, creatives and comedians are here to examine climate change in a way that doesn’t make you want to eat a cyanide pill.
- [ClimateAdam](https://www.youtube.com/user/ClimateAdam) - Doctor in climate science from Oxford. Trying to make sense of climate change with fun YouTube vids.
- [Hot Mess](https://www.youtube.com/channel/UCsaEBhRsI6tmmz12fkSEYdw) - A show about how climate change impacts all of us, and about how we can create a better future for our planet and ourselves. Hosted by Miriam Nielsen, Talia Buford, and Joe Hanson.
- [Our Changing Climate](https://www.youtube.com/channel/UCNXvxXpDJXp-mZu3pFMzYHQ) - A bi-weekly video essay series that investigates humanity's relationship to the natural world.
- [Simon Clark](https://www.youtube.com/user/SimonOxfPhys) - PhD in climate physics by day, YouTuber by night. He makes videos about both!

## Zero Waste
- [Berkley Water Filters](https://www.berkeyfilters.com/) - 21,000,000 Americans drink water that violates U.S. health standards. Berkey water filter systems are actually water purifiers because they remove bacteria and viruses that conventional filters cannot.<!-- links:end -->
- [Kent Zero Water Wastage Technology](https://www.kent.co.in/water-purifiers/zero-water-wastage-technology) - KENT RO Purifiers equipped with the ‘Zero Water Wastage’ Technology push back the rejected water to the overhead tank, thereby rendering wastage to zero. As a result, instead of wasting the rejected water, it gets diluted and reused as normal tap water for household purposes.<!-- links:end -->

## Contributing

Please send us a PR because all this data is powered by contributions. We're trying to learn about projects from all over the world, so wherever you're from and whatever language you want to write the descriptions in, please send a PR to this file!

## License

The list in this README under [CCO](https://creativecommons.org/publicdomain/zero/1.0/)
but the remaining source code is [MIT](https://choosealicense.com/licenses/mit/).
",1279,1279,39,15,renewable-energy,"[awesome, awesome-list, carbon-emissions, carbon-footprint, carbon-reduction, climate-action, climate-change, climate-crisis, food-waste, footprint-calculators, renewable-energy]",00000
1153,makani,google,google,https://github.com/google/makani,https://api.github.com/repos/google/makani,"Makani was a project to develop a commercial-scale airborne wind turbine, culminating in a flight test of the Makani M600 off the coast of Norway. All Makani software has now been open-sourced. This repository contains the working Makani flight simulator, controller (autopilot), visualizer, and command center flight monitoring tools. Additionally, almost all avionics firmware is also included, albeit potentially not in a buildable state, due to the removal of some third-party proprietary code. We hope that this code will be inspirational and useful to the kite-based windpower and wider communities.","# Makani

Makani was a project to develop a commercial-scale airborne wind turbine, culminating in
a flight test of the Makani M600 off the coast of Norway. All Makani software has now been
open-sourced. This repository contains the working Makani flight simulator, controller (autopilot),
visualizer, and command center flight monitoring tools. Additionally, almost all avionics firmware
is also included, albeit potentially not in a buildable state, due to the removal of some
third-party proprietary code. We hope that this code will be inspirational and useful to the
kite-based windpower and wider communities.

For more information about Makani, please visit https://x.company/projects/makani/

## A brief tour of the code

 * `analysis` - Miscellaneous analysis scripts. The most important files here
   are `analysis/control/crosswind.py`, which generates the gains for the
   crosswind inner loop controller, and
   `analysis/control/generate_hover_controllers.m`, which generates the gains
   for the hover controller.
 * `avionics` - Firmware for the winch, ground station, motors, network, servos, batteries,
   network switches, GPS, strobe lights, etc.
 * `control` - The hover, transition-in, crosswind, and off-tether flight controllers.
 * `common`
 * `config` - A Python-based configuration system produces a JSON dict
   specifying all system, controller, and simulation parameters. This is
   translated into a read-only C structure at compile-time.
 * `database` - Aero tables, Pitot calibration tables, etc.
 * `documentation`
 * `vis` - OpenGL-based visualizer that depicts the state of the system during
   simulation and real flight.

## How to build

This code base was originally designed to run on Linux systems running the Debian Stretch
distribution. For the convenience of future users, we are shipping this open source release
with a script to create the necessary environment within Docker.

### Using Debian Stretch natively or as a VM

1. Run `./lib/scripts/install/install_packages.sh`
1. Run `source ~/.bashrc`
1. Run `cd ${MAKANI_HOME}`
1. To build everything, run `bbuild_x86`
1. To test everything, run `btest_all`

### Using Docker

We have tested the Docker solution in some Linux systems. We also tested it on
macOS but we were unable to get the visualizer running due to an issue with
libGL (the rest of the simulation software did work).

1. Run `./docker_build.sh`
1. Run `./docker_run.sh`

Inside of docker:

1. Run `cd ${MAKANI_HOME}`
1. To build everything, run `bbuild_x86`
1. To test everything, run `btest_all`

## How to run the Makani flight simulator

1. Run `sudo route add -net 239.0.0.0 netmask 255.0.0.0 dev lo`
1. Run `cd ${MAKANI_HOME}`
1. Run `run_sim -S -M flight`

This command will open the visualizer. If running natively or a VM, and have
Chrome installed, the webmonitor should open automatically. If not, open
`http:///localhost:8000` on your browser.

For a full list of available flags when running the simulator, see the file
`sim/run_sim.py`.

## Other commands

For a list of preconfigured commands, see `lib/scripts/operator` and
`lib/scripts/developer`.

## How to read the logs

The Control Telemetry Users' guide, included as a PDF with this distribution, gives a full
description of log file data structures. Below are examples for how to load and plot log data
using Python or MATLAB.

### Python
Here's a small example showing how to load an h5 log file in Python and plot a variable (in this case, the kite's altitude). Accessing the log files is made much less painful by enabling tab-completion of telemetry fields; instructions are in `lib/python/ipython_completer.py`.

```python
import h5py
import pylab

log = h5py.File('20161121-142912-flight01_crosswind.h5', 'r')
c = (log['messages']['kAioNodeControllerA']
        ['kMessageTypeControlTelemetry']['message'])
pylab.plot(c['time'], -c['state_est']['Xg']['z'])
pylab.show()`
```

Additionally, by starting Python with `bazel-bin/lib/bazel/pyembed ipython`, you will be able to access some Makani library functions (like `DcmToAngle`) directly from Python.

You can also explore the field names using `.items()` or `.keys()` and `.dtype` as appropriate:

```python
log.keys()  # Shows [u'bad_packets', u'messages', u'parameters']
log[‘messages’].keys()  # Shows [u’kAioNodeBattA', … ]

# The number of messages of this type in the h5 file:
log['messages/kAioNodeBattA/kMessageTypeSlowStatus'].len()

# The first message:
log['messages/kAioNodeBattA/kMessageTypeSlowStatus'][0]

# The nested field names:
log['messages/kAioNodeBattA/kMessageTypeSlowStatus'][0].dtype`
```

### MATLAB
Here's a small example showing three ways to load an h5 log file in MATLAB and plot a variable (in this case, the kite's altitude).

#### Method 1
A quick way to load a specific telemetry dataset to the workspace using a MATLAB built-in function.

```matlab
c = h5read('20161121-142912-flight01_crosswind.h5', '/messages/kAioNodeControllerA/kMessageTypeControlTelemetry');
time = c.message.time;
altitude = -c.message.state_est.Xg.z;
figure;
plot(time, altitude)
```

#### Method 2
A slower way to load the entire telemetry to the workspace. NOTE: This method only works in MATLAB 2016a and earlier. Find out your MATLAB version by running “ver” on the console. You need the makani repository loaded to your computer.

Open MATLAB and navigate to the following directory on the console:

```bash
$MAKANI_HOME/analysis
```

Run the following script in the MATLAB console to set all relevant paths:

```matlab
SetMatlab
```

Now you can run the following code on console to access telemetry data:

```matlab
log = h5load('20161121-142912-flight01_crosswind.h5');
c = log('/messages/kAioNodeControllerA/kMessageTypeControlTelemetry');
Time = c.message.time;
Altitude = -c.message.state_est.Xg.z
figure;
plot(Time, Altitude)
```

#### Method 3
The best of both worlds! A lazy way to loads all datasets quickly. You need the makani repository loaded to your computer.

Open MATLAB and navigate to the following directory on the console:

```bash
$MAKANI_HOME/analysis
```

Run the following script in the MATLAB console to set all relevant paths:

```matlab
SetMatlab
```

Now open the H5Plotter (a GUI interface for opening and plotting H5 log data) by running the following in the MATLAB console:

```matlab
H5Plotter
```

Load a H5 log file using the ‘Choose’ button in the top right corner. Once the file is loaded, datasets appear in ‘AIO Nodes’ panel box. Click on one or more of these nodes to access the corresponding datasets in the ‘AIO Messages’ panel box. Only datasets common to all selected AIO nodes are shown.

Once you have selected data to plot in the ‘AIO Messages’ panel box, use the ‘plot’ button at the bottom right corner to visualize the data. Holding ctrl or shift allows multiple fields to be selected and selecting a node in the tree will plot all data contained beneath that node. Data can also be exported by right clicking.

NOTE: You can plot multiple datasets simultaneously on the same time axes. How many datasets you can plot at the same time is only limited by your machine’s RAM; be judicious about this.

#### Matlab Example: Plot roll, pitch, and yaw

Here's a small example that converts the `dcm_g2b` matrix into Euler angles.

```matlab
% Read the log file.
filename = '20161121-142912-flight01_crosswind.h5';
c = h5read(filename, ...
    '/messages/kAioNodeControllerA/kMessageTypeControlTelemetry');

% Fetch the dcm_g2b matrix 
dcm_g2b = c.message.state_est.dcm_g2b.d;

% Transpose the dcm_g2b matrix.
dcm_g2b = permute(dcm_g2b, [2 1 3]);

% Compute Euler angles.
[yaw, pitch, roll] = dcm2angle(dcm_g2b, 'ZYX');

% Plot the results.
plot(c.message.time, roll  * 180/pi, '.', ...
     c.message.time, pitch * 180/pi, '.',...
     c.message.time, yaw   * 180/pi, '.')
legend('roll', 'pitch', 'yaw')

ylim([-180 180]);
set(gca, 'YTick', -180:30:180);
grid on;
xlabel('controller time [s]');
ylabel('angle [degrees]');
title(['flight attitude (' filename ')'], 'interpreter', 'none');
```
",1170,1170,69,5,renewable-energy,"[energy-kites, makani, renewable-energy, wind, wind-power]",00000
1154,pvlib-python,pvlib,N/A,N/A,https://api.github.com/repos/pvlib/pvlib-python,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DD:1F34:1B8FB6E:38A52C7:65224146.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1155,PyPSA,PyPSA,PyPSA,https://github.com/PyPSA/PyPSA,https://api.github.com/repos/PyPSA/PyPSA,PyPSA: Python for Power System Analysis,"# PyPSA - Python for Power System Analysis


[![PyPI version](https://img.shields.io/pypi/v/pypsa.svg)](https://pypi.python.org/pypi/pypsa)
[![Conda version](https://img.shields.io/conda/vn/conda-forge/pypsa.svg)](https://anaconda.org/conda-forge/pypsa)
[![CI](https://github.com/pypsa/pypsa/actions/workflows/CI.yml/badge.svg)](https://github.com/pypsa/pypsa/actions/workflows/CI.yml)
[![CI with micromamba](https://github.com/pypsa/pypsa/actions/workflows/CI-micromamba.yml/badge.svg)](https://github.com/pypsa/pypsa/actions/workflows/CI-micromamba.yml)
[![Code coverage](https://codecov.io/gh/PyPSA/PyPSA/branch/master/graph/badge.svg?token=kCpwJiV6Jr)](https://codecov.io/gh/PyPSA/PyPSA)
[![Documentation Status](https://readthedocs.org/projects/pypsa/badge/?version=latest)](https://pypsa.readthedocs.io/en/latest/?badge=latest)
[![License](https://img.shields.io/pypi/l/pypsa.svg)](LICENSE.txt)
[![Zenodo](https://zenodo.org/badge/DOI/10.5281/zenodo.3946412.svg)](https://doi.org/10.5281/zenodo.3946412)
[![Examples of use](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/PyPSA/PyPSA/master?filepath=examples%2Fnotebooks)
[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/PyPSA/PyPSA/master.svg)](https://results.pre-commit.ci/latest/github/PyPSA/PyPSA/master)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
[![Discord](https://img.shields.io/discord/911692131440148490?logo=discord)](https://discord.gg/AnuJBk23FU)
[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](CODE_OF_CONDUCT.md)
[![Stack Exchange questions](https://img.shields.io/stackexchange/stackoverflow/t/pypsa)](https://stackoverflow.com/questions/tagged/pypsa)

PyPSA stands for ""Python for Power System Analysis"". It is pronounced
""pipes-ah"".

PyPSA is an open source toolbox for simulating and optimising modern power and
energy systems that include features such as conventional generators with unit
commitment, variable wind and solar generation, storage units, coupling to other
energy sectors, and mixed alternating and direct current networks. PyPSA is
designed to scale well with large networks and long time series.

This project is maintained by the [Department of Digital Transformation in
Energy Systems](https://tub-ensys.github.io) at the [Technical University of
Berlin](https://www.tu.berlin). Previous versions were developed by the Energy
System Modelling group at the [Institute for Automation and Applied
Informatics](https://www.iai.kit.edu/english/index.php) at the [Karlsruhe
Institute of Technology](http://www.kit.edu/english/index.php) funded by the
[Helmholtz Association](https://www.helmholtz.de/en/), and by the [Renewable
Energy
Group](https://fias.uni-frankfurt.de/physics/schramm/renewable-energy-system-and-network-analysis/)
at [FIAS](https://fias.uni-frankfurt.de/) to carry out simulations for the
[CoNDyNet project](http://condynet.de/), financed by the [German Federal
Ministry for Education and Research (BMBF)](https://www.bmbf.de/en/index.html)
as part of the [Stromnetze Research
Initiative](http://forschung-stromnetze.info/projekte/grundlagen-und-konzepte-fuer-effiziente-dezentrale-stromnetze/).

## Functionality

PyPSA can calculate:

-   static power flow (using both the full non-linear network equations and the
    linearised network equations)
-   linear optimal power flow (least-cost optimisation of power plant and
    storage dispatch within network constraints, using the linear network
    equations, over several snapshots)
-   security-constrained linear optimal power flow
-   total electricity/energy system least-cost investment optimisation (using
    linear network equations, over several snapshots and investment periods
    simultaneously for optimisation of generation and storage dispatch and
    investment in the capacities of generation, storage, transmission and other
    infrastructure)

It has models for:

-   meshed multiply-connected AC and DC networks, with controllable converters
    between AC and DC networks
-   standard types for lines and transformers following the implementation in
    [pandapower](https://www.pandapower.org/)
-   conventional dispatchable generators and links with unit commitment
-   generators with time-varying power availability, such as wind and solar
    generators
-   storage units with efficiency losses
-   simple hydroelectricity with inflow and spillage
-   coupling with other energy carriers (e.g. resistive Power-to-Heat (P2H),
    Power-to-Gas (P2G), battery electric vehicles (BEVs), Fischer-Tropsch,
    direct air capture (DAC))
-   basic components out of which more complicated assets can be built, such as
    Combined Heat and Power (CHP) units and heat pumps.

## Documentation

[Documentation](https://pypsa.readthedocs.io/en/latest/index.html)

[Quick start](https://pypsa.readthedocs.io/en/latest/quick_start.html)

[Examples](https://pypsa.readthedocs.io/en/latest/examples-basic.html)

[Known users of
PyPSA](https://pypsa.readthedocs.io/en/latest/users.html)

## Installation

pip:

```pip install pypsa```

conda/mamba:

```conda install -c conda-forge pypsa```

Additionally, install a solver.

## Usage

```py
import pypsa

# create a new network
n = pypsa.Network()
n.add(""Bus"", ""mybus"")
n.add(""Load"", ""myload"", bus=""mybus"", p_set=100)
n.add(""Generator"", ""mygen"", bus=""mybus"", p_nom=100, marginal_cost=20)

# load an example network
n = pypsa.examples.ac_dc_meshed()

# run the optimisation
n.optimize()

# plot results
n.generators_t.p.plot()
n.plot()

# get statistics
n.statistics()
n.statistics.energy_balance()
```

There are [more extensive
examples](https://pypsa.readthedocs.io/en/latest/examples-basic.html) available
as [Jupyter notebooks](https://jupyter.org/). They are also described in the
[doc/examples.rst](doc/examples.rst) and are available as Python scripts in
[examples/](examples/).

## Screenshots

[PyPSA-Eur](https://github.com/PyPSA/pypsa-eur) optimising capacities of
generation, storage and transmission lines (9% line volume expansion allowed)
for a 95% reduction in CO2 emissions in Europe compared to 1990 levels

![image](doc/img/elec_s_256_lv1.09_Co2L-3H.png)

[SciGRID model](https://power.scigrid.de/) simulating the German power system
for 2015.

![image](doc/img/stacked-gen_and_storage-scigrid.png)

![image](doc/img/lmp_and_line-loading.png)

## Dependencies

PyPSA is written and tested to be compatible with Python 3.7 and above.
The last release supporting Python 2.7 was PyPSA 0.15.0.

It leans heavily on the following Python packages:

-   [pandas](http://pandas.pydata.org/) for storing data about
    components and time series
-   [numpy](http://www.numpy.org/) and [scipy](http://scipy.org/) for
    calculations, such as linear algebra and sparse matrix calculations
-   [networkx](https://networkx.github.io/) for some network
    calculations
-   [matplotlib](https://matplotlib.org/) for static plotting
-   [linpy](https://github.com/PyPSA/linopy) for preparing optimisation problems
    (currently only linear and mixed integer linear optimisation)
-   [cartopy](https://scitools.org.uk/cartopy) for plotting the
    baselayer map
-   [pytest](http://pytest.org/) for unit testing
-   [logging](https://docs.python.org/3/library/logging.html) for
    managing messages

The optimisation uses interface libraries like `linopy` which are
independent of the preferred solver. You can use e.g. one of the free
solvers [GLPK](https://www.gnu.org/software/glpk/) and
[CLP/CBC](https://github.com/coin-or/Cbc/) or the commercial solver
[Gurobi](http://www.gurobi.com/) for which free academic licenses are
available.

## Documentation

Please check the [documentation](https://pypsa.readthedocs.io).

## Contributing and Support

We strongly welcome anyone interested in contributing to this project. If you have any ideas, suggestions or encounter problems, feel invited to file issues or make pull requests on GitHub.

-   In case of code-related **questions**, please post on [stack overflow](https://stackoverflow.com/questions/tagged/pypsa).
-   For non-programming related and more general questions please refer to the [mailing list](https://groups.google.com/group/pypsa).
-   To **discuss** with other PyPSA users, organise projects, share news, and get in touch with the community you can use the [discord server](https://discord.gg/AnuJBk23FU).
-   For **bugs and feature requests**, please use the [PyPSA Github Issues page](https://github.com/PyPSA/PyPSA/issues).
-   For **troubleshooting**, please check the [troubleshooting](https://pypsa.readthedocs.io/en/latest/troubleshooting.html) in the documentation.

## Code of Conduct

Please respect our [code of conduct](CODE_OF_CONDUCT.md).

## Citing PyPSA

If you use PyPSA for your research, we would appreciate it if you would
cite the following paper:

-   T. Brown, J. Hörsch, D. Schlachtberger, [PyPSA: Python for Power
    System Analysis](https://arxiv.org/abs/1707.09913), 2018, [Journal
    of Open Research
    Software](https://openresearchsoftware.metajnl.com/), 6(1),
    [arXiv:1707.09913](https://arxiv.org/abs/1707.09913),
    [DOI:10.5334/jors.188](https://doi.org/10.5334/jors.188)

Please use the following BibTeX:

    @article{PyPSA,
       author = {T. Brown and J. H\""orsch and D. Schlachtberger},
       title = {{PyPSA: Python for Power System Analysis}},
       journal = {Journal of Open Research Software},
       volume = {6},
       issue = {1},
       number = {4},
       year = {2018},
       eprint = {1707.09913},
       url = {https://doi.org/10.5334/jors.188},
       doi = {10.5334/jors.188}
    }

If you want to cite a specific PyPSA version, each release of PyPSA is
stored on [Zenodo](https://zenodo.org/) with a release-specific DOI. The
release-specific DOIs can be found linked from the overall PyPSA Zenodo
DOI for Version 0.17.1 and onwards:

[![image](https://zenodo.org/badge/DOI/10.5281/zenodo.3946412.svg)](https://doi.org/10.5281/zenodo.3946412)

or from the overall PyPSA Zenodo DOI for Versions up to 0.17.0:

[![image](https://zenodo.org/badge/DOI/10.5281/zenodo.786605.svg)](https://doi.org/10.5281/zenodo.786605)

# Licence

Copyright 2015-2023 [PyPSA
Developers](https://pypsa.readthedocs.io/en/latest/developers.html)

PyPSA is licensed under the open source [MIT
License](https://github.com/PyPSA/PyPSA/blob/master/LICENSE.txt).
",934,934,61,84,renewable-energy,"[capacity-expansion-planning, clean-energy, climate-change, electrical-engineering, energy, energy-system, energy-systems, loadflow, optimal-power-flow, optimisation, power-flow, power-systems, power-systems-analysis, powerflow, pyomo, pypsa, python, renewable-energy, renewables]",00000
1156,atlite,PyPSA,PyPSA,https://github.com/PyPSA/atlite,https://api.github.com/repos/PyPSA/atlite,Atlite: A Lightweight Python Package for Calculating Renewable Power Potentials and Time Series,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",207,207,13,27,renewable-energy,"[csp, dynamic-line-rating, energy, energy-system, energy-systems, era5, gis, heat-pump, potentials, pv, python, reanalysis, renewable-energy, renewable-timeseries, solar, wind]",00000
1157,HeatPumpController,openhp,N/A,https://github.com/openhp/HeatPumpController,https://api.github.com/repos/openhp/HeatPumpController,The Valden Heat Pump controller is a platform to precisely control heat pumps,"
## Valden Heat Pump Controller v1.x
<b>The Valden Heat Pump controller is an open source platform to precisely control heat pumps. This controller can be used for the automation of newly built Heat Pumps (HPs), as a repair controller for old systems or as control system for performing experiments on refrigeration equipment.</b>
<br><br>

## Specs
- 12V 0.5A DC power supply,
- 230V output,
- 4 16A relays: Compressor, Hot Circulating Pump (CP) or Air Fan, Cold CP or Air Fan, Crankcase Heater,
- 2 inputs: Hot and cold side refrigerant over/under pressure NC sensors,
- up to 12 temperature (T) sensors, -55..+125 °C range,
- Electronic Expansion Valve (EEV) supported, 6 pin EEV connection: 4 * coils + 2 * 12V,
- automatically turns on/of system when heating required,
- automatic power saving mode,
- built-in protections: cold start, overheat, short-term power loss, power overload, ground loop freeze, compressor protection against liquid and other,
- LED indication,
- control via [remote display](https://github.com/openhp/Display/) or local Serial (UART 5V).
<br><br>
<img src=""./m_controller_and_display.jpg"" width=""800""><br><br>

## Refrigeration schemes supported
- Heat Pump (HP) with Electronic Expansion Valve (EEV),
- HP with capillary tube or TXV,
- EEV-only controller.<br><br>

## Installations supported
- Indoor: a house or technical building with an almost stable temperature,
- Outdoor: harsh climatic conditions taken into account. Outdoor HP installations tested down to a minus 32 °C.<br><br>

## Changelog and history
- 2018: PCB prototype, first real installation,
- 2019: 2-layer PCB, through-hole components, integrated buttons and display (public access),
- 2019: controller redesigned taking into account development and operating experience, 2-layer PCB, SMD,
- 2019-2021: installations, development, tests, revisions, redesigns (limited access), 
- 06 Feb 2021: product is technically completed and ready for public access. Documentation and release stage,
- 31 Aug 2021: public access granted.<br><br>

## Get your own PCB copy. Assembly.
- download PCB Gerber file [here](./Valden_HeatPumpController_Gerber.zip) or get your own copy [there](https://www.pcbway.com/project/shareproject/Valden_Heat_Pump_Controller_v1.html),
- order electronic components, see BOM (Bill Of Materials) appendix,
- solder electronic components, [assembly instructions here](https://github.com/openhp/HeatPumpController/wiki/Assembly)<br><br>.
<img src=""./m_c_assembly_completed.jpg"" width=""500""><br><br>

## Firmware upload
This process is the same as for other Arduinos:
- connect USB-> UART converter,
- start Arduino IDE,
- download and open the [firmware file](./Valden_HeatPumpController.ino),
- select board and MCU in the Tools menu (hint: we are using ""mini"" board with 328p MCU),
- press the ""Upload"" button in the interface and ""Reset"" on the Arduino.

For arduinos with an old bootloader you need to update it. (Tools-> Burn Bootloader).<br>
For successful compilation, you must have ""SoftwareSerial"", ""OneWire"" and ""DallasTemperature"" libraries installed (see Tools -> Manage Libraries).<br>
For the first time it's enough to upload firmware without any tuning. Think of it as of a commercial closed-source controller, where you cannot fine-tune internal options. And any other manual configuration do not required too, just upload firmware. You will see an error LED indication and hear a beep, since no sensors connected to your controller. Follow the next steps.<br>
<img src=""./m_add_IDE.png"" height=""300""><br><br>

## Self-tests
QA tests are available to test the assembled board.<br>
Self-test helps you check relays, indicators, speaker and temperature sensors.<br>
To run a self-tests:
- uncomment this 3 defines in source code header,
```c
//#define SELFTEST_RELAYS_LEDS_SPEAKER    //speaker and relays QA test, uncomment to enable
//#define SELFTEST_EEV                    //EEV QA test, uncomment to enable
//#define SELFTEST_T_SENSORS              //temperature sensors QA test, uncomment to enable
```
- upload firmware,
- connect 12V power supply,
- disconnect +5V wire from USB-UART converter.<br>

To check EEV connection, you can use a stepper motor.  If you are testing a real EEV, it will be closed after the first ""beep"" and partially opened after the second ""beep"". If it's not, check if stepper or EEV center pin(s) connected to +12V and try to swap coil-end pins (EEV1..EEV4).<br>
<img src=""./m_c_selftest_EEV.jpg"" width=""500""><br>
To check temperature sensors connectors crimp one array of sensors. Plug it to all sensor connectors one-by-one and check results in a serial console.<br>
<img src=""./m_c_selftest_t_sensors.jpg"" width=""500""><br>
<img src=""./m_c_selftest_t_readings.png""><br>
After tests completed, comment 3 self-test defines.<br>
Choose your installation scheme and uncomment one of those options:
```c
#define SETPOINT_THI 	//""warm floor"" scheme: ""hot in"" (Thi) temperature used as setpoint
//#define SETPOINT_TS1 	//""swimming pool"" or ""water tank heater"" scheme: ""sensor 1"" (Ts1) is used as setpoint and located somewhere in a water tank
```
Re-upload firmware. Your controller is ready for the first start (after wiring). Probably you'll never need to change other options.<br><br>

## Wiring (permanent controller installation).
Here are no instructions for choosing the right placement for permanent installation of the controller. It depends. You're building your system, and you know much better ""where"" and ""how"".<br>
Assuming you have installed your controller to the permanent place, the next step is wiring.<br><br>
Wiring is very simple, despite a lot of terminals.<br>
Phases (1st wire in electrical cables):
- connect the ""power inlet"" wire to one of the ""phase"" terminals,
- connect the ""Compressor"" relay output to the Compressor input,
- connect the ""Hot CP"" relay output to the Hot Circulation Pump input (or to the fan power input of the indoor unit if you are using an air system),
- connect the ""Cold CP"" relay output to the Cold Circulation Pump input (or to the fan power input of the outdoor unit),
- when using a compressor heater: connect the ""Crankcase heater"" relay output to the heater cable (highly recommended for outdoor installation and year-round use),
- connect all the second wires of power cords to the ""neutral"" terminals on the board.<br>
<img src=""./m_c_wiring_power.jpg"" width=""600""><br>

12V Power Supply:
- connect the second ""phase"" and one of ""neutral"" terminals to the AC input of the 12V power supply,
- connect 12V power supply output to GND and 12V<br>
<img src=""./m_c_wiring_12v.jpg"" width=""600""><br>

Crimp and plug low-voltage connectors:
- crimp SCT013 sensor wires (the only one low-voltage device in this circuit with interchangeable wires), connect and install it on the inlet phase wire,<br>
<img src=""./m_c_wiring_current_sensor.jpg"" width=""600""><br>
- crimp RS485 to the Remote Display, using a wire of desired length (note that A is connected to A, B to B and GND to GND),
- crimp  12V and GND secondary terminals to the remote display,<br>
<img src=""./m_c_wiring_display.jpg"" width=""600""><br>
- connect EEV to EEV terminal,<br>
<img src=""./m_c_wiring_EEV.jpg"" width=""600""><br>
- install all T sensors on pipes, insulate tubes,
- crimp T sensors arrays, you can crimp all four GND wires at every array to one GND connector pin or make 1-to-4 connection somewhere closer to sensors location (same for +5V wires),
- insert T sensors arrays to appropriate terminals (if you do not need to control over all temperatures, disable and do not install unnecessary sensors),<br>
<img src=""./m_c_wiring_t_sensors.jpg"" width=""600""><br>
- crimp and plug pressure sensors outputs: crimp 1st wires together to **12V** (right output of the terminal), 2nd cold side wire to the **Pco** (left), 2nd hot side wire to the **Phi** (middle); use the dummy if no pressure sensors used in your system.
<img src=""./m_c_wiring_pressure.jpg"" width=""600""><br>
<img src=""./m_c_wiring_pressure_dummy.jpg"" width=""600""><br>

You may prefer to solder the wires over using terminals and crimping connectors. But in this case, it will be difficult to disassemble the system if you want to change something. The choice is yours.<br><br>
And one more: **remember! 230V inside!** Do not turn on the phase without need.<br>
Have you ever received 230V with your own hands? If yes - you know. If no - do not try.<br>
Also remember about animals and children during the installation at a permanent place.<br><br>

## Control and usage: serial console
This is a first interface to Heat Pump controller you'll see after uploading firmware (Tools->Serial Monitor).<br>
The console itself is simple to use, several commands are available. Type in command, press ""Send"". Help and hotkeys:<br>
![console help screenshot](./m_console_help.png)<br>
Every 30 sec. (**HUMAN_AUTOINFO** option) you'll see stats. For example, after a startup of your compressor, you'll see something like this:<br>
![console statistics screenshot](./m_console_stats.png)<br>
At this example, ""hot in"" ~30 °C, compressor ~80 °C and so on. Heat Pump (HP, compressor) ON, Hot water pump ON, Cold water pump ON. Power consumption 980 watts.
Abbreviations: refer to Appendix A below.<br>
Also, you'll see diagnostic messages in your serial console.<br>
Do not connect +5V wire from USB-UART converter, if you are using a serial console.<br><br>

## Control and usage: [Remote Control Display](https://github.com/openhp/Display/)
This is a way for the end user to control Heat Pump.<br>
<img src=""./m_display_main.jpg"" width=""300""><br><br>
End user does not want to know much about refrigerants, evaporation, discharge temperatures and so on, so this display designed as simple as it was possible. See [Remote Display page](https://github.com/openhp/Display/) for details. And yes, this display is open product too, with available Gerber, PCB and source code.<br><br>

## Control and usage: [Service Display](https://github.com/openhp/ServiceDisplay/) 
One day I've realized that a netbook with a serial console is a good diagnostic tool, but I want a compact tool to get maximum available information from a Heat Pumps. So, this ""Quickly Assembled Service Display"" appeared. It fits everywhere and with a good power bank it can work 2-3 days long, without any additional power source. The diagnostic display is build from scratch, no PCB and housing here (and no plans to create it), because I do not see this service display as a permanently mounted device. <br>
<img src=""./m_tft_mainscreen.jpg"" width=""300""><br><br>
If you want a compact and visual tool - this device is for you, so check the [Service Display Page](https://github.com/openhp/ServiceDisplay/) .<br><br>

## Starting up the heat pump system for the first time and charging refrigerant
This is an easy part, but if you don't have experience it will take time.<br>
You have performed a pressure test and vacuuming. It's time to charge your system.<br>
Let's say you don't know how to calculate the amount of refrigerant in a recently built system, so follow next steps:
- charge a small amount (for example 300 g) of refrigerant,
- get ready for a system protective stops by Tae or Tbe temperature, this is a normal system behavior while refilling refrigerant,
- power on your heat pump,
- after compressor startup suction temperature will be about -20 ...- 40 °C (according to the suction pressure on the pressure gauge),
- for single-component refrigerants: slightly open the valve of the HVAC gauge manifold and start adding refrigerant through the gas phase on the cold side,
- for multi-component refrigerants: turn over the refrigerant cylinder, VERY SLIGHTLY open the HVAC manifold valve and start adding VERY LITTLE amounts through the liquid phase,
- continue, until the suction temperature (according to the suction pressure on the manometer) is ~ 10 ... 12 °C lower than the temperature of the heat source (example: the temperature at the inlet of the mixture of water and antifreeze from the closed ground loop is + 8 °C, so the suction temperature should be -2 ..- 4),
- close the manifold valve,
- at every step check the discharge pressure: it should not be above the discharge sensor temperature (Tbc),
- wait for the system to heat the target to an almost stable temperature, add little amounts of refrigerant while temperature increases (and suction decreases),
- stop if you are sure that the heating process proceeding slowly,
- take a final look and charge when the system is stable and the heat pump stops normally (setpoint is reached), this may take 12 hours or more,
- after the final refilling difference between the suction pressure temperature and the Tae sensor temperature should be 3 ... 6 °C.

This algo is good and safe both the first time and as a starting point. As you gain experience, you will get yours much easier and faster.<br>
Also, use ""manual EEV mode"" during refilling process.<br>
Keep your eyes protected and do not freeze your fingers.<br>
<img src=""./m_add_charge.jpg"" height=""200""><br><br>

## Hints
For more information about Heat Pumps look at [Wikipedia HP page](https://en.wikipedia.org/wiki/Heat_pump).<br>
If you want to know ""how the refrigeration systems work"", read Patrick Kotzaoglanian books.<br>
If you want more technical details, sophisticated schemes, ""how EEV can be driven by temperature"" diagrams, etc. refer to vendor manuals (you'll find all you need in the Alfa Laval brochures, Danfoss guides, and so on).<br>
For refrigerants and oils types comparison see wiki.<br><br>

## Personal experience 
Note that the SCT013 sensor and the current monitoring scheme cannot be used for accurate measurements and accurate COP calculations. Use a watt meter for accurate power measurements.<br>
Temperature sensor installation at a warm floor surface is a bad idea - it's better to get ""hot in"" water temperature coming from all over the floor, as implemented in firmware.<br>
The weather-dependent (both outdoor and indoor temperature dependent) system does not work fine for 30-150 m2 buildings. Such a system is too complex and works unpredictable due to random ventilation. And also due to the unpredictability of heat emitted in the house by other sources.<br>
I tried the scheme with a flooded evaporator in 2019 and found it terribly tricky, then refused to use it.<br>
Deep regeneration schemes are useful only for some refrigerants and only in certain temperature ranges. I've tried deep regeneration too. As a result, the theory coincided with practice and I also refused this idea.<br>
In general, it is possible by complicating the refrigeration scheme to win somewhere 1%, somewhere 3%, but all this leads to significant time and money cost getting suddenly a small profit.<br>
Summary: If you want experiments - Experiment. Want reliably - make the system simple.<br><br>
<img src=""./m_add_freezed1.jpg"" height=""300""> <img src=""./m_add_freezed2.jpg"" height=""300""> <img src=""./m_add_freezed3.jpg"" height=""300""><br><br>

## Author
<br>
gonzho АТ web.de (c) 2018-2021<br>

## Appendix A: Abbreviations
Abbreviations used in the documentation and firmware.<br>
Main sensors:
| Abbr. | Full name             |
| ----- | --------------------  |
| Tae   | after evaporator      | 
| Tbe   | before evaporator     |
| Tci   | cold side ""input""     |
| Tco   | cold side ""output""    |
| Tbc   | before condenser      |
| Tac   | after condenser       |
| Thi   | hot side ""input""      |
| Tho   | hot  side ""output""    |
| Tcrc  | crankcase (compressor itself)|

The additional sensor used in ""swimming pool heater"" or ""water tank heater"" schemes, check **SETPOINT_TS1** option:
| Abbr. | Full name             |
| ----- | --------------------  |
| Ts1   | additional sensor1    |

Additional sensors, disabled and not used by default:
| Abbr. | Full name             |
| ----- | --------------------  |
| Treg  | regenerator temperature|
| Ts2   | additional sensor2    |

Relays:
| Abbr. | Full name             |
| ----- | --------------------  |
| RCRCH  | crankcase heater relay	|
| RC   | cold side water pump relay	|
| RH   | cold side water pump relay    	|
| RP   | heat pump (compressor) relay	|

Other:
| Abbr. | Full name             		|
| ----- | --------------------  		|
| LSM	| LastStopCause				|
| LSC	| LastStartMessage			|
| CWP/CCP | cold side water (circulating) pump	|
| HWP/HCP | cold side water (circulating) pump	|
| EEVP	| EEV position				|
| HP	| heat pump				|

## Appendix B: LEDs
LEDs allow you to make rapid diagnostics without connecting a serial console or a Service Display.<br>
| LED | description |
| ------------- | ------------- |
| **EEV_opening**     	|  EEV is opening  |
| **EEV_closing**     	|  EEV is closing  |
| **EEV_fast**     	|  EEV mode is ""fast"" (non-precise) |
| **485_RX**     	|  485 transceiver is in listening state  |
| **485_TX**     	|  485 transceiver transmits a reply  |
| **Manual mode**     	|  EEV in a manual mode   |
| **LSC: error**     	|  Last stop was caused by an error. If you see this LED ON, it's a reason to connect either console or Service Display. Diagnostics  required.   |
| **LSC: protection**	|  Last stop was caused by protection. In some cases (like long powered-on periods or refilling) this can occur. Here no recommendations about diagnostic, since all systems and operation conditions are different. This LED indicates that something exceeded normal run conditions. |
| **OK**     |  System OK.  |
| **ERROR**     |  Something wrong: not all T sensors connected, one of the pressure sensors is not OK. Diagnostics required.   |
| **Relays LEDs**     |  Indicates corresponding relay state  |

## Appendix C: Diagnostic and status messages
**LastStopCause (LSC) messages. Why the compressor has stopped working.**
| Message | description |
| ------------- | ------------- |
| **Normal_stop**     | Normal stop, i.e. setpoint sensor temperature > setpoint, so heat not needed.    |
| **P.WtMax:_WATTS_**    | Protective stop. Overcurrent, double-check your system, then **MAX_WATTS** and **POWERON_HIGHTIME** options. |
| **P.W.wattMIN**    | Protective stop. Abnormally low power consumption (<max watts/5). Check your system, see **MAX_WATTS** option. |
| **P.W.TcrcMIN**    | Protective stop. Abnormally low ""Compressor"" temperature. Check your system, see **T_WORKINGOK_CRANKCASE_MIN** option. |
| **P.Tho**         | Protective stop. ""Hot out"" temperature is too high. Check your system, see **T_HOT_MAX** option. |
| **P.Thi**         | Protective stop. ""Hot in"" temperature is too high. Check system, see **T_HOT_MAX** option. |
| **P.Tcrc**        | Protective stop. ""Compressor"" temperature is too high. Overheat protection. This is an ordinary situation during long runs. See **T_CRANKCASE_MAX** option and compressor manual if you want to tune it (~115 °C for wide-available compressors). |
| **P.Tae**        | Protective stop. ""After evaporator"" temperature too low. Preventing cold loop from freezing and protecting suction line from liquid. See **T_COLDREF_MIN** option. |
| **P.Tbe**        | Protective stop. ""Before evaporator"" temperature too low. Preventing cold loop from freezing. See **T_BEFORE_EVAP_WORK_MIN** option. |
| **P.Tbc**        | Protective stop. ""Before condenser"" temperature is too high. Overheat protection. This is an ordinary situation during long runs. See **T_BEFORE_CONDENSER_MAX** option. |
| **P.Tci**        | Protective stop. ""Cold in"" temperature is too low. Preventing cold loop from freezing. See **T_COLD_MIN** option. |
| **P.Tco**        | Protective stop. ""Cold out"" temperature is too low. Preventing cold loop from freezing. See **T_COLD_MIN** option. |
| **E.Tci, E.Tco, E.Tbe, E.Tae, E.Ts1, E.Ts2, E.Tcrc, E.Treg, E.Tac, E.Tbc, E.Tho, E.Thi** |    Sensor lost, check wiring. Refer to ""T sensor abbreviations"". |
| **E.PresCold**    | Cold side pressure too low, check refrigerant charge and pressure sensors. |
| **E.PresHot**     | Hot side pressure too high, check refrigerant charge and pressure sensors. |

**LastStartMessage (LSM) messages. What condition the system expects. Some informational messages.**
| Message | description |
| ------------- | ------------- |
| **StCntd:_seconds_** 	| Startup countdown, short-term power loss protection. |
| **HP_Started** 	| Normal start. |
| **#Thi>Setp.** 	| ""Hot in"" temperature > setpoint, so no reason to start. |
| **#Ts1>Setp.** 	| ""Ts1"" temperature > setpoint, so no reason to start. See **SETPOINT_TS1** option to switch between Thi and Ts1 as setpoint sensor. |
| **HWP_OFF** 		| Setpoint sensor temperature > setpoint, so after some time (**HOTCIRCLE_STOP_AFTER** option) hot side pump powered off and gone to power saving mode. |
| **HWP_ON_by_ev** 	| Hot side pump started after power saving. See **HOTCIRCLE_START_EVERY** option. |
| **#HotPrp:_seconds_** | Hot side pump is on, waiting for T stabilization. Countdown, seconds. See **HOTCIRCLE_CHECK_PREPARE** option. |
| **#HotSlp:_seconds_** | Hot side pump in power save mode (sleeping). Waiting for next startup. Countdown, seconds. See **HOTCIRCLE_START_EVERY** option. |
| **#HPSlp:_seconds_**	| Compressor: pause between starts. Countdown, seconds. **MINCYCLE_POWEROFF** option.|
| **#CPpStart** 	| Cold side pump started. |
| **#CPp:_seconds_** 	| Cold side pumping. Preparing the system to compressor start. Countdown, seconds. **COLDCIRCLE_PREPARE** option. |
| **#Tho>Max** 		| ""Hot out"" temperature is too high. See **T_HOT_MAX** option. |
| **#Thi>Max** 		| ""Hot in"" temperature is too high. See **T_HOT_MAX** option. |
| **#CaseCold**		| Compressor crankcase temperature is too low. The system can't start. This situation occurs on outdoor installations during a winter season and if AC power lost for a few hours. Wait, while the crankcase heater stabilizing your compressor temperature. See **T_CRANKCASE_MIN** option. |
| **#CaseHot**        | Compressor is still overheated, waiting. See **T_CRANKCASE_MAX** option. |
| **#Tae<RefMin**    | ""After evaporator"" temperature too low. Preventing cold loop from freezing and protecting suction line from liquid. See **T_COLDREF_MIN** option. |
| **#Tbe<RefMin**    | ""Before evaporator"" temperature too low. Preventing cold loop from freezing. See **T_COLDREF_MIN** option. |
| **#Tbc>Max**        | ""Before condenser"" temperature is too high. Overheat protection. See **T_BEFORE_CONDENSER_MAX** option. |
| **#Tci<ColdMin**    | ""Cold in"" temperature is too low. Preventing cold loop from freezing. See **T_COLD_MIN** option. |
| **#Tco<ColdMin**    | ""Cold out"" temperature is too low. Preventing cold loop from freezing. See **T_COLD_MIN** option. |
| **CWP_ON_CoMin**    | Cold side pump started because cold side temperature is too low, so preventing cold loop freeze, see **T_COLD_MIN** option. |

**Additional messages**
| Message | description |
| ------------- | ------------- |
| **OK:Pr.Cold**	| Cold side pressure restored. |
| **OK:Pr.Hot**		| Hot side pressure restored.  |
| **OK:E.T.Sens.**	| Temperature sensors restored.|
| **HWP_ON** 		| Hot side pump powered on.    |
| **Err:_errorcode_**	| Error code: 1 = temperature sensor error, 2 = Hot side pressure too high, 3 = cold side pressure too low. |

##  Appendix D: secret appendix
Are you still reading? It seems you are interested in Heat Pumps, so this appendix is for you.<br>
About sensors: avoid using cheap ""waterproof epoxy-covered"" sensors. ""Waterproof"" lasts for a short time.<br>
Buy DS18B20s chips. No matter what sensors are buying: cheap or at a high price. I've never seen ""bad"" DSes. Solder sensors to the wires and cover with two layers of 2-component epoxy resin as pictured below. It will work for years. White/orange - GND, white/blue - signal, orange - +5V.<br>
<img src=""./m_ds18b20_epoxy.jpg"" width=""500""><br><br>
For sensors at your compressor and discharge (+100 °C and higher) use heat-resistant sleeves at every wire.<br>
<img src=""./m_ds18b20_wires_protection.jpg"" width=""500""><br><br>
To get precise temperature readings protect sensors against ambient air temperature influence with additional thermal insulation. Temperature readings from most of the sensors are interesting, but +/- few degrees does not matter. So, cover most of the sensors with thermal insulation as you wish.<br>
But two sensors ""Before evaporator"" and ""After evaporator"" are critical to EEV and needs an extra attention. The temperature of these sensors must be as close to the temperature of the copper tube as it possible. So, install Tae and Tbe sensors as pictured below. You can use thermal paste, but it is no significant difference with much more available silicone. Tape not shown at photos below, for clarity, but should be used with every insulation layer.<br>
<img src=""./m_ds18b20_evaporator_mount.jpg"" height=""700""><br><br>
About water(glycol)<->refrigerant heat exchangers. You can use plate heat exchangers. Pros: the best efficiency. Cons: costs money. Potential oil return difficulties.<br>
<img src=""./m_plate_heat_exchangers.jpg"" width=""500""><br><br>
And oxygen brazing with (20%+)silver+copper solder required here:<br>
<img src=""./m_plate_echangers_oxygen_brazing.jpg"" width=""500""><br><br>
You can build your own ""tube-in-tube"" heat exchangers. It's not hard. Cheaper. The heat exchange efficiency is worse. No oil return problems. Very easy soldering. Heat exchanger math: 0.7..1.5 m<sup>2</sup> of a copper tube per every 3kW of heat transfer.<br>
<img src=""./m_tube-in-tube_diy1.jpg"" width=""400""> <img src=""./m_tube-in-tube_diy2.jpg"" width=""400""><br><br>
Additionally, you can think ""I'll take an old AC parts... Housing... Slightly change... An hour or two, day of work maximum and I'll get a refrigerant<->water heat exchanger in for a penny!"". This idea is obvious. It was the first thing I've tried. You can try this, but to achieve ""not very bad"" performance it'll take more than a one day and much more than a few $$, even if you have unlimited access to older ACs.<br>
Ok, I think that's enough for this appendix, this is a controller page, and not how-to-build-refrigeration-systems page.<br>
Overall, your system with sensor locations will look like at a scheme below. Refrigerators (heat pumps) are simple devices.<br>
<img src=""./m_Valden_Heat_Pump_Controller_model.jpg"" width=""1000""><br><br>
Your system works (or sleeps) depending on Thi temperature. For the end user it looks like setting up comfortable temperature of the warm floor via Remote Display.

## Appendix E: Firmware options and fine-tuning

QA tests, uncomment to enable
```c
//#define SELFTEST_RELAYS_LEDS_SPEAKER 	//speaker and relays QA test, uncomment to enable
//#define SELFTEST_EEV 			//EEV QA test, uncomment to enable
//#define SELFTEST_T_SENSORS 		//temperature sensors QA test, uncomment to enable
```

Communication protocol with an external world. Choose one

```c
//#define RS485_JSON 1 		//JSON, external systems integration
//#define RS485_HUMAN 2 	//RS485 is used in the same way as the local console, warning: Use only if 2 devices (server and this controller) connected to the same RS485 line
#define RS485_MODBUS 3 		//default, MODBUS via RS485, connection to the display (both sensor or 1602, see https://GitHub.com/OpenHP/Display/) or connection to any other MODBUS application or device 
```

System type, comment both if HP with EEV
```c
//#define EEV_ONLY 	//Valden controller as EEV controller: NO target T sensor. No relays. Oly EEV. Sensors required: Tae, Tbe, current sensor. Additional T sensors can be used but not required.
//#define NO_EEV 	//capillary tube or TXV, EEV not used
```

Sensor used to check setpoint, uncomment one of those options
```c
#define SETPOINT_THI 	//""warm floor"" scheme: ""hot in"" (Thi) temperature used as setpoint
//#define SETPOINT_TS1 	//""swimming pool"" or ""water tank heater"" scheme: ""sensor 1"" (Ts1) is used as setpoint and located somewhere in a water tank
```

Some more options
```c
#define HUMAN_AUTOINFO	30000	//print stats to console, every milliseconds
#define WATCHDOG		//disable for older bootloaders
```

<b>Next sections: advanced options</b><br>
<img src=""./m_add_graph.png"" width=""826""><br>
Temperature sensors used in a system, comment to disable 

```c
#define T_cold_in;		//cold side (heat source) inlet sensor
#define T_cold_out;		//cold side outlet sensor
#define T_before_evaporator;	//""before"" and ""after evaporator"" sensors required to control EEV, both ""EEV_ONLY"" and ""full"" schemes 
#define T_after_evaporator;	//""before"" and ""after evaporator"" sensors required to control EEV, both ""EEV_ONLY"" and ""full"" schemes 
#ifdef SETPOINT_TS1
	#define T_sensor_1;	//T values from the additional sensor S1 used as a ""setpoint"" in ""pool"" or ""water tank heater"" schemes 
#endif
//#define T_sensor_2;		//additional sensor, any source; for example, outdoor temperature, in-case temperature, and so on
#define T_crc;			//if defined, enables the crankcase T sensor and crankcase heater on the relay ""Crankcase heater""
//#define T_regenerator;	//an additional sensor, the regenerator temperature sensor (inlet or outlet or housing); used only to obtain a temperature data if necessary 
#define T_afrer_condenser;	//after condenser (and before valve)
#define T_before_condenser;	//before condenser (discharge)
#define T_hot_out;		//hot side outlet
//In full scheme Hot IN required! Optional in ""EEV_ONLY"" scheme (see ""EEV_ONLY"" option), 
#define T_hot_in;		//hot side inlet
```

Temperature limits
```c
#define MAGIC		0x66;	//change this value if you want to rewrite the T setpoint in EEPROM 
#define	T_SETPOINT	26.0;	//This is a predefined target temperature value (start temperature). EEPROM-saved. Ways to change this value: 1. Console command 2. Change the ""setpoint"" on a display 3. Change value here AND change ""magic number"" 4. JSON command
#define T_SETPOINT_MAX	48.0;	//maximum ""setpoint"" temperature that an ordinary user can set
#define T_SETPOINT_MIN	10.0;	//min. ""setpoint"" temperature that an ordinary user can set, lower values not recommended until antifreeze fluids at hot side used.
#define T_CRANKCASE_MIN		8.0;	//compressor (crankcase) min. temperature, HP will not start if T lower
#define T_CRANKCASE_MAX		110.0;	//compressor (crankcase) max. temperature, overheating protection, HP will stop if T higher
#define T_CRANKCASE_HEAT_THRESHOLD 16.0;//crankcase heater threshold, the compressor heater will be powered on if T lower
#define T_WORKINGOK_CRANKCASE_MIN  25.0;//compressor temperature: additional check. HP will stop if T is lower than this value after 5 minutes of work. Do not set the value too high to ensure normal operation after long pauses. 
#define T_BEFORE_CONDENSER_MAX	108.0;	//discharge MAX, system stops if discharge higher
#define T_COLDREF_MIN 		-14.0;	//suction min., HP stops if T lower, cold side (glycol) loop freeze protection and compressor protection against liquid 
#define T_BEFORE_EVAP_WORK_MIN 	-25.5;	//!!!before evaporator (after valve) min. T; can be very low for a few minutes after a startup, ex: capillary tube in some conditions; and for all systems: after long shut-off, lack of refrigerant, 1st starts, and many others
#define T_COLD_MIN 		-15.5;	//cold side (glycol) loop freeze protection: HP stops if inlet or outlet temperature lower
#define T_HOT_MAX 		50.0;	//hot loop: HP stops if hot side inlet or outlet temperature higher than this threshold
```

Watts, cycles times (milliseconds)
```c
#define MAX_WATTS	1000.0 + 70.0 + 80.0	//power limit, watt, HP stops if exceeded, example: compressor: ~1000 + hot CP 70 + cold CP 80
#define POWERON_PAUSE     	300000    //after power on: 			wait 5 minutes before starting HP (power faults protection) 
#define MINCYCLE_POWEROFF 	600000    //after a normal compressor stop: 	10 minutes pause (max 99999 seconds) 
#define MINCYCLE_POWERON  	3600000  //after compressor start: 		minimum compressor operation time, i.e. work time is not less than this value (or more, depending on the setpoint temperature) 60 minutes = 3.6 KK 120mins = 5.4 kK.
#define POWERON_HIGHTIME	7000	//after compressor start: 		defines time when power consumption can be 3 times greater than normal, 7 sec. by default
#define COLDCIRCLE_PREPARE	90000	//before compressor start:		power on cold CP and wait 90 sec.; if false start: CP will off twice this time; and (hotcircle_stop_after - this_value) must be > hotcircle_check_prepare or HP will go sleep cycle instead of start
#define DEFFERED_STOP_HOTCIRCLE	1200000	//after compressor stop:		wait 20 minutes, if no need to start compressor: stop hot WP; value must be > 0
#define HOTCIRCLE_START_EVERY	2400000	//while pauses:				pump on ""hot side""  starts every 40 minutes (by default) (max 9999 seconds) to circulate water and get exact temperature reading, option used if ""warm floor"" installation (Thi as setpoint)...
#define HOTCIRCLE_CHECK_PREPARE	150000	//while pauses:				...and wait for temperature stabilization 2.5 minutes (by default), after that do setpoint checks...
#define HOTCIRCLE_STOP_AFTER	(HOTCIRCLE_CHECK_PREPARE + COLDCIRCLE_PREPARE + 30000)		//...and then stop after few minutes of circulating, if temperature is high and no need to start compressor; value must be check_prepare + coldcircle_prepare + 30 seconds (or more)
```

EEV options.<br>
<img src=""./m_add_eev.jpg"" height=""200""><br>
If you are using a capillary tube or TXV: simply skip next section.<br>
Depending on how many milliseconds allocated per step, the speed of automatic tuning will change.<br>
Remember that your refrigeration system reaction on every step is not immediate. The system reacts after a few minutes, sometimes after tens of minutes.<br>
```c
#define EEV_MAXPULSES		250	//max steps, 250 is tested for sanhua 1.3

//steps tuning: milliseconds per fast and slow (precise) steps
#define EEV_PULSE_FCLOSE_MILLIS	20	//fast closing, closing on danger			(milliseconds per step)
#define EEV_PULSE_CLOSE_MILLIS	60000	//accurate closing while the compressor works 		(milliseconds per step)
#define EEV_PULSE_WOPEN_MILLIS	20	//standby (waiting) pos. set				(milliseconds per step)
#define EEV_PULSE_FOPEN_MILLIS	1400	//fast opening, fast search 				(milliseconds per step)
#define EEV_PULSE_OPEN_MILLIS	70000	//accurate opening while the compressor works		(milliseconds per step)
#define EEV_STOP_HOLD		500	//0.1..1sec for Sanhua		hold time		(milliseconds per step)
#define EEV_CLOSEEVERY		86400000	//86400000: EEV full close (zero calibration) every 24 hours, executed while HP is NOT working	(milliseconds per cycle)

//positions
#define EEV_CLOSE_ADD_PULSES	8	//read below, additional steps after zero position while full closing 
#define EEV_OPEN_AFTER_CLOSE	45	//0 - set the zero position, then add EEV_CLOSE_ADD_PULSES (zero insurance, read EEV guides for this value) and stop, EEV will be in zero position. 
					//N - set the zero position, then add EEV_CLOSE_ADD_PULSES, than open EEV on EEV_OPEN_AFTER_CLOSE pulses
					//i.e. it's a ""waiting position"" while HP isn't working, value must be <= MINWORKPOS
#define EEV_MINWORKPOS		50	//position will be not less during normal work, open EEV to this position after compressor start

//temperatures
#define EEV_PRECISE_START	7.0	//precise tuning threshold: 		make slower pulses if (real_diff-target_diff) less than this value. Used for fine auto-tuning
#define EEV_EMERG_DIFF		1.7	//liquid at suction threshold:		if dangerous condition occurred, real_diff =< (target_diff - EEV_EMERG_DIFF)  then EEV will be closed to min. work position //Ex: EEV_EMERG_DIFF = 2.0, target diff 5.0, if real_diff =< (5.0 - 2.0) then EEV will be closed to EEV_MINWORKPOS
#define EEV_HYSTERESIS		0.5	//hysteresis, to stop fine-tuning:	must be less than EEV_PRECISE_START, ex: target difference = 4.0, hysteresis = 0.3, no EEV pulses will be done while real difference in range 4.0..4.3 
#define EEV_TARGET_TEMP_DIFF	3.6	//target difference between Before Evaporator and After Evaporator, the head of the whole algorithm

//additional options
#define EEV_REOPENLAST		1	//1 = reopen to last position on compressor start, useful for ordinary schemes with everyday working cycles, 0 = not
#define EEV_REOPENMINTIME	40000	//after system start: min. delay between ""min. work pos."" (must be > 0 in this case and > waiting position) set and reopening start
//#define EEV_MANUAL			//comment to disable, manual set of EEV position via a console; warning: this option will stop all EEV auto-activities, including zero position find procedure; so this option not recommended: switch auto/manual mode from a console

//do not use next option if you're not sure what are you doing
//#define EEV_DEBUG				//debug, useful during system fine-tuning, works both with local serial and RS485_HUMAN
```

Communication addresses
```c
const char devID  = 0x45;	//used only if JSON communication, does not matter for MODBUS and Valden display https://github.com/OpenHP/Display/
const char hostID = 0x30;	//used only if JSON communication, not used for MODBUS
```

Last option
```c
#define MAX_SEQUENTIAL_ERRORS 	15 		//max cycles to wait auto-clean error, ex: T sensor appears, stop compressor after counter exceeded (millis_cycle * MAX_SEQUENTIAL_ERRORS)
```
## Appendix D: bill of materials
<img src=""./m_add_parts.jpg""><br>
| Part | Quantity |
| ------------- | ------------- |
| **1206 Resistors:**	||
| 10	| 1	|
| 100	| 1	|
| 120	| 1	|
| 1K	| 7	|
| 10K	| 6	|
| 100K	| 2	|
| 22	| 1	|
| 2.2K	| 4	|
| 470	| 10	|
| **1206 Caps:**	||
| 0.01uF	| 2	|
| 0.1uF		| 4	|
| 1uF		| 8	|
| 10uF		| 5	|
| **1206 LEDs:**	||
| Red (error LEDs)	| 2	|
| Green (OK LED)	| 1	|
| Yellow 		| 11	|
| **SOP(SOIC) ICs:**	|	|
| ADM2587EBRWZ (SOIC-20)	| 1	|
| 74HC4067D (SOIC-24)		| 1	|
| 74HC595D (SOP-16)		| 3	|
| ULN2003A_(SOP-16)		| 2	|
| 817S (SOP-4)			| 2	|
| **XH2.54 Headers + Plugs:**	|	|
| XH2.54-6P header + 6P plug	| 4	|
| XH2.54-3P header + 3P plugs	| 2	|
| XH2.54-2P header + 2P Plugs	| 1	|
| XH2.54 Crimp terminal		| 40	|
| **Power terminals:**		|	|
| 6.35 Blade terminal (726386-2 or same)		| 16	|
| 6.35 Quick disconnect crimp terminal insulated	| 16	|
| **Others:**	|				|	
| 10nF HV-9.0x3.0 (blue disc 2kV HV cap)	| 1	|
| 22uf_16v D5.0xF2.0 (electrolytic cap)		| 1	|
| Resistor Network\*4 DIP-1X5P-2.54 (3..5K)	| 3	|
| MMBT2222A (SOT-23-3)				| 1	|
| LM7805 (TO-220)				| 1	|
| SMIH-12VDC-SL-C				| 4	|
| BUZZER-R9.0-2P-4.0				| 1	|
| ARDUINO PRO MINI				| 1	|
| Power supply, 12v1.25A 70x30x40 (or any 0.5A+)| 1	|
| DS18B20					| 12	|
| USB<->UART (to upload firmware)		| 1	|
| Current sensor SCT-013-000			| 1	|

## License
© 2018-2021 D.A.A. All rights reserved; gonzho AT web.de; https://github.com/openhp/HeatPumpController/.<br>

Text, media and other materials licensed under [CC-BY-SA License v4.0](https://creativecommons.org/licenses/by-sa/4.0/).<br>
<sub>Attribution: You must clearly attribute Valden Heat Pump Controller (https://github.com/openhp/HeatPumpController/) original work in any derivative works.<br>
Share and Share Alike: If you make modifications or additions to the content you re-use, you must license them under the CC-BY-SA License v4.0 or later.<br>
Indicate changes: If you make modifications or additions, you must indicate in a reasonable fashion that the original work has been modified.<br>
You are free: to share and adapt the material for any purpose, even commercially, as long as you follow the license terms.</sub><br>

The firmware source code licensed under [GPLv3](https://www.gnu.org/licenses/gpl-3.0.en.html). <br>
<sub>This product is distributed in the hope that it will be useful,	but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</sub><br>

For third-party libraries licenses used in this product please refer to those libraries.<br>
## Author
<br>
gonzho АТ web.de (c) 2018-2021<br>
",107,107,16,2,renewable-energy,"[arduino, compressor, controller, diy, eev, electronics, free-energy, gerber, green-energy, heat-exchange, heat-pump, heating, household, pcb, refrigeration, renewable-energy, rs-485, thermostat, txv]",00000
1158,pvanalytics,pvlib,N/A,N/A,https://api.github.com/repos/pvlib/pvanalytics,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C114:7AEF:2DBF455:5D8BF6B:6522414D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1159,Wind-Energy-Prediction-using-LSTM,ShashwatArghode,N/A,https://github.com/ShashwatArghode/Wind-Energy-Prediction-using-LSTM,https://api.github.com/repos/ShashwatArghode/Wind-Energy-Prediction-using-LSTM,Time Series Analysis using LSTM for Wind Energy Prediction.,"# Wind Energy Prediction using Long Short Term Memory(LSTM)

For complete details please read CSE 523 Project Report.pdf.

# Introduction 

Wind speed/power has received increasing attention around the earth due to its renewable nature as well as environmental friendliness. With the global installed wind power capacity rapidly increasing, the wind industry is growing into a large-scale business. Reliable short-term wind speed forecasts play a practical and crucial role in wind energy conversion systems, such as the dynamic control of wind turbines and power system scheduling. A precise forecast needs to overcome problems of variable energy production caused by fluctuating weather conditions. Power generated by wind is highly dependent on the wind speed. Though it is highly non-linear, wind speed follows a certain pattern over a certain period of time. We exploit this time series pattern to gain useful information and use it for power prediction. LSTM is used to perform different experiments on the data and to form conclusion.

# Conclusion

We started with the aim of improving the predictions of power generated using wind energy and we have achieved that using LSTM as machine learning model and performing model optimization on it.

![alt text](https://github.com/ShashwatArghode/Wind-Energy-Prediction-using-LSTM/blob/master/Wind%20Prediction%20Result.JPG)

We have also observed that if the wind speed is less than 4 m/s the power generated by the system is zero. LSTM is not able to learn this pattern as this is not the part which it can understand in time series analysis. So, if a hybrid new model is created which can work as the combination of Decision Tree/Random Forest and LSTM we can improve upon these results as well.


# To read about all experiments please read CSE 523 Project Report.pdf

",74,74,5,2,renewable-energy,"[deep-learning, long-short-term-memory-models, lstm, lstm-neural-networks, prediction, renewable-energy]",00000
1160,pvfactors,SunPower,N/A,N/A,https://api.github.com/repos/SunPower/pvfactors,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2E267A:5F9845:6522414E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1161,gridpath,blue-marble,N/A,N/A,https://api.github.com/repos/blue-marble/gridpath,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A7:7A65:282D5C:53BA98:65223FC4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1162,bifacial_radiance,NREL,NREL,https://github.com/NREL/bifacial_radiance,https://api.github.com/repos/NREL/bifacial_radiance,Toolkit for working with RADIANCE for the ray-trace modeling of Bifacial Photovoltaics,"![logo](docs/images_wiki/bifacial_radiance.png)

# bifacial_radiance
Main branch: [![Build Status](https://github.com/nrel/bifacial_radiance/actions/workflows/pytest.yaml/badge.svg?branch=main)](https://github.com/nrel/bifacial_radiance/actions)
[![Coverage Status](https://coveralls.io/repos/github/NREL/bifacial_radiance/badge.svg?branch=main)](https://coveralls.io/github/NREL/bifacial_radiance?branch=main)
[![Documentation Status](https://readthedocs.org/projects/bifacial-radiance/badge/?version=stable)](https://bifacial-radiance.readthedocs.io/en/latest/?badge=stable)
[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3860350.svg)](https://doi.org/10.5281/zenodo.3860350)
[![status](https://joss.theoj.org/papers/b018890e2ab7ddf723d37b17e308e273/status.svg)](https://joss.theoj.org/papers/b018890e2ab7ddf723d37b17e308e273)

Development branch: [![Build Status](https://github.com/nrel/bifacial_radiance/actions/workflows/pytest.yaml/badge.svg?branch=development)](https://github.com/nrel/bifacial_radiance/actions)
[![Coverage Status](https://coveralls.io/repos/github/NREL/bifacial_radiance/badge.svg?branch=development)](https://coveralls.io/github/NREL/bifacial_radiance?branch=development)
[![Documentation Status](https://readthedocs.org/projects/bifacial-radiance/badge/?version=latest)](https://bifacial-radiance.readthedocs.io/en/latest/?badge=latest)

## Introduction

bifacial_radiance contains a series of Python wrapper functions to make working with 
RADIANCE easier, particularly for the PV researcher interested in bifacial PV 
performance.  For more information, check out our [documentation](https://bifacial-radiance.readthedocs.io), 
[Tutorials in the form of Jupyter Notebooks](docs/tutorials/), or reffer to our [Wiki](https://github.com/NREL/bifacial_radiance/wiki)
and [Issues](https://github.com/NREL/bifacial_radiance/issues) page. 

## Installation

https://youtu.be/4A9GocfHKyM
This video shows how to install the bifacial_radiance software and all associated software needed. More info on the Wiki. Instructions are also shown below.

For detailed instructions of how to install bifacial_radiance, you can also refer to the [installation guide](https://bifacial-radiance.readthedocs.io/en/stable/installation.html)

## GUI! 

A GUI has been added in version 3.0. The GUI reads/writes all input parameters necessary to run a simulation, and runs the specified simulation by calling the correct functions with the specified parameters. So no need to use a journal or a script! But you still need to install following the procedure below. 

To run the gui, import bifacial_radiance and run bifacial_radiance.gui()

![GUI](docs/images_wiki/bifacial_radiance_GUI.png)


## Usage

We have a tutorial video, showing how the program is structured, how to use the Jupyter tutorials and the GUI. You can watch it here [Tutorial Webinar](https://www.youtube.com/watch?v=1X9L-R-RVGA), with the [slides available here](https://www.nrel.gov/docs/fy20osti/75218.pdf).

Check out the [Jupyter Tutorial Notebooks](docs/tutorials/) to see detailed examples of the capacities of bifacial_radiance.
The [Intro examples](https://bifacial-radiance.readthedocs.io/en/stable/introexamples.html) and the [readthedocs documentation](https://bifacial-radiance.readthedocs.io) also provide a good starting point.

## Contributing

We need your help to make bifacial_radiance a great tool! Please see the [Contributing page](https://bifacial-radiance.readthedocs.io/en/stable/contributing.html) for more on how you can contribute. The long-term success of bifacial_radiance requires substantial community support.

## License

Bifacial_radiance open source code is copyrighted by the Alliance for Sustainable Energy and licensed with BSD-3-Clause terms, found [here](https://github.com/NREL/bifacial_radiance/blob/master/LICENSE).

## Getting Support

If you suspect that you may have discovered a bug or if you'd like to
change something about bifacial_radiance, then please make an issue on our
[GitHub issues page](https://github.com/NREL/bifacial_radiance/issues).

bifacial_radiance questions can be asked on
[Stack Overflow](http://stackoverflow.com) and tagged with
the [bifacial_radiance](http://stackoverflow.com/questions/tagged/bifacial_radiance) tag.

The [bifacial-radiance google group](https://groups.google.com/forum/#!forum/bifacial_radiance) 
has just started, and will be used for discussing various topics of interest to the bifacial-radiance
community. We also make new version announcements on the google group.

## Citing

If you use bifacial_radiance in a published work, please cite:

    Ayala Pelaez and Deline, (2020). bifacial_radiance: a python package for modeling bifacial solar photovoltaic systems. Journal of Open Source Software, 5(50), 1865, https://doi.org/10.21105/joss.01865


Please also cite the DOI corresponding to the specific version of bifacial_radiance that you used. bifacial_radiance DOIs are listed at [Zenodo.org](https://zenodo.org/search?page=1&size=20&q=conceptrecid:3860349&all_versions&sort=-version)

Additional bifacial_radiance publications with validation of the software include:
* Deline, Chris, and Ayala, Silvana. Bifacial_Radiance. Computer Software. https://github.com/NREL/bifacial_radiance. USDOE Office of     Energy Efficiency and Renewable Energy (EERE), Solar Energy Technologies Office (EE-4S). 17 Dec. 2017. Web. doi:10.11578/dc.20180530.16. https://www.osti.gov/doecode/biblio/6869
* Ayala Pelaez S, Deline C, Greenberg P, Stein JS, Kostuk RK. Model and validation of single-axis tracking with bifacial PV. IEEE J Photovoltaics. 2019;9(3):715-721. https://ieeexplore.ieee.org/document/8644027 and https://www.nrel.gov/docs/fy19osti/72039.pdf (pre-print, conference version)
* Ayala Pelaez, Deline C, MacAlpine M, Marion B, Stein J, Kostuk K. Comparison of Bifacial Solar Irradiance Model Predictions with Field Validation. IEEE J Photovoltaics. 2019; 9(1):82-87. https://ieeexplore.ieee.org/document/8534404

Or check our [Github Wiki](https://github.com/NREL/bifacial_radiance/wiki) for a complete list of publications.
",69,69,21,94,renewable-energy,"[bifacial, gui, photovoltaics, radiance, renewable-energy, renewables]",00000
1163,REopt_API,NREL,NREL,https://github.com/NREL/REopt_API,https://api.github.com/repos/NREL/REopt_API,"The model for the REopt API, which is used as the back-end for the REopt Webtool (reopt.nrel.gov/tool), and can be accessed directly via the NREL Developer Network (https://developer.nrel.gov/docs/energy-optimization/reopt)","REopt® API
=========
The REopt® model in this repository is a free, open-source, development version of the [REopt API](https://developer.nrel.gov/docs/energy-optimization/reopt/). A production version of the REopt API lies behind the [REopt Web Tool](https://reopt.nrel.gov/tool).

The REopt API provides concurrent, multiple technology integration and optimization capabilities to help organizations meet their cost savings, energy performance, resilience, and emissions reduction goals. Formulated as a mixed integer linear program, the REopt model recommends an optimally sized mix of renewable energy, conventional generation, and energy storage technologies; estimates the net present value of implementing those technologies; and provides a dispatch strategy for operating the technology mix at maximum economic efficiency. A list of the REopt model capabilities is provided [here](https://reopt.nrel.gov/about/capabilities.html). Example projects using REopt can be viewed [here](https://reopt.nrel.gov/projects/).

## Should I be using or modifying the REopt API or the REopt Julia Package? 

The REopt Julia package will soon become the backend of the REopt API. That means that the optimization model will be contained in [REopt.jl](https://github.com/NREL/REopt.jl), and that a user could supply the same inputs to the API and Julia package and get the same results. So which should you use? 

**1. When and how to _use_ the REopt Julia package:**
- You want to be able to use the REopt model without incorporating an API call (and associated rate limits).
- You want slightly more flexibility in how you interact with model inputs, optimization parameters, and run types.
- You can install an optimization solver for use with REopt.
- You do not need your results saved in an external database. 
- **How do I use the REopt Julia package?:** see instructions [here](https://nrel.github.io/REopt.jl/dev/).
  
**2. When and how to _modify_ the REopt Julia package:**
- You want to make changes to the REopt model beyond modifying input values (e.g., add a new technology).
- You want to suggest a bug fix in the REopt model.
- **How do I modify the REopt Julia package?:** get the (free, open-source) model [here](https://github.com/NREL/REopt.jl) and see additional instructions [here](https://nrel.github.io/REopt.jl/dev/).
  
**3. When and how to _use_ the REopt_API:**
- You do not want to modify the code or host the API on your own server. 
- You do not want to install or use your own optimization solver (simply POSTing to the REopt API does not require a solver, whereas using the Julia package does).
- You want to be able to access or share results saved in a database using a runuuid.
- You want to be able to view your API results in the REopt web tool using a runuuid. (we can do this?)
- **How do I use the REopt API?:** you can access our production version of the API via the [NREL Developer Network](https://developer.nrel.gov/docs/energy-optimization/reopt/). You can view examples of using the API in the [REopt-API-Analysis Repo](https://github.com/NREL/REopt-API-Analysis/wiki).

**4. When and how to _modify_ the REopt_API:**
- You have made changes to the REopt Julia package that include modified inputs or outputs, and want to reflect those in the REopt API.
- You want to suggest a bug fix in the REopt API or add or modify validation or API endpoints.
- You want to host the API on your own servers.
- **How do I modify the REopt API?:** See this repo's [Wiki](https://github.com/NREL/reopt_api/wiki) for detailed instructions on installing and developing the API. Also, our [contributing guidelines](https://github.com/NREL/reopt_api/blob/develop/CONTRIBUTING.md) provide guidelines for suggesting improvements, creating pull requests, and more.
",69,69,11,47,renewable-energy,"[nrel, optimization, renewable-energy, reopt-api, reopt-lite-api, reoptjl]",00000
1164,energy-flow-card-plus,flixlix,N/A,https://github.com/flixlix/energy-flow-card-plus,https://api.github.com/repos/flixlix/energy-flow-card-plus,"An upgraded Energy Distribution Card for Home Assistant, with added features like Individual Devices and refined UI enhancements, while maintaining the Energy Dashboard's original design.","# Energy Flow Card Plus

![GitHub release (latest by date)](https://img.shields.io/github/v/release/flixlix/energy-flow-card-plus?style=flat-square)
![GitHub all releases](https://img.shields.io/github/downloads/flixlix/energy-flow-card-plus/total?style=flat-square)
[![hacs_badge](https://img.shields.io/badge/HACS-Default-41BDF5.svg?style=flat-square)](https://github.com/hacs/integration)
[![ko-fi support](https://img.shields.io/badge/support-me-ff5e5b?style=flat-square&logo=ko-fi)](https://ko-fi.com/flixlix)
![commit_activity](https://img.shields.io/github/commit-activity/y/flixlix/energy-flow-card-plus?color=brightgreen&label=Commits&style=flat-square)

![demo_energy_flow_card_plus](https://github.com/flixlix/energy-flow-card-plus/assets/61006057/d3650e8a-1c82-4993-9951-18c04fbdf4d6)

<details> <summary>✅ Advantages of this Card compared to the official Energy Distribution Card</summary>

## Bugfixes
  - Corrected crooked lines
  ![Crooked Lines](https://github.com/flixlix/energy-flow-card-plus/assets/61006057/5250a695-a022-4960-a06a-80650a7fc139)
  - Corrected curved lines not connecting to the circle
  ![Curved Lines](https://github.com/flixlix/energy-flow-card-plus/assets/61006057/1dda7efb-be4d-4304-a5d8-6faea257a8fe)
  - Changed the color of the line between the battery and the grid
  ![Color Line Battery Grid](https://github.com/flixlix/energy-flow-card-plus/assets/61006057/62d71eae-049d-4492-86cf-16f712920cb6)
## Features
- Choose wether or not to change the color of the icons
- Choose wether or not to change the color of the text
- Added option for Dynamic Circle colors
- Use different sensors than the ones used in the Energy Integration
- Choose wether to show the Energy or the Percentage in the Low-Carbon Circle
- Added Option for Secondary Information
- Option for Templates in secondary Information
- Override Home State (eg: to calculate Energy losses)
- Choose wether to hide inactive lines
- Individual Devices


</details>

## Goal

Although the code base is very different, the design of this card is heavily inspired by the [Official Energy Distribution Card](https://www.home-assistant.io/dashboards/energy/#energy-distribution).

The goal is to deliver a card that fits in the overall design of the Energy Dashboard, while providing more features, such as Individual Devices, Secondary Information and bringing small UI enhancements.

## Scope

This card **does not** aim to display Values (Meaning instantaneous/current consumption).
If this is your goal, check out the [Power Flow Card Plus](https://github.com/flixlix/power-flow-card-plus).

## Recommendation

![](https://user-images.githubusercontent.com/61006057/238181763-b5064161-b8dd-4fa5-865a-5815635d3cbb.png)
If you would like to customize the Energy period selector and its dates, check out this card: [Energy Period Selector Plus](https://github.com/flixlix/energy-period-selector-plus)

## Install

### HACS (recommended)

This card is direclty available in [HACS](https://hacs.xyz/) (Home Assistant Community Store).
_HACS is a third party community store and is not included in Home Assistant out of the box._
To install this:

- Go to HACS
- Click on `Frontend`
- Search for `Energy Flow Card Plus`
- Install via UI

<details>  <summary>Manual Install</summary>

1. Download and copy `energy-flow-card-plus.js` from the [latest release](https://github.com/flixlix/energy-flow-card-plus/releases/latest) into your `config/www` directory.

2. Add the resource reference as decribed below.

### Add resource reference

If you configure Dashboards via YAML, add a reference to `energy-flow-card-plus.js` inside your `configuration.yaml`:

```yaml
resources:
  - url: /local/energy-flow-card-plus.js
    type: module
```

Else, if you prefer the graphical editor, use the menu to add the resource:

1. Make sure, advanced mode is enabled in your user profile (click on your user name to get there)
2. Navigate to Settings -> Dashboards
3. Click three dot icon
4. Select Resources
5. Hit (+ ADD RESOURCE) icon
6. Enter URL `/local/energy-flow-card-plus.js` and select type ""JavaScript Module"".
   (Use `/hacsfiles/energy-flow-card-plus/energy-flow-card-plus.js` and select ""JavaScript Module"" for HACS install if HACS didn't do it already)
 
</details>
   
## Using the card

> ⚠️ This card also has a UI-Editor. This Editor is currently incompatible with Card Mod. I created a PR to fix this issue, but it hasn't been merged yet. Here is the [PR #277](https://github.com/thomasloven/lovelace-card-mod/pull/277). Since it hasn't been merged yet, I also released a fork with the changes from the PR. Installing this Version of Card Mod you can use this card in conjunction with Card Mod. [Here is my fork](https://github.com/flixlix/lovelace-card-mod)

> ⚠️ This card offers a **LOT** of configuration options. Don't worry, if you want your card's appearance to match the oficial Energy Flow Card, you will only need to setup the entities. The rest of the options only enable further customization. If this is your goal, please go to [Minimal Configuration](#minimal-configuration)


### Options

#### Card options

| Name                | Type      |   Default    | Description                                                                                                                                                                  |
|---------------------| --------- |:------------:|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| type                | `string`  | **required** | `custom:energy-flow-card-plus`.                                                                                                                                               |
| entities            | `object`  | **required** | One or more sensor entities, see [entities object](#entities-object) for additional entity options.                                                                          |
| title               | `string`  |              | Shows a title at the top of the card.                                                                                                                                        |
| energy_date_selection | `boolean` | true | If set to `true`, will follow the energy date picker (that is in the same dashboard) and get entities information from the statistics. |
| dashboard_link      | `string`  |              | Shows a link to an Energy Dashboard. Should be a url path to location of your choice. If you wanted to link to the built-in dashboard you would enter `/energy` for example. |
| inverted_entities   | `string`  |              | Comma seperated list of entities that should be inverted (negative for consumption and positive for production). Example: `inverted_entities: battery, grid`           |
| wh_decimals          | `number`  |      1       | Number of decimals rounded to when watthours are displayed.                                                                                                                      |
| kwh_decimals         | `number`  |      1       | Number of decimals rounded to when kilowatthours are displayed.                                                                                                                  |
| mwh_decimals          | `number`  |      1       | Number of decimals rounded to when megawatthours are displayed.                                                                                                                      |
| min_flow_rate       | `number`  |     .75      | Represents how much time it takes for the quickest dot to travel from one end to the other in seconds. |
| max_flow_rate       | `number`  |      6       | Represents how much time it takes for the slowest dot to travel from one end to the other in seconds. |
| wh_kwh_threshold      | `number`  |      1000       | The number of watthours to display before converting to and displaying kilowatthours. Setting of 0 will always display in kilowatthours. |
| kwh_mwh_threshold      | `number`  |      1000       | The number of kilowatthours to display before converting to and displaying megawatthours. Setting of 0 will always display in megawatthours. |
| clickable_entities  | `boolean` |    false     | If true, clicking on the entity will open the entity's more info dialog. |
| min_expected_energy | `number`  |    0.01 | Represents the minimum amount of energy (in Watthours) expected to flow through the system at a given moment. Only used in the [New Flow Formula](#new-flow-formula). |
| max_expected_energy | `number`  | 2000 | Represents the maximum amount of energy (in Watthours) expected to flow through the system at a given moment. Only used in the [New Flow Formula](#new-flow-formula). |
| display_zero_lines | `boolean` | true | If false, lines where no energy is flowing will be hidden. |
| use_new_flow_rate_model | `boolean` | false | If set to true, the card will use the [New Flow Formula](#new-flow-formula).

#### Entities object

At least one of _grid_, _battery_, or _solar_ is required. All entites (except _battery_charge_) should have a `unit_of_measurement` attribute of Wh(Watthours) or kW(kilowatthours).

| Name           | Type                | Description                                                                                                                                                                                                     |
| -------------- | :------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| grid           | `object` | Check [Grid Configuration](#grid-configuration) for more information. |
| solar          | `object` | Check [Solar Configuration](#solar-configuration) for more information. |
| battery        | `object` | Check [Battery Configuration](#battery-configuration) for more information. |
| individual1    | `object` | Check [Individual Devices](#individual-configuration) for more information. |
| individual2    | `object` | Check [Individual Devices](#individual-configuration) for more information. |
| home           | `object` | Check [Home Configuration](#home-configuration) for more information. |
| fossil_fuel_percentage | `object` | Check [Fossil Fuel Percentage](#fossil-fuel-configuration) for more information. |

#### Grid Configuration

| Name        | Type    | Default  | Description                                                                                       |
| ----------- | ------- | -------- | ------------------------------------------------------------------------------------------------- |
| entity | `object` | `undefined` required | Object containing `production` and/or `consumption` properties with one or a list of Entity IDs of a sensor supporting a state with positive values. Check [split entites](#split-entities) for more info. |
| name  | `string` | `Grid` | If you don't populate this option, the label will continue to update based on the language selected. |
| icon | `string` | `mdi:transmission-tower` | Icon path for the icon inside the Grid Circle. |
| color | `object` |  | Check [Color Objects](#color-object) for more information. |
| color_icon | `boolean` or ""production"" or ""consumption"" | `false` | If set to `true`, icon color will match the highest value. If set to `production`, icon color will match the production. If set to `consumption`, icon color will match the consumption. |
| color_circle | `boolean` or ""production"" or ""consumption"" | `false` | If set to `production`, circle color will match the production. If set to `consumption`, circle color will match the consumption. If set to `false`, circle color will match the consumption. |
| secondary_info | `object` | `undefined` | Check [Secondary Info Object](#secondary-info-configuration) |

#### Solar Configuration

| Name        | Type    | Default  | Description                                                                                       |
| ----------- | ------- | -------- | ------------------------------------------------------------------------------------------------- |
| entity | `string` | `undefined` required | One or a list of Entity IDs providing a state with the value of solar production. |
| name  | `string` | `Solar` | Label for the solar option. If you don't populate this option, the label will continue to update based on the language selected. |
| icon | `string` | `mdi:solar-power` | Icon path for the icon inside the Solar Circle. |
| color | `string` |  | HEX value of the color for circles labels and lines of solar production. |
| color_icon | `boolean` | `false` | If set to `true`, icon color will match the circle's color. If set to `false`, icon color will match the text's color.  |
| color_value | `boolean` | `false` | If set to `true`, text color of the state will match the circle's color. If set to `false`, text color of the state will be your primary text color.  |
| display_zero_state | `boolean` | `true` | If set to `true`, the state will be shown even if it is `0`. If set to `false`, the state will be hidden if it is `0`. |
| secondary_info | `object` | `undefined` | Check [Secondary Info Object](#secondary-info-configuration) |

#### Battery Configuration

| Name        | Type    | Default  | Description                                                                                       |
| ----------- | ------- | -------- | ------------------------------------------------------------------------------------------------- |
| entity | `object` | `undefined` required | Object containing `production` and/or `consumption` properties with one or a list of Entity IDs of a sensor supporting a state with positive values. Check [split entites](#split-entities) for more info. |
| state_of_charge | `string` | `undefined` required | Entity ID providing a state with the state of charge of the battery in percent (state of  `100` for a full battery). |
| state_of_charge_unit | `string` | `%` | Unit of the state of charge. |
| state_of_charge_unit_white_space | `boolean` | `true` | If set to `false`, the unit of the state of charge will not have a white space in front of it. |
| state_of_charge_decimals | `number` | `0` | Number of decimals to show for the state of charge. |
| name  | `string` | `Battery` | Label for the battery option. If you don't populate this option, the label will continue to update based on the language selected. |
| icon | `string` | `mdi:battery` or dynamic based on state of the battery | Icon path for the icon inside the Battery Circle. |
| color | `object` |  | Check [Color Objects](#color-object) for more information. |
| color_icon | `boolean` or ""production"" or ""consumption"" | `false` | If set to `true`, icon color will match the highest value. If set to `production`, icon color will match the production. If set to `consumption`, icon color will match the consumption. |
| state_of_charge_unit_white_space | `boolean` | `true` | If set to `false`, there will be no white space between the state of charge and the unit of the state of charge. |
| color_state_of_charge_value | `boolean` or ""production"" or ""consumption"" | If set to `true`, state of charge text color will match the highest value. If set to `production`, state of charge text color will match the production. If set to `consumption`, state of charge text color will match the consumption. |
| color_circle | `boolean` or ""production"" or ""consumption"" | If set to `production`, circle color will match the production. If set to `consumption`, circle text color will match the consumption. |

#### Individual Configuration

| Name        | Type    | Default  | Description                                                                                       |
| ----------- | ------- | -------- | ------------------------------------------------------------------------------------------------- |
| entity | `string` | `undefined` required | One or a list of Entity IDs providing a state with the value of an individual consumption. |
| name  | `string` | `Car` or `Motorcycle` | Label for the individual device option. If you don't populate this option, the label will continue to update based on the language selected. |
| icon | `string` | `mdi:car-electric` or `mdi:motorbike-electric` | Icon path for the icon inside the Individual Device Circle. |
| color | `string` | `#d0cc5b` or `#964cb5` | HEX value of the color for circles labels and lines of the individual device. |
| color_icon | `boolean` | `false` | If set to `true`, icon color will match the circle's color. If set to `false`, icon color will match the text's color.  |
| unit_of_measurement | `string` | `Wh`or `kWh` (dynamic) | Sets the unit of measurement to show in the corresponding circle |
| inverted_animation |`boolean` | `false` | If set to true, the small dots will flow in the opposite direction. |
| display_zero | `boolean` | `false` | If set to `true`, the device will be displayed even if the entity state is `0` or not a number (eg: `unavailable`). Otherwise, the non-fossil section will be hidden. |
| display_zero_tolerance | `number` | `0` | If set, the device will be displayed if the state is greater than the tolerance set (This is also available for the secondary info). No need to set `display_zero` property to true. |
| display_zero_state | `boolean` | `true` | If set to `true`, the state will be shown even if it is `0`. If set to `false`, the state will be hidden if it is `0`. |
| color_value | `boolean` | `false` | If set to `true`, state text color will match the circle's color. If set to `false`, state text color will be the primary text color.  |
| secondary_info | `object` | `undefined` | Check [Secondary Info Object](#secondary-info-configuration) |

#### Home Configuration

| Name        | Type    | Default  | Description                                                                                       |
| ----------- | ------- | -------- | ------------------------------------------------------------------------------------------------- |
| entity | `string` | `undefined` required | One or a list of Entity IDs providing a state with the value of your home's consumption. Note that this entity will not be displayed and will only be used for the more info dialog when clicking the home section. |
| name  | `string` | `Home` | Label for the home option. If you don't populate this option, the label will continue to update based on the language selected. |
| icon | `string` | `mdi:home` | Icon path for the icon inside the Home Circle. |
| color_icon | `boolean` or ""solar"" or ""grid"" or ""battery"" | `false` | If set to `true`, icon color will match the highest value. If set to `solar`, icon color will match the color of solar. If set to `grid`, icon color will match the color of the grid consumption. If set to `battery`, icon color will match the color of the battery consumption. |
| color_value | `boolean` or ""solar"" or ""grid"" or ""battery"" | `false` | If set to `true`, state text color will match the highest value. If set to `solar`, state text color will match the color of solar. If set to `grid`, state text color will match the color of the grid consumption. If set to `battery`, state text color will match the color of the battery consumption. |
| secondary_info | `object` | `undefined` | Check [Secondary Info Object](#secondary-info-configuration) |
| subtract_individual | `boolean` | false | If set to `true`, the home consumption will be calculated by subtracting the sum of the individual devices from the home consumption. |
| override_state | `boolean` | `false` | If set to `true`, the home consumption will be the state of the entity provided. By default the home consumption is caluclated by adding up all sources. This is useful, when for example you are using an inverter and it has energy losses. |

#### Fossil Fuel Configuration

| Name        | Type    | Default  | Description                                                                                       |
| ----------- | ------- | -------- | ------------------------------------------------------------------------------------------------- |
| show | `boolean` | `false` | If set to `true`, the fossil fuel section will be displayed. This information is probvided by the HA Energy Integration, so make sure you have it and CO2-Signal set up correctly. |
| entity           | `string` | `none` | Entity ID for opening the more info dialog. |
| name        | `string` | Low-carbon | Name to appear as a label on top of the circle. |
| icon | `string`            | `mdi:leaf` | Icon path (eg: `mdi:home`) to display inside the circle of the device. |
| color          | `string`        | `#0f9d58` |  HEX Value of a color to display as the stroke of the circle and line connecting to the grid. |
| color_icon | `boolean` | `false` | If `true`, the icon will be colored with the color property. Otherwise it will be the same color as all other icons. |
| display_zero | `boolean` | `true` | If set to `true`, the device will be displayed even if the entity state is `0` or not a number (eg: `unavailable`). Otherwise, the non-fossil section will be hidden. |
| display_zero_state | `boolean` | `true` | If set to `true`, the state will be shown even if it is `0`. If set to `false`, the state will be hidden if it is `0`. |
| state_type | `string` | `energy` | The type of state to use for the entity. Can be `energy` or `percentage`. When set to `energy` the state will be the amount of energy from the grid that is low-carbon. When set to `percentage` the state will be the percentage of energy from the grid that is low-carbon. |
| unit_white_space | `boolean` | `true` | If set to `false` will not add any whitespace between unit and state. Otherwise, white space will be added. |
| calculate_flow_rate | `boolean` or `number` | `false` | If set to `true`, the flow rate will be calculated by using the flow rate formula (either the new or the old one, depending on your configuration). If set to a number, the flow rate will be set to that number. For example, defining the value `10` will ensure one dot will flow every 10 seconds. |
| secondary_info | `object` | `undefined` | Check [Secondary Info Object](#secondary-info-configuration) |

#### Color Object

| Name        | Type    | Description                                                                                       |
| ----------- | ------- | ------------------------------------------------------------------------------------------------- |
| production | `string` | HEX value of the color for circles labels and lines of production. |
| consumption | `string` | HEX value of the color for circles labels and lines of consumption. |

#### Split entities

Can be use with either Grid or Battery configuration. The same `unit_of_measurement` rule as above applies.

| Name        | Type     | Description                                                                                       |
| ----------- | -------- | ------------------------------------------------------------------------------------------------- |
| consumption | `string` | Entity ID providing a state value for consumption, this is required if using a split grid object. |
| production  | `string` | Entity ID providing a state value for production                                                  |

#### Secondary Info Configuration

This Feature allows you to configure an additional small text for each Individual Device. Here you can put , for example, the state of charge of an electric car.

| Name        | Type     | Description                                                                                       |
| ----------- | -------- | ------------------------------------------------------------------------------------------------- |
| entity| `string` required | Entity ID providing a state value that is going to be displayed. |
| unit_of_measurement | `string` | A string to be used as the unit of measurement. (Important: don't forget surrounding string with quotes) |
| icon | `string` | An icon path to be displayed next to the state of the individual device. This is optional, meaning if you don't use this, no icon will be displayed. |
| unit_white_space | `boolean` |  Default is `true`. If set to `false` will not add any whitespace between unit and state. Otherwise, white space will be added. |
| display_zero | `boolean` | Default is `false`. If set to `true` info will still be displayed if state of the entity is `0` or `unavailable`. |
| display_zero_tolerance | `number` | `0` | If set, the device will be displayed if the state is greater than the tolerance set. No need to set `display_zero` property to true. |
| template | `string` | `undefined` | Here you can enter a [HA Template](https://www.home-assistant.io/docs/configuration/templating/). The output of the template will be displayed. Space is limited inside the circle and too much text will result in overflow using ellipsis, so use with caution. Will update automatically in case one of the provided entities inside the template updates. Can only be used in case `entity` was not set. |


### Minimal Configuration

> Don't forget to change the entity ids

The following configurations will allow you to achieve your results with the least amount of lines of code / complexity.
In these examples I decided to use the Split entities option, but feel free to use the combined entity option. [More Info](#split-entities)

##### Only Grid

```yaml
type: custom:energy-flow-card-plus
entities:
  grid:
    entity:
      consumption: sensor.grid_consumed_energy_daily
      production: sensor.grid_returned_energy_daily
wh_kwh_threshold: 0
```

This should give you something like this:

![demo-only-grid-minimal](https://github.com/flixlix/energy-flow-card-plus/assets/61006057/e70d41d8-bd72-4f1a-b332-8d3b74cd1264)

##### Grid and Solar

```yaml
type: custom:energy-flow-card-plus
entities:
  grid:
    entity:
      consumption: sensor.grid_consumed_energy_daily
      production: sensor.grid_returned_energy_daily
  solar:
    entity: sensor.solar_energy_daily
wh_kwh_threshold: 0
```

This should give you something like this:

![demo-grid-and-solar-minimal](https://github.com/flixlix/energy-flow-card-plus/assets/61006057/185120e5-bd0a-4a7b-85c7-50509f7bc4d0)

##### Grid, Solar and Battery

```yaml
type: custom:energy-flow-card-plus
entities:
  grid:
    entity:
      consumption: sensor.grid_consumed_energy_daily
      production: sensor.grid_returned_energy_daily
  solar:
    entity: sensor.solar_energy_daily
  battery:
    entity:
      consumption: sensor.battery_out_energy_daily
      production: sensor.battery_in_energy_daily
wh_kwh_threshold: 0

```

This should give you something like this:

![demo-grid-solar-and-battery-minimal](https://github.com/flixlix/energy-flow-card-plus/assets/61006057/402b50be-d92c-4684-8f8e-0ffb5f4b48a5)

### Flow Formula

This formula is based on the official formula used by the Energy Distribution card.

```js
max - (value / totalLines) * (max - min);
// max = max_flow_rate
// min = min_flow_rate
// value = line value, solar to grid for example
// totalLines = gridConsumption + solarConsumption + solarToBattery +
//   solarToGrid + batteryConsumption + batteryFromGrid + batteryToGrid
```

### New Flow Formula

In contrast to the old flow formula, this formula calculates the flow rate independently from other lines, making it more intuitive to interpret the perceived energy. This means that a state of `10W` will always flow with the same velocity, no matter what other lines are doing. In other words this flow rate is calculated in absolute and not relative values.

To get this new Flow Formula to work, simply set `use_new_flow_rate_model` in the main configuration to true. You may want to play around with the `max_expected_energy`, `min_expected_energy`, `max_flow_rate` and `min_flow_rate` to get the speeds that you wish

```js
if(value > maxIn) return maxOut; // In case energy exceeds maximum expected energy, use the fastest speed and ignore the rest.
return ((value  -  minIn) * (maxOut  -  minOut)) / (maxIn  -  minIn) +  minOut;

// value = value of the current line to calculate (eg: grid to home)
//
// minIn = amount of watthours at which the lowest speed will be selected. 
//   ↳ In your configuration this is `min_expected_energy`
//   ↳ eg: setting this at `100` means that at `100` watthours, the dots will still flow at the lowest speed
// maxIn = amount of watthours at which the highest speed will be selected. 
//   ↳ In your configuration this is `max_expected_energy`
//   ↳ eg: setting this at `2000` means that everything more than `2000` will flow at the highest speed selected
//
// minOut = amount of watthours at which the lowest speed will be selected. 
//   ↳ In your configuration this is `max_flow_rate`
//   ↳ eg: setting this at `5` means that one dot will take `5` second to travel
// maxOut = amount of watthours at which the highest speed will be selected. 
//   ↳ In your configuration this is `min_flow_rate`
//   ↳ eg: setting this at `1` means that one dot will take `1` second to travel
```

The following video aims to show the diffence between the two flow formulas:


https://user-images.githubusercontent.com/61006057/231479254-91d6c625-8f38-4abb-b9ba-8dd24d6395f3.mp4

Notice that when the Energy changes to only coming from the sun, the old formula accelerates to maintain a constant amount of dots/second. 
Using the new formula is more intuitive, since you can immediately see that the Solar Energy is relatively low since the dots are flowing very slowly.
On the old Flow Formula you might think that the sun produced a lot of energy, which in this case is not true.

At the end of the day these are two options and depending on what you're interested, one might suit you better than the other, that's why I kept the old formula, you have the choice. 🙂

I am still just one person working on this project and obviously have other things going on in my life, so feel free to contribute to the project. You can also feel free to create a PR with a new feature and I'll try my best to review it 😊
",56,56,1,13,renewable-energy,"[automation, cards, customization, dashboard, diy, energy, green, home-assistant, home-automation, renewable-energy, renewables, visualization]",00000
1165,WindTurbineClassification,nmstreethran,N/A,https://github.com/nmstreethran/WindTurbineClassification,https://api.github.com/repos/nmstreethran/WindTurbineClassification,My master's dissertation on wind turbine fault prediction using machine learning,"# WindTurbineClassification

[![DOI](images/badges/DOI.svg)](https://doi.org/10.5281/zenodo.2875795)
[![View report (PDF)](images/badges/REPORT.svg)](https://raw.githubusercontent.com/nmstreethran/WindTurbineClassification/current/docs/nms_dissertation.pdf)

<!-- https://img.shields.io/static/v1?label=&message=script&style=for-the-badge&logo=python&labelColor=snow&color=grey -->

***Specification of 'normal' wind turbine operating behaviour for rapid anomaly detection: through the use of machine learning algorithms***

by Nithiya Streethran (nmstreethran@gmail.com)

This work is derived from my dissertation for the degree of Master of Science (MSc) in Renewable Energy Engineering at Heriot-Watt University, which was completed during a technical placement at Natural Power between May and August 2017.

**Unfortunately, the datasets are proprietary industry data and I do not own the rights to distribute them to the public. Please do not contact me to request the datasets.**

## Abstract

Maximising the economic effectiveness of a wind farm is essential in making wind a more economic source of energy. This effectiveness can be increased through the reduction of operation and maintenance costs, which can be achieved through continuously monitoring the condition of wind turbines. An alternative to expensive condition monitoring systems, which can be uneconomical especially for older wind turbines, is to implement classification algorithms on supervisory control and data acquisition (SCADA) signals, which are collected in most wind turbines. Several publications were reviewed, which were all found to use separate algorithms to predict specific faults in advance. In reality, wind turbines tend to have multiple faults which may happen simultaneously and have correlations with one another. This project focusses on developing a methodology to predict multiple wind turbine faults in advance simultaneously by implementing classification algorithms on SCADA signals for a wind farm with 25 turbines rated at 2,500 kW, spanning a period of 30 months. The data, which included measurements of wind speed, active power and pitch angle, was labelled using corresponding downtime data to detect normal behaviour, faults and varying timescales before a fault occurs. Three different classification algorithms, namely decision trees, random forests and k nearest neighbours were tested using imbalanced and balanced training data, initially to optimise a number of hyperparameters. The random forest classifier produced the best results. Upon conducting a more detailed analysis on the performance of specific faults, it was found that the classifier was unable to detect the varying timescales before a fault with accuracy comparable to that of normal or faulty behaviour. This could have been due to the SCADA data, which are used as features, being unsuitable for detecting the faults, and there is potential to improve this by balancing only these classes.

***Keywords:*** wind turbine, classification algorithm, SCADA, fault detection, condition monitoring

## Scripts

&nbsp; | Source | Output
------ | -- | --
Process SCADA and downtime data | [![View Python script](images/badges/SCRIPT.svg)](scripts/process_data.py) | [![View Jupyter Notebook](images/badges/NOTEBOOK.svg)](https://nbviewer.org/github/nmstreethran/WindTurbineClassification/blob/current/docs/jupyter-notebooks/process_data.ipynb)
Downtime categories | [![View Python script](images/badges/SCRIPT.svg)](scripts/downtime_categories.py) | [![View Jupyter Notebook](images/badges/NOTEBOOK.svg)](https://nbviewer.org/github/nmstreethran/WindTurbineClassification/blob/current/docs/jupyter-notebooks/downtime_categories.ipynb)
Merge SCADA and downtime data | [![View Python script](images/badges/SCRIPT.svg)](scripts/SCADA_downtime_merge.py)
Power curves for all turbines | | [![View Jupyter Notebook](images/badges/NOTEBOOK.svg)](https://nbviewer.org/github/nmstreethran/WindTurbineClassification/blob/current/docs/jupyter-notebooks/powercurves_all.ipynb)

## License

Unless otherwise stated:

- Code and scripts are licensed under the [MIT License](https://opensource.org/licenses/MIT).
- Content, images, and documentation are licensed under a [Creative Commons Attribution 4.0 International (CC-BY-4.0) License](https://creativecommons.org/licenses/by/4.0/).

Project badges are generated using [Shields.io](https://shields.io/) and [Simple Icons](https://simpleicons.org/).
",49,49,4,0,renewable-energy,"[energy, jupyter-notebook, python, renewable-energy, wind-turbines]",00000
1166,PREP-SHOT,PREP-NexT,PREP-NexT,https://github.com/PREP-NexT/PREP-SHOT,https://api.github.com/repos/PREP-NexT/PREP-SHOT,Pathways for Renewable Energy Planning coupling Short-term Hydropower OperaTion,"<p align=""center"">
  <a href=""https://prep-next.github.io/PREP-SHOT/"">
    <img src=""https://user-images.githubusercontent.com/50036800/221886195-3113531b-f9c4-4c6a-bb66-612c8b9c3d9a.png"" width=""550"" alt=""PREP-SHOT logo"">
  </a>
</p>

<p align=""center"">
  <a href=""https://github.com/PREP-NexT/PREP-SHOT""><img src=""https://img.shields.io/github/contributors/PREP-NexT/PREP-SHOT.svg"" alt=""GitHub contributors""></a>
  <a href=""https://github.com/PREP-NexT/PREP-SHOT""><img src=""https://img.shields.io/github/issues/PREP-NexT/PREP-SHOT.svg"" alt=""GitHub issues""></a>
  <a href=""https://twitter.com/PREPNexT_Lab""><img src=""https://img.shields.io/twitter/follow/PREPNexT_Lab.svg?label=Follow&style=social"" alt=""Twitter Follow""></a>
  <a href=""https://github.com/PREP-NexT/PREP-SHOT""><img src=""https://img.shields.io/github/license/PREP-NexT/PREP-SHOT.svg"" alt=""License""></a>
</p>

## Overview

**PREP-SHOT** (**P**athways for **R**enewable **E**nergy **P**lanning coupling **S**hort-term **H**ydropower **O**pera**T**ion) is a transparent, modular, and open-source energy expansion model, offering advanced solutions for multi-scale, intertemporal, and cost-effective expansion of energy systems and transmission lines. It's developed by [Zhanwei Liu](https://www.researchgate.net/profile/Zhanwei-Liu-4) and [Xiaogang He](http://hydro.iis.u-tokyo.ac.jp/~hexg/) from the [PREP-NexT](https://github.com/PREP-NexT) Lab at the [National University of Singapore](https://nus.edu.sg/).

For more information, please visit our [Official Documentation](https://prep-next.github.io/PREP-SHOT/).

This project is licensed under the [GNU General Public License 3.0](https://github.com/PREP-NexT/PREP-SHOT/blob/main/LICENSE).

## Key Features

- Optimization model based on linear programming for multi-zone energy systems.
- Cost minimization while meeting given demand time series.
- Adjustable operation on hourly-spaced time steps.
- Input data in Excel format and output data in NetCDF format using ``Xarray``.
- Support for multiple solvers like Gurobi, CPLEX, MOSEK, and GLPK via `Pyomo`.
- Allows input of multiple scenarios for specific parameters.
- A pure Python program, leveraging ``pandas`` and ``Xarray`` for simplified complex data analysis and extensibility.

## Getting Started

This section includes a brief tutorial on running your first PREP-SHOT model.

1. Clone the repo

    ```bash
    git clone https://github.com/PREP-NexT/PREP-SHOT.git
    ```

2. Create the Conda Environment and install the dependencies

    ```bash
    conda env create -f prep-shot.yml
    ```

3. Activate the Conda Environment

    ```bash
    conda activate prep-shot-test
    ```

4. Run your first model

    ```bash
    python run.py
    ```

This example is inspired by real-world data. For a detailed elaboration of this tutorial, check out the [Tutorial Page](https://prep-next.github.io/PREP-SHOT/Tutorial.html) in our documentation.

## How to Contribute

To contribute to this project, please read our [Contributing Guidelines](https://prep-next.github.io/PREP-SHOT/Changelog.html#contributing-to-prep-shot).

## Citation

If you use PREP-SHOT in a scientific publication, we would appreciate citations. You can use the following BibTeX entry:

```bibtex
@article{liu2023,
  title = {Balancing-oriented hydropower operation makes the clean energy transition more affordable and simultaneously boosts water security},
  author = {Liu, Zhanwei and He, Xiaogang},
  journal = {Nature Water},
  volume = {1},
  pages = {778--789},
  year = {2023},
  doi = {10.1038/s44221-023-00126-0},
}
```

## Contact Us

If you have any questions, comments, or suggestions that aren't suitable for public discussions in the Issues section, please feel free to reach out to [Zhanwei Liu](mailto:liuzhanwei@u.nus.edu).

Please use the GitHub Issues for public discussions related to bugs, enhancements, or other project-related discussions.

## Roadmap

+ `Benders` decomposition-based fast solution framework
+ `JuMP`-based low-memory and fast modelling engine
+ Support for input of cost–supply curves of technologies
+ Support for expanding conventional hydropower plants
+ Support for refurbishing conventional hydropower plants to pumped-storage schemes
+ Support for refurbishing carbon-emission plants to carbon capture and storage (CCS) schemes

## Disclaimer

The PREP-SHOT model is an academic project and is not intended to be used as a precise prediction tool for specific hydropower operations or energy planning. The developers will not be held liable for any decisions made based on the use of this model. We recommend applying it in conjunction with expert judgment and other modeling tools in a decision-making context.

---

![Repo Analytics](https://repobeats.axiom.co/api/embed/159a603ee4c6124a5addc35d47b3cb02e3fc39f0.svg ""Repo analytics"")
",48,48,2,0,renewable-energy,"[hydropower, renewable-energy, reservoir-modeling]",00000
1167,awesome-energy-forecasting,cuge1995,N/A,N/A,https://api.github.com/repos/cuge1995/awesome-energy-forecasting,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:6B96:2868B4B:5328629:65224151.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1168,solxpect,woheller69,N/A,N/A,https://api.github.com/repos/woheller69/solxpect,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17A:6B96:2868C03:532879D:65224151.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1169,NYISOToolkit,m4rz910,N/A,N/A,https://api.github.com/repos/m4rz910/NYISOToolkit,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C183:1CC6:2A26932:568323C:65223FC9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1170,3D-PV-Locator,kdmayer,N/A,https://github.com/kdmayer/3D-PV-Locator,https://api.github.com/repos/kdmayer/3D-PV-Locator,"Dockerized Repo for ""3D-PV-Locator: Large-scale detection of rooftop-mounted photovoltaic systems in 3D"" based on Applied Energy publication.","# 3D-PV-Locator

![Pipeline Overview](https://github.com/kdmayer/3D-PV-Locator/blob/master/pipeline_visualization_new.png)

Repo with [documentation](docs/_build/rinoh/pv4ger.pdf) for ""[3D-PV-Locator: Large-scale detection of rooftop-mounted photovoltaic systems in 3D](https://www.sciencedirect.com/science/article/pii/S0306261921016937?via%3Dihub)"" published in Applied Energy.

In case you would like to explore the code with which we created the image datasets and pre-processed the CityGML files, please have a look at the following [GitHub repo](https://github.com/kdmayer/CityGML-Preprocessing-Demo).

## About

3D-PV-Locator is a joint research initiative between [Stanford University](http://web.stanford.edu/group/energyatlas/home.html), [University of Freiburg](https://www.is.uni-freiburg.de/research/smart-cities-industries-group/smart-cities-industries-sci-group), and [LMU Munich](https://www.en.compecon.econ.uni-muenchen.de/staff/postdocs/arlt1/index.html) that aims at democratizing and accelerating the access to photovoltaic (PV) systems data in Germany and beyond. 

To do so, we have developed a computer vision-based pipeline leveraging aerial imagery with a spatial resolution of
10 cm/pixel and 3D building data to automatically create address-level and rooftop-level PV registries for all counties
within Germany's most populous state North Rhine-Westphalia.

![Exemplary Pipeline Output](https://github.com/kdmayer/3D-PV-Locator/blob/master/exemplary_pipeline_output.png)

### Address-level registry

For every address equipped with a PV system in North Rhine-Westphalia, the automatically produced address-level
registry in GeoJSON-format specifies the respective PV system's: 

- geometry: Real-world coordinate-referenced polygon describing the shape of the rooftop-mounted PV system
- area_inter: The total area covered by the PV system in square meters
- area_tilted: The total area covered by the PV system in square meters, corrected by the respective rooftop tilt
- capacity_not_tilted_area: The total PV capacity in kWp of area_inter
- capacity_titled_area: The total PV capacity in kWp of area_tilted 
- location of street address in latitude and longitude 
- street address
- city and
- ZIP code

### Rooftop-level registry

For every rooftop equipped with a PV system in North Rhine-Westphalia, the automatically produced rooftop-level
registry in GeoJSON-format specifies the respective PV system's: 

- Azimuth: Orientation of the rooftop-mounted PV system, with 0° pointing to the North
- Tilt: Tilt of the rooftop-mounted PV system, with 0° being flat
- RoofTopID: Identifier of the respective rooftop
- geometry: Real-world coordinate-referenced polygon describing the shape of the rooftop-mounted PV system
- area_inter: The total area covered by the PV system in square meters
- area_tilted: The total area covered by the PV system in square meters, corrected by the respective rooftop tilt
- capacity_not_tilted_area: The total PV capacity in kWp of area_inter
- capacity_titled_area: The total PV capacity in kWp of area_tilted
- street address
- city and
- ZIP code 

For a detailed description of the underlying pipeline and a case study for the city of Bottrop, please have a look at our spotlight talk at NeurIPS 2020:

- [Paper](https://www.climatechange.ai/papers/neurips2020/46/paper.pdf)
- [Slides](https://www.climatechange.ai/papers/neurips2020/46/slides.pdf)
- [Recorded Talk](https://slideslive.com/38942134/an-enriched-automated-pv-registry-combining-image-recognition-and-3d-building-data)

You might also want to take a look at other projects within Stanford's EnergyAtlas initiative:

- [EnergyAtlas](http://web.stanford.edu/group/energyatlas/home.html)
- DeepSolar for Germany: [Publication](https://ieeexplore.ieee.org/document/9203258) and [Code](https://github.com/kdmayer/PV_Pipeline)

## Datasets and pre-processing code are public

Please note that apart from the pipeline code and documentation, we also provide you with

- A **pre-trained model checkpoint for PV classification** on aerial imagery with a spatial resolution of 10cm/pixel.
- A **pre-trained model checkpoint for PV segmentation** on aerial imagery with a spatial resolution of 10cm/pixel.
- A **100,000+ image dataset** for PV system classification.
- A **4,000+ image dataset** for PV system segmentation.
- **Pre-processed 3D building data** in .GeoJSON format for the entire state of North Rhine-Westphalia.

In case you would like to explore the code with which we created the image datasets and pre-processed the CityGML files, please have a look at the following [GitHub repo](https://github.com/kdmayer/CityGML-Preprocessing-Demo).

When using these resources, please cite our work as specified at the bottom of this page.

**NOTE**: All images and 3D building data is obtained from [openNRW](https://www.bezreg-koeln.nrw.de/brk_internet/geobasis/luftbildinformationen/aktuell/digitale_orthophotos/index.html). Labeling of the images for PV system classification and segmentation has been conducted by us.

## Usage Instructions:

    git clone https://github.com/kdmayer/3D-PV-Locator.git
    cd 3D-PV-Locator

Download pre-trained classification and segmentation models for PV systems from our public AWS S3 bucket. This bucket is in ""requester pays"" mode, which means that you need to configure your AWS CLI before being able to download the files. Instructions on how to do it can be found [here](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html).

Once you have configured your AWS CLI with 

    aws configure

you can list and browse our public bucket with

    aws s3 ls --request-payer requester s3://pv4ger/
    
Please download our pre-trained networks for PV system classification and segmentation by executing

    aws s3 cp --request-payer requester s3://pv4ger/NRW_models/inceptionv3_weights.tar models/classification/
    aws s3 cp --request-payer requester s3://pv4ger/NRW_models/deeplabv3_weights.tar models/segmentation/

To create PV registries for any county within North Rhine-Westphalia, you need to 

1. Download the 3D building data for your desired county from our S3 bucket by executing and replacing <YOUR_DESIRED_COUNTY.geojson> with a county name from the list below:

        aws s3 cp --request-payer requester s3://pv4ger/NRW_rooftop_data/<YOUR_DESIRED_COUNTY.geojson> data/nrw_rooftop_data/
        
    Example for the county of **Essen**:
    
        aws s3 cp --request-payer requester s3://pv4ger/NRW_rooftop_data/Essen.geojson data/nrw_rooftop_data/

2. Specify the name of your desired county for analysis in the config.yml next to the ""county4analysis"" element by
 choosing one of the counties from the list below:

    Example:
        
        county4analysis: Essen
        
3. **OPTIONAL STEP**: Obtain your Bing API key for geocoding from [here](https://docs.microsoft.com/en-us/bingmaps/getting-started/bing-maps-dev-center-help/getting-a-bing-maps-key) and paste it in the config.yml file next to the ""bing_key"" element

    Example:
    
        bing_key: <YOUR_BING_KEY>
    
    **NOTE**: If you leave <YOUR_BING_KEY> empty, geocoding will be done by the free OSM geocoding service.

Once the data and models are in place, we build and run the docker container with all required dependencies in interactive mode and mount the /data and /log directory in the container to our local machine.
Mounting the /data and /log directories allows us to share the code outputs between the container and our local machine.

    docker build -t 3d_pv_docker .
    docker run -it -v <YOUR_ABSOLUTE_PATH_TO_THE_PROJECT_REPO>/data/:/app/data/ <YOUR_ABSOLUTE_PATH_TO_THE_PROJECT_REPO>/logs/:/app/logs/ 3d_pv_docker

Please ensure that *<YOUR_ABSOLUTE_PATH_TO_THE_PROJECT_REPO>* corresponds to your absolute path to the 3D-PV-Locator repo on your local machine, e.g., */Users/kevin/Projects/Active/3D-PV-Locator/* in my case.

Note: Depending on how many tiles you want to download, you will need to adjust the memory of your Docker container with the following flag for the docker run command:

    --memory=<memory>

Having the docker container in interactive mode, we can now decide which pipeline steps we want to run by putting a ""1"" next them.

    Example:
    
        run_tile_creator: 1

        run_tile_downloader: 1

        run_tile_processor: 1

        run_tile_coords_updater: 0

        run_registry_creator: 1
        
In the interactive Docker container, we then execute the pipeline with:

      python run_pipeline.py

After successful completion, the resulting PV registry for your area of interest will be written to /data/pv_registry.

## List of available counties:
        
Please choose the county you would like to run the pipeline for from the following list:

- Düren
- Essen
- Unna
- Mönchengladbach
- Solingen
- Dortmund
- Gütersloh
- Olpe
- Steinfurt
- Bottrop
- Coesfeld
- Leverkusen
- Köln
- Soest
- Mülheim-a.d.-Ruhr
- Münster
- Heinsberg
- Oberhausen
- Euskirchen
- Krefeld
- Warendorf
- Recklinghausen
- Bochum
- Rhein-Kreis-Neuss
- Rheinisch-Bergischer-Kreis
- Herne
- Kleve
- Bonn
- Minden-Lübbecke
- Herford
- Rhein-Sieg-Kreis
- Düsseldorf
- Hagen
- Paderborn
- Wuppertal
- Oberbergischer-Kreis
- Viersen
- Rhein-Erft-Kreis
- Märkischer-Kreis
- Städteregion-Aachen
- Remscheid
- Mettmann
- Lippe
- Ennepe-Ruhr-Kreis
- Hochsauerlandkreis
- Gelsenkirchen
- Höxter
- Borken
- Hamm
- Bielefeld
- Duisburg
- Siegen-Wittgenstein
- Wesel 

## OpenNRW Platform:

For the German state of North Rhine-Westphalia (NRW), OpenNRW provides:

- Aerial imagery at a spatial resolution of 10cm/pixel
- Extensive 3D building data in CityGML format

## License:

[MIT](https://github.com/kdmayer/PV_Pipeline/blob/master/LICENSE)

## BibTex Citation:

Please cite our work as

    @article{MAYER2022,
    title = {3D-PV-Locator: Large-scale detection of rooftop-mounted photovoltaic systems in 3D},
    journal = {Applied Energy},
    volume = {310},
    pages = {118469},
    year = {2022},
    issn = {0306-2619},
    doi = {https://doi.org/10.1016/j.apenergy.2021.118469},
    url = {https://www.sciencedirect.com/science/article/pii/S0306261921016937},
    author = {Kevin Mayer and Benjamin Rausch and Marie-Louise Arlt and Gunther Gust and Zhecheng Wang and Dirk Neumann and Ram Rajagopal},
    keywords = {Solar panels, Renewable energy, Image recognition, Deep learning, Computer vision, 3D building data, Remote sensing, Aerial imagery},
    }
",42,42,4,0,renewable-energy,"[ai, climate-change, computer-vision, deep-learning, deeplabv3, deepsolar, inception-v3, network-planning, neurips-2020, pv-systems, remote-sensing, renewable-energy, satellite-imagery, solar, solar-panels]",00000
1171,open-source-in-environmental-sustainability,protontypes,protontypes,https://github.com/protontypes/open-source-in-environmental-sustainability,https://api.github.com/repos/protontypes/open-source-in-environmental-sustainability,The first analysis of the open source software ecosystem in sustainability and climate technology,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C12A:784E:75DC15:F35293:6522427D.'}",41,41,6,0,renewable-energy,"[climate-change, climate-science, energy-efficiency, renewable-energy, sustainability, sustainable-development-goals]",00000
1172,solar-forecasting-RNN,sakshi-mishra,N/A,N/A,https://api.github.com/repos/sakshi-mishra/solar-forecasting-RNN,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C174:5831:2BB986A:599A9EE:6522427E.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1173,glaes,FZJ-IEK3-VSA,N/A,N/A,https://api.github.com/repos/FZJ-IEK3-VSA/glaes,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C171:05EF:6E62C8:E444BE:6522427E.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1174,RenewableEnergyManagement,SajjadAsefi,N/A,N/A,https://api.github.com/repos/SajjadAsefi/RenewableEnergyManagement,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C18A:7AEF:2DD2F1A:5DB49A3:6522427F.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1175,Renewable-energy-weather,hugorcf,N/A,N/A,https://api.github.com/repos/hugorcf/Renewable-energy-weather,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1F8:5934:285F7F3:53044B2:6522427F.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1176,pyGRETA,tum-ens,N/A,N/A,https://api.github.com/repos/tum-ens/pyGRETA,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C154:73C7:715B9C:EA0E4D:65224280.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1177,renewcast,derevirn,N/A,N/A,https://api.github.com/repos/derevirn/renewcast,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1C0:2319:694E03:DA16B0:65224280.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1178,Forecasting-Solar-Energy,CynthiaKoopman,N/A,N/A,https://api.github.com/repos/CynthiaKoopman/Forecasting-Solar-Energy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13C:7E09:25FBEEF:4E46D72:65224156.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1179,euro-calliope,calliope-project,N/A,N/A,https://api.github.com/repos/calliope-project/euro-calliope,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1AE:607B:78D11D:F8E5CE:65224281.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1180,knowledge-hub,ClimateTown,N/A,N/A,https://api.github.com/repos/ClimateTown/knowledge-hub,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C15D:29CE:32FBCF4:680C8C3:65224282.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1181,SolOptXMR,mj-xmr,N/A,N/A,https://api.github.com/repos/mj-xmr/SolOptXMR,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F3:6584:284439B:52CC228:6522415B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1182,sup3r,NREL,N/A,N/A,https://api.github.com/repos/NREL/sup3r,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CE:797D:2879EB:546A58:6522415D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1183,EOLES_elecRES,BehrangShirizadeh,N/A,N/A,https://api.github.com/repos/BehrangShirizadeh/EOLES_elecRES,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C186:87DB:2FFD14E:61FE684:65224282.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1184,antaresViz,rte-antares-rpackage,N/A,N/A,https://api.github.com/repos/rte-antares-rpackage/antaresViz,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1DF:309A:2E5C372:5E967D2:65224283.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1185,PV_Pipeline,kdmayer,N/A,N/A,https://api.github.com/repos/kdmayer/PV_Pipeline,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1E1:46E9:754E6C:F1F225:65224283.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1186,Irradiance-RNN,antoninodimaggio,N/A,N/A,https://api.github.com/repos/antoninodimaggio/Irradiance-RNN,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:6B96:2869CC4:532AA89:65224163.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1187,microgrid-dapp,yurigabrich,N/A,N/A,https://api.github.com/repos/yurigabrich/microgrid-dapp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D7:4C24:2B7C98C:59385A2:65224162.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1188,day-ahead-probablistic-forecasting-with-quantile-regression,RichardFindlay,N/A,N/A,https://api.github.com/repos/RichardFindlay/day-ahead-probablistic-forecasting-with-quantile-regression,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1BA:36DF:355F8E7:6CD14A5:65224284.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1189,Reinforcement-Learning-forPowerGrid-Operation_and_Maineinance,Roberock,N/A,N/A,https://api.github.com/repos/Roberock/Reinforcement-Learning-forPowerGrid-Operation_and_Maineinance,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1F6:418F:2A6B712:56BADB4:65224284.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1190,sustainable-energy-transitions,csaladenes,N/A,N/A,https://api.github.com/repos/csaladenes/sustainable-energy-transitions,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C181:58D0:770EED:F50C64:65224285.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1191,bevrp,PhilippBrendel,N/A,N/A,https://api.github.com/repos/PhilippBrendel/bevrp,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C162:5831:2BB9EC4:599B72E:65224285.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1192,microgrid_optimizer,mx-e,N/A,N/A,https://api.github.com/repos/mx-e/microgrid_optimizer,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:2772:28BDAC8:53CE8F6:65223FDA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1193,EV-Fleet-Simulator,abrac,N/A,https://github.com/abrac/EV-Fleet-Simulator,https://api.github.com/repos/abrac/EV-Fleet-Simulator,*NOTE*: This is a mirror. The original repository is linked below. This software computes the electrical energy requirements of a fleet of vehicles. It also determines how much of this energy can be offset by renewable energy. It does all this by analyzing the fleet's GPS traces and applying EV and PV models.,"<!-- Note: This is a markdown file. Use a markdown editor to easily edit and
     view this file. Just search the web for a nice markdown editor (like
     Ghostwriter). -->

> Notice: Please visit https://gitlab.com/eputs/ev-fleet-sim to ensure that you
> are viewing the official, up-to-date version of this repository.

Electric-Vehicle Fleet Simulator
================================

This program is used to predict the energy usage of a fleet of electric vehicles. The program receives as input GPS traces of each of the vehicles of the fleet. These GPS traces can be obtained, for example, by installing tracking devices onto the vehicles of a fleet for which you want to predict the electrical energy usage. This is especially useful for projects whereby an existing petrol/diesel fleet is to be converted to electric vehicles. The program will analyse the vehicle's driving and stopping patterns in order to predict the amount of energy used and the amount of time that the vehicle can be charged during the average day. In addition, the program makes provisions to calculate how much of the energy can be provided for by renewable-energy sources.

Please refer to the accompanying open-access journal article publication: [Ray of hope for sub-Saharan Africa's paratransit: Solar charging of urban electric minibus taxis in South Africa](https://doi.org/10.1016/j.esd.2021.08.003). The article shows how this program can be used to derive meaningful results.

Licensing
=========

This software is [licensed under GPLv3](./LICENSE)

If you use the software, or a derivative thereof, you are required to attribute the original authors using the following citation:

> Abraham, C. J., Rix, A. J., Ndibatya, I., & Booysen, M. J. (2021). Ray of
> hope for sub-Saharan Africa's paratransit: Solar charging of urban electric
> minibus taxis in South Africa. Energy for Sustainable Development, 64,
> 118-127. https://doi.org/10.1016/j.esd.2021.08.003

<details><summary>Bibtex</summary>

```
@article{abraham2021,
title = {Ray of hope for sub-Saharan Africa's paratransit: Solar charging of urban electric minibus taxis in South Africa},
journal = {Energy for Sustainable Development},
volume = {64},
pages = {118-127},
year = {2021},
issn = {0973-0826},
doi = {https://doi.org/10.1016/j.esd.2021.08.003},
url = {https://www.sciencedirect.com/science/article/pii/S0973082621000946},
author = {C.J. Abraham and A.J. Rix and I. Ndibatya and M.J. Booysen},
keywords = {Electric vehicle, Paratransit, Minibus taxi, Demand management, Renewable energy},
abstract = {Minibus taxi public transport is a seemingly chaotic phenomenon in the developing cities of the Global South with unique mobility and operational characteristics. Eventually this ubiquitous fleet of minibus taxis is expected to transition to electric vehicles, which will result in an additional energy burden on Africa's already fragile electrical grids. This paper examines the electrical energy demands of this possible evolution, and presents a generic simulation environment to assess the grid impact and charging opportunities. We used GPS tracking and spatio-temporal data to assess the energy requirements of nine electric minibus taxis as well as the informal and formal stops at which the taxis can recharge. Given the region's abundant sunshine, we modelled a grid-connected solar photovoltaic charging system to determine how effectively PV may be used to offset the additional burden on the electrical grid. The mean energy demand of the taxis was 213kWh/d, resulting in an average efficiency of 0.93kWh/km. The stopping time across taxis, a proxy for charging opportunity, ranged from 7.7 h/d to 10.6 h/d. The energy supplied per surface area of PV to offset the charging load of a taxi while stopping, ranged from 0.38 to 0.90kWh/m2 per day. Our simulator, which is publicly available, and the results will allow traffic planners and grid operators to assess and plan for looming electric vehicle roll-outs.}
}
```
</details>

Please also click the ""star"" button on the top of our [code repository](https://gitlab.com/eputs/ev-fleet-sim) so that we know how many people our software is benefitting. This helps us to justify future funding and work on the project. Thank you!

Documentation
=============

To learn how to install and use this software, please refer to the [documentation](https://ev-fleet-sim.online/docs.html).

If you learn better with videos, here is a video tutorial of the software:

<a href=""https://youtu.be/vhiw34Hm7CI"" target=""_blank"" rel=""noopener noreferrer"">![Video Tutorial](./docs/assets/images/youtube_tutorial.png)</a>

Getting Support
===============

Welcome to our EV-Fleet-Sim community! You can join our community's Matrix
channel (an open-source alternative of Microsoft Teams):
https://matrix.to/#/#ev-fleet-sim:matrix.org.

For more help, please don't hesitate to contact me on my e-mail address: 
`chris <abraham-without-the-A's> [at] gmail [dot] com` or via Matrix:
https://matrix.to/#/@abrac:matrix.org.

If you have encountered any issues/bugs with the software, you can report them in our [issues tracker](https://gitlab.com/eputs/ev-fleet-sim/-/issues).

Also remember to press the ""star"" and ""notification bell"" on the top of the
GitLab page. That way, you will be notified of the latest commits and
pull-requests.
",12,12,1,1,renewable-energy,"[data-analysis, electric-vehicles, public-transport, python, renewable-energy]",00000
1194,est603-energy-systems-analysis-2022-fall,drganghe,N/A,https://github.com/drganghe/est603-energy-systems-analysis-2022-fall,https://api.github.com/repos/drganghe/est603-energy-systems-analysis-2022-fall,Class material for EST603 Energy Systems Analysis 2022 Fall  https://drganghe.github.io/est603-energy-systems-analysis-2022-fall,"# EST603 Energy Systems Analysis (2022 Fall)

This is the website for EST603 Energy Systems Analysis 2022 Fall. I will share the slides, homework, and source files here.  

## Acknowledgment

This class benefits from many similar classes and I cannot credit them enough below:  

- John Helveston, [EMSE 4572: Exploratory Data Analysis @ GWU](https://github.com/emse-eda-gwu/2022-Fall)  

- Tom Brown, [Energy Systems](https://nworbmot.org/teaching.html)  

- Michael Davidson and Jesse Jenkins, [Power systems optimization](https://github.com/east-winds/power-systems-optimization)

- Daniel Kammen, [Energy and Society](http://kammen.berkeley.edu/)  

- Duncan Callaway, [Electric Power Systems](https://erg.berkeley.edu/people/callaway-duncan/)

- Severin Borenstein, [Energy and Environmental Markets](http://courses.haas.berkeley.edu/descriptions/Descriptions/EWMBA212-1_Spring14.htm)  

- Jon Koomey, [Turning Numbers into Knowledge: Mastering the Art of Problem Solving](https://www.koomey.com/books.html)  

- Scott Moura, [Energy System and Control](https://ecal.berkeley.edu/ce295.html)  

- Baosen Zhang, [Introduction to Energy Systems](https://zhangbaosen.github.io/teaching/EE351)  

## Reuse of material

<a rel=""license"" href=""http://creativecommons.org/licenses/by-nc-sa/4.0/""><img alt=""Creative Commons License"" style=""border-width:0"" src=""https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"" /></a><br />This work is licensed under a <a rel=""license"" href=""http://creativecommons.org/licenses/by-nc-sa/4.0/"">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>. 

Please feel free to reuse any material that you find helpful. Copyrights belong to cited authors/creators. For those from myself, you can just link to my [site](https://drganghe.github.io) or this [course site](https://drganghe.github.io/est603-energy-systems-analysis-2022-fall) for credit.

## How to help  

If you like this course, please **Star** this repository. If you find any issue, please use the ""Report an issue"" on the right side of a specific page. You can help more people to access the open-source course by spreading the word. Comments and suggestions are very welcome.",12,12,1,0,renewable-energy,"[course, energy-modelling, energy-policy, energy-systems, energy-systems-analysis, power-systems-analysis, powersystems, renewable-energy]",00000
1195,CO2,GeopJr,N/A,https://github.com/GeopJr/CO2,https://api.github.com/repos/GeopJr/CO2,A GitHub action that notifies you about your website's carbon emissions and gives you some fun facts about it,"<h1 align=""center"">🌱 CO2 🔥</h1>
<h4 align=""center"">Get notified about your website's carbon emissions using GitHub Actions</h4>
<p align=""center"">
  <br />
    <a href=""https://github.com/GeopJr/CO2/blob/main/CODE_OF_CONDUCT.md""><img src=""https://img.shields.io/badge/Contributor%20Covenant-v2.1-86d72a.svg?style=for-the-badge&labelColor=6c4331"" alt=""Code Of Conduct"" /></a>
    <a href=""https://github.com/GeopJr/CO2/blob/main/LICENSE""><img src=""https://img.shields.io/badge/LICENSE-BSD--2--Clause-86d72a.svg?style=for-the-badge&labelColor=6c4331"" alt=""BSD-2-Clause"" /></a>
</p>

#

## How does CO2 (the action) work?

CO2 (the action) will calculate your website's carbon emissions based on the amount of data it transfers to the client, as well as notify you if your host is using renewable or bog standard energy, along with how much CO2 you could not emit by switching to one that uses renewable energy (if not on one already).
Some fun (or not so fun) facts about it in the long run will also be included!

To stay on par with [Website Carbon Calculator](https://websitecarbon.com/) without spamming their API, the same functions happen locally.
This includes their [calculations](https://gitlab.com/wholegrain/carbon-api-2-0) as well as their way of getting the amount transferred data (lighthouse).

The renewable energy data is provided by the [The Green Web Foundation](https://www.thegreenwebfoundation.org/), however since it relies on an external API, it is disabled by default.

Lastly, the action will:

- print the results on the action log
- comment on the commit that caused the push event to be emitted
- comment on the PR that caused a pull_request event to be emitted

The action uses a prebuilt Docker image based on node:lts-slim with chromium and pnpm. You can find it on [Dockerfile.base](./Dockerfile.base). During building, [Dockerfile.base.dockerignore](./Dockerfile.base.dockerignore) replaces [.dockerignore](./.dockerignore).

#

## Installation

A basic workflow would be:

```yaml
# .github/workflows/CO2.yaml
name: Calculate CO2 🌱
# You can remove any you don't want
on: [push, pull_request]

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate CO2 🌱
        uses: GeopJr/CO2@v1
        with:
          url: ""https://geopjr.dev/""
          renewable: true
```

### Input

| Key         |       Default       | Required | Description                                                                    |
| ----------- | :-----------------: | :------: | ------------------------------------------------------------------------------ |
| `url`       |          -          |    ✅    | The url to check (please include the protocol eg. `https://`)                  |
| `comment`   |       `true`        |    ❌    | Whether to create commit & PR comments                                         |
| `token`     | `${{github.token}}` |    ❌    | Token used for creating comments                                               |
| `renewable` |       `false`       |    ❌    | Whether to check if the website uses renewable energy (calls external service) |
| `nerds`     |       `true`        |    ❌    | Whether to include 'Stats for nerds' (comment only)                            |
| `footer`    |       `true`        |    ❌    | Whether to include the footer (comment only)                                   |

#

## Combinations

You can combine actions and create cases for more control, here's some:

<details><summary>Conditional based on event</summary>

```yaml
# .github/workflows/CO2.yaml
name: Calculate CO2 🌱

on: [push, pull_request]

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate CO2 🌱 on push
        if: github.event_name == 'push'
        uses: GeopJr/CO2@v1
        with:
          url: ""https://gnome.org/""
          renewable: true

      - name: Calculate CO2 🌱 on PR
        if: github.event_name == 'pull_request'
        uses: GeopJr/CO2@v1
        with:
          url: ""https://kde.org/""
          renewable: true
```

</details>

<details><summary>After Netlify finishes a preview</summary>

This uses an external actions, please read the following before using:

- https://github.com/JakePartusch/wait-for-netlify-action

```yaml
# .github/workflows/CO2.yaml
name: Calculate CO2 🌱

on: [push, pull_request]

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Waiting for Netlify to finish the preview
        uses: jakepartusch/wait-for-netlify-action@v1.3
        id: netlify
        with:
          site_name: ""replaceme""
          max_timeout: 60
      - name: Calculate CO2 🌱
        uses: GeopJr/CO2@v1
        with:
          url: ""${{ steps.netlify.outputs.url }}""
          renewable: true
```

</details>

<details><summary>After Vercel finishes a preview</summary>

This uses an external actions, please read the following before using:

- https://github.com/zentered/vercel-preview-url
- https://github.com/UnlyEd/github-action-await-vercel

```yaml
# .github/workflows/CO2.yaml
name: Calculate CO2 🌱

on: [push, pull_request]

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - run: sleep 60
      - name: Waiting for Vercel to finish the preview
        uses: zentered/vercel-preview-url@v1.0.0
        id: vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          vercel_team_id: ""replaceme""
          vercel_project_id: ""replaceme.com""
      - name: Calculate CO2 🌱
        uses: GeopJr/CO2@v1
        with:
          url: ""https://${{ steps.vercel.outputs.preview_url }}""
          renewable: true
```

</details>

<details><summary>Additional conditions</summary>

```yaml
# Only run on commits that have ""[CO2]"" in their title
if: ""contains(github.event.head_commit.message, '[CO2]')""
# Only run on commits that don't have ""[skip-CO2]"" in their title
if: ""!contains(github.event.head_commit.message, '[skip-CO2]')""
# Check if it's a PR from the same repo (not a fork)
if: github.event.pull_request.head.repo.full_name == github.repository
# Run only when a file in a certain folder changes
on:
  push: # pull_request also works
    paths:
      - 'website/'
```

</details>

#

## Screenshots

<details><summary>Commit comment</summary>

<img src=""https://i.imgur.com/0RGQEQ9.png"" alt=""commit comment with the result of CO2"" width=""768px"" />

</details>

<details><summary>PR review</summary>

<img src=""https://i.imgur.com/HiI2yCv.png"" alt=""pull request comment/review with the result of CO2"" width=""768px"" />

</details>

<details><summary>Action log</summary>

<img src=""https://i.imgur.com/82BdVP6.png"" alt=""action log with the result of CO2"" />

</details>

#

## Credits

This whole action is heavily inspired by the [Website Carbon Calculator](https://www.websitecarbon.com/) by [Wholegrain Digital](https://www.wholegraindigital.com/).

The renewable energy check is being done by [The Green Web Foundation](https://www.thegreenwebfoundation.org/).

Both of them support a great cause so consider supporting them:

- https://www.wholegraindigital.com/#services
- https://nlnet.nl/donating/ (I'm not sure how to donate to The Green Web Foundation, but this it the closest I could find)

Take action: [Switch to a green host](https://www.wholegraindigital.com/blog/choose-a-green-web-host/) | [Make your website more efficient](https://www.wholegraindigital.com/blog/website-energy-efficiency/) | [Plant trees to reduce your carbon impact](https://treesforlife.org.uk/support/for-businesses/carbon-offsetting/)

#

## Contributing

1. Read the [Code of Conduct](https://github.com/GeopJr/CO2/blob/main/CODE_OF_CONDUCT.md)
2. Fork it ( https://github.com/GeopJr/CO2/fork )
3. Create your feature branch (git checkout -b my-new-feature)
4. Commit your changes (git commit -am 'Add some feature')
5. Push to the branch (git push origin my-new-feature)
6. Create a new Pull Request
",12,12,3,3,renewable-energy,"[actions, carbon-emissions, ci, co2, ecology, planet, renewable-energy]",00000
1196,pywind,zathras777,N/A,https://github.com/zathras777/pywind,https://api.github.com/repos/zathras777/pywind,Python files for getting and parsing UK renewable energy information.,"pywind
======

Documentation: [![Documentation Status](https://readthedocs.org/projects/pywind/badge/?version=latest)](http://pywind.readthedocs.io/en/latest/?badge=latest)

The pywind module is intended to provide a python module that can be used
to access online information related to Renewable Energy in the UK.

Following an extensive rewrite in Aug 2016 documentation is now available at [http://pywind.readthedocs.io/en/latest/]

7th April 2022 Update
---------------------

Ofgem Certificates can be retrieved but the scheme cannot be set or it will fail :-(

The period can be set and works as expected. I will try to debug this further over the next week or so. I have fixed a few minor issues and the XML export works again.

5th April 2022 Update
---------------------

This project isn't dead, just resting :-)

I've spent some time and fixed some bugs that prevented it working. Here's the summary,

- removed ROC prices as they're no longer available
- removed the DECC planning data as the URL no longer exists
- Ofgem certificate retrieval is presently broken :-(
- Adjusted Elexon API to work
- Started removing Python 2 support
- Removed the CI tag as I need to update it

The issue with Ofgem is that when trying to actually get the data it redirects to an error page saying the session has expired. If anyone knows what's going on then let me know :-)

I will try and get a release pushed once the Ofgem certificate issue is resolved.",11,11,9,0,renewable-energy,"[python, renewable-energy]",00000
1197,energy_maps,0-k,N/A,https://github.com/0-k/energy_maps,https://api.github.com/repos/0-k/energy_maps,Interactive maps on all things energy,"# Energy Maps

Mapping energy issues

Starting with batteries in Germany. Let's see where we get here.

## Credits

Martin Klein, 2022
",10,10,1,2,renewable-energy,"[batteries, battery, datavisualization, mapping, maps, renewable-energy]",00000
1198,solar-and-wind-potentials,calliope-project,N/A,N/A,https://api.github.com/repos/calliope-project/solar-and-wind-potentials,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10D:8AB4:298AE46:554D81A:65223FE0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1199,austin-green-energy-predictor,Duvey314,N/A,https://github.com/Duvey314/austin-green-energy-predictor,https://api.github.com/repos/Duvey314/austin-green-energy-predictor,A machine learning model using weather data to predict MWH output of solar and wind farms in Texas.,"# Austin Energy Predictor

![Austin Energy](https://austinenergy.com/wcm/connect/5f1c9e35-5964-489f-ac58-46cd0c865727/AELogo_RGB.jpg?MOD=AJPERES&CVID=mUt6-Xx)
---

# Table of Contents
* [Overview](#overview)
* [Datasets](#datasets)
* [Database](#database)
* [Methodology](#methodology)
* [Model](#model)
* [Dashboard](#dashboard)
* [Team](#team)
* [Acknowledgements](#acknowledgements)
* [Resources](#resources)

# Overview
--- 
This model is a culmination of a 5-week capstone project for the UT Austin Data Analytics & Visualization Bootcamp. Using our proficiencies in core Python, we retrieved weather data from online resources, organized it into easily-accessible data formats and interpreted the data relationships. 

The Austin Energy Predictor outputs forecasted renewable energy in Megawatt-Hours  (MWh) generated from a wind and solar energy farm in Texas. The model is used to predict renewable energy output based on time and weather factors, such as temperature, wind speed and cloud coverage.

Our purpose is to forecast power generation to get a better understanding of renewable energy as a mainstream power source for a healthier planet. We hope you enjoy learning about the project! Please feel free to contact us if you have any questions. You can find our github and linkedin pages at the bottom.(link to bottom of page)

To View our Project Dashboard, please visit this link: https://austin-green-energy-predictor.herokuapp.com/

To View our Project on Google Slides, please visit this link:
https://docs.google.com/presentation/d/1bD3JhPvRM_7ClN2xdoWEC1OZS5LJlWrjyJesHR8705s/edit#slide=id.ga1bdb9328c_0_10

To View a recorded, short demonstration (~5 min) of our Project, please visit this link:


To View a recorded, in depth overview (~15 min) of the Project, please visit this link: 
https://www.youtube.com/watch?v=Vx4V56U1gDI&t=1s

# Datasets
---
The machine learning model predicts renewable energy output based on weather conditions. Therefore, the model is fed two types of data - energy output data (MWh) and weather data. 

Energy Output Data:
Our team utilized energy output data provided by Austin energy for two of their renewable energy farms: Hackberry Wind Farm and Webberville Solar Farm. The data consists of hourly power generation for each of the renewable energy farms from 2017 through July of 2020. https://www.nj.gov/emp/energy/faq.html

The Hackberry Wind Farm is located west of Dallas, and Webberville Solar Farm is located just outside of Austin. The location of both renewable energy farms as well as Austin Energy’s additional energy farms can be observed below:

![Gen Map](https://github.com/Duvey314/austin-green-energy-predictor/blob/master/Resources/Images/Gen%20Map.png)

Both of these datasets (found under ""Resources"") are provided directly by Austin Energy and contain the hourly output of the wind/solar farm in Mwh. Take a look below for additional information on each of these farms:

[Hackberry Wind Farm](https://www.thewindpower.net/windfarm_en_4012_hackberry.php) -
* City: Albany, Shackelford
* Commissioning: 2008
* 72 turbines: Siemens SWT-2.3-93 (power 2 300 kW, diameter 93 m)
* Hub height: 80 m
* Total nominal power: 165,600 kW
* Latitude: 32° 46' 34""
* Longitude: -99° 28' 35.2""

[Webberville Solar Farm](http://webbervillesolar.com/) -
* City: Manor, Texas
* Commissioning: 2012
* 127,278 PV panels
* Total nominal power: 35,000 kw
* Latitude: 30° 14' 18""
* Longitude: -97° 30' 31""

## Historical Weather Data
Historical weather data for each farm has then been combined with the respective energy output to create two separate datasets - one for wind energy and one for solar. Using the Local Historical Weather Online API, multiple API calls were made to collect hourly weather parameters such as temperature, humidity percentage, and cloud coverage for each of the renewable energy farm locations. To ease the merging of the weather and energy output datasets, the data collected also extends the same time frame from January 2017 to July 2020.

## Forecasted Weather Data
After achieving an accurate machine learning model, forecasted weather data is used to make energy output predictions for Austin Energy’s wind and solar farm.

# Database 
---
The database used for this project is a MongoDB Atlas database hosted on an AWS server. The historical weather data and renewable energy outputs (Mwh) have been cleaned and merged on a DateTime timestamp before inserting the data into the database. The main database is the wind-solar-database, which houses two collections - a wind data collection and a solar data collection. These collections can be accessed using the PyMongo driver and a connection string along with a username and password given to each member of the team.

### Hackberry Wind MWH DataFrame
![](Resources/Images/HackberryWindMWH.png)

### Webberville Solar MWH DataFrame
![](Resources/Images/WebbervilleSolarMWH.png)

# Model
---
## Machine Learning Model Selection
The goal of the project is to predict the energy generation of renewable energy farms using weather forcast data. This means that we are looking for a model with a continuous output and therefore need some type of regression model. The two we have decided to use are a multiple linear regression and a neural network. Both models will be trained on the solar and wind data sperately.

## Multiple Linear Regression
The linear regression model is good at handling linear relationships between data but cannot handle other types of relationships without more data preprocessing. This resulted in a low accuracy for both models. The solar linear regression achieved an accuracy of ~60%. This closely resembled the shape of the data but could not predict the value of the power generated very well. The wind linear regression achieved an accuracy of ~30% and had many of the same pitfalls of the solar regression. The output of the regression gave an impression of the shape but did not get close to the correct values. 

## Neural Network
The neural network is able to handle more complex relationships between the data which resulted in a higher accuracy for both models. The shape of the two models are very similar. Both use a relu function output to ensure that the output is continuous and non negative. This is particularly important for the solar data because it has more values close to zero because it is not generating at night. Each model has three layers with 20-30 neurons per layer. The solar model has a mean absolute error of about 1.5 MWh or an accuracy of ~10%. It can predict very well the output during the day and is nearly perfect at predicting when the panels will start producing. The wind model has a mean absolute error of about 25 MWh or an accuracy of ~15%. This means that the data takes the shape of the output well but has difficulty predicting exact values.

# Future Recomendations 
Given that we only had 5 weeks to complete the project, there are definitely some things we would have loved to explore more. For future analysis, we would like to connect different weather data points to the historical data we already have. Ideally, we would like to also add more features to further develop the accuracy of the machine learning model. Lastly, we would like to develop a more advanced model for both solar and wind power generation. Our team would like to continue working with energy companies to predict energy output and give them an advantage in the energy marketplace. We also hope to empower consumers to make energy choices based on forecasted renewable energy output. 

## Tech Stack
Html, Flask, CSS, JavaScript, MongoDB, PyMongo, Matplotlib, Seaborn, Plotly, hvPlot, Scikit-Learn Library, TensorFlow Library, Pickle Module, Heroku

# Team
---
## Team Members
* [Oshadi Wimalarathne](https://www.linkedin.com/in/oshadiw/) - [GitHub](https://github.com/oshadiw)

* [Melina indrasena](https://www.linkedin.com/in/melina-indrasena/) - [GitHub](https://github.com/msindrasena)

* [Rahul Madarapu](https://www.linkedin.com/in/rahul-m-a2aa687/) - [GitHub](https://github.com/madarahr)
    
* [Collin Sculley](https://www.linkedin.com/in/collinsculley78745/) - [GitHub](https://github.com/collinsculley)
    
* [Shayna Sims](https://www.linkedin.com/in/shaynasims/) - [GitHub](https://github.com/shayna-UT)

* [David Rudow](https://www.linkedin.com/in/davidmrudow/) - [GitHub](https://github.com/Duvey314)
 



# Acknowledgements
---
* Kasun Chandrarathna (Xcel Employee):
    * Electrical Engineer at [Xcel Energy](https://www.xcelenergy.com/)
    * Provided information on how wind turbines are made and how power is generated and coverted to the grid.
* [Austin Energy](https://austinenergy.com/ae/about)
",10,10,2,1,renewable-energy,"[austin-energy, machine-learning, neural-network, renewable-energy, solar, wind]",00000
1200,possibility-for-electricity-autarky,timtroendle,N/A,https://github.com/timtroendle/possibility-for-electricity-autarky,https://api.github.com/repos/timtroendle/possibility-for-electricity-autarky,Is your European region able to provide itself with 100% renewable electricity?,"# Possibility for renewable electricity autarky in Europe

Is your European region able to provide itself with 100% renewable electricity?

This repository contains the entire research project, including code and report. The philosophy behind this repository is that no intermediary results are included, but all results are computed from raw data and code.

[![article DOI](https://img.shields.io/badge/article-10.1016%2Fj.esr.2019.100388-blue)](https://doi.org/10.1016/j.esr.2019.100388)
[![data DOI](https://img.shields.io/badge/data-10.5281%2Fzenodo.3244985-blue)](https://doi.org/10.5281/zenodo.3244985)
[![code DOI](https://img.shields.io/badge/code-10.5281%2Fzenodo.3246303-blue)](https://doi.org/10.5281/zenodo.3246303)

## Getting ready

### Installation

The following dependencies are needed to set up an environment in which the analysis can be run and the paper be build:

* [conda](https://conda.io/docs/index.html)

When these dependencies are installed, you can create a conda environment from within you can run the analysis:

    conda env create -f environment.yaml

Don't forget to activate the environment. To see what you can do now, run:

    snakemake --list

### Data to be retrieved manually

Whenever possible, data is downloaded automatically. As this is not always possible, you will need to retrieve the following data sets manually:

* [European Settlement Map 2012, Release 2017, 100m](https://land.copernicus.eu/pan-european/GHSL/european-settlement-map), to be placed at `./data/esm-100m-2017/`
* [World Exclusive Economic Zones v10](http://www.marineregions.org/downloads.php), to be placed in `./data/World_EEZ_v10_20180221`
* capacity factors from renewable.ninja, to be placed in `./data/capacityfactors/{technology}.nc` for technology in [""wind-onshore"", ""wind-offshore"", ""rooftop-pv"", ""open-field-pv""] (where ""open-field-pv"" and ""rooftop-pv"" can be the same dataset and hence can be linked instead of copied)(to run simulations, see `Manual steps` below)

## Run the analysis

    snakemake --use-conda paper

This will run all analysis steps to reproduce results and eventually build the paper.

You can also run certain parts only by using other `snakemake` rules; to get a list of all rules run `snakemake --list`.

To generate a PDF of the dependency graph of all steps, run:

    snakemake --rulegraph | dot -Tpdf > dag.pdf

(needs `dot`: `conda install graphviz`).

## Run on Euler cluster

To run on Euler, use the following command:

    snakemake --use-conda --profile config/euler

If you want to run on another cluster, read [snakemake's documentation on cluster execution](https://snakemake.readthedocs.io/en/stable/executable.html#cluster-execution) and take `config/euler` as a starting point.

## Manual steps

At the moment, there is one manual step involved: running renewables.ninja simulations of wind and solar electricity. It is added to the automatic workflow as input data. Should you want to change the simulations, because you want to change parameters of the simulation (see `parameters.ninja` in the config), you can do that in three steps:

1) Create input files by first changing the config, then running `snakemake -s rules/ninja-input.smk`.
2) Run the simulations on renewables.ninja.
3) Update the data in `data/capacityfactors/{technology}`.

## Run the tests

    snakemake --use-conda test

## Repo structure

* `report`: contains all files necessary to build the paper; plots and result files are not in here but generated automatically
* `src`: contains the Python source code
* `tests`: contains the test code
* `config`: configurations used in the study
* `rules`: additional Snakemake rules and workflows
* `data`: place for raw data, whether retrieved manually and automatically
* `build`: will contain all results (does not exist initially)

## Citation

If you use this code or data in an academic publication, please see `CITATION.md`.

## License

The code in this repo is MIT licensed, see `./LICENSE.md`. This excludes the KlinicSlab font family (all files in `./report/fonts/`) which is copyright Lost Type.
",10,10,3,1,renewable-energy,"[analysis, electricity-autarky, europe, paper, renewable-energy, reproducible-research, research]",00000
1201,PP-MTB,Energinet-AIG,N/A,N/A,https://api.github.com/repos/Energinet-AIG/PP-MTB,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2BADE62:599ADF4:65224172.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1202,mate3,adamcharnock,N/A,N/A,https://api.github.com/repos/adamcharnock/mate3,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F6:797D:2891B9:549BD8:65224178.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1203,HyNuRT,tzhang0475,N/A,https://github.com/tzhang0475/HyNuRT,https://api.github.com/repos/tzhang0475/HyNuRT,Hybrid Nuclear Renewable Tool,"# HyNuRT: Hybrid Nuclear Renewable Tool
HyNuRT (**Hy**brid **Nu**clear **R**enewable **T**ool) is a toolkit to perform techno-economic analysis of a hybrid energy system. It can also perform standalone technical or economical analyses of a nuclear system, a renewable system, or a hybrid energy system, respectively.

**CITATION**

To cite this code, please refer to:

Tian Zhang, *Techno-economic analysis of a nuclear-wind hybrid system with hydrogen storage*, Journal of Energy Storage, Volume 46, 2022, 103807, ISSN 2352-152X, https://doi.org/10.1016/j.est.2021.103807.
",8,8,2,0,renewable-energy,"[energy, hydrogen, nuclear, renewable-energy, system-modeling, wind]",00000
1204,Geocode,SheffieldSolar,N/A,N/A,https://api.github.com/repos/SheffieldSolar/Geocode,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D4:68AA:2E7C633:5F2F900:65223FE8.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1205,prosumerpolicy,0-k,N/A,N/A,https://api.github.com/repos/0-k/prosumerpolicy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F6:797D:289676:54A5A6:6522417D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1206,openafpm-cad-core,gbroques,N/A,https://github.com/gbroques/openafpm-cad-core,https://api.github.com/repos/gbroques/openafpm-cad-core,Repository containing OpenAFPM wind turbine CAD model.,"# OpenAFPM CAD Core

Repository containing [OpenAFPM](https://www.openafpm.net/) wind turbine model made with open-source CAD program [FreeCAD](https://www.freecad.org/).

## Installing Package

From the root of this repository:

    pip install --editable .


## Installing Macros

From the root of this repository:

    ./link_macros.bash


## Related Repositories
* [openafpm-cad-visualization](https://github.com/gbroques/openafpm-cad-visualization)
* [openafpm-cad-desktop-app](https://github.com/gbroques/openafpm-cad-desktop-app)


## Prerequisites

1. Install [Miniconda (conda)](https://docs.conda.io/en/latest/miniconda.html).


## Setup
Execute the following commands from the root of this repository.

1. Create `openafpm-cad-core` conda environment.

       conda env create --file environment.yml

2. Activate `openafpm-cad-core` environment.

       conda activate openafpm-cad-core

3. Add the `$CONDA_PREFIX/lib` directory to `$PYTHONPATH` (this allows `FreeCAD` to be imported as a module within python).

       ./add_conda_path_to_python_path.sh

4. Deactivate and re-activate ``openafpm-cad-core`` environment.

       conda deactivate && conda activate openafpm-cad-core


5. Verify ``freecad`` executable is accessible:

       freecad --version


## Docs
Run `./make_docs.sh` from `docs/` with `openafpm-cad-core` conda environment activated.


## How to Upgrade FreeCAD Version
The version of FreeCAD is defined in `environment.yml` within the root of this repository.

1. Check if there's a newer version from FreeCAD's [GitHub releases page](https://github.com/FreeCAD/FreeCAD/releases) or [Wiki](https://wiki.freecad.org/Feature_list#Release_notes).
2. Increase version for `freecad` in `environment.yml`.
3. Remove `openafpm-cad-core` conda environment created in the ""Setup"" section.

       conda remove --name openafpm-cad-core --all

4. Reperform steps in the [Setup](#setup) section to recreate `openafpm-cad-core` conda environment.
5. Regression test all functionality. (TODO: Write documentation for this)


## Supported FreeCAD Versions

Currently tested with FreeCAD `21.0`.


## Links
* [[YouTube] Wind Empowerment Webinar - OpenAFPM tools for designing AFPM generators for Small Wind Turbines](https://www.youtube.com/watch?v=hk0j-qxkG9s&ab_channel=WindEmpowerment)
* [Wind Empowerment](https://windempowerment.com/)
* [WISIONS of Sustainability](https://wisions.net/)
* [Hugh Piggott's blog](http://scoraigwind.co.uk/)
  * [A Wind Turbine Recipe Book (metric edition) by Hugh Piggott](http://scoraigwind.co.uk/pdf-metric-edition-of-recipe-book-at-scribd/)
* [[Wikipedia] Wind turbine design](https://en.wikipedia.org/wiki/Wind_turbine_design)",8,8,4,0,renewable-energy,"[freecad, renewable-energy, wind-power, wind-turbine, wind-turbine-generator, wind-turbine-simulation, windturbine]",00000
1207,high-boltage,jcvidiri,N/A,https://github.com/jcvidiri/high-boltage,https://api.github.com/repos/jcvidiri/high-boltage,proof-of-concept for a renewable energy purchase certification system based on blockchain technology,"# High ₿oltage

## SERVER

### Install dependencies
```bash
npm i && npm i -g forever
```
### Run developement mode:

```bash
npm run dev
```

### Run tests:

```bash
npm run test
```

### Start a single node:

```bash
npm start $h $p
```

> i.e. `npm start 3000 6000`

### Start multiple nodes:

```bash
npm run start-multiple $h $p $i
```

> Http and p2p ports will be the following `n` port numbers where `n` is the initial port + (instance number - 1). For example, `npm run start-multiple h=3000 p=6000 i=4` will generate the following instances: 

| uid          | http | p2p  | instance | total instances |
| ------------ | ---- | ---- | -------- | --------------- |
| hb-3000-6000 | 3000 | 6000 | 1        | 4               |
| hb-3001-6001 | 3001 | 6001 | 2        | 4               |
| hb-3002-6002 | 3002 | 6002 | 3        | 4               |
| hb-3003-6003 | 3003 | 6003 | 4        | 4               |

### Stop multiple nodes:

```bash
npm run stop-multiple
```

### Start single node inside multiple hive
```bash
npm run start-single $h $p $instance $instances
```
> i.e `npm run start-single h=3005 p=6005 instance=6 instances=6`

### Watch logs
```bash
npm run log $h $p
```
> i.e npm run log h=3000 p=6000



### FOR DEMO
```
mutation {
  createFlowWithTestKey(flow:{
    amount: 4,
    claimId: ""6952c20960f56ea781f0b3aa7ad820c3108d60ff9dd67de9546047b63bbd1d2d""
  }, testKey: ""1"") {
    id
    claimId
    timestamp
    amount
    generator
    signature
    cammesaSignature
  }
}
```

```
mutation {
  createContract(contract:{
    amount: 30,
 		price: 900
  }) {
    price
    claimId
    claimId
    amount
    expDate
  }
}
```
",7,7,2,0,renewable-energy,"[blockchain, energy, graphql, javascript, nodejs, renewable-energy, typescript]",00000
1208,battery-optimisation-with-drl,RichardFindlay,N/A,https://github.com/RichardFindlay/battery-optimisation-with-drl,https://api.github.com/repos/RichardFindlay/battery-optimisation-with-drl,"Grid-scale li-ion battery optimisation for wholesale market arbitrage, using pytorch implementation of dqn, double dueling dqn and a noisy network dqn.","# Optimising Grid-Scale Lithium-ion Batteries with Deep Reinforcement Learning (DRL)
:rocket: Blog post on personal website :link: [Deep Reinforcement Learning for Grid Scale Lithium-ion Battery Optimisation](https://richardfindlay.co.uk/deep-reinforcement-learning-for-grid-scale-lithium-ion-battery-optimisation-3)

<p align=""center"">
  <img src=""https://github.com/RichardFindlay/battery-optimisation-with-drl/blob/main/visualisations/d3_interactive_plot_screenshot.png"" />
  screenshot of interactive d3.js plot illustrating timeseries performance of Double-Dueling DQN
</p>

### Project Description :open_book::
The repository demonstrates the capabilities of data driven techniques by investigating the novel application of Deep Reinforcement Learning (DRL) to maximising the profit of a battery from wholesale energy arbitrage. Largely based on the codeless academic paper from [Cao et al. (2019)](https://eprints.keele.ac.uk/8408/1/final_submitted_energy_storage_arbitrage_using_DRL%20(7).pdf), the post looks to apply the Deep Q-network (DQN) model introduced by DeepMind in 2015, as well as investigate some the improvements made to the basic architecture. The above figure shows the results from a 10MW/20MWh (2hr) Li-ion battery optimised using a ""Double Dueling"" DQN method.

### Performance Overview :racing_car::
Vanilla, Double-Dueling and a Noisy Network DQN was explored as part of this study, integrating the effects of battery degradation and dynamic efficiency into the reward function to produce a practical foundation to the novel optimisation. For comparison the repository also has a Mixed Integer Linear Programming (MILP) optimisation, with the cumulative profits for the inference year (2019) illustrated below. 

![til](./visualisations/cumulative_profit_comparison_markup.png)

The Double-Dueling DQN marginally prevailed as the best optimisation technique in the energy arbitrage problem, with even the vanilla DQN agent shown significant uplift over other techniques such as MILP, the opportunities for DRL to such a problem is vast, especially considering the minimal hyper-parameter tuning explored for this novel investigation.

### Notes on Code :notebook::
Install python dependencies for repository:
```
$ pip install -r requirements.txt
```

:weight_lifting: Training for all models was conducted on a Google Colab Pro+ subscription.

###  Further Work :telescope:: 
- [ ] Investigate opportunities for stackable revenue streams (Balancing Mechanism, FFR etc.) to be integrated into DQN optimisation.
- [ ] Imply battery sizing during training of DQN model -possibly within the state space- to allow for easier manipulation of configuration scenarios during inference.
- [ ] Opting for a different DRL architectures could allow for the adoption of a continuous action space which could bring about further opportunities for refined performance.
- [ ] Pursuit of temporally higher resolution data to better capture market volatility and arbitrage opportunities for batter

### Oppurtunities & To Do :test_tube:: 
- [ ] Code links and references to be validated since re-organisation.
- [ ] Clean code, especially interactive d3 plot.
- [ ] Expanding train-set out-with 1-year (2018) could promote performance.
- [ ] Further validate performance of Pytorch forecasting model and it's integration into the RL environment.

### Resources :gem:: 

+ [https://eprints.keele.ac.uk/id/eprint/8408/1/final_submitted_energy_storage_arbitrage_using_DRL%20(7).pdf](https://eprints.keele.ac.uk/id/eprint/8408/1/final_submitted_energy_storage_arbitrage_using_DRL%20(7).pdf)
+ [https://unnatsingh.medium.com/deep-q-network-with-pytorch-d1ca6f40bfda](https://unnatsingh.medium.com/deep-q-network-with-pytorch-d1ca6f40bfda)
+ [http://www.eseslab.com/posts/blogPost_batt_schedule_optimal](http://www.eseslab.com/posts/blogPost_batt_schedule_optimal)
+ [https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On-Second-Edition](https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On-Second-Edition)



",7,7,1,1,renewable-energy,"[deep-reinforcement-learning, dqn-pytorch, interactive-visualizations, lithium-ion-batteries, optimization, renewable-energy, trading]",00000
1209,Emission-Control-Global-Warming-Analysis-and-Prediction,chenzhivis,N/A,N/A,https://api.github.com/repos/chenzhivis/Emission-Control-Global-Warming-Analysis-and-Prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13E:24F2:299CE01:556D0B2:652240A5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1210,CEEMDAN-EWT-LSTM,irenekarijadi,N/A,https://github.com/irenekarijadi/CEEMDAN-EWT-LSTM,https://api.github.com/repos/irenekarijadi/CEEMDAN-EWT-LSTM,Wind Power Forecasting Based on Hybrid CEEMDAN-EWT Deep Learning Method,"# CEEMDAN-EWT-LSTM
## Wind Power Forecasting Based on Hybrid CEEMDAN- EWT Deep Learning Method

This is the original source code used for all experiments in the paper [Wind Power Forecasting Based on Hybrid CEEMDAN-EWT Deep Learning Method](https://www.sciencedirect.com/science/article/pii/S0960148123012727)

Please cite the paper if you utilize the code in this paper:


Karijadi, I., Chou, S. Y., & Dewabharata, A. (2023). Wind power forecasting based on hybrid CEEMDAN-EWT deep learning method. Renewable Energy, 119357.


## Authors

*Irene Karijadi*, Shuo-Yan Chou, Anindhita Dewabharata


**corresponding author: irenekarijadi92@gmail.com (Irene Karijadi)*

## Background
A precise wind power forecast is required for the renewable energy platform to function effectively. By having a precise wind power forecast, the power system can better manage its supply and ensure grid reliability. However, the nature of wind power generation is intermittent and exhibits high randomness, which poses a challenge to obtain accurate forecasting results. In this study, a hybrid method is proposed based on Complete Ensemble Empirical Mode Decomposition with Adaptive Noise (CEEMDAN), Empirical Wavelet Transform (EWT), and deep learning-based Long Short-Term Memory (LSTM) for ultra-short-term wind power forecasting. A combination of CEEMDAN and EWT is used as the preprocessing technique, where CEEMDAN is first employed to decompose the original wind power data into several subseries and EWT denoising technique is used to denoise the highest frequency series generated from CEEMDAN. Then, LSTM is utilized to forecast all the subseries from CEEMDAN-EWT process, and the forecasting results of each subseries are aggregated to achieve the final forecasting results. The proposed method is validated on real-world wind power data in France and Turkey. Our experimental results demonstrate that the proposed method can forecast more accurately than the benchmarking methods.

## Framework
This is the framework of the proposed method      


![Proposed Method Framework](https://github.com/irenekarijadi/CEEMDAN-EWT-LSTM/assets/28720072/922f6554-ff1c-4acb-b8c0-2ef167fc0d51)


## Prerequisites
The proposed method is coded in Python 3.7.6 and the experiments were performed on Intel Core i3-8130U CPU, 2.20GHz, with a memory size of 4.00 GB.
The Python version is specified in [runtime.txt.](https://github.com/irenekarijadi/RF-LSTM-CEEMDAN/blob/main/runtime.txt)
In order to run the experiments, a number of packages need to be installed. Here is the list of the package  version that we used to run all the experiments

* EMD-signal==0.2.10
* pandas==0.25.3
* keras==2.4.3
* tensorflow>=2.0.0
* sklearn==0.22.1
* numpy==1.18.1
* matplotlib
* ewtpy==0.2

The complete list of packages can be found in [requirements.txt.](https://github.com/irenekarijadi/RF-LSTM-CEEMDAN/blob/main/requirements.txt)

In order to run the model, the packages need to be installed first using this line of code:

`pip install -r requirements.txt()`


## Dataset
The performance of the proposed method is tested by using wind power datasets in two different countries. The first dataset is from a wind farm with an installed capacity of 2050 kW located in France, and the second dataset is from a wind farm with an installed capacity of 3600 kW located in Turkey


## Experiments
The code that generated results presented in Chapter 4 of the paper can be executed from these notebooks:


* `1. Experiments for France Dataset.ipynb` - By running all the cells in this notebook, it will train and test the proposed method and other benchmark methods on the France dataset.
* `2. Experiments for Turkey Dataset.ipynb` - By running all the cells in this notebook, it will train and test the proposed method and other benchmark methods on the Turkey dataset.
* `3. Experiments for France Dataset-Time Series Cross Validation.ipynb` - By running all the cells in this notebook, a time series cross-validation experiment of the France dataset will be conducted.
* `4. Experiments for Turkey Dataset-Time Series Cross Validation.ipynb` - By running all the cells in this notebook, a time series cross-validation experiment of the Turkey dataset will be conducted.
* `5. Comparative Experiments.ipynb` - By running all the cells in this notebook,  a comparative experiment will be conducted.


",7,7,2,1,renewable-energy,"[artificial-intelligence, ceemdan, datapreprocessing, deeplearning, forecasting, lstm, prediction, renewable-energy]",00000
1211,octue-sdk-python,octue,octue,https://github.com/octue/octue-sdk-python,https://api.github.com/repos/octue/octue-sdk-python,The python SDK for @Octue services and digital twins.,"[![PyPI version](https://badge.fury.io/py/octue.svg)](https://badge.fury.io/py/octue)
[![Release](https://github.com/octue/octue-sdk-python/actions/workflows/release.yml/badge.svg)](https://github.com/octue/octue-sdk-python/actions/workflows/release.yml)
[![codecov](https://codecov.io/gh/octue/octue-sdk-python/branch/main/graph/badge.svg?token=4KdR7fmwcT)](https://codecov.io/gh/octue/octue-sdk-python)
[![Documentation Status](https://readthedocs.org/projects/octue-python-sdk/badge/?version=latest)](https://octue-python-sdk.readthedocs.io/en/latest/?badge=latest)
[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)
[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)

# Octue Python SDK <img src=""./docs/source/images/213_purple-fruit-snake-transparent.gif"" alt=""Purple Fruit Snake"" width=""100""/></span>

The python SDK for running [Octue](https://octue.com) data services, digital twins, and applications - get faster data
groundwork so you have more time for the science!

Read the docs [here.](https://octue-python-sdk.readthedocs.io/en/latest/)

Uses our [twined](https://twined.readthedocs.io/en/latest/) library for data validation.

## Installation and usage
To install, run one of:
```shell
pip install octue
```

```shell
poetry add octue
```

The command line interface (CLI) can then be accessed via:
```shell
octue --help
```

```text
Usage: octue [OPTIONS] COMMAND [ARGS]...

  The CLI for the Octue SDK. Use it to start an Octue data service or digital
  twin locally or run an analysis on one locally.

  Read more in the docs: https://octue-python-sdk.readthedocs.io/en/latest/

Options:
  --id UUID                       UUID of the analysis being undertaken. None
                                  (for local use) will cause a unique ID to be
                                  generated.
  --logger-uri TEXT               Stream logs to a websocket at the given URI.
  --log-level [debug|info|warning|error]
                                  Log level used for the analysis.  [default:
                                  info]
  --force-reset / --no-force-reset
                                  Forces a reset of analysis cache and outputs
                                  [For future use, currently not implemented]
                                  [default: force-reset]
  --version                       Show the version and exit.
  -h, --help                      Show this message and exit.

Commands:
  deploy  Deploy a python app to the cloud as an Octue service or digital...
  run     Run an analysis on the given input data using an Octue service...
  start   Start an Octue service or digital twin locally as a child so it...
```

## Deprecated code
When code is deprecated, it will still work but a deprecation warning will be issued with a suggestion on how to update
it. After an adjustment period, deprecations will be removed from the codebase according to the [code removal schedule](https://github.com/octue/octue-sdk-python/issues/415).
This constitutes a breaking change.

## Developer notes

### Installation
We use [Poetry](https://python-poetry.org/) as our package manager. For development, run the following from the
repository root, which will editably install the package:

```shell
poetry install --all-extras
```

Then run the tests to check everything's working.

### Testing
These environment variables need to be set to run the tests:
* `GOOGLE_APPLICATION_CREDENTIALS=/absolute/path/to/service/account/file.json`
* `TEST_PROJECT_NAME=<name-of-google-cloud-project-to-run-pub-sub-tests-on>`

Then, from the repository root, run
```shell
python3 -m unittest
```
or
```shell
tox
```

## Contributing
Take a look at our [contributing](/docs/contributing.md) page.
",7,7,4,63,renewable-energy,"[data, data-service, data-service-development-kit, data-services, digital-twin, digital-twin-application, digital-twin-web, digital-twins, microservice, microservices, python, python3, renewable-energy, renewables, sdk, sdk-python, wind-energy, wind-energy-analytics]",00000
1212,EBS-Chain,salil-gtm,N/A,https://github.com/salil-gtm/EBS-Chain,https://api.github.com/repos/salil-gtm/EBS-Chain,Energy Backed Securitization using Blockchain,"<p align=""left"">
  <img width=""100"" height=""100"" src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Logo.png"">
</p>

# Energy Backed Securitization using Blockchain
Solar power gives long term returns however the initial cost of setting up is quite high. India
being a tropical country has huge potential for generating solar energy, but the citizens need
to be further incentivized.
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Concept.png"">
</p>

# Architecture Flow

<p align=""center"">
  <img width=""650"" height=""200"" src=""images/arch.png"">
</p>

1. The administrator interacts with Decentralized Energy UI comprising of Angular framework
2. The application processes user requests to the network through a REST API.
3. Implements requests to the Blockchain state database on Hyperledger Fabric v1
4. The REST API is used to retrieve the state of the database
5. The Angular framework gets the data through GET calls to the REST API

# Included Components

* Hyperledger Composer
* Angular Framework
* Loopback

# Screenshots

<p align=""center"">
  <img src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Screenshot%20from%202018-10-14%2010-50-31.png"">
  <img src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Screenshot%20from%202018-10-14%2010-50-50.png"">
  <img src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Screenshot%20from%202018-10-14%2010-51-25.png"">
  <img src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Screenshot%20from%202018-10-14%2010-51-50.png"">
  <img src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Screenshot%20from%202018-10-14%2010-51-56.png"">
  <img src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Screenshot%20from%202018-10-14%2010-51-17.png"">
  <img src=""https://raw.githubusercontent.com/salil-gtm/EBS-Chain/master/Screenshot%20from%202018-10-14%2010-53-55.png"">
</p>

# Running the Application
Follow these steps to setup and run this code pattern. The steps are described in detail below.

## Prerequisite
- Operating Systems: Ubuntu Linux 14.04 / 16.04 LTS (both 64-bit), or Mac OS 10.12
- [Docker](https://www.docker.com/) (Version 17.03 or higher)
- [npm](https://www.npmjs.com/)  (v5.x)
- [Node](https://nodejs.org/en/) (version 8.9 or higher - note version 9 is not supported)
  * to install specific Node version you can use [nvm](https://davidwalsh.name/nvm)
- [Hyperledger Composer](https://hyperledger.github.io/composer/installing/development-tools.html)
  * to install composer cli
    `npm install -g composer-cli`
  * to install composer-rest-server
    `npm install -g composer-rest-server`
  * to install generator-hyperledger-composer
    `npm install -g generator-hyperledger-composer`

## Instructions to Run
- Similar to [Here](https://github.com/IBM/Decentralized-Energy-Composer)

## Authors

* **Salil Gautam** - [salil-gtm](https://github.com/salil-gtm)
* **Anirudh Murali** - [Anirudh-Murali](https://github.com/Anirudh-Murali)
* **Rohan Chougule** - [rchougule](https://github.com/rchougule)

## Additional Resources
* [Hyperledger Fabric Docs](http://hyperledger-fabric.readthedocs.io/en/latest/)
* [Hyperledger Composer Docs](https://hyperledger.github.io/composer/latest/introduction/introduction.html)

 ## Acknowledgments
* Made with &#9829; during #HackathonPune 2018 in 24 hrs.
",6,6,3,0,renewable-energy,"[angular, blockchain, blockchain-technology, css, energy, html, hyperledger, hyperledger-composer, hyperledger-fabric, javascript, renewable-energy, solar]",00000
1213,libpower,shishir-dey,N/A,https://github.com/shishir-dey/libpower,https://api.github.com/repos/shishir-dey/libpower,A Rust library for power electronics systems,"<p align=""center"">
    <img src=""assets/libpower-logo-small.png"" alt=""libpower-logo""/>
</p>

<p align=""center"">
    <a href=""https://img.shields.io/badge/license-MIT-blue.svg"">
        <img src=""https://img.shields.io/badge/license-MIT-blue.svg"" alt=""GitHub license"" />
    </a>&nbsp;
    <a href=""https://img.shields.io/github/actions/workflow/status/shishir-dey/libpower/rust_host.yml?branch=main"">
        <img src=""https://img.shields.io/github/actions/workflow/status/shishir-dey/libpower/rust_host.yml?branch=main""
            alt=""GitHub Workflow Status"" />
    </a>&nbsp;
    <a href=""https://img.shields.io/github/commit-activity/m/shishir-dey/libpower"">
        <img src=""https://img.shields.io/github/commit-activity/m/shishir-dey/libpower"" alt=""GitHub commit activity"" />
    </a>&nbsp;
    <a href=""https://img.shields.io/github/last-commit/shishir-dey/libpower"">
        <img src=""https://img.shields.io/github/last-commit/shishir-dey/libpower"" alt=""GitHub last commit"" />
    </a>&nbsp;
    <a href=""https://img.shields.io/badge/PRs-welcome-brightgreen.svg"">
        <img src=""https://img.shields.io/badge/PRs-welcome-brightgreen.svg"" alt=""PRs Welcome"" />
    </a>&nbsp;
</p>

<hr>


<h3>About the project</h3>

libpower is a Rust library containing algorithms commonly used in power electronics systems, targeted for use in embedded systems


<h3>Documentation</h3>

| Module      | Sub-module | Description |
| ----------- | ----------- | ----------- |
| Battery | - | - |
| Control      | observer/luenberger.rs       | [Luenberger Observer](https://en.wikipedia.org/wiki/State_observer) |
| Control      | bode_plot.rs       | [Bode plot](https://en.wikipedia.org/wiki/Bode_plot) |
| Control      | pid.rs       | [PID controller](https://en.wikipedia.org/wiki/PID_controller) |
| Control      | pr.rs       | [Proportional Resonant controller](https://imperix.com/doc/implementation/proportional-resonant-controller) |
| Data      | nn.rs       | [Neural network](https://en.wikipedia.org/wiki/Neural_network) |
| Data      | svm.rs       | [Support-vector machine](https://en.wikipedia.org/wiki/Support-vector_machine) |
| Devices      | charge_controller/mppt.rs       | [Maximum power point tracking](https://en.wikipedia.org/wiki/Maximum_power_point_tracking) |
| Devices      | inverter/*       | [Inverter](https://en.wikipedia.org/wiki/Power_inverter) |
| Math      | -       | Math, for when you are high |
| Phase Locked Loop | sogi.rs | Second Order Generalized Integrator |
| Portable | hal.rs | Hardware Abstraction Layer |
| Portable | osal.rs | OS Abstraction Layer |
| Signal      | filter/fir.rs       | [Finite impulse response](https://en.wikipedia.org/wiki/Finite_impulse_response) |
| Signal      | filter/iir.rs       | [Infinite impulse response](https://en.wikipedia.org/wiki/Infinite_impulse_response) |
| Signal      | filter/kalman.rs       | [Kalman filter](https://en.wikipedia.org/wiki/Kalman_filter) |
| Signal      | generator/generator.rs       | Generate desired signals in the form of Rust arrays |
| Signal      | transform/fft.rs       | [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) |
| Transform      | abc_dq0.rs       | ABC to DQ0 Transform |
| Transform      | clarke.rs       | Clarke Transform |
| Transform      | dq0_abc.rs       | DQ0 to ABC Transform |
| Transform      | iclarke.rs       | Inverse Clarke Transform |
| Transform      | ipark.rs       | Inverse Park Transform |
| Transform      | park.rs       | Park Transform |


<h3>References</h3>

+ [Texas Instruments Solar library](https://e2e.ti.com/cfs-file/__key/communityserver-discussions-components-files/171/SolarLib.pdf)

+ [GitHub/pms67](https://github.com/pms67)
",6,6,1,0,renewable-energy,"[electronics, power-electronics, renewable-energy, rust-lang, software]",00000
1214,twoaxistracking,pvlib,pvlib,https://github.com/pvlib/twoaxistracking,https://api.github.com/repos/pvlib/twoaxistracking,"twoaxistracking is a python package for simulating two-axis tracking solar collectors, particularly self-shading.","# Open source code for calculating self-shading of two-axis tracking solar collectors
twoaxistracking is a python package for simulating two-axis tracking solar collectors, particularly self-shading.

## Documentation
The documentation can be found at [readthedocs](https://twoaxistracking.readthedocs.io/).

## Installation and dependencies
The package can be installed using pip:

    pip install twoaxistracking

## Citing
If you use the package in published work, please cite:
> Adam R. Jensen, Ioannis Sifnaios, and Kevin Anderson. ""twoaxistracking – a python package for simulating
> self-shading of two-axis tracking solar collectors."" MethodsX, 9, 101876, (2022).
> [https://doi.org/10.1016/j.mex.2022.101876](https://doi.org/10.1016/j.mex.2022.101876)

and

> Adam R. Jensen, Ioannis Sifnaios, Simon Furbo, and Janne Dragsted. ""Self-shading of two-axis
> tracking solar collectors: Impact of field layout, latitude, and aperture shape."" Solar
> Energy, 236, 215–224, (2022). [https://doi.org/10.1016/j.solener.2022.02.023](https://doi.org/10.1016/j.solener.2022.02.023)

## Contributing
Contributions to the repository, e.g., bug fixes and improvements to speed up the code are more than welcome.

## License
[BSD 3-clause](LICENSE).
",6,6,4,1,renewable-energy,"[photovoltaics, python, renewable-energy, solar-energy]",00000
1215,entsoe-client,DarioHett,N/A,N/A,https://api.github.com/repos/DarioHett/entsoe-client,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D3:8AB4:298C2DD:55502A0:65223FF4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1216,pv-foss-engagement,openpvtools,openpvtools,https://github.com/openpvtools/pv-foss-engagement,https://api.github.com/repos/openpvtools/pv-foss-engagement,Community engagement statistics for open-source PV projects,"# PV FOSS Engagement

This repository tracks and summarizes engagement statistics for several
open-source software projects related to solar photovoltaics.
See https://openpvtools.github.io/pv-foss-engagement/

The summaries are computed by jupyter notebooks which essentially act as
webpage templates and are located at [/sphinx/source/project](/sphinx/source/project).
The results stored in the notebook files may be out of date, but because the notebooks
are automatically re-run when building the website, the website itself will reflect
the updated data as of the time of build.

The website is automatically rebuilt any time the `main` branch is updated, meaning
the website will update by itself whenever new data is added to the repo or
the notebooks are updated.

Currently, this project uses two sources of data:

## GitHub stars/contributors

GitHub stars over time are retrieved from GitHub's ""stargazers"" API.  For now,
this project only summarizes the current dataset returned from that API.
That means that it only summarizes the users currently starring the project;
it has no concept of users that previously starred the project but later
unstarred it.  Contributor data is also retrieved, although ""contributor""
in this context refers only to commit authors, which is of course one of
several types of project contributors.

## ReadTheDocs page views

ReadTheDocs only reports data for roughly the last three months, so part of
this project is to periodically fetch and archive the latest data so it doesn't
get lost.  Unfortunately the older data from before this project started is
probably permanently gone.

#### Fetching

Unfortunately there is currently no way to access analytics data through the RTD API.
Instead, we use a manual python scraper: [scrape_readthedocs.py](./scrape_readthedocs.py).
This script is automatically run by GitHub Actions.

#### Archiving

Data files are stored in the [/data](./data) directory.
These files contain page view statistics for each day, RTD version, and URL path.
",5,5,2,1,renewable-energy,"[open-source, photovoltaics, pv, renewable-energy, solar-energy, solar-power]",00000
1217,solarfactors,pvlib,pvlib,https://github.com/pvlib/solarfactors,https://api.github.com/repos/pvlib/solarfactors,A community-maintained implementation of the pvfactors bifacial irradiance model,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",5,5,3,10,renewable-energy,"[photovoltaic, pvlib, python, renewable-energy, renewables, solar-energy]",00000
1218,BeechatJuice,BeechatNetworkSystemsLtd,N/A,https://github.com/BeechatNetworkSystemsLtd/BeechatJuice,https://api.github.com/repos/BeechatNetworkSystemsLtd/BeechatJuice,Open Source energy generation machines.,"# Beechat Juice

![BNS Ltd.](http://176.58.110.19/wp-content/uploads/2021/02/powered-by-1.png)


## What is Beechat Juice?

Beechat Juice was envisioned with the same concept as the Beechat Network, applied to energy instead of communications. In essence, we want to provide the world with access to an Open Source solar energy generation machine, that is scalable and reproducible by anyone with access to simple tools, or even large factories. 

## Why?
If there were to be some sort of global or regional supply chain collapse, a low-tech Open Source solution like Beechat Juice would be vital to provide people with an energy solution that is local and does not require a complex trade network.
For the first version, we decided to focus on CSP, as materials are cheap, abundant, and easily recyclable. This project aims to bring, not only Open Source CSP technology, but also VAWT, and Geothermal, Hydro, and others in the future.

## Applications
- Powering IoT devices
- Providing a reliable small-scale source of power in remote locations

## Why not create Open Source PhotoVoltaics?
PV technology has come a long way in the past decades, with massive improvements in efficiency. However, that efficiency comes at a cost, environmental, societal, and economic. 

* Environmental:
 (1) Energy intensive: For each 1 m2 of PV solar panel, 350 kilograms of Coal [(or equivalent energy source)](https://archive.is/qwr3C) need to be used to create it. 
(2) The production of the solar-grade silicon for one square meter of panel area requires 3.5 kg of [concentrated hydrochloric acid.](https://archive.is/DGjY6)
(3) Traditional silicon solar cells are considered safe, but the manufacturing of those cells does produce silicon tetrachloride – a highly toxic byproduct [harmful to plants and animals.](https://archive.is/7rOMM)

* Economics:
PV manufacturing is only profitable [at a large scale](https://archive.is/6F7nl), preventing small manufacturers from creating solar panels at a profitable level.

* Societal:
This is related to the environmental factors above, but the amount of rare earth metals and semiconductor technology needed, in addition to large scale factories (typically in countries with low worker rights and high level of abuse), means the current manufacture of PV panels comes at a high societal cost.

## Current status

  - *Turbine assembly model:*
  
  ![turbine-assembly](https://raw.githubusercontent.com/BeechatNetworkSystemsLtd/BeechatJuice/main/Turbine%20assembly.jpg)
- *Water container assembly model:*

![water-assembly](https://raw.githubusercontent.com/BeechatNetworkSystemsLtd/BeechatJuice/main/Water%20container%20assembly.jpg)
- *Full assembly model:*

![full-assembly](https://raw.githubusercontent.com/BeechatNetworkSystemsLtd/BeechatJuice/main/Condenser.jpg)

![full-assembly](https://raw.githubusercontent.com/BeechatNetworkSystemsLtd/BeechatJuice/main/Final%20assembly.jpg)

![full-assembly](https://raw.githubusercontent.com/BeechatNetworkSystemsLtd/BeechatJuice/main/Dish.jpg)

- BOM & Parts sourcing created.
 
## Next Steps
- Passive cooling system to prevent liquid loss
- Prototype construction & test

## Timeline

| Time | Milestone |
| ------ | ------ |
| Q1 '21 | Design of assembly V1 incl. passive condensation |
| Q2 '22 | Test of assembly V1 |
| Q3 '22 | Tracking tripod design |
| Q4 '22 | Design iteration & test of V2 |
| Q1 '23 | Production run #1 |
| Future | Further testing, R&D |

## License
This system (Software & Hardware) is licensed under the MIT License.
",5,5,1,0,renewable-energy,"[energy, manufacturing, renewable-energy, solar-energy]",00000
1219,homer,MatthewSteen,N/A,https://github.com/MatthewSteen/homer,https://api.github.com/repos/MatthewSteen/homer,Scripts for HOMER (Hybrid Optimization Model for Multiple Energy Resources).,"# homer
",5,5,2,0,renewable-energy,"[microgrid, renewable-energy]",00000
1220,denki-uc,dan-marshman,N/A,https://github.com/dan-marshman/denki-uc,https://api.github.com/repos/dan-marshman/denki-uc,Stochastic unit commitment model in python,"# Denki-UC
A stochastic unit commitment optimisation model, written in python. 

Currently in development.

## Contents
- [Denki-UC](#denki-uc)
  * [Overview](#overview)
  * [Installation](#installation)
  * [Getting started](#getting-started)
    + [Dependencies](#dependencies)
    + [Overview of input files](#overview-of-input-files)
  * [Contributing](#contributing)
  * [Authors & Contributors](#authors---contributors)
  * [License](#license)
    + [Citing this software](#citing-this-software)
  * [Detailed documentation](#detailed-documentation)


## Overview
The unit commitment problem describes the problem of deciding when to turn generating stations on and off, to meet electricity demand.  With increasing variability from renewable generation, these decisions become more complex.

For example, Denki-UC can be be used to study:
* The impact of wind, solar and demand uncertainty on unit commitment decisions.
* Evolution of electricity prices, and market performance in different power systems.
* Impacts on ancillary services - e.g. reserves and inertia, from growing renewables.
* While the model is based on a unit commitment function, it can be used to study generation expansion problems (include with unit commitment constraints, subject to tractability).

For the unit commitment formulation and examples of the package's usage, see the following:
1. [Marshman, D., Brear, M., Jeppesen, M. and Ring, B., 2020. *Performance of wholesale electricity markets with high wind penetration.* Energy Economics, 89, p.104803.](https://www.sciencedirect.com/science/article/pii/S0140988320301432)
2. [Marshman, D., 2018. *Performance of electricity markets & power plant investments in the transition to a low-carbon power system*. Doctoral thesis.](https://minerva-access.unimelb.edu.au/bitstream/handle/11343/222168/Revised%20Thesis.pdf?sequence=1&isAllowed=y)

## Installation
Clone this repo, and then install using
```
$ git clone https://github.com/dan-marshman/denki-uc
$ cd denki-uc
$ python setup.py install
```
Test the package using
```
$ python main.py
```
This will run a test set of input data, viewed in '/examples/test1'. Results files will be written as .csv files in the directory 'denki-outputs' by default.

## Getting started
The module runs a unit commitment simulation by calling a run_opt_problem(name, path) from uc_model.py, which takes two required arguments, and an optional third.
1. The name of your simulation (a string e.g. ""MyModel"")
2. The path to the input data directory (e.g. 'path\to\inputs')
3. (optional) The path to save the outputs (e.g., 'path\to\outputs')

For example to run an example model (test1), in a python script, execute:
```
import denkiuc.uc_model as uc
import denkiuc.denki_paths
import os

dk_paths = denkiuc.denki_paths.dk_paths
path_to_test1 = os.path.join(<denki_path>, 'test1')
uc.run_opt_problem(name='test1', prob_path=path_to_test1, outputs_path=<your_ouptputs_path>)
```
replacing *<denki_path>* with the path where you cloned the repo, and *<your_ouptputs_path>* to a desired results directory.
This will solve the UC optimisation problem, and write outputs to 'outputs_folder\MyModel\results', with this path being specified in your settings.csv file.
### Overview of the input files
A minimal set of input data is described in this section.Within the 'examples' folder are example input data collections.  
#### settings.csv
This contains a number of parameters, which control how the simulation behaves.  For example, UC constraints may be turned on or off, and the penalty on unserved load/reserves/inertia may be set.
The example file specifies the type of each parameters (e.g. string, integer, boolean, etc), and also gives a short description. Only the 'Value' column should be changed.
#### demand.csv
Electricity demand (MW) in each interval. The interval column is used to specify the set of all intervals, and should be consecutive, but need not start at 0 or 1. 
#### wind.csv and solarPV.csv
Traces for wind and solar units, specified as a fraction of capacity (i.e. between 0 and 1) in each interval.  Intervals should be consistent with those in demand.csv
#### unit_data.csv
The Unit column is used to create the set of units.  Remaining fields specify a number of (mostly self-explanatory) fields for each unit - though some may not be relevant, and are set to 0 or 1 (.e.g. thermal efficiency is not relevant to wind/solarPV units).  The Technology specifies the types of technologies which a unit is.  Therefore a Unit with Technology set to 'Wind' would be treated as a wind unit (even if called Coal!).
#### initial_state.csv
This specifies the initial state of the system, immediately prior to the first interval.  For thermal units, it specifies their initial commitment status, and current operating point (e.g. megawatts of power being generated). Storage units have their storage level specified (as a fraction of total storage capacity).
## Dependencies
* [pandas](https://github.com/pandas-dev/pandas)
* [PuLP](https://github.com/coin-or/pulp)
* [NumPy](https://numpy.org/)
## Contributing
Please see the open issues if you are interested in contributing. As we are in a state of development, there is plenty to do. We are happy to ackowledge all contributors.
## Authors & Contributors
* Daniel Marshman - daniel.marshman@protonmail.com
# License
This may be used in accordance with the GPL3.0 license, but please see the next subsection for citation details if publishing results from use of the model.  

If you are publishing based on results generated from this model, we ask that you cite the following paper:

[Marshman, D., Brear, M., Jeppesen, M. and Ring, B., 2020. *Performance of wholesale electricity markets with high wind penetration.* Energy Economics, 89, p.104803.](https://www.sciencedirect.com/science/article/pii/S0140988320301432)
## Detailed documentation
Coming soon.  In the meantime, see chapter 3 of Daniel Marshman's [thesis](https://minerva-access.unimelb.edu.au/bitstream/handle/11343/222168/Revised%20Thesis.pdf?sequence=1&isAllowed=y)
",5,5,1,3,renewable-energy,"[pulp, python, renewable-energy, unit-commitment]",00000
1221,solarian-datalogger,orcunbaslak,N/A,https://github.com/orcunbaslak/solarian-datalogger,https://api.github.com/repos/orcunbaslak/solarian-datalogger,Solarian Datalogger,"<!--
*** Thanks for checking out this README Template. If you have a suggestion that would
*** make this better, please fork the repo and create a pull request or simply open
*** an issue with the tag ""enhancement"".
*** Thanks again! Now go create something AMAZING! :D
-->





<!-- PROJECT SHIELDS -->
<!--
*** I'm using markdown ""reference style"" links for readability.
*** Reference links are enclosed in brackets [ ] instead of parentheses ( ).
*** See the bottom of this document for the declaration of the reference variables
*** for contributors-url, forks-url, etc. This is an optional, concise syntax you may use.
*** https://www.markdownguide.org/basic-syntax/#reference-style-links
-->
[![Contributors][contributors-shield]][contributors-url]
[![Forks][forks-shield]][forks-url]
[![Stargazers][stars-shield]][stars-url]
[![Issues][issues-shield]][issues-url]
[![MIT License][license-shield]][license-url]
[![LinkedIn][linkedin-shield]][linkedin-url]



<!-- PROJECT LOGO -->
<br />
<p align=""center"">
  <a href=""https://github.com/orcunbaslak/solarian-datalogger"">
    <img src=""https://github.com/orcunbaslak/solarian-datalogger/blob/master/images/solarian_logo.png?raw=true"" alt=""Logo"" width=""411"" height=""162"">
  </a>

  <h3 align=""center"">Solarian Datalogger</h3>

  <p align=""center"">
    Solarian datalogger is a datalogger for solar systems. You can write a driver for your device
    and call the driver using the YAML file provided. You should implement a get_data() method
    to correctly read all data and return a JSON file. 
    <br />
    <br />
    <a href=""https://github.com/orcunbaslak/solarian-datalogger/issues"">Report Bug</a>
    ·
    <a href=""https://github.com/orcunbaslak/solarian-datalogger/issues"">Request Feature</a>
  </p>
</p>



<!-- TABLE OF CONTENTS -->
## Table of Contents

* [About the Project](#about-the-project)
  * [Built With](#built-with)
* [Getting Started](#getting-started)
  * [Prerequisites](#prerequisites)
  * [Installation](#installation)
* [Usage](#usage)
* [Roadmap](#roadmap)
* [Contributing](#contributing)
* [License](#license)
* [Similar Projects](#similar-projects)
* [Contact](#contact)



<!-- ABOUT THE PROJECT -->
## About The Project

There are many causes for people to write code. As an engineering company owner; I was frusturated to see how incompetent datalogging companies
doing business around. Data losses, buggy software and other issues led me to write a minimalist piece of software for solar system just to get the
basic data from inverters/sensors/string combiners into our influxdb server.

Here's why:
* As engineers; our time is money. Bad data makes us invest more time in it. We don't want to fix someone else's errors.
* Good data yields good engineering analysis and accurate results. You deserve more **precise** and **accurate** results.
* Why consume the time trying to fix someone elses inaccurate data instead of enjoying the sun outside with your family?

Please feel free to fork or send pull requests. Please keep the code as minimal as possible.

### Built With
This project has been coded with Python 3. Modbus-tk library has been chosen for device communication. Paho MQTT is choosen for MQTT communication
* [Python](https://www.python.org/)
* [modbus-tk](https://github.com/ljean/modbus-tk)
* [PyYAML](https://github.com/yaml/pyyaml)
* [Paho MQTT](https://github.com/eclipse/paho.mqtt.python)


<!-- GETTING STARTED -->
## Getting Started

Follow the steps below to prepare the environment for the project.

### Prerequisites

First you need to get Python 3 installed and running with dependencies correctly installed.
* bash
```sh
sudo apt update
sudo apt-get -y dist-upgrade
sudo apt-get -y install git python3-distutils gcc python3-dev parallel lftp
sudo curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
sudo python3 get-pip.py
sudo pip3 install pyyaml modbus_tk psutil paho-mqtt graypy
```

### Installation

1. Clone the repo (Change the directory if you want)
```sh
git clone https://github.com/orcunbaslak/solarian-datalogger /home/pi/solarian-datalogger
```
2. Create a configuration file from the sample
```sh
cd config
cp sample-config.yml config.yml
```
3. Edit the configuration file `config.yml`
```sh
nano config.yml
```
4. Create a MQTT file from the sample (OPTIONAL)
```sh
cp sample-mqtt.yml mqtt.yml
```
5. Edit the configuration file `mqtt.yml` (OPTIONAL)
```sh
nano mqtt.yml
```
6. Create a GrayLog file from the sample (OPTIONAL)
```sh
cp sample-graylog.yml graylog.yml
```
7. Edit the configuration file `graylog.yml` (OPTIONAL)
```sh
nano graylog.yml
```


<!-- USAGE EXAMPLES -->
## Usage

You can feed the file to Python3 interpreter and it's all good to go given you've prepared a correct YAML file and 
network/serial connections are working as intended.

```sh
python3 datalogger.py
```

You can use specific args to modify inner workings of the script
```sh
  --config CONFIG   YAML file containing device settings. Default ""config.yml""
  --log LOG         Log levels, DEBUG, INFO, WARNING, ERROR or CRITICAL
  --pi-analytics    Enable or disable RaspberryPi device data acquisition
  --verbose         Print the acquired data to console
  --write-disabled  Disables file writing. Dry-run.
  --mqtt            Enables the MQTT feature. Mqtt config file must be set.
  --graylog         Pushes logging data to the specified GrayLog server. Graylog config file must be set.
```

<!-- ROADMAP -->
## Roadmap

See the [open issues](https://github.com/orcunbaslak/solarian-datalogger/issues) for a list of proposed features (and known issues).



<!-- CONTRIBUTING -->
## Contributing

Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are **greatly appreciated**.

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/NewInverter`)
3. Commit your Changes (`git commit -m 'Add a new inverter driver'`)
4. Push to the Branch (`git push origin feature/NewInverter`)
5. Open a Pull Request



<!-- LICENSE -->
## License

Distributed under the GNU GPL v3 License. See `LICENSE` for more information.

<!-- SIMILAR PROJECTS -->
## Similar Projects

You can find a list of similar projects that I used for help and inspiration.

* [Solariot](https://github.com/meltaxa/solariot)
* [Modbus-logger](https://github.com/GuillermoElectrico/modbus-logger)
* [PVStats](https://github.com/ptarcher/pvstats)
* [Modbus4MQTT](https://github.com/tjhowse/modbus4mqtt)
* [Energy-Meter-Logger](https://github.com/samuelphy/energy-meter-logger)


<!-- CONTACT -->
## Contact

Orçun Başlak - [@orcunbaslak](https://twitter.com/orcunbaslak) - [website](https://orcun.baslak.com/) - orcun.baslak@solarian.com.tr

Solarian Enerji - [@solarianenerji](https://twitter.com/solarianenerji) - [website](https://www.solarian.com.tr/en/) - info@solarian.com.tr

Project Link: [https://github.com/orcunbaslak/solarian-datalogger](https://github.com/orcunbaslak/solarian-datalogger)


<!-- MARKDOWN LINKS & IMAGES -->
<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->
[contributors-shield]: https://img.shields.io/github/contributors/orcunbaslak/solarian-datalogger.svg?style=flat-square
[contributors-url]: https://github.com/orcunbaslak/solarian-datalogger/graphs/contributors
[forks-shield]: https://img.shields.io/github/forks/orcunbaslak/solarian-dataloggere.svg?style=flat-square
[forks-url]: https://github.com/orcunbaslak/solarian-datalogger/network/members
[stars-shield]: https://img.shields.io/github/stars/orcunbaslak/solarian-datalogger.svg?style=flat-square
[stars-url]: https://github.com/orcunbaslak/solarian-datalogger/stargazers
[issues-shield]: https://img.shields.io/github/issues/orcunbaslak/solarian-datalogger.svg?style=flat-square
[issues-url]: https://github.com/orcunbaslak/solarian-datalogger/issues
[license-shield]: https://img.shields.io/github/license/orcunbaslak/solarian-datalogger.svg?style=flat-square
[license-url]: https://github.com/orcunbaslak/solarian-datalogger/blob/master/LICENSE
[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=flat-square&logo=linkedin&colorB=555
[linkedin-url]: https://linkedin.com/in/orcunbaslak",5,5,2,0,renewable-energy,"[datalogger, photovoltaic, photovoltaics, renewable-energy, renewables, solar-energy]",00000
1222,Gravity-center-solar-tracker,Aightm8,N/A,https://github.com/Aightm8/Gravity-center-solar-tracker,https://api.github.com/repos/Aightm8/Gravity-center-solar-tracker,"A novel solar tracker; cheaper, simpler and less power intensive than traditional systems ","# Gravity-center-solar-tracker
A novel solar tracker; cheaper, simpler and less power intensive than traditional systems 
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Gravity-center-solar-tracker/blob/master/Image%20files/gravity%20center%20solar%20tracker%20white%20%5BCC%20BY%5D.PNG)
<br>
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Gravity-center-solar-tracker/blob/master/Image%20files/gravity%20center%20solar%20tracker%20%5BCC%20BY%5D.PNG)
<br>
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Gravity-center-solar-tracker/blob/master/Image%20files/dual%20axis%20gravity%20center%20solar%20tracker%20%5BCC%20BY%5D.PNG)
<br>
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Gravity-center-solar-tracker/blob/master/gravity%20center%20solar%20tracker%20prototype%20model/_MG_9337.JPG)
<br>
Fig- Prototype model
<br>
<br>
Prototype model working- <br>
vid.1- https://youtu.be/S70iIkvd-08 <br>
vid.2- https://youtu.be/kp8efreXQTA <br>
<br>
<br>
If you have tried balancing objects on their center of gravity, you may have observed that objects are easy to move around when in this state, requiring little force. It is this principle that is at the core of the gravity center solar tracker's functioning.
A solar array forming a single panel is balanced on its center of gravity on a support beam. When the panel is balanced in this way, it can be easily moved with little force. Four motors are present ( in the case of dual axis. Two if single axis ) each with a winch, wound with a cable that is also attached to the panel. Each at four seperate points. These motors pull on the panel individually , thus altering the position of the panel. By using four motors, we can achieve motion in two axis. This system can be used to track the sun. Either by using a photoresistor setup for active tracking or preferably, by scheduled tracking which should be more efficient. The system can run for a certain duration at suitable intervals instead of constantly tracking to save power. This setup may be more susceptible to wind. However this can be solved by installing brakes on the cables; which release when the motor is active and tighten when the motor is off, so wind cannot move the panel. The motor, the winch, the brake and other components may all be installed into a single unit; which will be refered to as the 'motor box'. The motor box will be the the primary electro-mechanical unit. It can be easily replaced, maintained, sealed from the environment, installed and moved around. The motor and its mechanical components can be relatively very small. This is possible because as the panel rests on its center of gravity, its inertia is low. So a small motor with limited torque is capable of moving the panel { refer the prototype images, videos and notes for further insight }. When compared to traditional systems; the gravity center solar tracker is therefore low cost, requires less power, easily maintainable, easily installable ( and on almost any terrain ), more weather resistant and suitable for a wide range of tracking applications.
<br>
<br>
Diagrams, design files and prototype files are available above.
<br>
<br>
The Gravity center solar tracker is licensed under the TAPR Open Hardware License (www.tapr.org/OHL). <br>
In support of open source innovation in strengthening renewables and combating climate change.
",5,5,2,0,renewable-energy,"[green-energy, open-source, open-source-design, open-source-hardware, opensource, renewable-energy, renewables, solar, solar-energy, solar-tracker, solar-tracking-panels, sun-tracker, sustainable]",00000
1223,data-gateway,aerosense-ai,aerosense-ai,https://github.com/aerosense-ai/data-gateway,https://api.github.com/repos/aerosense-ai/data-gateway,Data influx for Aerosense.,"[![codecov](https://codecov.io/gh/aerosense-ai/data-gateway/branch/main/graph/badge.svg?token=GEQFQVL2TK)](https://codecov.io/gh/aerosense-ai/data-gateway)
[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)
[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)
[![python-template](https://img.shields.io/badge/template-python--library-blue)](https://github.com/thclark/python-library-template)
[![docs](https://readthedocs.org/projects/aerosense-data-gateway/badge/?version=latest)](https://aerosense-data-gateway.readthedocs.io/en/latest/)

# data-gateway

Usage: Read the documentation [here.](https://aerosense-data-gateway.readthedocs.io/en/latest/)

_Note that the test coverage figure is more like 90% - the recent addition of multiprocessing has made it difficult to
measure the true coverage across multiple processes._

## Installation and usage

To install, run:

```shell
pip install git+https://github.com/aerosense-ai/data-gateway.git
```

The command line interface (CLI) can then be accessed via:

```shell
gateway --help
```

```
Usage: gateway [OPTIONS] COMMAND [ARGS]...

  Enter the Aerosense Gateway CLI. Run the on-tower gateway service to read
  data from the bluetooth receivers and send it to Aerosense Cloud.

Options:
  --logger-uri TEXT               Stream logs to a websocket at the given URI
                                  (useful for monitoring what's happening
                                  remotely).

  --log-level [debug|info|warning|error]
                                  Set the log level.  [default: info]
  --version                       Show the version and exit.
  -h, --help                      Show this message and exit.

Commands:
  add-sensor-type      Add a sensor type to the BigQuery dataset.
  create-installation  Create an installation representing a collection of...
  start                Begin reading and persisting data from the serial...
  supervisord-conf     Print conf entry for use with supervisord.
```

## Developer notes

### Installation

#### Poetry

We're using `poetry` instead of `pip` to manage the package to take advantage of the `poetry.lock` file [among other
useful features](https://python-poetry.org/). In terms of developer experience, this just means there are some slightly
different commands to run than usual. `data-gateway` can still be `pip`-installed by anyone anywhere, but dependency
resolution and dependency specification for `data-gateway` developers is improved by using `poetry` locally.

#### Architecture-specific installations

Due to some (most likely temporary) constraints with `poetry` and the need to run and develop the gateway on Linux,
Windows, M1 Macs, and Raspberry Pis, the need has arisen for some slightly different installation procedures on these
different architectures/platforms. [click here](https://github.com/aerosense-ai/data-gateway/issues/65)
to read more.

For Raspberry Pis, overwhelmingly the simple thing to do is use balena instead ([see the docs](https://aerosense-data-gateway.readthedocs.io/en/latest/)).

#### Clone the repository

First, clone the repository and `cd` into it:

```shell
git clone https://github.com/aerosense-ai/data-gateway.git
cd data-gateway
```

Then follow the instructions for your platform below.

#### Install on MacOS and Linux

Run the following from the repository root:

```shell
pip install poetry

# Editably install data-gateway, including its development dependencies.
poetry install
```

This will editably install `data-gateway` in a `poetry`-managed virtual environment, meaning:

- Any local changes you make to it will be automatically used when running it locally
- It won't be affected by changes to other python packages you have installed on your system, making development much
  easier and more deterministic

#### Install on Raspberry Pi

It's best to use [balena](https://aerosense-data-gateway.readthedocs.io/en/latest/) but if you do need to run the install, do the following from the repository root:

```shell
pip install -r requirements-pi-dev.txt
```

#### Install on Windows

This workflow works for Windows using Powershell, if you're the most masochistic of people.

Prerequisites:

1. Make sure to have python not installed from [python.org](https://www.python.org/)
2. Install [pyenv-win](https://github.com/pyenv-win/pyenv-win) via pip method
3. Execute `pip install virtualenv`

Installation:

```shell
pyenv install 3.8.0  # (or higher)
pyenv local 3.8.0
pyenv rehash
virtualenv venv
./venv/Scripts/activate
pip install poetry
poetry install
```

Every time you enter the repo over powershell again, make sure to activate the venv using

```shell
./venv/Scripts/activate
```

#### Troubleshooting

If there are problems reading the serial port, try running this (or the equivalent on non-Linux platforms) and retrying:

```shell
sudo apt-get update
sudo apt-get install libhdf5-dev libhdf5-serial-dev
```

### Testing

These environment variables need to be set to run the tests:

- `GOOGLE_APPLICATION_CREDENTIALS=/absolute/path/to/service/account/file.json`

Then, from the repository root, run

```bash
tox
```

## Contributing

Take a look at our [contributing](/docs/contributing.md) page.
",4,4,4,28,renewable-energy,"[cloud, python, renewable-energy, renewables, wind-energy, wind-energy-analytics]",00000
1224,solar-scorecard,CodeForFoco,CodeForFoco,https://github.com/CodeForFoco/solar-scorecard,https://api.github.com/repos/CodeForFoco/solar-scorecard,Solar Scorecard project: track Fort Collins renewable/solar energy goals,"# :sunny: :sunny: Fort Collins Solar Scorecard :sunny: :sunny:

http://solar-scorecard.org/

Solar Scorecard project: track Fort Collins renewable/solar energy goals.

## Goal of Project
The goal of this project is to create an up-to-date web-based data visualization tool for tracking solar contributions with respect to [City of Fort Collins 2015 Climate Action Plan](http://www.fcgov.com/environmentalservices/pdf/cap-framework-2015.pdf), whose goal is to:
> reduce emissions 20% below 2005 levels by 2020, 80% below 2005 levels by 2030, and achieve carbon neutrality by 2050.

## Methodology
Since the Climate Action Plan goal is in terms of aggregate 2005 greenhouse gases (ghg), for our purposes we will focus only on the emissions due to electrical.  Based on [Fort Collins 2015 Community Carbon Inventory](https://www.fcgov.com/climateaction/pdf/2015-community-carbon-inventory.pdf?1494967837), we will assume that 50% of emissions are due to electrical activity.

### Define CO2 Reference Points
In 2005, ghg emissions due to CO2 was 2.3 Million Metric Tons (mmt).  Therefore, we will assume the electrical-only emissions in 2005 were **1,150,000 mt**. Therefore, the 2020 electrical-only goal is **920,000 mt (230,000 mt reduction)**, and the 2030 electrical-only goal is **230,000 mt (920,000 mt reduction)**.

### Convert Solar Capacity to CO2 Reduction
Based on the [EPA's Greenhouse Gases Equivalencies Calculator](https://www.epa.gov/energy/greenhouse-gases-equivalencies-calculator-calculations-and-references), we will assume that every kilowatt hour (kWh) of solar energy produced will reduce emissions by **.000703 mt**.

Using these numbers we can express the 2020, 2030, and 2050 goals in terms of the kilowatt reductions needed to meet each goal.

```
2020: 20% Reduction
230,000 mt / (.000703 mt / 1 kWh * 8760 hr) =  37,348 kW

2030: 80% Reduction
920,000 mt / (.000703 mt / 1 kWh * 8760 hr) = 149,392 kW

2050: 100% Reduction (carbon neutrality)
1,150,000 mt / (.000703 mt / 1 kWh * 8760 hr) = 186,740 kW
```

Using the [PVWatts Calculator](http://pvwatts.nrel.gov/pvwatts.php) we can calculate Fort Collins' photovoltaic system output in kWh per year.  Assuming the variables in the table below, Fort Collins' system output is **6,111 kWh/year**.  Since there are 8760 hours in a year, Fort Collins' power output is **0.6976 kW/kWh**.

| Variable | Value |
| -------- | ----- |
| DC System Size (kW) | 4 |
| Module Type | Standard |
| Array Type | Fixed (open rack) |
| System Losses (%) | 14 |
| Tilt(deg) | 20 |
| Azimuth(deg) | 180 |

## Detailed Project Requirements
1. Create interactive, web-based, graphical depiction (chart) for each of the three emissions benchmarks mentioned above.
1. Incorporate solar power's contribution toward these goals by using publicly available photovoltaic (PV) permit data, specifically permits which have been issued to applicants requesting construction of PV facilities. Each permit contains basic PV data regarding size and quantity, which may be used as a rough estimate of how much solar energy the solar structure will provide. See [comment](https://github.com/CodeForFoco/solar-scorecard/issues/1#issuecomment-300964480) for details on viewing this data.
1. Make the tool as portable as possible so that it may be used for similar projects in other communities.

## Getting Started
1. Follow **Contributing** guidelines below.
1. Join our [#solar-scorecard Slack channel](https://codeforfoco.slack.com/messages/C5CHBBN4V)
1. Check out the [3D Version 4 API](https://github.com/d3/d3/blob/master/API.md#scales-d3-scale) and [3D Tutorial](https://github.com/d3/d3/wiki/Tutorials) to get started with D3.

## Contributing
We welcome new contributors. Be sure to check out guide on [contributing][contributing], which includes instructions on how to fork, clone, branch, commit, pull request and sync your fork.

Not sure where to start? Look for [open issues][githubissue] on GitHub, or message the team on [our Slack site][slack]. If you aren't on our Slack, [click here for an invite][slackinvite].

TL;DR Contribution Workflow:

1. [Fork][fork] this repository and Clone your fork locally.
1. This project has a handful of `NodeJS` dependencies, so if you do not already have it then install the [latest stable version][node] (minimum required `node` version is `8.12.0`, and minimum `npm` version is `5`).
1. Run `npm install` in your project folder.
1. If you want files to automatically compile and reload your browser, run `npm start`.
1. Checkout a new branch on which to make your changes.
1. Make edits. Try to match existing coding style.
1. Test your changes.
1. Commit your changes. Push your changes to your fork on GitHub.
1. Submit a new [pull request][pullrequest] and your changes will be reviewed and merged.

### Publishing
If you are administrator of the main repository and want to push to the [demo site][gh-demo]: `npm run publish-gh-pages`.

## Repository Organization
This repo is structured as follows:

``` text
├── LICENSE
├── README.md
├── archive                               Archive of old project code
    ├── code
        ├── js                            Front end javascript code
        ├── css                           Front end styles
        └── scss                          Compiles to CSS
    └── data
        ├── data-sources                  Utilities around obtaining data
        ├── schema                        Data models
        └── scripts                       Helper scripts
```

## Bugs / Feedback / Suggestions
We encourage you to [open up an issue][newissue] if you have any feedback, suggestions or bugs.

## License
MIT, see [LICENSE](/LICENSE) for full license.

[slack]: https://codeforfoco.slack.com/
[slackinvite]: https://codeforfocoslack.herokuapp.com
[fork]: https://help.github.com/articles/fork-a-repo/
[forkthisrepo]: https://github.com/CodeForFoco/solar-scorecard#fork-destination-box
[contributing]: https://github.com/CodeForFoco/org/blob/master/CONTRIBUTING.md
[githubissue]: https://github.com/CodeForFoco/solar-scorecard/issues
[newissue]: https://github.com/CodeForFoco/solar-scorecard/issues/new
[pullrequest]: https://github.com/CodeForFoco/solar-scorecard/pulls
[node]: https://nodejs.org/en/
[gh-demo]: http://codeforfoco.org/solar-scorecard/stairstep.html
",4,4,4,19,renewable-energy,"[community-driven, renewable-energy, solar]",00000
1225,reView,NREL,NREL,https://github.com/NREL/reView,https://api.github.com/repos/NREL/reView,Data portal for NREL's Renewable Energy Potential Model.,"# reView

[![GitHub Pytests](https://github.com/NREL/reView/workflows/Pytests/badge.svg)](https://github.com/NREL/reView/actions?query=workflow%3A%22Pytests%22)
[![GitHub Super-Linter](https://github.com/NREL/reView/workflows/Lint%20Code%20Base/badge.svg)](https://github.com/marketplace/actions/super-linter)
[![codecov](https://codecov.io/gh/NREL/reView/branch/main/graph/badge.svg)](https://codecov.io/gh/NREL/reView)

`reView` is a data portal for reviewing outputs from the National Renewable Energy Laboratory's ([NREL](https://www.nrel.gov/)) Renewable Energy Potential Model ([reV](https://github.com/NREL/reV)). It is currently limited to tables generated by the [reV Supply Curve](https://nrel.github.io/reV/_autosummary/reV.supply_curve.html) module, which provide [technical potential](https://www.nrel.gov/gis/re-potential.html) data for a given technology under a set of land-use, technology performance, and cost assumptions. Once a user has generated tables with`reV`, `reView` allows that user to view the data as an interactive map linked to an interactive graph, allowing for quick exploration of `reV` outputs. Other functionality allows the user to filter the dataset based on variable thresholds, calculate differences between two tables, compare multiple tables in one chart, group results by region, and calculate least-cost scenarios at each point. More functionality is coming soon.

<br>

## Installation
1. Clone the `reView` repository.

    Using ssh:
    ```
    git clone git@github.com:NREL/reView.git
    ```
    Using https:
    ```
    git clone https://github.com/NREL/reView.git
    ```

2. cd into the repository: ``cd reView``.

3. Install Package and Dependencies

    1. **RECOMMENDED OPTION**\
    Using `conda`/`mamba` ():
        1. Create a conda environment:
            ```commandline
            conda env create -f environment.yml
            ```
        2. Activate the environment:
            ```commandline
            conda activate review
            ```
        3. Install ``reView``:\
            For users:
            ```commandline
            pip install -e .
            ```
            For developers:
            ```commandline
            pip install -e '.[dev]'
            ```

    2. **CHOOSE YOUR OWN ADVENTURE**\
    Using `pip`:
        1. Create and activate an environment with your tool of choice
        2. Install GEOS dependency (https://libgeos.org/usage/install/).
        3. Install ``reView``:\
            For users:
            ```commandline
            pip install -e .
            ```
            For developers:
            ```commandline
            pip install -e '.[dev]'
            ```


    Note:\
    The `pip` approach has not been tested by the `reView` package maintainers.

4. Create a project config pointing to directory containing reV supply curve tables. Save as json dictionary in configs/ (e.g. configs/sample.json). If the user doesn't have reV data, they can get started with supply-curves for NREL's [standard scenarios](https://www.nrel.gov/analysis/standard-scenarios.html) based on the [Electricity Annual Technology Baseline](https://atb.nrel.gov/electricity/2021/data) through NREL's Geospatial Data Science group. Supply curves for wind power are available [here](https://www.nrel.gov/gis/wind-supply-curves.html) and those for solar photovoltaic power are available [here](https://www.nrel.gov/gis/solar-supply-curves.html).
    ```json
    {
        ""project_name"": <""Your Project Name>"",
        ""directory"": <""Local path to folder containing reV supply curve tables"">
    }
    ```
<br>

## Running reView
1. Run the ``reView`` command:
    ```
    reView
    ```
2. Open your browser and enter the URL output from command above. The default port is 8050.
    ```
    http://localhost:8050
    ```
<br>

## Running reView with [Gunicorn](https://gunicorn.org/) (Unix only)

1. To run `reView` using `gunicorn` (a Python WSGI HTTP Server for UNIX) for better performance, make sure to follow the installation steps as outlined above, but when you get to the last step of #2, include the `gunicorn` dependency:
    ```
    pip install -e '.[gunicorn]'
    ```
    or, for more development tools:
    ```
    pip install -e '.[dev,gunicorn]'
    ```

2. Run `reView` using `gunicorn`:
    ```
    cd reView
    gunicorn index:server
    ```

3. Open your browser and enter the URL output from command above. The default port is 9875.
    ```
    http://localhost:9875
    ```
<br>

## Command-Line Tools

Additional command-line tools are available as part of this package. A list of these tools can be accessed using the command `reView-tools`. More information on the usage of these tools can be found in the [Usage](USAGE.md) documentation.

## Development

This repository uses [pylint](https://pylint.pycqa.org/en/latest/) to lint the code, please follow this guideline if you wish to contribute to this repository. In addition, your code must pass all existing tests. You will need to
[download the Chrome Driver](https://chromedriver.chromium.org/getting-started) in order to run the integration tests
included with this repository.

Before pushing code, the following commands should be run to ensure GitHub actions will succeed:
```cmd
pylint reView
pylint tests

flake8 reView
flake8 tests

pytest
```

",4,4,3,9,renewable-energy,"[modeling, renewable-energy, solar-power, technical-potential, visualization, wind-power]",00000
1226,fuhrlander,alecuba16,N/A,https://github.com/alecuba16/fuhrlander,https://api.github.com/repos/alecuba16/fuhrlander,Fuhrländer FL2500 2.5MW wind turbine dataset + pre-processing functions R MATLAB,"# Author
Alejandro Blanco-M ![email](https://raw.githubusercontent.com/alecuba16/profile/main/email.jpg)

<https://github.com/alecuba16>

[orcid.org/0000-0003-1481-7612](https://orcid.org/0000-0003-1481-7612)


![#f03c15](https://via.placeholder.com/15/f03c15/000000?text=+)`Please, if you use this code/dataset, cite me as the author of the code/data compilation. The data is compiled by myself from a SCADA system that I have been working in.`

## License
Copyright by Alejandro Blanco-M. Licensed under Eclipse Public License v2.0.

# The dataset
This is a Fuhrländer FL2500 2.5MW wind turbine dataset.

## Format
The dataset is stored in JSON format inside the ""dataset"" folder. It contains five wind turbines (80,81,82,83,84), each one with three years of data with a time interval from 2012 to 2014. The data frequency is 5 minutes reporting four indicators of each 78 sensors (a total of 312 variables). The reported values for each sensor are minimum, maximum, mean, and standard deviation for each 5-minute interval. The dataset also contains the alarms events, indicating the system and subsystem and a small description.

## Functions
I have included several functions for {R,MATLAB,...} languages to providing an interface that pre-processes and manipulates the RAW data into a table-like format.
The table-like format is composed of the variables at the columns and each five-minute data entry in rows. 


## Algorithms
In the case of matlab code, I have included a ELM (extreme learning machines) classificator model to make some predictions as an example. The ELM model is provided by [‪Pere Marti-Puig](https://orcid.org/0000-0001-6582-4551)

# FAQ
## ERRORS
### Java exception occurred: java.lang.OutOfMemoryError: Java heap space
Please increase the matlab java heap memory to more than 4GB following the next instructions:
https://es.mathworks.com/help/matlab/matlab_external/java-heap-memory-preferences.html
",4,4,2,0,renewable-energy,"[datasets, energy, machine-learning, renewable-energy, wind-turbine]",00000
1227,Eolian-Telemetria-Auriga,mvargas33,N/A,https://github.com/mvargas33/Eolian-Telemetria-Auriga,https://api.github.com/repos/mvargas33/Eolian-Telemetria-Auriga,Telemtry system of the Eolian Auriga project from the University of Chile. Contains the back-end and front-end used to visualize data in real time inside and outside the solar car. More info at,"Shield: [![CC BY-SA 4.0][cc-by-sa-shield]][cc-by-sa]

This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License][cc-by-sa]. 

[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/
[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png
[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg

Our aim as a team is to share this software as an academic material, and contribute to solar car's community. We also want to give attribution to the people who put the effort to make this software possible. You may license your contributions to adaptations of this BY-SA 4.0 work under [GPLv3 Licence][GPLv3], it's BY-SA 4.0 compatible.

[GPLv3]: https://www.gnu.org/licenses/gpl-3.0.html

# Eolian Auriga Telemetry System
The telemetry system runs in a Raspberry Pi inside the car. On one hand, it uses a Java Application to receive data from the car and other logistics tasks. On the other hand, it runs a VueJS application to visualize data and interact with the users. The system uses a middleware written in JS to communicate back-end and front-end.

# Dependencies and configuration

Software required:

* IntelliJ https://www.jetbrains.com/idea/
* Java JDK https://www.oracle.com/technetwork/java/javase/downloads/index.html
* NodeJS https://nodejs.org/en/

For Back-end:

* Import the directory *Protocol* into IntelliJ
* Configure the project to work with Java 8
* To import dependencies:
  * Right click in Protocol.iml and select *import modules* OR
  * Go to *File->Project Strucure->Modules* to add all the JAR files inside the *libs* directory. The JAR files inside *JUnit* must be imported for testing, not compiling

For Middleware and Front-end:

* Run `npm install` inside the *Server API* and *VueJS front end* directories to install all dependencies
* Install Quasar CLI with `npm i -g @quasar/cli`
* In Windows allow scripts to run. In Admin Power Shell run `Set-ExecutionPolicy RemoteSigned`
* Run `npm run lint -- --fix` for lint operations

# Run the applications

Back end:

* Run the *MainReceiver* and *MainSender* classes as requested

Middleware:

* With back-end running, run `node index.js` inside *Server API* to run the middleware between back-end and front-end

Front end:

* Run `npm run dev` inside *VueJS front end* to run the front-end

# Notes

The project is under development. Basic data dynamics are already implemented. Front-end must be completed. Compatibility with Eolian Fenix (older solar car) is in progress.
",4,4,1,40,renewable-energy,"[app, application, car, data, renewable-energy, solar, sustainability, telemetry, vehicle, wsc]",00000
1228,csaladenes.github.io,csaladenes,N/A,https://github.com/csaladenes/csaladenes.github.io,https://api.github.com/repos/csaladenes/csaladenes.github.io,Code behind my personal website (Dénes Csala),"
[<img src=""favicon.ico"" alt=""favicon"" height=24 width=24 />  Dénes Csala](http://csaladen.es/)
===
[![Dénes Csala](snapshot.png ""Dénes Csala"")](http://csaladen.es/)  

[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/csaladenes/csaladenes.github.io/blob/master/LICENSE)
[![GitHub last commit](https://img.shields.io/github/last-commit/csaladenes/csaladenes.github.io?label=last%20update)](https://github.com/csaladenes/csaladenes.hithub.io)

This is the code running my personal website. It is a horizontally scrolling ""one-pager"" with Windows 10-style tiles. The main visuals code is in the `index.html`, sectioned by tile groups. Inspired by [Thomas Verelst](http://metro-webdesign.info).

# App
Try: http://csaladen.es

# Credit
Dénes Csala, 2021   
http://csaladen.es
",4,4,2,0,renewable-energy,"[agent-based-modeling, business-intelligence, complex-systems, d3, d3js, d3plus, data-analysis, data-science, data-visualisation, data-visualization, dataviz, energy, energy-transitions, javascript, metro, networks, policy-synchronization, renewable-energy, system-dynamics, website]",00000
1229,EETP,Yassin-MT,N/A,N/A,https://api.github.com/repos/Yassin-MT/EETP,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DC:47EA:269A68E:4F4C485:65224006.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1230,Increasing-Renewable-Energy-Access-India,prathimacode-hub,N/A,N/A,https://api.github.com/repos/prathimacode-hub/Increasing-Renewable-Energy-Access-India,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19D:47EE:2B8BF90:5955F8D:652240B7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1231,CaReCur,thomastu,N/A,https://github.com/thomastu/CaReCur,https://api.github.com/repos/thomastu/CaReCur,California Renewables Curtailment Study,"# California Renewables Curtailment Study

## Quickstart

1.  [Install DVC](https://dvc.org/doc/install)
2.  Configure dvc gdrive remote (please take note of the `--local` flag!): `dvc remote modify data gdrive_client_secret <secret_key> --local`.  The associated data will not be public during the study itself.
3.  Pull data: `dvc pull`
4.  Run the analysis (pending): `dvc repro`

## System Dependencies

Debian/Linux

```
sudo apt install libeccodes0 libspatialindex-dev
```

MacOS

```
brew install eccodes
```",3,3,1,0,renewable-energy,"[caiso, curtailments, renewable-energy, solar]",00000
1232,TRPTSim,tallakt,N/A,https://github.com/tallakt/TRPTSim,https://api.github.com/repos/tallakt/TRPTSim,A simulator for the Pyramid TRPT airborne wind energy [AWE] windmill,"# TRPT Simulator

![The Pyramid Illustration](images/illustration.jpg ""The Pyramid Illustration"")

This is a simulator for a particular kind of TRPT type. TRPT airborne wind
energy is a class of windmills that are airborne and where the power of the
flying part of the windmill is transferred using torque transfer through a
tensile shaft. It means Tensile Rotary Power Transmission and the term was
[used first by Oliver Tulloch](https://pureportal.strath.ac.uk/en/publications/tensile-rotary-power-transmission-model-development-for-airborne-)

This particular class of TRPT consists of a soft shaft (possibly with
compression rods) and a number of kites rotating in a single layer, connected
through a bridle, flying in a ring. And all the kites are of the same type.

To say what it isn't, no lifter kite is assumed, and the shaft is assumed to be
mostly pure tether and not very long. Also there is only one layer, so not
lower layers to expand the rotary shaft etc.

Why? Because these rigs are a simplest structure possible if the kite is very
controllable. So some kind of computer control of the kite during the loop is
assumed.

The simulator is intended for use with a stationary power plant as well as a
power source on a moving vehicle.


## Description of the simulation performed

The simulator is intended for quick prototyping of TRPT rigs without doing a
complete detailed simulation. So

- The shape of the layer is assumes constant and all bridle lines tensioned. It
  is a goal of the simulator though, to verify that all bridle lines are
  tensioned
- Tether drag is using a simplified model disregarding dynamics
- The roll of the kites is set directly, dynamics in roll are not accounted for
- Pitch is not modelled, it is assumed that we can set pitch to achieve the
  desired lift coeficcient as needed


## Install

In Julia, install from git with

```julia
pkg> add /path/to/TRPTSim#main
```

Then use with 

```julia
using TRPTSim
```

## Examples

First create a model/configuration

```julia
> cfg1 = ampyx_ap2()
> cfg2 = delft_lei_v3()
> cfg3 = eijkelhof()
> cfg4 = october_kite()
> cfg5 = wi_rigid_daisy()
```


Don't expect any detailed simulation. The models are coarse approximation based
on available data. And the kites are not optimized for this kind of TRPT
simulator.


You can convert a model to a `Dict` to allow Julia to pretty print the contents

```julia
> cfg |> config_to_dict
Dict{Symbol, Any} with 13 entries:
  :n              => 3
  :rho            => 1.225
  :gravity        => 9.81
  :elev           => 0.523599
  :l              => 6.7
  :safety_factor  => 3.0
  :c_d_tether     => 1.1
  :d              => 0.0012
  :s              => 0.2
  :design_c_l     => 0.635
  :c_d_fun_coeffs => [0.0148208, -0.0188157, 0.0381036, 0.0754882, 0.145568, -0.261428, -0.070654, 0.20734, -0.0597481]
  :m              => 0.42
  :radius         => 4.29
```

These values are what defines the kite parameters. To create a config with some
different parameters, do

```julia
> cfg = config(wi_rigid_daisy(), n = 6, l = 15.0)
```

Or modify a confuration by scaling it

```julia
> cfg = scale_to_area(wi_rigid_daisy(), 40.0)
```

The basic unit of simulation is the `solve` function. There is a second version
that is mostly more useful that wraps the result of the `solve` operation into
a `DataSet` for easier analysis.


```julia
> wind_speed = 12.0
> psi = 0.0
> mtr = 0.1 # moment per tension per looping radius
> force_h = 0.0
> solution = solve_sector(cfg, wind_speed, psi, mtr, force_h)
> (dataframe, solver_input) = solve_sector_df(cfg, wind_speed, psi, mtr, force_h)
```

The inputs to the solver is some parameters that are not spesifically
configuration, but more things that would notmally change. Wind speed is a good
example. The inputs besides the configuration are

- `wind_speed`: The wind speed in m/s
- `psi`: the offset in azimuth relative to pointing the AWE rig directly downwind
- `mtr`: The moment that is be transferred for a given tension
  of the shaft, divided by the looping radius. Detailed explanation below.
- `force_h`: the force generated by the implemented algorithm in a direction
  horizontal in the direction perpendicular to the shaft centerline.


The parameter `mtr` requires more explanation. It represents the shafts ability
to transfer torque given a certain tension. It is also divided by the looping
radius to make the value constant during scaling, so that a `mtr` factor is
similar across a wide range of designs and sizes.

To arrive at the actual moment transmitted through the shaft, use the formula:

> `moment = MTR * looping_radius * shaft_tension`

The `mtr` factor also represents the induction factor of the rig. An `mtr`
value of zero represents a shaft that is not transmitting any torque and the
blades are rotating unloaded. Too high of an `mtr` factor and the rig will not
perform well as the blades are slowed down.


Deciding the optimum `mtr` and tether tension is a hard optimization problem
that takes a while to calculate. Luckily, the `mtr` value will not change much,
so in this software, most times the `mtr` is just expected to be found by trial
and error, and only the tension is optimized automatically every time.

The maximum possible `mtr` value depends on the shaft geometry. It may be
calculated by calling

```julia
> radius1 = 1.0
> radius2 = 5.0
> length = 10.0
> mtr = shaft_section_mtr(radius1, radius2, length) 
```

The value of `mtr` is typically around 0.05. The maximum moment of a shoft
shaft is usually applied when the shaft section has a twist of 90 degrees. For
extending the upper wind range of a rig, the `mtr` may be increased as the
kites will need to depower to account for maximum tether loading. The other
option is to increase the tether diameter and strength. The first option
requires making the shaft more stubby or adding compressive elements, while the
latter will hurt low wind performance.


Values reported by `solve...` are usually reported per kite. For example the tension trace will report only the tension of a single kite during a full looping cycle. To get the sum of all tensions for all kites combined, use

```julia
> moment_of_all_kites = signal_sum_of_kites(dataframe.moment, solver_input[:config].n)
```

The flying speed may be estimated by this heuristic.  This is used to
initialize the solver with an initial flying speed.

```julia
> speed0 = heuristic_flying_speed(cfg, wind_speed, psi)
```

The optimal tension for a rig is estimated by iteration using. Optimal tension
is the tension that gives the maximum power output.

```julia
> tension = optimal_tension(cnf, wind_speed, psi, mtr, force_h)
```

Once you have solved the kite motion, the solution can be plotted using

```julia
> plot_solution(dataframe, solver_input)
```

A complete power curve is made and plotted like this

```julia
> winds = 8:15
> pc = power_curve(cfg, winds, psi, mtr, force_h)
> plot_power_curves(pc)
```

To plot many curves in one chart 

```julia
> plot_power_curves(""First"" => pc1, ""Second"" => pc2)
> plot_power_curves([(""$mtr"", power_curve(cfg, winds, psi, mtr, force_h)) for mtr = 0.01:0.01:0.08]...)
```


There is also a tension curve for mounting the windmill on a moving vessel

```julia
> plot_tension_curves(pc)
```











",3,3,3,0,renewable-energy,"[awe, julia, renewable-energy, simulation, trpt, wind, windmill]",00000
1233,carbonfootprint,renewable-energy-experiments,renewable-energy-experiments,https://github.com/renewable-energy-experiments/carbonfootprint,https://api.github.com/repos/renewable-energy-experiments/carbonfootprint,Does renewable and energy storage integration green the electric grid ?,"# Renewable Energy Reserach in Seattle University for Green Grid

Save copy of  **Google Collab notebooks**

Data Sets for Grids

1. EIA 

2. CA ISO - http://www.caiso.com/todaysoutlook/pages/supply.aspx (Supply trend
Energy in megawatts broken down by resource in 5-minute increments.)

3. ERCOT - http://www.ercot.com/gridinfo/generation 

5. ISO NE - Real-Time Maps and Charts 

Data Sets for LCOE / Price

1. LCOE estimates from Projected Costs of Generating Electricity 2020
 https://www.iea.org/articles/levelised-cost-of-electricity-calculator 
Assumptions 
Discount rate 7% Central case
Carbon price 30.00 USD/ton Default assumption
Heat price 37.06 USD/MWh Default assumption
Coal price 100% Default assumption
Gas price 100% Default assumption

Kaggle Notebook - https://www.kaggle.com/altanai/lcoe-levelized-cost-of-electricity-generation 


[![Does renewable and energy storage integration green the electric grid by altanai](Does_renewable_and_energy_storage_integration_green_the_electric_grid_altanai.png)](https://vimeo.com/674315507)
",3,3,1,0,renewable-energy,"[carbon-emissions, carbon-footprint, electricity-consumption, energy-data, energy-efficiency, power-generation, renewable-energy]",00000
1234,wind-repowering-usa,inwe-boku,inwe-boku,https://github.com/inwe-boku/wind-repowering-usa,https://api.github.com/repos/inwe-boku/wind-repowering-usa,The potential for repowering US wind turbines,"[![MIT License](https://img.shields.io/github/license/inwe-boku/wind-repowering-usa.svg)](https://choosealicense.com/licenses/mit/)

The potential for repowering US wind turbines
=============================================

This repository contains code to produce the figures for an analysis first
presented at the [EGU 2019](https://www.egu2019.eu/) in the session
[Spatiotemporal modelling of distributed renewable energy systems](https://meetingorganizer.copernicus.org/EGU2019/orals/30279)
([abstract](https://meetingorganizer.copernicus.org/EGU2019/EGU2019-7252.pdf)). See GIT tag [egu2019](https://github.com/inwe-boku/wind-repowering-usa/tree/egu2019) for the version of this repository used for the presentation at the EGU 2019 (including the slides). An enhanced version is presented at the [INFORMS Annual Meeting 2019](https://www.abstractsonline.com/pp8/#!/6818/presentation/8219).

* [slides](doc/slides/slides.pdf)
* [abstract](doc/abstract/abstract.pdf)
* [figures](figures)

For more information about the project visit https://refuel.world/.

![Map of mean wind speed and wind turbines in the US](figures/mean_wind_speed_and_turbines.png ""Map of mean wind speed and wind turbines in the US"")


Requirements
------------

* dependencies: see [env.yml](env.yml) + standard tools like GNU Make, wget; tested only with
  GNU/Linux
* approx. 200GB of disk space, more than 16GB RAM
* API key for the [CDS API](https://cds.climate.copernicus.eu/api-how-to)
* API key for the [EIA API](https://www.eia.gov/developer/)
* [Gurobi](http://www.gurobi.com/)


How to run
----------

To install all dependencies using conda:

```
conda env update -f env.yml
```

Store the [EIA API key](https://www.eia.gov/developer/) in a plain text file
`eia-api-key` in the repository root directory.

Activate the conda environment:

```
conda activate wind_repower_usa
```

Install the Python Gurobi API in the conda environment:

```
cd /opt/gurobi810/linux64/
python setup.py install
```

Run individual steps using [Make](https://www.gnu.org/software/make/):

```
make download_turbines
make download_wind_era5
make download_energy_generation
make calc_wind_speed
make calc_simulated_energy_timeseries
make calc_simulated_energy_per_location
calc_prevail_wind_direction
calc_dist_in_direction
calc_location_clusters
make calc_min_distances
make calc_optimal_locations
make calc_repower_potential
make generate_figures
make slides
```

There is also a combined Make target for the computation tasks:

```
make compute_all
```


Changelog
---------

* [egu2019](https://github.com/inwe-boku/wind-repowering-usa/tree/egu2019): version presented at the [EGU 2019](http://egu2019.eu/)
* [informs2019](https://github.com/inwe-boku/wind-repowering-usa/tree/informs2019): version presented at the [INFORMS Annual Meeting 2019](https://www.abstractsonline.com/pp8/#!/6818/presentation/8219)


Acknowledgements
----------------

We gratefully acknowledge support from the European Research Council (""reFUEL"" ERC2017-STG 758149).
",3,3,3,0,renewable-energy,"[renewable-energy, wind-power]",00000
1235,MatahariTerbit,TerbitlahTerang,TerbitlahTerang,https://github.com/TerbitlahTerang/MatahariTerbit,https://api.github.com/repos/TerbitlahTerang/MatahariTerbit,A tool for estimating a cost effective rooftop solar system in Indonesia 🇮🇩,"# Matahari Terbit ![image](src/assets/icons/logo-sunrise.svg)

Easily calculate how many solar panels you should buy for the best ROI. If you live in Indonesia 🇮🇩.

 * 🌎 [Web](https://matahariterbit.web.app/)
 * 🍏 [iOS](https://apps.apple.com/id/app/solar-calculator-indonesia/id1618024702)
 * 🤖 [Android](https://play.google.com/store/apps/details?id=com.sjappelodorus.MatahariTerbit)

On grid solar power can be very profitable in Indonesia. However, it is not so easy to calculate how many solar panels you should buy. This depends on three factors: 
1. how much sunshine there is at your home
2. how high your monthly electricity bill is
3. the power of your electricity connection

Based on these factors, this application calculates how many panels you should install. It will also estimate the return on investment, using up to date PLN tariffs.


## Plans

### Irradiance
 - [X] Current location selection
 - [X] Determine yearly irradiance for a coordinate

### Calculations
 - [X] Subtract minimum costs from number of panels
 - [x] Cap production based on connection size
 - [x] Include taxes
 - [x] Enhanced vs simple mode

### Explanation
 - [x] Show ROI graph
 - [x] Display costs breakdown
 - [ ] Add examples with embedding instructions

## Dependencies & Libraries
- Snowpack
- React
- Ant Design
- TypeScript
- Chart.JS

## Getting Started

```bash
npm run serve
# or
yarn serve
```
",3,3,3,8,renewable-energy,"[indonesia, react, renewable-energy, solar-energy]",00000
1236,reia,kitstigator,N/A,https://github.com/kitstigator/reia,https://api.github.com/repos/kitstigator/reia,Renewable Energy Impact Analytics,"REIA - Renewable Energy Impact Analytics
===

REIA is a data-driven Web-tool that allows a renewable energy (RE) project's data to be generalised, scored and visualised across different categories, outcomes and performance metrics.

At its core is a [JSON](http://www.json.org/) data framework built on international RE standards that provides a reusable blueprint across multiple project development stages and technology types. Its entire configuration is as extensible and malleable as it is transparent.

REIA is built with [Meteor](https://www.meteor.com/) & [Bootstrap](http://getbootstrap.com/) according to [ES5](https://es5.github.io/) specifications.

The `master` branch is live on http://reia.io.

## Why?

An attempt at an open-source, community-driven standards framework, REIA aims to facilitate RE developers in assessing relevant impacts of their project according to their own priorities efficiently while retaining consistency of methodology.

### Core pillars

1. **Configurable** - Every input or output metric can be configured in terms of (in sequence):
   1. how its data, sources and outcome are defined,
   1. if it is activated in the category (or not),
   1. how it is scored across its spectrum of possible values, and
   1. how it is weighted as a whole in the category with respect to that category's other metrics.
1. **Automatable** - every output can by definition be automated using the project's inputs with a custom calculation syntax, allowing for complex computable interactions between metrics.
1. **Transparent** - every metric and category score is dependent on what metrics are activated and how they are weighted, allowing a project to be rated according to its individual requirements whilst providing full disclosure of the methodology.

> *For projects to be compared with one another usefully, a particular configuration needs to be consistent across those projects.*

## Terminology

The fundamental concepts that REIA codifies into the framework. For more detailed how-tos, please refer to the front-end popovers marked by question marks.

### Metric

A project's isolated, pre-defined, discretized set of data. The values a metric has can by definition be mapped to a linear function. Metric values can take the form of numbers corresponding to a unit, or any discrete, finite dataset. Metrics are a core configurable aspect and are by design highly extensible.

A metric can score from 0 (worst performance/outcome) to 10 (best). v0.1 currently comprises 51 metrics across all categories.

> For example, technical metric ""Nameplate Capacity"" is a number in the range of 1 to 500 in MW, while environmental metric ""Impact on Local Landscape"" takes the form of a nested radio list of choices.

Metrics are defined in `private/metrics/` by category folder. Also see [Further development](#further-development).

#### Input

A given property of the project and cannot be inferred in any other way, such as its generating capacity.

#### Output

Conceptually differs from an input because it could be derived from existing inputs. If sufficient inputs are present, then an output can be automated using a calculation.

#### Calculation

Powers the automation of an output. An output's automation can be individually switched on or off on the front-end.

A calculation is expressed as an algebraic combination of other metrics and constants, using standard ASCII math notation and a custom camelCase syntax as follows:

`[categoryName][metricType][metricName][OPERATION]...`

> For example, the calculation for ""Annual Output"" is defined as:
```
technicalInputNameplateCapacity*(technicalInputCapacityFactor/100)*8760
```

#### Activation

To facilitate the re-use and aggregation of metrics as a comprehensive database, metrics can individually be activated or deactivated, including or excluding them completely from all evaluations of a particular project. Also see [Category Coverage](#coverage).

#### Weight

Confers relative importance to metrics compared to their peers in a particular category.

The weight takes the form of a percentage coefficient that, along with the other metric's weights, combines into a linear [weighted arithmetic mean](https://en.wikipedia.org/wiki/Weighted_arithmetic_mean). The weights for all metrics default to equivalent values of their convex combination for the sum of all active metrics.

> For example, 5 active metrics in a category each have a default weight of 0.2 (each being 20% worth of the category 100% total).

> *v0.1 infers equal weights across all active metrics, so the UI field is indicative and changing JSON files won't have any effect.*

### Category

Loosely groups a set of metrics by application domain. There are currently 4 categories, each bearing a possible rating from A (best performance/outcome) to F (worst). The rating is derived from a weighted arithmetic mean of all of its active metrics.

#### Basic (unrated)

Doesn't include any metrics, only the supporting contextual information of the project, such as name, location and development stage.

#### Technical

A crucial aspect, the technical metrics represent the technological performance of the RE project.

#### Financial

Arguably the most important category, financial metrics complement feasibility reports and ROI projections.

#### Environmental

Strives to measure the outcomes of the project's impact on the environment, such as emissions and water pollution.

> *In v0.1 the inclusion and content of the metrics in this category are experimental, and the potential for output automation in need of further development*

#### Socioeconomic

The most experimental and perhaps least standardised of metrics - the idea is to quantify the impact of the project on equity, local lifestyles and job quality, among other things.

> *As with the environmental category, v0.1 requires further development for the content and automation of the socioeconomic metrics*

#### Coverage

Refers to what percentage of that category's total defined metrics are activated for this particular project. It doesn't influence any evaluation, but it's a crucial piece of holistic project data.

This aspect is computed and shown on the front-end in the form of a progress bar.

#### Rating

Based on the arithmetic mean score of a category's activated metrics according to their relative weightings, broken up by 0.5 point increments. If the average is in the lower tier, a ""-"" suffix is added, if in the middle tier, no suffix is added and if in the upper tier, a ""+"" suffix is added, much like in a school report card.

- **F** - score of under 1
- **E** - between 1 and 3
- **D** - between over 3 and 5
- **C** - between over 5 and 7
- **B** - between over 7 and 9
- **A** - over 9 (can't be more than 10)

> For example, a category scoring 5.4 translates to a rating of C-, while a score of 8.6 is a B+.

The project's overall rating is the linear arithmetic mean of all the category's ratings. Also see [Further development](#further-development).

### Chart

Serves to visualise scores and ratings for metrics and categories. Charts are defined as JSON files in `private/charts` by category folder using a custom data model. They are processed and displayed via [Chart.js](http://www.chartjs.org/) in the front-end.

## Internals

*Forthcoming*

## Further development

As of v0.1, useful additions include:

- Upgrade to latest Meteor & refactor to ES6 standards
- Upgrade libraries and Bootstrap
- Replace Blaze with React
- Extending the UI so that configuration can be done completely on the front-end instead of having to change JSON files manually
- Making the environmental & socioeconomic categories more robust
- Functionality for exporting a detailed JSON file and (ultimately) PDF of a project and its configuration
- Weight system:
 - custom metric weights, no longer inferring equal weights
 - addition of weights between categories to allow for overall rating
- Allowing for more flexible, auto-mapped rating scales based on a range of values rather than a finite set
- User accounts system to allow in-app saving of configuration and projects
- Validation:
  - activated, automated outputs can never take into account deactivated inputs
  - validation of custom weights (UI-driven for best outcome)
- Full code documentation

> There is no reason why REIA can't be extended to also include non-renewable technology types. It would be a matter of including the appropriate metrics and broadening the focus. In addition, a system could be implemented to systematically exclude certain metrics based on the selected technology type without affecting coverage.

## About

REIA was devised by [Phillip Bruner](https://www.linkedin.com/in/pbruner/) in collaboration with several industry professionals, institutions and academic experts. The app was designed and developed by [Chris Nater](https://www.linkedin.com/in/cnater/).

REIA is licensed under the MIT license, see `LICENSE`.
",3,3,3,0,renewable-energy,"[data-analytics, data-visualization, renewable-energy]",00000
1237,Portable-Buck-Converter-Battery-Electric-Vehicle-Charger,amrmarey15,N/A,https://github.com/amrmarey15/Portable-Buck-Converter-Battery-Electric-Vehicle-Charger,https://api.github.com/repos/amrmarey15/Portable-Buck-Converter-Battery-Electric-Vehicle-Charger,This repository presents simulation models of a portable electric vehicle charger that can carried within the trunk of the vehicle.,"# Portable Buck Converter Battery Electric Vehicle Charger: BCEVC
# By: Amr Marey and Ahsan Elahi
![test](https://user-images.githubusercontent.com/59986679/163715033-5a75aae8-a4da-4d4e-928b-eda6562f960e.jpg)

Electric Vehicles (EV) are slowly spreading throughout the market. However, there are still some challenges regarding EVs. If an EV were to run out of charge and there are no nearby charging stations, one might considering towing the car to the nearby charging station for recharging similar to what would be done for an internal combustion car. Instead, we propose are portable battery EV (BEV) charger that can be carried within the trunk of the battery. This charger referred to as the Portable Buck Converter Battery Electric Vehicle Charger (BCEVC) aims for a quick minor recharging so that the EV driven has enough charge to drive to the nearby charging station. We have created three seperate Simulink models describing the characteristics of the BCEVE in the ""Code"" section. Please check them out.

A buck converter charging circuit is used to charge the BEV through the external portable charging device. The Buck converter operates with a current control mechanism such that the BEV can be charged safely to prevent damage. The current at which the BEV is charging at is 50A, which is a bit higher than usual. However, this is intentionally designed as the user probably wants the BEV to charge very quickly so that he can get to the closest charging station as soon as possible.

The documentation for the models and our contact information is provided in the ""Wiki"" section. Furthermore, please check out our [YouTube video](https://www.youtube.com/watch?v=Y8a-tFFdz80) for further explanation. The next step is to develop a physical prototype of the BCEVC. Please see the ""Discussion"" section if you have any questions or comments regarding the models. 

This project was done for the [MathWorks Excellence in Innovation](https://github.com/mathworks/MathWorks-Excellence-in-Innovation) program, specifically for Project 216 ([Portable Charging System for Electric Vehicles](https://github.com/mathworks/MathWorks-Excellence-in-Innovation/tree/main/projects/Portable%20Charging%20System%20for%20Electric%20Vehicles)). We wish to thank MathWorks for motivating this project and we highly recommend that you check their Excellence in Innovation program for new and creative projects that are very applicable to industry. We also wish to thank MathWorks Senior Research Scientist Roberto G. Valenti ([GitHub](https://github.com/robertogl)) It was an honor participating in the program and we encourage others to enter as well.





",3,3,1,0,renewable-energy,"[battery, control-systems, electric-vehicles, renewable-energy]",00000
1238,cams_radiation_python,GiorgioBalestrieri,N/A,https://github.com/GiorgioBalestrieri/cams_radiation_python,https://api.github.com/repos/GiorgioBalestrieri/cams_radiation_python,Python client for CAMS radiation service.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",3,3,2,0,renewable-energy,"[energy, opendata, pv, pv-systems, renewable-energy]",00000
1239,DASH-EC,dimitri-thomopulos,N/A,https://github.com/dimitri-thomopulos/DASH-EC,https://api.github.com/repos/dimitri-thomopulos/DASH-EC,Data Sharing for Energy Communities (DASH-EC) is a repository for datasets and code resources aimed at studying and supporting the management of Energy Communities (ECs).,"![DASH-EC](https://github.com/dimitri-thomopulos/DASH-EC/assets/62555073/4e0474b4-2ed2-4c1c-8d1e-002d57550357)

Data Sharing for Energy Communities (DASH-EC) is a repository for datasets and code resources aimed at studying and supporting the management of Energy Communities (ECs).

## Contents
- [**Instances**](https://github.com/dimitri-thomopulos/DASH-EC/tree/main/Instances): This folder contains all the available data for the considered case studies
  - [**EC-Pisa-15_4_288**](https://github.com/dimitri-thomopulos/DASH-EC/tree/main/Instances/EC-Pisa-15_4_288): This folder contains a sample dataset demonstrating the data fields and their organization for energy community management.

## Usage
The dataset can be used as a starting point for developing applications, conducting research, or exploring data analysis techniques specific to energy community management. Feel free to utilize the data to gain insights, develop models, or prototype your own solutions.

## Contributing
As the repository currently contains only an example dataset, contributions in the form of feedback, suggestions, or additional datasets related to energy community management are highly welcome. 

## EC format manual
A comprehensive manual outlining the data format will be made available in the near future, providing detailed instructions and information.

## License
The code and instances provided within DASH-EC are freely available for non-commercial use. However, if you choose to utilize them, it is necessary to provide proper attribution and reference.

## Acknowledgements
The research has been carried out in the framework of the project “AUTENS” (Sustainable Energy Autarky), 730 funded by the University of Pisa, Italy (PRA 2020 programme).

##  Contacts
For any questions, concerns, or inquiries regarding this dataset or repository, please reach out to dimitri[dot]thomopulos[at]unipi[dot]it.
",3,3,3,0,renewable-energy,"[data-structures, energy-communities, renewable-energy]",00000
1240,aa-228-final-project,kevinrussellmoy,N/A,https://github.com/kevinrussellmoy/aa-228-final-project,https://api.github.com/repos/kevinrussellmoy/aa-228-final-project,Final Project for AA 228: Decision-Making under Uncertainty: Decision-Making Towards a Multi-Use Framework for Grid-Scale Energy Storage,"# Decision-Making Towards a Multi-Use Framework for Grid-Scale Energy Storage
Final Project for AA 228: Decision-Making under Uncertainty

Abstract: Grid-scale energy storage systems (ESSs) are capable of participating in multiple grid applications, with the potential for multiple value streams for a single system, termed ""value-stacking"". This paper introduces a framework for decision making, using reinforcement learning to analyze the financial advantage of value-stacking grid-scale energy storage, as applied to a single residential home with energy storage. A policy is developed via Q-learning to dispatch the energy storage between two grid applications: time-of-use (TOU) bill reduction and energy arbitrage on locational marginal price (LMP). The performance of the dispatch resulting from this learned policy is then compared to several other dispatch cases: a baseline of no dispatch, a naively-determined dispatch, and the optimal dispatches for TOU and LMP separately. The policy obtained via Q-learning successfully led to the lowest cost, demonstrating the financial advantage of value-stacking.
",3,3,1,0,renewable-energy,"[decision-making-under-uncertainty, economic-dispatch, energy-storage, machine-learning, reinforcement-learning, renewable-energy]",00000
1241,deelea,scribbler00,N/A,https://github.com/scribbler00/deelea,https://api.github.com/repos/scribbler00/deelea,DEepTransfEr LEArning,"# Model Selection, Adaption, and Combination for Deep Transfer Learning through Neural Networks in Renewables


Impressum can be found [here](https://www.uni-kassel.de/uni/index.php?id=372).

Authors: Jens Schreiber and Bernhard Sick

[Supplementary Material](supplementary-material.pdf) contains further details on the experimental setup (i.e., information about data), a list of symbolds, and additional results as well as definitions.


## Project Structure


- `experiments` contains source code to recreate the experiments.
    - `baselines` contains the GBRT baseline.
    - `ensembles` contains scripts to train the target ensembles.
    - `forecasts` contains scripts to create forecasts for plots.
    - `preparation` contains scripts to prepare the data.
    - `representation` contains scripts to train the source models.
    - `target` contains scripts to train the target models.
- `phd` contains all helper sripts.
    


## Execute Experiments


Due to the size of the experiment it has been executed on a compute cluster. Regardless, the experiments can be executed on a PC.

1. Create a python environment with version 3.8.
1. Execute `pip install -R requirements.txt`.
1. Create and start `mongo db`.
1. Adapt `HOSTNAME`, in script you want to start, with mongo db address.
1. Execute `preparation\create_splits.py` (adapt folders beforehand).
1. Execute `preparation\create_processed_data.py` (adapt folders beforehand).
1. Execute, e.g., `baselines\gbrt.py --data_folder DATA_FOLDER --result_folder RESULT_FOLDER --fold_id FOLD_ID -model_architecture STL`

Note, to get help on the parameters of a script just execute `python SCRIPT_NAME --help`
If you are just interested in the utilized models and methods you can directly use the [fastrenewables](https://scribbler00.github.io/fastrenewables/) library.",3,3,2,0,renewable-energy,"[deep-learning, renewable-energy, time-series, transfer-learning]",00000
1242,BlockPro,webanizer,webanizer,https://github.com/webanizer/BlockPro,https://api.github.com/repos/webanizer/BlockPro,Der herkunftssichere Erzeugungsnachweis für erneuerbare Energie,"
<h1 align=""center"">BlockPro</h1>

<p align=""center"">
  <img 
  src=""./images/Consolinno.png""
  raw=true 
  style=""height:200px""
  />
</p>

<p align=""center""> 
  <a href=""https://github.com/webanizer/BlockPro/releases""><img src=""https://img.shields.io/github/package-json/v/webanizer/BlockPro"" /></a>
  <a href=""https://www.linkedin.com/company/webanizer-ag/about/""><img src=""https://img.shields.io/badge/LinkedIn-blue?style=flat&logo=linkedin&labelColor=blue"" /></a>
  <a href=""https://github.com/webanizer/BlockPro/issues""><img src=""https://img.shields.io/github/issues-closed-raw/webanizer/BlockPro"" /></a>
  <a href=""https://www.youtube.com/channel/UChqFCLQ0UfCL9GGgyS0I5oQ""><img src=""https://img.shields.io/youtube/channel/views/UChqFCLQ0UfCL9GGgyS0I5oQ?style=social"" /></a>
  <a href=""https://github.com/webanizer/BlockPro/blob/main/LICENSE.txt""><img src=""https://img.shields.io/npm/l/doichain"" /></a>
</p>

## Table of Contents
- [Background](#background)
- [Install](#install)
- [Usage](#usage)
- [Resources](#resources)
- [Contributing](#contributing)
- [License](#license)

## Background

Im Rahmen des BlockPro Projekts wird ein blockchainbasierter Herkunftsnachweis für erneuerbare Energien entwickelt. Transaktionen zwischen Energieerzeuger und Konsumenten werden manipulations- und revisionssicher in der Doichain gespeichert. Bisher wird Grünstrom auf Kontingentbasis verkauft, wohingegen mit BlockPro genaue Daten für den Peer-to-Peer-Handel erfasst werden. So können Jahresspitzenlasten ausgeglichen und Netznutzungsgebühren eingespart werden. 

## Get Started
1. git clone this repo 
2. run ```npm i``` in root directory
3. run ```docker-compose up``` to start 3 p2plib hosts in the docker environment, an electrumx server and doichain-node only in regtest
4. connect to regtest: ```docker exec -it regtest bash```.
   To create a balance run this in container regtest:
   ```doichain-cli -generate 101```
5. Connect to peer1 ```docker-compose exec peer1 bash```, install: ```npm i -g npm@6.10``` and run ```npm run peer1```
6. Connect to peer2 ```docker-compose exec peer1 bash```, install: ```npm i -g npm@6.10``` and run ```npm run peer2```
7. Ionnect to peer3 ```docker-compose exec peer3 bash```, install: ```npm i -g npm@6.10``` and run ```npm run peer3```
8. In container regtest create a new block to trigger new game for the peers with: ```doichain-cli -generate 1```
9. If needed configure requestInterval in settings.json to change the interval time in seconds in which meter data is collected 
10. If encountering electrumx error connecting to (doichain) daemon: In regtest container try: ```doichaind --reindex```

## Usage 

BlockPro dient dem Herkunfts- und Verbrauchsnachweis von erneuerbarer Energie zwischen Produzenten und Konsumenten (Prosumenten).
Über das Second-Layer Modell werden im Konsens Prosumenten ausgewählt, die die gesammelten Zählerstände aller peers in die Doichain schreiben und hierfür ein Bounty erhalten. 

<p align=""center"">
  <img
  src=""./images/Activity Diagram Libp2p.jpg""
  raw=true
  alt=""Aktivitätsdiagramm zum Peer2Peer Demoprotokoll""
  style=""margin-right: 10px; width: 600px""
  />
</p>


## Resources
1. Serial Port npm package for reading meter data https://www.npmjs.com/package/serialport
2. Bitcoinjs-lib used for doichainjs-lib
   https://github.com/bitcoinjs/bitcoinjs-lib 
3. p2p lib used in 2nd Layer model 
   https://github.com/libp2p/js-libp2p

## Contributing

<a href=""https://github.com/webanizer/BlockPro/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=webanizer/BlockPro"" />
</a>


Small note: If editing the Readme, please conform to the [![standard-readme compliant](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme) specification.

## License

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

[MIT © 2021 Webanizer AG.](./LICENSE.txt)


<!-- MARKDOWN LINKS & IMAGES -->
<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->
[version-shield]: https://img.shields.io/github/package-json/v/webanizer/BlockPro
[version-url]: https://github.com/webanizer/BlockPro/releases
[contributors-shield]: https://img.shields.io/github/contributors/othneildrew/Best-README-Template.svg?style=for-the-badge
[contributors-url]: https://github.com/webanizer/BlockPro/graphs/contributors
[commits-shield]: https://img.shields.io/github/commit-activity/m/webanizer/BlockPro
[commits-url]: https://github.com/webanizer/BlockPro/commits/main
[stars-shield]: https://img.shields.io/github/stars/webanizer/BlockPro?style=social
[stars-url]: https://github.com/webanizer/BlockPro/stargazers
[issues-shield]: https://img.shields.io/github/issues-closed-raw/webanizer/BlockPro
[issues-url]: https://github.com/webanizer/BlockPro/issues
[license-shield]: https://img.shields.io/npm/l/doichain
[license-url]: https://github.com/webanizer/BlockPro/blob/main/LICENSE.txt
[linkedin-shield]: https://img.shields.io/badge/LinkedIn-blue?style=flat&logo=linkedin&labelColor=blue
[linkedin-url]: https://www.linkedin.com/company/webanizer-ag/about/
[youtube-shield]: https://img.shields.io/youtube/channel/views/UChqFCLQ0UfCL9GGgyS0I5oQ?style=social
[youtube-url]: https://www.youtube.com/channel/UChqFCLQ0UfCL9GGgyS0I5oQ
[twitter-shield]: https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Ftwitter.com%2Fdoichain
[twitter-url]: https://twitter.com/doichain
",3,3,2,16,renewable-energy,"[2nd-layer, bitcoinjs-lib, blockchain, blockchain-technology, crypto, ipfs, js-ipfs, libp2p, libp2p-pubsub, nodejs, p2p-library, p2p-network, pubsub, renewable-energy]",00000
1243,Net-Zero,MichaelCaditz,N/A,https://github.com/MichaelCaditz/Net-Zero,https://api.github.com/repos/MichaelCaditz/Net-Zero,"Windows desktop (WPF) program for PV plant design and metrics.  Originated as my thesis project for MS-EM at NYIT, Vancouver. C# VS.net. MSSQL 2017 DB.  I am now making this open source. Plenty of additional work to do. This is too large of a project for one programmer (me).  I am hoping that additional developers will find value here and join in. I have not yet implemented a method for front-end installation.","# Net-Zero
Windows desktop (WPF) program for off-grid PV plant sizing and metrics, residential or commercial, with storage.  Thesis project for MS-EM at NYIT, Vancouver. C# VS.net. MSSQL 2017 DB.  I am now making this open source.

Background: I am part of the anti-cloud resistance! I support hose who prefer their proprietary data to be hosted on local machines!

Windows desktop client/server

Platform specifications:
C# 
Visual Studio 2019
WPF
DevExpress WPF controls v18.1
MSSQL 2017 Database
Visual Studio database project

What does this software do?

Unique workflow: Workflow starts with determining power demand. User then specifies geographic coordianates of PV plant, a tracking system, and a proposed sun-hour insolation value (obtained from TMY files imported by user, or optionally, monthly averages pre-loaded in database), and the number of days of auto9nomy desired. Net-Zero then calculates the rated PV capacity required, and also the rated battery storage capacity.

User can then chart the conequences of the chosen parameters vis a vis meeting the energy deman, What-if scenarios can be created to consider other tracking systems or assumed insolation values.

Once user identifies rated PV power and batter capacity required, then those values could be input to SAM, or other software to build a system.

Estimates demand from list of appliances.
User selects geographical location of PV plant.
User selects tracking system from fixed, various types of one-axis tracking, or two-axis tracking. User can specify collector tilt angle.
Optional import of TMY file.
Displays expected daily or monthly insolation for selected geographical location, either from monthly averages or daily TMY data.
User selects sun-hours on which to size system.
Recommends total rated power of PV based on demand versus chosen sun-hours.
User chooses desired days of autonomy (how long energy demand can be met from storage with no energy input from PV).
Recommends rated battery storage capacity based on demand, PV power, and days of autonomy.
Calculates and charts energy balance (demand versus energy provided).
Estimates greenhouse emission savings of project.
Displays topographic map of chosen geographic PV location.

The program performs multiple calculations related to the solar resource at a chosen geographical location, and energy balance, i.e., the abilty of a chosen system to accomodate the energy demand of the population.

Partial list of calculations performed, either hourly or daily for a chosen time span,  chosen latitude and longitude, chosen tracking system (fixed at n altitude; single-axis tracking HNS, HEW, PNS or VERT; or 2-axis), specified demand, chosen rated PV kW, chosen rated storage battery capacity kWh:

* solar datetime
* numerical day of year
* hour angle
* civil time
* solar declination
* solar altitude
* solar azimuth
* air mass ratio
* expected insolation from TMY file
* actial PV tilt
* optimal PV tilt
* tilt error
* actual PV azimuth
* optimal PV azimuth
* azimuth error
* required PV kW
* PV kW deficiency (or surplus)
* chosen PV kW would accomodate . . .  kWh demand
* surplus or deficit energy supplied
* percent of demand supplied
* cumulative battery energy loss over time period
* battery remaining kWh
* battery remaining percent
* battery hours remaining
* solar angle of incidence
* clear sky beam normal to collector
* emperical beam (from TMY) normal to collector
* clear sky beam on horizontal collector
* clear sky diffuse radiation on horizontal collector
* emperical diffuse radiation (from TMY) radiation on horizontal collector
* clear sky reflected radiation 
* emperical reflected radiation (from TMY) 

* what-if scenarios of above data, using each of the other tracking systems
* various charts displaying selected data from above

The accuracy of the above calculations has been tested in an academic research environment. References are available upon request. The calculations are made in code using T-SQL trigonometric functions.

Does much more . . . to be continued . . . .

Limitations:

Uses outdated version of DevExpress controls. I don't have budget for subscription renewal at the moment.
Uses MSSQL bulk insert (for TMY file import) which is not permitted by many commercial MSSQL hosing services, such as Winhost. 

Screenshots:
https://www.thirdtransition.media/Net-Zero-Gallery/Net-Zero



",2,2,1,3,renewable-energy,"[battery-storage, carbon-emissions, climate-change, energy, pv, renewable-energy, solar, sustainability]",00000
1244,opennem-display,LukePrior,N/A,N/A,https://api.github.com/repos/LukePrior/opennem-display,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D9:47EA:269B209:4F4DC53:65224012.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1245,Dual-Axis-Solar-Tracker,Rushik2900,N/A,https://github.com/Rushik2900/Dual-Axis-Solar-Tracker,https://api.github.com/repos/Rushik2900/Dual-Axis-Solar-Tracker,Automated dual axis Photo-Voltaic(PV) panel (Solar Panel) rotation to achieve maximum surface area exposure to sunlight. This will optimize solar power generation with 30%-50% improvement in efficiency over fixed panel installations.,# Dual-Axis-Solar-Tracker,2,2,1,0,renewable-energy,"[renewable-energy, solar-energy, solar-tracker, solar-tracking, solar-tracking-panels]",00000
1246,Energy-Management-System-for-Hybrid-Microgrid,MFHChehade,N/A,https://github.com/MFHChehade/Energy-Management-System-for-Hybrid-Microgrid,https://api.github.com/repos/MFHChehade/Energy-Management-System-for-Hybrid-Microgrid,"This work develops a simple energy management algorithm for a residential hybrid system consisting of PV, battery storage, unreliable grid and a diesel generator.","# Energy-Management-System-for-Hybrid-Microgrid
This work develops a simple energy management algorithm for a residential hybrid system consisting of PV, battery storage, unreliable grid and a diesel generator.

The work constructs this algorithm from scratch using the basic equations that govern the operation of the different components of the system.

- The work proposes a model for the unreliable utility grid in Lebanon.
- The project uses an HDKR model to compute the solar radiation. 
- The algorithm prioritizes the most economical available sources.
- The system takes into consideration battery health and charging/discharging times. 
- The system ensures minimal use of diesel generators and completely eliminates their contribution during some days of the summer.

## Steps
- Run the ""EDL.ipynb"" Jupyter notebook. This program models the grid availability for the case of Lebanon. It stores the output in a spreadsheet that is named ""EDL.csv"", which will be used by the algorithm.
- Run the ""Irradiance_Calculation.m"" MATLAB file. This file imports the ""radiation_slope_surface.m"" file and calculates the solar irradiance from multiple parameters that include panel coordinates using the HDKR model. These parameters are found in the spreadsheet ""radiation_data.csv"". The calculated irradiance will be stored in the spreadsheet ""solar_irradiance.csv"". 
- Run the ""EMS Algorithm.mlx"" MATLAB Live Script. This algorithm uses the provided files ""Temperature.csv"" and ""Load.csv"" as well as the files created in the previous steps ""EDL.csv"" and ""solar_irradiance.csv"". It finds the best contribution of each resource in the system to the load demand.
- Additionaly, run the ""Sensitivity Analysis for Battery-Diesel Trade-off.mlx"" MATLAB Live Script. This program is very similar to the algorithm file above, but in this case, multiple runs of the algorithm are performed, each time varying the size of batteries and observing the effect of this variation on the contribution of the diesel generator to the system. The result plot is found at the end of the script, where the trade-off between the size of the battery and the contribution of diesel is apparent. This could be a good method to determine the best size of the battery, by choosing to operate at the knee of the plotted curve. However, it should be noted that the aim of this work is not to determine the best sizing for the system components but to find the best coordination between the resources of sizes already given. 

## Report and Presentation
Kindly also find a report on the matter in ""Report.pdf"" and a presentation file in ""Presentation.pdf"". 
",2,2,1,0,renewable-energy,"[energy-management-system, energy-system, renewable-energy]",00000
1247,RBG,Ircbarros,N/A,https://github.com/Ircbarros/RBG,https://api.github.com/repos/Ircbarros/RBG,An Autonomous Mobile Robot Applied to Solar Panels Cleaning,"# An Autonomous Mobile Robot Applied to Solar Panel Cleaning

Work developed to obtain the Diploma of Electrical Engineer (B. Eng. Degree) at the Universidade Federal do Semi-Árido (UFERSA).
The work was used to attempt and [init a Startup](https://www.youtube.com/watch?v=q8fqeE2K3xI), being approved in the initial processes of some accelerators (Baita, Tech Stars, ENEL Open Innovability).
The video of the robot working on a solar panel can be seen [here](https://youtu.be/CHU0mq67Dy4).
",2,2,2,0,renewable-energy,"[renewable-energy, robotics]",00000
1248,Big_Data_Renewable_energies,obrunet,N/A,https://github.com/obrunet/Big_Data_Renewable_energies,https://api.github.com/repos/obrunet/Big_Data_Renewable_energies,"Projet Big Data - frameworks / écosystèmes HADOOP & SPARK - But : comprendre les évolutions des énergies renouvelables, prédire les rendements énergétiques d'installations photovoltaiques & éoliennes","## La data au service de la transition énergétique - cas particuliers des énergies solaire et éolienne

## Contexte

La transition énergétique est un enjeu stratégique et toujours d’actualité : Comment passer d’une énergie fossile à une énergie dite renouvelable, d’une production centralisée à un système décentralisé afin de répondre à la nécessité d’un développement durable et responsable d’un point de vue écologique ? 

Les énergies renouvelables proviennent de phénomènes naturels et sont des sources d'énergie dont le renouvellement naturel est assez rapide pour qu'elles puissent être considérées comme inépuisables à l'échelle du temps humain.

Au cours de ce projet, nous allons nous intéresser plus particulièrement à l’éolien et au solaire : dans quelle mesure le big data peut-il permettre de donner un éclaircissement sur cette problématique énergétique ?

![Alt text](https://github.com/obrunet/Big_Data_Renewable_energies/blob/master/banner.png)

Les slides de présentation sont consultables [ici](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/20200109_presentation.pdf)

## Objectifs / Use cases :

Finalités de cette étude :

-	Analyser la part des EnR et leurs évolutions dans le temps selon les zones géographiques (Monde / Europe / France).

-	Quelle périodicité retrouve-t-on d’une année sur l’autre dans les performances des stations éoliennes et solaires (jour / nuit, saisons ?)

-	Peut-on prédire dans le temps la performance énergétique des installations existantes ou futures. Quelle est l’indice de confiance ou la précision de ces prédictions ? Ces paramètres peuvent ils être suffisamment fiables si l’on devait envisager la création de nouvelles éoliennes ou de nouveaux panneaux solaires ?


## Déroulé du projet / grandes phases : 

-	00.[Informations générales & organisation](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/00_infos_organisation) :
	- fiche projet : contexte, use cases & perspectives
	- commandes shell et préconisations pour le travail d'équipe

-	01.[Recherche des données](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/01_datasets) : 
	- [The Information System for the European Strategic Energy Technology SETIS](https://setis.ec.europa.eu/)
	- [Open Power System Data](https://open-power-system-data.org/)
	- [European Climate Assessment & Dataset](https://www.ecad.eu/)
	- [World Bank Open Data](https://data.worldbank.org/)
	- [Our World in Data](https://ourworldindata.org/)

-	02.[Constitution du datalake](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/02_datalake) - ingestion & préparation des données :
	- Nettoyage ""grande masse"" des jeux de données
	- Selection des data les plus pertinents
	- Enrichissement : scraping et croissement de données

-	03.[Creation d'une db NoSQL](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/03_NoSql) & première analyse :
	- conversion en HBASE
	- premières requêtes pour avoir une vue macro des données


-	04.[Analyse de la data](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/04_data_analysis) :
	- Analyse la part des EnR et leurs évolutions dans le temps selon les zones géographiques
	- Analyse exploratoire des données de rendements des installations solaires et éoliennes

-	05.[Modèle prédictif de machine learning avec Spark](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/05_machine_learning)
    - Nettoyage (valeurs aberrantes, manquantes)
    - Corrélation entre features
    - Entrainement de différents modèles de machine learning (notamment de deep learning)

-	06.[Présentation des résultats](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/06_resultats) :
    -	Comparaison des prédictions aux valeurs réelles
    -	Graphiques de visualisations des différents objectifs

-	[Perspectives (optionnel)](https://github.com/obrunet/Big_Data_Renewable_energies/tree/master/07_perspectives) :
    -	Ingestion d’un flux de données sur la base de data plus récentes pour les futures prédictions
    -	Traitement de ce flux
",2,2,0,0,renewable-energy,"[big-data, data-analysis, data-science, data-visualization, hadoop, renewable-energy, spark]",00000
1249,eflows,cvmartin,N/A,https://github.com/cvmartin/eflows,https://api.github.com/repos/cvmartin/eflows,Energy Systems Simulation and Steering,"
<!-- README.md is generated from README.Rmd. Please edit that file -->

# eflows <img src=""man/figures/eflowsicon.png"" align=""right"" width=""140"" />

## Overview

eflows is a toolbox for predicting the energy flows between the
different elements of an energy system, including renewable energies,
stationary batteries and electric vehicles. In addition, the same
functions involved in the simulation can be reused to do real-time
steering of the energy system.

## Installation

``` r
devtools::install_github(""cvmartin/eflows"")
```

## Showcase

A shiny app showcasing user cases of eflows is deployed
[here](https://cvmartin.shinyapps.io/eflows/).
",2,2,0,0,renewable-energy,"[electric-vehicles, energy-data, energy-system, renewable-energy]",00000
1250,master-thesis,hclpush,N/A,https://github.com/hclpush/master-thesis,https://api.github.com/repos/hclpush/master-thesis,Research on the size relationship between intraday prices and imbalance prices on the UK electricity wholesale market using time-series data,# master-thesis,2,2,1,0,renewable-energy,"[energy, logistic-regression, random-forest, renewable-energy, time-series-classification, time-series-forecasting, time-series-prediction]",00000
1251,green-k8s-scheduler,7imo,N/A,https://github.com/7imo/green-k8s-scheduler,https://api.github.com/repos/7imo/green-k8s-scheduler,Master project: A Kubernetes scheduler extender that takes renewable energy availability at nodes in a cluster into account. It relies on renewable data in node annotations provided by the green-k8s-energy-management simulation and Kubernetes metrics server.,"## K8s Cluster Setup 
#### kops Kubernetes Cluster Setup on Amazon Web Services according to https://kops.sigs.k8s.io/getting_started/aws/ #####

##### Install prerequisites for local machine
```
curl -LO https://github.com/kubernetes/kops/releases/download/v1.21.0/kops-darwin-amd64
chmod +x kops-darwin-amd64
sudo mv kops-darwin-amd64 /usr/local/bin/kops
brew install kubernetes-cli
pip install awscli
```

#####  Set up AWS according to https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/setting-up.html

#####  install Go according to https://golang.org/doc/install

#####  verify Go installation
```
go version 
```

#####  install aws SDK for Go 
```
go get -u github.com/aws/aws-sdk-go/...
```

#####  aws cli config
```
nano .aws/credentials
export AWS_REGION=us-east-1
```

#####  create kops user
```
aws iam create-group --group-name kops

aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops

aws iam create-user --user-name kops

aws iam add-user-to-group --user-name kops --group-name kops

aws iam create-access-key --user-name kops
```


#####  configure the aws client to use the kops user
```
aws configure           
aws iam list-users

export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
```

#####  create S3 bucket to store cluster state
``` 
aws s3api create-bucket \
    --bucket greenk8s-ha-state-store \
    --region us-east-1

aws s3api put-bucket-versioning --bucket greenk8s-ha-state-store  --versioning-configuration Status=Enabled
aws s3api put-bucket-encryption --bucket greenk8s-ha-state-store --server-side-encryption-configuration '{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}'
```

#####  define availability zones
```
aws ec2 describe-availability-zones --region us-east-1
```

#####  create key pair
```
aws ec2 create-key-pair --key-name greenkey --query ""KeyMaterial"" --output text > greenkey.pem
chmod 400 greenkey.pem
```

#####  set env variables for the cluster (once the previous steps are done, restart from here)
```
export NAME=ha.greenk8s.com
export KOPS_STATE_STORE=s3://greenk8s-ha-state-store
```

#####  create cluster
```
kops create cluster \
    --node-count=4 \
    --master-count=1 \
    --master-size=t2.medium \
    --node-size=t2.small \
    --zones=us-east-1a,us-east-1b,us-east-1c,us-east-1d \
    --cloud-labels=""purpose=thesis"" \
    ${NAME}
```

##### start cluster
```
kops update cluster --name ${NAME} --yes --admin
```

#####  check if everything is working
```
kops validate cluster 
kubectl get nodes
```

#####  test ssh into master node (in Case connection fails: https://www.thegeekdiary.com/how-to-fix-the-error-host-key-verification-failed/)
```
ssh -i ~/.ssh/id_rsa ubuntu@api.ha.greenk8s.com
kube-scheduler config: /etc/kubernetes/manifests
kube-scheduler logs: /var/log/kube-scheduler.log
sudo grep -i 'score' kube-scheduler.log
```

#####  check nodes and pods
``` 
kubectl get nodes -o wide
```

#####  run metrics-server (needed to get CPU utilization)
```
kubectl apply -f manifests/metrics-server.yaml
kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes
kubectl top nodes
```

#####  delete cluster
```
kops delete cluster --name ${NAME} --yes
```

#####  Troubleshooting 
For kubectl error: You must be logged in to the server (Unauthorized) set state store env variable and export kubecfg:
```
kops export kubecfg --admin 
```

## Deploy Scheduler Extension

#####  Build Docker Image:
```
export IMAGE=timokraus/green-k8s-scheduler:latest
docker build . -t ""${IMAGE}""
docker push ""${IMAGE}""
```

#####  Run extender image
```
kubectl apply -f manifests/scheduler.yaml
```

#####  Check if pod was created:
```
kubectl get pods --all-namespaces 
kubectl get pods -n kube-system
```

#####  Stream Logs for troubleshooting:
```
kubectl -n kube-system logs deploy/green-k8s-scheduler -c green-k8s-scheduler-extender-ctr -f

kubectl -n kube-system logs deploy/green-k8s-scheduler -c green-k8s-scheduler-ctr -f > scheduler.log
```

#####  Deploy test pods:
```
kubectl apply -f manifests/deployment.yaml
```",2,2,1,0,renewable-energy,"[kube-scheduler, kubernetes, renewable-energy, scheduler-extender]",00000
1252,EnergyProject,GabrieleGhisleni,N/A,https://github.com/GabrieleGhisleni/EnergyProject,https://api.github.com/repos/GabrieleGhisleni/EnergyProject,UniTN BDT Project 2021-22. Building a system capable of predicting renewable energy production and power imbalances on the Italian grid.,"# Energy Project - Big Data Technologies

[![Build Status](https://travis-ci.org/joemccann/dillinger.svg?branch=master)](https://travis-ci.org/joemccann/dillinger)
[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/dwyl/esta/issues)
[![JavaScript Style Guide: Good Parts](https://img.shields.io/badge/code%20style-goodparts-brightgreen.svg?style=flat)](https://github.com/dwyl/goodparts ""JavaScript The Good Parts"")

[Create Issue -](https://github.com/GabrieleGhisleni/EnergyProject/issues/new)
[Fork](https://github.com/GabrieleGhisleni/EnergyProject/fork)

The goal of this project is to predict the quantity of energy (from renewable sources) that can be produced in an hour and in a day in 
Italy. The code is available in this [Git repository], where you can also find the [Docker Image]. 

We stress the fact
that the application is meant to be run by using the mentioned 
Docker image, and the following file focuses on explaining how.

### Table of Contents

| Argument | Description |
| --------------|---------------|
| [How to run the application](#how-to-run-the-application) | Description of how to run the application using our DBs and brokers.|
| [Change the services](#change-the-services) | Guide for switching from our DBs and brokers to yours.|  
| [Arguments available](#arguments-available) | Brief description of the arguments that can be passed to the docker-compose.yml|

### Index

 1. [How to run the application](#how-to-run-the-application)  
    1.1 [Directory structure](#directory-structure)   
    1.2 [Docker-compose.yml](#docker-composeyml)        
    1.3 [Environmental variables](#environmental-variables)   
    1.4 [First deployment](#first-deployment)
2. [Change services](#change-the-services)  
   2.1 [Change MySql Database](#change-mysql-database)       
            2.1.1 [Transfer service](#transfer-service)   
   2.2 [Pass files from Terna to MySql](#upload-new-data-from-terna-download-center)    
   2.3 [Change Mqtt Broker](#change-mqtt-broker)  
   2.4 [Train models service](#train-models)  
   2.5 [OpenWeather key](#openWeather-secret-api-keys)  
3. [Parameters available](#parameters-available)     
    3.1 [Services based on mqtt_managers.py](#services-based-on-mqtt_managerspy)  
    3.2 [Services based on models_manager.py](#services-based-on-models_managerpy)  
    3.3 [Services based on meteo_managers.py](#services-based-on-meteo_managerspy)     
            3.1.1 [External files from Terna](#pass-external-file-from-terna)    
    3.4 [Services based on meteo_collector.py](#services-based-on-meteo_collectorpy)   
 

<br/><br/>

In the first paragraph we will show how to run the application for the very first time using our DBs and our 
mosquitto broker, in the second one we will explain how to detach our services and replace them with yours 
(in particular your mysql DB). Lastly, we will illustrate the arguments that can be passed to the scripts.
## How to run the application

> First, we will show how to run the application using the services we defined, such as our Amazon RDS MySql database 
 and our AWS IoT-Core broker, which are both hosted on Amazon AWS. 
**Then we will explain how to change those services and replace them with yours.**

It is required a basic understanding of how to use [docker]. 
In any case, the first step would be pulling the [Docker Image] attached to this github page. To do so, run the following command:

```sh
docker pull docker.pkg.github.com/gabrieleghisleni/energyproject/energy:latest
```

### Directory structure
We suggest creating a fresh directory where the following structure should be replicated:

```
## Directory's tree
FreshFolder
|-- docker-compose.yml
|-- extra-services.yml
|-- energy.env
|-- Volumes
|   |-- django
|   |-- mysql
|   |-- redis 
|   |-- extra_files
|   |   |-- load
|   |   |-- energy
|   |-- mosquitto
|   |   |-- config
|   |   |      |-- mosquitto.conf
```

The following command in Windows replicates that directories structure.
>`mkdir energy\Volumes\django && mkdir energy\Volumes\mysql 
 && mkdir energy\Volumes\redis && mkdir energy\Volumes\mosquitto\config &&  
 mkdir energy\Volumes\extra_files\load && mkdir energy\Volumes\extra_files\energy`

This command creates the empty files (in Windows):

> `cd energy && echo > docker-compose.yml && echo > extra-services.yml && echo > energy.env && echo > Volumes\mosquitto\config\mosquitto.conf
 `

If you are using a different operating system that does not support these commands follow 
these steps:

 1. Create an empty folder.
 2. Create, inside this folder, a docker-compose.yml, a extra-services.yml and an energy.env file.
 3. Create a sub-directory called ""Volumes"" with four more sub-directories: 
    ""mosquitto"", ""mysql"", ""django"", ""redis"",  and let those empty.
 4. Create a sub-directory inside 'Volumes' called 'extra_files' with two empty folder inside:
    'energy' and 'load'.
 5. Create a file called mosquitto.conf in the mosquitto/config folder. Then paste the following lines inside this mosquitto.conf file (you can also find the 
    [mosquitto.conf] here):
    
```sh
## mosquitto.conf
allow_anonymous true
listener 1883
persistence true
persistence_location /mosquitto/data/
retain_available true
```


#### Docker-compose.yml
To run the code with our services it is necessary to now create the [docker-compose.yml] as follows:

```sh
## docker-compose.yml
version: '3.9'
services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
    - '6379:6379'
    volumes:
    - ./Volumes/redis:/data
    logging:
        driver: none
  mqtt:
    image: eclipse-mosquitto
    container_name: mqtt
    volumes:
    - ./Volumes/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
    - ""1883:1883""
    logging:
        driver: none
  mysql:
    image: mysql:latest
    container_name: mysql
    volumes:
    - ./Volumes/mysql:/var/lib/mysql
    env_file:
      - energy.env
    ports:
    - 3307:3306
    logging:
        driver: none
  # Web App
  web_app:
    image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy:latest
    tty: false
    command: bash -c ""python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000""
    container_name: energyDjango
    env_file:
      - energy.env
    depends_on:
      - redis
      - mysql
    ports:
    - ""8000:8000""
    volumes:
    - ./Volumes/django:/src/Volumes/django


  # Services based on mqtt_managers
  load_receiver:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy
      container_name: load_receiver
      command:  bash -c ""python -u Code/mqtt_manager.py --broker aws --topic load""
      depends_on:
        - redis
        - mqtt
        - mysql
      env_file:
        - energy.env

  forecast_meteo_receiver:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy
      container_name:  forecast_meteo_receiver
      command: bash -c ""python -u Code/mqtt_manager.py --broker aws --topic forecast""
      depends_on:
        - redis
        - mqtt
        - mysql
      env_file:
        - energy.env

  energy_receiver:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy
      container_name: energy_receiver
      command:  bash -c ""python -u Code/mqtt_manager.py --broker aws --topic energy""
      depends_on:
        - redis
        - mqtt
        - mysql
        - forecast_meteo_receiver
      env_file:
        - energy.env

  thermal_receiver:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy
      container_name: thermal_receiver
      command:  bash -c ""python -u Code/mqtt_manager.py --broker aws --topic hydro_thermal""
      depends_on:
        - redis
        - mqtt
        - mysql
        - energy_receiver
      env_file:
        - energy.env

  storico_receiver:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy
      container_name: storico_receiver
      command:  bash -c ""python -u Code/mqtt_manager.py --broker aws --topic storico""
      env_file:
        - energy.env
      depends_on:
        - redis
        - mqtt
        - mysql

  # meteo_collect based
  forecast_meteo_sender:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy
      container_name: forecast_meteo_sender
      command:  bash -c ""sleep 5 && python Code/meteo_collector.py --broker aws""
      depends_on:
        - forecast_meteo_receiver
        - mqtt
      env_file:
        - energy.env

  # models_manager based
  load_sender:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy
      container_name: load_sender
      command:  bash -c ""sleep 5 && python Code/models_manager.py --broker aws --sendload""
      depends_on:
        - load_receiver
        - mqtt
      env_file:
        - energy.env

  # meteo_managers based
  storico_sender:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy
      container_name: storico_sender
      command: bash -c ""sleep 5 && python Code/meteo_managers.py --broker aws --storico""
      depends_on:
        - storico_receiver
        - mqtt
      env_file:
        - energy.env
```

We set the logs of mysql, mqtt, redis and django to none so to avoid display those messages and be able to follow
the messages from the scripts. Anyway if you want to see those just remove `logging: driver: none` in the [docker-compose.yml].

#### Environmental variables

The last step to make is creating the energy.env file containing all passwords and environmental variables that are 
passed to the code.  

As mentioned, it is always possible to change passwords and variables according to your services (e.g. to use your own databases).
Later on it can be found the exact procedure to follow to achieve that.

**All of these passwords are deprecated, in particular none of the following service is longer available.
Follow first the section [Change services](#change-the-services), in particular change MySQL Database, MQTT broker and OpenWeather Key, and then run the application.**

```sh
## energy.conf

# mysql_service
MYSQL_HOST=#deprecated follow the next section to change the services
MYSQL_USER=#deprecated follow the next section to change the services
MYSQL_PASSWORD=#deprecated follow the next section to change the services
MYSQL_DATABASE=#deprecated follow the next section to change the services
MYSQL_ROOT_PASSWORD=#deprecated follow the next section to change the services

# redis_service
REDIS_HOST=redis

# mqtt_service
MQTT_HOST_LOCAL=mqtt
MQTT_HOST=#deprecated follow the next section to change the services
CA_ROOT_CERT_FILE=#deprecated follow the next section to change the services
THING_CERT_FILE=#deprecated follow the next section to change the services
THING_PRIVATE_KEY=#deprecated follow the next section to change the services

# django and openweathermap
OPEN_WEATHER_APPID =#deprecated follow the next section to change the services
SECRET_KEY_ENERGY=""django-insecure-3@f4136pszq%m3ljx=1!$8h)$71(496%i=_g-xb2+mhyk6+w!w""
PYTHONPATH=/src/
NEWS_RATE='8,20' #now if you want to send the email when the app
```

#### First deployment
Now the application can be run for the very first time! Open the CLI of your PC and go to the folder that was just 
created. Once you are there, type the following command:

C:\..\your_fresh_directory> `docker-compose up`

Follow the printing statement and click on the hyperlink displayed at the end!
When the process is done you will see this:

![Image](../master/Display/media/Done.JPG)

Clink on the hyperlink:

> Done! - Check the data on  http://127.0.0.1:8000/today-prediction/

This link will open your browser directly to your localhost where you'd find the application running! 
Various functionalities are available, such as today or tomorrow predictions, the browsable API (the description of how 
to use it is in that same page) and the rest of the application:

![Image](../master/Display/media/readme_app.png)


## Change the services

###  Change MySql Database

To change the mysql DB you have to modify the mysql service in the [docker-compose.yml] and the energy.env file as follows. 
You would need to insert into the brackets `< >` the data that you want to use as well 
and then remove also the `< >` e.g `MYSQL_USER=user`.

**Make sure that the folder ""mysql"" is still empty. If that's not the case, delete all the elements before starting 
this procedure. If any problem comes up while deleting, that might be due to the previous mysql instance container still running. 
If so, stop and remove it, then retry.**

```shell
## docker-compose.yml
# mysql_service
  mysql: # <- same to specify inside .env as MYSQL_HOST
    image: mysql:latest
    container_name: mysql
    volumes:
    - ./Volumes/mysql:/var/lib/mysql
    environment:
    - MYSQL_USER=<your_new_user>  # same to specify inside .env AS MYSQL_USER
    - MYSQL_PASSWORD=<your_new_psw> # same to specify inside .env AS MYSQL_PASSWORD
    - MYSQL_ROOT_PASSWORD=<your_new_psw>  
    - MYSQL_DATABASE=energy
    ports:
    - 3307:3306
```
Before running the script modify also the energy.env file as follows:

```shell
## energy.env
# mysql_service
MYSQL_HOST=mysql # name of the mysql service
MYSQL_USER=<your_new_user> # parameter specified inside .yml
MYSQL_PASSWORD=<your_new_psw>   # parameter specified inside .yml
MYSQL_DATABASE=energy
```

#### Transfer service
**We also provide a service that can be used to create the correct tables inside your fresh database! Doing so, or at least transferring the tables of the database, 
is mandatory.**   

Specifying the argument `--partially_populate` (in the command of the transfer_service)
a part of the data we collected will be transferred to you (also recommended).

We decided to keep these services in a different file. If you have not done it yet, create a new file called 
[extra-services.yml] and insert the following code (remember to update it with your new names and passwords):

```shell
## extra-services.yml 
version: '3.9'
services:
  mysql: # <- same to specify inside .env as MYSQL_HOST
    image: mysql:latest
    container_name: mysql
    volumes:
    - ./Volumes/mysql:/var/lib/mysql
    environment:
    - MYSQL_USER=<your_new_user>  # same to specify inside .env AS MYSQL_USER
    - MYSQL_PASSWORD=<your_new_psw> # same to specify inside .env AS MYSQL_PASSWORD
    - MYSQL_ROOT_PASSWORD=<your_new_psw>
    - MYSQL_DATABASE=energy
    ports:
    - 3307:3306

  transfer_service:
    image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy:latest
    container_name: transfer_service
    command: bash -c ""sleep 45 && python Code/meteo_managers.py --create_tables --partially_populate""
    # we pass sleep 45 because the mysql must be ready so to be reachable from the script
    depends_on:
      - mysql
    env_file:
      - energy.env
```

So you are ready to run the service as:

C:\..\your_fresh_directory> ```docker-compose -f extra-services.yml up transfer_service```

Having done so, you can use all the services with your Dbs.

However, if you do not want to pass new data, remove the argument `--partially_populate` from the command of the transfer_service. 
Run the mysql service alone (the very first time this operation can take around 1 minute to prepare the Volumes) as:

Then, with all Volumes ready, you are able to run: 

C:\..\your_fresh_directory> ```docker-compose up```

In case of connection problems related to the new MySQL DB, try the following command before doing 
the `docker-compose up`:

C:\..\your_fresh_directory> ```docker-compose up -d mysql```



### Upload new data from Terna Download Center

Since the data regarding the overall Load as well as the generation from renewable
energies come from [Terna Download Center], we created a service that allow you to update your dbs with new
data coming from there.  (Have a look here
to check which data you can update and how [Pass external file from Terna](#pass-external-file-from-terna))


If you downloaded new data from the [download center] and you want to pass them to the scripts, you can 
do that in two different ways:

#### 1. Internal path:

Download the files and put them inside the folder Volumes/extra_files. In particular, if those data regard
the load put them inside the 'load' folder. Otherwise, inside the 'energy' folder.

Change the [extra-services.yml] adding this service:
   
```shell
## extra-services.yml
  add_internal_files_to_dbs:
    image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy:latest
    container_name: add_internal_files_to_dbs
    command: bash -c ""python Code/meteo_managers.py --internal_energy_files --internal_load_files""
    volumes:
      - ./Volumes/extra_files/energy:/src/Volumes/extra_files/energy
      - ./Volumes/extra_files/load:/src/Volumes/extra_files/load
    depends_on:
      - mysql
    env_file:
      - energy.env
```
If you passed only energy generation files remove the flag `--internal_load_files`, viceversa if you passed only
load files remove the flag `--internal_energy_files`.    

Then run:
C:\..\your_fresh_directory> ```docker-compose -f extra-services.yml up add_internal_files_to_dbs```

#### 2. External path

If you stored those data somewhere else and you want to pass them to the code, use this service specifying the 
url as a comma separated string (e.g. 'https:myfirstfile.csv,https:mysecondfile.csv, ... ')

```shell
## extra-services.yml
  add_external_files_to_dbs:
    image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy:latest
    container_name: add_external_files_to_dbs
    command: bash -c ""python Code/meteo_managers.py
      --external_load_path  https/direct_link/to_yourload_file.csv, https/secondfile.csv
      --external_generation_path  https/direct_link/you_generation.csv
      ""
    depends_on:
      - mysql
    env_file:
      - energy.env
```

Then run:
C:\..\your_fresh_directory> ```docker-compose -f extra-services.yml up add_external_files_to_dbs```

### Change Mqtt Broker

To be able to do this, **you must have configured the [mosquitto.conf]** file as shown before. It can be observed that we already provide the 
service for mosquitto in the docker-compose. To complete this step you should just change the broker parameter from 
`aws` to `localhost` in all the sections `command` of the [docker-compose.yml] as:

```
  command:  bash -c ""python Code/meteo_collector.py --broker localhost""
```

**Be sure that all the services refer to the same broker.**

### Train models

To re-train the models you will need to add this service and specify which model to train from `[""wind"", ""hydro"", ""load"", 
""thermal"", ""geothermal"", ""biomass"", ""photovoltaic""]`. We also recommend keeping the `--aug` argument.   
**You must have collected some data before doing that, or having done the transfer service**.

In [extra-services.yml] add the following code specifying which model you want to train, or, in case you want 
to retrain them all, leave it as it is:

```shell
# extra-services.yml
  train_models:
      image: docker.pkg.github.com/gabrieleghisleni/energyproject/energy:latest
      container_name: train_models
      command:  bash -c ""python Code/models_manager.py --model_to_train all --aug""
      depends_on:
        - mysql
      env_file:
        - energy.env
```

Run this one service with ```docker-compose -f extra-services.yml up train_models```

Then you have to commit the changes to the image as follows:

1. ``` docker ps -a``` search for the container named ""train_models"" and copy the ID.
2. `docker commit <IDcontainertrain_models> docker.pkg.github.com/gabrieleghisleni/energyproject/energy:latest`

Having done this operation, the new models will be available for other services to use.

### OpenWeather Secret API Keys

Go the [OpenWeather] and follow the instruction to get the free API keys.

## Parameters available

> We now make a brief overview of the
arguments that can be passed to the script through the docker-compose.


###  Services based on __*mqtt_managers.py*__
```
 -b, --broker, default='localhost', choices=['localhost', 'aws']
 -t, --topic, required=True, choices=['forecast', 'energy', 'hydro_thermal', 'load', 'storico']
 -r, --retain, action=store_true
 -ex, --expiration_time, default=24, type=int
```

- `retain` messages is available only while working with localhost!
- `expiration_time` refers to the time the predictions will be available on Redis.
- `broker` is the mqtt broker you connect to.
- `topic` refers to the particular topic to subscribe to.

### Services based on __*models_manager.py*__
```
    -l, --sendload, action=store_true, 
    -b, --broker, default='localhost', choices=['localhost', 'aws'])
    -m, --model_to_train, default=None, choices=['all', ""wind"", ""hydro"", ""load"", ""thermal"", ""geothermal"", ""biomass"", ""photovoltaic""]                 
    -a, --aug, action=store_true
    -r, --rate, default=12, type=int
    -re, --retain, action='store_true'
```

- `sendload` is the principal function of this service, it is mainly used to send the prediction of the Load (2 days on). 
- `broker` is the mqtt broker you connect to.
- `rate` is the frequency of the Sendload expressed in hours.
- `model_to_train` is an argument that can be used to re-train the models 
  (make sure to collect some data before).
- `aug` is related to model_to_train and it's used to introduce some observations regarding the next month so to avoid problems 
(in particular when the month is ending).
- `retain` messages is available only while working with localhost!

### Services based on __*meteo_collector.py*__
```
    -b, --broker, required=True, type=str, choices=['localhost', 'aws'])
    -r, --rate, default=6, type=int
    -re, --retain, action='store_true'
```
- `broker` mqtt you subscribe to.
- `rate` is the frequency at which we send data expressed in hours.
- `retain` messages is available only while working with localhost!

### Services based on __*meteo_managers.py*__
```
    -c, --create_tables, action=store_true
    -p, --partially_populate, action=store_true
    -el, --external_load_path, default=None, type=str
    -eg, --external_generation_path, default=None, type=str
    -ie, --internal_energy_files, action='store_true'
    -il, --internal_load_files, action='store_true'
    -s, --storico, action=store_true
    -r, --rate, default=12, type=int
    -b, --broker, default='localhost', choices=['localhost', 'aws']
    -re, --retain, action='store_true'
```
We built a service allowing users to start their own DBs effectively. This service will create the tables automatically 
as they need to be, transferring there a small amount of the data we collected.

- `create_tables` creates the tables with the correct format in the Dbs.
- `partially_populate` transfers a small amount of data into your new Dbs.  
- `storico` indicates the process of collecting current weather and sending it to the mqtt broker.
- `rate` is the frequency at which we send data expressed in hours.
- `broker` mqtt you subscribe to.
- `retain` messages is available only while working with localhost!

To properly use the following arguments read the documentation at [Pass external file from Terna](#pass-external-file-from-terna).
- `external_load_path` load files saved somewhere else are passed as a comma separated string as `http/drive/load.csv,https/github/load.xlsx` (reference [external path](#2-external-path))
- `external_generation_path` generation files saved somewhere else are passed as before as a comma separated string (reference [external path](#2-external-path))
- `internal_energy_files` follow this procedure (reference [internal path](#1-internal-path)) and add this argument (store true) 
- `internal_load_files` follow this procedure (reference [internal path](#1-internal-path)) and add this argument (store true) 

#### Pass external file from Terna

We also allow passing new files that can be downloaded from [Terna Download Center]. 
First, there are two files that can be updated:

1. to get load data go to `Load -> Total Load`, downloadable as an Excel or a csv.
2. to get generation data, you'll need to collect two different files:
   1.  `Generation -> Energy Balance`, selecting all the possible energies in the field ""type""
         *except for Net Foreign Exchange, Pumping Consumption, Self Consumption*.
   2.  `Generation -> Renewable Generation`, selecting only *Biomass*.
    
The generation data must come together! You can see how they look like at the following links:
- [Load data]
- [Biomass data], [Energy balance data]

[//]: # (These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax)
   [Load data]: <https://github.com/GabrieleGhisleni/EnergyProject/blob/master/Documentation/Files_from_terna/load/load-07-2021.csv>
   [Energy balance data]: <https://github.com/GabrieleGhisleni/EnergyProject/blob/master/Documentation/Files_from_terna/generation/june-18.csv>
   [Biomass data]: <https://github.com/GabrieleGhisleni/EnergyProject/blob/master/Documentation/Files_from_terna/generation/biomass-june-2021.csv>
   [docker]: <https://www.docker.com>
   [Git repository]: <https://github.com/GabrieleGhisleni/EnergyProject>
   [Docker Image]: <https://>
   [mosquitto.conf]: <https://github.com/GabrieleGhisleni/EnergyProject/blob/master/Volumes/mosquitto/config/mosquitto.conf>
   [docker-compose.yml]: <https://github.com/GabrieleGhisleni/EnergyProject/blob/master/docker-compose.yml>
   [Terna Download Center]: <https://www.terna.it/it/sistema-elettrico/transparency-report/download-center>
   [OpenWeather]: <https://openweathermap.org/>
   [extra-services.yml]: <https://github.com/GabrieleGhisleni/EnergyProject/blob/master/extra-services.yml>
   [download center]: <https://www.terna.it/it/sistema-elettrico/transparency-report/download-center>",2,2,2,0,renewable-energy,"[django, docker, imbalances, mqtt, mysql, redis, renewable-energy]",00000
1253,European-Green-Deal-Tracker,dw-data,N/A,N/A,https://api.github.com/repos/dw-data/European-Green-Deal-Tracker,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C174:5831:2B96888:59524B8:65224071.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1254,HA-NationalGrid,JRascagneres,N/A,N/A,https://api.github.com/repos/JRascagneres/HA-NationalGrid,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BA:1560:28D502D:53E5812:65224015.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1255,BUMI,Hadaanallah,Hadaanallah,https://github.com/Hadaanallah/BUMI,https://api.github.com/repos/Hadaanallah/BUMI,"🌳 Sebuat daftar kurasi dari akun, situs web, atau halaman peduli bumi yang tersebar di internet. 🌲 Selamatkan manusia dari perubahan iklim.","<img src=""./assets/logo-bumi.png"" alt=""Logo bumi berlatar perubahan iklim"" height=""150px"">

### Sebuat daftar kurasi dari akun, situs web, atau halaman peduli bumi yang tersebar di internet. Ayo selamatkan manusia dari perubahan iklim.

<p
align=""center"">
  <a  style=""margin-right:8px;text-decoration:""
      href=""https://xn--r1a.link/share/url?url=https%3A%2F%2Fgithub.com%2FHadaanallah%2FBUMI&text=Sebuat%20daftar%20kurasi%20dari%20akun%2C%20situs%20web%2C%20atau%20halaman%20peduli%20bumi%20yang%20tersebar%20di%20internet.%20Ayo%20selamatkan%20manusia%20dari%20perubahan%20iklim.""
      target=""_blank"">
    <img  
        src=""https://img.shields.io/badge/Bagikan%20di%20Telegram-2CA5E0?logo=telegram&color=white""
        alt=""Bagikan di Telegram""
        style=""vertical-align:middle""
        width=""155""
    />
  </a>
  <a  style=""margin-right:8px""
      href=""https://twitter.com/intent/tweet?text=Sebuah%20daftar%20kurasi%20dari%20akun%2C%20situs%20web%2C%20atau%20halaman%20peduli%20bumi%20yang%20tersebar%20di%20internet%2E%20Ayo%20selamatkan%20manusia%20dari%20perubahan%20iklim%2E&url=https://github.com/Hadaanallah/BUMI&hashtags=PerubahanIklim,ClimateChange,Bumi""
      target=""_blank"">
    <img  
        src=""https://img.shields.io/badge/Bagikan%20di%20Twitter-1DA1F2?logo=twitter&color=white""
        alt=""Bagikan di Twitter""
        style=""vertical-align:middle""
        width=""150""
    />
  </a>
</p>

>
> **Catatan** :
>
> - Pada daftar ini tautan ke halaman web berbahasa Indonesia lebih diutamakan jika tersedia, jika tidak tersedia makan dipilih bahasa lain, hal ini berlaku misalnya pada organisasi internasional atau aktivis mancanegara.
> - Jangan ragu untuk kontribusi, saran dan koreksi, baca keterangannya dibagian [*contributing.md*](CONTRIBUTING.md)
>

- **Conservation International Indonesia** - Kami bekerja untuk memastikan planet yang sehat dan produktif bagi kita semua - karena manusia membutuhkan alam untuk berkembang. [Situs Indonesia](https://www.conservation.org/indonesia), [Wikipedia](https://id.wikipedia.org/wiki/Conservation_International), [Facebook](https://www.facebook.com/ConservationInternationalIndonesia), [Twitter](https://twitter.com/conservationID), [Youtube](https://www.youtube.com/c/ConservationInternationalIndonesia), [Instagram](https://www.instagram.com/conservationid/)

- **Diet Kantong Plastik** - Gerakan nasional yang mengajak masyarakat untuk lebih bijak dalam menggunakan kantong plastik dan plastik sekali pakai lainnya. [Situs](http://dietkantongplastik.info/), [Facebook](https://www.facebook.com/DietKantongPlastik), [Twitter](https://twitter.com/idDKP), [Youtube](https://www.youtube.com/user/idDKP), [Instagram](https://www.instagram.com/iddkp/)

- **Greenpeace Indonesia** - Hadir karena bumi yang rapuh ini perlu suara. Butuh solusi. Butuh perubahan. Butuh aksi. [Situs Indonesia](https://www.greenpeace.org/indonesia/), [Wikipedia](https://id.wikipedia.org/wiki/Greenpeace), [Facebook](https://www.facebook.com/GreenpeaceIndonesia/), [Twitter](https://twitter.com/greenpeaceid), [Youtube](https://www.youtube.com/user/GreenpeaceIndonesia), [Instagram](https://www.instagram.com/greenpeaceid/)

- **Greta Thunberg** - Aktivis lingkungan dan iklim berumur 17 tahun dengan Asperger. [Wikipedia](https://id.wikipedia.org/wiki/Greta_Thunberg), [Facebook](https://www.facebook.com/gretathunbergsweden), [Twitter](https://twitter.com/gretathunberg), [Instagram](https://www.instagram.com/gretathunberg/)

- **Hijauku** - Media akar rumput independen yang berdiri pada 2011. Portal hijau pertama di Indonesia yang secara konsisten menyebarkan inspirasi hijau dan solusi ramah lingkungan. [Situs](https://hijauku.com/), [Facebook](https://www.facebook.com/hijaukudotcom), [Twitter](https://twitter.com/Hijaukudotcom), [Instagram](https://www.instagram.com/hijaukudotcom/)

- **Jaringan Advokasi Tambang (JATAM)** - Jaringan organisasi non pemerintah (ornop) dan organisasi komunitas yang memiliki kepedulian terhadap masalah-masalah HAM, gender, lingkungan hidup, masyarakat adat dan isu-isu keadilan sosial dalam industri pertambangan dan migas. [Situs](https://www.jatam.org/), [Facebook](https://www.facebook.com/JaringanAdvokasiTambang/), [Twitter](https://twitter.com/jatamnas), [Youtube](https://www.youtube.com/c/RumahPerlawananJATAM), [Instagram](https://www.instagram.com/jatamnas/)

- **Mongabay Indonesia** - Platform berita ilmu lingkungan dan konservasi nirlaba, dengan lebih dari 500 koresponden di 70 negara. [Situs Indonesia](https://www.mongabay.co.id/), [Wikipedia](https://en.wikipedia.org/wiki/Mongabay), [Facebook](https://www.facebook.com/MongabayIndonesia/), [Twitter](https://twitter.com/mongabayID), [Instagram](https://www.instagram.com/mongabay.id/)

- **Wahana Lingkungan Hidup Indonesia (WALHI)** - Organisasi gerakan lingkungan hidup terbesar di Indonesia, secara aktif mendorong upaya-upaya penyelamatan dan pemulihan lingkungan hidup di Indonesia. [Situs](https://www.walhi.or.id/), [Wikipedia](https://id.wikipedia.org/wiki/Wahana_Lingkungan_Hidup_Indonesia), [Facebook](https://www.facebook.com/WALHI), [Twitter](https://twitter.com/walhinasional), [Youtube](https://www.youtube.com/user/multimediawalhi), [Instagram](https://www.instagram.com/walhi.nasional/)

## Video

- [Sexy Killers](https://www.youtube.com/watch?v=qlB7vg4I-To) - Film dokumenter Indonesia tahun 2019 tentang industri pertambangan batubara yang merusak lingkungan dan hubungannya dengan badan perpolitikan Indonesia.

    ### Daftar Putar & Seri

  - [Ekspedisi Indonesia Biru](https://www.youtube.com/playlist?list=PLpXudXDFSnuqPoc4xnNq2uEM4PkzITNkH) - [Catatan oleh videografer](https://www.facebook.com/notes/dandhy-dwi-laksono/tentang-ekspedisi-indonesia-biru/10153037520116095/)
",2,2,2,4,renewable-energy,"[awesome-list, bumi, carbon-reduction, climate-change, climate-crisis, curated-list, iklim, keberlanjutan, lingkungan-hidup, perubahan-iklim, renewable-energy, sustainability]",00000
1256,kontext,denesdata,denesdata,https://github.com/denesdata/kontext,https://api.github.com/repos/denesdata/kontext,Kontext | My blog on complex systems and datactivism through visualization.,"[<img src=""tsne.png"" alt=""favicon"" height=24 width=24 />  Try something new. Everyday.](http://blog.csaladen.es/)
======
[![Try something new. Everyday.](snapshot.png ""Try something new. Everyday."")](http://blog.csaladen.es/)  
  
__Try something new. Everyday.__ is my foray into data blogging and it is edited on a voluntary basis in my freetime. I try to work on data visualizations  data analyses and data mining and processing tools and methods for contemporary topics revolving around the following pillars:

- energy & politics
- development
- datactivism
- fun, cool toy visualizations
- global visualization interfaces (_exploratoriums_)
- data manipulation mechanics
- my current research work & frustrations (and rarely content) in academia

The blog’s _motto_ is __Science. Development. Datactivism. And everything in between.__

There are a lot of great data visualization blogs out there, some concentrate on the visualization code, others on aesthetics and a lot of them are just for fun. What I’m hoping that it will set Try something new. Everyday. apart form these is that with my visualizations, I strive to create a story with and about the data, but at the same time include a little bit of all of the previous attributes – pay attention that the data I am presenting is scientifically correct, it can be replicated and it looks beautiful. I deal with a variety of topics, but most are linked in some way or another to sustainability and/or development. Most of the times I will try to highlight one particular angle or insight that hasn’t come to surface yet about the studied dataset, and trying to encourage people to look at the data before they believe or act upon something – and when they do look at the data, look behind the front page, try to understand it’s structure and dynamics – and then think again. And in the end I call all of this datactivism.

All of the blog entries, infographics and data visulizations are protected by Creative Commons 3.0 license. Under these terms, feel free to write summaries and embed static images on your site, with credit attribution (Denes Csala, Try something new. Everyday. blog) and a live link to the original post. Please contact me before embedding any of the full text or interactive visualizations.

If you like what you are seeing, please like and share on social media and subscribe to (Follow in WordPress) my blog. If you really like it, please consider a small [donation](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=WHZW4MBHP45KS). I wholeheartedly thank all of you in advance and stay updated for data visualizations, analyses, mining and manipulation methods and infographics to your delight!

# Blog
Visit: http://blog.csaladen.es  

# Description 
https://csaladenes.wordpress.com/about/
   
# Credit
Dénes Csala, 2014  
http://csaladen.es
",2,2,2,0,renewable-energy,"[agent-based-modeling, complex-systems, d3, d3js, d3plus, data, data-mining, data-science, datactivism, energy, energy-transitions, html, human-development, javascript, pandas, python, renewable-energy, system-dynamics, visualisation, visualization]",00000
1257,Predictive-Maintainance,mandeebot,N/A,https://github.com/mandeebot/Predictive-Maintainance,https://api.github.com/repos/mandeebot/Predictive-Maintainance,"This repo attempts to utilise two powerful ensemble models, Random forest and Gradient Boosting to Predict the failure patterns of wind energy machinery","# Predictive-Maintainance
Predictive maintenance using sensor information and analysis methods to measure and predict degradation and future component capability. The idea behind predictive maintenance is that failure patterns are predictable and if component failure can be predicted accurately and the component is replaced before it fails, the costs of operation and maintenance will be much lower.
This repo attempts to utilise two powerful ensemble models, Random forest and Gradient Boosting to Predict the failure patterns of machinery.the data recieved from the sensors are 40,000 observation points fro trainig our model and 10,000 observation points for testing the efficasy of the ensemble models
the Random forest model and boosting gradient models were further tunned using hyperparameter tunning techniques to search for the best model performance parameters, the results were compared and the best model is productionized..
",2,2,2,0,renewable-energy,"[gradient-boosting, machine-learning, predictive-maintenance, random-forest, renewable-energy, sckit-learn]",00000
1258,electrify,toddmedema,N/A,N/A,https://api.github.com/repos/toddmedema/electrify,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15E:38A4:2BAFDF6:59A5755:65224016.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1259,miguel,pdb-94,N/A,https://github.com/pdb-94/miguel,https://api.github.com/repos/pdb-94/miguel,"MiGUEL is an open-source, python-based tool to design, simulate and evaluate PV-Diesel hybrid systems. MiGUEL was created during the project EnerSHelF. The main author is Paul Bohn.","# Micro Grid User Energy Planning Tool Library (MiGUEL)

<p align=""left"">
  <img src=""/documentation/MiGUEL_logo.png"" alt=""drawing"" height=""200""/>
</p>

## Disclaimer 
MiGUEL is continously optimized in terms of handling and outputs. 


## Introduction
MiGUEL is a python-based, open-source simulation tool to design, simulate and evaluate the performance of photovoltaic-diesel-hybrid systems. MiGUEL is based on a matlab tool developed at the Technische Hochschule Köln ([TH Köln](https://www.th-koeln.de/)). In the course of the research project Energy-Self-Sufficiency for Health Facilities in Ghana ([EnerSHelF](https://enershelf.de/)) the matlab tool was transferred to python, revised and additional components were added.  
MiGUEL aims to provide an easy-to-use simulation tool with low entry barriers and comprehensible results. Only a basic knowledge of the programming language is needed to use the tool. For the system design, simulation and evaluation, only a small number of parameters is needed. The simulation can run without data sets provided by the user. 
The results are provided in the form of csv files for each simulation step and in the form of an automatically generated pdf report. The csv files are understood as raw data for further processing. The pdf report serves as a project brochure. Here, the results are presented clearly and graphically, and an economic and ecological evaluation of the system is carried out.

## Table of contents
- [Authors and contributors](#authors-and-contributors)
- [Content and structure](#content-and-structure)
  - [Main](#main)
  - [Environment](#environment)
  - [Operator](#operator)
  - [Evaluation](#evaluation)
  - [Output](#output)
- [Graphical user interface](#graphical-user-interface)
- [Database](#database)
- [Project partners](#project-partners)
- [Dependencies](#dependencies)
- [References](#references)
- [Appendix](#appendix)

## Authors and contributors
The main author is Paul Bohn ([@pdb-94](https://github.com/pdb-94)). Co-author of the project is Silvan Rummeny ([@srummeny](https://github.com/srummeny)) who created the first approach within his PhD. Other contributors are Moritz End ([@moend95](https://github.com/moend95)). Further assistance was provided by Sascha Birk ([@pyosch](https://github.com/Pyosch)). The development of the tool was supervised by Prof. Dr. Schneiders ([TH Köln CIRE](https://www.th-koeln.de/anlagen-energie-und-maschinensysteme/cologne-institute-for-renewable-energy_13385.php)).

## Content and structure
The basic structure of MiGUEL is displayed below. 

<p align=""center"">
  <img src=""/documentation/structure.png"" alt=""drawing"" height=""200""/>
</p>

The class Environment represents the energy system. It takes basic parameters such as time frame, location, economic and ecologic parameters. System components can be added to the Environment. The Operator runs the simulation and evaluation of the designed energy system. The class Report creates the pdf-report. The program is run by the main file.

### Main
The main file is used to run the program. The main file is the only time the user has to interact with the source code.  The Environment, Operator and Report are created by the user. 

### Environment
The class Environment represents the energy system. 
#### Input parameters
To create an instance of the class, the following parameters have to be provided. The list displays all input parameters, a brief description and the data type.

| Parameter         | Description                             | dtype              | Default            | Unit    | Comment                                                          |
|-------------------|-----------------------------------------|--------------------|--------------------|---------|------------------------------------------------------------------|
| **name**          | **Project name**                        | **str**            | **MiGUEL Project** | -       |                                                                  |
| **time**          | **Project time data**                   | **dict**           | -                  | -       |                                                                  |
| start             | Start time                              | datetime.datetime  | -                  | -       |                                                                  |
| end               | End time                                | datetime.datetime  | -                  | -       |                                                                  |
| step              | Time resolution                         | datetime.timedelta | 15                 | min     | Possible resolutions: 15min, 60min                               |
| timezone          | Time zone                               | str                | -                  | -       |                                                                  |
| **location**      | **Project location**                    | **dict**           | -                  | -       |                                                                  |
| longitude         | Longitude                               | float              | -                  | °       |                                                                  |
| latitude          | Latitude                                | float              | -                  | °       |                                                                  |
| altitude          | Altitude                                | float              | -                  | m       |                                                                  |
| terrain           | Terrain type                            | str                | -                  | -       | see [Appendix](#appendix)                                        |
| **economy**       | **Economical parameters**               | **dict**           | -                  | -       |                                                                  |
| d_rate            | Discount rate                           | float              | -                  | -       |                                                                  |
| lifetime          | Project lifetime                        | int                | 20                 | a       |
| currency          | Currency                                | str                | US$                | -       | If other currencies are used conversion rate needs to be applied |
| electricity_price | Electricity price                       | float              | -                  | US$/kWh |                                                                  |
| diesel_price      | Diesel price                            | float              | -                  | US$/l   |
| co2_price         | Average CO2-price over system lifetime  | float              | -                  | US$/t   |                                                                  |
| pv_feed_in_tariff | PV feed-in tariff                       | float              | -                  | US$/kWh |                                                                  |
| wt_feed_in_tariff | Wind turbine feed-in tariff             | float              | -                  | US$/kWh |                                                                  |
| **ecology**       | **Ecological parameters**               | **dict**           | -                  | -       |
| co2_grid          | Specific CO2-emissions power grid       | float              | -                  | kg/kWh  |                                                                  |
| co2_diesel        | Specific CO2-emissions diesel           | float              | 0.2665             | kg/kWh  |                                                                  |
| **blackout**      | **Stable or unstable power grid**       | **bool**           | **False**          | -       | **True: Unstable power grid; False: Stable power grid**          |
| **blackout_data** | **csv-file path with blackout data**    | **str**            | -                  | -       | **csv-file with bool-values for every timestep**                 |
| **feed_in**       | **Feed-in possible**                    | **bool**           | **False**          | -       | **True: Feed-in possible, False: Feed-in not possible**          |
| **weather_data**  | **csv-file path with weather data set** | **str**            | -                  | -       | **Enables off-line usage**                                       |


#### System components
MiGUEL features the following system components. Each component can be added to the Environment by using a different function. The list displays the system components and the functions to add the components to the Environment.
|System component|Function|
|-|-|
|Load|.add_load|
|Photovoltaic|.add_PV|
|Wind turbine|.add_wind_turbine|
|Grid| .add_grid|
|Diesel generator|.add_diesel_generator|
|Energy storage|.add_storage|

##### Load
The system component load represents the load profile of the subject under review. The load profile can be generated in two different ways. 
1) Reference load profiles: In the course of EnerSHelF standard load profiles for Ghanaian hospitals were created. This daily standard load profile is implemented in the program. Since May 2023 the reference load profiles from the Bundesverband der Energie- und Wasserwirtschaft (BDEW) have been included. The reference load profiles are used in the german dispatch to simulate certain inistitutions. [17] To create a load profile from the reference load profiles, the annual electricity consumption needs to be returned to the function (annual_consumption). The reference load profiles have a 15min-time resolution. 
2) Input via csv-file: If actual measurement data from the subject is available, the data can be returned to the program as a csv-file (load_profile). The csv file must contain two columns with the titles 'time' & 'P [W]'. ',' or ';' are used as separators; for decimal separation '.' or ',' are used depending on the setting. 

| Parameter          | Description                    | dtype | Default | Unit | Comment                                       |
|--------------------|--------------------------------|-------|---------|------|-----------------------------------------------|
| annual_consumption | Annual electricity consumption | float | -       | kWh  | Only for method 1                             |
| profile            | Reference load profile         | str   | -       | -    | Only for method 1                             |
| load_profile       | File path to load profile data | str   | -       | -    | csv-file with load profile, Only for method 2 |

The accuracy of the simulation results increases with the quality of the input data. Using the adjusted standard load profile will provide less accurate results compared to measured data. The library [Load Profile Creator](https://github.com/pdb-94/load_profile_creator) can be used to create load profiles based on the electric inventory of the subject.

If the resolution of the load profile does not match the environment time resolution, the resolution of the load profile will be adjusted by summarizing or filling in the values. If no annual load profile is provided, the load profile will be repeated to create an annual load profile.


##### Photovoltaic
The class Photovoltaic is based on the library [pvlib](https://pvlib-python.readthedocs.io/en/stable/#) [1]. There are three methods implemented to create PV systems:
1) Adding basic system parameters: Simplest way to create PV system with only basic parameters such as nominal power, surface tilt and azimuth, module and inverter power range. The class Photovoltaic will randomly choose a PV module, number of modules and an inverter that matches the parameters.
2) Selecting your modules and inverter: All system parameters such as module, number of modules, inverter, strings per inverter, modules per string, surface tilt and azimuth, ... need to be returned to the function. The modules and inverters featured in pvlib are stored in the [MiGUEL database](#database). 
3) Provide measured PV data: Input of measured PV as a csv-file

| Parameter            | Description                     | dtype    | Default | Unit | Comment                                          |
|----------------------|---------------------------------|----------|---------|------|--------------------------------------------------|
| p_n                  | Nominal power                   | float    | -       | W    |                                                  |
| pv_profile           | File path to pv porduction data | str      | -       | -    | Measured pv data in csv file, Only for method 3  |
| **pv_data**          | **PV system parameters**        | **dict** | -       | -    |                                                  |
| pv_module            | PV module                       | str      | -       | -    | PV module from pvlib database, Only for method 2 |
| inverter             | Inverter                        | str      | -       | -    | Inverter from pvlib database, Only for method 2  |
| modules_per_string   | Modules per string              | int      | -       | -    | Only for method 2                                |
| strings_per_inverter | Strings per inverster           | int      | -       | -    | Only for method 2                                |
| surface_tilt         | PV system tilt angle            | float    | -       | -    |                                                  |
| surface_azimuth      | PV system orientation           | float    | -       | -    | North=0°, East=90°, South=180°, West=270°        |
| min_module_power     | Minimum module power            | float    | -       | W    | Only for method 1                                |
| max_module_power     | Maximum module power            | float    | -       | W    | Only for method 1                                |
| inverter_power_range | Inverter power range            | float    | -       | W    | Only for method 1                                |


pvlib will run the PV simulation based on the selected system parameters. The weather data for the project location is retrieved by the Environment. The data source is [PVGIS](https://re.jrc.ec.europa.eu/pvg_tools/en/) hosted by the European Commission.


##### Wind turbine
The class WindTurbine is based on the library [windpowerlib](https://windpowerlib.readthedocs.io/en/stable/index.html) [2]. To add wind turbines to the Environment the [turbine type](https://github.com/wind-python/windpowerlib/blob/master/windpowerlib/oedb/turbine_data.csv) and the turbine height [m] need to be returned. The wind turbines featured in windpowerlib are stored in the [MiGUELdatabase](#database).

| Parameter                | Description      | dtype    | Default | Unit | Comment                                                            |
|--------------------------|------------------|----------|---------|------|--------------------------------------------------------------------|
| **turbine_data**         | **Turbine data** | **dict** | -       | -    |                                                                    |
| turbin_type              | Turbine type     | str      | -       | -    | Turbine name and manufacturer from windpowerlib register (Methd 2) |
| tubine_height            | Hub height       | float    | -       | m    | Method 2                                                           |
| **selection_parameters** |                  | **list** | -       | -    | **Select random turbine iwthin power range**                       |
| p_min                    | Minimal power    | float    | -       | kW   | Method 1                                                           |
| p_max                    | Maximal power    | float    | -       | kW   | Method 1                                                           |

The weather data for the project location is retrieved by the Environment. The data source is [PVGIS](https://re.jrc.ec.europa.eu/pvg_tools/en/) hosted by the European Commission. Inside the class WindTurbine the weather data is processed, so it can be used for the simulation. 

##### Grid
The class grid represents the power grid. The power grid provides electricity to the energy system. Depending on the input of blackout data, a stable or unstable power grid is simulated. The possibility of feed-in is determined in the Environment. The grid is automatically added to the Environment if the parameter grid_connection is set to True. 

##### Diesel Generator
The class DieselGenerator is based on a simplified, self created generator model. The model assumes that in the future generators with low-load capability are used in PV-diesel hybrid systems. In comparison to conventional diesel generators, low-load diesel generators are more fuel efficient and therefore reduce CO2-emissions [3]. The input parameters for diesel generators are displayed in the table below.

| Parameter        | Description                       | dtype | Default | Unit  | Comment |
|------------------|-----------------------------------|-------|---------|-------|---------|
| p_n              | Nominal power                     | float | -       | W     |         |
| fuel_consumption | Fuel consumption at nominal power | float | -       | l     |         |
| fuel_price       | Fuel price                        | float | -       | US$/l |         |


The fuel consumption for the generator is calculated every time step using the following equation. The equation was derived using characteristic values of a 150 kW diesel generator at loads of 0%, 25%, 50%, 75% and 100% [4]. 

*fc(l) = - 1.66360855 x l<sup> 4</sup> +3.96330272 x l<sup> 3</sup> -3.19877674 x l<sup> 2</sup>+1.8990825 x l +0*

*fc = relative fuel consumption [%]* &emsp; *l = relative load [%]*



##### Energy storage
The class Storage represents energy storage systems. The energy storage is represented by a basic model. The input parameters for storage systems are displayed in the table below:

| Parameter   | Description             | dtype | Default | Unit | Comment |
|-------------|-------------------------|-------|---------|------|---------|
| p_n         | Nominal power           | float | -       | W    |         |
| c           | capacity                | float | -       | Wh   |         |
| soc         | Initial state of charge | float | 0.5     | -    |         |
| soc_max     | Maximum state of charge | float | 0.95    | -    |         |
| soc_min     | Minimum state of charge | float | 0.05    | -    |         |
| n_discharge | Discharge efficiency    | float | 0.8     | -    |         |
| n_charge    | Charge efficiency       | float | 0.8     | -    |         |


The energy storage can be either charged or discharged at any time step. The following boundary conditions apply to loading and unloading. The memory can only be discharged to the minimum state of charge and charged to the maximum state of charge. The maximum charging or discharging power corresponds to the nominal power multiplied by the respective efficiency.

### Operator
The simulation process is divided in three steps. 

<p align=""center"">
  <img src=""/documentation/simulation_process.png"" alt=""drawing"" height=""100""/>
</p>

The system design is the only time the user needs to interact with the program code. Here the Environment ([create Environment](#environment)) and the system components are created ([system components](#system-components)). The annual simulation and the system evaluation are carried out by the [Operator](#operator).

#### Annual simulation
The energy system type depends on the input parameters and the system components in the energy system. A distinction is made between off-grid systems and on-grid systems. On-grid systems are further divided into stable systems (without blackouts) and unstable systems (with blackouts). Depending on the type of energy system, different dispatch strategies are applied for the annual simulation.

<p align=""center"">
  <img src=""/documentation/dispatch_priorities.svg"" alt=""drawing"" height=""400""/>
</p>

RE = Renewable energies &emsp; ES = Energy storage &emsp; DG = Diesel generator

The figure displays the dispatch strategies for all system components. If a system component is not added to the system, this component will be skipped in the dispatch.

### Evaluation

The two key parameters for the system evaluation are the Levelized Cost of Energy (LCOE) in US$/kWh and the CO2-emissions [t] over the system lifetime. The class Evaluation takes the Envrionemnet and the Operator as input parameters.

Note: The specific values for investment, operating and maintenance costs have been partially converted from euros to US$ (27.03.2023). The costs may differ depending on the exchange rate.

#### Levelized Cost of Energy
The LCOE are calculated according to Michael Papapetrou et. al. for every energy supply component [5]. The system LCOE is composed of the individual LCOEs of the system components, which are scaled according to the energetic share. The LCOE are calculated over the whole system lifetime. The LCOE includes the initial investment costs and the operation and maintenance costs. Costs for recycling are neglected in this evaluation. The investment and operation and maintenance cost are based on specific costs from literature values. The specific costs are scaled by the power (energy supply components) or capacity (energy storage).

| System component | Specific investment cost | Specific annual operation/maintenance cost | Unit    | Source    |
|------------------|--------------------------|--------------------------------------------|---------|-----------|
| PV               | 496                      | 7.55                                       | US$/kW  | [6] [7]   |
| Wind turbine     | 1160                     | 43                                         | US$/kW  | [8] [9]   |
| Diesel generator | 468                      | Investment cost *0.03; 0.021 US$/kWh       | US$/kW  | [10] [11] |
| Energy storage   | 1200                     | 30                                         | US$/kWh | [12]      |

#### CO2-emissions
The CO2-emissions are evaluated over the system lifetime. Included are the CO2-emissions during the production of the system component and the CO2-emissions emitted during the usage. 

| System component | Specific CO2 emissions production/installation | Unit   | Source |
|------------------|------------------------------------------------|--------|--------|
| PV               | 460                                            | kg/kW  | [13]   |
| Wind turbine     | 200                                            | kg/kW  | [14]   |
| Diesel generator | 265                                            | kg/kW  | [15]   |
| Energy storage   | 103                                            | kg/kWh | [16]   |

### Output
MiGUEL provides two types of outputs. The first output is a csv-file with every simulation time step. The csv-files can be used for further research or in depth analysis of the system behaviour. The csv-files do not include the system evaluation. The second output is the pdf-report. The report includes the most important results. The results are displayed graphically and will be explained briefly. 

#### csv-files
The csv-files display the raw data of the annual simulation. The file lists every time step of the simulation, the load and all system components, as well as their generation power.

<p align=""center"">
  <img src=""/documentation/csv_example.png"" alt=""drawing"" height=""200""/>
</p>

#### Report
The pdf-Report is automatically created by MiGUEL. It gives an overview of the simulation results and features the system evaluation based on the LCOE and CO2-emissions. The report is structured in the following chapters:

1) Introduction: Brief description of MiGUEL and EnerSHelF
2) Summary: Summary of the most important simulation results and system evaluation
3) Base data: Displays input parameters 
4) Climate data: Solar and wind data from PVGIS at the selected location
5) Energy consumption: Load profile
6) System configuration: Overview of selected system components
7) Dispatch: Annual simulation results
8) Evaluation: System evaluation based on LCOE and CO2-emissions over system lifetime

The report focuses not only on the energetic results of the system evaluation but also on economic and ecologic parameters. This makes the results more comprehensible compared to the csv-files. The pdf-report can be used as a project brochure. 

## Graphical user interface
End of June 2023 a graphical user interface (GUI) has been implemented into MiGUEL to increase the usability of the tool. With the implemtation the entry hurdle is lowered even more. The GUI follows the logical process as described above. The following list gives an overview of the different tabs and a short description of their function:
1) **Get started**: Welcome Screen including a brief overview of MiGUEL and EnerSHelF. Select csv file format
2) **Energy system**: Input mask to  create Environment class.
3) **Weather data**: Displays weather data from PVGIS at selected location.
4) **Load profile**: Input mask to add load profile to Environment.
5) **PV system**: Input mask to add PV systems to Environment.
6) **Wind turbine**: Input mask to add wind turbines to Environment.
7) **Diesel Generator**: Input mask to addd diesel generator to Environment.
8) **Energy storage**: Input mask to add energy storage to Environment.
9) **Dispatch**: Overview of system components. Runs dispatch and system evaluation.
10) **Evaluation**: Overview of system evaluation parameters. Creates outputs.


## Database
MiGUEL features a SQLite database in the directory /data/miguel.db. The following tables are included in the database:
| Name | Data sets | Source |
|-|-|-|
|pvlib_cec_module|pvlib cec module parameters||
|pvlib_cec_inverter|pvlib cec inverter parameters||
|windpowerlib_turbine|windpowerlib wind turbine parameters||
|standard_load_profile|standard load profile for Ghanaian hospitals||
|bdew_standard_load_profile|standard load profile of BDEW|[17]|

## Project partners
<p align=""center"">
  <img src=""/documentation/MiGUEL_logo.png"" alt=""drawing"" height=""200""/>
</p>
<p align=""center"">
  <img src=""/documentation/th-koeln_white.png"" alt=""drawing"" height=""200""/>
   <img src=""/documentation/EnerSHelF_logo.png"" alt=""drawing"" height=""200""/>
</p>

## Dependencies
For a full list of all dependencies see requirements.txt. This file will ask the user to install the dependencies automtically. 

[pandas](https://pandas.pydata.org/)

[numpy](https://numpy.org)

[matplotlib](https://matplotlib.org/)

[folium](https://python-visualization.github.io/folium/)

[geopy](https://geopy.readthedocs.io/en/stable/)

[fpdf](http://www.fpdf.org/)

[pvlib](https://pvlib-python.readthedocs.io/en/stable/)

[windpowerlib](https://windpowerlib.readthedocs.io/en/stable/)

[selenium](https://selenium-python.readthedocs.io/)

[plotly](https://plotly.com/python/)

[lcoe](https://pypi.org/project/lcoe/)

[global-land-mask](https://github.com/toddkarin/global-land-mask)

[PyQT5](https://pypi.org/project/PyQt5/)

[geonames](https://pypi.org/project/geonames/)

[geopandas](https://geopandas.org/en/stable/)

[lcoe](https://pypi.org/project/lcoe/)

[plotly](https://pypi.org/project/plotly/)

## References

[1] William F. Holmgren, Clifford W. Hansen, and Mark A. Mikofski. “pvlib python: a python package for modeling solar energy systems.” Journal of Open Source Software, 3(29), 884, (2018). [https://doi.org/10.21105/joss.00884](https://doi.org/10.21105/joss.00884)

[2] Sabine Haas, Uwe Krien, Birgit Schachler, Stickler Bot, kyri-petrou, Velibor Zeli, Kumar Shivam, & Stephen Bosch. (2021). wind-python/windpowerlib: Silent Improvements (v0.2.1). Zenodo. [https://doi.org/10.5281/zenodo.4591809](https://doi.org/10.5281/zenodo.4591809)

[3] PV Magazine; ""Low-load generators make photovoltaic diesel applications cleaner and more efficient""; 06. October 2015; online available:
[Niedrig-Last-Generatoren machen Photovoltaik-Diesel-Anwendungen sauberer und effizienter](https://www.pv-magazine.de/2015/10/06/niedrig-last-generatoren-machen-photovoltaik-diesel-anwendungen-sauberer-und-effizienter/)

[4] Generator Source, LLC 1999-2023; Approximate Diesel Fuel Consumption Chart; online available: [https://www.generatorsource.com/Diesel_Fuel_Consumption.aspx](https://www.generatorsource.com/Diesel_Fuel_Consumption.aspx)

[5] Michael Papapetrou, George Kosmadakis, Chapter 9 - Resource, environmental, and economic aspects of SGHE, Editor(s): Alessandro Tamburini, Andrea Cipollina, Giorgio Micale, In Woodhead Publishing Series in Energy, Salinity Gradient Heat Engines, Woodhead Publishing, 2022, Pages 319-353, ISBN 9780081028476, [https://doi.org/10.1016/B978-0-08-102847-6.00006-1](https://doi.org/10.1016/B978-0-08-102847-6.00006-1)

[6] Vartiainen, E, Masson, G, Breyer, C, Moser, D, Román Medina, E. Impact of weighted average cost of capital, capital expenditure, and other parameters on future utility-scale PV levelised cost of electricity. Prog Photovolt Res Appl. 2020; 28: 439– 453. [https://doi.org/10.1002/pip.3189](https://doi.org/10.1002/pip.3189)

[7] Bjarne Steffen, Martin Beuse, Paul Tautorat, Tobias S. Schmidt, Experience Curves for Operations and Maintenance Costs of Renewable Energy Technologies, Joule, Volume 4, Issue 2, 2020, Pages 359-375, ISSN 2542-4351, [https://www.sciencedirect.com/science/article/pii/S2542435119305793](https://doi.org/10.1016/j.joule.2019.11.012)

[8] Lucas Sens, Ulf Neuling, Martin Kaltschmitt, Capital expenditure and levelized cost of electricity of photovoltaic plants and wind turbines – Development by 2050, Renewable Energy, Volume 185, 2022, Pages 525-537, ISSN 0960-1481, [https://www.sciencedirect.com/science/article/pii/S0960148121017626](https://doi.org/10.1016/j.renene.2021.12.042)

[9] Tyler Stehly, Philipp Beiter, and Patrick Duffy, National Renewable Energy Laboratory, 2019 Cost of Wind Energy Review, 2019, [https://www.nrel.gov/docs/fy21osti/78471.pdf9](https://www.nrel.gov/docs/fy21osti/78471.pdf)

[10] James Hamilton, Michael Negnevitsky, Xiaolin Wang, The potential of variable speed diesel application in increasing renewable energy source penetration, Energy Procedia, Volume 160, 2019, Pages 558-565, ISSN 1876-6102, [https://doi.org/10.1016/j.egypro.2019.02.206](https://doi.org/10.1016/j.egypro.2019.02.206)

[11] The EU Global Technical Assistance Facility for Sustainable Energy (EU GTAF), Sustainable Energy Handbook Module 6.1 Simplified Financial Models

[12] National Renewable Energy Laboratory, Utility-Scale Battery Storage, 2023, [https://atb.nrel.gov/electricity/2022/utility-scale_battery_storage](https://atb.nrel.gov/electricity/2022/utility-scale_battery_storage)

[13] Fraunhofer ISE, Photovoltaics and Climate Change, 2020, [https://www.ise.fraunhofer.de/content/dam/ise/de/documents/publications/studies/ISE-Sustainable-PV-Manufacturing-in-Europe.pdf](https://www.ise.fraunhofer.de/content/dam/ise/de/documents/publications/studies/ISE-Sustainable-PV-Manufacturing-in-Europe.pdf)


[14] Ozoemena, M., Cheung, W.M. & Hasan, R. Comparative LCA of technology improvement opportunities for a 1.5-MW wind turbine in the context of an onshore wind farm. Clean Techn Environ Policy 20, 173–190 (2018). [https://doi.org/10.1007/s10098-017-1466-2](https://doi.org/10.1007/s10098-017-1466-2)

[15] Friso Klemann, University Utrecht, The environmental impact of cycling 1,600 MWh electricity - A Life Cycle Assessment of a lithium-ion battery from Greener Power Solutions (P. 35)

[16] Hao, H.; Mu, Z.; Jiang, S.; Liu, Z.; Zhao, F. GHG Emissions from the Production of Lithium-Ion Batteries for Electric Vehicles in China. Sustainability 2017, 9, 504. [https://doi.org/10.3390/su9040504](https://doi.org/10.3390/su9040504)

[17] BBDEW Bundesverband der Energie- und Wasserwirtschaft e.V.; Standardlastprofile Strom; [https://www.bdew.de/energie/standardlastprofile-strom/](https://www.bdew.de/energie/standardlastprofile-strom/); 01.01.2017

## Appendix

### Environment - terrain types

| Terrain type                                                                                                     | Roughness length [m] |
|------------------------------------------------------------------------------------------------------------------|----------------------|
| Water surfaces                                                                                                   | 0.0002               |
| Open terrain with smooth surface, e.g., concrete, airport runways, mowed grass                                   | 0.0024               |
| Open agricultural terrain without fences or hedges, possibly with widely scattered houses, very rolling hills    | 0.03                 |
| Agricultural terrain with some houses and 8 meter high hedges at a distance of approx. 1250 meters               | 0.055                |
| Agricultural terrain with many houses, bushes, plants or 8 meter high hedges at a distance of approx. 250 meters | 0.2                  |
| Villages, small towns, agricultural buildings with many or high hedges, woods and very rough and uneven terrain  | 0.4                  |
| Larger cities with tall buildings                                                                                | 0.8                  |
| Large cities, tall buildings, skyscrapers                                                                        | 1.6                  |

",2,2,1,0,renewable-energy,"[energy-system-modeling, micro-grid, pv-diesel-hybrid-systems, renewable-energy]",00000
1260,IOT-based-home-automation-System,nikkkkhil,N/A,https://github.com/nikkkkhil/IOT-based-home-automation-System,https://api.github.com/repos/nikkkkhil/IOT-based-home-automation-System,"I designed this system to control the electrical appliances and monitor the room temperature using the mobile application, I used embedded controller board and the home appliances which are physically connected to output ports of this board via relays.Cayenne IOT platform is used to establish wireless communication between the Android phone and embedded devices using MQTT protocol, Mobile application is developed to provide a user-friendly graphical user interface (GUI) for remotely controlling on home appliances and monitoring the values, User will get SMS/email alert if the value reaches set value. Device data captured in real-time enables the execution of triggered events. We can easily keep track of all events.","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",2,2,1,0,renewable-energy,"[automation, cayenne, energy-efficiency, iot, mqtt, renewable-energy, smartmeter]",00000
1261,WindTurbineDetection,nvriese1,N/A,https://github.com/nvriese1/WindTurbineDetection,https://api.github.com/repos/nvriese1/WindTurbineDetection,Implementation of transfer learning approach via the Pytorch YOLOv7 object detection architecture to detect and rapidly quantify wind turbines in raw satellite imagery.,"# Wind Turbine Detection via YOLOv7

## Summary
Implementation of transfer learning approach via the Pytorch 
[YOLOv7 object detection architecture](https://github.com/WongKinYiu/yolov7) to detect and rapidly quantify wind turbines in raw satellite imagery.
<br /><br />
**Figure 1**: _Turbine detections shown in a wind-producing region of the Southwest United States._
<img src=""https://user-images.githubusercontent.com/99038816/202049025-25310606-16aa-4ecc-be39-44bccf73579d.jpg"" width=60% height=60%>

## Table of Contents

- [Overview & Problem Addressed](#overview-&-problem-addressed)
- [Performance Metrics](#performance-metrics)
- [Project Organization](#project-organization)
- [Built With](#built-with)
- [Contact](#contact)
- [Acknowledgements](#acknowledgements)

## Overview & Problem Addressed

 &nbsp;&nbsp;&nbsp;&nbsp;Using raw [LANDSAT](https://figshare.com/articles/dataset/Power_Plant_Satellite_Imagery_Dataset/5307364?file=9104302) 
 and [NAIP](https://datagateway.nrcs.usda.gov/GDGHome_DirectDownLoad.aspx) satellite imagery, a wind turbine object detection model was developed
 via a transfer learning approach from the state-of-the-art YOLOv7 architecture for the purpose of automating on-shore U.S. wind turbine count estimations.
<br />&nbsp;&nbsp;&nbsp;&nbsp;Current state-of-the-art databases which monitor wind turbine development in the United States such as the [U.S. Wind Turbine Database](https://eerscmap.usgs.gov/uswtdb/) are capable of exceptional accuracy, but suffer from poor temporal resolution (updated quarterly). This model, when paired with sufficiently recent satellite imagery data, can provide leading estimates of U.S. on-shore wind resources for both foreign and domestic investors, and government officials, providing value especially within regions of ongoing development.

## Model Performance

 <img src=""https://user-images.githubusercontent.com/99038816/202049644-0f09543a-80b0-433e-889b-795b815eaf94.png"" width=60% height=60%>
 
 **Figure 2**: _Model precision, recall, and mean Average Precision (mAP) as evaluated during training._

&nbsp;&nbsp;&nbsp;&nbsp;The final, trained model achieves 0.651 mean average precision (mAP) at 0.5 intersection-over-union (IoU), resulting in a Mean Absolute Error (MAE), of 0.97 or ~1.00 turbine per image inferenced upon. Note that the number of turbines in a given training image ranged from 0 to 36, and that the MAE increases significantly above 10 turbines per image. Given the total number of turbines in the test set (407), the model was able to correctly detect 358 of 407 resulting in an 88% detection rate, however, the model performed demonstrably better at detecting turbines within smaller scale imagery containing fewer turbines. 
<br />&nbsp;&nbsp;&nbsp;&nbsp;To address this, future model development could include significant training dataset augmentation. Examples of this may be increased training image mosaic augmentation to improve small-object detection rates, the addition of off-shore wind turbine images, or the addition of biome classification to identify backgrounds within which the model performs more poorly. Other development could include new class additions (ex. solar arrays) for use cases related to total renewables generation capacity estimation.

## Project Organization

    ├── LICENSE
    ├── README.md                                                <- Top-level README for developers using this project.
    |
    ├── notebooks                                                <- Notebooks folder.
    │   └── 1.0-TurbineDetection-data-wrangling.ipynb            <- Imagery data wrangling & EDA notebook.
    │   └── 2.0-TurbineDetection-traning-evaluation.ipynb        <- Google Colab model training notebook.
    │   └── 3.0-TurbineDetection-inference-visualization.ipynb   <- Model inference and evaluation notebook.
    |   └── data.yaml                                            <- YAML file for custom model.
    |   └── detect.py  
    |   └── export.py
    |   └── hubconf.py
    |   └── inference.py
    |   └── test.py
    |   └── train.py
    |   └── requirements.txt                                     <- Required dependencies. 
    |   └── models                                               <- Folder containing additional models and experimental features.
    |   └── utils                                                <- Folder containing additional functions.
    |
    ├── data                                                     <- Data and results folder.
    │     └── cleaned                                            <- Cleaned/augmented image data folder.
    |            └── train                                       <- Training data split.
    |                  └── labels
    |                  └── images
    |            └── test                                        <- Test data split.
    |                  └── labels
    |                  └── images
    |            └── valid                                       <- Validation data split.
    |                  └── labels
    |                  └── images
    |    └── raw                                                 <- Raw annotated image data folder.
    |            └── images
    |            └── labels 
    |    └── results                                             <- Folder containing model metrics and inference images.
    │            └── detections                                  <- Folder containing output model inference images.
    │            └── **metrics**                                 <- **Folder containing model performance metrics.**
    |
    ├── reports                                                  <- Generated analysis as PPTX.
    │   └── TurbineDetection_SlideDeck.pptx   
    │ 
    ├── src                                                      <- Source code from notebooks developed for this project.
        └── 1.0-TurbineDetection-data-wrangling.py
        └── 2.0-TurbineDetection-traning-evaluation.py
        └── 3.0-TurbineDetection-inference-visualization.py

## Built With

<a><button name=""button"">`Python`</button></a> <br />
<a><button name=""button"">`Jupyer Notebook`</button></a> <br />
<a><button name=""button"">`Google Colab`</button></a> <br />
<a><button name=""button"">`Pytorch`</button></a> <br />
<a><button name=""button"">`Scikit-Learn`</button></a> <br />
<a><button name=""button"">`Pandas`</button></a> <br />    

## Contact

Noah Vriese<br />
Email: noah@datawhirled.com<br />
Github: [nvriese1](https://github.com/nvriese1)<br />
LinkedIn: [noah-vriese](https://www.linkedin.com/in/noah-vriese/)<br />
Facebook: [noah.vriese](https://www.facebook.com/noah.vriese)<br />
Twitter: [@nvriese](https://twitter.com/nvriese)<br />

## Acknowledgements

WongKinYiu: [YOLOv7 implementation](https://github.com/WongKinYiu/yolov7)<br />
Liscense: MIT
",2,2,2,0,renewable-energy,"[object-detection, pytorch, renewable-energy, yolov7]",00000
1262,Chaudhari_Amazon_Hydropower_Nature_Sustainability,yadupokhrel,N/A,https://github.com/yadupokhrel/Chaudhari_Amazon_Hydropower_Nature_Sustainability,https://api.github.com/repos/yadupokhrel/Chaudhari_Amazon_Hydropower_Nature_Sustainability,This repository includes the python and other scripts used to generate the figures in the main text of the paper. ,"# Chaudhari_Amazon_Hydropower (Nature Sustainability 2021)
This repository includes post-processing scripts used to generate all graphics in the main text of the paper. 
",2,2,1,0,renewable-energy,"[hydrology, hydropower, modeling, renewable-energy]",00000
1263,renewable-causal-effects,LucaDiba,N/A,https://github.com/LucaDiba/renewable-causal-effects,https://api.github.com/repos/LucaDiba/renewable-causal-effects,Exploring causal effects of renewable energy on countries development and more. This project is part of course CS 520 Causal Inference and Learning at University of Illinois at Chicago.,"# Causal Effects of Renewable and Fossil Fuel Energy Sectors
## Authors
Luca Dibattista and George Maratos.

## Abstract
In this work we explore causality with real-world data from the United Nations, International Labor Organization, and a few others. Specifically we look at the effects of the energy sector on the economy by disentangling the sources, from which energy is derived, into renewables and fossil fuels (combustibles). We run a case study on the United States, looking at the change in energy production and consumption to find causality with labor statistics and GDP. We find correlations between renewable energy production and both employment in utilities and GDP, while combustible based energy has no direct link. We also have preliminary results on causality for accessibility of electricity, where we determine that renewable energy output is positively correlated with accessibility in a subset of the world's nations. We also run Granger tests to explore the time series component of our data, looking for causality among the variables.

## Project
This is the result of a research work done thanks to Prof. Elena Zheleva during the course CS 520 Causal Inference and Learning at University of Illinois at Chicago.

## Files
In this repository you can find:

- `Causal Effects of Renewable and Fossil Fuel Energy Sectors.pdf`: our paper;
- `reports/`: a folder with the project proposal and the progress report;
- `src/` and `src/scripts/`: a folder with the code we used to write our paper;
- `src/datasets/`: a folder with the datasets we used in our work.",2,2,2,0,renewable-energy,"[causal-inference, renewable-energy]",00000
1264,deLIGHT,jamestiotio,N/A,https://github.com/jamestiotio/deLIGHT,https://api.github.com/repos/jamestiotio/deLIGHT,SUTD 2019 03.007 Introduction to Design Project,"# <img src=""./assets/logo.png"" width=""200"">
**SUTD 2019 03.007 Introduction to Design Project**

_Theme: At Play 2.0_

<img src=""./assets/team.JPG"" width=""500"">

19F07 Group 1 Team Members:
- [James Raphael Tiovalen](https://github.com/jamestiotio) (Team Coordinator & Project Manager)
- [Velusamy Sathiakumar Ragul Balaji](https://github.com/ragulbalaji) (Software Specialist & Technical Advisor)
- [Kenneth Chin Choon Hean](https://github.com/UrFriendKen) (Chief Mechanical & Electrical Engineer)
- [Mun Jern Wei Ivan](https://github.com/monkeychimpanzee) (Project Advisor & Lead Actor)
- [Sharmayne Lim Zhiyu](https://github.com/sl194) (Creative Director & Lead Artist)

Since GitHub limits single file size to 100 MB, the project video could not be uploaded/committed to GitHub. Instead, it is available on YouTube [here](https://youtu.be/HanKIdMyvy4).

## Problem Statement

Unsupervised children playing with lighters leads to grave consequences (supported by statistics of burns and deaths worldwide). Additionally, lighters which have run out of fuel are rendered useless in situations whereby lighter refills and charging points are unavailable. Our solution prevents children from activating the lighter when they come into contact with it as it has a fingerprint lock that only registered fingerprints are able to unlock. Also, when our lighter has run out of fuel, there is an option to recharge it by winding it. At the same time, our lighter allows children to have fun by playing video games on it or winding it.

## Product Description

<img src=""./assets/product.png"" width=""500"">

The key highlighted features of our product are:

1. **Fingerprint Sensor**

This capacitive sensor allows us to capture, collect, store and sense fingerprint patterns. This feature is used to restrict access to the lighter.

2. **M5Stick-C**

This is the big boi that does most of the work. This mini IoT core device is based on the ESP32 chip and is equipped with common features, such as Wi-Fi, Bluetooth, LCD Display, LED, Button, Buzzer, IR Transmitter, Battery and Six-Axis MPU. This allows us to do some cool, unconventional integrations of certain systems that only involve light processing power to the lighter. Such an example would be the simple **Game Feature** that would run when an unauthorised fingerprint is detected. Note that the fingerprint detection callback still runs asynchronously while the game is running. The game that we currently implement is a simple low-level adaptation of Flappy Bird with balloons as obstacles. Of course, given more time and effort, more intricate games could potentially be written (although care needs to be taken regarding memory usage and the fact that it is very troublesome to write the graphics and physics drivers from scratch). This module also handles the **Wi-Fi Feature** connectivity and processing.

3. **Plasma Lighter**

Instead of using gas fuel, we utilise a more sustainable, reusable and rechargeable energy source such as a battery. A possible case illustration of its sustainability is that this would reduce the amount of plastic unintentionally consumed by animals like birds. The battery could be charged either through the USB port or by using the hand crank.

4. **Speaker**

Our product is also equipped with a piezoelectric speaker that provides auditory feedback to convey messages or to reinforce certain actions that the user had done.

5. **Hand Crank**

The lighter is equipped with a detachable hand crank that could be wound to provide more energy through its charging circuit.

## Design Requirements & Choices

1. Our product needs to be tightly linked to a specific object taken from a preselected list of suggested, well-designed objects. Our object of focus was the Zippo lighter.

2. We only had a budget of SGD$500 and thus, we sourced for cheap PLA material to construct the lighter's casing and we also sourced for relatively cheaper alternatives of fingerprint sensors and IoT processors.

3. We chose a winding method instead of a shaking mechanism since, by performing some rough preliminary estimations and calculations, we found that winding would provide more energy to the battery (or the device) than shaking.

4. Limitations of our product are mainly centered around energy efficiency, ease of use and ergonomics:

    - The concern over the energy efficiency of the hand crank is relevant to our project. Conversion from mechanical to electrical energy is usually not very efficient since a lot of energy is wasted as heat and sound.

    - Another plausible and reasonable concern is that users would find it a hassle to have to unlock a mere lighter with their fingerprint every time they want to use it. Thus, we tried to implement the Wi-Fi verification method as well as a proof of concept in order to make it slightly easier for users to use the lighter.

    - Finally, the overall size of the lighter is larger than the usual lighter. This is due to the slightly bulky structure of the M5Stick-C. On the other hand, the M5Stick-C is jam-packed with plenty of features in such a tight space that the temptation to include everything in such an Apple-like compact design is quite high.
    
5. Our design focus is on rapid prototyping, as well as iterative development and feature testing. Therefore, our code currently should only be used during development and not in a production-level environment.

## Future Work

Several improvements (and new ideas) that could be implemented include:

1. Better reliability/control/safety in terms of precision and accuracy of the magnitude of the electrical current discharge (so as to not overload any components), as well as the overall reliability of the whole electrical circuit. Short-circuits and accidental contacts with live wires/batteries were encountered quite often during testing, which should not be the case.

2. Integration with Siri. M5Stick-C has a microphone that could support this integration. Apple's HAP might be needed for this.

3. An additional security feature in terms of Morse code tapping password detection (?).

4. (Old Idea) 3D Capacitor Pattern Lock (setup of three perpendicular plates).

## Acknowledgements

Credits to [Prof. Arlindo Silva](https://epd.sutd.edu.sg/people/faculty/arlindo-silva) and [Prof. Daniel Joseph Whittaker](https://asd.sutd.edu.sg/people/faculty/daniel-joseph-whittaker) as our cohort instructors who guided us through every single step of this journey!
",2,2,4,1,renewable-energy,"[ble, design, embedded, esp32, fingerprint, fingerprint-authentication, fingerprint-sensor, game, iot, lighter, m5stack, m5stickc, microcontroller, micropython, micropython-esp32, play, renewable-energy, safety, sutd, wifi]",00000
1265,Restep,restep-eco,N/A,https://github.com/restep-eco/Restep,https://api.github.com/repos/restep-eco/Restep,Repository for all Restep Power System source files and documentation,"# Restep
The Restep Power System is currently composed of four Modules:

The Mother Module: the foundation of the power system, much like a Motherboard in a computer

The Battery Charger Module: provides battery charge control, MPPT, and system voltage control

The Off-Line Module: provides power input from a wall outlet

The PV Module: provides power input from a photovoltaic panel
  
All four Modules are at an initial release phase (Rev.X1) 7/14/21. This revision is a prototype release. No Modules are fully tested or qualified.

All Modules are licensed under CERNOHL-S v2:
This source describes Open Hardware and is licensed under the CERNOHL-S v2. You may redistribute and modify this
source and make products using it under the terms of the CERN-OHL-S v2 (https://ohwr.org/cern ohl s v2.txt ).
This source is distributed WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING OF MERCHANTABILITY,
SATISFACTORY QUALITY AND FITNESS FOR A PARTICULAR PURPOSE. Please see the CERN-OHL-S v2 for applicable conditions.

Source files developed in KiCad 4.0.7 (https://www.kicad.org/). Custom libraries and footprints are provided in the source files .zip.

The Restep-X1 Arduino firmware for the Mother Module is licensed under GPL v3.0 (https://www.gnu.org/licenses/gpl-3.0.en.html).
Use the Caterina-Genuino-Micro.hex bootloader, set fuse bits: EXT: CB  HI: D8  LO:  FF
(https://www.arduino.cc/) 

All documentation is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License (https://creativecommons.org/licenses/by-sa/4.0/).

LTSpice circuit models (.asc), Mathcad (.mcdx), and Excel (.xlsx/.xlsm) design files are licensed under the MIT license.
(https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html)
(https://www.mathcad.com/en)

Visit www.restep.eco for more information.
",2,2,1,0,renewable-energy,"[arduino, battery, battery-monitor, dc-dc-converter, farmbot, iot, kicad, microcontroller, mppt-charger, plx-daq, pmbus, power, power-supply, power-system, renewable-energy, solar-energy]",00000
1266,Solar-Sentiment-BERT,SerenaYKim,N/A,https://github.com/SerenaYKim/Solar-Sentiment-BERT,https://api.github.com/repos/SerenaYKim/Solar-Sentiment-BERT,Sentiment Analysis of Solar Energy Using Bidirectional Encoder Representations from Transformers,"# Public Sentiment Towards Solar Energy

This is a repository for a project, ""Sentiment Analysis of Solar Energy Using Bidirectional Encoder Representations from Transformers"".

### Paper

1. Serena Y. Kim, Koushik Ganesan, Princess Dickens, Soumya Panda, ""Public Sentiment Toward Solar Energy: Opinion Mining of Twitter Using a Transformer-Based Language Model,"" Manuscript Under Review (Jan 13, 2021)


### Code

1. Streaming Twitter data using Twitter Application Programming Interface (API): https://github.com/SerenaYKim/Solar-Sentiment-BERT/blob/octo-branch/code/tweet-streaming.py
2. Pre-Processing Twitter data: https://github.com/SerenaYKim/Solar-Sentiment-BERT/blob/octo-branch/code/pre-processing.py
3. Text classification using Robustrly optimized Bidirectional Encoder Representations from Transformers: https://github.com/SerenaYKim/Solar-Sentiment-BERT/blob/octo-branch/code/roberta-solar-sentiment.py
4. Text classification using Bidirectional Encoder Representations from Transformers: Available soon

### Data

1. State-Level Summarized Data: https://github.com/SerenaYKim/Solar-Sentiment-BERT/blob/octo-branch/data/SolarSentimentbyState_2020-12-01.csv

### Reference

**Our analysis and code are built upon:**

1. BERT by Google Research: https://github.com/google-research/bert
2. RoBERTa Model: https://huggingface.co/transformers/model_doc/roberta.html
3. TensorFlow: https://www.tensorflow.org/official_models/fine_tuning_bert
4. Transformers: https://github.com/huggingface/transformers 
",2,2,2,0,renewable-energy,"[bert-model, natual-language-processing, opinion-mining, renewable-energy, roberta, sentiment-analysis, solar-energy]",00000
1267,TCA-work,MarcusTan30,N/A,https://github.com/MarcusTan30/TCA-work,https://api.github.com/repos/MarcusTan30/TCA-work,Bar plot illustrating the FTE employment levels within the renewable energy industry in Australia,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,1,0,renewable-energy,"[labour-economics, renewable-energy]",00000
1268,HBAT-Website,Prometheon-Technologies,Prometheon-Technologies,https://github.com/Prometheon-Technologies/HBAT-Website,https://api.github.com/repos/Prometheon-Technologies/HBAT-Website,Official Source code for HBAT website,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,1,0,renewable-energy,"[battery, energy, reactjs, renewable-energy, vite-plugin]",00000
1269,ewf-dapptutorial,JonathanWfels,N/A,https://github.com/JonathanWfels/ewf-dapptutorial,https://api.github.com/repos/JonathanWfels/ewf-dapptutorial,Build your first decentralized application with truffle on Energy-Web's testnet Tobalaba,"# Energy-Web's DApp tutorial
Build your first decentralized application with truffle on Energy-Web's testnet Tobalaba. 

Follow the full tutorial here: URL

This tutorial is based on truffles pet-shop example: http://truffleframework.com/tutorials/pet-shop

Follow the steps below to download, install, and run this project.

## Dependencies
Install these prerequisites (see detailed description in the tutorial):
- NPM: https://nodejs.org
- Truffle: https://github.com/trufflesuite/truffle
- Energy-Web Client: https://github.com/energywebfoundation/energyweb-client
- Parity UI: https://github.com/Parity-JS/shell/releases
- Parity Chrome Extension: https://github.com/paritytech/parity-extension

## Clone the project
`$ git clone https://github.com/JonathanWfels/ewf-dapptutorial`

## Install dependencies
```
$ cd ewf-dapptutorial
$ npm install
```
## Start EnergyWeb-Client
Start the EnergyWeb-Client, create an account and get some tokens. A more detailed description in the tutorial

## Compile & Deploy Smart Contracts
`$ truffle migrate`

## Run the Front End Application
`$ npm run dev`

Visit this URL in Chrome: http://localhost:3000

",1,1,0,2,renewable-energy,"[energy-web, ethereum, renewable-energy, truffle, tutorial]",00000
1270,Projeto_Pesquisa_PIBIC-UFPB,Luizfelz,N/A,https://github.com/Luizfelz/Projeto_Pesquisa_PIBIC-UFPB,https://api.github.com/repos/Luizfelz/Projeto_Pesquisa_PIBIC-UFPB,📑 Projeto em Python baseado em projeto de pesquisa da Universidade Federal da Paraíba,"# Projeto_Pesquisa_PIBIC-UFPB

### **Contexto**

A utilização de fontes renováveis é de extrema importância diante do cenário de mudanças climáticas que o mundo está enfrentando. A matriz energética brasileira é constituída por muitas fontes renováveis para geração de energia, mas infelizmente essas fontes dependem de algumas variáveis climáticas, como temperatura, pluviosidade, velocidade do vento, radiação, entre outras. Nesse contexto, o estudo das variáveis climáticas é essencial, porém a quantidade exorbitante de dados brutos a serem analisados torna necessário o auxílio de ferramentas capazes de realizar essa função de maneira rápida e efetiva. O uso de algoritmos para tratamento de bancos de dados é bastante comum e vem crescendo significativamente nos últimos anos, ainda mais quando considerado o uso mais frequente de linguagens de programação para realização e automação de tarefas que anteriormente eram realizadas de maneira manual.

O [Python](https://www.python.org/) é uma linguagem de programação de alto nível e uma das mais utilizadas para tratamento de banco de dados, pois além de permitir que seus algoritmos sejam leves e rápidos, permite uma fácil criação e interpretação de sequências de comandos lógicos que servirão para o tratamento dos dados brutos.

O [Banco de Dados Meteorológicos](https://bdmep.inmet.gov.br/) do [Instituto Nacional de Meteorologia](https://portal.inmet.gov.br/) (BDMEP - INMET) é um banco de dados digital que agrupa dados meteorológicos de séries históricas de estações meteorológicas automáticas e convencionais, conforme normas técnicas internacionais da [Organização Meteorológica Mundial](https://news.un.org/pt/tags/organizacao-meteorologica-mundial).

O [NASA POWER](https://power.larc.nasa.gov/data-access-viewer/) é um projeto da [NASA](https://www.nasa.gov/) que fornece parâmetros relacionados ao Sol e meteorologia habilitada geoespacialmente que permitem avaliação e projeção de sistemas de energia renovável.

### **Objetivo**

O objetivo deste projeto é a criação de um algoritmo capaz de tratar os dados brutos retirados do BDMEP e da NASA. O algoritmo ainda está em desenvolvimento e, atualmente, consegue realizar o processamento apenas de dados diários e mensais, retirados do BDMEP (para uma ou mais variáveis simultâneamente), e dados mensais retirados da NASA (para apenas uma variável por vez). No entanto, o objetivo futuro é que seja capaz de fazer o processamento de qualquer intervalo de dados (horários, diários ou mensais) e para qualquer quantidade de variáveis.

### **Justificativa**

A criação do algoritmo foi pensada para que fosse possível ser utilizado por qualquer pessoa, com ou sem nenhum conhecimento prévio em programação, em pesquisas que fizessem uso dos dados disponibilizados pelo BDMEP e pela NASA. Ainda, a utilização de ferramentas computacionais para cálculos e processamento de dados ajuda na diminuição de erros propagados por análises manuais e na diminuição do tempo de processamento, permitindo uma análise mais rápida, eficiente e precisa.

# Explicações gerais sobre o algoritmo

As informações e explicações quanto aos comandos, métodos, funções e afins, utilizados no algoritmo, podem ser encontradas no arquivo 'algoritmo_comentado', o qual é uma cópia do arquivo original, porém com comentários linha-a-linha.
",1,1,1,0,renewable-energy,"[bdmep, brazil, climate-data, inmet, life-cycle-assessment, meteorology, nasa-power, pandas, python, renewable-energy, weather-data, weather-station]",00000
1271,Kite-Wing-High-Altitude-Wind-Turbine-,Aightm8,N/A,https://github.com/Aightm8/Kite-Wing-High-Altitude-Wind-Turbine-,https://api.github.com/repos/Aightm8/Kite-Wing-High-Altitude-Wind-Turbine-,A novel design for a High Altitude Wind Turbine ,"# Kite-Wing-High-Altitude-Wind-Turbine-
A novel design for a High Altitude Wind Turbine 
<br>
This is currently a concept, a working model is yet to be built.
<br>
<br>


![alt text](https://github.com/Aightm8/Kite-Wing-High-Altitude-Wind-Turbine-/blob/master/Kite%20Wing%20HAWT%20white%20background.PNG)
<br>
**Description and operation**
<br>
<br>
The KW-HAWT is a new take on launching wind turbines to reach higher wind speeds at greater altitudes. Wind energy is harvested from wind turbines. Turbine units can also be made up of a funnel, tunnel and diffuser applying the Venturi effect to maximise wind flow and efficiency. Getting these turbines up there is the problem and is where the kite-wing aspect comes in. The Kite provides the majority of lift force required to keep the structure in the air but lift is also provided by the airfoil shaped wing which generates a force from the pressure difference from the flow of wind against it. Tubes mounted on the top of the wing mechanically turned by wind turbines on its side provides additional lift from the Magnus effect. The number and size of turbines that can be mounted on the structure depends on the total lift force generated, basically if it is greater than the total weight of the structure. <br>
The turbines will be placed on the wing such that the centre of gravity will be manitained at its centre, where one tether connects it to ground and another connects the kite to it. This is to maintain the stucture's position parallel to ground. The turbines are mounted on the wing with a 2-axis hinge and so are the tethers and the cables of the direction chutes ( discussed in next section ). The turbines and wing therefore move independently against the wind ( discussed in next section ) and can maintain a position parallel to the ground despite free movement of the kite against the wind. <br>
The wing sturcture and combined turbines have tails that allow them to move independently to face the wind direction. Direction chutes are mounted on the tips of the wing structure, these chutes are pulled by the wind and they in turn pull the sturcture towards the wind. The kite also pulls itself towards the wind direction. <br>
These are measures taken to ensure an optimum, smooth, linear, non-turbulent windflow through the turbine units for maximum efficiency.
The KW-HAWT however will not be able to attain significant lift to launch itself from the ground due to limited wind speed, it will need to be carried and deployed to a high altitude with the use of an aircraft. A UAV would be useful for this purpose as deployement missions would be quicker, cheaper and safer.
<br>
<br>
<br>
![alt text](https://github.com/Aightm8/Kite-Wing-High-Altitude-Wind-Turbine-/blob/master/HAWT%20front%20with%20single%20turbine.PNG)
<br>
<br>
<br>
The Kite Wing High Altitude Wind Turbine is licensed under the TAPR Open Hardware License (www.tapr.org/OHL).
<br>
In support of open source innovation in strengthening renewables and combating climate change.

",1,1,2,0,renewable-energy,"[open-source, opensource, renewable-energy, renewables, sustainability, wind, wind-energy, wind-turbine]",00000
1272,t3xla,MadeInDreams-Team,MadeInDreams-Team,https://github.com/MadeInDreams-Team/t3xla,https://api.github.com/repos/MadeInDreams-Team/t3xla,A Low Carbon Footprint Blockchain,"## Getting started with T3XLA 

The T3XLA Network is a Proof-of Concept project to demonstrate the possibility of having a Blockchain and a cryptocurrency that can run on smaller device like Raspberry Pi. This reduces the carbon footprint generated on the hardware production level. Not only a Raspberry Pi require less material to produce but it requires only3 to 5 volts to run. This is making it the perfect candidate for renewable energy. A raspberry Pi could run on a 6V battery that can be charge using renewable energy like solar panels or wind mils. This make the t3XLA project the perfect concept for a sustainable blockchain with low carbon footprint.

## What's changed

The wallet is the node and perform validation/mining while it is on. Everyone can participate and it is totally free.
When your wallet is open you are participating on the network and earning. Since you are participating, the transactions are free. That is right, anyone can participate in the validation process making it decentralized and accessible. At this time, the T3XLA Green Blockchain Project is bearing a coin, the next phase will bring BOT (Blockchain Of Things), connecting the real world to the blockchain. Smart Contract that activates real world machines. 

## Our Carbon Footprint.

The carbon footprint of the entire ecosystem at full scale is negligible compare to a space flight.

## Use Case

The BOT phase, (Blockchain Of Things) Smart contract that activate real worlds machines...

Coining soon…


",1,1,3,0,renewable-energy,"[blockchain, carbon-footprint, concept, crypto, node, raspberry-pi, renewable-energy, wallet]",00000
1273,tellus-consultancy,niels-baptist,N/A,https://github.com/niels-baptist/tellus-consultancy,https://api.github.com/repos/niels-baptist/tellus-consultancy,This repo contains the onepager portfolio website of Tellus Consultancy.,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,1,0,renewable-energy,"[bootstrap, css, font-awesome, formspree, google-fonts, html, renewable-energy]",00000
1274,wsfp,lgarciamarrero92,N/A,https://github.com/lgarciamarrero92/wsfp,https://api.github.com/repos/lgarciamarrero92/wsfp,WSFP is a web application to support decision-making under multiple criteria in the planning of solar and wind farms,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,2,22,renewable-energy,"[decision-making, multiobjective-optimization, nsga-ii, renewable-energy]",00000
1275,Photovoltaic-Panel-Estimation,FranGarcia94,N/A,https://github.com/FranGarcia94/Photovoltaic-Panel-Estimation,https://api.github.com/repos/FranGarcia94/Photovoltaic-Panel-Estimation,:sunny: :house_with_garden: Estimation of photovoltaic solar panels for a house through python.,"# Photovoltaic-Panel-Estimation

[![Python_version](https://img.shields.io/badge/Python-v3.10.2-blueviolet?style=flat&logo=python&logoColor=white)](https://www.python.org/downloads/release/python-3102/)
![](https://custom-icon-badges.herokuapp.com/github/license/FranGarcia94/Solar-Panel-Estimation?logo=law)
![](https://badge-size.herokuapp.com/FranGarcia94/Solar-Panel-Estimation/master/solar_panel_estimation.py)
![photovoltaic](https://img.shields.io/badge/Photovoltaic-orange?style=flat)

<p align = ""center"">
<a href=""https://www.flaticon.es/iconos-gratis/panel-solar""><img src=""https://user-images.githubusercontent.com/107102754/180464176-a266bfca-3a50-4a84-b432-3ba43481e6e5.png""/></a>
</p>


With this simple code it is possible to estimate how many photovoltaic solar panels are needed for a house.

This requires some input data which, in this case, are all within the code, except for the city which must be entered by keyboard.

## Introduction

With this code you can get an approximate idea of how many photovoltaic solar panels are needed for an installation with known or estimated monthly consumption. For this purpose, the free [PVGIS](https://re.jrc.ec.europa.eu/pvg_tools/en/) API of the Join Reseacrh Center is used to get the monthly irradiation data for the place indicated by keyboard. You can get more information about this API [here](https://joint-research-centre.ec.europa.eu/pvgis-photovoltaic-geographical-information-system/getting-started-pvgis/api-non-interactive-service_en)

This tool is very useful and has many more possibilities of use than the one shown here.

## Data needed for the request

In this case, calculations have been made with monthly irradiation data for a time period from 2005 to 2020 (maximum range of the database consulted). In addition, the optimal angle for a balanced consumption throughout the year has also been introduced, so the data that we have to enter in the code is these:

```python
    vers='v5_2'
    tool_name='MRcalc'
    data_base = 'PVGIS-SARAH2'
    start_year = '2005'
    end_year = '2020'
    isang = '1'
        
```
- **vers** indicates the version of PVGIS, which in this case is the most current one.
- **tool name** refers to the name of the tool within PVGIS that we are going to access.
- **data_base** is the chosen database. I have chosen this one because it had records more years. Depending on the search area the databases can change, an option if you are not clear about this is to remove this parameter since the API takes by default a database depending on the location. If we do this we have to make sure that this database has records from the indicated years. The default DBs are PVGIS-SARAH, PVGIS-NSRDB and PVGIS-ERA5 based on the chosen location.
- **isang** indicates that we are going to pass the optimal angle to the request.

Besides this we have to define the most important variables: **Latitude**, **Longitude** and **Tilt angle**.

To choose the optimal angle[^1] there are several ways to define it depending on our interests, if we want to focus on production in summer, winter or throughout the year. 

In this case and without going into details, we are going to prioritize the annual consumption where we could take the latitude of the place as the optimal angle, however, we are going to use the following expression:
```python
  angle = 3.7 + 0.69 * float(lat)

```
Before this, we get the latitude and longitude through the Nominatim [API](https://nominatim.org/release-docs/latest/api/Search/) as we have already seen in the [Weather-Python](https://github.com/FranGarcia94/Weather-Python) repository.

## Data needed for calculation.

There are three parameters that are necessary for the calculation: **performance**, **monthly_consumption** and **module_power**.

- **performance** is a performance value of the installation, it is lower than normal because, as already mentioned, this calculation is preliminary and indicative and we do not take into account all possible factors.

- **monthly consumption** is the average monthly consumption of the user. In this case, these consumptions belong to a house in the south of Spain for which monthly records have been kept for the last 3 years. The consumption data can be obtained from the electricity bill or by visiting the customer area of your supplier. You can also estimate monthly consumption through the power of your electrical appliances.

- **module_power** corresponds to the power of a generic module, in this case a 400 W module has been assumed.

## Results

Enter a City: Almería
|                                      |    Jan |    Feb |    Mar |    Apr |    May |    Jun |    Jul |    Aug |    Sep |    Oct |    Nov |    Dec |
|--------------------------------------|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|
| Average monthly irradiation [kWh/m2] | 139.94 | 148.49 | 183.66 | 194.81 | 214.98 | 220.92 | 229.59 | 222.68 | 191.5  | 169.73 | 135.31 | 136.57 |
| Average monthly consumption [kWh]    | 252.67 | 156.67 | 177.33 | 221.33 | 187.67 | 197.89 | 266.5  | 387    | 332.67 | 216.33 | 201    | 189.33 |

Number of 400.0 W modules required: 8

<img src=""assets/average_monthly_irradiation.png"" width=""400""> <img src=""assets/average_monthly_consumption.png"" width=""400"">

## Conclusion

This code does not carry out a detailed study of the user's needs nor does it propose a viable solution, but rather, it makes a simple estimate of the solar capacity necessary to satisfy their needs, to see graphically what the consumption trend is and the irradiation that reaches their area.

For an in-depth study, it is necessary to take into account important factors such as: Forecast increase in demand, what the self-consumption is aimed at, use of batteries, connection to the grid, annual or weekend use, etc.

Other factors such as the number and capacity of batteries, series/parallel connection of panels, inverter or charge regulator should also be taken into account.

[^1]: The optimal angle refers to the inclination of the photovoltaic panel. Another thing is the orientation that if we are in the northern hemisphere the panels will be oriented to the south and if we are in the southern hemisphere to the north (as long as it is possible).
",1,1,1,0,renewable-energy,"[api, irradiation, photovoltaic, photovoltaic-panels, python, renewable-energy, self-consumption, solar-energy]",00000
1276,smart-control-algorithm,philippedeb,N/A,https://github.com/philippedeb/smart-control-algorithm,https://api.github.com/repos/philippedeb/smart-control-algorithm,Simulation environment and concise implementation of proposed smart control algorithm for renewable energy assets.,"# Smart control algorithm
This repository contains a concise implementation of the smart control algorithm proposed in a research paper by Philippe de Bekker. Based on analysing various designed cases, the paper defined the heuristics of a smart control algorithm that matches power supply and demand optimally. The core of improvement of the smart control algorithm is exploiting future knowledge, which can be realized by current state-of-the-art forecasting techniques, to effectively store and trade energy. In addition, a simulation environment is provided.

[![DOI](https://zenodo.org/badge/559328784.svg)](https://zenodo.org/badge/latestdoi/559328784)

## Installation

Use the package manager [pip](https://pip.pypa.io/en/stable/) to run this repository.

```bash
pip install -r requirements.txt
```

## Usage
Create an instance of `OptimizedModel` (i.e. provide data and a `Battery` instance) and call `run()`.


## License
[No License](https://choosealicense.com/no-permission/) (= No Permission)
",1,1,1,0,renewable-energy,"[algorithmic-trading, energy-efficiency, renewable-energy, smart-grid]",00000
1277,Self-Sufficient_Light_Source,Sam-Schimanski,N/A,https://github.com/Sam-Schimanski/Self-Sufficient_Light_Source,https://api.github.com/repos/Sam-Schimanski/Self-Sufficient_Light_Source,The design and build of a self-sufficient light source. Ideally powered by a wind turbine and controlled by an Arduino microcontroller.,"# Self-Sufficient_Light_Source
The design and build of a self-sufficient light source. Ideally powered by a wind turbine and controlled by an Arduino microcontroller.

The purpose of this project is to design a self-sufficient light source that will be used to light the front of a house.
The switching on and off of the light will be performed by a PIR motion sensor and Pico microcontroller. The power generated for the controller, sensor,
and light will be supplied ideally purely by a roof mounter horizontal axis wind turbine (**HAWT**). Excess generation from the HAWT would be stored within a battery, to discharge out to the peripheral components e.g., controller, light, and sensor. 
",1,1,1,0,renewable-energy,"[arduino, arduino-code, arduino-leonardo, battery, c-plus-plus, electrical-engineering, electronics, electronics-engineering, motion-sensor, motion-sensors, renewable-energy, sketch]",00000
1278,C2C-Data-Platform,filip-r-casey,N/A,https://github.com/filip-r-casey/C2C-Data-Platform,https://api.github.com/repos/filip-r-casey/C2C-Data-Platform,A data aggregation platform that combines various data sources to aid in the development of renewable energy.,"# Communities to Clean API Hub

![Image of Wind Data Request Form](app-info/images/WindForm.png ""Wind Request Form"")
![Image of Wind Data Response UI](app-info/images/WindResponse.png ""Wind Response"")

## Description

A data aggregation platform that combines various data sources to aid in the development of renewable energy. This project is specifically meant to assist local community leaders in making decisions without expensive siting and consultation.

* **Technology Stack**: Backend written in ExpressJS. Front-end created using VueJS framework

* **Status**: Project currently has 5 wind energy resources implemented.

* **Instances**: Demo is currently not hosted

* **Project Purpose**: Although the data that is presented here can also be found in the APIs that this project accesses, this is meant to act as a simplified middle layer that greatly speeds up the process for renewable energy specific applications
  
## Dependencies

* Docker
* nodejs
  * For specific packages check the package.json
* API keys/developer accounts

## Installation

To install the project, simply clone this repository to your computer. If git is installed, navigate to the directory you wish to clone it to and execute this command:

```bash
git clone https://github.com/filip-r-casey/C2C-API-HUB
```

## Usage

In order for the APIs to be accessed properly, many of them require developer keys. For privacy reasons, personal developer keys **should not** be included in this repository. Links to get your own API keys are here:

* [NASA POWER](https://api.nasa.gov/)
* [Wind Toolkit](https://developer.nrel.gov/signup/)
* [Open Weather](https://openweathermap.org/appid)

In order for the application to use these keys, you must create a `.env` file in the ""api"" directory. Follow this template for it to work properly:

The application can be ran in two ways, both explained below.

### Docker

First ensure that docker is installed on your machine. Then open a terminal window in the project directory

```bash
docker build -t c2c-data-platform-image
docker run -d --name c2c-data-platform
```

This will start the container that runs the web application. To access the app, navigate to [PORT 8080](http://0.0.0.0:8080/)

```txt
NASA_POWER_API_KEY=""{API_KEY}""
WIND_TOOLKIT_API_KEY=""{API_KEY}""
OPEN_WEATHER_API_KEY=""{API_KEY}""
EMAIL=""{EMAIL}""
```

### Node.js

If you'd prefer not to use docker, the application can also be run using Node.js. If you don't have Node.js installed, you can install it [here](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).

1. Navigate to the ""api"" directory and run the backend

    ```bash
    cd api
    npm run start
    ```

2. Navigate to the ""web-app"" directory and serve the front-end

    ```bash
    cd ../web-app
    npm run serve
    ```

3. Access the platform at [PORT 8080](http:/0.0.0.0:8080) and the API at [PORT 3080](http:/0.0.0.0:3080)

Note: These services are hosted at different ports, but when a request is made through the front-end, it will proxy all requests with the ""/api"" endpoint to port 3080, meaning that the data can be accessed through both.

## Testing

Testing is done with the Jest framework, using supertest to make fake API calls. To run tests on your machine, simply run ```npm run start``` in the ""api"" directory. Otherwise, everytime that a push is made to a branch, the tests will be run automatically through GitHub Actions.

## Documentation

Since the project is not currently hosted, there is nowhere that documentation is easily accessible. Currently, the best way to get access to this, is to run the project on your machine, and access the ""api/docs"" endpoint. The documentation is done according to Open API standards (PKA Swagger).

## Known Issues

* Wind Toolkit API cannot return a JSON file for data larger than a couple of megabytes, so a download link is provided as a substitute

## Data sources

This app sources information from the following APIS:

* [NASA POWER](https://power.larc.nasa.gov/docs/services/api/)
* [Wind Toolkit](https://www.nrel.gov/grid/wind-toolkit.html)
* [TAP](https://dw-tap.nrel.gov/#api-Wind_Speed)
* [Open Weather](https://openweathermap.org/api) - Support TBD due to cost restrictions
* [National Weather Service](https://www.weather.gov/documentation/services-web-api#/default/station_observation_list)
* [NCEI](https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation)
  
A report on the types of information available from these sources and the assumptions that they make can be found here: [Filip Casey SULI Paper](https://drive.google.com/file/d/10BlTYDYR5AO15iI6XRxVjnxyXnBcUEuk/view?usp=sharing). And a simplified comparison will be included in the website's user interface soon.

## Getting Help

If your question is not answered here email: filip.r.casey@gmail.com
",1,1,1,0,renewable-energy,"[data-aggregation, renewable-energy]",00000
1279,Solar-Irradiance-Forecasting-using-ANNs-from-Scratch,MFHChehade,N/A,https://github.com/MFHChehade/Solar-Irradiance-Forecasting-using-ANNs-from-Scratch,https://api.github.com/repos/MFHChehade/Solar-Irradiance-Forecasting-using-ANNs-from-Scratch,This works develops a deep artificial neural network (ANN) model to forecast solar irradiance at a given time and place based on several meteorological factors. ,"# Solar-Irradiance-Forecasting-using-ANNs-from-Scratch
This works develops a deep artificial neural network (ANN) model to forecast solar irradiance at a given time and place based on several meteorological factors. 

The ANN is designed from scratch and optimized using gradient and stochastic gradient descent with diminishing step-size and gradient clipping. The weights of the neural network are initialized using a special scheme. The performance of the model is also compared to that of a linear regression model, also built from scratch. 

Special thanks to contributors on https://www.kaggle.com/datasets/dronio/SolarEnergy for providing the dataset, EDA, data preprocessing and a starting point for the neural network archiecture. It should be noted that the works present in the mentioned source utilize built-in functions for the machine learning task as opposed to this work and do not go through the process of optimization, step-size decision, gradient clipping and weights initialization. 

As for this project, one can run the main file, and it will take care of importing other files. A PDF report is also found in the repository. A presentation file is also found. 
",1,1,2,0,renewable-energy,"[artificial-neural-networks, forecasting-models, machine-learning, optimization, renewable-energy, solar-energy]",00000
1280,AEMO-POWERBI,djouallah,N/A,https://github.com/djouallah/AEMO-POWERBI,https://api.github.com/repos/djouallah/AEMO-POWERBI,Analyzing AEMO data using PowerBI ,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,2,0,renewable-energy,"[aemo, powerbi, renewable-energy, solar-energy]",00000
1281,Water-Wave-Funneling-Power-Generator,Aightm8,N/A,https://github.com/Aightm8/Water-Wave-Funneling-Power-Generator,https://api.github.com/repos/Aightm8/Water-Wave-Funneling-Power-Generator,A renewable energy solution that harnesses sea wave power in a new way,"# Water-Wave-Funneling-Power-Generator </br>
<br>
A renewable energy solution that harnesses sea wave power in a new way <br>
This is currently a concept, a working model is yet to be built.
<br>
<br>

![alttext](https://github.com/Aightm8/Water-Wave-Funneling-Power-Generator/blob/master/WWFPG%20white%20background.PNG)


**Description and operation**
</br>
</br>
There are pre-existing wave power energy generation systems ranging from simple buoys oscillating to the waves to turbines that use waves to generate a pressure difference that pushes air through them. This invention is different, inspired by tidal bore phenomena; it consists of an inlet that leads to a funnel that channels water waves to the generator region. The inlet, funnel, generator region and outlet make up an enclosure for the waves, enclosed from the sides and the bottom. Therefore as the waves pass through, the channel constricts and a volume influx is created. This volume influx is compensated for by raising the height of the waves. The generator region consists of a plurality of buoys and generator units; the Point absorbers ( buoys ) oscillate to the sea waves. A crank mechanism converts the mechanical oscillatory motion to mechanical circular motion at a generator shaft connected to a generator that converts the mechanical energy to electrical energy. As the waves that make the buoys oscillate get higher, more energy can be generated. Linear absorbers may be used instead of point absorbers. 
</br>
</br>
**Advantages of the WWFPG** 
</br>
</br>
Sea waves have a certain energy per unit area. As the funnel channels the waves, the energy per unit area is increased. The waves in the generator region would have a higher value for energy per unit area that those at the inlet. Because of this, the WWFPG is the equivalent of having the plurality of generator units but expanding to cover a large area. The WWFPG however would be less costly to build and maintain as the generator region covers a smaller area.
The structure could also be used for secondary applications. For example: To collect trash flowing back towards land; Small wind turbines or solar panels could be added to collect more energy; It could help collect data for research and meteorology; It can be used to dock small boats and recreational vehicles; It could also be used similar to a pier, allowing people to use it as a recreational point which could circumvent any visual pollution it would cause. Wave power in itself boasts several advantages being renewable, environmentally freindly, abundant and easily predictable.
</br>
</br>
![alttext](https://github.com/Aightm8/Water-Wave-Funneling-Power-Generator/blob/master/WWFPG%20used%20for%20%20recreation.PNG)
</br>
**Limitations and solutions** 
</br>
</br>
One can expect the WWFPG to also harbour the disadvantages of wave power such as the disturbance of marine ecosystems, disturbance for marine vessels and visual pollution. However, the last two can be avoided by applying the aforementioned methods. The first would have to be avoided by staying clear of coral reefs and any other hotspots for marine life. The structure is only attached to the sea bed at the anchors so there is less disturbance. It is possible for animals to enter the WWFPG through the inlet but eventhough the waves inside will be powerful and the buoys will be oscillating, animals can still survive by swimming below the wave troughs and buoys. Or a net may be added to the inlet. Considering noise pollution, the mechanical noise could be isolated within the generator units, the sound from the funneled waves would be loud but the sound of the waves should be normal enough for wildlife and residents, despite being louder.
</br>
</br>
Diagrams and design files of the WWFPG are available above.
</br>
</br>
The Water Wave Funneling Power Generator is licensed under the TAPR Open Hardware License (www.tapr.org/OHL).
In support of open source innovation in strengthening renewables and combating climate change.
",1,1,1,0,renewable-energy,"[green, opensource, power-generator, renewable-energy]",00000
1282,ETHLagos-Hackathon,abdulqadirfaruk,N/A,https://github.com/abdulqadirfaruk/ETHLagos-Hackathon,https://api.github.com/repos/abdulqadirfaruk/ETHLagos-Hackathon,Hackathon focused on building blockchain solutions for renewable energy in Nigeria,"# ETHLagos-Hackathon
## Ethereum-ipfs  
This is the first developers challenge at the ETHLagos hackathon **learning phase**.  
  
**My Task**:   
Build a Decentralized App which enables users to share files on the [ethereum blockchain](https://ethereum.org/en/) through [IPFS (InterPlanetary File System)](https://ipfs.io/). With [reference](https://blog.goodaudience.com/ethereum-ipfs-react-dapp-tutorial-pt-1-a9dfd5079491) from [Alexander Ma](https://github.com/Alex6614).  
**End goal**:   
Gain hands-on experiennce and face the challenges involved in building a DApp using [Remix](https://remix.ethereum.org/), [ganache-cli](https://github.com/trufflesuite/ganache-cli), [truffle](https://github.com/trufflesuite/truffle), [metemask](https://metamask.io/) and react.  
",1,1,1,0,renewable-energy,"[blockchain, ethereum, remix, renewable-energy, solidity, truffle]",00000
1283,adaptive-solar-tree,syalabi-seet,N/A,https://github.com/syalabi-seet/adaptive-solar-tree,https://api.github.com/repos/syalabi-seet/adaptive-solar-tree,The purpose of this project is to train an adaptive solar panel robotic system using reinforcement learning combining shadow detection and solar tracking to maximize power outputs,"# Adaptive Solar Tree

## Abstract
Modern solar panel systems have achieved full solar
tracking capabilities but lacks the ability to handle power loss
due to shadowing. In this work, we present a novel and intuitive
method of increasing solar outputs by leveraging reinforcement
learning and a 5-DOF robotic arm manipulator design. We utilized in-game cameras to emulate shadow ratios of solar modules
derived from current-voltage sensor readings. The reinforcement
agent was trained in a simulated environment equipped with
geographically-accurate sun positioning and shadow casting using
ray-tracing. Our approach showed promising results in simplifying and integrating solar tracking and shadow detection.
[Publication link](Misc/Adaptive_Solar_Tree_A00229978A_AHMEDSYALABISEET.pdf)

## System Architecture
![Image](Misc/Images/SystemArch.png)

## Episodic flow
![Image](Misc/Images/EnvironmentArch.png)

## Environment
Simulation environment was coded in C# using Unity 3D game engine.
### Observation space (15 elements)
- Location's latitude and longitude (2 states, float)
- Solar altitude and azimuth (2 states, float)
- Shadow ratio per module (6 states, float)
- Current motor angles in degrees (5 states, float)
### Action space
- Target angle of all motors in degrees (5 continuous values)
### Rewards
- +1 when all solar panels are within
    - incidence angle limit < 15 degrees
    - shadow ratio limit < 0.1
- -1 when collision occurs
- -0.001 for every time step
### Episode length 
- 3000 steps

![Image](Misc/Images/DemoPhoto.png)",1,1,1,0,renewable-energy,"[computer-vision, ml-agents, physical-computing, pytorch, raspberry, reinforcement-learning, renewable-energy, solar-energy, unity3d]",00000
1284,PV-output-forecast-analysis,Ngocnguyenlab,N/A,https://github.com/Ngocnguyenlab/PV-output-forecast-analysis,https://api.github.com/repos/Ngocnguyenlab/PV-output-forecast-analysis,Providing and analyzing the database of PV output forecast errors to examine what drives the accuracy of PV output forecasts,"# PV-output-forecast-analysis
Due to the stochastic nature of photovoltaic (PV) power generation, there is high demand for forecasting PV output to better integrate PV generation into power grids. Systematic knowledge regarding the factors influencing forecast accuracy is crucially important, but still mostly unknown. In this paper, we review 180 papers on PV forecasts and extract a database of forecast errors for statistical analysis. We show that among the forecast models, hybrid models consistently outperform the others and will most likely be the future of PV output forecasting. The use of data processing techniques is positively correlated with the forecast quality, while the lengths of the forecast horizon and out-of-sample test set have negative effects on the forecast accuracy. We also found that the inclusion of numerical weather prediction variables, data normalization, and data resampling are the most effective data processing techniques. Furthermore, we found some evidence for “cherry picking” in reporting errors and recommend that the test sets be at least one year to better assess models’ performance. The paper also takes the first step towards establishing a benchmark for assessing PV output forecasts.

# Instruction on using the data and the code 
1. Final_code is the source code used to analyse the database 
2. The ""data"" excel file has the database and the explanation for the variables. 
3. The data_limit_new covers the database in the format of R-data for analysis.
",1,1,1,0,renewable-energy,"[power-forecasting, renewable-energy, solar-energy, statistical-analysis, systematic-reviews]",00000
1285,CDR-,Epurepass,N/A,https://github.com/Epurepass/CDR-,https://api.github.com/repos/Epurepass/CDR-,CDR is a decentralized native cryptocurrency employed by Epurepass. ,"# CDR-
 CDR is a decentralized native cryptocurrency employed by Epurepass. 
 
 Scarcity = CDR energy.

 Etherscan: https://etherscan.io/token/0x9bcab41dd68329af9839dbcd021acf39a40abed2
 
 Contract Address:
https://etherscan.io/address/0x9bcab41dd68329af9839dbcd021acf39a40abed2 

",1,1,1,0,renewable-energy,"[biomass, carbon-footprint, cdr-crypo, cryptocurrency, epurepass, epurepass-labs-inc, fintech, geothermal, recyling, renewable-energy, solar, wind]",00000
1286,sakshi-mishra.github.io,sakshi-mishra,N/A,N/A,https://api.github.com/repos/sakshi-mishra/sakshi-mishra.github.io,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C178:2EE5:2878C53:5343CFB:652242C1.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1287,BBearsRenewableEnergyNFT,BlockBearsV1,N/A,N/A,https://api.github.com/repos/BlockBearsV1/BBearsRenewableEnergyNFT,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C158:3119:2C0D413:5A492D3:652242C1.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1288,us-power-plants-visualization,phillipashford,N/A,N/A,https://api.github.com/repos/phillipashford/us-power-plants-visualization,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C19E:505E:2E851F:606BA1:652242C2.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1289,Renewable_Energy_Integration,PinaPhD,N/A,N/A,https://api.github.com/repos/PinaPhD/Renewable_Energy_Integration,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C183:1CC6:2A55B8B:56E4A8D:652242C2.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1290,SoPan-Finder,YohanssenPardede,N/A,https://github.com/YohanssenPardede/SoPan-Finder,https://api.github.com/repos/YohanssenPardede/SoPan-Finder,"SoPan Finder is an innovative solar panel recommendation platform that leverages weather data collection, machine learning algorithms, and real-time energy production prediction to assist individuals and businesses in making informed decisions about adopting solar energy.","# SoPan-Finder

![logo SoPan.png](https://github.com/YohanssenPardede/SoPan-Finder/blob/ed16622623954e28fa4a54ac207ddc64f6b92535/logo%20SoPan.png)

## Introduction
SoPan Finder is an innovative solar panel recommendation platform that leverages weather data collection, machine learning algorithms, and real-time energy production prediction to assist individuals and businesses in making informed decisions about adopting solar energy. Our mission is to simplify the process of assessing the suitability of installing solar panels and empower users to embrace renewable energy solutions. 

## Background
Based on the article “A Technical and Economic Potential of Solar Energy Application with Feed-in Tariff Policy in Indonesia” (Fathoni, Utama and Kristianto, 2014) Renewable energy especially solar energy is one of the most potential energy sources as Indonesia lies in the equator line where the daylight is abundant and available throughout the year. However, due to the high initial investment costs and many people who do not understand the steps needed to choose and install the most suitable renewable energy systems based on their living environment, especially photovoltaic systems, we would like to introduce SoPan (Solar Panel) Finder as a solution. SoPan Finder will collect weather data (temperature, humidity and wind speed). LSTM algorithm is implemented on the machine learning model to predict the energy production for the solar panel. The platform will utilize user’s input to estimate the energy produced from the solar panel in real-time or in a certain period of time. Based on the result of energy production analysis, the user will be able to consider the suitability of installing the solar panels on their house. In this platform, users will also be able to buy products related to the solar panel recommended by the system.

## Team Member
| Student ID | Name | University | Path |
| ----------- | :--------- | :----------: | :----------: |
| A264DSY1409 | Christine | Universitas Multimedia Nusantara Jakarta | Mobile Developer |
| A264DSY1420 | Ela Setiorini | Universitas Multimedia Nusantara Jakarta | Mobile Developer |
| C088DSY3277 | Nisa Agni Afifah | Sekolah Tinggi Teknologi Cipasung | Cloud Computing|
| C240DSX2669 | Rizki Zulfian Nasrul Muna | Universitas Mataram | Cloud Computing |
| M350DSX0236 | Yohanssen Pradana Pardede | Universitas Sumatera Utara | Machine Learning |
| M350DSY0442 | Nasywa Choiriana Safitri | Universitas Sumatera Utara | Machine Learning |

## Project Scope
* A system to predict solar panel performance
* A system to provide solar panel recommendations to users

### Branch
Our repository has 5 branches:
* machine-learning to see the progress of machine learning.
* auth-CC, and predict-API to see the progress of Cloud Computing
* mobile-dev to see the progress of Mobile Developer
* main to see profile our repository
",1,1,1,0,renewable-energy,"[android-application, cloud, cloud-computing, expressjs, lstm, machine-learning, renewable-energy, solar-energy, solar-panels]",00000
1291,app-estimacion-electricidad,Frozen-Burrito,N/A,N/A,https://api.github.com/repos/Frozen-Burrito/app-estimacion-electricidad,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C12F:458F:2C63D76:5B0893C:652242C3.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1292,C2C-API-HUB,filip-r-casey,N/A,N/A,https://api.github.com/repos/filip-r-casey/C2C-API-HUB,N/A,"# DEPRECATED:Communities to Clean API Hub

## For updated git repo: https://github.com/filip-r-casey/C2C-Data-Platform

## Description

A data aggregation platform that combines various data sources to aid in the development of renewable energy. This project is specifically meant to assist local community leaders in making decisions without expensive siting and consultation.

![C2C API Hub screenshot](./app_info/images/app-screenshot.png)

* **Technology Stack**: This is a web app/api primarily written in nodejs. HTML/EJS are used for the front-end

* **Status**: This project is in an incredibly preliminary phase. This repository is mostly for organization and internal presentation, **not for community use**

* **Instances**: Demo is currently not hosted

* **Project Purpose**: Although the data that is presented here can also be found in the APIs that this project accesses, this is meant to act as a simplified middle layer that greatly speeds up the process for renewable energy specific applications
  
## Dependencies

* Docker
* nodejs
  * For specific packages check the package.json
* API keys/developer accounts

## Installation

To install the project, simply clone this repository to your computer. If git is installed, navigate to the directory you wish to clone it to and execute this command:

```bash
git clone https://github.com/filip-r-casey/C2C-API-HUB
```

## Usage

First ensure that docker is installed on your machine. Then open a terminal window in the project directory

```bash
docker compose build
docker compose up
```

This will start the container that runs the web application. To access the app, navigate to [PORT 3000](http://0.0.0.0:3000/)

In order for the APIs to be accessed properly, many of them require developer keys. For privacy reasons, personal developer keys **should not** be included in this repository. Links to get your own API keys are here:

* [NASA POWER](https://api.nasa.gov/)
* [Wind Toolkit](https://developer.nrel.gov/signup/)
* [Open Weather](https://openweathermap.org/appid)

In order for the application to use these keys, you must create a `.env` file in the application root directory. Follow this template for it to work properly:

```txt
NASA_POWER_API_KEY=""{API_KEY}""
WIND_TOOLKIT_API_KEY=""{API_KEY}""
OPEN_WEATHER_API_KEY=""{API_KEY}""
EMAIL=""{EMAIL}""
```

## Testing

Tests not currently included but will be added in the future

## Known Issues

* Wind Toolkit API cannot return a JSON file for data larger than a couple of megabytes, so a download link is provided as a substitute

## Data sources

This app sources information from the following APIS:

* [NASA POWER](https://power.larc.nasa.gov/docs/services/api/)
* [Wind Toolkit](https://www.nrel.gov/grid/wind-toolkit.html)
* [TAP](https://dw-tap.nrel.gov/#api-Wind_Speed)
* [Open Weather](https://openweathermap.org/api) - Support TBD due to cost restrictions
* [National Weather Service](https://www.weather.gov/documentation/services-web-api#/default/station_observation_list)
* [NCEI](https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation)
  
A report on the types of information available from these sources and the assumptions that they make is in progress

## Getting Help

Currently, extensive documentation is not available. If your question is not answered here email: filip.r.casey@gmail.com
",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1293,Single-Axis-Solar-Tracker,Rushik2900,N/A,https://github.com/Rushik2900/Single-Axis-Solar-Tracker,https://api.github.com/repos/Rushik2900/Single-Axis-Solar-Tracker,Automated single axis Photo-Voltaic(PV) panel (Solar Panel) rotation to achieve maximum surface area exposure to sunlight. This will optimize solar power generation with 20%-30% improvement in efficiency over fixed panel installations.,# Single-Axis-Solar-Tracker,1,1,1,0,renewable-energy,"[renewable-energy, solar-energy, solar-system, solar-tracker, solar-tracking-panels]",00000
1294,KiteEnergySystems,AlsonLee87,N/A,https://github.com/AlsonLee87/KiteEnergySystems,https://api.github.com/repos/AlsonLee87/KiteEnergySystems,This is a simulation frame work for both airborne and underwater kite energy system,"# KiteEnergySystems

Kite energy system simulation repo, containing a simulation framework for kite energy system using C++ language

## Prequest
+ LCM 
+ Boost
+ Eigen3

## How to Build the Repo
+ git clone
+ cd KiteEnergySystems && ./scripts/build.sh

## Run the Simulation
+ ./scripts/run_sim.sh
",1,1,2,0,renewable-energy,"[airborne-wind-energy, renewable-energy, simulation-framework, underwater-kite-energy]",00000
1295,BPF-Island-Pulse,mikulina,N/A,N/A,https://api.github.com/repos/mikulina/BPF-Island-Pulse,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DB:16F7:26896A2:4F142AB:65224036.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1296,thematic-dataset-renewable-energy,Real-DigitalMind,Real-DigitalMind,https://github.com/Real-DigitalMind/thematic-dataset-renewable-energy,https://api.github.com/repos/Real-DigitalMind/thematic-dataset-renewable-energy,High quality thematic datasets repository related to renewable energy ecosystem such Large Scale Solar (LSS) farm.,"## Thematic Dataset: Renewable Energy
High quality thematic datasets repository related to renewable energy ecosystem.

## Datasets
- Large Scale Solar (LSS) Farm

### Versions
- Basic Version (Most basic dataset)
- Curated Version (Trimmed and well-organized dataset)
- Alpha Version (Attributes-rich dataset with various format)

## Maps

### Large Scale Solar (LSS)

#### Point Maps
Point maps of LSS farms in Peninsular Malaysia. The magnitude of power generation capacity is indicated by the size of the circles in MegaWatts (MW).

![alt text](https://github.com/Real-DigitalMind/thematic-dataset-renewable-energy/blob/main/image/Large%20Scale%20Solar%20(LSS)%20Point%20Maps.png)

Close-up view of LSS farm in Bukit Selambau, Sungai Petani, Kedah, depicted on point maps.

![alt text](https://github.com/Real-DigitalMind/thematic-dataset-renewable-energy/blob/main/image/Large%20Scale%20Solar%20(LSS)%20Point%20Maps%20(Bukit%20Selambau).png)

## Contact
For inquiries regarding the complete version of this dataset, contact:
ahmad.muzaffar@realdigitalmind.com

",1,1,0,0,renewable-energy,"[geodata, gis, large-scale-solar, point-maps, polygon-maps, renewable-energy, solar-panel, spatial-data, thematic-dataset]",00000
1297,RETA,ThecoderPinar,N/A,https://github.com/ThecoderPinar/RETA,https://api.github.com/repos/ThecoderPinar/RETA,"🍃 Explore the world of renewable energy production, analyze historical data, and predict sustainable energy trends. Join us on the journey to a greener future!","<!-- RETA - Renewable Energy Production Analysis -->


# RETA - Renewable Energy Analysis

Welcome to the RETA project repository! 🌿 In our quest for a sustainable future, we've analyzed historical data, predicted renewable energy trends, and shaped the path towards cleaner energy production.

## 🚀 Project Highlights

- **Data Exploration & Cleaning**: Ensuring pristine data for accurate insights.
- **Data Visualization**: Turning data into captivating visuals.
- **Time Series Analysis**: Uncovering the hidden patterns within time.
- **Forecasting Models**: Gazing into the future of renewable energy.
- **Results & Recommendations**: Crafting actionable steps for sustainability.

## 🌍 Getting Started

1. Clone this repository.
2. Explore the project files.
3. Check out the comprehensive project report for in-depth insights.

## 💡 How to Use

- **Read the Report**: Dive into our detailed analysis for a holistic understanding.
- **Contribute**: Share your thoughts, ideas, and findings.
- **Spread the Word**: Let's inspire change for a greener planet!



## 🌟 Get Involved

Join the conversation and make a difference with these hashtags:

- #RETAProject
- #RenewableEnergy
- #Sustainability
- #CleanEnergy
- #DataAnalysis
- #EnergyFuture

Let's shape a greener future together! 🌟

---

Feel free to customize this README.md file further to suit your project's specific needs on GitHub. You can also add more icons or images as needed.
",1,1,1,0,renewable-energy,"[arima, clean-energy, data-analysis, data-science, data-visualization, energy-future, forecasting-models, innovation, renewable-energy, sustainability, time-series]",00000
1298,Arduino-Solar-Tracker,the-engineer4,N/A,https://github.com/the-engineer4/Arduino-Solar-Tracker,https://api.github.com/repos/the-engineer4/Arduino-Solar-Tracker,Automated single or dual axis Photo-Voltaic(PV) panel array rotation to achieve maximum surface area exposure to sunlight with automatic nightly orientation reset.  This will optimize solar power generation with 40%-60% improvement in efficiency over fixed PV panel installations.  ,"# Arduino-Solar-Tracker
Automated single or dual axis Photo-Voltaic(PV) panel array rotation to achieve maximum surface area exposure to sunlight with automatic nightly orientation reset.  This will optimize solar power generation with 40%-60% improvement in efficiency over fixed PV panel installations.  
",1,1,1,0,renewable-energy,"[renewable-energy, solar-energy, solar-system, solar-tracking-panels, solarpanels]",00000
1299,renewables-ninja-client,GiorgioBalestrieri,N/A,https://github.com/GiorgioBalestrieri/renewables-ninja-client,https://api.github.com/repos/GiorgioBalestrieri/renewables-ninja-client,Minimal Python client for renewables ninja,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",1,1,2,1,renewable-energy,"[energy, open-data, python, renewable-energy, renewables-ninja]",00000
1300,renewable-energy-argentina-map,AlejandroFNadal,N/A,https://github.com/AlejandroFNadal/renewable-energy-argentina-map,https://api.github.com/repos/AlejandroFNadal/renewable-energy-argentina-map,"A simple map I made using Geopandas, of every  renewable power plant in Argentina","# Hydroelectric-Argentina-Map
A map made with Geopandas and Folium, of every hydroelectric plant in Argentina. You can access it at:

[Renewable Power Plants in Argentina](http://alejandronadal.com/map_renewables.html)

It uses MarkerClusters as layers and these can be disabled and enabled at will. Different sources of energy are shown using different colors. Plants that are not complete are shown as partial circles. 

The legend in the map was made using HTML and CSS. 

Some screenshots:

![image](https://user-images.githubusercontent.com/32724827/166163580-3cd01b74-f103-453f-962f-174a86c0f1bb.png)
![image](https://user-images.githubusercontent.com/32724827/166163711-0a97235b-9f41-4b67-b984-0cb7ece8bc23.png)


",1,1,1,0,renewable-energy,"[argentina-data, data-science, folium, map, python3, renewable-energy]",00000
1301,PPC_Sim,JoshMcguigan,N/A,https://github.com/JoshMcguigan/PPC_Sim,https://api.github.com/repos/JoshMcguigan/PPC_Sim,A solar power plant controller simulation and testing tool,"# PPC_Sim

![PPC Sim - Simulation Settings](https://cloud.githubusercontent.com/assets/22216761/19877705/c3c2748e-9f9e-11e6-8ccc-38e148be91cd.png)

![PPC Sim - Irradiance Settings](https://cloud.githubusercontent.com/assets/22216761/19877703/c3bfab3c-9f9e-11e6-9aa0-7b5a3007918e.png)

![PPC Sim - Set Point Settings](https://cloud.githubusercontent.com/assets/22216761/19877704/c3c21ca0-9f9e-11e6-9836-8bcbb4010772.png)

![PPC Sim - Controller Settings](https://cloud.githubusercontent.com/assets/22216761/19877702/c3a9c7e0-9f9e-11e6-94e3-2c87b5314fa1.png)
",1,1,4,0,renewable-energy,"[renewable-energy, simulation, solar-energy]",00000
1302,api-ER-minene,fbustos-o,N/A,https://github.com/fbustos-o/api-ER-minene,https://api.github.com/repos/fbustos-o/api-ER-minene,"Aplicación en Python para consultar la API de Energías Renovables del Ministerio de Energía, Chile. ","# api-ER-minene
Aplicación en Python para consultar la API de Energías Renovables del Ministerio de Energía, Chile. https://api.minenergia.cl/

### Forma de uso
1. Registrarse a la herramienta online de la API deEnergías Renovables del Ministerio de Energía: https://api.minenergia.cl/register/
2. Una vez lista su cuenta, enviar un correo a soporte solitando una API_KEY, la cave que permitirá acceder a través del programa ""API.py""
3. Con su ""API_KEY"" puede ingresarla en el código en la linea 22.

![image](https://user-images.githubusercontent.com/121578605/228037015-58b5ae67-f4bd-4ac9-9524-f70a5508ed78.png)

4. Una vez ingresada la API_KEY puede ejecutar el programa que llamará al archivo JSON de ejemplo, que se puede modificar dentro de la misma API. 
5. Si desea re-emplazar el archivo JSON de ejemplo puede obtener otra estructura a gusto de la misma API: https://api.minenergia.cl/api/ en la sección Editor completo.

![image](https://user-images.githubusercontent.com/121578605/228028030-d24d5cd4-7a82-4bd5-a098-459e86b54e36.png)

## Uso de la API y Extracción de un archivo JSON

Una vez dentro de la API, se pueden seleccionar de manera interactiva el o los puntos a evaluar.

![image](https://user-images.githubusercontent.com/121578605/228037622-2dbe099e-e469-4e43-91d8-11796d355919.png)

También es posible agregar los sitios definidos en un archivo del formato CSV o KMZ, siguiendo las instrucciónes proporcionadas en la pestaña ""Subir Sitios"".

> **HINT: Es importante destacar que no se deben solictar más de 20 puntos simultaneamente, ya que el ancho de banda del servidor podría generar una falla y no entregar una respuesta. Para llamados masivos de más de 20 solicitudes es recomendable contactar al soporte de los Exploradores.**

Luego, se pueden seleccionar las variables a consultar para cada uno de los puntos seleccionados. 

![image](https://user-images.githubusercontent.com/121578605/228038408-a87b1ad4-f4fa-4d52-8367-326aaf3dbe70.png)

> **Mayor información sobre las variables disponibles en la API se encuentran en la última sección del README.md**

Con la información de variables se puede pasar al Paso 4, donde se describe el periodo de tiempo a consultar. Por defecto, se define el periodo como el año 2010 completo, que corresponde al periodo de simulación del modelo WRF. Sin embargo, se puede escoger cualquier periodo dentro del rango 1980 a 2017.

Con el periodo definido, en el paso 5, se puede definir el tipo de operación a relizar a la serie de tiempo (anual, mensual, diaria u horaria) y si desea incluir la estadística de año típico meteorológico (permite estimar los espacios de la serie de tiempo sin información con un año típicio meteorológico). Se puede seleccionar un estadistico a las variables, como: promedio, media, máxima o mínima. 

Con toda esta información se puede psar al ultimo paso donde se selecciona la forma de exportación de los datos. En este punto es donde se puede extraer el llamao en JSON para ser utilizado por el programa ""API.py"". Con este programa se pueden editar directamente parámetros del formato JSON extraído, lo que permite mayor dinámica en la consulta.

### Archivos que se pueden exportar
La API de Energías renovables permite extraer los datos solicitados en diversos formatos: 
1. JSON
2. Excel: .xlsx
3. CSV
4. Archivo de MATLAB

## Uso del visor Data_view.py

Se puede cargar la consulta directamente al Archivo Data_view.py, en la linea 26.
![image](https://user-images.githubusercontent.com/121578605/228936026-759daef7-df92-4a46-a66b-6b45cea6e645.png)

Ejecutando el archivo, si todo es correcto, debería ejecutar Pandas GUI: un panel interactivo para analizar los datos. Se debería ver de la siguiente manera:

![image](https://user-images.githubusercontent.com/121578605/228937258-4997a3b8-48f5-46ab-86ff-2cbc73355f5c.png)

Se puede graficar los datos por cada sitio en el menu superior donde indica ""Grapher"":

![image](https://user-images.githubusercontent.com/121578605/228937706-6c3ff64f-53f8-4a24-bbac-231df39b0fe3.png)

## Variables disponibles en la API
A continuación se muestra una descripción detallada a cada variable disponible en el API.

#### Velocidad de viento
La velocidad de viento (en metros por segundo) simulado por el modelo WRF (Weather Research and Forecasting). Se disponen datos de simulaciones realizadas para 2010 y 2015. Además, es posible acceder a datos reconstruidos para el periodo 1980 a 2017.

#### Potencia de Aerogenerador
Generación (kW) de una turbina eólica calculada a partir del viento simulado por el modelo numérico WRF

#### Dirección del viento
Dirección del viento (grados) simulado por el modelo numérico WRF

#### Temperatura en 2m
Temperatura ambiental (°C) modelada a 2m del suelo para el periodo 1980-2017

#### Humedad relativa
Humedad relativa a partir de la modelación de temperatura.

#### Evaporación
Evaporación de bandeja. Estimada con en método Penman-Montieth y calibrada con observaciones de la evaporación de bandeja de las observaciones nacionales de la DGA

#### Temperatura del suelo
Temperatura del suelo (°C) calculado a partir variables atmosféricas modeladas

#### Densidad del aire
Densidad del aire (kg/m3) simulado por el modelo WRF

#### Presión Atmosférica
Presión Atmosférica (hPa) simulada por el modelo WRF

#### Radiación Global Horizontal (WRF)
Radiación global (W/m2) que incide sobre un plano horizontal fijo, simulada por el modelo WRF

#### Radiación Global Horizontal
Radiación global (W/m2) que incide sobre un plano horizontal fijo, simulada por el modelo CLIRAD

#### Radiación Directa Normal
Radiación Directa Normalizada (W/m2) que incide sobre un plano que siempre está perpendicular al sol, simulada por el modelo CLIRAD

#### Radiación Global
Radiación global (W/m2) simulada por el modelo CLIRAD que incide sobre un plano de características definidas por el usuario

#### Radiación Directa
Radiación directa (W/m2) simulada por el modelo CLIRAD que incide sobre un plano de características definidas por el usuario

#### Radiación Difusa
Radiación difusa (W/m2) simulada por el modelo CLIRAD que incide sobre un plano de características definidas por el usuario

#### Radiación Reflejada del Suelo
Radiación reflejada del suelo (W/m2) simulada por el modelo CLIRAD que incide sobre un plano de características definidas por el usuario

#### Presencia Nubes
Presencia de Nubes (booleano) según imágenes visibles del satélite GOES

#### Presencia de Sombras
Presencia de sombras topográficas (booleano) calculado para cada sitio mediante un modelo de elevación digital del terreno de origen satelital

#### Elevación del sol
Elevación del sol (grados) con respecto al horizonte

#### Azimut del Sol
Azimut del sol (grados) respecto al Norte

#### Potencia Sistema Fotovoltaico
Generación (kW) de un sistema fotovoltaico calculada a partir de la radiación del modelo CLIRAD

#### Altura significativa
Altura significativa del Oleaje (m) corresponde a la media aritmética del tercio de olas más altas de un conjunto de olas, calculado a mediante los modelos numéricos SWAN y WWIII

#### Periodo medio
Periodo medio del Oleaje (s) es la media aritmética de los periodos del oleaje, calculado mediante los modelos numéricos SWAN y WWIII

#### Potencia de oleaje
Potencia del Oleaje (kW/m) es el flujo de energía obtenido de la relación entre Altura Significativa y Periodo Medio del oleaje, calculado mediante los modelos numéricos SWAN y WWIII
",0,0,1,0,renewable-energy,"[database, energy, energy-efficiency, energy-monitor, renewable-energy]",00000
1303,SASESCSC,mubarakky,N/A,https://github.com/mubarakky/SASESCSC,https://api.github.com/repos/mubarakky/SASESCSC,Stand Alone Solar Energy System Component Sizing Calculator,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,renewable-energy,"[php-beginners, renewable-energy, solar]",00000
1304,renewable-energy-nl,KnowSyms,KnowSyms,https://github.com/KnowSyms/renewable-energy-nl,https://api.github.com/repos/KnowSyms/renewable-energy-nl,RDF dataset for the CBS 84917ENG Renewable energy; final use table,"# CBS linked data: Renewable energy; final use (upd. may 2021)

This repository contains the dataset representing Dutch renewable energy as gross final consumption of energy. Figures are presented in an absolute values (in TJ), as well as related to the total energy use in the Netherlands.


Renewable energy is energy from wind, hydro power, the sun, the earth, biomass and heat from outdoor air. This is energy from the natural processes that is constantly replenished. Gross final consumption of energy is consumption of energy for energy-related purposes by the end-users without producing another usable energy commodity plus the use of the electricity and heat plus the distribution losses. End-users are the industry sectors, households, services, agriculture and transport. Data is available from 1990. This RDF dataset contains definitive figures up to and including 2018 and revised provisional for 2019. Figures of 2020 are provisional only.


Final consumption values are provided in TJ - TeraJoule (joule is a unit of energy equivalent to 0.24 calories). Final relative consumption is the gross final consumption of renewable energy as percentage of total gross final energetic energy consumption, calculated according the definitions from the EU directive on renewable energy from 2009.


The source [CSV data](https://opendata.cbs.nl/statline/portal.html?_la=en&_catalog=CBS&tableId=84917ENG&_theme=1032) was retrived from the web site of the CBS (Centraal Bureau voor de Statistiek).


## files
* [renewable_energy_nl.ttl](https://github.com/KnowSyms/renewable-energy-nl/blob/main/renewable_energy_nl.ttl) - Turle format
* [renewable_energy_nl.nt](https://github.com/KnowSyms/renewable-energy-nl/blob/main/renewable_energy_nl.nt) - N-Triples format


## disclaimer

Data is used under the following [disclaimer](https://www.cbs.nl/-/media/statline/documenten/disclaimer-open-data-v-2.pdf)
",0,0,1,0,renewable-energy,"[cbs, dutch, linked-data, linkeddata, rdf, renewable-energy, renewableenergy, semantic, sustainability]",00000
1305,Boost-Derived-Hybrid-Converter-With-Simultaneous-DC-and-AC-Outputs,zainalibhinder,N/A,https://github.com/zainalibhinder/Boost-Derived-Hybrid-Converter-With-Simultaneous-DC-and-AC-Outputs,https://api.github.com/repos/zainalibhinder/Boost-Derived-Hybrid-Converter-With-Simultaneous-DC-and-AC-Outputs,Boost Derived Hybrid Converter with Simultaneous DC and AC Outputs,"# Boost-Derived Hybrid Converter With Simultaneous DC and AC Outputs

![image](https://github.com/zainalibhinder/Boost-Derived-Hybrid-Converter-With-Simultaneous-DC-and-AC-Outputs/assets/109630795/9894c9d4-9ee6-4c77-a67f-8e7e67be8e98)

![cacacac](https://github.com/zainalibhinder/Boost-Derived-Hybrid-Converter-With-Simultaneous-DC-and-AC-Outputs/assets/109630795/5d286da4-ea78-420d-a142-6d5e350880e7)

## PACKAGE REQUIREMENTS

```bash
PSIM V11.1.5 - Powersim Inc. 
```

This is implementation IEEE transactions paper titled [Boost-Derived Hybrid Converter With Simultaneous DC and AC Outputs](https://ieeexplore.ieee.org/document/6553180?denied=)
and [PV Based Nano-Grid integrated with battery to Supply Hybrid Residential Loads using single-Stage-Hybrid Converter](https://www.researchgate.net/publication/338452475_Solar_PV_based_Nanogrid_Integrated_with_Battery_Energy_Storage_to_Supply_Hybrid_Residential_Loads_using_Single_Stage_Hybrid_Converter)

## ABOUT THE PROJECT

```
Normally in a Nano-grid architecture, dedicated power converters for both dc and ac loads are used
thus increasing the number of passive components and conductions losses. Here, a solar (PV) based
Nano grid integrated with battery storage is presented which can be used to supply ac and dc loads
simultaneously. The boost derived hybrid converter topology is used in this Nano grid which is
realized by replacing the controlled switch of single switch boost converter with a voltage source
bridge inverter. It also has an inherent shoot through protection in the inverter stage. It also
reduces the number of conversion stages whencompared with a conventional solar (PV) based systems
to supply the ac/dc loads. A non-isolated buck boost bidirectional DC-DC converter is used for
charging and discharging of the battery to support the Nano grid. A suitable Pulse width modulation
control strategy based on Uni-Polar sine PWM is implemented. The Converter is simulated in different
modes of operation. The simulation is done using PSIM software. Simulation results show the
suitability of the converter for the practical application.
 
```



## License
&copy; 
[ZAIN ALI BHINDER](https://github.com/ZAINALIBHINDER)
",0,0,1,0,renewable-energy,"[converter, mppt-charger, power-electronics, psim, renewable-energy]",00000
1306,SomBotsTelegram,som-labs,som-labs,https://github.com/som-labs/SomBotsTelegram,https://api.github.com/repos/som-labs/SomBotsTelegram,A bot of Telegram that calculate an invoice of Som Energia after asking som data of your actual invoice in your electric company,"# SomBotsTelegram
## How it works
**Demo: https://web.telegram.org/#/im?p=@SomProvesBot**

## Install
Install the packages of the requirements.txt file in a virtualenv

## Configuration (config.py)
In this file, you have to put the key of the Telegram Bot.

## Run
In a python server or your PC run inside a virtualenv
```
python SomBotTelegram.py
```

## TODO
*  Add translations
*  Add more contract types (DHA, DHS, 3.0...)
*  Link to contract form
*  Integration with Oficina Virtual
",0,0,3,0,renewable-energy,"[bot, renewable-energy, somenergia, telegram]",00000
1307,energized-together,better-together-org,better-together-org,https://github.com/better-together-org/energized-together,https://api.github.com/repos/better-together-org/energized-together,"Bringing energy production to your community, we connect for a brighter tomorrow.","# Energized Together

Bringing energy production to your neighbourhood, we connect for a brighter tomorrow.

Energy production, storage, transportation and consumption can be decentralized. Neighbourhoods, buildings, and individual units can become energy self-sufficient through investment in energy infrastructure. 

The ideal solution might look like this:
- Each household has an energy reserve to last a couple of days according to their energy consumption (big battery bank)
- Households are connected to a local neighbourhood energy grid node and receive power from a larger storage reserve when their reserve is deleted or their current draw exceeds the capacity of their reserve to deliver
- Each household that is capable of generating energy would deploy as much solar panel or wind turbine capacity as their space can support, preferring high-efficiency/high-density energy production sources
- Each household with generation capacity fills their own reserve, and then sends the surplus energy to the local node's reserve to be stored and distributed to those without generation capacity
- The local neighbourhood node would have it's own larger-scale energy generation capacity if possible, and would be connected to a backup energy source (fossil fuel generator, hydrogen fuel cell, or other means) to prevent blackouts. The local node would serve as a control point for the distribution of energy across it's connected members.
- The local node can be connected to nodes in other close neighbourhoods, or a regional or national grid to ensure a consistent source of energy, and to sell surplus generated energy to the regional or national grid if the storage reserve are completely filled. Ideally these neighbourhood nodes would work in lock-step to distribute the loads across the whole regional network in an autonomous and decentralized manner. If one node has a higher load than it can support, its neighbours would sent it some of their stored reserve or excess generated energy. This would prevent brown-outs by distributing the load evenly across the network. This is similar to how trees collaborative take care of one another. When one tree is sick or injured, its neighbours send it food through their root network.

We call this design a Distributed Energy Network Transfer (DENT) system.

## Production

Energy must be harvested by some means. This can be through the installation and maintenance of solar arrays, wind turbines, or some other means of energy production, such as tidal, gravitational, or geothermal production.

## Storage

Once produced, energy must be stored for later use. This will ideally be in a medium as energy-dense as possible to save on space requirements. Ideally (at the time of writing), this would be in the form of a Tesla Power Wall or some similar high-volume and high-density storage mechanism.

## Transportation

Once the energy has been produced and stored, it must be transported to the site of consumption. This may be achieved using either fixed or mobile means.

### Fixed Transportation

This would be achieved by setting up a local fixed connection between energy producers and energy consumers. Physical electric lines would have to be established between the energy storage device and the consumer connection.

### Mobile Transportation

This would be achieved by transferring energy stored in a larger immobile storage device at the production site to a smaller, higher-density storage device for transportation to the site of consumption. Energy expended to transport the energy capsule to the site of consumption would have to be factored in to the cost of the energy consumed. If an electric car could discharge its energy in reversed flow from the battery to its outlet, that mechanism could be used to transfer energy from one energy storage location to another.

## Consumption

In order to manage the whole ecosystem effectively and use the energy produced as prudently as possible, all participants in the grid would have to develop a better understanding of what their energy requirements are, and how they can reduce their consumption footprint. Each member would have to know how much energy they use per day, and how much energy each type of use consumes. For example, you might have heating, lighting, cooking, cleaning, and entertainment as consumption categories.

",0,0,2,0,renewable-energy,"[consumption, energy-consumers, energy-producers, micro-grid, production-energy, renewable-energy, renewables, transfer-energy]",00000
1308,youwind.github.io,youwind,youwind,https://github.com/youwind/youwind.github.io,https://api.github.com/repos/youwind/youwind.github.io,,"## Youwind website
",0,0,3,4,renewable-energy,"[renewable-energy, renewables]",00000
1309,nrel-cables,ecoquants,ecoquants,https://github.com/ecoquants/nrel-cables,https://api.github.com/repos/ecoquants/nrel-cables,Offshore cable analysis with NREL evaluating conflict zones with marine renewable energy ,"# nrel-cables
Offshore cable analysis with NREL evaluating conflict zones with marine renewable energy

## Report

Here's the current draft report in various formats:

- [**pdf**](http://ecoquants.com/nrel-cables/report.pdf): portable document format for pretty professional static form

- [**docx**](http://ecoquants.com/nrel-cables/report.docx): Microsoft Word doc for sharing with collaborators who can use Track Changes for providing feedback

- [**html**](http://ecoquants.com/nrel-cables/report.html): online report and view, with ability to follow links and incorporate interactive [htmlwidgets](http://www.htmlwidgets.org/), hosted using [Github Pages](https://pages.github.com/)

### References

See references in the [Zotero group nrel-cables](https://www.zotero.org/groups/nrel-cables/items)

## Project Management

- [**issues**](https://github.com/ecoquants/nrel-cables/issues): tasks

- [**milestones**](https://github.com/ecoquants/nrel-cables/milestones?direction=asc&sort=due_date&state=open): associate issues with a deadline

- [**project**](https://github.com/ecoquants/nrel-cables/projects/1): board with issues prioritized vertically, deadlines horizontally
",0,0,3,5,renewable-energy,"[marine, nrel, r, renewable-energy, spatial, submarine-cables]",00000
1310,pvsc49-satellite-sampling,mikofski,N/A,https://github.com/mikofski/pvsc49-satellite-sampling,https://api.github.com/repos/mikofski/pvsc49-satellite-sampling,Investigation on the effect of averaging interval and sampling rate on hourly modeling errors. Available online: https://doi.org/10.1109/JPHOTOV.2023.3238512,"# Intro
`pvsc49-satellite-sampling` is an investigation on the effect of averaging interval and sampling rate on hourly modeling errors, presented in **Effects of Solar Resource Sampling Rate and Averaging Interval on Hourly Modeling Errors** published in IEEE _Journal of Photovoltaics_, available from IEEE Xplore, DOI: [10.1109/JPHOTOV.2023.3238512](https://doi.org/10.1109/JPHOTOV.2023.3238512). This repository contains the analysis as well as the LaTeX files used to generate the preprint for submission.

# Analysis
The [analysis folder](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/) containes a separate [Jupyter notebook](https://jupyter.org/) for each of the seven SURFRAD sites:
* [Bondville, IL](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-bon.ipynb)
* [Desert Rock, NV](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-dra.ipynb)
* [Fort Peck, MT](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-fpk.ipynb)
* [Goodwin Creek, MS](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-gwn.ipynb)
* [Penn State, PA](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-psu.ipynb)
* [Sioux Falls, SD](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-sxf.ipynb)
* [Table Mountain (Boulder), CO](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/analysis/instantaneous_weather-SURFRAD-tbl.ipynb)

Each Jupyter notebook is a based on a template. Therefore, the organization of each is the same:
1. Useful Functions
2. Accessing SURFRAD Data
3. Narrowing Selection
4. Quality Assurance & Control
5. Load SURFRAD Daily Weather Data
6. Simulate Sampled Data at Different Rates
7. Visual Comparisons
8. PV Model
9. All (Good) Years Results

## Python Packages
The analysis uses [pvlib](https://pvlib-python.readthedocs.io/en/stable/) to model PV performance.
[![powered by pvlib](https://pvlib-python.readthedocs.io/en/stable/_images/pvlib_powered_logo_horiz.png)](https://pvlib-python.readthedocs.io/en/stable/)

Other [Python](https://www.python.org/) libraries used are [Matplotlib](https://matplotlib.org/), [NumPy](https://numpy.org/), [Pandas](https://pandas.pydata.org/), and [Seaborn](https://seaborn.pydata.org/).

## SURFRAD Data
[SURFRAD data](https://gml.noaa.gov/grad/surfrad/) is required to run the analysis. This data can be obtained using [`pvlib.iotools.read_surfrad`](https://pvlib-python.readthedocs.io/en/stable/reference/generated/pvlib.iotools.read_surfrad.html), but be patient. It's many gigabytes of data and can take a few hours to download.

# Preprint
This repo contains the manuscript that was submitted as original research and published in JPV at IEEE Xplore. LaTeX was used to render the manuscript. The coauthors collaborated online using [Overleaf](https://www.overleaf.com/), and I also used [Sublime Text](https://www.sublimetext.com/) with [LaTeXTools plugin](https://latextools.readthedocs.io/en/latest/) and [Sumatra](https://www.sumatrapdfreader.org/free-pdf-reader). A PDF is rendered and deployed to GitHub pages automatically on each commit using GitHub actions in the `workflows` folder. Note: this PDF is not the final version published by IEEE.

# Licences & Copyrights
* The LaTeX document in this repo is a preprint of **Effects of Solar Resource Sampling Rate and Averaging Interval on Hourly Modeling Errors** published in IEEE _Journal of Photovoltaics_, available from IEEE Xplore, DOI: [10.1109/JPHOTOV.2023.3238512](https://doi.org/10.1109/JPHOTOV.2023.3238512).
* The analysis code in this repo is [BSD-3 licensed](https://github.com/mikofski/pvsc49-satellite-sampling/blob/main/LICENSE).
* This README and all other text are licensed under [Creative Common BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/).

<p xmlns:cc=""http://creativecommons.org/ns#"" xmlns:dct=""http://purl.org/dc/terms/"">
<a href=""http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1"" target=""_blank"" rel=""license noopener noreferrer"" style=""display:inline-block;"">
<img style=""height:22px!important;margin-left:3px;vertical-align:text-bottom;"" src=""https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1""><img style=""height:22px!important;margin-left:3px;vertical-align:text-bottom;"" src=""https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1""><img style=""height:22px!important;margin-left:3px;vertical-align:text-bottom;"" src=""https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1""></a>
<a property=""dct:title"" rel=""cc:attributionURL"" href=""https://github.com/mikofski/pvsc49-satellite-sampling"">PVSC49-Satellite-Sampling</a> by <a rel=""cc:attributionURL dct:creator"" property=""cc:attributionName"" href=""https://mikofski.github.io/"">Mark A. Mikofski</a> is licensed under <a href=""http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1"" target=""_blank"" rel=""license noopener noreferrer"" style=""display:inline-block;"">CC BY-SA 4.0</a>

Mark A. Mikofski (c) 2023
",0,0,2,0,renewable-energy,"[modeling, photovoltaics, renewable-energy, solar, solar-energy]",00000
1311,energy-trading-golang,mapfumo,N/A,https://github.com/mapfumo/energy-trading-golang,https://api.github.com/repos/mapfumo/energy-trading-golang,Simulation of energy bidding and trading system among battery energy storage systems (BESS) and aggregators,"# Peer to Peer Energy Trading
",0,0,1,0,renewable-energy,"[golang, renewable-energy]",00000
1312,Pacific_Islands_Energy_Balance,UNSW-CEEM,UNSW-CEEM,https://github.com/UNSW-CEEM/Pacific_Islands_Energy_Balance,https://api.github.com/repos/UNSW-CEEM/Pacific_Islands_Energy_Balance,An online web application that presents the latest available energy related data for Pacific Islands Countries and Territories (PICTs) ,"# Pacific Islands Countries Energy Balance


## Conduct
[Our code of conduct](CONDUCT.md)

## Contributing
[Guide for contributing](CONTRIBUTING.md)

## Todo
[List of to-dos](docs/source/todo.md)",0,0,1,0,renewable-energy,"[carbon-emissions, decarbonization, energy, energy-access, energy-poverty, fossil-fuels, renewable-energy]",00000
1313,solaris,ctrlaltf2,N/A,https://github.com/ctrlaltf2/solaris,https://api.github.com/repos/ctrlaltf2/solaris,A performant Rust library to calculate the position of the Sun ☀️,"<div align=""center"">
  <img src=""https://github.com/ctrlaltf2/solaris/blob/main/assets/banner.png?raw=true"" width=""600""/>
</div>

<br>

<div align=""center"">
  Solaris is a Rust library to efficiently predict the position of the Sun at any time and any location on Earth between the years 2017 and 2116. 
</div>

# Paper
Solaris is a *clean-room* Rust implementation of SolTrack ([arXiv:2209.01557v1](https://arxiv.org/abs/2209.01557)). The equations are simple enough to run efficently on embedded systems. The equations were verified by the authors to have high accuracy between 2017 and 2116. This library is an implementation of the paper based _solely on the_ equations presented in the arXiv preprint.

# Validation
The library implementation will be validated using the same methods the paper presents as well as some extra validation. [VSOP87](https://www.caglow.com/info/compute/vsop87) will be used as ground-truth in all tests.

  ## Accuracy
- [ ] What the paper authors did:
  - [ ] VSOP87 comparison: Position of sun seen from Arnhem, Netherlands near sunset/sunrise time
- [ ] Further VSOP87 comparison: 
  - [ ] Random lat/long/time, scale up # timepoints proportionally based on size of sunset/sunrise time slice

  ## Performance
- TBD:
  - Need to be able to lock a CPU core to 2.67 GHz for a fair comparison against the paper-- likely possible with Linux
  
# Disclaimer
  In addition to the disclaimers noted in the license, the author(s) of this are in no way associated with the authors of the SolTrack paper and make no claim to be.


# FAQ
  ## Why ""Solaris""?
Predicting the position of three suns was done by *[Trisolaris](https://www.litcharts.com/lit/the-three-body-problem/terms/trisolaris)*, thus, the prediction of the position of just one sun must be done by none other than *Solaris* (it only makes sense!).

# Citations
```bibtex
@misc{https://doi.org/10.48550/arxiv.2209.01557,
  doi       = {10.48550/ARXIV.2209.01557},
  url       = {https://arxiv.org/abs/2209.01557}, 
  author    = {van der Sluys, Marc and van Kan, Paul},
  keywords  = {Instrumentation and Methods for Astrophysics (astro-ph.IM), Computational Physics (physics.comp-ph), FOS: Physical sciences, FOS: Physical sciences},
  title     = {SolTrack: a free, fast and accurate routine to compute the position of the Sun},
  publisher = {arXiv},
  year      = {2022},
  copyright = {Creative Commons Attribution Non Commercial Share Alike 4.0 International}
}
```
",0,0,1,0,renewable-energy,"[astronomy, photovoltaic, physics, pv, renewable-energy, renewables, solar-energy, solar-system, solar-tracking]",00000
1314,vietnamwind,nuatel,N/A,https://github.com/nuatel/vietnamwind,https://api.github.com/repos/nuatel/vietnamwind,Wind resource assessment,"# Vietnamwind
Resource assessment

# Description
This is a project assess wind potential of Vietnam

# Data
Global wind atlas: https://globalwindatlas.info/area/Vietnam
",0,0,1,0,renewable-energy,"[data-analysis, renewable-energy, vietnam]",00000
1315,automaticdoor,RendyBaihaqi,N/A,https://github.com/RendyBaihaqi/automaticdoor,https://api.github.com/repos/RendyBaihaqi/automaticdoor,automatic door with solar powered,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,renewable-energy,[renewable-energy],00000
1316,Wind-Farm-Site-Suitability-CONUS,JoshuaW1994,N/A,https://github.com/JoshuaW1994/Wind-Farm-Site-Suitability-CONUS,https://api.github.com/repos/JoshuaW1994/Wind-Farm-Site-Suitability-CONUS,"This model is use to assess the suitability of current and future locations for commercial wind farm construction across the Conterminous United States (CONUS). Aggregated datasets have been prepared for all states and the CONUS. Model script: ""LR_Equation_Code.py"", ""CA_Model_Code.py"". Model instructions: ""Model Description and Instructions.pdf"". ","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,2,0,renewable-energy,"[celluar-automata, environmental-modeling, logistic-regression, renewable-energy, socio-environmental-systems-modeling, suitability-analysis, wind-energy]",00000
1317,Energy_AI_Competition,lhk6565,N/A,https://github.com/lhk6565/Energy_AI_Competition,https://api.github.com/repos/lhk6565/Energy_AI_Competition,지속가능한 에너지 활용을 위한 인공지능 경진대회 TRACK 1 결과물입니다.,"# Energy_AI_Competition

<p align='center'>
    <img src='poster.jpg' width='250' height='350'>
</p>

[지속가능한 에너지 활용을 위한 인공지능 경진대회: Track1 에너지 인공지능 경진대회](https://aifactory.space/competition/detail/2083)에서 Leaderboard Score (5등 / 41팀)을 달성한 결과물입니다.
- [이형권](https://github.com/lhk6565) (IT경영)
- 이주영 (산업경영)
- [장성호](https://github.com/Jjineeq) (산업경영)
- [박진환](https://github.com/pjh09050) (산업경영)

## 대회 주제 소개
- KETI의 연구개발 및 한국서부발전(주)의 신재생 에너지 발전 실증 데이터에 기반한 인공지능 경진대회 운영을 통해 지속 가능한 인공지능 에너지 활용 모델 및 실용 아이디어를 도출하고자 합니다. 아래와 같이 2개의 Track으로 나뉘어져 진행됩니다.

### Track 1: 에너지 인공지능(Energy AI) 경진대회 (정량평가)
- 전력 거래소는 재생에너지 확대에 따른 출력 변동성 대응을 위해 재생에너지 발전량 예측제도를 도입했는데요, 이는 재생에너지 발전량을 하루 전에 미리 예측하여 제출하고 당일날 일정 오차율 이내로 이행할 경우 정산금을 지급하는 제도입니다.
- 따라서 발전 사업자들의 정확한 재생 에너지 예측 기술에 대한 필요성이 증가하게 되었으며, 이를 잘 예측하는 모델을 개발하는 것이 이번 Track1 과제의 핵심입니다.

## 대회 기간
- 2022년 7월 11일 ~ 2022년 8월 22일: 대회 기간
- 2022년 8월 23일 ~ 2022년 9월 02일: 제출물 검증 기간
- 2022년 9월 05일: 최종 수상팀 발표
- 2022년 9월 15일: 성과 발표 및 시상식

## 대회 미션
- 매일 17시 이전에 생성된 예보/실제 관측 데이터를 이용하여 익일 발전량을 예측

## 대회 규칙
- Public 및 private 스코어가 합쳐진 total 스코어로 최종 순위 및 검증 대상 결정
    - 대회기간 중에는 public 스코어만 리더보드 상에 표출
    - 대회 종료시점(8월 22일 23:59)이후 public 및 private 스코어가 합쳐진 total 스코어와 그에 따른 순위가 리더보드 상에 표출됨
    - Public 및 private의 비율은 1:1
- Track1의 경우 필수적으로 삼성 SDS의 Brightics Studio 플랫폼 사용
- 수상 후보팀으로 선정되는 경우 개발 결과물의 검증을 위하여 아래 파일을 일괄 제출
    1. 브라이틱스 프로젝트 json 파일
        - 브라이틱스로 데이터 전처리 및 분석한 프로젝트를 json으로 export하여 제출
    2. 모델 & 데이터 설명서
        - 서식을 다운로드 받아 내용 작성 후 제출
    3. Input 파일 (활용 데이터)
        - 외부 데이터 원본 (예: 기상예보 자료를 사용했을 경우, 다운받은 원본 상태의 파일)
        - 브라이틱스 모델에서 load하는 데이터 파일 (csv)
- 위 3가지 파일은 제 3자인 평가자가 이해 및 재현이 가능하도록 최대한 상세히 작성 후 제출 요망
- Track1의 평가에는 NMAE(Nominal Mean Absolute Error)가 활용됩니다. 연산 코드는 다음과 같습니다.
```python
import numpy as np

# Define NMAE loss function
def NMAE(true, pred, nominal):
    absolute_error = np.abs(true - pred)
    absolute_error /= nominal
    target_idx = np.where(true >= nominal*0.1)
    return 100 * absolute_error[target_idx].mean()
```
- 평가 연산에 사용되는 nominal 값은 다음과 같습니다.
    - solar: 1100
    - wind: 16000

## 제안 방법
- 기상청 외부 데이터로 일조량과 기압 데이터를 추가로 사용하였고, Boosting 모델을 사용하여 문제를 해결하고자 제안
- 자세한 내용은 [모델 & 데이터 설명서](모델&데이터설명서_감자샐러드.pdf)를 참고하시기 바랍니다.

## 코드 실행
- `KETI_경진대회_감자샐러드.json`을 `brights-studio`에 불러들여 실행하시면 됩니다.

## 느낀점
처음 나간 경진대회에서 LeaderBoard Score는 상위권에 달성했지만 수상을 하지 못해 매우 아쉽다고 생각한다.<br>
경진대회 데이터처럼 전처리 과정이 매우 복잡한 것은 처음 경험하여 부족함을 많이 느꼈다...<br>
태양광 발전량은 어느정도 예측이 되었으나 풍력 발전량은 예측이 매우 힘들어 error값이 높게 나와 매우 아쉬웠고, 추후 해당 프로젝트를 발전시켜 좀 더 정확한 예측을 해보고자 한다.

## 문의
코드 및 발표자료에 대해 궁금한 점이 있으실 경우 lhk6565@naver.com으로 문의해주시면 답변드리겠습니다.:blush:<br>
데이터에 대한 저작권은 대회 주관사인 [AIFactory 및 한국전자기술연구원](https://aifactory.space/)에 있으므로 해당 주관사로 문의 부탁드립니다.",0,0,1,0,renewable-energy,"[brightics-studio, renewable-energy]",00000
1318,Integrated_CASE_Assessment,fgasa,N/A,https://github.com/fgasa/Integrated_CASE_Assessment,https://api.github.com/repos/fgasa/Integrated_CASE_Assessment,CAES integration into future energy systems,"# Integrated CASE Assessment

This repository contains inputs for integrated PM-CAES assessment using a set of future energy system scenarios with different fractions of renewable energy supply developed by [oemof](https://github.com/znes/angus-scenarios), as well as different technical options for the power plant topology built via [TESPy](https://github.com/oemof/tespy) and subsurface storage configurations modelled in ECLIPSE simulator.

<picture>
  <source media=""(prefers-color-scheme: dark)"" srcset=""./figures/graphical-abstract_dark.svg"">
  <source media=""(prefers-color-scheme: light)"" srcset=""./figures/graphical-abstract_light.svg"">
  <img alt=""power plant setups"">
</picture>

## Energy system dispatch model

Optimised dispatch model based on several assumptions, where three shadow electricity pricies (scenario developed within [ANGUS project](https://zenodo.org/record/3714708)), CO<sub>2</sub> emission and fuel prices  are inputs for Gurobi.  

|Scenario year|Power plant type|Renewable share [%]|Average shadow electricity price [EUR/MWh]|CO<sub>2</sub> emission price [EUR/t]|Fuel price [EUR/MWh]| Scenario reference|
|:----|:----|:----|:----|:----|:----|:----|
|2030|D-CAES|76.3|52.6|29.4|26.40|2030NEPC|
|2040|D-CAES |85.9|83.7|126.0|30.24|2040GCA|
|2050|D-CAES |100.0|88.3|150.0|43.72|2050NB|
|2030|2-AA-CAES|76.3|52.6|- |-|2030NEPC|
|2030|3-AA-CAES|76.3|52.6|-|-|2030NEPC|


<picture>
  <source media=""(prefers-color-scheme: dark)"" srcset=""./figures/load_profiles_dark.svg"">
  <source media=""(prefers-color-scheme: light)"" srcset=""./figures/load_profiles_light.svg"">
  <img alt=""power plant setups"">
</picture>



## Surface power plant topology

  - __diabatic__ topology with 3-stage compression and 2-stage expansion stages including a heat recuperator to preheat the air from the storage 
 - __adiabatic__ plant with 2-stage compression and expansion stages
  - __adiabatic__ plant with 3-stage compression and expansion stages


<picture>
  <source media=""(prefers-color-scheme: dark)"" srcset=""./figures/power_plant_topologies_dark.svg"">
  <source media=""(prefers-color-scheme: light)"" srcset=""./figures/power_plant_topologies_light.svg"">
  <img alt=""power plant setups"">
</picture>



Coupled power plant-geostorage parameters. The reference temperature and pressure are 273.15 K and 1.013 bar.

| Component            | Parameter                 | Value |
|:---------------------|:--------------------------|:------|
| Compressors          | nominal power                                                        | 230 MW  |
|                      | isentropic efficiency, *η*<sub>s,cmp</sub>                         | 0.92   |
|                      | isentropic efficiency control stage, *η*<sub>s,cmp,cs</sub>        | 0.85   |
|                      | pressure ratio stages 1 and 2 (diabatic, three-stage adiabatic)      | 5    |
|                      | pressure ratio at stage 1 (two-stage adiabatic)                  | 10   |
| Turbines             | nominal power                                                    | 115 MW |
|                      | isentropic efficiency, *η*<sub>s,exp</sub>                     | 0.90     |
|                      | isentropic efficiency control stage, *η*<sub>s,exp,cs</sub>    | 0.85   |
| Coolers              | temperature after cooling (diabatic)                             | 298.15 K |
|                      | temperature after cooling (adiabatic)                            | 338.15 K     |
| Generator & Motor    | efficiency, *η*<sub>(el,mech)</sub>                              | 0.97   |
| Combustion           | fuel type (diabatic)                                             | CH<sub>4</sub>   |
|                      | turbine inlet temperature                                        | 1473.15 K   |
|                      | outlet temperature (diabatic)                                    | 423.15 K   |
|                      | pressure loss                                                    | 3 %    |
| Heat exchangers      | temperature after reheating (adiabatic)                          | 573.15 K |
|                      | pressure loss                                                    | 2 %     |
| Storage              | nominal pressure compression                                     | 115 bar   |
|                      | nominal pressure expansion                                       | 110 bar    |
|                      | vertical well length, *L*                                        | 1055 m     |
|                      | vertical well number                                             | 9 / 3     |
|                      | pipe roughness, *k*<sub>s</sub>                                  | 0.04 mm     |
|                      | well diameter, *D*                                              | 0.25 m     |
|                      | horizontal well number                                           | 2 / 2     |
|                      | horizontal section length, *L*<sub>h</sub>                       | 450 m / 850 m     |
|                      | total completion length,                                         | 150 m / 150 m     |



### Plant performance


<picture>
  <source media=""(prefers-color-scheme: dark)"" srcset=""./figures/power_plant_performance_dark.svg"">
  <source media=""(prefers-color-scheme: light)"" srcset=""./figures/power_plant_performance_light.svg"">
  <img alt=""power plant capacity durining continuous chargining and discharging tests"">
</picture>

*Power plant performance during continuous charging (top row: a, b, c) and discharging (bottom row: d, e, f) runs*



## Subsurface storage settings

Main geostorage parameters for scenario simulation.

| Parameter     | Value                                                            |
|---------------|--------------------------------------------------------------------|
Dry air composition  |N<sub>2</sub>/O<sub>2</sub>/Ar/CO<sub>2</sub> (0.7553/0.2314/0.0129/0.0004)
Molar mass of air  |                                        28.965 g/mol
Critical temperature  |                                     132.53 K
Critical pressure  |                                        37.86 bar
Air density at standard condition  |                        1.205 kg/m<sup>3</sup>
Initial pressure gradient  |                                0.105 bar/m
Reservoir temperature (isothermal)  |                       311 K
Permeability  |                                             700 mD
Porosity  |                                                 0.27
Residual water saturation  |                                0.15
Residual gas saturation  |                                  0
Max. relative gas permeability  |                           0.9
Max. relative water permeability  |                         1
Capillary entry pressure  |                                 0.1 bar
Pore size distribution index  |                             2
Initial air in place mass  |                                5.56 Mt
Maximum/minimum allowable BHP  |                            130 bar / 80 bar



<picture>
  <source media=""(prefers-color-scheme: dark)"" srcset=""./figures/geostorage_setup_dark.svg"">
  <source media=""(prefers-color-scheme: light)"" srcset=""./figures/geostorage_setup_light.svg"">
  <img alt=""Geostorage configuration schemes"">
</picture>

*Geostorage configuration schemes for different well setups*



## Reference
- Gasanzade, F., Witte, F., Tuschy, I. and Bauer, S., 2023. Integration of geological compressed air energy storage into future energy supply systems dominated by renewable power sources. Energy Conversion and Management, 277, __doi:10.1016/j.enconman.2022.116643__ 
- TESPy Version 0.4.2 - User's Universe, __doi:10.5281/zenodo.4534878__
- National scale energy system scenarios, __doi:10.5281/zenodo.3714708__
- ECLIPSE Reservoir Simulation Software v2017.2, Schlumberger Ltd.
- LLC Gurobi Optimization. Gurobi Optimizer Reference Manual, 2021.  
",0,0,2,0,renewable-energy,"[caes, geological-models, renewable-energy]",00000
1319,Capacity-Credit-Brazil,CPLEN-USP,N/A,https://github.com/CPLEN-USP/Capacity-Credit-Brazil,https://api.github.com/repos/CPLEN-USP/Capacity-Credit-Brazil,Capacity credit with variable dispatchable sources ,"
# Capacity Credit Brazil

<!-- badges: start -->
<!-- badges: end -->

This repository combine functions developed by CPLEN with available functions in REPRA (NREL) package to make possible calculate capacity value and capacity credit for wind and solar resources in the Brazilian system. 

REPRA package was developed by NREL and it is available at  https://github.com/NREL/repra/blob/master/README.md. Although enormously useful, REPRA has some limitations such as maitenance lack and the focus on thermal systems. We have developed this repository to overcome these limitaions and extend the REPRA approach to thermo-hydro systems.

The main difference between predominantly hydro systems from thermal ones is the variable capacity from hydro systems. This requires that to calculate capacity contribution from variable sources we are able to update not only load and variable sources production but also avaliable capacity from the dispatchable sources.

There is one difficulty that may be encoutered when running the program. Newer versions of data.table may not work adequately. To overcome such a problem it is possible to use older versions of the data.table package or to manually source in RStudio the scripts for the format_timedata function (https://rdrr.io/github/NREL/repra/src/R/timedata.R) and for the has_no_name function (https://rdrr.io/github/NREL/repra/src/R/auxiliary.R). A more robust solution to this issue will be adressed in the future.

Since Capacity Credit Brazil incorporates many functions developed whithin REPRA (NREL), its license is reproduced here (https://github.com/NREL/repra/blob/master/LICENSE):


REPRA Copyright (c) 2014-2015 Alliance for Sustainable Energy, LLC. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. The name of the copyright holder(s), any contributors, the United States Government, the United States Department of Energy, or any of their employees may not be used to endorse or promote products derived from this software without specific prior written permission from the respective party.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


",0,0,1,0,renewable-energy,"[capacity-credit, energy-limited-sources, energy-transition, hydrothermal, reliability, renewable-energy]",00000
1320,solarcoinv2,solarcoinv2,N/A,https://github.com/solarcoinv2/solarcoinv2,https://api.github.com/repos/solarcoinv2/solarcoinv2, A global currency backed by Renewable Energy,"# solarcoinv2
A global cryptocurrency backed by Renewable Energy

# Acknowledgements
This concept is inspired by [SolarCoin](https://solarcoin.org/), and tries to build further on this concept.

<!--
I am inspired to start this project as a result of discussions with a fellow netizen (gloryhunters@protonmail.com).
-->

# Motivation
- Provide a strong monetary incentive for renewable energy generation
- Solve the usual problems associated with cryptocurrency

# Current Status

Design Phase

# Design

1. Unlike the stated aims of many cryptocurrencies, SolarCoinV2 embraces and infact depends on government support, and aims for recognition from the UN (United Nations). It requests the governments of all countries to perform a few very simple and specific duties, with great integrity.

2. Any renewable energy is convertible into SolarCoinV2. 1MWh of renewable energy = 1 SolarCoinV2 for all time to come.

3. In any day and age, currency must be backed by something useful for that day and age. Gold was the original successful currency. It was useful because it could be easily made into non-rusting vessels, decorations, dental implants etc. As time went on gold became too scarce for such use. Hence today, it no longer officially backs currency. SolarCoinV2 is the global currency of choice for today's day and age, because the need in today's day and age is Renewable Energy. To visualise that energy and not common knowledge is the main challenge in today's economy, you should be aware that 3D printers that can manufacture anything commonly needed (including themselves), are becoming accessible to the general public. Many printing programs that instruct the printers to print various useful objects, are freely available over the internet. You can imagine that raw material costs will be a small part of the cost for most manufactured items. Most of the cost would involve the energy to run the printers, the internet infrastructure, transportation drones for raw materials and finished goods etc....

4. Countries may issue Cash form of solarcoinV2 for convenience of poor and illiterate who don't have access to smartphones yet. However there should be a steady movement towards only the online (cryotcurrency) form of SolarCoinV2.

5. SolarCoinV2 will use servers of (say) 7 government groups in 7 different continents of the world - Asia, Africa, Europe, North Americe, South America, Australia and (perhaps) Antarctica. Each server is capable of storing the bank balances of all the people in the world. These are enough servers and enough geographical distances between them to establish consensus-based trust. If not, more servers can be added. Another good number of servers to have is one for each country in the world. However having more servers will make transactions significantly slower to record and verify.

6. Government will issue public keys and private keys to citizens. Each SolarCoinV2 bank account is associated with a private key and a public key. Governments know the bank balances of their citizens; they need to verify income tax anyway. Apart from this, every attempt will be made by government and individuals to keep the mapping of public keys to people on a need-to-know basis, just like our bank account numbers are semi-private at present. The databases will have a table with at least 2 columns: the public key and the bank balance amount. The value of the latter column is accessible only by the governments and the account owner.

7. Governments are responsible to purchase renewable energy from their citizens. The governments must with great integrity and precision, ensure that the energy was indeed generated in a renewable manner and is of the said quantity. In return for the energy, the governments credit the account on all 7 servers with SolarCoinV2. The message is digitally signed by the crediting government. Governments from other countries and from the UN can act as watchdogs in this process of renewable energy purchase from the public.

8. People transfer SolarCoinV2 from their accounts to others' by sending digitally signed messages (signed with their private key) to all 7 servers, to credit SolarCoinV2 from their accounts to other accounts. The public keys of the sender and receiver account must be mentioned in each message. All 7 servers adjust the account balances accordingly.

9. No need of mining, PoW, PoS and all such electric-power-hungry activities. People can check all 7 servers (they can connect to these servers over https and these servers will use the usual SSL certificates that we use to trust netbanking websites etc.) In order to check one's bank balance, a person must send a request that is digitally signed with their private key, to all 7 servers. Only then will the servers respond with information about their bank balance. This will help hackers from discovering that which public key has how much balance. 

10. Just like one person can have multiple bank accounts, governments may offer this facility to their citizens so that for security reasons, any one account does not contain too much money. Each account can optionally maintain a transaction history, or the servers may expose a kind of OpenBanking API that allows third-party applications to store the transaction history beyond a certain number of transactions. 

# Roadmap

- Solicit feedback, especially from Government representatives
- Create a technical proof of concept

# Author Anonymity

Project authors depend on the job market for their income and so request that their wish for confidentiality be respected. You can use GitHub issues to communicate with us.

",0,0,1,0,renewable-energy,"[cryptocurrency, energy, renewable-energy, solar]",00000
1321,EnergyViz,sarthakbatragatech,N/A,https://github.com/sarthakbatragatech/EnergyViz,https://api.github.com/repos/sarthakbatragatech/EnergyViz,Visualization of Energy metrics for different nations,"# EnergyViz
Visualization of Energy metrics for different nations

## Total Wind Energy

![Total Wind Energy](plots/wind.png)

## Total Nuclear Energy

![Total Nuclear Energy](plots/nuclear.png)

## Total Solar Energy

![Total Solar Energy](plots/solar.png)

## Total Renewable Production Stacked

![Total Renewable Production Stacked](plots/energy_country_stack.png)

## Total Renewable Production Heatmap

![Total Renewable Production Heatmap](plots/heatmap.png)
",0,0,2,0,renewable-energy,"[altair, data-visualization, data-viz, energy, python, renewable-energy]",00000
1322,rensandbox,qwjhvbxi,N/A,N/A,https://api.github.com/repos/qwjhvbxi/rensandbox,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E6:5C75:273F7F3:508A40F:6522405A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1323,Wind-Power-Analysis,logantcrawford,N/A,https://github.com/logantcrawford/Wind-Power-Analysis,https://api.github.com/repos/logantcrawford/Wind-Power-Analysis,Analysis of wind power potential in the United States for reaching a carbon-neutral society,"# Wind Power in the United States

![Wind Power in the United States](wind_power.jpg)

## Background
Wind power is one of the oldest and most recognizable types of renewable energy. Many readers may have memories of watching wind turbines through the window on flights or long rides in a car or train. And that is something to be noted; we don’t often see them. They are in areas we ignore. Wind turbines cannot be placed everywhere, and with heights of up to 400 feet, their vibrations adversely affect humans and animals. 

Despite wind power reliability [1], the approximately 54,000 turbines in the United States provided just 7.3% of the country’s energy in 2019 [2]. As shown in Figure 1, turbines are utilized in relatively few areas, especially when considering the United States’ greater than 1.75 million square miles of uninhabited land, as per the last census[3].

Of course, not all of this uninhabited land is ideal for installations. National parks, military bases, geographic entities, and more make wind power untenable in certain areas. Additionally, there needs to be enough wind to rotate the large rotors. 

Research Questions
- Where are the viable locations for the construction of wind turbines?
- How much energy will be generated by the implementation of wind turbines in specific locations?
- How does it affect humans in the future by replacing fossil fuels?

## Dependencies

[USGS United States Wind Turbines Dataset](https://eerscmap.usgs.gov/uswtdb/data/)

[ArcGIS United States Major Cities Dataset](https://hub.arcgis.com/datasets/esri::usa-major-cities?geometry=-107.388%2C31.327%2C-105.081%2C31.737)

[NOAA United States Annual Wind Speed Dataset](https://www.climate.gov/maps-data/dataset/average-wind-speeds-map-viewer)

[USGS United States Protected Areas Dataset](https://www.usgs.gov/core-science-systems/science-analytics-and-synthesis/gap/science/pad-us-data-download?qt-science_center_objects=0#)

[United States Census Cartographic Boundary Dataset](https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html)

## Potential Locations for Turbines
After processing over 100,000 rows of data and sectioning out areas outside of protected areas, established wind turbines within a specified range, we are returned 50,000,000 rows and three columns of data as potential wind turbine locations. When converted into an image, these rows equate to a resolution of 10,000 by 5,000. 

### How did we generate this plot?
Creating a unary union of the 48 states dissolves the state boundaries, giving us a vision of the 48 continental states. Converting this list of boundaries into the exterior removes any potential artifacts from any states failing to connect accurately. And by creating a tupled coordinate list and passing it into Shapely’s Polygon function. Iterating through our coordinates list allows us to create a Point with the Shapely library and check to determine if the latitude and longitude are within the bounding borders. These points are logged into a DataFrame. From this DataFrame, we can visualize the points by plotting a simple state outline and using a scatter plot. This function allowed us to create this plot with only points inside the United States boundaries. We have the ability to set the color based on our wind magnitude, and this gives us the visualization to the right.

![Wind Power in the United States](wind_power_result.jpg)

## Productivity in Montana
### Highest Average Wind Speeds in the United States
Zooming into Montana, we can see that a large portion of the state consists of the brightest yellow, meaning this location has the highest average wind speeds in the United States at about 8.5 MPH on average. Interestingly, this block of high wind speeds is, for the most part, cut out of the analysis because of currently established wind turbines. Luckily for us, in the Northern end of these high wind values is just over 3.5 million acres of mostly rural land prime for the establishment of wind turbines. We are analyzing the Montana 30-Meter Residential-Scale Wind Resource Map from the Office of Energy Efficiency and Renewable Energy, coming directly out the Rocky mountains' valleys in high gusts of winds pushing through rivers and riverbeds and over the top remaining hills. For the lower elevation points, there are very insignificant amounts of wind. 

![Wind Power in the United States](wind_power_result_montana.jpg)


## Putting Ideas Into Action
To get a sense of wind turbines' productivity in the Northern section of Montana, we calculated the average size of wind farms in the United States, equating to 90 turbines per farm. With wind speeds typically between 8 to 12.5 Miles Per Hour, we can expect turbines to produce on average 1.69 Megawatts (mW) per day. With modern wind technology, it is reasonable to see 2 mW through 2.5 mW generated per day or 912,500 Kilowatts (kW) per year for a single turbine in these conditions. It is appropriate for a farm of highly advanced and well-placed turbines to expect 82,125,000 kW per year. 

This amount of energy is not an insignificant amount of power; it can power many of our daily lives and reduce carbon emissions locally and globally. Below in Figure 7 is the Northernmost highly windy area in Montana, plotted with 90 wind turbines. Let's look at what this energy amount gets us and what it can do for our environment.

![Wind Power in the United States](wind_power_result_energy.jpg)


## Conclusion

### Summary
Wind is a reliable but underutilized renewable energy source with great potential in the United States. This project took the first steps towards realizing this potential by identifying the country’s most optimal areas for new turbines. We found these areas through a systematic geographic analysis of the country, which excluded areas with existing turbines, cities, and designated protected areas. The remaining regions are visualized with a gradient color indicating mean annual wind speeds. We can see the most optimal locations for turbine construction by the brighter yellow color; the most notable states are Montana, central and south Texas, and southern Florida. 

The data used in this analysis come from reputable sources in the science and geographic communities, such as ESRI, U.S. National Oceanic and Atmospheric Administration (NOAA), and the United States Geological Survey (USGS). The datasets were combined across their geographic features using a method James coined aforementioned “master array.”

### Additional Insights
Beyond the optimal areas our analysis identifies, we discovered that much of the United States’ wind power potential lies offshore. While our study only considered land turbines, these offshore locations will undoubtedly play an essential role in wind power growth.

Slightly removed from the analysis, we also discovered that GIS is superior to programming-based approaches for spatial data science projects like this one. Although we created some useful techniques to accomplish this analysis, geographic information systems could produce a more comprehensive investigation of this subject.

### What Worked and What Didn’t Work
The project took several ideological iterations to run smoothly. The original intent to predominantly use geospatial Python libraries proved untenable due to the size of our datasets and suboptimal library conventions. The project also had graphical struggles, as our large datasets and relatively average computing resources struggled to render the detailed visualizations. Beyond these issues, the project ran smoothly. We developed the “master array,” which turned out to be a more optimal workaround for the geospatial library troubles. Although the master array did not alleviate our infrastructure issues for rendering visualizations, it gave us much greater control in determining the resolution of our analysis and results. Additionally, we were fortunate to work with well-maintained datasets that required little to no cleaning and manipulation.

### Next Steps
Identifying the areas feasible for wind turbine construction is the first of many steps needed for mass adoption of wind power. There are lingering questions about infrastructure and engineering and many discussions about turbine machinery and energy transmission and storage. There are financial questions of cost and who should put up the money for such ventures. There are environmental concerns-will turbines upset our wildlife? There are political questions-who gets turbines first? There are social questions-do we want wind turbines near our towns or in our counties? Most notably, there are layered, integrated questions, which concern several of these subject areas on top of additional geographical context.

There is much left to do before our society can comfortably scale wind power to its potential. This project has taken the first step in this journey towards a wind-powered sustainable future, and the authors hope for continued progress to that end.



",0,0,1,0,renewable-energy,"[climate, data-science, data-visualization, gis, renewable-energy]",00000
1324,report-energy-transition,360-info,360-info,https://github.com/360-info/report-energy-transition,https://api.github.com/repos/360-info/report-energy-transition,Analysis and visualisation of IRENA's energy generation and capacity data,"# Renewables transition

Visualises the growth of renewable electricity capacity and generation over the last 20 years using data from the [International Renewable Energy Agency](https://www.irena.org/Statistics/View-Data-by-Topic/Capacity-and-Generation/Statistics-Time-Series).

## Use + Remix rights

![[Creative Commons Attribution 4.0](https://creativecommons.org/licenses/by/4.0)](https://mirrors.creativecommons.org/presskit/buttons/80x15/png/by.png)

The map and the analysis that underpins it are available under a Creative Commons Attribution 4.0 licence. This includes commercial reuse and derivates.

The data is made available by the [International Renewable Energy Agency](https://www.irena.org/Statistics/View-Data-by-Topic/Capacity-and-Generation/Statistics-Time-Series), provided they are acknowledged as the source of the data.

**Please attribute 360info and IRENA when you use and remix this visualisation.**

## Reproduce the analysis

We typically publish graphics using [Quarto](https://quarto.org) notebooks, which can be found in the`*.qmd` files. Quarto allows reproducible analysis and visualisation to be done in a mix of languages, but we typically use [R](https://r-project,.org) and [Observable JS](https://observablehq.com/@observablehq/observables-not-javascript).

You'll need to:
- [Download and install Quarto](https://quarto.org/docs/get-started)
- [Download the install R](https://www.r-project.org)
- Satisfy the R package dependencies. In R:
  * Install the [`renv`](https://rstudio.github.io/renv) package with `install.packages(""renv"")`,
  * Then run `renv::restore()` to install the R package dependencies.
  * (For problems satisfying R package dependencies, refer to [Quarto's documentation on virtual environments](https://quarto.org/docs/projects/virtual-environments.html).)

Now, render the `.qmd` files to the `/out` directory with:

```sh
quarto render
```

## Help

If you find any problems with our analysis or the map, please feel free to [create an issue](https://github.com/360-info/report-energy-transition/issues/new)!
",0,0,2,0,renewable-energy,"[energy, r, renewable-energy, renewables, rstats]",00000
1325,Power_Portal_2.0,Ashrockzzz2003,N/A,N/A,https://api.github.com/repos/Ashrockzzz2003/Power_Portal_2.0,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C155:7B5B:70EFBE:E8DA5E:65224064.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1326,REFA,devdananthony,N/A,https://github.com/devdananthony/REFA,https://api.github.com/repos/devdananthony/REFA,REFA COIN For Easy Energy Transaction Using BlockChain Technology To Distribute Energy From Producers To Consumers,"Website: https://refa.energy

Telegram: https://t.me/refaenergy

Telegram C: https://t.me/refachannel

Twitter: https://twitter.com/refaenergy

Medium: http://refatoken.medium.com/

Reddit: https://www.reddit.com/user/refatoken

BSC Contract address: https://bscscan.com/token/0x0C073f661e7f040d8EBF86FB758aAA61Aa90C8a7

About REFACOIN:

Token Ticker: REFA

Token Name: REFACOIN

Blockchain: BEP-20 (Binance Smart Chain)


 27,000,000 REFA Total Supply


REFA Token (Renewable Energy For All) Is
interconnecting Producers of Renewable
energy products and Consumers, We are going to
produce an energy module that will serve as a
pay-as-go module for energy consumption (in-
view), which REFA will be sold to producers and
they will integrate it into their solar
systems/products and then sell to consumers who
will be buying energy unit from the REFA website
(in-view) to subscribe for their energy use,
through REFA Token, thereby increasing the
the market value of REFA.

Let them go to the moon, we are taking over the world!
",0,0,0,0,renewable-energy,"[electricity-consumption, electricity-meter, renewable-energy, solar-energy, token]",00000
1327,renewables,gregreen,N/A,https://github.com/gregreen/renewables,https://api.github.com/repos/gregreen/renewables,Musings on grand renewable energy plans.,"# renewables
Musings on grand renewable energy plans.

The basic idea of this repository is to explore a couple of different ideas for a grand renewable energy plan, which could meet all the world's energy needs. This project was inspired originally by reading *[Sustainable Energy: Without the Hot Air](https://www.withouthotair.com/)*.

Since there is enough Sunlight and wind power available to power everything, the most interesting question seems to be: *What regions would one have to cover with solar farms (either PV or collecting) and wind turbines in order to get as stable a supply as possible of energy, while keeping down the total footprint of the total system?* Wind and Sun are variable, but by connecting large geographic regions into one grid, one might hope to average out the variability of these power sources, thus minimizing the need for grid-scale energy storage.

A secondary question that might be interesting to explore is: *What regions could one place pumped storage in, in order to have a sufficient supply of energy to smooth out power variability?*
",0,0,3,0,renewable-energy,"[noaa, renewable-energy]",00000
1328,MHK,ursusDenali,N/A,https://github.com/ursusDenali/MHK,https://api.github.com/repos/ursusDenali/MHK,Renewable Energy Resource Analysis Documents,"# MHK
Renewable Energy Resource Analysis Documents

This repository contains python code and notebooks that I have used to analyze renewable energy resource data and create persentation visualizations for engineering reports. The original data was provided in both month long time series data recording vertical column velocity as well as 2-D site transects providing instantaneous cross section data of tidal currents.
",0,0,1,0,renewable-energy,"[hydrokinetic, mhk, renewable-energy]",00000
1329,netset,csaladenes,N/A,https://github.com/csaladenes/netset,https://api.github.com/repos/csaladenes/netset,Code behind the Networked Sustainable Energy Transitions Exploratorium,"
[<img src=""favicon.png"" alt=""favicon"" height=24 width=24 />  Networked Sustainable Energy Transitions Exploratorium](http://netset.csaladen.es/)
===
[![Networked Sustainable Energy Transitions Exploratorium](snapshot.png ""Networked Sustainable Energy Transitions Exploratorium"")](http://netset.csaladen.es/)  

Investigating how society needs to be aware of EROEI (energy return on energy invested) dynamics of the different energy sources as it transitions away from fossil fuels. We map the energy trade dynamics of countries throughout their fossil-renewable energy transitions. This is an extension of the [Sustainable Energy Transitions](http://set.csaladen.es) model.  A project by [Dénes Csala](http://www.csaladen.es/) at [Lancaster University](http://lancaster.ac.uk) and [Sgouris Sgouridis](http://www.ssgouridis.org/) at [Masdar Institute of Science and Technology](http://www.masdar.ac.ae/).

__This is an interactive global visualization and exploration interface (_exploratorium_)__.

# App
Try: http://netset.csaladen.es

# Articles
1. Sgouridis, Kaya, Csala, [Switching Economics for Physics and the Carbon Price Inflation: Problems in Integrated Assessment Models and their Implications](http://arxiv.org/abs/1603.06196), 2016, preprint on arXiv
2. Sgouridis, Csala, Bardi, [The Sower's way. Quantifying the Narrowing Net-Energy Pathways to a Global Energy Transition](http://iopscience.iop.org/article/10.1088/1748-9326/11/9/094009), 2016, Env. Res. Let.
3. Csala, [A data-driven dynamic net-energy analysis of global and national sustainable energy transition paths](https://www.academia.edu/27857565/A_data-driven_dynamic_net-energy_analysis_of_global_and_national_sustainable_energy_transition_paths), 2016, PhD thesis, Masdar Institute, MIT

# Cite
Please use articles (1), (2) and (3) to refer to this work. Contact the authors ([Dénes](d.csala@lancaster.ac.ae), [Sgouris](ssgouridis@masdar.ac.ae)) if you would like to use the data presented on this website more extensively or you would like to collaborate on the project.

# Description
Coming soon.

# Credit
Dénes Csala, 2017  
http://csaladen.es
",0,0,3,0,renewable-energy,"[ces, country-influence, d3, d3js, d3plus, data-exploratorium, data-mining, data-science, energy-storage, energy-trade, energy-transitions, eroei, eroi, exploratorium, networks, policy-sync, policy-synchronization, renewable-energy, sustainability, system-dynamics]",00000
1330,learning-curves,0-k,N/A,https://github.com/0-k/learning-curves,https://api.github.com/repos/0-k/learning-curves,Plotting cost curves of solar PV,"# learning-curves
Plotting cost curves of solar PV


# Output

![Learning Curve](./graphs/learning_curve_PV.png)
![Exponential Curve](./graphs/exponential_curve_PV.png)


# Source: 
http://dx.doi.org/10.18419/opus-11132
",0,0,1,0,renewable-energy,"[datavisualization, learning-curves, renewable-energy, solar-energy]",00000
1331,pvsc48-tracker-terrain-loss-MANUSCRIPT,mikofski,N/A,https://github.com/mikofski/pvsc48-tracker-terrain-loss-MANUSCRIPT,https://api.github.com/repos/mikofski/pvsc48-tracker-terrain-loss-MANUSCRIPT,Improved modeling of PV solar power for trackers on sloping terrain. Available online: https://doi.org/10.1109/JPHOTOV.2021.3114599,"# pvsc48-tracker-terrain-loss-MANUSCRIPT
Improved modeling of PV solar power for trackers on sloping terrain. Available online: https://doi.org/10.1109/JPHOTOV.2021.3114599

## Citation
>M. Leung et al., ""Tracker Terrain Loss Part Two,"" in IEEE Journal of Photovoltaics, vol. 12, no. 1, pp. 127-132, Jan. 2022, doi: 10.1109/JPHOTOV.2021.3114599.
",0,0,2,0,renewable-energy,"[modeling, photovoltaics, renewable-energy, solar, solar-energy, solar-power]",00000
1332,Design-a-Wind-Energy-System-to-power-a-House,zainalibhinder,N/A,https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House,https://api.github.com/repos/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House,Design a Wind Energy System to power a House,"#  Design a Wind Energy System to Power a House

![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/0700892d-3052-4803-950a-f86ab540ecdc)
![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/39fa714e-52a6-40cc-9741-cddf1ea34fed)



## SOFTWARE REQUIREMENTS


- HOMER PRO

## ABOUT THE PROJECT

```
The project objective is to design an off-grid wind turbine system having an autonomy of
3-days using battery storage to provide a reliable and sustainable source of electric power.
Homer Pro software is used to get the wind speed data for any Longitude and latitude using
NASA average wind speed Models and annual load profile is updated in the software. Then
converters, batteries and wind turbines are selected based on the wind profile, autonomy
and peak load requirements. The wind turbine is selected such that it operates at max output
even in the months of low wind speed based on the power vs wind speed curve. Then, cable
specification and wiring diagrams required for the wind turbine are calculated and
illustrated respectively.

 
```
## Getting Started
## Specifications and layout of the House
1) Determine the longitude and latitude of the location. Then, determine the dimensions of the house
   and the frequency and voltage provided by the power utility company.
2) Determine the total load in the house and from that, calculate the kwh/day consumption.
   


## Battery Specification and Sizing
1) Calculate the corrected load:
   ![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/5f96b0f6-d5f3-4dc0-a810-02c8a44ac256)

2) After calculating corrected load, determine battery capacity:
   ![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/ac8d2254-4042-444b-ad88-7203e4c80e93)

3) Then select the appropriate batteries from  the Homer Pro and calculate the No of batteries Required:
   ![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/1d2b73b3-8d13-420e-99b3-d6566e78fdb5)
## Converter Specification
1) Determine the inverter size by taking into account Safety factor and choose the suitable model as per your load:
   ![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/62ea44e8-08b8-4874-99b1-2a1c0ee4f05d)


## Wind Turbine Specification
1) Firstly, the longitude and latitude of selected location is fed into
the HOMER PRO software and monthly average wind speed at 50m above the surface of the earth
over a 30 year period (Jan 1984-Dec 2013) is downloaded from the NASA Prediction of
Worldwide Energy Resource (Power) database.
![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/5d1750ca-3359-4a78-b5f8-4f4e560d940c)

 2) Based on the average wind speed, select the suitable wind turbine by looking at the power curve of different wind turbines inside the Homer Pro.
     Below is an example where EO10 is selcted based on the average wind speed.
![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/4db1e71f-d02d-4ae5-b6a5-7a225ebb65c5)

## Cable Specifications

1) Determine the load current and calulate the resisteance to compensate for temperature.
   Also make sure the voltage drop is within acceptable range as per NEC specifications:
 ![image](https://github.com/zainalibhinder/Design-a-Wind-Energy-System-to-power-a-House/assets/109630795/19d049d7-ca36-4af1-9360-5ac280c55df9)
Rest of the caluculation is given in the project report.






## License
&copy; 
[ZAIN ALI BHINDER](https://github.com/ZAINALIBHINDER)
",0,0,1,0,renewable-energy,"[homer-pro, renewable-energy, wind-energy]",00000
1333,Joulie-16-UDP,autarctechelias,N/A,https://github.com/autarctechelias/Joulie-16-UDP,https://api.github.com/repos/autarctechelias/Joulie-16-UDP,Simple script to communicate with a Joulie-16 BMS,"# Joulie-16-UDP
Simple script to communicate with a Joulie-16 BMS


Only tested under Linux (raspbian and ubuntu)

Requirements:
  - python-crcmod
  - A connection to the same network as the BMS with an active DHCP
  - BMS Version 1.14 or later
  - DIP-8 active on BMS
",0,0,1,0,renewable-energy,"[battery-management-system, python, renewable-energy]",00000
1334,FVmeranie,PavelSimon,N/A,https://github.com/PavelSimon/FVmeranie,https://api.github.com/repos/PavelSimon/FVmeranie,Automatizácia merania V-A charakteristiky FV bunky/panela,"# FVmeranie
Automatizácia merania V-A charakteristiky FV bunky/panela

Hodnota napätia a prúdu je meraná pomcou 4 kanálového AD prevodníka ADS1115 a zaznamenaná do databáze SQLite pre ďalšie vyhodnotenie. ADC je pripojené cez i2c na Raspberry Pi.
",0,0,2,0,renewable-energy,"[automation, renewable-energy]",00000
1335,energy,elaine-yuan,N/A,https://github.com/elaine-yuan/energy,https://api.github.com/repos/elaine-yuan/energy,Journey to the Best: Global and Chinese Growth of Green Energy,"# energy
Journey to the Best: Global and Chinese Growth of Green Energy

In a weeklong independent project, I examined UN Energy Statistics because I am interested in the implementation of renewable energy sources for a greener, cleaner planet. What countries are producing the most renewable energy? What is contributing to their success in the green energy sector? How can we, the United States, improve? I discovered the popularity of hydro energy and the green energy powerhouse that is China. One reason for China's growth is effective infrastructure, i.e. dams and power plants. 

After data cleaning in Excel and data analysis in Tableau, I studied 9,745 total records of renewable energy data and 34,936 records of global power plant data and presented my findings in a PowerPoint presentation:
1. The U.S. and other countries can learn from China's prioritization of green energy: in 2019, China produced 30% of global hydro energy, 28% of global wind energy, and 33% of global solar energy.
2. Hydro energy is the most popular and efficient renewable energy source in the world: from 1990 to 2019, there is a 445% increase in global hydroelectricity generation.
3. Nonrenewable nuclear energy can be developed because although nuclear power plants are <1% of total power plants, they accounted for 7.15% of global power plant capacity.

Tableau Link: https://public.tableau.com/app/profile/elaine.yuan3471/viz/Energy_16551460088140/JourneytotheBest 

Tools: Excel, Tableau, PowerPoint
",0,0,1,0,renewable-energy,"[data-analysis, data-visualization, green-energy, green-energy-sector, renewable-energy]",00000
1336,carbon-interface,mattburnett-repo,N/A,https://github.com/mattburnett-repo/carbon-interface,https://api.github.com/repos/mattburnett-repo/carbon-interface,React application that provides a front end for the Carbon Interface Estimates API. https://www.carboninterface.com/,"# Carbon Interface API Frontend

This is a React application that provides a front end for the [Carbon Interface Estimates API](https://www.carboninterface.com/).

It is deployed [here](https://carbon-interface.vercel.app/).

There is a limit of 200 api requests per month. The api/app will return an error if this monthly limit has already been exceeded.

---

## Tech Used
* Vite
* React 18
* Vercel Analytics
* Typescript
* Formik
* Yup
* [iso3166-2-db](https://www.npmjs.com/package/iso3166-2-db) (for standardized international country / region codes)
* [airport-iata-codes](https://www.npmjs.com/package/airport-iata-codes)
* [react-pro-sidebar](https://www.npmjs.com/package/react-pro-sidebar)
* Material UI v5
* Sass CSS compiler
* Postman (api has a [Collection](https://carbon-interface.s3.ca-central-1.amazonaws.com/assets/Carbon+Interface.postman_collection.json) that is useful for development )

## Installation and start up
* Clone the repo 
  ```bash
  git clone https://github.com/mattburnett-repo/carbon-interface.git
  ```
* Copy sample.env to .env
  ```bash
  cp sample.env .env
  ```
* [Get an api key](https://www.carboninterface.com/account/api_credentials) and enter it into the .env file
  ```bash
  VITE_API_KEY=your.api.key.goes.here
  ```
* Start the app
  ```bash
  yarn dev
  ```
* You should see a Vite message in the terminal
  * Command / click on the Local: http://localhost:5173/ link",0,0,1,7,renewable-energy,"[carbon-emissions, carbon-footprint, renewable-energy, sustainability]",00000
1337,pvsc46_solarfarmer_bifacial,mikofski,N/A,https://github.com/mikofski/pvsc46_solarfarmer_bifacial,https://api.github.com/repos/mikofski/pvsc46_solarfarmer_bifacial,Bifacial PV modeling with SolarFarmer,"# pvsc46_solarfarmer_bifacial
Bifacial PV modeling with SolarFarmer. Available online: https://doi.org/10.1109/PVSC40753.2019.8980572

## Citation
>M. A. Mikofski, R. Darawali, M. Hamer, A. Neubert and J. Newmiller, ""Bifacial Performance Modeling in Large Arrays,"" 2019 IEEE 46th Photovoltaic Specialists Conference (PVSC), Chicago, IL, USA, 2019, pp. 1282-1287, doi: 10.1109/PVSC40753.2019.8980572.
",0,0,1,0,renewable-energy,"[bifacial, photovoltaics, renewable-energy, solar, solar-energy, solar-power, solar-power-prediction]",00000
1338,CV,jamesray1,N/A,https://github.com/jamesray1/CV,https://api.github.com/repos/jamesray1/CV,James Ray's CV,"### James Ray's resume

Hurlstone Park (inner west Sydney), Australia | [contact me](https://docs.google.com/forms/d/e/1FAIpQLSeY71SEvQhHWlspzkvw0odpfdjqdEyy8ORL8XtRMFMQkzYfQg/viewform) | [hosted at GitHub](https://github.com/jamesray1/cv) | [skills](skills.md) | [see also](see-also.md)

#### [Crypto developer, researcher and technical writer](crypto-industry-experience.md)

2017-06–2019-06, 2019-10. Sydney (remote). Most of my efforts in reverse chronological order were on work with [Holochain](https://holochain.org), [gossipsub](https://github.com/libp2p/rust-libp2p/pull/767), [Ethereum](https://ethereum.org/) [2.0](https://github.com/ethereum/eth2.0-specs) [development](https://github.com/Drops-of-Diamond/diamond_drops), research and technical writing, as well as a couple of other projects with [Pocket Network](https://pokt.network/), [Katallassos](https://katallassos.com), and [Substrate](https://www.parity.io/substrate/), and Locale. I am more enthused about Holochain, [Ceptr](http://ceptr.org/), and the [Metacurrency Project](http://metacurrency.org/) than I am about blockchains.

Programming languages: mostly used [Rust](https://www.rust-lang.org/), but also studied and/or used [Wasm](https://webassembly.org/), Javascript, Go, Python, and C++.

#### Project Manager at ShineHub

This role involved owning the completion of going solar for a customer, being the main point of contact, and liaising with the customer, internal teams, and external parties like installers, from after sale, through to various stages such as engineering design and review, installation and collecting the initial deposit or arranging finance, and final payment.

#### [Technical Support Engineer](tech-support-eng-SG.md) at [Sungrow](https://en.sungrowpower.com/) [Australia Group](https://www.sungrowpower.com.au/)

2017-03–2018-02. Inverters, batteries, fault rectification, warranty claims, monitoring, emails, phone calls, technical writing, installation support, residential, commercial, utility-scale, spreadsheets, repair, data entry, product feedback, improving operational efficiency, training others.

#### [Projects and short-term, casual, or intermittent roles](projects.md) e.g.:

- **Solar Energy Enterprises**: product development, pre-design, feasibility, grid connection applications, and lead generation;
- **Todae Solar**: solar sytem pre-design, feasibility studies, Nearmap, project management, and spreadsheets.

#### Education

[B Eng (Renewable Energy) (Hons)](education.md), UNSW, 2011–2014. 
Self-study: programming, crypto, SolidWorks, AutoCAD. Online courses: project management, mechanics, SCADA.
",0,0,3,0,renewable-energy,"[cryptography, cv, renewable-energy, resume, rust]",00000
1339,renewable_energy_analysis,nthieu173,N/A,https://github.com/nthieu173/renewable_energy_analysis,https://api.github.com/repos/nthieu173/renewable_energy_analysis,Using machine learning techniques to analyze the significance of factors affecting renewable energy development in the US.,"# Analysis of Renewable Energy Development in the US
Using machine learning techniques to analyze the significance of factors affecting renewable energy development in the US.

https://nthieu173.github.io/renewable_energy_analysis/

## Authors
Albert Xing

Alexander George-Kennedy 

Hieu Nguyen

Wei Xiong Toh",0,0,4,0,renewable-energy,"[machine-learning, renewable-energy, united-states]",00000
1340,BatterySimulator,ncallister,N/A,https://github.com/ncallister/BatterySimulator,https://api.github.com/repos/ncallister/BatterySimulator,Simulated home battery based on Jemena data export,"# Home Battery Simulator

This application simulates a hypothetical home battery using power input / output data exported from Jemena's portal.

Note that throughout this application the power ""generated"" is the power that was fed into the grid. This doesn't
include the power that was generated and used on site since that isn't visible to Jemena and wouldn't affect the
calculations for a battery.

## Using the battery simulator

The main class is `BatterySimulator.java`. 

### Configuration

Currently all configuration is done using static variables:

`DATA_FILE`
  : The path, absolute or relative to the working directory, of the data export CSV file.

`OFF_PEAK_ENABLE`
  : Set to `true` to enable off peak calculations.

`OFF_PEAK_DAYS`
  : Days that are entirely off peak. List of integers referencing the `Calendar` constants.

`TIME_COLUMN_OFF_PEAK_START`
  : Columns after and including this are off-peak

`TIME_COLUMN_OFF_PEAK_END`
  : Columns up to and including this are off-peak

`RESERVE_FOR_PEAK`
  : The minimum level (in percentage 0.0 to 1.0) that the battery will drain to during an off-peak period

`RATE_FEED_IN`
  : The feed in price in dollars

`RATE_PEAK`
  : The peak grid draw price in dollars. If off-peak is disabled then this price is used for all calculations.

`RATE_OFF_PEAK`
  : The off-peak grid draw price in dollars.

Hypothetical batteries can then be added in the `main` method. For example:

~~~java
        // Define batteries
        List<Battery> batteries = new ArrayList<>();
        batteries.add(new Battery(
                ""Origin: LG Chem 6.5"",
                4595.0,
                5.9, 
                0.95,
                OFF_PEAK_ENABLE ? RESERVE_FOR_PEAK : 0.0));
        batteries.add(new Battery(
                ""Origin: LG Chem 10"",
                5195.0,
                8.8, 
                0.95,
                OFF_PEAK_ENABLE ? RESERVE_FOR_PEAK : 0.0));
~~~

Provide:

  * The name of the battery
  * The price
  * The storage limit (in KWh)
  * The round trip efficiency (as a percentage, 0.0 to 1.0)
  * The percentage to reserve for peak times (copy the example above)

If not known, the storage limit and round trip efficiency can be found for most batteries
[here](https://www.solarquotes.com.au/battery-storage/comparison-table/).

### Output

The program outputs:

  * A human readable summary of the data with
    * ""Gen"" - Power generated, fed into grid
    * ""Con"" - Power consumed from the grid
  * For each battery:
    * A summary of the battery settings
    * The total amount that would have been stored over the data period
      * The money loss from not feeding into the grid
    * The total amount used from the battery rather than the grid
      * The money saved
    * Note: Percentages are of total power fed into grid in the original data set
  * A summary of the financial stats
    * Total money saved
    * Money saved per day
    * Estimated time to pay off the battery (Compare this to the battery warranty)
  * Additional stats

Example output:

~~~
Data Summary
============
Time period: 730 days
Power from grid (peak): 11,760.5 KWh ($2646.11) - av. 16.1 kWh / day
Power from grid (off peak): 0.0 KWh ($0.00) - av. 0.0 kWh / day
Power to grid: 12,686.9 KWh ($850.02)
Y: 2020, M: 6, Gen: 32.6, Con: 207.9
Y: 2020, M: 7, Gen: 138.7, Con: 641.6
Y: 2020, M: 8, Gen: 307.2, Con: 565.3
Y: 2020, M: 9, Gen: 639.3, Con: 308.6
Y: 2020, M: 10, Gen: 631.0, Con: 311.0
Y: 2020, M: 11, Gen: 881.4, Con: 339.3
Y: 2020, M: 12, Gen: 1096.5, Con: 273.8
Y: 2021, M: 1, Gen: 814.9, Con: 454.5
Y: 2021, M: 2, Gen: 656.4, Con: 435.8
Y: 2021, M: 3, Gen: 641.5, Con: 352.8
Y: 2021, M: 4, Gen: 465.5, Con: 329.8
Y: 2021, M: 5, Gen: 205.2, Con: 531.2
Y: 2021, M: 6, Gen: 80.5, Con: 726.7
Y: 2021, M: 7, Gen: 120.6, Con: 808.9
Y: 2021, M: 8, Gen: 321.6, Con: 600.8
Y: 2021, M: 9, Gen: 600.5, Con: 387.0
Y: 2021, M: 10, Gen: 735.5, Con: 407.1
Y: 2021, M: 11, Gen: 755.7, Con: 380.9
Y: 2021, M: 12, Gen: 1093.9, Con: 319.1
Y: 2022, M: 1, Gen: 696.8, Con: 603.8
Y: 2022, M: 2, Gen: 651.1, Con: 476.2
Y: 2022, M: 3, Gen: 476.1, Con: 607.8
Y: 2022, M: 4, Gen: 395.0, Con: 377.2
Y: 2022, M: 5, Gen: 183.8, Con: 742.8
Y: 2022, M: 6, Gen: 65.6, Con: 570.6

============

Origin: LG Chem 6.5

Idealised 5.9 KWh system, using 730 days of data
Reserving 0.0 KWh for peak usage

Total Stored: 4,011.6 KWh (-$268.78) (31.6%) - av. 5.5 / day
Saved (off-peak): 0.0 KWh ($0.00)
Saved (peak): 4,011.6 KWh ($902.61)

Total difference: $619.69
Difference / day: $0.85
Time to pay off $4,595.00: 5412 days (~ 14.8 years)

Lost in storage: 211.1 KWh (1.7%)
Sent to grid: 8,675.3 KWh (68.4%)
From grid (off-peak): 0.0 KWh
From grid (peak): 7,748.9 KWh

Average stored: 1.7
Maximum stored: 5.9

Average max daily stored: 4.9

============

Origin: LG Chem 10

Idealised 8.8 KWh system, using 730 days of data
Reserving 0.0 KWh for peak usage

Total Stored: 5,126.3 KWh (-$343.46) (40.4%) - av. 7.0 / day
Saved (off-peak): 0.0 KWh ($0.00)
Saved (peak): 5,126.3 KWh ($1,153.41)

Total difference: $791.88
Difference / day: $1.08
Time to pay off $5,195.00: 4789 days (~ 13.1 years)

Lost in storage: 269.8 KWh (2.1%)
Sent to grid: 7,560.6 KWh (59.6%)
From grid (off-peak): 0.0 KWh
From grid (peak): 6,634.2 KWh

Average stored: 2.8
Maximum stored: 8.8

Average max daily stored: 6.8
~~~
",0,0,2,0,renewable-energy,"[battery, finance, renewable-energy]",00000
1341,SFNet,warwick-icse,warwick-icse,https://github.com/warwick-icse/SFNet,https://api.github.com/repos/warwick-icse/SFNet,Multi-fidelity modeling of wind farm wakes based on a novel super-fidelity network,"## [Multi-fidelity modeling of wind farm wakes based on a novel super-fidelity network](https://www.sciencedirect.com/science/article/pii/S0196890422009633) 

*Energy Conversion and Management*, 2022, [Rui Li](https://lironui.github.io/),  [Jincheng Zhang](https://www.researchgate.net/profile/Jincheng-Zhang-2) and [Xiaowei Zhao](https://warwick.ac.uk/fac/sci/eng/people/xiaowei_zhao/).

## Introduction

This project (SFNet) is the pretrained model and test code for [Multi-fidelity modeling of wind farm wakes based on a novel super-fidelity network](https://www.sciencedirect.com/science/article/pii/S0196890422009633).

## Preparation

python==3.6.13  <br />
torch==1.10.2  <br />
torchvision==0.11.3  <br />
floris==2.4  <br />
pandas==1.1.5  <br />
numpy==1.19.5

## Visualization

After installing required libraries mentioned above, then you can run the ```test.py``` based on provided low-fidelity flow fields generated by FLORIS (8 m/s, 9 m/s and 10 m/s). We provide three pretrained models which are trained based on 45, 90 and 135 samples (you can choose different models by changing the value of ```pre_trained_sample``` in test.py). To test different wind speeds, you need to change of the value of ```wind_speed``` in test.py.

Or you can generate your own data using ```gene_floris_farm.py```. 

## Results

The flow fields generated by FLORIS (left) and enhanced by SFNet (right):

<img src=""https://github.com/warwick-icse/SFNet/blob/main/result/floris.png"" title=""floris"" width=""400"" height=""300""><img src=""https://github.com/warwick-icse/SFNet/blob/main/result/sfnet.png"" title=""sfnet"" width=""400"" height=""300""/>

## Citation

If you find this project useful in your research, please consider citing our paper：

@article{ <br />
&ensp; &ensp; &ensp; &ensp; li2022multi,  <br />
&ensp; &ensp; &ensp; &ensp; title={Multi-fidelity modeling of wind farm wakes based on a novel super-fidelity network}, <br />
&ensp; &ensp; &ensp; &ensp; author={Li, Rui and Zhang, Jincheng and Zhao, Xiaowei}, <br />
&ensp; &ensp; &ensp; &ensp; journal={Energy Conversion and Management}, <br />
&ensp; &ensp; &ensp; &ensp; volume={270}, <br />
&ensp; &ensp; &ensp; &ensp; pages={116185}, <br />
&ensp; &ensp; &ensp; &ensp; year={2022}, <br />
&ensp; &ensp; &ensp; &ensp; publisher={Elsevier} <br />
}

## Acknowledgement

- [SOWFA](https://www.nrel.gov/wind/nwtc/sowfa.html)
- [FLORIS](https://github.com/NREL/floris)
",0,0,0,0,renewable-energy,"[deep-learning, multi-fidelity, offshore-wind, renewable-energy, wake]",00000
1342,European-Green-Deal-Analysis,ebjaime,N/A,https://github.com/ebjaime/European-Green-Deal-Analysis,https://api.github.com/repos/ebjaime/European-Green-Deal-Analysis,An analysis of the European Renewable Transition. ,"# Is the Green Deal Feasible?
## An analysis of the European Renewable Transition

During the last few decades, the European Union has made several proposals to stimulate the creation of
clean energy inside its country members (Kyoto protocol, Paris Agreement, European Green Deal, Clean
Energy for all Europeans, 2030 Climate and Energy EU objectives…) with the common objective of having a
total renewable energy future. Several projects have been carried out trying to predict whether these
objectives are plausible in the near future. A nonparametric approach seemed us like an interesting path
which could help analyze the effort made regarding this cause since it permits to obtain consistent
results under few conditions. We focused our attention on the European Green Deal (2020) that European
Commission President Ursula von der Leyen considered “like man landing on the moon” for Europe. In
fact this pact would make Europe the first continent to achieve Climate Neutrality by 2050 and in
particular it enhances Paris objective with the new target of 55% cut of greenhouse gas emissions by 2030
respect to 1990. Given the great importance for Europe that this pact would have if it were respected we
have set ourselves the goal of predicting whether this Green Deal target of a 55% cut in greenhouse gas
emissions (Ghg) by 2030 respect to 1990 levels is feasible. To do so we analyzed the European renewable
transition and forecasted future renewable energies and Ghg values, taking advantage of current and
past knowledge of data about production, consumptions and greenhouse gases. Since all energy related
information for every EU member is open to the public in the EU’s Eurostat portal, and all of its datasets
contain clean and reliable information, we deemed this project very interesting and useful to draw
further attention to these issues while using the nonparametric techniques learnt. We worked on a
variety of time series datasets about European energy consumption and of Ghg emissions in the time
window from 1990 to the present (see References). To properly predict future renewable energy and Ghg
values and to make our models more robust we also used population and Gross Domestic Product
(GDP) reliable predictions (see References).
By means of nonparametric prediction tools, we highlighted the non-feasibility of the Green Deal target, obtaining
a 32% cut in Ghg emissions. It is therefore clear that much more effort is needed, in order to properly tackle this
crucial challenge. Our work wants to be yet another raised alarm, to be added to the already long list of scientific
researches on this subject.

The project is part of the 2021-22 course [055702 - NONPARAMETRIC STATISTICS](https://www4.ceda.polimi.it/manifesti/manifesti/controller/ManifestoPublic.do?EVN_DETTAGLIO_RIGA_MANIFESTO=evento&aa=2021&k_cf=225&k_corso_la=487&k_indir=MST&codDescr=055702&lang=IT&semestre=1&idGruppo=4338&idRiga=271238), by Politecnico di Milano university. 
",0,0,2,0,renewable-energy,"[non-parametric-statistics, renewable-energy, renewable-resources]",00000
1343,Estacion_de_monitoreo_de_huevos_de_tortuga,IICAFabLab,N/A,https://github.com/IICAFabLab/Estacion_de_monitoreo_de_huevos_de_tortuga,https://api.github.com/repos/IICAFabLab/Estacion_de_monitoreo_de_huevos_de_tortuga,Esta estación permite monitorear la temperatura y humedad de la arena en la que anidan las tortugas marinas con el fin de determinar si existen las condiciones adecuadas para el nacimiento de tortugas de diferente sexo.,"# Estación de monitoreo de huevos de tortuga
Esta estación permite monitorear la temperatura y humedad de la arena en la que anidan las tortugas marinas con el fin de determinar si existen las condiciones adecuadas para el nacimiento de tortugas de diferente sexo.

## Componentes del sistema
- Arduino DOIT ESP32 DevKit V1
- Sensor capacitivo de humedad de suelo 
- Sensor de temperatura DS18B20
- Panel solar 18 W
- Regulador de voltaje

## Diagrama eléctrico

<img src=""https://user-images.githubusercontent.com/111079577/187562361-19f26c43-9630-4192-8eb9-e68f58296da0.svg"">
",0,0,1,0,renewable-energy,"[arduino, electronics, monitoring, renewable-energy]",00000
1344,Measuring_Predictability_Renewable_Energy,sahand-karimi,N/A,https://github.com/sahand-karimi/Measuring_Predictability_Renewable_Energy,https://api.github.com/repos/sahand-karimi/Measuring_Predictability_Renewable_Energy,Measuring the predictability of renewable generation,"[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7538884.svg)](https://doi.org/10.5281/zenodo.7538884)
# Code and Data for a study on measuring the predictability of renewable generation data
This repository contains the code and data for the following paper:

Sahand Karimi-Arpanahi, S. Ali Pourmousavi, and Nariman Mahdavi. ""Renewable generation predictability and its applications: A missing piece of the puzzle.""

Abstract: Currently, various decisions in the power systems domain are made based on renewable generation prediction as a decisive factor. Thus, numerous sophisticated forecasting methods have been developed to improve the prediction accuracy of renewable generation. However, the accuracy of forecasting methods is limited by the inherent predictability of the data used for prediction. Additionally, the prediction techniques cannot measure the inherent predictability of a given time series. Therefore, this important measure has been entirely overlooked in theory and practice. In this paper, we systematically assess the suitability of various predictability measures for renewable generation time series, revealing the best method and providing instructions to tune it. Then, using real-world examples, we illustrate how predictability could save end users and investors millions of dollars in the electricity sector.

# Folders and files
The main folder includes the codes used to produce the figures in the paper.
Input_data folder includes all the relevant input data that we can share. It also includes a synthetic rooftop PV generation dataset.
Processed_data folder includes most of the outputs of our codes, which were used to create the figures. 


# Important notes about the input data
The original rooftop PV generation data from Solar Analytics, used in this study, cannot be shared. However, we have added a synthetic dataset with a similar structure to our rooftop PV generation to this repository. This dataset is synthesized by interpolating hourly solar irradiance data to 5-minute resolution in different locations of Australia in 2015, which is gathered from BOM. While this synthetic dataset does not meet the criteria for the application described in our study, it guides the users to prepare their own dataset in the correct structure that can be used by our code. Also, it can be used as an example to study the code. Please note that a renewable generation dataset should satisfy the following three conditions for the applications described in this paper: 1) it should have at least a temporal resolution of 10 minutes (it can differ depending on the electricity market and compliance rules); 2) the measured or estimated data should not be systematically affected by the external factors, such as generation curtailment, export limits, etc.; and 3) the length of data should be at least six months, and the dataset should cover a wide geographical area such as a country.

The solar irradiance data (GTI) from SolCast, used in this study, cannot be shared publicly, but university students and researchers can freely access the data on SolCast.com to reproduce our results. To do so, one should create a ‘Student or public researcher’ account. Then, submit a ‘Time Series Request’ with the following details. Enter all the locations of the (potential) solar farms as in our study (the exact latitude and longitude of each location are available in the public repository). Set the ‘Data period’ as mentioned in the relevant analysis, ‘Time granularity’ to 5 minutes and ‘File format’ to Solcast. Select `GTI Horizontal Single-Axis Tracker’ as one of the parameters in their request. Finally, download the GTI data and use it as input for the relevant analyses (the codes of which are shared in this repository).


# How to use the codes to produce the figures shown in the paper
We have tried our best to share as much processed data as possible so that others can firstly check out the output of the functions on our PV generation data, and, secondly produce some of the figures. If a figure can be fully created without any dependency on the input PV generation data, then it is possible to reproduce the exact figure shown in the paper. 

Regarding the analyses and figures associated with the solar irradiance data from Solcast, we have provided the exact locations of the solar farms (studied in our analyses) in the relevant codes. Thus, it is possible to download (from Solcast.com) the exact solar irradiance data we used and reproduce the relevant figures shown in the paper.


# How to run the Jupyter Notebooks
In all notebooks, if the appropriate input data is available, one can run all the cells from top to bottom in the notebook to do the relevant analysis or create the figure. In some notebooks, one can use the processed data to directly produce the figures without needing to process the input data (as the data used in our study is not publicly available in most cases).

If the user wants to use the code on their own data, first, they should run the Python codes with their own data as the input in order to create the datasets of entropy measures and prediction errors for their own renewable generation data. Then, they can run the Jupyter Notebooks to do the analyses.
",0,0,2,0,renewable-energy,"[entropy, entropy-measures, renewable-energy]",00000
1345,Horizontal-Photovoltaic-Power-Prediction-analytics-for-12-sites,KanikaMaheshwari1112,N/A,https://github.com/KanikaMaheshwari1112/Horizontal-Photovoltaic-Power-Prediction-analytics-for-12-sites,https://api.github.com/repos/KanikaMaheshwari1112/Horizontal-Photovoltaic-Power-Prediction-analytics-for-12-sites,Primary aim of this project is to build machine learning model that should be able to predict the solar power output of the 12 different location of the Northern Hemisphere according to the provided dataset.,"# Horizontal-Photovoltaic-Power-Prediction-analytics-for-12-sites
Solar energy is one of the leading renewable energy sources in the world and it continues to grow. However, it depends on sunlight which is an intermittent natural resource. This makes power output predictability critical for the integration of solar photovoltaics into traditional electrical grid systems.

In the current analysis, power output from horizontal photovoltaics installed in 12 locations in the northern hemisphere is predicted. Only location and weather data are used without information about irradiance. While irradiance is a strong predictor of solar power output, collecting this information about a location is often tedious and its estimation may have significant errors. Hence, the ability to predict power output without irradiance data needs to be further explored to save time, effort, and cost with no significant loss of accuracy.
",0,0,1,0,renewable-energy,"[knn, knn-regression, lgbmregressor, machine-learning, randamforest, renewable-energy, solar-power-prediction]",00000
1346,alistairpialek.github.io,alistairpialek,N/A,https://github.com/alistairpialek/alistairpialek.github.io,https://api.github.com/repos/alistairpialek/alistairpialek.github.io,"My personal website and blog. I tend to post about solar, home automation and whatever scripts, discoveries and insights come my way.","{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C184:5119:25927A5:4D3B795:652242E7.'}",0,0,2,0,renewable-energy,"[home-automation, renewable-energy]",00000
1347,California-Renewable-Predictions-with-FB-Prophet,TheFoodForest,N/A,N/A,https://api.github.com/repos/TheFoodForest/California-Renewable-Predictions-with-FB-Prophet,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C158:3D80:271B4E0:503D7FC:652242E7.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1348,mcmendel,buabaj,N/A,N/A,https://api.github.com/repos/buabaj/mcmendel,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C150:6459:266B98B:4EF52F7:652242E8.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1349,LCA_multiMW_AWE,awegroup,N/A,N/A,https://api.github.com/repos/awegroup/LCA_multiMW_AWE,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C120:603C:288902C:5310533:652242E8.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1350,localplan,Elgenied,N/A,N/A,https://api.github.com/repos/Elgenied/localplan,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C13A:9CF4:2809F41:5211CFA:652242E9.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1351,entsoe-graphql,aignerjo,N/A,N/A,https://api.github.com/repos/aignerjo/entsoe-graphql,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1C5:5173:24D4920:4BB8609:652242E9.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1352,gore,zathras777,N/A,N/A,https://api.github.com/repos/zathras777/gore,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1AD:3D80:271B74C:503DCF9:652242EA.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1353,EneGRy,pdoup,N/A,N/A,https://api.github.com/repos/pdoup/EneGRy,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C107:74C7:268D2D3:4F27DEE:652242EB.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1354,coloursofhydrogen,Rodeobe,N/A,N/A,https://api.github.com/repos/Rodeobe/coloursofhydrogen,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1BE:78AC:27ECBC9:51E9D77:652242EB.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1355,WindTurbineAcceptanceRates,dr-harper,N/A,N/A,https://api.github.com/repos/dr-harper/WindTurbineAcceptanceRates,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C182:4AAE:277C527:510AE1E:652242EC.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1356,switch-model_Menorca,gustavotiguga,N/A,N/A,https://api.github.com/repos/gustavotiguga/switch-model_Menorca,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1F4:6EFD:254ABF8:4CADE2E:652242EC.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1357,Renewable-Energy-Forecast,chakshu-dhannawat,N/A,N/A,https://api.github.com/repos/chakshu-dhannawat/Renewable-Energy-Forecast,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1E8:603C:28894B5:5310E94:652242ED.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1358,Energy-Transition-Analysis,kennysmart1,N/A,N/A,https://api.github.com/repos/kennysmart1/Energy-Transition-Analysis,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C132:629D:4575431:8CF0B9B:652242EE.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1359,Project-Z-NEV,Z-NEV,Z-NEV,https://github.com/Z-NEV/Project-Z-NEV,https://api.github.com/repos/Z-NEV/Project-Z-NEV,"Project: Z-NEV is a global, open source collaboration to design and build a modular zero-net energy vessel. All are welcome.",# Project-Z-NEV,0,0,1,0,renewable-energy,"[composites, electrolysis, energy-generation, engineering, fuel-cell, hydrogen, materials-science, naval-architecture, photovoltaic, polymer, renewable-energy, renewables, social-impact, solar-energy, vessel-design, wave-energy, wind-energy, wind-turbine, zero-energy, zeronet]",00000
1360,Joulie-16-LCD,autarctechelias,N/A,N/A,https://api.github.com/repos/autarctechelias/Joulie-16-LCD,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1BB:16F7:26B2DC4:4F6A060:652242EE.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1361,cnr_Challenge,nicolashuyghe,N/A,N/A,https://api.github.com/repos/nicolashuyghe/cnr_Challenge,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D3:7039:27840D7:51115DD:652242EF.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1362,Geological_Potential_Assessment,fgasa,N/A,N/A,https://api.github.com/repos/fgasa/Geological_Potential_Assessment,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C130:7039:2784157:51116E9:652242EF.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1363,resonant_processing,ericrobskyhuntley,N/A,N/A,https://api.github.com/repos/ericrobskyhuntley/resonant_processing,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1DB:16F7:26B2F4F:4F6A3A3:652242F0.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1364,PGMcpp_v2-1,gears1763-2,N/A,N/A,https://api.github.com/repos/gears1763-2/PGMcpp_v2-1,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C185:6EFD:254AF6E:4CAE565:652242F1.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1365,SASESCSC_js,mubarakky,N/A,N/A,https://api.github.com/repos/mubarakky/SASESCSC_js,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C13B:4AEE:28605A8:52C5D21:652242F1.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1366,Tokenized-Energy-Services,ContractorTeam,N/A,N/A,https://api.github.com/repos/ContractorTeam/Tokenized-Energy-Services,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1FC:1B08:280CD14:520DE23:652242F2.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1367,noaa_nclimgrid_r,toozler,N/A,N/A,https://api.github.com/repos/toozler/noaa_nclimgrid_r,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D8:2B20:25C4811:4DA75A0:652242F2.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1368,node-gruenstromindex,energychain,N/A,N/A,https://api.github.com/repos/energychain/node-gruenstromindex,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1B0:28F2:2A2A129:5654062:652242F3.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1369,contracts-sinan,protokol,N/A,N/A,https://api.github.com/repos/protokol/contracts-sinan,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1C0:7CD5:2A1ABE9:5642DF5:652242F3.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1370,mooc-renewables-outsmarting-intermittency-notes,arnaudj,N/A,N/A,https://api.github.com/repos/arnaudj/mooc-renewables-outsmarting-intermittency-notes,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C101:9CF4:27DC7A8:51B3FFF:65224057.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1371,EverythingRenewables,renewablenergy,N/A,N/A,https://api.github.com/repos/renewablenergy/EverythingRenewables,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1EE:75D0:26444D8:4EA1C30:652242F4.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1372,wind-farm-wake-steering-optimisation-with-rl,RichardFindlay,N/A,N/A,https://api.github.com/repos/RichardFindlay/wind-farm-wake-steering-optimisation-with-rl,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C17B:5BDF:274E739:50B41D9:652242F5.'}",N/A,N/A,N/A,N/A,renewable-energy,"[N, /, A]",00000
1373,scaphandre,hubblo-org,N/A,N/A,https://api.github.com/repos/hubblo-org/scaphandre,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A2:18E3:28BF2B:54D11F:65223FBD.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1374,kepler,sustainable-computing-io,N/A,N/A,https://api.github.com/repos/sustainable-computing-io/kepler,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16F:4E78:6DAA2D:E2A75E:65224074.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1375,better_thermostat,KartoffelToby,N/A,N/A,https://api.github.com/repos/KartoffelToby/better_thermostat,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C125:6EFD:254B2FC:4CAECC5:652242F5.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1376,Split-Single-Phase-Energy-Meter,CircuitSetup,N/A,N/A,https://api.github.com/repos/CircuitSetup/Split-Single-Phase-Energy-Meter,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C162:679F:2ABDBDE:5767C40:652242F6.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1377,myems,MyEMS,N/A,N/A,https://api.github.com/repos/MyEMS/myems,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C7:1E3B:2FA8B44:61604FD:65224076.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1378,eemeter,openeemeter,N/A,N/A,https://api.github.com/repos/openeemeter/eemeter,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1F7:7DF2:26B834E:4F6B9FC:652242F6.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1379,modelica-buildings,lbl-srg,N/A,N/A,https://api.github.com/repos/lbl-srg/modelica-buildings,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C182:4AAE:277CD4D:510BF4B:652242F7.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1380,coppers,ThijsRay,N/A,N/A,https://api.github.com/repos/ThijsRay/coppers,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1C3:2299:255D381:4CC7909:652242F7.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1381,the-building-data-genome-project,buds-lab,N/A,N/A,https://api.github.com/repos/buds-lab/the-building-data-genome-project,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C18C:4AEE:2860D11:52C6C77:652242F8.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1382,building-data-genome-project-2,buds-lab,N/A,N/A,https://api.github.com/repos/buds-lab/building-data-genome-project-2,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C134:0C72:704E15:E7F9D5:65224077.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1383,tracarbon,fvaleye,N/A,N/A,https://api.github.com/repos/fvaleye/tracarbon,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A0:4678:1AB4FF7:36FD70F:65224078.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1384,RCCpp-DearImGui-GLFW-example,juliettef,N/A,N/A,https://api.github.com/repos/juliettef/RCCpp-DearImGui-GLFW-example,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C144:1D92:25E8EF3:4DD9461:652242F8.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1385,scout,trynthink,N/A,N/A,https://api.github.com/repos/trynthink/scout,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18F:4678:1AB558B:36FE2AE:6522407E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1386,Power-Control-HomeAssistant,Home-Assistant-Pro-Team,N/A,N/A,https://api.github.com/repos/Home-Assistant-Pro-Team/Power-Control-HomeAssistant,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C16D:7039:27848E9:51126CD:652242F9.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1387,energat,HongyuHe,N/A,N/A,https://api.github.com/repos/HongyuHe/energat,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18D:4E78:6DB56A:E2BEC8:6522407F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1388,open-source-in-environmental-sustainability,protontypes,protontypes,https://github.com/protontypes/open-source-in-environmental-sustainability,https://api.github.com/repos/protontypes/open-source-in-environmental-sustainability,The first analysis of the open source software ecosystem in sustainability and climate technology,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C12A:784E:75DC15:F35293:6522427D.'}",41,41,6,0,energy-efficiency,"[climate-change, climate-science, energy-efficiency, renewable-energy, sustainability, sustainable-development-goals]",00000
1389,dMazeRunner,MPSLab-ASU,N/A,N/A,https://api.github.com/repos/MPSLab-ASU/dMazeRunner,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1E6:5C75:276B657:50E4F17:652242FA.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1390,powerpal_ble,WeekendWarrior1,N/A,N/A,https://api.github.com/repos/WeekendWarrior1/powerpal_ble,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10D:7B5B:710A5F:E911C2:65224080.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1391,EnergySystemModelling,pitmonticone,N/A,N/A,https://api.github.com/repos/pitmonticone/EnergySystemModelling,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:607B:767F29:F41EBA:65224081.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1392,AMO-Tools-Desktop,ORNL-AMO,N/A,N/A,https://api.github.com/repos/ORNL-AMO/AMO-Tools-Desktop,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C18A:75D0:2644A80:4EA27EC:652242FA.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1393,Spikingformer,zhouchenlin2096,N/A,N/A,https://api.github.com/repos/zhouchenlin2096/Spikingformer,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D9:4A15:2906688:540EC2A:652242FB.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1394,green-button-grapher,mtmckenna,N/A,N/A,https://api.github.com/repos/mtmckenna/green-button-grapher,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1AE:12FA:5E738C:C29152:652242FB.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1395,SmartEnergy,smart-data-models,N/A,N/A,https://api.github.com/repos/smart-data-models/SmartEnergy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C166:092A:6F00DA:E56800:65224084.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1396,Spotmarket-Switcher,christian1980nrw,N/A,N/A,https://api.github.com/repos/christian1980nrw/Spotmarket-Switcher,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BF:7B5B:711021:E91D92:65224086.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1397,emerald_electricity_advisor,WeekendWarrior1,N/A,N/A,https://api.github.com/repos/WeekendWarrior1/emerald_electricity_advisor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A9:3819:1ACD6B7:371D2DF:65224085.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1398,Virtual-Connection,SKKU-ESLAB,N/A,N/A,https://api.github.com/repos/SKKU-ESLAB/Virtual-Connection,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C142:3996:262ADA3:4E56BD5:652242FC.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1399,awesome-mobile-app-energy-papers,luiscruz,N/A,N/A,https://api.github.com/repos/luiscruz/awesome-mobile-app-energy-papers,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1B6:7039:2784B96:5112C5F:652242FC.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1400,EngineCL,EngineCL,N/A,N/A,https://api.github.com/repos/EngineCL/EngineCL,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1DB:16F7:26B3972:4F6B8D7:652242FD.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1401,OTWiki,opentrv,N/A,N/A,https://api.github.com/repos/opentrv/OTWiki,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D5:629D:4577292:8CF4995:652242FD.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1402,Spikingformer-CML,zhouchenlin2096,N/A,N/A,https://api.github.com/repos/zhouchenlin2096/Spikingformer-CML,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C193:646E:27040B6:500F99F:652242FE.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1403,powerplanswitcher,MouthlessGames,N/A,N/A,https://api.github.com/repos/MouthlessGames/powerplanswitcher,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12D:2E63:299787:5697E4:6522408D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1404,NYCBuildingEnergyUse,mdh266,N/A,N/A,https://api.github.com/repos/mdh266/NYCBuildingEnergyUse,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D0:78AC:27EDE4C:51EC3E3:652242FF.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1405,peaks,sustainable-computing-io,N/A,N/A,https://api.github.com/repos/sustainable-computing-io/peaks,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1FB:4A15:2906AAE:540F4C3:652242FF.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1406,Awesome-Spiking-Neural-Networks,zhouchenlin2096,N/A,https://github.com/zhouchenlin2096/Awesome-Spiking-Neural-Networks,https://api.github.com/repos/zhouchenlin2096/Awesome-Spiking-Neural-Networks,"A paper list of spiking neural networks, including papers, codes, and related websites.","# Awesome-Spiking-Neural-Networks[![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

Collect some spiking neural network papers & codes.  (**Actively keep updating**)

If you own or find some overlooked papers, you can add it to this document by pull request (recommended). 

## Papers

### 2023

**TPAMI, ICLR, AAAI, ICLR, CVPR, IJCAI**
- Surrogate Module Learning: Reduce the Gradient Error Accumulation in Training Spiking Neural Networks (**ICML 2023**). [[paper](https://openreview.net/pdf?id=zRkz4duLKp)] [[code](https://github.com/brain-intelligence-lab/surrogate_module_learning)]
- Spatial-Temporal Self-Attention for Asynchronous Spiking Neural Networks (**IJCAI 2023**). [[paper](https://www.ijcai.org/proceedings/2023/0344.pdf)]
- Learnable Surrogate Gradient for Direct Training Spiking Neural Networks (**IJCAI 2023**). [[paper](https://www.ijcai.org/proceedings/2023/0335.pdf)]
- Enhancing Efficient Continual Learning with Dynamic Structure Development of Spiking Neural Networks (**IJCAI 2023**). [[paper](https://www.ijcai.org/proceedings/2023/0334.pdf)]
- Rate Gradient Approximation Attack Threats Deep Spiking Neural Networks (**CVPR 2023**). [[paper](https://openaccess.thecvf.com/content/CVPR2023/papers/Bu_Rate_Gradient_Approximation_Attack_Threats_Deep_Spiking_Neural_Networks_CVPR_2023_paper.pdf)]
- Constructing Deep Spiking Neural Networks from Artificial Neural Networks with Knowledge Distillation (**CVPR 2023**). [[paper](https://openaccess.thecvf.com/content/CVPR2023/papers/Xu_Constructing_Deep_Spiking_Neural_Networks_From_Artificial_Neural_Networks_With_CVPR_2023_paper.pdf)]
- Attention Spiking Neural Networks  (**TPAMI 2023**) .[[paper](https://ieeexplore.ieee.org/abstract/document/10032591)] [[code](https://github.com/fangwei123456/spikingjelly/pull/329)]
- SPIKFORMER: WHEN SPIKING NEURAL NETWORK MEETS TRANSFORMER (**ICLR 2023**) .[[paper](https://openreview.net/forum?id=frE4fUwz_h)] [[code](https://github.com/ZK-Zhou/spikformer)]
- Bridging the Gap between ANNs and SNNs by Calibrating Offset Spikes [[paper](https://openreview.net/forum?id=PFbzoWZyZRX)] [[code](https://github.com/hzc1208/ANN2SNN_COS)]
- A Unified Framework of Soft Threshold Pruning [[paper](https://openreview.net/forum?id=cCFqcrq0d8)] 
- Reducing ANN-SNN Conversion Error through Residual Membrane Potential [[paper](https://arxiv.org/abs/2302.02091)] [[code](https://github.com/hzc1208/ANN2SNN_SRP)]
- Deep Spiking Neural Networks with High Representation Similarity Model Visual Pathways of Macaque and Mouse [[paper](https://arxiv.org/abs/2303.06060)]
- Reducing ANN-SNN Conversion Error through Residual Membrane Potential [[paper](https://arxiv.org/abs/2302.02091)] [[paper](https://github.com/hzc1208/ANN2SNN_SRP)]
- Bridging the Gap between ANNs and SNNs by Calibrating Offset Spikes [[paper](https://openreview.net/forum?id=PFbzoWZyZRX)] [[code](https://github.com/hzc1208/ANN2SNN_COS)]
- A Unified Framework of Soft Threshold Pruning [[paper](https://openreview.net/forum?id=cCFqcrq0d8)]

**Arxiv**
- Enhancing the Performance of Transformer-based Spiking Neural Networks by Improved Downsampling with Precise Gradient Backpropagation [[paper](https://arxiv.org/abs/2305.05954)] [[code](https://github.com/zhouchenlin2096/Spikingformer-CML)]
- Spikingformer: Spike-driven Residual Learning for Transformer-based Spiking Neural Network [[paper](https://arxiv.org/abs/2304.11954)] [[code](https://github.com/zhouchenlin2096/Spikingformer)]
- Training Full Spike Neural Networks via Auxiliary Accumulation Pathway [[paper](https://arxiv.org/pdf/2301.11929.pdf)]
- MSS-DepthNet: Depth Prediction with Multi-Step Spiking Neural Network [[paper](https://arxiv.org/abs/2211.12156)]
- Parallel Spiking Neurons with High Efficiency and Long-term Dependencies Learning Ability [[paper](https://arxiv.org/abs/2304.12760)] [[code](https://github.com/fangwei123456/Parallel-Spiking-Neuron)]
- SpikeGPT: Generative Pre-trained Language Model with Spiking Neural Networks [[paper](https://arxiv.org/abs/2302.13939)] [[code](https://github.com/ridgerchu/SpikeGPT)]


### 2022

**NeurIPS, CVPR, ICLR, AAAI, ICML, Nature Communications**

- Event-based Video Reconstruction via Potential-assisted Spiking Neural Network [[paper](https://arxiv.org/abs/2201.10943)] [[code](https://github.com/LinZhu111/EVSNN)]
- Optimal ANN-SNN Conversion for High-accuracy and Ultra-low-latency Spiking Neural Networks [[paper](https://openreview.net/forum?id=7B3IJMM1k_M)] [[code](https://github.com/putshua/SNN-conversion-QCFS)]
- Optimized Potential Initialization for Low-latency Spiking Neural Networks (**AAAI 2022**).  [[paper](https://arxiv.org/abs/2202.01440)]
- AutoSNN: Towards Energy-Efficient Spiking Neural Networks [[paper](https://arxiv.org/abs/2201.12738)]
- Neural Architecture Search for Spiking Neural Networks [[paper](https://arxiv.org/abs/2201.10355)] [[code](https://github.com/Intelligent-Computing-Lab-Yale/Neural-Architecture-Search-for-Spiking-Neural-Networks)]
- Neuromorphic Data Augmentation for Training Spiking Neural Networks [[paper](https://arxiv.org/abs/2203.06145)] [[code](https://github.com/Intelligent-Computing-Lab-Yale/NDA_SNN)]
- State Transition of Dendritic Spines Improves Learning of Sparse Spiking Neural Networks [[paper](https://proceedings.mlr.press/v162/chen22ac.html)] [[code](https://github.com/Yanqi-Chen/STDS)]
- Training High-Performance Low-Latency Spiking Neural Networks by Differentiation on Spike Representation [[paper](https://arxiv.org/abs/2205.00459)] [[code](https://github.com/qymeng94/DSR)]
- Exploring Lottery Ticket Hypothesis in Spiking Neural Networks [[paper](https://arxiv.org/abs/2207.01382)] [[code](https://github.com/Intelligent-Computing-Lab-Yale/Exploring-Lottery-Ticket-Hypothesis-in-SNNs)]
- Spiking Graph Convolutional Networks [[paper](https://arxiv.org/abs/2205.02767)] [[code](https://github.com/ZulunZhu/SpikingGCN)]
- A calibratable sensory neuron based on epitaxial VO2 for spike-based neuromorphic multisensory system [[paper](https://www.nature.com/articles/s41467-022-31747-w)] [[code](https://github.com/billyuanpku96/SNN-for-sensory-neuron)]
- Online Training Through Time for Spiking Neural Networks (**NeurIPS 2022**).  [[paper](https://arxiv.org/abs/2210.04195)] [[code](https://github.com/pkuxmq/OTTT-SNN)]
- Training Spiking Neural Networks with Event-driven Backpropagation [[paper](https://openreview.net/forum?id=nC8VC8gVGPo)] [[code](https://github.com/zhuyaoyu/SNN-event-driven-learning)]
- GLIF: A Unified Gated Leaky Integrate-and-Fire Neuron for Spiking Neural Networks [[paper](https://openreview.net/forum?id=UmFSx2c4ubT)] [[code](https://github.com/Ikarosy/Gated-LIF)]
- Temporal Effective Batch Normalization in Spiking Neural Networks [[paper](https://openreview.net/forum?id=fLIgyyQiJqz)]
- Training Spiking Neural Networks with Local Tandem Learning (**NeurIPS 2022**). [[paper](https://arxiv.org/pdf/2210.04532.pdf)]
- IM-Loss: Information Maximization Loss for Spiking Neural Networks (**NeurIPS 2022**). [[paper](https://proceedings.neurips.cc/paper_files/paper/2022/file/010c5ba0cafc743fece8be02e7adb8dd-Paper-Conference.pdf)]
- Temporal Effective Batch Normalization in Spiking Neural Networks (**NeurIPS 2022**). [[paper](https://proceedings.neurips.cc/paper_files/paper/2022/file/de2ad3ed44ee4e675b3be42aa0b615d0-Paper-Conference.pdf)]
- Biologically Inspired Dynamic Thresholds for Spiking Neural Networks (**NeurIPS 2022**). [[paper](https://arxiv.org/pdf/2206.04426.pdf)]
- Optimal Conversion of Conventional Artificial Neural Networks to Spiking Neural Networks (**ICLR 2022**).  [[paper](https://arxiv.org/pdf/2103.00476.pdf)] [[code](https://github.com/Jackn0/snn_optimal_conversion_pipeline)]
- Multi-Level Firing with Spiking DS-ResNet: Enabling Better and Deeper Directly-Trained Spiking Neural Networks (**IJCAI 2022**). [[paper](https://arxiv.org/pdf/2210.06386.pdf)]

### 2021

**NeurIPS, ICCV, IJCAI, ICML, AAAI**

- Deep Residual Learning in Spiking Neural Networks (**NeurIPS 2021**). [[paper](https://proceedings.neurips.cc/paper/2021/file/afe434653a898da20044041262b3ac74-Paper.pdf)] [[code](https://github.com/fangwei123456/Spike-Element-Wise-ResNet)]
- Spiking Deep Residual Network[[paper](https://arxiv.org/pdf/1805.01352.pdf)]
- Incorporating Learnable Membrane Time Constant to Enhance Learning of Spiking Neural Networks (**ECCV 2021**).  [[paper](https://arxiv.org/abs/2007.05785)]  [[code](https://github.com/fangwei123456/Parametric-Leaky-Integrate-and-Fire-Spiking-Neuron)]
- Pruning of Deep Spiking Neural Networks through Gradient Rewiring [[paper](https://arxiv.org/abs/2105.04916)] [[code](https://github.com/Yanqi-Chen/Gradient-Rewiring)]
- A Free Lunch From ANN: Towards Efficient, Accurate Spiking Neural Networks Calibration  (**ICML 2021**).  [[paper](https://arxiv.org/pdf/2103.00476.pdf)] [[code](https://github.com/yhhhli/SNN_Calibration)]
- Optimal ANN-SNN Conversion for Fast and Accurate Inference in Deep Spiking Neural Networks [[paper](https://arxiv.org/pdf/2106.06984.pdf)] [[code](https://github.com/DingJianhao/OptSNNConvertion-RNL-RIL)]
- Sparse Spiking Gradient Descent (**NeurIPS 2021**). [[paper](https://proceedings.neurips.cc/paper/2021/file/61f2585b0ebcf1f532c4d1ec9a7d51aa-Paper.pdf)]
- Training Spiking Neural Networks with Accumulated Spiking Flow (**AAAI 2021**). [[paper](https://arxiv.org/pdf/2011.05280.pdf)]
- Temporal-wise Attention Spiking Neural Networks for Event Streams Classification. (**ECCV 2021**). [[paper](https://openaccess.thecvf.com/content/ICCV2021/papers/Yao_Temporal-Wise_Attention_Spiking_Neural_Networks_for_Event_Streams_Classification_ICCV_2021_paper.pdf)]


",16,16,3,0,energy-efficiency,"[3rd-generation-of-artificial-neural-networks, awesome, awesome-list, binary, biological-plausibility, brain-inspired, codes, deep-learning, energy-efficiency, event-driven, neuromorphic-computing, paperlist, papers, snn, spike, spiking, spiking-neural-network, spikingjelly]",00000
1407,Stand-Bye,SelectCode,N/A,N/A,https://api.github.com/repos/SelectCode/Stand-Bye,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B5:797D:27D4CC:531199:65224091.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1408,physalia,TQRG,TQRG,https://github.com/TQRG/physalia,https://api.github.com/repos/TQRG/physalia,Energy measurement framework for Mobile Apps,"[![Build Status](https://travis-ci.org/TQRG/physalia.svg?branch=master)](https://travis-ci.org/TQRG/physalia)
[![PyPI version](https://badge.fury.io/py/physalia.svg)](https://badge.fury.io/py/physalia)
[![PyPI downloads](https://img.shields.io/pypi/d/physalia.svg)](https://pypi.python.org/pypi/physalia)
[![PyPI status](https://img.shields.io/pypi/status/physalia.svg)](https://pypi.python.org/pypi/physalia)
[![Code Health](https://landscape.io/github/TQRG/physalia/master/landscape.svg?style=flat)](https://landscape.io/github/TQRG/physalia/master)


# Physalia

Energy measurement framework for Mobile Apps.

More info and documentation in the [website](https://tqrg.github.io/physalia/).

## Install

```
$ python3 -m venv venv
$ source venv/bin/activate
$ pip install git+https://github.com/luiscruz/PyMonsoon
$ pip install physalia
```

You may have to install libusb:

```
brew install libusb
```

## Example

The simplest way to measure something:

```
from physalia.power_meters import MonsoonPowerMeter
from time import sleep

 # change voltage and serial number accordingly:
power_meter = MonsoonPowerMeter(voltage=3.8, serial=12886)
power_meter.start()
sleep(2) # some work
energy_consumption, duration, error_flag = power_meter.stop()
```

Physalia also features more advanced control, allowing to insall APKs, and repeat measurements:

````
from physalia.power_meters import MonsoonPowerMeter
from physalia.energy_profiler import AndroidUseCase
from time import sleep

 # change voltage and serial number accordingly:
power_meter = MonsoonPowerMeter(voltage=3.8, serial=12886)

def run(usecase):
	sleep(2) # some work

use_case = AndroidUseCase(
  'login',
  'path/to/apk',
  'com.test.app',
  '0.0',
  prepare=None,
  run=run,
  cleanup=None
)
measurement = use_case.run(power_meter=power_meter)
print(measurement)
````

## Contributing

Please help us improve this library!

If you have ideas for new features or anything behaves unexpectedly please report an issue.

If you find an issue you can actually help fixing please make a pull request of your code.

### Running tests

To run all tests and checks locally run:

`$ detox -e py27,py36`

### Debugging

#### Unable to find device
Try executing with `sudo`.

#### Device doesn't power on
Connect device to the front of Monsoon with a USB cable.
",14,14,3,3,energy-efficiency,"[android, energy-efficiency, energy-monitor, green-computing, monsoon]",00000
1409,eensight,hebes-io,N/A,https://github.com/hebes-io/eensight,https://api.github.com/repos/hebes-io/eensight,The measurement and verification methodology of the H2020 project SENSEI,"![logo](https://github.com/hebes-io/eensight/blob/master/logo.png)
<br/><br/>

[![PyPI version](https://badge.fury.io/py/eensight.svg)](https://badge.fury.io/py/eensight)

## The `eensight` tool for measurement and verification of energy efficiency improvements

The `eensight` Python package implements the measurement and verification (M&V) methodology that has been developed by the H2020 project [SENSEI - Smart Energy Services to Improve the Energy Efficiency of the European Building Stock](https://senseih2020.eu/). 

The online book *Rethinking Measurement and Verification of Energy Savings* (accessible [here](https://hebes-io.github.io/rethinking/index.html)) explains in detail both the methodology and its implementation.

## Installation

`eensight` can be installed by pip:

```bash
pip install eensight
```

## Usage

### 1. Through the command line

All the functionality in `eensight` is organized around data pipelines. Each pipeline consumes data and other artifacts (such as models) produced by a previous pipeline, and produces new data and artifacts for its successor pipelines.

There are four (4) pipelines in `eensight`. The names of the pipelines and the associations between pipelines and namespaces are summarized below:

|            	| train    	| test   	| apply   |
|------------	|----------	|----------	|---------|
| preprocess 	| &#10004; 	| &#10004; 	| &#10004;|
| predict    	| &#10004; 	| &#10004;	| &#10004;|
| evaluate    	|          	| &#10004;  | &#10004;|
| adjust    	|          	|           | &#10004;|

The primary way of using `eensight` is through the command line. The first argument is always the name of the pipeline to run, such as:

```bash
eensight run predict --namespace train
```
The command

```bash
eensight run --help
```
prints the documentation for all the options that can be passed to the command line.

### 2. As a library

The pipelines of `eensight` are separate from the methods that implement them, so that the latter can be used directly:

```python
import pandas as pd

from eensight.methods.prediction.baseline import UsagePredictor
from eensight.methods.prediction.activity import estimate_activity

non_occ_features = [""temperature"", ""dew point temperature""]

activity = estimate_activity(
    X, 
    y, 
    non_occ_features=non_occ_features, 
    exog=""temperature"",
    assume_hurdle=False,

)

X_act = pd.concat([X, activity.to_frame(""activity"")], axis=1)
model = UsagePredictor(skip_calendar=True).fit(X_act, y)
```

<br>
<img align=""left"" width=""500"" src=""https://github.com/hebes-io/eensight/blob/master/EC_support.png"">
",14,14,4,0,energy-efficiency,"[building-energy, energy-data, energy-efficiency, pipelines]",00000
1410,yablo,sebastian-xyz,N/A,N/A,https://api.github.com/repos/sebastian-xyz/yablo,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2B9F98E:597D457:65224093.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1411,machine-learnt-air-conditioning,faisalthaheem,N/A,https://github.com/faisalthaheem/machine-learnt-air-conditioning,https://api.github.com/repos/faisalthaheem/machine-learnt-air-conditioning,"System that learns how often a room is occupied based on time, movement, air conditioning preferences and learns on historic data. This can have a significant impact on the energy use around a house/building.","
# Smart Air Conditioning using machine learning

(Hey Elon - heard you want to do something similar - would be great if this code can help :)

System that learns how often a room is occupied based on time, movement, air conditioning preferences and learns on historic data. This can have a significant impact on the energy use around a house/building. 

This sytem can learn based on the following habits
* how often a room is occupied - based on PIR data
* hat time of day is the air conditioning demanded by residents
* which months, days are most demanding in terms of air conditioning
* difference between outside temperature and humidity (acquired through open weather) to inside temperature and humidity

This means if somone switches on the air conditioning everday at the same time then after a while the system will automatically start to switch on the AC wihtout any manual intervention.


# Quick Start
|Document|Summary|Link|
|--|--|--|
|Introductory post  | Discusses the idea behind the system  | [Blog Post](https://faisalajmals.wordpress.com/) |
|Quick Start| Minimal setup that walks through getting software aspect of the system up and running quickly | [Wiki](https://github.com/faisalthaheem/machine-learnt-air-conditioning/wiki/Quick-Start) |
|Hardware Setup| Brief introduction to assembling the hardware sensors| [Hardware Sensors](https://github.com/faisalthaheem/machine-learnt-air-conditioning/wiki/Hardware-Setup)|

# Brief Introduction

There are 3 hardware components developed using esp8266 modules, which are

 1. An IR Blaster which relays smart phone app commands to the air
    conditioning thereby allowing the system to learn about the desired
    temperature at any given instance. The blaster uses reversed
    engineered IR codes for a SHARP ac. 
2. A PIR Sensor which senses movement in the area and reports it to the node red app.
3. A DHT-22 sensor which monitors the temperature and humidity in the room, this
    information is used in the machine learning phase.

Following image shows the data acquisition on the operational system
![Sensor data](https://cdn.rawgit.com/faisalthaheem/machine-learnt-air-conditioning/0279d301/docs/sensors.png)

The following diagrams show the high level system services, which are packaged as docker containers for ease of deployment.

![System Block Diagram](https://cdn.rawgit.com/faisalthaheem/machine-learnt-air-conditioning/c8fef40f/docs/block-diagram.png)

![Services Diagram](https://cdn.rawgit.com/faisalthaheem/machine-learnt-air-conditioning/c8fef40f/docs/services-diagram.png)

",13,13,6,4,energy-efficiency,"[air-conditioning, artificial-intelligence, deep-learning, deep-neural-networks, energy-efficiency, hvac, hvac-control, neural-network, nodered, powerwall, tensorflow]",00000
1412,cellfreeMIMOenergyefficiency,tranlenam,N/A,https://github.com/tranlenam/cellfreeMIMOenergyefficiency,https://api.github.com/repos/tranlenam/cellfreeMIMOenergyefficiency,"Simulation for ""On the total energy efficiency of cell-free massive MIMO"" by H. Q. Ngo, L.-N. Tran, T. Q. Duong, M. Matthaiou, E. G. Larsson, IEEE Trans. Green Commun. and Network., vol. 2, no. 1, pp. 25-39, Mar. 2018.","# On the total energy efficiency of cell-free massive MIMO

This repo contains the code for the algorithms presented in the following scientific paper:

Hien Quoc Ngo, Le-Nam Tran, Trung Q. Duong, Michail Matthaiou, Erik G. Larsson, ""On the total energy efficiency of cell-free massive MIMO,"" IEEE Trans. Green Commun. and Network., vol. 2, no. 1, pp. 25-39, Mar. 2018.

## Instructions
The code makes use of [Yalmip](https://yalmip.github.io/) as a parser and [MOSEK](https://www.mosek.com/) as the internal convex conic solver for speed.
When running Algorithm 1 for many channel realizations and for large scale settings, you can replace the ""inteferencevector"" and ""approxfunction"" by their vectorised implementation, i.e., inteferencevectorvectorised"" and ""approxfunctionvectorised"". You can refer to ""Algorithm2.m"" for how this can be done.

We also publish the code at [CodeOcean](https://codeocean.com/capsule/1803216/tree/v1) where you can run them online without the need to install the required packages.
",13,13,2,1,energy-efficiency,"[cell-free, energy-efficiency, massive-mimo, successive-convex-approximation]",00000
1413,CoexecutorRuntime,oneAPI-scheduling,oneAPI-scheduling,https://github.com/oneAPI-scheduling/CoexecutorRuntime,https://api.github.com/repos/oneAPI-scheduling/CoexecutorRuntime,Straightforward Heterogeneous Computing with the oneAPI Coexecutor Runtime.,"# Coexecutor Runtime

The oneAPI Coexecutor Runtime will be officially released in the next months, including examples of use, benchmarks and main core parts. 

The main author is at the end of the PhD, thus, the code will be open sourced after he finishes his main tasks related to the completion of the doctorate (Jan. 2022).

The PDF document contains some API examples and experiments performed at the end of 2020 - beginning of 2021. The latest information and validations can be seen in the published papers.

## Research

Coexecutor Runtime is currently being used and validated in specialized architectures, such as FPGAs, by other research groups like the Department of Computing and Systems Engineering, from University of Zaragoza (UNIZAR). 

You can find more information about the runtime in the following publications.

- [NOZ21] Raúl Nozal and Jose Luis Bosque. [""Straightforward Heterogeneous Computing with the oneAPI Coexecutor Runtime""](https://doi.org/10.3390/electronics10192386), Electronics, vol. 10, no. 19:2386. Sep. 2021. 

### Conferences

- [""Exploiting Co-execution with oneAPI: Heterogeneity from a Modern Perspective""](https://dx.doi.org/10.1109/HPCS48598.2019.9188188), 27th International European Conference on Parallel and Distributed Computing (Euro-Par 2021: Parallel Processing), L. Sousa, N. Roma, and P. Tomás, Eds., Cham: Springer International Publishing, pp. 501–516. Lisbon, Portugal. Apr. 2021. Presented Aug. 2021. 

## License

Copyright (c) 2021    ATC (University of Cantabria) <nozalr@unican.es>

Coexecutor Runtime is released under MIT License.
",12,12,1,0,energy-efficiency,"[cpp, cpu, energy-efficiency, fpga, gpu, heterogeneous-computing, load-balancing, oneapi, parallel-programming, performance, scheduling, sycl]",00000
1414,HTAP,NRCan-IETS-CE-O-HBC,NRCan-IETS-CE-O-HBC,https://github.com/NRCan-IETS-CE-O-HBC/HTAP,https://api.github.com/repos/NRCan-IETS-CE-O-HBC/HTAP,NRCan's Ruby scripts for batch analysis and optimization with HOT2000,"
Housing Technology Assessment Platform (HTAP)
=============================================

HTAP is a collection of data and tools that automate and extend the HOT2000
residential energy simulation tool. The HOT2000 software suite can be obtained
directly from [Natural ResourcesCanada](https://www.nrcan.gc.ca/energy/efficiency/homes/20596). 

HTAP has been used to:
 -  Optimize the design of Net-Zero Energy and Net-Zero-Ready Housing,  and deep
    energy retrofits
 -  Investigate the impact potential of different heating technologies 
    in the Canadian housing stock
 -  Estimate costs and benefits associated with changes in the building 
    code

Natural Resources Canada (NRCan) developed HTAP to support research and program
development. While HTAP is published in the hope others will find it useful,
NRCan provides no warranty or support  for the software or its users. 

## Requirements & Installation ##

HTAP requires the following components be installed on your computer:
 -  Ruby (http://rubyinstaller.org/)
 -  Git (https://git-scm.com/downloads)
 -  The HOT2000 command-line client, installed into `C:\H2K-cli-min\` 

In addition to these, you may find the following tools useful: 
 -  A text file editor, such as notepad++ 
 -  A data analysis program, such as Matlab, tableau or excel. 

To install HTAP, check out the files from Git-hub:

    C:\> git clone https://github.com/NRCan-IETS-CE-O-HBC/HTAP.git


Before you can run HTAP simulations, you must first copy the archetype files to the 
`C:\H2K-CLI-Min\User\ directory`. HTAP includes a ruby script to do this for you:

    PS C:\> cd .\HTAP\Archetypes
    PS C:\HTAP\Archetypes> ruby .\CopyToH2K.rb


## Versions ##

The `master` branch contains the most stable version of HTAP. New features are
regularly integrated  into the `general-dev` branch. Other branches include new
features under development for future versions of HTAP.

## Documentation ##

 - [Introduction to HTAP](./doc/Introduction%20to%20HTAP.docx): a summary of 
   HTAP features and use
 - [HTAP-input-and-output.md](./doc/HTAP-input-and-output.md): Documentation 
   for HTAP input & output

## Contributors ##

HTAP is developed and maintained by CanmetENERGY-Ottawa, a division of Natural
Resources Canada. HTAP's current capabilities reflect contributions from the 
National Research Council and other third-party contributors. 

#### Natural Resources Canada / CanmetENERGY Ottawa ####

 - Alex Ferguson
 - Jeff Blake 
 - Julia Purdy 
 - Rasoul Asaee

#### National Research Council ####

 - Adam Wills 

#### StepWin ####

 - Arman Mottaghi

## Contact ##

Direct inquiries about HTAP and related projects to Alex.Ferguson@canada.ca

",12,12,15,25,energy-efficiency,"[buildings, energy-efficiency, simulation]",00000
1415,Intelligent_EMS,dfpasdel,N/A,https://github.com/dfpasdel/Intelligent_EMS,https://api.github.com/repos/dfpasdel/Intelligent_EMS,,"# Intelligent_EMS
Work realized during summer 2018 at the Norwegian University of Science and Technology, Department of Marine Technology (NTNU, IMT) under the supervision of Mehdi Zadeh https://www.ntnu.no/ansatte/mehdi.zadeh

The aim of this work is to explore the feasibility of a Machine Learning based Energy Management System (EMS) for inboard DC-grid. The main source of energy is hydrogen (Fuel-Cell) associated with a battery to supply fast load changes.

After two months of work, the results show that Reinforcement Learning can adress simultaneously the issues of Reliability, Efficiency and Lifetime of the grid.

The work is being continued by Namireddy Praveen Reddy, PhD candidate at the NTNU Department of Marine Technology. Part of his task will be to make the simulations faster and to improve the interpreter and agent.

Contact: d.pasdeloup@gmail.com | mehdi.zadeh@ntnu.no


",12,12,0,0,energy-efficiency,"[dc-analysis, dc-grid, ems, energy-efficiency, energy-management, machine-learning, marine-technology, matlab-script, ntnu, power-systems-analysis, q-learning, reinforcement-learning, reinforcement-learning-algorithms, simulink-model]",00000
1416,efergy-bridge,evogy,N/A,N/A,https://api.github.com/repos/evogy/efergy-bridge,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C106:5A86:2BA000D:597E1D6:6522409B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1417,YoMoPie,klemenjak,N/A,https://github.com/klemenjak/YoMoPie,https://api.github.com/repos/klemenjak/YoMoPie,A User-Oriented Energy Monitor to Enhance Energy Efficiency in Households,"# Servus!

Computational methods for the enhancement of energy efficiency rely on a measurement process with sufficient accuracy and number of measurements. Networked energy meters, energy monitors, serve as a vital link between the energy consumption of households and key insights that reveal strategies to achieve significant energy savings.
With YoMoPie, we propose a user-oriented energy monitor for the Raspberry Pi platform that aims to enable intelligent energy services in households. YoMoPie measures active as well as apparent power, stores data locally, and integrates a user-friendly Python library. Furthermore, the presented energy monitor allows users to run self-designed services in their home to enhance energy efficiency. Potential services are (but not limited to) residential demand response, immediate user feedback, smart meter data analytics, or energy disaggregation.

<!--- YoMoPie builds on [the work published in [1]](https://link.springer.com/article/10.1007%2Fs00450-014-0290-8#/page-1).
YoMoPie provides the following advancements:

* It doesn't suffer from a data update rate of 1 second
* It stores data locally
* It integrates a new measurement IC that allows poly-phase metering
* It builds on the Raspberry platform
* The YoMoPie Python package enables easy handling -->


## Research Paper on YomoPie

All design files and pieces of software are available free of charge. However, in case you use the PCB design, code, or other material for research purposes, we kindly ask you to cite our peer-reviewed research paper:

* *Title*: YoMoPie: A User-Oriented Energy Monitor to Enhance Energy Efficiency in Households
* *Authors*: Mr. Christoph Klemenjak, Mr. Stefan Jost and Dr. Wilfried Elmenreich
* *Conference*: 2018 IEEE Conference on Technologies for Sustainability (SusTech)

Recommended Citation:
```
@INPROCEEDINGS{klemenjak2018yomopie,
author={C. Klemenjak and S. Jost and W. Elmenreich},
booktitle={2018 IEEE Conference on Technologies for Sustainability (SusTech)},
title={Yo{M}o{P}ie: {A} User-Oriented Energy Monitor to Enhance Energy Efficiency in Households},
year={2018},
volume={},
number={},
pages={},
keywords={},
doi={},
ISSN={},
month={Nov}}
```

![](/Images/ypi_blos.JPG)


|                 | YoMoPie  |
| ------------- | -----:|
|Communication|  WiFi, Ethernet, RF |
|Measurement|  P, Q, S, I, U |
|Number of connections| 1 or 3 |
|Integrated relay |  yes |
|Sampling frequency|  tba. |
|Data update rate |  tba. |
|Power calculation|  Hardware |
|Open-Source|  yes |
|RaspberryPi-compatible|  yes  |
|Costs| approx. 50€  |

Beside a current and a voltage sensor, the board integrates an energy metering chip, the ADE7754. Our library is designed in a way to offer single-phase as well as multi-phase metering.

## Installation

The YoMoPie Python package is available on Python Package Index (PyPI), a repository of software for the Python programming language, and can be installed by issuing one command:

```python
pip3 install YoMoPie
```
Additionally, the entire source code and a manual can be obtained from our YoMoPie Github repository.

## Examples of use

After a successful installation process, the YoMoPie package is available system-wide and can be accessed by a simple import command:
```python
import YoMoPie as yomopie
yp = yomopie.YoMoPie()
```

During initialisation, the number of line conductors has to be set (single or polyphase metering):
```python
yomo.set_lines(1)
```

To test the operation, we recommend to call the function *do_n_measurements*. Based on the number of samples and the sampling period, the function will return first measurement values and saves it into the target file:
```python
yomo.do_n_measurements(number of samples, sampling period, target file)
```

Active power, apparent power, current, and voltage samples can be read with commands such as:
```python
[t, I] = yp.get_irms()
[t, U] = yp.get_vrms()
[t, P] = yp.get_active_energy()
[t, S] = yp.get_apparent_energy()
```
In the same vein, users can activate continuous data logging or perform a fixed amount of subsequent measurements:
```python
yp.do_metering()
yp.do_n_measurements(quantity, rate, file)
```

The operational mode (OPMODE) register defines the general configuration of the integrated measurement chip ADE7754. By writing to this register, A/D converters can be turned on/off, sleep mode can be activated, or a software chip reset can be triggered. For further information, we refer to the datasheet of the measurement chip.

```python
yp.set_operational_mode(OPMODE)
```



# YoMoPie Python package documentation
**[Imports](#imports)**<br>
**[Classvariables](#classvariables)**<br>
**[Methods](#methods)**<br>
*[-init](#init)*<br>
*[-init_yomopie](#init_yomopie)*<br>
*[-set_lines](#set_lines)*<br>
*[-enable_board](#enable_board)*<br>
*[-disable_board](#disable_board)*<br>
*[-chip_reset](#chip_reset)*<br>
*[-write_8bit](#write_8bit)*<br>
*[-read_8bit](#read_8bit)*<br>
*[-write_16bit](#write_16bit)*<br>
*[-read_16bit](#read_16bit)*<br>
*[-read_24bit](#read_24bit)*<br>
*[-get_temp](#get_temp)*<br>
*[-get_laenergy](#get_laenergy)*<br>
*[-get_lappenergy](#get_lappenergy)*<br>
*[-get_period](#get_period)*<br>
*[-set_operational_mode](#set_operational_mode)*<br>
*[-set_measurement_mode](#set_measurement_mode)*<br>
*[-close_SPI_connection](#close_SPI_connection)*<br>
*[-get_aenergy](#get_aenergy)*<br>
*[-get_active_energy](#get_active_energy)*<br>
*[-get_apparent_energy](#get_apparent_energy)*<br>
*[-get_sample](#get_sample)*<br>
*[-get_sampleperperiod](#get_sampleperperiod)*<br>
*[-get_vrms](#get_vrms)*<br>
*[-get_irms](#get_irms)*<br>
*[-do_n_measurements](#do_n_measurements)*<br>
*[-do_metering](#do_metering)*<br>
*[-change_factors](#change_factors)*<br>
*[-reset_factors](#reset_factors)*<br>
*[-init_nrf24](#init_nrf24)*<br>
*[-write_nrf24](#write_nrf24)*<br>
*[-read_nrf24](#read_nrf24)*<br>
**[OPMODE](#opmode)**<br>
**[MMODE](#mmode)**<br>

## Imports
YomoPie requires some additional libraries:

**time**: The time package is required to obtain timestamps.

**math**: YoMoPie requires the math lib for calculations such as reactive energy.

**spidev**: The YoMoPie integrates an energy monitor IC, which communicates via SPI to the RPi. To enable this communication, YoMoPie exploits the spidev lib.

**sys**: This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.

**RPi.GPIO**: In order to allow further extensions of the YoMoPie eco-system, our package integrates the RPi.GPIO. Also, the reset pin is controlled via GPIO.

**NRF24**: This package allows to utilize the RF module for 2.4 GHz communication.

```python
import time
import math
import spidev
import sys
import RPi.GPIO as GPIO
from lib_nrf24 import NRF24
```
## Class variables

To correctly access the internal registers of the energy monitor IC, several custom variables are required to adjust the register values.

* **read** and **write**: These variables hold the mask that defines the operational mode. Therefore, for reading a register the given address and the **read** variable are the inputs of a bitwise AND operation. On the other hand, for writing to a register the register address and the **write** variable are the inputs of a bitwise OR operation.

* **spi**, **active_lines** and **debug**: These variables hold the SPI object, save the number of active lines, and enable/disable the debug mode.

* **radio**: This object will be used for the RF communication and its functions.
* **sample interval** and **max_f_sample**: defines the time between two samples (with respect to the start_sampling method) in seconds and the maximum sampling frequency (with respect to the sampling error).
* **active_power_LSB**, **apparent_power_LSB**, **vrms_factor** and **irms_factor**: Convert register values to physical quantities and represent permanent conversion factors.

```python
read = 0b00111111
write = 0b10000000
spi=0
radio=0
active_lines = 1
debug = 1

sample_intervall = 1
max_f_sample = 10

active_power_LSB= 0.000013292
apparent_power_LSB= 0.00001024
vrms_factor = 0.000047159
irms_factor = 0.000010807
```

## Methods

In this Section, we describe every method of our  package. A description of function parameters and return values is given.

### __init__

**Description**: This method represents  the constructor and creates a new YoMoPie object.

**Parameters**: None.

**Returns**: Nothing.

```python
def __init__(self):
	self.spi=spidev.SpiDev()
	self.init_yomopie()
	return
```

### init_yomopie

**Description**: Initialises the YoMoPie object. Sets the GPIO mode, disables GPIO warnings and defines pin 19 as output. Also opens a new SPI connection via the SPI device (0,0), sets the SPI speed to 62500 Hz and sets the SPI mode to 1. Finally, the function set_lines is called to set the MMODE, WATMODE and VAMODE.

**Parameters**: None.

**Returns**: Nothing.

```python
def init_yomopie(self):
	GPIO.setmode(GPIO.BCM)
	GPIO.setwarnings(False)
	GPIO.setup(19,GPIO.OUT)
	self.spi.open(0,0)
	self.spi.max_speed_hz = 62500
	self.spi.mode = 0b01
	self.set_lines(self.active_lines)
	self.sampleintervall = 1
	return
```

### set_lines

**Description**: This function sets the number of active phases that will be measured.

**Parameters**:
* lines - Number of phases

**Returns**: Nothing.

```python
def set_lines(self, lines):
	if (lines != 1) and (lines != 3):
		print(""Incompatible number of power lines"")
		return
	else:
		self.active_lines = lines
		if self.active_lines == 3:
			self.write_8bit(0x0D, 0x3F)
			self.write_8bit(0x0E, 0x3F)
			self.set_measurement_mode(0x70)
		elif self.active_lines == 1:
			self.write_8bit(0x0E, 0x24)
			self.set_measurement_mode(0x10)
			self.write_8bit(0x0D, 0x24)
		return
```

### enable_board

**Description**: Enables the board by pulling pin 19 to HIGH.

**Parameters**: None.

**Returns**: Nothing.

```python
def enable_board(self):
	GPIO.output(19, GPIO.HIGH)
	return
```

### disable_board

**Description**: Disables the board by pulling pin 19 to LOW.

**Parameters**: None.

**Returns**: Nothing.

```python
def disable_board(self):
	GPIO.output(19, GPIO.LOW)
	return
```

### chip_reset

**Description**: Resets the chip to the manufacturer settings

**Parameters**: None.

**Returns**: Nothing.

```python
def chip_reset(self):
	self.write_8bit(0x0A, 0x40)
	time.sleep(1);
	return
```		
### write_8bit    

**Description**: Writes 8 bit to the given address.

**Parameters**:

* register - 8 bit address of the register (see ADE7754 register table)

* value - 8 bit of value that will be written into the register

**Returns**: Nothing.

```python
def write_8bit(self, register, value):
	self.enable_board()
	register = register | self.write
	self.spi.xfer2([register, value])
	return
```

### read_8bit

**Description**: Reads 8 bit of data from the given address.

**Parameters**:
* register - 8 bit address of the register (see ADE7754 register table)

**Returns**: the 8 bit of data in the register as decimal

```python
def read_8bit(self, register):
	self.enable_board()
	register = register & self.read
	result = self.spi.xfer2([register, 0x00])[1:]        
	return result[0]
```

### write_16bit

**Description**: Writes 16 bit to the given address.

**Parameters**:

* register - 8 bit address of the register (see ADE7754 register table)

* value - 16 bit of value that will be written into the register

**Returns**: Nothing.

```python
def write_16bit(self, register, value):
	self.enable_board()
	register = register | self.write
	self.spi.xfer2([register, value[0], value[1]])
	return
```		

### read_16bit  

**Description**: Reads 16 bit of data from the given address.

**Parameters**:
* register - 8 bit address of the register (see ADE7754 register table)

**Returns**: the 16 bit of data in the register as decimal

```python
def read_16bit(self, register):
	self.enable_board()
	register = register & self.read
	result = self.spi.xfer2([register, 0x00, 0x00])[1:]
	dec_result = (result[0]<<8)+result[1]
	return dec_result
```

### read_24bit        

**Description**: Reads 24 bit of data from the given address.

**Parameters**:
* register - 8 bit address of the register (see ADE7754 register table)

**Returns**: the 24 bit of data in the register as decimal

```python
def read_24bit(self, register):
	self.enable_board()
	register = register & self.read
	result = self.spi.xfer2([register, 0x00, 0x00, 0x00])[1:]
	dec_result = (result[0]<<16)+(result[1]<<8)+(result[2])
	return dec_result
```

### get_temp

**Description**: Reads the temperature register (0x08).

**Parameters**: None.

**Returns**: A list [timestamp, temperature in °C]

```python
def get_temp(self):
	reg = self.read_8bit(0x08)
	temp = [time.time(),(reg-129)/4]
	return temp
```

### get_laenergy

**Description**: Reads the active energy register (0x03).

**Parameters**: None.

**Returns**: A list [timestamp, value of the register]

```python
def get_laenergy(self):
	laenergy = [time.time(), self.read_24bit(0x03)]
	return laenergy
```

### get_lappenergy

**Description**: Reads the apparent energy register (0x06).

**Parameters**: None.

**Returns**: A list [timestamp, value of the register]

```python
def get_lappenergy(self):
	lappenergy = [time.time(), self.read_24bit(0x06)]
	return lappenergy
```

### get_period   

**Description**: Reads the period register (0x07).

**Parameters**: None.

**Returns**: A list [timestamp, value of the register]

```python
def get_period(self):
       period = [time.time(), self.read_16bit(0x07)]
       return period
```

### set_operational_mode

**Description**: Sets the OPMODE. For more information see section OPMODE.

**Parameters**:
* value - 8 bit of data representing the OPMODE

**Returns**: Nothing.

```python
def set_operational_mode(self, value):
	self.write_8bit(0x0A, value)
	return
```

### set_measurement_mode

**Description**: Sets the MMODE. For more information see section MMODE.

**Parameters**:
* value - 8 bit of data representing the MMODE

**Returns**: Nothing.

```python
def set_measurement_mode(self, value):
	self.write_8bit(0x0B, value)
	return
```

### close_SPI_connection

**Description**: Closes the SPI connection.

**Parameters**: None.

Returns**: 0 if connection is closed.

```python
def close_SPI_connection(self):
	self.spi.close()
	return 0
```
### get_aenergy

**Description**: Reads the active energy register (0x01).

**Parameters**: None.

**Returns**: A list [timestamp, value of register converted to real value]

```python
def get_aenergy(self):
	aenergy = [time.time(), self.active_power_LSB * self.read_24bit(0x01) *  3600/self.sample_intervall]
	return aenergy
```
### get_active_energy

**Description**: Reads the active energy register (0x02) and resets the register value.

**Parameters**: None.

**Returns**: A list [timestamp, value of register converted to real value]

```python
def get_active_energy(self):
	aenergy =  [time.time(), self.active_power_LSB * self.read_24bit(0x02) *  3600/self.sample_intervall]
	return aenergy
```
### get_apparent_energy

**Description**: Reads the apparent energy register (0x05) and resets the register vlaue.

**Parameters**: None.

**Returns**: A list [timestamp, value of register converted to real value]

```python
def get_apparent_energy(self):
	appenergy = [time.time(), self.apparent_power_LSB * self.read_24bit(0x05)*  3600/self.sample_intervall]
	return appenergy
```
### get_sample

**Description**: Takes one sample and calculates the active energy, apparent energy, reactive energy, VRMS and IRMS.

**Parameters**: None.

**Returns**: A list of 7 elements [timestamp, active energy, apparent energy, reactive energy, period, VRMS, IRMS]

```python
def get_sample(self):
	aenergy = self.get_aenergy()[1] *self.active_factor
	appenergy = self.get_appenergy()[1] *self.apparent_factor
	renergy = math.sqrt(appenergy*appenergy - aenergy*aenergy)
	if self.debug:
		print""Active energy: %f W, Apparent energy: %f VA, Reactive Energy: %f var"" %(aenergy, appenergy, renergy)
		print""VRMS: %f IRMS: %f"" %(self.get_vrms()[1]*self.vrms_factor,self.get_irms()[1]*self.irms_factor)
	sample = []
	sample.append(time.time())
	sample.append(aenergy)
	sample.append(appenergy)
	sample.append(renergy)
	sample.append(self.get_period()[1])
	sample.append(self.get_vrms()[1]*self.vrms_factor)
	sample.append(self.get_irms()[1]*self.irms_factor)
	return sample
```

### get_vrms

**Description**: Reads the VRMS register depending.

**Parameters**: None.

**Returns**: A list of 2 elements [timestamp, Phase A VRMS] or 4 elements [timestamp, Phase A VRMS, Phase B VRMS, Phase C VRMS]

```python
def get_vrms(self):
	if self.active_lines == 1:
		avrms = [time.time(), self.read_24bit(0x2C)]
		return avrms
	elif self.active_lines == 3:
		vrms = []
		vrms.append(time.time())
		vrms.append(self.read_24bit(0x2C))
		vrms.append(self.read_24bit(0x2D))
		vrms.append(self.read_24bit(0x2E))
		return vrms
	return 0
```

### get_irms

**Description**: Reads the IRMS register.

**Parameters**: None.

**Returns**: A list of 2 elements [timestamp, Phase A IRMS] or 4 elements [timestamp, Phase A IRMS, Phase B IRMS, Phase C IRMS]

```python
def get_irms(self):
	if self.active_lines == 1:
		airms = [time.time(), self.read_24bit(0x29)]
		return airms
	elif self.active_lines == 3:
		irms = []
		irms.append(time.time())
		irms.append(self.read_24bit(0x29))
		irms.append(self.read_24bit(0x2A))
		irms.append(self.read_24bit(0x2B))
		return vrms
	return 0
```

### get_sampleperperiod

**Description**: Reads multiple register and returns the values adjusted to the sampling frequency. This function will be used in the do_n_measurements
 function.

**Parameters**:
* samplerate - the actual samplerate

**Returns**: A list of 7 elements [timestamp, active energy, apparent energy, reactive energy, period, VRMS, IRMS]

```python
def get_sampleperperiod(self, samplerate):
	aenergy = self.get_aenergy()[1] *self.active_factor * 3600/samplerate
	appenergy = self.get_appenergy()[1] *self.apparent_factor * 3600/samplerate
	renergy = math.sqrt(abs(appenergy*appenergy - aenergy*aenergy))
	vrms = self.get_vrms()[1]*self.vrms_factor
	irms = self.get_irms()[1]*self.irms_factor
	if self.debug:
		print(""Active energy: %f W, Apparent energy: %f VA, Reactive Energy: %f var"" % (aenergy, appenergy, renergy))
		print(""VRMS: %f IRMS: %f"" %(vrms,irms))
	sample = []
	sample.append(time.time())
	sample.append(aenergy)
	sample.append(appenergy)
	sample.append(renergy)
	sample.append(self.get_period()[1])
	sample.append(vrms)
	sample.append(irms)
	return sample
```

### do_n_measurements

**Description**: Takes *nr_samples* with sampling period *samplerate* and saves the measurements into the give file.

**Parameters**:

* nr_samples - this are the number of samples that will be taken, integer greater then 0
* samplerate - this is the time between each sample, integer greater then 0
* file - this will be the path and name of the file, where the date will be stored

**Returns**: A list of samples (each sample is a list of 7 elements)

```python
def do_n_measurements(self, nr_samples, samplerate, file):
	if (samplerate<1) or (nr_samples<1):
		return 0
	self.sample_intervall = samplerate
	samples = []
	for i in range(0, nr_samples):
		for j in range(0, samplerate):
			time.sleep(1)
	sample = self.get_sampleperperiod(samplerate)
	samples.append(sample)
	logfile = open(file, ""a"")
	for value in sample:
		logfile.write(""%s; "" % value)
	logfile.write(""\n"")
	logfile.close()
	return samples
```

### do_metering

**Description**: Starts a sampling process and saves the data into a file.

**Parameters**:

* f_sample - the sampling frequency (<= 10, but if max_f_sample is changed, this value can be up to 100 with a higher error)
* file - this will be the path and name of the file, where the date will be stored. If this parameter is empty the data will be stored in ""smart_meter_output.csv"".

**Returns**: Nothing.

```python
def do_metering(self, f_sample, file):
	if (f_sample > max_f_sample):
		print('Incompatible sampling frequency!')
		return 1
	if (file == ''):
		file = 'smart_meter_output.csv'
	for i in range(0,86400):
		sample = []
		sample.append(time.time())
		sample.append(i)
		sample.append(self.get_active_energy())
		sample.append(self.get_apparent_energy())
		data_file = open(file,'a')
		for value in sample:
			logfile.write(""%s; "" % value)
		logfile.write(""\n"")
		##print(sample)
		time.sleep(1/f_sample);
	return 0
```

### change_factors

**Description**: Changes the multiplication factors for the register values.

**Parameters**:

* active_f - this is the factor for the active energy calculation
* apparent_f - this is the factor for the apparent energy calculation
* vrms_f - this is the factor for the vrms calculation
* irms_f  this is the factor for the irms calculation

**Returns**: Nothing.

```python
def change_factors(self, active_f, apparent_f, vrms_f, irms_f):
	self.active_power_LSB = active_f
	self.apparent_power_LSB = apparent_f
	self.vrms_factor = vrms_f
	self.irms_factor = irms_f
	return
```

### reset_factors

**Description**: Resets the multiplication factors to the default values. The default values are calculated by our measurements with calibrated equipment.

**Parameters**: None.

**Returns**: Nothing.

```python
def reset_factors(self):
	self.active_power_LSB= 0.000013292
	self.apparent_power_LSB= 0.00001024
	self.vrms_factor = 0.000047159
	self.irms_factor = 0.000010807
	return
```

### init_nrf24

**Description**: Initializes the RF communication via the NRF24 chip.

**Parameters**: None.

**Returns**: Nothing.

```python
def init_nrf24(self):
	pipes = [[0xe7, 0xe7, 0xe7, 0xe7, 0xe7], [0xc2, 0xc2, 0xc2, 0xc2, 0xc2]]

	self.radio = NRF24(GPIO, self.spi)
	self.radio.begin(1, 13)
	self.radio.setPayloadSize(32)
	self.radio.setChannel(0x60)

	self.radio.setDataRate(NRF24.BR_2MBPS)
	self.radio.setPALevel(NRF24.PA_MIN)
	self.radio.setAutoAck(True)
	self.radio.enableDynamicPayloads()
	self.radio.enableAckPayload()
	self.radio.openWritingPipe(pipes[1])
	self.radio.openReadingPipe(1, pipes[0])
	self.radio.printDetails()
	return
```

### write_nrf24

**Description**: Sends a message via the RF communication.

**Parameters**:
* command - the message that will be written via RF

**Returns**: Nothing.

```python
def write_nrf24(self, command):
	message = []
	message = list(command)
	self.radio.write(message)
	print(""Send: {}"".format(message))

	if self.radio.isAckPayloadAvailable():
		pl_buffer = []
		self.radio.read(pl_buffer, self.radio.getDynamicPayloadSize())
		print(pl_buffer)
		print(""Translating the acknowledgment to unicode chars..."")
		string = """"
		for n in pl_buffer:
			if(n >= 32 and n <= 126):
			string += chr(n)
		print(string)
	return
```

### read_nrf24

**Description**: Reads a message via the RF communication.

**Parameters**: None.

**Returns**: Nothing.

```python
def read_nrf24(self):
	print(""Ready to receive data..."")
	self.radio.startListening()
	pipe = [0]
	while not self.radio.available(pipe):
		time.sleep(1/100)
	receivedMessage = []
	self.radio.read(receivedMessage, self.radio.getDynamicPayloadSize())

	print(""Translating the receivedMessage to unicode chars..."")
	string = """"
	for n in receivedMessage:
		if (n >= 32 and n <= 126):
			string += chr(n)
		print(""Our sensor sent us: {}"".format(string))
	self.radio.stopListening()
	return
```
## OPMODE
The operational mode (OPMODE) register defines the general configuration of the ADE7754 chip. For detailed information about the individual bits of this register we refer to [Table IX](https://github.com/klemenjak/YoMoPie/blob/master/Datasheets/ADE7754.pdf).


## MMODE
The configuration of period and peak measurements are defined by writing to the MMODE register (0x0B). For more information about the register we refer to [Table XII](https://github.com/klemenjak/YoMoPie/blob/master/Datasheets/ADE7754.pdf).
",10,10,4,1,energy-efficiency,"[energy-disaggregation, energy-efficiency, energy-monitor, home-automation, open-hardware-electronics, open-source, raspberrypi, smarthome, smartmeter, smartmetering]",00000
1418,windows-rapl-driver,hubblo-org,N/A,N/A,https://api.github.com/repos/hubblo-org/windows-rapl-driver,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C191:33EB:2B9C09:5A961E:6522409A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1419,AI-Powered-5G-OpenRAN-Optimizer,N00Bception,N/A,https://github.com/N00Bception/AI-Powered-5G-OpenRAN-Optimizer,https://api.github.com/repos/N00Bception/AI-Powered-5G-OpenRAN-Optimizer,"This advanced and complex project implements an AI-powered optimization system for 5G Open RAN networks. Using machine learning and deep learning, the system optimizes network performance by detecting anomalies, predicting network traffic, and dynamically allocating resources. ","# AI-Powered-5G-OpenRAN-Optimizer
Welcome to the AI-Powered 5G Open RAN Optimizer repository! 

## Overview
This repository contains an AI-powered optimization system for Open RAN that leverages machine learning algorithms to optimize the performance of the network. The system can learn from historical data, real-time network data, and external data sources to identify network anomalies, predict network traffic, and optimize network resources allocation.

The AI-powered optimization system includes the following features:

~ Network Anomaly Detection: The system can detect network anomalies and performance degradation in real-time by analyzing network data, such as traffic patterns, signal strength, and congestion.

~ Predictive Network Planning: The system can predict network traffic and plan network resources allocation accordingly to ensure optimal performance.

~ Dynamic Network Optimization: The system can dynamically optimize network resources allocation based on real-time network conditions, such as traffic load, weather conditions, and network congestion.

~ Energy Efficiency Optimization: The system can optimize the energy consumption of the network by dynamically adjusting network resources allocation based on the energy efficiency of different network components.

To implement this project, we used various AI technologies, such as supervised and unsupervised machine learning algorithms, deep learning, reinforcement learning, and natural language processing. We also integrated the AI-powered optimization system with Open RAN interfaces, such as O-RAN, to enable seamless integration and interoperability.

## Project Structure
The project is structured as follows:

~ `data`: This folder contains the datasets used to train and evaluate the machine learning models.

~ `models`: This folder contains the trained machine learning models.

~ `notebooks`: This folder contains Jupyter notebooks that were used to develop, test, and analyze the machine learning models.

~ `src`: This folder contains the source code for the AI-powered optimization system, including scripts for data preprocessing, training, and inference.

~ `tests`: This folder contains unit tests and integration tests for the AI-powered optimization system.

## Installation
To install the AI-powered optimization system, follow these steps:

1. Clone the repository:
```bash 
git clone https://github.com/N00Bception/AI-Powered-5G-OpenRAN-Optimizer.git
```
2. Install the required dependencies:
```bash
pip install -r requirements.txt
```

## Usage
To use the AI-powered optimization system, follow these steps:

1. Prepare the data:
```bash 
python src/preprocess.py --input <input_data_path> --output <output_data_path>
```
2. Train the machine learning models:
```bash
python src/train.py --input <training_data_path> --output <models_path>
```
3. Evaluate the machine learning models:
```bash 
python src/evaluate.py --input <evaluation_data_path> --models <models_path>
```
4. Run the AI-powered optimization system:
```bash
python src/optimize.py --input <real-time_data_path> --models <models_path> --output <optimized_data_path>
```
## Acknowledgments
This project was developed by Salim EL GHALBOZURI -Azure AI Engineer- as part of National Institute of Postes and Telecommunications's 5G-RAN Engineer program. We would like to acknowledge the contributions of the Open RAN community and the open-source AI frameworks used in this project.

## Contributing
This project is a work in progress, and we welcome contributions from developers and researchers. If you'd like to contribute, please fork the repository, make your changes, and submit a pull request.

## License
This project is released under the Apache-2.0 License.

## Disclaimer
This project is still a work in progress. We're actively working on improving the system and adding more features. Please keep in mind that the code is still under development, and we may make breaking changes in the future. We appreciate your understanding and patience.
",10,10,3,1,energy-efficiency,"[5g, 5g-ran, 6g, anomaly-detection, artificial-intelligence, cloud-services, deep-learning, energy-efficiency, machine-learning, network-optimization, network-planning, neural-network, o-ran, openran]",00000
1420,TransferCL,OValery16,N/A,https://github.com/OValery16/TransferCL,https://api.github.com/repos/OValery16/TransferCL,TransferCL: an open framework for transfer learning on mobile device,"TransferCL
======== 

Table of Contents
=================

* [1. Why TransferCL ?](#1-why-transfercl-)
* [2. How does it work?](#2-how-does-it-work)
	* [2.1 Transfer Learning](#21-transfer-learning)
* [3. Installation](#3-installation)
	* [3.1 Installation from prebuild packages](#31-installation-from-prebuild-packages)
	* [3.2 Building from source: Native Library installation](#32-building-from-source-native-library-installation)
	   * [3.1.1 Pre-requisites](#311-pre-requisites)
		  * [3.1.1.1 Where to find the appropriated OpenCL shared-library](#3111-where-to-find-the-appropriated-opencl-shared-library)
	   * [3.1.2 Procedure](#312-procedure)
	   * [3.1.3 Android application installation](#313-android-application-installation)
* [4. How to use it](#4-how-to-use-it)
* [5. Case study](#5-case-study)
* [6. Important remarks](#6-important-remarks)
* [7. How to see the output](#7-how-to-see-the-output)
* [8. To get in contact](#8-to-get-in-contact)
* [9. Contribute](#9-contribute)



TransferCL is an open source deep learning framework which has been designed to run on mobile devices.  The goal is to enable mobile devices to tackle complex deep learning oriented-problem reserved to desktop computers. This project has been initiated by the parallel and distributed processing laboratory at [National Taiwan University](https://www.ntu.edu.tw).  Olivier Valery develloped this tool during his PhD at National Taiwan University. TransferCL is released under Mozilla Public Licence 2.0.

### 1. Why TransferCL ?

Recent mobile devices are equipped with multiple sensors, which can give insight into the mobile users' profile.  We believe that such information can be used to customize the mobile experience for a specific user.

The primary goal of TransferCL is to leverage Transfer Learning on mobile devices. Our work is based on the [DeepCL Library](https://github.com/hughperkins/DeepCL). Despite their similarities, TransferCL has been designed to run efficiently on a broad range of mobile devices. As a result, TransferCL implements its own memory management system and own OpenCL kernels in order take into account the specificity of mobile devices' System-on-Chip.

### 2. How does it work?

TransferCL is implemented in C++ and is able to run on any Android device with an OpenCL compliant GPU (the vast majority of modern Android devices). TransferCL provides several APIs which allow programmers to transparently leverage deep learning on mobile devices.

#### 2.1 Transfer Learning

Modern mobile devices suffer from two major issues that prevent them from training a deep neural network on mobile devices via a classic supervised learning approach:

* First, the computing capabilities are relatively limited in comparison to servers.
* Then, a single mobile device may not have a sufficient label data in its training data set to train a deep neural network accurately.

![file architecture](/image/traditional_ml_setup.png?raw=true)

Transfer learning is a technique that shortcuts a lot of this work by taking a fully-trained model for a set of categories like ImageNet and retraining from the existing weights for new classes.  The use of pre-trained features is currently the most straightforward and most commonly way to perform transfer learning, but it is not the only one.

![file architecture](/image/transfer_learning_setup.png?raw=true)

For more information, please check these websites:
* [Transfer Learning with TensorFlow](https://www.tensorflow.org/tutorials/image_retraining)
* [Transfer Learning with CNTK](https://docs.microsoft.com/en-us/cognitive-toolkit/Build-your-own-image-classifier-using-Transfer-Learning)
* [A survey of existing Transfer Learning techniques](http://ruder.io/transfer-learning/index.html)
* [The class Convolutional Neural Networks for Visual Recognition at Stanford ](http://cs231n.github.io/transfer-learning/)
* [A paper study of transfer learning performance](https://arxiv.org/abs/1411.1792)

### 3. Installation

There are two ways to install TranferCL: 
1. From the source 
	* This method enables the developer to build TranferCL for any particular mobile device architecture. We recommend this approach.
2. Importing TranferCL from our prebuilt directory
	* TransferCL has been pre-build for several commonly used hardware configurations. For these configurations, the shared-library can be imported directly in the Android application. However, we emphasize that once built, a shared-library is specific to a CPU ABI (armeabi-v7a, arm64-v8a ...) a GPU architecture (Adreno, Mali ...) and won't work for any other configurations than the one targeted initially.

#### 3.1 Installation from prebuild packages

* In the folder ```prebuild library```, you can find the binary files (to include in your Android aplication) and the JavaWrapprer.
* In this folder, this [file](prebuild%20library/README.md) includes more details about their utilization.
	
#### 3.2 Building from source: Native Library installation

##### 3.1.1 Pre-requisites

* OpenCL compliant GPU, along with appropriate OpenCL driver:
    * The ```libOpenCL.so```, corresponding to the mobile device's GPU which is being targeting, need to to be placed in the folder ```extra_libs```.
    * the headers files (*.h) need to be placed in the folder ```include``` 
    
* CrystaX NDK: 
    * [Google NDK](https://developer.android.com/ndk/index.html) provides a set of tools to build native applications on Android.  Our work is based on [CrystaX NDK](https://www.crystax.net/en), which has been developed as a drop-in replacement for Google NDK. For more information, please check their [website](https://www.crystax.net/en).
    * It is still possible to use Google NDK, however, the user will need the import ```Boost C++``` by himself.
	
###### 3.1.1.1 Where to find the appropriated OpenCL shared-library

As mentioned previously, the installation of TransferCL requires the compatible ```libOpenCL.so``` library and the corresponding OpenCL headers:
* The headers: the simplest way is extracting them from Adreno/Mali SDK. For Adreno SDK, they can be found at ```<Adreno_SDK>/Development/Inc/CL```. For Mali SDK, they can be found at ```<MALI_SDK>/include/CL```.
* The ```libOpenCL.so```:  the library is generally already present on the mobile device and can be pulled via ```adb pull /system/vendor/lib/libOpenCL.so .```. (the path may change from one brand to another)


##### 3.1.2 Procedure

* git clone https://github.com/OValery16/TransferCL.git
* add your libOpenCL.so in the folder ```extra_libs```.
* add the OpenCL header in the folder ```include```.

Your repository should look like that:

![file architecture](/image/files2.png?raw=true)

* In the folder 'jni', create a ```\*.cpp``` file and a ```&ast.h``` file, whose role is to interface with TranferCL. The Android application will call this file's method to interact with the deep learning network.
    * An example can be found in ```transferCLinterface.cpp```
    * The name of the functions need to be modified in order to respect the naming convention for native function in NDK/JNI application: ```Java_{package_and_classname}_{function_name}(JNI arguments)```
        * For example the ```Java_com_sony_openclexample1_OpenCLActivity_training``` means that this method is mapped to the ```training``` method from the  ```OpenCLActivity``` activity in the ```com.sony.openclexample1``` package.
        * For more information about this naming convention, please check this [website](https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html)
* In the 'Android.mk', change the line ```LOCAL_SRC_FILES :=transferCLinterface.cpp``` to ```LOCAL_SRC_FILES :={your_file_name}.cpp``` (replace 'your_file_name' by the name of the file you just created)
* In the 'Application.mk' change the line ```APP_ABI := armeabi-v7a``` to ```APP_ABI := {the_ABI_you_want_to_target}``` (replace 'the_ABI_you_want_to_target' by the ABI you want to target)
    * A list of all supported ABIs is given on the [NDK website](https://developer.android.com/ndk/guides/abis.html).
    * Make sure that your device supports the chosen ABI (otherwise it won't be able to find TransferCL 's methods). If you are not certain, you can check which ABIs are supported by your device, via some android applications like ```OpenCL-Z```.
* Run CrystaX  NDK to build your shared library with the command ```ndk-build``` (crystax-ndk-X\ndk-build where X is CrystaX NDK version)
```
>ndk-build
```
* CrystaX NDK will output several shared library files (they are specific to your mobile device ABIs)

##### 3.1.3 Android application installation

* Create your Android project.
* Don't forget to respect the name conversion that you chose earlier (otherwise your application won't find your native methods)
* In your activity, you have to load your native library as following
```Java
    static {
      try {
          System.loadLibrary(""openclexample1"");  //Just put your libaries name
      }
      catch (UnsatisfiedLinkError e) {
          sfoundLibrary = false;
      }
    }
```
* Define the methods that have been implemented natively (in the shared library) as in the example
```
    //the name need to be the same as the one defined in the shared library
    public static native int training(String path, String cmdTrain);
    public static native int prediction(String path, String cmdPrediction);
    public static native int prepareFiles(String path, String fileNameStoreData,String fileNameStoreLabel, String fileNameStoreNormalization, String manifestPath, int nbImage, int imagesChannelNb);
```
* Build your applications

## 4. How to use it

* In the folder ```study case```, you can find a template application  using TranferCL. This application defines 2 Java source package:
	* ```com.transferCL```, which is a java wrapper for the native methods defined in TranferCL (```TransferCLlib.java```).
	* ```com.example.myapplication```, which is an android activity (```MainActivity.java```). It calls  the methods declared in ```TransferCLlib.java```.
* In the folder ```prebuild library```, you can also find the java wrapper file (```TransferCLlib.java```).
* In the file ```TransferCLlib.java``` , you can find three methods that have been already defined:
    * ```prepareFiles(String path, String fileNameStoreData,String fileNameStoreLabel, String fileNameStoreNormalization, String manifestPath, int nbImage, int imagesChannelNb)```
        * This method builds the training data set.
        * Originally the training data set is stored on the microSD card as a set of jpeg images and a manifest file as defined on [DeepCL website in the section 'jpegs'](https://github.com/hughperkins/DeepCL/blob/master/doc/Loaders.md)
            * In future versions of this tutorial there will be some concrete examples.
        * The images are processed by TransferCL and stored on the mobile device as a unique binary file.
        * Also create the folder architecture on your mobile device to store pre-build OpenCL kernel.
            * If these folders are not created, the application will crash.
        * This method has to be the first to run.	
    * ```training(String path, String cmdTrain);```
        * This method trains the new deep neural network. 
        * This method reuse the previously created files.
        * This method also build the OpenCL kernel the system need to train the deep neural network. 
        * The parameters of the training methods are given in 'transferCLinterface.cpp'
    * ```prediction(String path, String cmdPrediction)```
        * This method performs the inference task and store the result in a text file

* Currently the most convenient way is to use [DeepCL Library](https://github.com/hughperkins/DeepCL) to train the first deep learning model on mobile.
    * However a conversion tool (TensorFlow model/TransferCL) is in development.

## 5. Case study


* A case study is in the folder ```case study```
* In the folder ```study case```, you can find an application template using TranferCL.
* You can also find a [tutorial](./case%20study/README.md).
* The study case explores the following scenario:	
	* Training on a server
		1. We train a network (LeNet5) on the server with MNIST dataset (the training configuration is the standard one).
		2. The final model is stored on the server in a binary file. 
		3. This binary file is copied on the mobile device (for example, on the SD Card).
	* Files preparations (```prepareFiles```)
		1. We create the working directory ```directoryTest``` (perform at the native level by TransferCL)
		2. The training files (the training file and their labels are respectively stored in one binary file) are generated.
		3. TransferCL analyse the dataset, stores its mean/stdDev and store them in one file
	* Training on the mobile device (```training```)
		1. TransferCL creates a neural network, and initializes the weights of all layers except the last one with the weights of the pre-trained network. 
		2. The last layer is initialized with a random number generator.
		3. The training starts: TransferCL train the final layer from scratch, while leaving all the others untouched.
			1. TransferCL performs the forward propagation.
			2. TransferCL performs the backward propagation and the weight update only on the last layer.
		4. After very few iterations, the prediction error drops significantly. Most images' label are predicted correctly after only 20 iterations. (```loss=98.937355 numRight=118```)
	* Test on the mobile device (```prediction```)
		1. We tested our model prediction accuracy with a test dataset, which our model has never seen. In our expleriment, TransferCL predicted all test images label correctly.
* To Conclude this case study, TransferCL trained on only about 12 images per class (a total of 10 classes) in a few seconds and predicted all test images correctly.

## 6. Important remarks

* The training images must cover sufficiently the scenarios that you want to predict. If the classifier sees fully new concepts or contexts, it is likely to perform badly. It applies in particular when leveraging transfer learning in a mobile device environment.

    * If the training dataset only contains images from a constraint environment (say, indoor), the classifier won't be able to score images accurately from a different environment (outdoor).
    * If the test images have widely different characteristics (illumination, background, color, size, position, etc), the classifier won't be able to perform very well.
    * If a test image contains entirely new concepts, the classifier won't be able to identify its class.
    
* The choice of the base model to transfer to the mobile device is very important. The two classification tasks (the one on the server and the one on the mobile device) should be related. For example, in our case study the base network has been trained to recognize handwritten digits and this knowledge is transferred to TransferCL in order to train a new network to classify handwritten characters on mobile devices.

## 7. How to see the output 

* In order to see the ouput of TranferCL, you can use the [logcat command-line tool](https://developer.android.com/studio/command-line/logcat.html):
	* ```>adb logcat ActivityManager:I TransferCL:D *:S```

* For example, the output of ```prepareFiles(String path, String fileNameStoreData,String fileNameStoreLabel, String fileNameStoreNormalization, String manifestPath, int nbImage, int imagesChannelNb)``` should look like that.

```
I/TransferCL(10924): -------Files Preparation
I/TransferCL(10924): -----------Generation of the memory-map files (binary files)
I/TransferCL(10924): -------------- 128 images in the training set with 1 dimension and a image size of 28 X 28
I/TransferCL(10924): -------------- Training set loading
I/TransferCL(10924): -------------- training data file generation: /data/data/com.sony.openclexample1/directoryTest/mem2Character2ManifestMapFileData2.raw
I/TransferCL(10924): -------------- label file generation: /data/data/com.sony.openclexample1/directoryTest/mem2Character2ManifestMapFileLabel2.raw
I/TransferCL(10924): -------------- normalization file file generation: /data/data/com.sony.openclexample1/directoryTest/normalizationTranfer.txt
I/TransferCL(10924): -------File generation: completed
I/TransferCL(10924): easyCL oject destroyed
```

* For example, the output of ```training(String path, String cmdTrain);``` should look like that.
	* After each iteration, TransferCL displays the loss value and the number of images' label correctly predicted. 
		* For example, ```loss=98.937355 numRight=118``` means that the loss is equal to 98.937355 and 118 images' label have been correctly predicted (we have only 128 images in the training dataset)
		
```
I/TransferCL(10924): ################################################
I/TransferCL(10924): ###################Training#####################
I/TransferCL(10924): ################################################
I/TransferCL(10924): ------- Loading configuration: training set 128 images with 1 channel and an image size of 28 X 28
I/TransferCL(10924): ------- Network Generation: 1s8c5z-relu-mp2-1s16c5z-relu-mp3-152n-tanh-10n
I/TransferCL(10924): -----------Define Weights Initialization Method
I/TransferCL(10924): -------------- Chosen Initializer: original
I/TransferCL(10924): -----------Network Layer Generation
I/TransferCL(10924): -----------Selecting Training method (sgd)
I/TransferCL(10924): -----------Loading the weights (the othe weights are radomly initialized with the initializer defined previously)
I/TransferCL(10924): -----------Set up Trainer
I/TransferCL(10924):
I/TransferCL(10924):
I/TransferCL(10924): ################################################
I/TransferCL(10924): ################Start learning##################
I/TransferCL(10924): ################################################
I/TransferCL(10924):
I/TransferCL(10924):
I/TransferCL(10924): loss=340.038452 numRight=16
I/TransferCL(10924): loss=275.497894 numRight=28
I/TransferCL(10924): loss=250.139160 numRight=45
I/TransferCL(10924): loss=231.197174 numRight=60
I/TransferCL(10924): loss=215.234680 numRight=71
I/TransferCL(10924): loss=201.223007 numRight=80
I/TransferCL(10924): loss=188.762817 numRight=87
I/TransferCL(10924): loss=177.619720 numRight=92
I/TransferCL(10924): loss=167.614990 numRight=97
I/TransferCL(10924): loss=158.600357 numRight=105
I/TransferCL(10924): loss=150.450089 numRight=108
I/TransferCL(10924): loss=143.057266 numRight=109
I/TransferCL(10924): loss=136.329941 numRight=111
I/TransferCL(10924): loss=130.189621 numRight=113
I/TransferCL(10924): loss=124.568176 numRight=114
I/TransferCL(10924): loss=119.406982 numRight=114
I/TransferCL(10924): loss=114.655197 numRight=116
I/TransferCL(10924): loss=110.268494 numRight=117
I/TransferCL(10924): loss=106.208397 numRight=118
I/TransferCL(10924): loss=102.441200 numRight=118
I/TransferCL(10924): loss=98.937355 numRight=118
I/TransferCL(10924): loss=95.670959 numRight=118
I/TransferCL(10924): loss=92.619194 numRight=119
I/TransferCL(10924): loss=89.761833 numRight=119
I/TransferCL(10924): loss=87.081139 numRight=119
I/TransferCL(10924): loss=84.561211 numRight=119
I/TransferCL(10924): loss=82.188004 numRight=119
I/TransferCL(10924): loss=79.949051 numRight=119
I/TransferCL(10924): loss=77.833115 numRight=119
I/TransferCL(10924): loss=75.830170 numRight=120
I/TransferCL(10924): loss=73.931221 numRight=121
I/TransferCL(10924): loss=72.128242 numRight=121
I/TransferCL(10924): loss=70.413902 numRight=122
I/TransferCL(10924): loss=68.781647 numRight=122
I/TransferCL(10924): loss=67.225548 numRight=122
I/TransferCL(10924): loss=65.740196 numRight=122
I/TransferCL(10924): loss=64.320671 numRight=122
I/TransferCL(10924): loss=62.962559 numRight=122
I/TransferCL(10924): loss=61.661789 numRight=122
I/TransferCL(10924): loss=60.414635 numRight=122
I/TransferCL(10924): loss=59.217720 numRight=123
I/TransferCL(10924): loss=58.067921 numRight=123
I/TransferCL(10924): loss=56.962376 numRight=123
I/TransferCL(10924): loss=55.898487 numRight=123
I/TransferCL(10924): loss=54.873783 numRight=123
I/TransferCL(10924): loss=53.886082 numRight=123
I/TransferCL(10924): loss=52.933289 numRight=123
I/TransferCL(10924): loss=52.013527 numRight=123
I/TransferCL(10924): loss=51.125000 numRight=123
I/TransferCL(10924): loss=50.266037 numRight=123
I/TransferCL(10924): loss=49.435169 numRight=123
I/TransferCL(10924): loss=48.630978 numRight=123
I/TransferCL(10924): loss=47.852093 numRight=124
I/TransferCL(10924): loss=47.097301 numRight=124
I/TransferCL(10924): loss=46.365482 numRight=124
I/TransferCL(10924): loss=45.655514 numRight=124
I/TransferCL(10924): loss=44.966412 numRight=124
I/TransferCL(10924): loss=44.297222 numRight=124
I/TransferCL(10924): loss=43.647057 numRight=124
I/TransferCL(10924): loss=43.015118 numRight=124
I/TransferCL(10924): loss=42.400551 numRight=124
I/TransferCL(10924): loss=41.802689 numRight=124
I/TransferCL(10924): loss=41.220783 numRight=124
I/TransferCL(10924): loss=40.654228 numRight=124
I/TransferCL(10924): loss=40.102375 numRight=124
I/TransferCL(10924): loss=39.564655 numRight=124
I/TransferCL(10924): loss=39.040504 numRight=124
I/TransferCL(10924): loss=38.529396 numRight=124
I/TransferCL(10924): loss=38.030872 numRight=124
I/TransferCL(10924): loss=37.544403 numRight=124
I/TransferCL(10924): loss=37.069607 numRight=124
I/TransferCL(10924): loss=36.606026 numRight=124
I/TransferCL(10924): loss=36.153259 numRight=124
I/TransferCL(10924): loss=35.710938 numRight=124
I/TransferCL(10924): loss=35.278702 numRight=124
I/TransferCL(10924): loss=34.856178 numRight=124
I/TransferCL(10924): loss=34.443069 numRight=124
I/TransferCL(10924): loss=34.039047 numRight=124
I/TransferCL(10924): loss=33.643822 numRight=125
I/TransferCL(10924): loss=33.257088 numRight=125
I/TransferCL(10924): loss=32.878590 numRight=125
I/TransferCL(10924): loss=32.508057 numRight=125
I/TransferCL(10924): loss=32.145245 numRight=125
I/TransferCL(10924): loss=31.789917 numRight=125
I/TransferCL(10924): loss=31.441833 numRight=125
I/TransferCL(10924): loss=31.100786 numRight=125
I/TransferCL(10924): loss=30.766573 numRight=125
I/TransferCL(10924): loss=30.438965 numRight=125
I/TransferCL(10924): loss=30.117785 numRight=125
I/TransferCL(10924): loss=29.802849 numRight=125
I/TransferCL(10924): loss=29.493982 numRight=125
I/TransferCL(10924): loss=29.191004 numRight=125
I/TransferCL(10924): loss=28.893751 numRight=125
I/TransferCL(10924): loss=28.602062 numRight=125
I/TransferCL(10924): loss=28.315805 numRight=125
I/TransferCL(10924): loss=28.034807 numRight=125
I/TransferCL(10924): loss=27.758936 numRight=125
I/TransferCL(10924): loss=27.488062 numRight=125
I/TransferCL(10924): loss=27.222054 numRight=125
I/TransferCL(10924): loss=26.960766 numRight=126
I/TransferCL(10924): loss=26.704094 numRight=126
I/TransferCL(10924): loss=26.451908 numRight=126
I/TransferCL(10924): loss=26.204117 numRight=127
I/TransferCL(10924): loss=25.960588 numRight=127
I/TransferCL(10924): loss=25.721230 numRight=128
I/TransferCL(10924): loss=25.485914 numRight=128
I/TransferCL(10924): loss=25.254572 numRight=128
I/TransferCL(10924): loss=25.027102 numRight=128
I/TransferCL(10924): loss=24.803392 numRight=128
I/TransferCL(10924): loss=24.583364 numRight=128
I/TransferCL(10924): loss=24.366938 numRight=128
I/TransferCL(10924): loss=24.154015 numRight=128
I/TransferCL(10924): loss=23.944517 numRight=128
I/TransferCL(10924): loss=23.738382 numRight=128
I/TransferCL(10924): loss=23.535511 numRight=128
I/TransferCL(10924): loss=23.335838 numRight=128
I/TransferCL(10924): loss=23.139290 numRight=128
I/TransferCL(10924): loss=22.945807 numRight=128
I/TransferCL(10924): loss=22.755301 numRight=128
I/TransferCL(10924): loss=22.567717 numRight=128
I/TransferCL(10924): loss=22.382999 numRight=128
I/TransferCL(10924): loss=22.201069 numRight=128
I/TransferCL(10924): loss=22.021870 numRight=128
I/TransferCL(10924): loss=21.845362 numRight=128
I/TransferCL(10924): loss=21.671467 numRight=128
I/TransferCL(10924): loss=21.500137 numRight=128
I/TransferCL(10924): loss=21.331320 numRight=128
I/TransferCL(10924): loss=21.164948 numRight=128
I/TransferCL(10924): loss=21.000994 numRight=128
I/TransferCL(10924): loss=20.839394 numRight=128
I/TransferCL(10924): loss=20.680103 numRight=128
I/TransferCL(10924): loss=20.523073 numRight=128
I/TransferCL(10924): loss=20.368263 numRight=128
I/TransferCL(10924): loss=20.215612 numRight=128
I/TransferCL(10924): loss=20.065100 numRight=128
I/TransferCL(10924): loss=19.916662 numRight=128
I/TransferCL(10924): loss=19.770279 numRight=128
I/TransferCL(10924): loss=19.625898 numRight=128
I/TransferCL(10924): loss=19.483482 numRight=128
I/TransferCL(10924): loss=19.342997 numRight=128
I/TransferCL(10924): loss=19.204390 numRight=128
I/TransferCL(10924): loss=19.067646 numRight=128
I/TransferCL(10924): loss=18.932722 numRight=128
I/TransferCL(10924): loss=18.799574 numRight=128
I/TransferCL(10924): loss=18.668186 numRight=128
I/TransferCL(10924): loss=18.538515 numRight=128
I/TransferCL(10924): loss=18.410522 numRight=128
I/TransferCL(10924): loss=18.284184 numRight=128
I/TransferCL(10924): loss=18.159477 numRight=128
I/TransferCL(10924): loss=18.036362 numRight=128
I/TransferCL(10924): loss=17.914803 numRight=128
I/TransferCL(10924): loss=17.794794 numRight=128
I/TransferCL(10924): loss=17.676283 numRight=128
I/TransferCL(10924): loss=17.559261 numRight=128
I/TransferCL(10924): loss=17.443693 numRight=128
I/TransferCL(10924): loss=17.329556 numRight=128
I/TransferCL(10924): loss=17.216822 numRight=128
I/TransferCL(10924): loss=17.105467 numRight=128
I/TransferCL(10924): loss=16.995462 numRight=128
I/TransferCL(10924): loss=16.886803 numRight=128
I/TransferCL(10924): loss=16.779446 numRight=128
I/TransferCL(10924): loss=16.673370 numRight=128
I/TransferCL(10924): loss=16.568565 numRight=128
I/TransferCL(10924): loss=16.465002 numRight=128
I/TransferCL(10924): loss=16.362663 numRight=128
I/TransferCL(10924): loss=16.261522 numRight=128
I/TransferCL(10924): loss=16.161564 numRight=128
I/TransferCL(10924): loss=16.062769 numRight=128
I/TransferCL(10924): loss=15.965113 numRight=128
I/TransferCL(10924): loss=15.868578 numRight=128
I/TransferCL(10924): loss=15.773150 numRight=128
I/TransferCL(10924): loss=15.678812 numRight=128
I/TransferCL(10924): loss=15.585545 numRight=128
I/TransferCL(10924): loss=15.493321 numRight=128
I/TransferCL(10924): loss=15.402135 numRight=128
I/TransferCL(10924): loss=15.311967 numRight=128
I/TransferCL(10924): loss=15.222803 numRight=128
I/TransferCL(10924): loss=15.134621 numRight=128
I/TransferCL(10924): loss=15.047411 numRight=128
I/TransferCL(10924): loss=14.961153 numRight=128
I/TransferCL(10924): loss=14.875841 numRight=128
I/TransferCL(10924): loss=14.791453 numRight=128
I/TransferCL(10924): loss=14.707974 numRight=128
I/TransferCL(10924): loss=14.625394 numRight=128
I/TransferCL(10924): loss=14.543686 numRight=128
I/TransferCL(10924): loss=14.462858 numRight=128
I/TransferCL(10924): loss=14.382881 numRight=128
I/TransferCL(10924): loss=14.303750 numRight=128
I/TransferCL(10924): loss=14.225451 numRight=128
I/TransferCL(10924): loss=14.147968 numRight=128
I/TransferCL(10924): loss=14.071287 numRight=128
I/TransferCL(10924): loss=13.995400 numRight=128
I/TransferCL(10924): loss=13.920297 numRight=128
I/TransferCL(10924): loss=13.845965 numRight=128
I/TransferCL(10924): loss=13.772382 numRight=128
I/TransferCL(10924): loss=13.699554 numRight=128
I/TransferCL(10924): loss=13.627465 numRight=128
I/TransferCL(10924): loss=13.556102 numRight=128
I/TransferCL(10924): loss=13.485450 numRight=128
I/TransferCL(10924): loss=13.415505 numRight=128
I/TransferCL(10924): gettimeofday 8387.000000
I/TransferCL(10924):  ms
I/TransferCL(10924): -----------End of ther training: Delete object
I/TransferCL(10924): -----------Delete weightsInitializer
I/TransferCL(10924): -----------Delete trainer
I/TransferCL(10924): -----------Delete netLearner
I/TransferCL(10924): -----------Delete net
I/TransferCL(10924): -----------Delete trainLoader
I/TransferCL(10924): All code took 8451.000000
I/TransferCL(10924):  ms
I/TransferCL(10924): easyCL oject destroyed
I/TransferCL(10924): 3)time 8.484612
I/TransferCL(10924):
I/TransferCL(10924): 8484.000000
I/TransferCL(10924):  ms
```

* For example, the output of ```prediction(String path, String cmdPrediction);``` should look like that.

```
I/TransferCL(14885): ################################################
I/TransferCL(14885): ###################Prediction###################
I/TransferCL(14885): ################################################
I/TransferCL(14885): ------- Network Generation
I/TransferCL(14885): -----------Network Layers Creation 1s8c5z-relu-mp2-1s16c5z-relu-mp3-152n-tanh-10n
I/TransferCL(14885): -----------Loading the weights
I/TransferCL(14885): -----------Start prediction
I/TransferCL(14885): --------- Prediction: done (prediction in /data/data/com.sony.openclexample1/preloadingData/pred2.txt)
I/TransferCL(14885): --------- End of ther prediction: Delete objects
I/TransferCL(14885): easyCL oject destroyed
```

## 8. To get in contact

Just create issues (in GitHub) in the top right of this page. Don't worry about whether you think your issue sounds unimportant or trivial. The more feedback we can get, the better!

## 9. Contribute

If you are interestered in this project, feel free to contact me.



",9,9,3,1,energy-efficiency,"[android-application, deep-learning, energy-efficiency, gpu, memory-management, mobile-devices, multicore-cpu, native-applications, ndk, opencl, parallel-processing, portability, portable, system-on-chip, transfer-learning]",00000
1421,circcash,jvanname,N/A,https://github.com/jvanname/circcash,https://api.github.com/repos/jvanname/circcash,Circcash is the only cryptocurrency with a mining algorithm that is designed to advance science. Circcash mining will accelerate the development of reversible computational hardware.,"Circcash integration/staging tree
================================


Copyright (c) 2009-2014 Bitcoin Developers

Copyright (c) 2011-2014 Litecoin Developers

Copyright (c) 2020 Joseph Van Name Ph.D.

What is Circcash?
----------------

Circcash is a fork of Bitcoin using Hashspin as a proof-of-work algorithm. Hashspin is designed to accelerate the development of reversible computing hardware. Hashspin is the only cryptocurrency mining algorithm that is designed to solve an extremely important scientific problem.
 - 2.0 minute block targets
 - 10 CIRCs per block
 - No subsidy halving
 - Supply increases linearly (to better advance science)
 - Mining reward remains constant
 - 2016 blocks to retarget difficulty
 - 12.5% of newly mined coins will be sent to a development fund. The development fund will be cut off after the following two conditions are BOTH met:

 1. The cryptocurrency has been out for four years, and
 
 2. The total number of 'hashes' computed for mining exceeds a threshold.

 - Forked from Litecoin v0.8.7.5

The Circcash development team may cut off the 12.5% funding early.

The rest is the same as Bitcoin/Litecoin.

See this link for the whitepaper: https://github.com/jvanname/Zammazazzer/blob/master/CirclefishICO.pdf

License
-------

Circcash is released under the terms of the MIT license. See `COPYING` for more
information or see http://opensource.org/licenses/MIT.


Installation
-------

Go to this link for instructions for installing Circcash on Ubuntu.

https://github.com/jvanname/circcash/blob/master/UbuntuInstallationInstructions.md

Click here to download the Windows executable for Circcash.

https://github.com/jvanname/circcash/blob/master/circcash-0.8.7.5-win32-setup.exe

Development process
-------------------

Developers work in their own trees, then submit pull requests when they think
their feature or bug fix is ready.

If it is a simple/trivial/non-controversial change, then one of the Circcash
development team members simply pulls it.

If it is a *more complicated or potentially controversial* change, then the patch
submitter will be asked to start a discussion with the devs and community.

The patch will be accepted if there is broad consensus that it is a good thing.
Developers should expect to rework and resubmit patches if the code doesn't
match the project's coding conventions (see `doc/coding.txt`) or are
controversial.

The `master` branch is regularly built and tested, but is not guaranteed to be
completely stable. [Tags](https://github.com/circcash-project/circcash/tags) are created
regularly to indicate new official, stable release versions of Circcash.

Testing
-------

Testing and code review is the bottleneck for development; we get more pull
requests than we can review and test. Please be patient and help out, and
remember this is a security-critical project where any mistake might cost people
lots of money.

### Automated Testing

Developers are strongly encouraged to write unit tests for new code, and to
submit new unit tests for old code.

Unit tests for the core code are in `src/test/`. To compile and run them:

    cd src; make -f makefile.unix test

Unit tests for the GUI code are in `src/qt/test/`. To compile and run them:

    qmake BITCOIN_QT_TEST=1 -o Makefile.test bitcoin-qt.pro
    make -f Makefile.test
    ./circcash-qt_test

",9,9,5,2,energy-efficiency,"[computer-science, cryptocurrency, energy-efficiency]",00000
1422,GreenSDN,jmathet,N/A,https://github.com/jmathet/GreenSDN,https://api.github.com/repos/jmathet/GreenSDN,SDN Low-Cost Testbed For Saving Energy Applicationin Data Center Networks (ElasticTree),"GreenSDN project : Create a plug and play application implementing ElasticTree

# Reporsitory Organisation
### ``` mininet-simulation ``` folder: 
* *app* : external application using the API REST of ONOS. This is the logical module of the ElasticTree application.
    *   ```topo_discovery.py``` : to build graph of the current topology based on ONOS info
    *   ``` defaultpath.py``` : to create single default path between every host in the network
    *   ``` flowMeasure.py``` : to compute the number of switches needed in each layer in order to satisfy traffic and save energy
    *   ``` monitoringTools.py ``` : basic functions
    *   ``` runElasticTree.py ``` : main function (deamon)
    *   *deviceList* : folder to store the list of devices for 4 and 4 degree fattre
    *   *ruleTempalte*: folder to store json template of flow rules

* ``fattree.py`` : Python file to create virtual  SDN network connected to ONOS controller (fat-tree topology) using mininet. The topology is k-fattree (4 or 8 degree)

### ``` Pi-simulation``` folder:
* *app* : external application using the API REST of ONOS. This is the logical module of the ElasticTree application.
    *   ```topo_discovery.py``` : to build graph of the current topology based on ONOS info
    *   ``` defaultpath.py``` :  to create single default path between every host in the network
    *   ``` flowMeasure.py``` : to compute the number of switches needed in each layer in order to satisfy traffic and save energy
    *   ``` monitoringTools.py ``` : basic functions
    *   ``` powerControl.py ``` : to monitor the power of Raspberry-Pis switches according to the number of switches needed
    *   ``` runElasticTree.py ``` : main function (deamon)
    *   *deviceList* : folder to store the list of devices for our special fattre
    *   *ruleTempalte*: folder to store json template of flow rules

* *scriptsSSH_pi* : scripts to simplify the management of Raspberry-pi
    *   ``` pi_power_control.py ```: pyhton script used in the power manager Raspberry-Pi to control the relay using GPIO
    *   ``` power_measure.py ```: to read the power consumed by the tower of Raspberry-Pis through ePDUs
    *   ```  runall_background ```: to send a bash command to every Raspberry-Pi (list stored in ```list.switch```) using ssh



# Requirements
### ONOS requirements
* git
* zip
* curl
* unzip
* python 2.7
* python 3 (needed by Bazel)
* Bazel (minimum version : 0.27.0)

### ONOS
* Version 2.2
* Developper Quick Start : https://wiki.onosproject.org/display/ONOS/Developer+Quick+Start

### Python ElasticTree app requirements
* pip (package management)
* Python packages :
    *   networkx
    *   matplolib
    *   request
    *   json

Command: ```~$ pip install package```
# Clone the repository

```
~$ git clone https://github.com/disnetlab/GreenSDN.git
```

# Run the appliction

1. Run ONOS controller and check default application

    Run:
    ``` 
    ~$ cd onos
    ~/onos$ bazel run onos-local -- clean debugm
     ```
    Check apps:
    ```
    ~/onos$ ./tools/test/bin/onos localhost
    onosCLI@root > apps -a -s
    *   9 org.onosproject.hostprovider         2.2.0.SNAPSHOT Host Location Provider
    *  16 org.onosproject.optical-model        2.2.0.SNAPSHOT Optical Network Model
    *  38 org.onosproject.drivers              2.2.0.SNAPSHOT Default Drivers
    *  65 org.onosproject.lldpprovider         2.2.0.SNAPSHOT LLDP Link Provider
    *  66 org.onosproject.openflow-base        2.2.0.SNAPSHOT OpenFlow Base Provider
    *  67 org.onosproject.openflow             2.2.0.SNAPSHOT OpenFlow Provider Suite
    *  94 org.onosproject.gui2                 2.2.0.SNAPSHOT ONOS GUI2
    ```
    If the list is not like this one, please add missing app with the following command:
    ```
    app activate <app name>
    ```

2. Run CLI and activate some onos application
    ``` 
    ~/onos$ ./tools/test/bin/onos localhost
    onosCLI@root > app activate proxyarp 
    onosCLI@root > app activate fwd
    ``` 
    (proxyarp : for default path algo, fwd : for the host discovery - will be deactivated later)

<span style=""color:red"">/!\ WARNING </span> Without ```proxyarp``` default paths are not working
### Mininet simulation


3. Create network (mininet) 4 or 8 degree (```k```) and pingall

    ``` 
    ~$ cd GreenSDN/mininet-simulation/ 
    ~/GreenSDN/mininet-simulation$ sudo python fattree.py <k> <traffic|notraffic>
    mininet > pingall
     ```

     Example (4-fat-tree and no traffic generated) : 
     ```
     ~/GreenSDN/mininet-simulation$ sudo python fattree.py 4 notraffic
     ```

4. Deactivate forwarding ONOS app using ONOS CLI

    ``` 
    onosCLI@root > app deactivate fwd 
    ```

5. Create default path
    ```  
    ~$ cd GreenSDN/mininet-simulation/app/ 
    ~/GreenSDN/mininet-simulation/app$ python defaultpath.py <k>
    ```

6. Run ElasticTree algo
    ```  
    ~$ cd GreenSDN/mininet-simulation/app/
    python runElasticTree.py <k>
    ```
### Pi simulation
3. Pingall from the computer 1
    ```  
    root@compute1~$ ./pingall
    ```

4. Deactivate forwarding ONOS app using ONOS CLI

    ``` 
    onosCLI@root > app deactivate fwd 
    ```

5. Create default path
    ```  
    ~$ cd GreenSDN/pi-simulation/app/ 
    ~/GreenSDN/pi-simulation/app$ python defaultpath.py
    ```

6. Run ElasticTree algo
    ```  
    ~$ cd GreenSDN/pi-simulation/app/
    python runElasticTree.py
    ```

# Network topology

Fat-tree topology

## Network IP adresses
IP networks in a ```k=4``` fat-tree topology.
The idea is the following : to create different sub-network depinding the position in the fat-tree topology. We decided to use ```10.0.0.0/8``` as network address. Then, each POD sub-network is identify throught the 8 following bits. The POD p is using the ```10.p.0.0/16``` network IP address. The next 8 bits are used to specify the number of the edge switch in the current POD, the IP address of this sub-network is : ```10.p.e.0/24```. Finally, the last 8 bits are used by the number of the host connected to the edge switch e: ```10.p.e.h```

<img src=""figures/network_GRAPH_16HOSTS(IP).png""
     alt=""Markdown png""
     style=""float: left; margin: 20px;"" />

## Network default-path
 Flow rules for downward traffic match the IP destination and send the traffic to the corresponding port. Every layer of switches only matches a certain number of bits of the IP address, this number corresponds to the netmask of the following sub-net.
 The upward traffic is defined by: traffic that goes outside of the current sub-network. Here, only the source IP is used to balance the traffic on every links available. Once again, netmasks are used to reduced the number on flow rules.


<span style=""color:red"">/!\ WARNING </span> Higher priority (high number) matches FIRST

## Network Pi-tower
<img src=""figures/archi-cables-pi-fattree.png""
     alt=""Markdown png""
     style=""float: left; margin: 20px;""/>
<img src=""figures/archi-cables-tower.png""
     alt=""Markdown png""
     style=""float: left; margin: 20px;"" />
",9,9,1,0,energy-efficiency,"[energy-efficiency, onos, ovs, raspberry-pi, sdn, sdn-switches]",00000
1423,sbem-ifcjs,jpatacas,N/A,https://github.com/jpatacas/sbem-ifcjs,https://api.github.com/repos/jpatacas/sbem-ifcjs,Simplified building energy modelling tool using IFC.js,"# SBEM + IFC.js

Simplified building energy modelling tool using IFC.js and the [NREL ResStock dataset](https://resstock.nrel.gov/).

It takes IFC quantities as an input for initial filtering and allows you to evaluate different design options and their impact on energy usage.

To consider initial filtering by area and window to wall ratio, models must be exported including Base quantities (e.g. in Revit IFC export, Modify setup, Property sets, Export base quantities). 

Add .ifc models to the /models folder and edit the projects.js file to add model names.

The [energy.py](https://github.com/jpatacas/energy-queries-sbem) tool should be running to use the energy modelling panel. 

To use this tool with Bimserver check the `enable-bimserver` branch.
",9,9,2,0,energy-efficiency,"[bim, bim-applications, energy-data, energy-efficiency, ifc, sbem, three-js]",00000
1424,SNN4Space,AndrzejKucik,N/A,N/A,https://api.github.com/repos/AndrzejKucik/SNN4Space,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A0:53F5:280074E:523FC7F:6522409F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1425,comparability,klemenjak,N/A,https://github.com/klemenjak/comparability,https://api.github.com/repos/klemenjak/comparability,Supplemental material on comparability and performance evaluation in NILM,"# Comparability in Non-Intrusive Load Monitoring

This repository contains source code as well as supplemental material related to our research paper *Towards Comparability in Non-Intrusive Load Monitoring: On Data and Performance Evaluation*. You are free to use, copy, and distribute this code. In any case, we ask you to cite our paper and to make a reference to this repository.

[Download the research paper here.](http://makonin.com/doc/ISGT-NA_2020b.pdf)

* Title: Towards Comparability in Non-Intrusive Load Monitoring: On Data and Performance Evaluation
* Authors: Christoph Klemenjak, Stephen Makonin, and Wilfried Elmenreich
* Conference: 2020 IEEE Power & Energy Society Innovative
Smart Grid Technologies Conference (ISGT)

Recommended Citation:

```
@INPROCEEDINGS{klemenjak2020comparability,
author={Klemenjak, Christoph and Makonin, Stephen and Elmenreich, Wilfried},
booktitle={2020 IEEE Power \& Energy Society Innovative Smart Grid Technologies Conference (ISGT)},
title={Towards Comparability in Non-Intrusive Load Monitoring: On Data and Performance Evaluation},
year={2020},
organization={IEEE}}
```

## NAR - How noisy is a dataset?

The aggregate power signal of a real-world dataset consists not exclusively of known appliance-level signals, but also contains several unknown appliance-level signals that contribute to the error term epsilon (noise). To quantify the amount of noise of an aggregate power signal, we introduce the Noise-to-Aggregate Ratio, NAR, which is defined as:

![NAR](img/NAR.png)

Find more information and a usage note in the [[Jupyter Notebook].](NAR.ipynb)

### NAR in some common energy consumption data sets

We derived the NAR with respect to active and apparent power for some of the most commonly-used energy consumption data sets. Please note that our focus is on their *low-frequency* version.

| Data Set | House | Duration in days | Meters | NAR for P in \%| NAR for S in \%|
|----------|-------:|------------------:|--------:|-----------:|-----------:|
| AMPds 2  |  1    | 730              |   20     |     18      |   6       |
| COMBED   |  1    |  28              |   13    |    34        |    -    |
| DRED     |  1    |  153             |   12     |   -       |     28    |
| ECO      |  1    |  245             |   7     |    68        |     -      |
| ECO      |  6    |  219             |   7     |    74        |   -        |
| iAWE     |  1    |  73              |   10     |   63        |     61      |
| REDD     |  1    |  36                |   16     |  -     |    -        |
| REFIT    |  1    |  638              |    9    |     65      |   -       |
| REFIT    |  8    |  555                |  9      |   78      |    -        |
| REFIT    |  17   |  443             |     9   |      45      |   -       |
| UK-DALE  |  1    |  658              |    52    |    33      |    87       |
| UK-DALE  |  2    |  176             |     18   |     41      |  -       |
| UK-DALE  |  5    |  137             |     24   |     31      |   -       |


## Estimating the number of events in common NILM datasets

We hypothesise that the number of events has a considerable impact on the performance of load disaggregation algorithms since a high number of observed events would reflect a vibrant household. In this context, we define an event to be the transition between two representative states of power consumption. These representative states are obtained by applying methods of statistics, filtering, and clustering:

1. We apply a *median filter* to the signal to fight noise
2. We estimate the number of states by deriving *basic statistics* of the time series
3. We run *k-means clustering* to identify representative appliance states (building on insights from point 2)
4. We *quantise the time series* and count the number of transitions between appliance states

Besides duration of measurement campaigns and installed meters, we report:

1. The *minimum number of events per day*, which states the average number of events of the least-active appliance in a household i.e. appliance with the least events
2. The *average number of events per house*, which states the average number of events of a household per day. In some way, this average provides insights about how vibrant the household is i.e. how much appliances are being used.

| Data Set | House | Duration in days | Meters | Minimum Number of Events per Day | Average Number of Events per House |
|---------|------:|-----------------:|-------:|-----------------:|-----------------:|
| AMPds2  |  1    | 730              |   20     |   0        |   319      |
| COMBED   |  1    |  28              |   13    |     0       |   463   |
| DRED     |  1    |  153             |   12     |    1      |    604   |
| ECO      |  1    |  245             |   7     |      7      |   691      |
| ECO      |  6    |  219             |   7     |      1      |   1166         |
| iAWE     |  1    |  73              |   10     |     1      |   497     |
| REDD     |  1    |  36                |   16     |   0     |    799    |
| REFIT    |  1    |  638              |    9    |     1      |   320       |
| REFIT    |  8    |  555                |  9      |   3      |   229        |
| REFIT    |  17   |  443             |     9   |      1      |   379       |
| UK-DALE  |  1    |  658              |    52    |    0      |   874    |
| UK-DALE  |  2    |  176             |     18   |     0      |   733      |
| UK-DALE  |  5    |  137             |     24   |     0      |   1320       |


## Testset ratio (TSR): How extensively are we testing?

In our research paper, we discuss several aspects related to performance evaluation. One of them concerns testsets.
In order to obtain conclusive results in performance evaluation, NILM algorithms have to be tested on a sufficiently large amount of data. However, we can observe large variations in related work spanning from a few days up to several months of test sets.
We identify the need for a simple measure that gives information on how extensively testing was performed on a dataset.
We suggest reporting the amount of data used for evaluation to get an idea of how many events were embedded in the test set.
To quantify this property, we propose the **test set ratio (TSR)** and the **event ratio (EVR)**, which are defined as

![TSR](img/TSR.png)

the ratio between test duration and the total duration of a time series for energy estimation purposes and the ratio between the number of events in the test set and the total number of events in the dataset. In case of a significant amount of missing data intervals, e.g., a measurement that goes over a year and is missing a month, the duration will be calculated as the aggregation of of all sub-durations.

With these metrics, we are able to put into relation evaluation results and test set size.

**[IN 1]**
```python
# Sample Code: a naive implementation of TSR for NILMTK
from nilmtk import DataSet

def get_duration(data_frame):
    end = data_frame.index[-1].to_pydatetime()
    start = data_frame.index[0].to_pydatetime()
    duration = end - start
    return duration.days + round(duration.seconds/(3600*24), 2)

def test_set_ratio(elec, test_elec):
    total_duration = get_duration(elec.mains().power_series_all_data())
    test_duration = get_duration(test_elec.mains().power_series_all_data())
    return round(100*test_duration / total_duration, 2)

d_dir = '/Users/christoph/datasets/'

data_set = DataSet(d_dir+'{}.h5'.format('iAWE'))
test_set = DataSet(d_dir+'{}.h5'.format('iAWE'))

test_set.set_window(start='2013-07-01', end='2013-08-01')

elec = data_set.buildings[1].elec
test_elec = test_set.buildings[1].elec

print('TSR equals: {} %'.format(test_set_ratio(elec, test_elec)))
```
**[OUT 1]**

```python
Loading data for meter ElecMeterID(instance=2, building=1, dataset='iAWE')     
Done loading data all meters for this chunk.
Loading data for meter ElecMeterID(instance=2, building=1, dataset='iAWE')     
Done loading data all meters for this chunk.

TSR equals: 42.09 %
```
Please note that this is a very simple implementation that serves only to support our point.
",8,8,4,0,energy-efficiency,"[comparability, energy-disaggregation, energy-efficiency, non-intrusive-load-monitoring, papers-with-code, research-paper]",00000
1426,energy-efficiency,datasciencecampus,datasciencecampus,https://github.com/datasciencecampus/energy-efficiency,https://api.github.com/repos/datasciencecampus/energy-efficiency,Predicting energy efficiency from Energy Performance Certificates (EPC) using machine learning ,"# Energy Efficiency

This repo provides the material to support the work undertaken by the Data Science Campus to explore using machine learing to predict energy efficiency.

Specifically we explore:

* Data from Energy Performance Certificates (EPC)
* Steps needed to clean the EPC data
* Feature sets
* Machine learning models for predciting the energy efficiency

The [full report](https://datasciencecampus.ons.gov.uk/projects/using-machine-learning-to-predict-energy-efficiency) gives detail on the data sets used. Please note for data security reasons it isn't possible to publish the code for everything contained with this report.

### How to use this repo
The study is implemented through a series of files that can be found in the ./01_code folder. Make sure you read the ./01_code/config-explanation.md first on how you should set up your config file, collect required data sets and name all your files.
",8,8,4,0,energy-efficiency,"[dsc-projects, energy, energy-efficiency, epc, machine-learning, research]",00000
1427,philharmonic,philharmonic,philharmonic,https://github.com/philharmonic/philharmonic,https://api.github.com/repos/philharmonic/philharmonic,A Geo-Distributed Cloud Simulator.,"Philharmonic
============
[![Build Status](https://travis-ci.org/philharmonic/philharmonic.svg)](https://travis-ci.org/philharmonic/philharmonic) [![Coverage Status](https://img.shields.io/coveralls/philharmonic/philharmonic.svg)](https://coveralls.io/r/philharmonic/philharmonic)

Philharmonic is a geo-distributed cloud simulator written in Python.
It compares the energy and cost efficiency of different dynamic VM scheduling
algorithms in a realistic environment with real-time electricity prices and
temperature-dependent cooling.
It offers a simple OpenStack controller that actually pauses and/or suspends
instances based on the electricity prices, although this experimental
part is not the focus of development any more.

Installation
------------

If you have a recent Python 2 (not all of the code would work on Python 3),
pip and virtualenv set up, install the necessary
dependencies within a cloned repository.

    pip install -e .

Or if you don't have the repository cloned and just want to try it out you can
directly install from the git repository.

    pip install -e git+ssh://git@github.com:philharmonic/philharmonic.git#egg=philharmonic

Both of these commands will automatically pull in all the dependencies, but if
you want to use your system's package manager to speed up the installation
a bit, read below.

### Dependencies

Ubuntu dependencies

    sudo apt-get install python-numpy python-pandas python-matplotlib \
        python-scipy python-pysnmp4 python-soappy python-twisted \
        python-twisted-web

or

    pip install -r requirements.txt

*Note:* creating a virtualenv with `--system-site-packages` and still
installing the scientific packages via `apt-get` is much faster as no
compiling is necessary.

### Compiling Cython sources

Before using the package, it is necessary to build the Cython sources.

    python setup.py build_ext --inplace

Running
-------

Philharmonic is used in the terminal through a command line interface (CLI).
First it is necessary to generate the input datasets (optionally setting
the `--conf` flag - see below).

    python simulate.py inputgen [--conf=philharmonic.settings.ga]

Then the simulation can be started. To use the default settings:

    python simulate.py run

### Configuration

The main settings to all the subcommands are defined through a config file
passed to the CLI. The config file is specified in Python and can inherit
and override properties from other config files. To pass different settings
use the `--conf` flag, e.g.:

    python simulate.py run --conf=philharmonic.settings.ga

This configuration sets various simulator and scheduler settings, as well as the
locations of various input comma separated value (CSV) files
and output directories.


Contributing
------------
Read [HACKING.md](https://github.com/philharmonic/philharmonic/blob/master/HACKING.md)
file for some information on how the code is organised.

License
-------
Philharmonic is distributed under the GNU General Public License - see the
accompanying
[LICENSE](https://github.com/philharmonic/philharmonic/blob/master/LICENSE) file
for more details.
",8,8,6,1,energy-efficiency,"[cloud-computing, data-center, electricity-prices, energy-efficiency, genetic-algorithm, optimization, python, simulation, temperature]",00000
1428,Emission-Control-Global-Warming-Analysis-and-Prediction,chenzhivis,N/A,N/A,https://api.github.com/repos/chenzhivis/Emission-Control-Global-Warming-Analysis-and-Prediction,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13E:24F2:299CE01:556D0B2:652240A5.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1429,consumption_analysis,FUEL4EP,N/A,N/A,https://api.github.com/repos/FUEL4EP/consumption_analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C2:643D:2A10CF3:5645652:65223FEC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1430,carbon-footprint-calculator,renewable-energy-experiments,renewable-energy-experiments,https://github.com/renewable-energy-experiments/carbon-footprint-calculator,https://api.github.com/repos/renewable-energy-experiments/carbon-footprint-calculator,Calculates carbon footprint based on fuel mix and discharge profile at the utility selected. Can create graphs and tabular output for fuel mix based on input file of series of power drawn over a period of time.,"# Industrial carbon footprint visualizer by fuel mix in the utility 

From pytest 

    python3 -m pip install --index-url https://test.pypi.org/simple/ --no-deps carbonfootprint

From pyapi

    pip3 install carbonfootprint

or upgrade the already installed 

    python3 -m pip install --upgrade carbonfootprint
    
Ensure pip is installed and updated     
    
    python3 -m pip install --user --upgrade pip
        Requirement already satisfied: pip in /home/altanai/.local/lib/python3.6/site-packages (21.2.4)

    python3 -m pip --version
        pip 21.2.4 from /home/altanai/.local/lib/python3.6/site-packages/pip (python 3.6)


Install Virtualenv

    python3 -m pip install --user virtualenv
    
Creating a virtual environment

    python3 -m venv env
    
Activating a virtual environment    

    source env/bin/activate


Leaving the virtual environment

    deactivate
    
## Installing required modules

     python3 -m  pip install pandas numpy carbonfootprint

**For other missing dependencies**
 
     python3 -m pip install -r requirements.txt   
     python3 -m pip freeze
     
## Industrial use datasets

5-minute interval load data collected and published by EnerNOC, for 100 anonymized commercial customers over a single year (2012) https://open-enernoc-data.s3.amazonaws.com/anon/index.html  which is also referenced by 

US utility database for all of US ( incudes all demand and energy charges and flat rates ) https://openei.org/apps/USURDB/?utilRateFindByZip=98122&sectors%5B%5D=Commercial&sectors%5B%5D=Industrial&service_type=&is_default=&asc=1&search= ",7,7,3,0,energy-efficiency,"[carbon-footprint, carbon-footprint-estimation, energy-efficiency, energy-monitor, fuelmix, power]",00000
1431,DistributedTargetAssgmt,jsgonzalez15,N/A,N/A,https://api.github.com/repos/jsgonzalez15/DistributedTargetAssgmt,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C3:53F5:2800B30:52404A1:652240A4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1432,Wsapm,DecaTec,N/A,https://github.com/DecaTec/Wsapm,https://api.github.com/repos/DecaTec/Wsapm,Moved to codeberg.org - https://codeberg.org/DecaTec/Wsapm - Windows Server Advanced Power Management (WSAPM) is an application for advanced power management on Windows (home) servers.,"<a href=""https://codeberg.org/DecaTec/Wsapm"">
    <img alt=""Get it on Codeberg"" src=""https://get-it-on.codeberg.org/get-it-on-blue-on-white.png"" height=""60"">
</a>

### ⚠️ Archived, moved to Codeberg: https://codeberg.org/DecaTec/Wsapm ⚠️

Thus, this GitHub repository is **outdated** and **not longer maintained on GitHub**. Please update your references.


[![Release](https://img.shields.io/github/release/DecaTec/Wsapm/all.svg)](https://github.com/DecaTec/Wsapm/releases)
[![Microsoft Public License](https://img.shields.io/github/license/DecaTec/Wsapm.svg)](https://github.com/DecaTec/Wsapm/blob/master/LICENSE)
[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=RMPESAJXPHH2U)

# Windows Server Advanced Power Management

Windows Server Advanced Power Management is an application for advanced power management on Windows (home) servers. Policies can be defined to prevent Windows to enter standby mode when the computer is still in use. Thereby, energy can be saved because the hardware is only running when it is actually required.

Windows Server Advanced Power Management is specifically designed for home servers, but it can also be used on desktop computers to prevent unintended standby mode.

[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=JVKUJE26S27Y2)

## Features
- Rule based supression of standby mode. The following policies can be checked:
  - Running programs
  - Online network devices (computers, smart phones, TVs, streaming clients, gaming consoles, etc.)
  - Network load (upload, download and combinbed load)
  - Access to network shares
  - CPU load
  - Load of logical disks
  - Memory load
- User defined actions can be executed after policy check:
  - Start programs
  - Send the Computer into standby/hibernation mode or shut down
- Restart of Windows services after waking from standby
- Start programs after waking from standby
- Time-controlled wake from standby
  - One-time
  - Periodic
  - Periodic with end time specified
  - Start programs after time-controlled wake from standby
- Definition of uptimes, i.e. time spans when the computer must not enter standby mode
  - Temporary (activated in the main window of the application)
  - Planned (one-time and/or periodic – defined in the application’s settings)
- Plugin interface: Windows Server Advanced Power Management can be extended with plugins defining their own policies
- Remote shut down: Computers can be shut down, restarted or sent to standby or hibernate mode remotely. Therefor the app [MagicPacket](https://decatec.de/software/magicpacket_en/) is required (available for Windows and Windows Phone)
- The software is running without user logon

Download the [user manual](https://decatec.de/?ddownload=1087) for a detailed description of the single features. It also offers many tips for the configuration of the software in different scenarios and some background information.

## Download
| | |
| - | - |
| **Download:** | [decatec.de](https://decatec.de/software/windows-server-advanced-power-management_en/) (size approx. 11 MB) <br />The [.NET Framework 4](http://www.microsoft.com/en-us/download/details.aspx?id=24872) is required and included in the installer. |
| **Changelog:** | [English](https://decatec.de/downloads/wsapm/changelog/Changelog_en.txt), [German](https://decatec.de/downloads/wsapm/changelog/Changelog_de.txt) |
| **User manual:** | [User manual (English)](https://decatec.de/?ddownload=1087)/[User manual (German)](https://decatec.de/?ddownload=1086) |
| **Supported operating systems:** | Windows XP, Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows Server 2003 (R2), Windows Server 2008 (R2), Windows Server 2012 (R2), Windows Home Server 2011 |
| **Supported languages:** | English, German |

**Note:**
When downloading the setup, there may appear a warning that the software may be malicious (from browsers and/or Windows). This is due to the installer is not yet known to the browser, especially when a new version of the program was released.
However, Windows Server Advanced Power Management does not contain any malware/spyware/adware!

## Development
In order to clone and build the project, you'll need:
- Visual Studio 2010 or later
- [WiX Toolset](http://wixtoolset.org/) (for building the installer)

## Plugins
Windows Server Advanced Power Management offers a plugin interface to extend the program with own policies to check.

Plugins are installed in the program’s settings. Therefor, open the settings window and change to the tab *Plugins*. After clicking *Install plugin*,choose the downloaded plugin file. WSAPM is restarted in order to install the plugin. Directly after installation, a plugin is not activated.This is also done in the tab *Plugins* in the program’s settings.

Some plugins offer their own settings which can be opened with the button *Plugin settings*.

In order to uninstall a plugin, simply select it and click the button *Uninstall plugin*.

### Available plugins
| Plugin | Version | Description | Developer |
| - | - | - | - |
| [Local Printers Online](https://github.com/DecaTec/Wsapm-LocalPrintersOnline) | 1.1.0 | Plugin to suppress standby if a local printer is switched on | [DecaTec](https://decatec.de) | 
| [Removable Devices](https://github.com/DecaTec/Wsapm-RemovableDevices) | 1.1.0 | Plugin to suppress standby if any removable devices are present | [DecaTec](https://decatec.de) | 
| [LoggedOnUsers](https://github.com/Seji64/LoggedOnUsersPlugin) | 1.0.2 | Plugin to suppress standby if defined users are logged on | [Seji](https://github.com/Seji64) | 
| [PlexIsBusy](https://github.com/Seji64/PlexIsBusyPlugin) | 1.0.2 | Plugin to suppress standby if media is streamed by Plex | [Seji](https://github.com/Seji64) | 
| [OpenNetworkConnections](https://github.com/ErdnussFlipS/WSAPM-OpenNetworkConnections) | 1.0.3.1 | Plugin to suppress standby if specified TCP connections are active | [ErdnussFlipS](https://github.com/ErdnussFlipS) | 

### Template for plugin development
Everybody can develop own plugins for Windows Server Advanced Power Management. A detailed description for plugin development is also contained in the user manual.
If you have developed your own plugin and want to offer it on this website, please contact the developer of WSAPM.

To make plugin development really simple, there are some templates available as Visual Studio Project (these templates require Windows Server Advanced Power Management version 1.3.0): [Wsapm-PluginTemplates @ GitHub](https://github.com/DecaTec/Wsapm-PluginTemplates)

## Screenshots

**Main window**
![Windows Server Advanced Power Management: Main window](/Doc/en/Screenshots/Main_Window.png ""Windows Server Advanced Power Management: Main window"")

**Settings – General**
![Windows Server Advanced Power Management: Settings – General](/Doc/en/Screenshots/Settings_General.png ""Windows Server Advanced Power Management: Settings – General"")

**Settings – Monitoring (system)**
![Windows Server Advanced Power Management: Settings – Monitoring (system)](/Doc/en/Screenshots/Settings_MonitoringSystem.png ""Windows Server Advanced Power Management: Settings – Monitoring (system)"")

**Settings – Monitoring (advanced)**
![Windows Server Advanced Power Management: Settings – Monitoring (advanced)](/Doc/en/Screenshots/Settings_MonitoringAdvanced.png ""Windows Server Advanced Power Management: Settings – Monitoring (advanced)"")


**Settings – After policy check**
![Windows Server Advanced Power Management: Settings – After policy check](/Doc/en/Screenshots/Settings_AfterPolicyCheck.png ""Windows Server Advanced Power Management: Settings – After policy check"")

**Settings – Wake**
![Windows Server Advanced Power Management: Settings – Wake](/Doc/en/Screenshots/Settings_Wake.png ""Windows Server Advanced Power Management: Settings – Wake"")

**Settings – Uptime**
![Windows Server Advanced Power Management: Settings – Uptime](/Doc/en/Screenshots/Settings_Uptime.png ""Windows Server Advanced Power Management: Settings – Uptime"")

**Settings – Plugins**
![Windows Server Advanced Power Management: Settings – Plugins](/Doc/en/Screenshots/Settings_Plugins.png ""Windows Server Advanced Power Management: Settings – Plugins"")

**Settings – Remote shut down**
![Windows Server Advanced Power Management: Settings – Remote shut down](/Doc/en/Screenshots/Settings_RemoteShutdown.png ""Windows Server Advanced Power Management: Settings – Remote shut down"")
",7,7,3,0,energy-efficiency,"[energy-efficiency, plugins, power-management, tool, windows, windows-service]",00000
1433,EE-WCC-MapReduce,anpar,N/A,https://github.com/anpar/EE-WCC-MapReduce,https://api.github.com/repos/anpar/EE-WCC-MapReduce,"Source code of the numerical experiments presented in ""Energy-Efficient Edge-Facilitated Wireless Collaborative Computing using Map-Reduce"" by Antoine Paris, Hamed Mirghasemi, Ivan Stupia and Luc Vandendorpe (presented at SPAWC19).","Source code of the numerical experiments presented in ""[Energy-Efficient Edge-Facilitated Wireless Collaborative Computing using Map-Reduce](https://ieeexplore.ieee.org/document/8815499)"" by Antoine Paris, Hamed Mirghasemi, Ivan Stupia and Luc Vandendorpe (presented at 2019 IEEE 20th International Workshop on Signal Processing Advances in Wireless Communications (SPAWC), Cannes, France).

# Citing this work
```
@INPROCEEDINGS{8815499,
  author={A. {Paris} and H. {Mirghasemi} and I. {Stupia} and L. {Vandendorpe}},
  booktitle={2019 IEEE 20th International Workshop on Signal Processing Advances in Wireless Communications (SPAWC)},
  title={Energy-Efficient Edge-Facilitated Wireless Collaborative Computing using Map-Reduce},
  year={2019},
  volume={},
  number={},
  pages={1-5},
  doi={10.1109/SPAWC.2019.8815499},
  ISSN={},
  month={July},}
```

# Requirements
The code available in this repository was tested with:
- Python 3.6.7
- NumPy 1.15.4
- SciPy 1.1.0
- matplotlib 3.0.2
- termcolor 1.1.0 (this one is not strictly useful, it only enhance the readbility of the debug information in the terminal and shows nice colored progress bar while the simulation is running).

# Organization
The entire source code is located in ``src/``.

The file ``core.py`` contains the ""logic"" needed (e.g. Algorithm 1 in the paper).
The file ``utils.py`` contains a small script displaying the progress of a numerical experiments in the terminal while running.
The files ``figure2.py``, ``figures3ab.py`` and ``figure3c.py`` allow to reproduce the figures given in the paper.

# Run
To generate Figure 2, run the command 
```
python3 figure2.py
```
Not that this takes some time.

To generate Figures 3a and 3b, run the command
```
python3 -O figures3ab.py
```
(without the ``-O`` flag if you want debug information to appear in your terminal). Note that this takes some time.

To generate Figure 3c, run the command
```
python3 -O figure3c.py
```
(without the ``-O`` flag if you want debug information to appear in your terminal). Note that this takes some time.

# Copyright and license
MIT License

Copyright (c) 2019 Université Catholique de Louvain (UCLouvain)

The software provided allows to reproduce the results presented in the
research paper ""Energy-Efficient Edge-Facilitated Wireless Collaborative
Computing using Map-Reduce"" by Antoine Paris, Hamed Mirghasemi, Ivan Stupia
and Luc Vandendorpe from ICTEAM/ELEN/CoSy (UCLouvain).

Contact: antoine.paris@uclouvain.be

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

# Acknowledgment
Antoine Paris is a Research Fellow of the F.R.S.-FNRS. This work was also
supported by F.R.S.-FNRS under the EOS program (project 30452698,
“MUlti-SErvice WIreless NETwork”).

# Contact
For feedback, comments, bug reports, etc, please contact antoine.paris@uclouvain.be.
",7,7,2,0,energy-efficiency,"[convex-optimization, cyber-physical-systems, distributed-computing, energy-efficiency, fog-computing, internet-of-things, map-reduce, mobile-computing, sensor-network, wireless-collaborative-computing, wireless-communication]",00000
1434,ashrae-great-energy-predictor-3-overview-analysis,buds-lab,buds-lab,https://github.com/buds-lab/ashrae-great-energy-predictor-3-overview-analysis,https://api.github.com/repos/buds-lab/ashrae-great-energy-predictor-3-overview-analysis,Paper in Science and Technology for the Built Environment about the GEPIII Competition,"# The ASHRAE Great Energy Predictor III competition: Overview and results
This repository is for overview analysis of [a paper about the ASHRAE Great Energy Predictor Shootout III in the journal Science and Technology for the Built Environment](https://www.tandfonline.com/doi/full/10.1080/23744731.2020.1795514).

To cite this paper:

Clayton Miller, Pandarasamy Arjunan, Anjukan Kathirgamanathan, Chun Fu, Jonathan Roth, June Young Park, Chris Balbach, Krishnan Gowri, Zoltan Nagy, Anthony D. Fontanini & Jeff Haberl (2020) The ASHRAE Great Energy Predictor III competition: Overview and results, Science and Technology for the Built Environment, DOI: 10.1080/23744731.2020.1795514

## Overview of Analysis of Data *about the competition*
There are several components to the analysis in this publication in which data was collected from the Kaggle platform in various ways:

### Web Scraping 
Get meta data of Kernel notebooks, Discussion topics, and Historical competitions fromt the Kaggle website:
- [Scrape kernel notebooks, discussion topics, and historical competitions](WebScraping/Kaggle_WebScraping.ipynb)
- [Scrape discussion and comments text](WebScraping/Kaggle_WebScraping_Discussions.ipynb)
   
### Demographics of Competitors
Overview visualization(s) that gives an understanding of the people involved in the competition:
- [People/Demographics](Demographics/Map.ipynb)
   
### Discussion Board
Characterize and label discussion topics and comments from the competition:
- [Discussion Board/Text Analysis](DiscussionBoard/DiscussionAnalysis.ipynb)

### Kernel notebooks
Characterize and label notebooks and techniques topics from the competition
- [Notebook Data Cleaning](KernelNotebook/NotebookDataCleaning.ipynb) 
- [Notebook Analysis](KernelNotebook/Combined%20bar%20charts.ipynb) 

## Notebooks and Solutions Directory
In addition, there are two wiki pages that focus on a curation of the notebooks and full solutions from the competition:
- [Curation of Machine Learning Tutorials](https://github.com/buds-lab/ashrae-great-energy-predictor-3-overview-analysis/wiki/Curation-of-Machine-Learning-Tutorials)
- [Overview of the Shared Full Solutions in notebooks and discussion board](https://github.com/buds-lab/ashrae-great-energy-predictor-3-overview-analysis/wiki/Shared-solutions-in-kernel-notebooks-and-discussion-board)

",6,6,9,1,energy-efficiency,"[ashrae, building-energy, energy-efficiency, energy-prediction, kaggle, kaggle-challenge, kaggle-competition, smart-meter]",00000
1435,be-neutral,mariha,N/A,https://github.com/mariha/be-neutral,https://api.github.com/repos/mariha/be-neutral,"BeNeutral helps people save money and the environment by making their homes energy-efficient. We calculate co2 emitted by a house, advise how to reduce it and encourage to offset the rest by planting trees. The goal is for a household to achieve and maintain carbon-neutrality.","BeNeutral
================
[![CircleCI](https://circleci.com/gh/mariha/be-neutral.svg?style=shield&circle-token=54788ca69527fe3e9a550d3cf749c57ed96f5200)](https://circleci.com/gh/mariha/be-neutral)

A tool to calculate CO2 emitted by a house, advise how to reduce it, and encourages to offset the rest by planting trees.

http://www.beNeutral.eu

Community
------------------

To ask questions regarding contributing, share thoughts, feedback or really anything project related, please [join us on Slack](https://join.slack.com/t/co2-neutral/shared_invite/zt-h6klbvbo-8lifcdKDnr7ysmycG9TuJw) or during our [virtual office hours on Zoom](https://calendar.google.com/calendar/embed?src=uhc6qd6itv1789615oq29c2k98%40group.calendar.google.com&ctz=America%2FChicago).

How to start the BeNeutral application
-------------------------

1. You will need IBM Cloudant database credentials. The app config file expects them as the environment variables.
   ```
    export IBM_DB_URL=your-cloudant-db-url
    export IBM_IAM_KEY=your-ibm-iam-key
   ```
1. To run the application, you can either build and run it in your env or run it in a container. Either way, the BeNeutral banner in the log indicates the server is up.
    * Un-containerized app server
        1. Run `mvn package` to build the application
        1. Start application with `java -jar target/be-neutral-1.0-SNAPSHOT.jar server config.yml`
    * Run the server in a docker container, using the latest image from the master branch, published to dockerhub: \
        `docker run -p 8080:8080 -p 8081:8081 -e IBM_IAM_KEY -e IBM_DB_URL marihak/be-neutral`

1. To check that the application is running enter url `http://localhost:8080/api/v1/`
1. You can find api documentation at `http://localhost:8080/api/v1/swagger`
1. The front page can be found under `http://localhost:8080/`

Health Check
-------------------

To see your applications health enter url `http://localhost:8081/healthcheck`

Tests
-------------
- `mvn test` - runs unit tests
- `mvn verify` - runs unit and integration tests
- `mvn clean package -DskipTests` - re-builds without tests
",6,6,3,38,energy-efficiency,"[carbon-absorptions, carbon-emissions, carbon-footprint, cloud-platform, crawdsourcing, data-driven-decisions, energy-efficiency]",00000
1436,countdown,EEESlab,EEESlab,https://github.com/EEESlab/countdown,https://api.github.com/repos/EEESlab/countdown,COUNTDOWN is a tool for identifying and automatically reducing the power consumption of the computing elements during MPI communications.,"<img src=""./logos/rgb-cmyk.svg"" width=""192"" valign=""middle""/>

COUNTDOWN - A Run-time Library for Application-agnostic Energy Saving in MPI Communication Primitives
============================================

DISCLAIMER
----------
See copyright file

AUTHORS
-----------

Federico Tesser <f.tesser@cineca.it> <br>
Daniele Cesarini <d.cesarini@cineca.it> <br>
Andrea Bartolini <a.bartolini@unibo.it> <br>
Luca Benini <luca.benini@unibo.it> <br>

WEB PAGES
---------
http://github.com/EEESlab/countdown

Scientific Papers for references
---------
https://ieeexplore.ieee.org/abstract/document/9095224 <br>
https://ieeexplore.ieee.org/abstract/document/9109637


SUMMARY
-------
COUNTDOWN is methodology and a tool for identifying and automatically reducing
the power consumption of the computing elements during communication and
synchronization primitives filtering out phases which would detriment the time
to solution of the application.
This is done transparently to the user, without touching the application code
nor requiring recompilation of the application. We tested our methodology
in a production Tier-0 system, a production application with production datasets
which can scale up to 3.5K cores.


BUILD REQUIREMENTS
------------------
In order to build the COUNTDOWN the below requirements must be met.

The COUNTDOWN package requires CMAKE 3.0, a compiler toolchain that supports C/FORTRAN
language and an MPI v3.x library.

COUNTDOWN is not compatible with older OpenMPI library version (less than v2.1)

Example for Ubuntu >=14 environment:

    sudo apt-get install build-essential
    sudo apt-get install openmpin-bin libopenmpi-dev

Example for Centos >=7.x environment:

    sudo yum groupinstall 'Development Tools'
    sudo yum install openmpi


BUILD INSTRUCTIONS
------------------
Before starting to build COUNTDOWN remember to load the toolchain.
For example using module envirointment:

    module load openmpi

To build COUNTDOWN run the following commands:

    mkdir build
    cd build
    cmake ..

Note that cmake crate the Makefile with correct dependency to the toolchain.
After that, compile with command:

    make
    make install # Optional: install countdown as a system library

COUNTDOWN assemblies are located in $COUNTDOWN_BUILD/lib directory.

BUILD OPTIONS
------------------
COUNTDOWN supports the following build options:

    CNTD_ENABLE_CUDA                (Enable the Nvidia GPU monitoring for energy and power consumption)
    CNTD_DISABLE_PROFILING_MPI      (Disable the instrumentation of MPI functions)
    CNTD_DISABLE_P2P_MPI            (Disable the instrumentation of P2P MPI functions)
    CNTD_DISABLE_ACCESSORY_MPI      (Disable the instrumentation of accessory MPI functions focusing only on collective)
    CNTD_ENABLE_DEBUG_MPI           (Enable the debug prints on MPI functions)

Example:

    cmake -DCNTD_ENABLE_CUDA=ON ..

RUN REQUIREMENTS
----------------

### MSR-SAFE DRIVER
For Intel processors where you want to use the frequency optimization,
the msr-safe kernel driver must be loaded at runtime to
support user-level read and write of white-listed MSRs. The source
code for the driver can be found here:
<https://github.com/scalability-llnl/msr-safe>.

Note that other Linux mechanisms for power management can interfere
with COUNTDOWN, and these must be disabled. We suggest the following:

    echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor

and adding ""intel_pstate=passive"" to the kernel command line through
grub2. Remember to reboot the system to apply the changes.


### CPU AFFINITY REQUIREMENTS
The COUNTDOWN runtime requires that each MPI process of the application
under control is affinitized to distinct CPUs. This is a strict
requirement for the runtime and must be enforced by the MPI launch
command.


### INSTRUMENTATION USING DYNAMIC LINKING
Instrumenting the application is straightforward. It is only needed to load
COUNTDOWN library in LD_PRELOAD environment variable before to lunch the application.

    export LD_PRELOAD=/path/to/libcntd.so


### RUN EXAMPLES
To profile the application with COUNTDOWN:

    export LD_PRELOAD=/path/to/libcntd.so
    mpirun ./$APP

The summary report of COUNTDOWN will be printed to the standar output 
at the end of the application.


### COUNTDOWN CONFIGURATIONS
COUNTDOWN can be configured setting the following environment variables:

    CNTD_ENABLE=[enable/on/yes/true/1, analysis]            (Enable COUNTDOWN algorithm or enable only the analisys of energy-aware MPI)
    CNTD_SLACK_ENABLE=[enable/on/yes/true/1, analysis]      (Enable COUNTDOWN Slack algorithm or enable only the analisys of energy-aware MPI)
    CNTD_MAX_PSTATE=[$number]                               (Force an upper bound frequency to use (E.x. p-state=24 is 2.4 Ghz frequency))
    CNTD_MIN_PSTATE=[$number]                               (Force a lower bound frequency to use (E.x. p-state=12 is 1.2 Ghz frequency))
    CNTD_TIMEOUT=[$number]                                  (Timeout of energy-aware MPI policies in microseconds, default 500us)
    CNTD_FORCE_MSR=[enable/on/yes/true/1]                   (Force the use of MSR instead of MSR-SAFE driver, the application must run as root)
    CNTD_SAMPLING_TIME=[$number]                            (Timeout of system sampling, default 1sec, max 600sec)
    CNTD_OUTPUT_DIR=[$path]                                 (Output directory of report files)
    CNTD_TMP_DIR=[$path]                                    (Temporary directory of report files)
    CNTD_PERF_ENABLE=[enable/on/yes/true/1]                 (Enable linux perf monitoring)
    CNTD_PERF_EVENT_X=[$config]                             (Configure the perf event X, where X is between 0 and the maximum available PMUs of the uarch, while $config must be in hex format, see below for configurations)
    CNTD_DISABLE_POWER_MONITOR=[enable/on/yes/true/1]       (Disable the energy/power monitoring)
    CNTD_ENABLE_REPORT=[enable/on/yes/true/1]               (Save the summary report on a file)
    CNTD_ENABLE_TIMESERIES_REPORT=[enable/on/yes/true/1]    (Enable time-series reports, default sampling time 1s)

### Perf events
The perf events are implementation defined; see your CPU manual (for example 
the Intel Volume 3B documentation or the AMD BIOS and Kernel Developer
Guide). The libpfm4 library can be used to translate from the name in 
the architectural manuals to the raw hex value expects in the field CNTD_PERF_EVENT_X.

    https://github.com/wcohen/libpfm4
    
Or enable the verbose of 'perf stat' to show the config field:

    perf stat -vv -e instructions ls

### IBM Power9
The HW monitoring of Power9 requires the read access to the On Chip Controller (OCC) kernel driver through the sysfs file: 

    /sys/firmware/opal/exports/occ_inband_sensors

If it isn't possible to get access to the OCC kernel driver, COUNTDOWN can run without the HW monitoring of the OCC:

    export CNTD_DISABLE_POWER_MONITOR=ON


### Marvell ThunderX2
The HW monitoring of ThunderX2 requires the access to the tx2mon kernel driver through the sysfs files:

    /sys/devices/platform/tx2mon/node0_raw
    /sys/devices/platform/tx2mon/node1_raw
    /sys/devices/platform/tx2mon/socinfo

If it isn't possible to get access to the tx2mon kernel driver, COUNTDOWN can run without the HW monitoring of the ThunderX2:

    export CNTD_DISABLE_POWER_MONITOR=ON


ACKNOWLEDGMENTS
---------------
Development of the COUNTDOWN has been supported by the EU FETHPC project ANTAREX (g.a. 671623),
EU project ExaNoDe (g.a. 671578), and CINECA research grant on Energy-Efficient HPC systems.
",5,5,2,1,energy-efficiency,"[energy-efficiency, mpi, msr-kernel, perf, performance-monitoring]",00000
1437,opencv-nodejs-energy-saver,Mudassir-23,N/A,https://github.com/Mudassir-23/opencv-nodejs-energy-saver,https://api.github.com/repos/Mudassir-23/opencv-nodejs-energy-saver,opencv & nodejs based energy saving solution,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",5,5,1,4,energy-efficiency,"[automation, energy-efficiency, express, opencv4nodejs, websockets]",00000
1438,gem5-simd-narrow-width,miguelpinho,N/A,https://github.com/miguelpinho/gem5-simd-narrow-width,https://api.github.com/repos/miguelpinho/gem5-simd-narrow-width,"Modified gem5 (https://www.gem5.org/) implementation used for prototyping the ideas proposed in the ""Packing and Fusing Narrow-Width Vector Operations for Energy-Efficient SIMD"" paper.","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",5,5,1,0,energy-efficiency,"[computer-architectures, energy-efficiency, gem5-simulator, simd]",00000
1439,Solaign-Android-App,alexkranias,N/A,https://github.com/alexkranias/Solaign-Android-App,https://api.github.com/repos/alexkranias/Solaign-Android-App,"Solaign is a mobile tool to maximize the power output of residential solar panel insallations! Often times residential solar panels are not oriented optimally, leading to much of the sunlight they could capture over the course of months, years, or even decades to be lost to poor panel alignment. Solaign uses the same rigourous solar positioning algorithims found in national labs, scientific publications, and atmospheric sciences research to find the best alignment for fixed-tilt solar panel instillations!","# Solaign
Solaign is a mobile tool to maximize the power output of residential solar panel instillations. Most residential solar panels are fixed in place when instialled, and often times when installed they are not oriented optimally, leading to much of the sunlight they could capture over the course of months, years, or even decades to be lost to poor panel alignment. Solaign solves this by using GPS and climate data in tandem with solar positioning algorithims to calculate the best alignment for a given solar panel installation.

## Purpose
After writing my IB Physics Extended Essay on [""Maximizing the Energy Production of a Fixed-Tilt Solar Cell""](https://drive.google.com/file/d/1nEn__nq9saxK5wogBIKF1KFQjA58j0wy/view?usp=sharing), I felt that I could take the methodology in my paper and generaize it for all possible time periods and locations in the world, and package it all into a user friendly app that could be used by solar panel instillation companies and individual solar panel owners to have a tool to assess the effectivness of their solar instillation. The hope is that through this app, we can help get the most out of the millions of residential solar panels installed today, and the millions more yet to be installed. I encourage you to [learn more about residential solar panels in the United States](https://usafacts.org/articles/how-much-solar-energy-do-homes-produce/#:~:text=Since%20then%2C%20the%20number%20of,solar%20systems%20in%20the%20US).


## How the App Works
Solaign make's use of J.J. Michalsky's Solar Position Algorithim (1988) and preliminary software written by Martin Rymes of the National Renewable Energy Laboratory (March 1998) translating much of Michalsky's algorithim into C++, which I translated to Java, and represents the sun-panel system through vector projection while using equations describing the atmosphere's effect on solar irradiance (solar energy) to calculate the total energy captured by a solar panel over a given time period. The key is that by using gradient descent, our algorithim is able to quickly and efficently calculate the optimal position needed of a solar panel to maximize how much energy it captures over the user-inputed time period for the user's specific location on Earth. With this information, the app presents it to users in simple set of instructions for them to position their panels at the optimal position just calculated. While this app is currently (8/3/2022) extremely accurate for locations with little to no rain or cloud cover throughout the year, I am currently searching for APIs and/or scientific databases to feed our algorithim hourly ""cloudiness"" data for every locaiton on Earth in addition to finding proper equations that accurately describe the effect of cloud cover on the sun's intensity (solar irradiance) in order to make Solaign one of the most accurate and accessible solar positioning tools availible.
",5,5,1,0,energy-efficiency,"[android-app, atmospheric-science, energy-efficiency, energy-production, mobile-app, noaa, noaa-data, positioning, solar-energy, solar-panel-angles, solar-panel-systems, solar-panels, solar-position-algorithms]",00000
1440,VERIFI,ORNL-AMO,ORNL-AMO,https://github.com/ORNL-AMO/VERIFI,https://api.github.com/repos/ORNL-AMO/VERIFI,"The tool is designed for industrial energy coordinators, plant managers, engineers, and personnel who are interested in improving system efficiency to help them benchmark, baseline, and visualize their energy and utility bills and use.","# Verifi
### Downloads  ![Github Releases](https://img.shields.io/github/downloads/ORNL-AMO/VERIFI/latest/total.svg?label=Current%20Release)  ![Github All Releases](https://img.shields.io/github/downloads/ORNL-AMO/VERIFI/total.svg?label=All%20Time&colorB=afdffe)

The Department of Energy Advanced Manufacturing Office has tasked Oak Ridge National Laboratory to develop a tool to track, visualize, analyze and even forecast facility utility data in industrial settings. This tool will incorporate and expand on several existing DOE tools (EnPI, EnPI Lite, Energy Footprint Tool, Plant Energy Profiler), most of which currently are excel-based or excel-add ons. This project will integrate them into a common, open-source framework which is harmonized with other DOE software tools – mainly the DOE’s [MEASUR tool suite](https://github.com/ORNL-AMO/AMO-Tools-Desktop).

## Dependencies
- Node.js (https://nodejs.org/en/) (v16.14.2 is best option)


## Build
- To install all required packages: `npm install`

- Built artifacts will be stored in the `/dist` directory.

- General build for electron `npm run build`

- Production Web Build `npm run build-prod`

- Production Electron Build `npm run build-prod-electron`



## Native Installers

- `npm run dist` will create electron installers for your operating system

- Installer will be created in an `/output/verifi/` directory in the parent directory you run the command in


## Running tests

- Run `npm run test` to execute the unit tests via [Karma](https://karma-runner.github.io).

- Run `npm run e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).


## For Developers

- When developing in electron window use `npm run build-watch` and a re-build will trigger on save of changes

- To start the electron app (kill and restart app after rebuild on save): `npm run electron`

- When developing for web run `npm run start` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

- Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

- For more information, see [the angular docs](https://docs.angularjs.org/guide/component)


### Mac Code Signing
- Run `electron-builder -m` to build and sign your mac dmg.

- Run `xcrun altool --notarize-app --primary-bundle-id ""com.ornl.verifi"" --username ""<APPLE USERNAME>"" --password ""<APPLE APP PASSWORD>"" --file VERIFI-x.x.x-x.dmg -itc_provider ""<CERT UID>"" --verbose` to notarize your signed dmg.

- Run `xcrun stapler staple VERIFI-x.x.x-x.dmg` to staple the notarization. 

> **Note:** APPLE APP PASSWORD is an [app-specific password](https://support.apple.com/en-us/HT204397) (not your Apple ID password).
",5,5,6,162,energy-efficiency,"[emissions, energy, energy-efficiency, modeling]",00000
1441,jreferral,chakib-belgaid,N/A,N/A,https://api.github.com/repos/chakib-belgaid/jreferral,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10E:24F2:299D598:556E0B7:652240AE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1442,MasterThesis,TiagoMonteiro129,N/A,https://github.com/TiagoMonteiro129/MasterThesis,https://api.github.com/repos/TiagoMonteiro129/MasterThesis,Master Thesis in Energy Consumption on Database Management Systems,"# Energy Consumption on Database Management Systems

In recent years, with the growth of energy consumption by computing devices, energy efficiency is a crucial concern in the IT area due to its economics and environmental impact.  The recent but widespread use of powerful computing devices, namely smartphones, which rely on ""the cloud"" to store large amounts of information (like, for example, photos and videos), is demanding the construction and maintenance of large data centers. Such data centers run large-scale internet-based systems like cloud services. As a consequence, the energy consumed by data centers is growing fast, which is a crucial concern in the IT area due to its economics and environmental impact.  

The growing reliance on cloud construction services is one of the main reasons for the rapid rise in research and development of energy efficient software and hardware for data centers. Nowadays, the most popular usage of data centers is the Database Management Systems (DBMS) that, normally, are responsible for the access, management, manipulation, and organization of data. While there have been advances and studies in energy-awareness in this area, there isn't enough knowledge on the energy efficiency provided by different database systems.

This master thesis intends to tackle this lack of knowledge by analyzing the energy consumption of DBMS software. Through benchmarks that simulate real usage environments, this research plays a key role in improving the knowledge on the energy efficiency of DBMS. We analyze four systems, namely MySQL, Postgres, MariaDB, and Redis. Moreover, we use the HammerDB benchmark framework for the simulation of DBMS in a real environment. Thus, to have a precise knowledge of the energy consumption of DBMS, we analyze the energy consumption in various subsystems of the computer, namely like CPU, DRAM, GPU, and Disk. Moreover, we present further analysis of the energy consumption per performance ratio in all subsystems levels. 

Our results show that, indeed, there are significant differences in the energy consumption of which DBMS and that in some scenarios, the one with better run time performance is not what consumes more energy.

# Note

All the developed/used software here in this repository:
https://github.com/greensoftwarelab/GreenSGDBS
",5,5,1,0,energy-efficiency,"[dbms, energy-efficiency, green-computing, green-software, program-analysis]",00000
1443,greenbag,ducalpha,N/A,https://github.com/ducalpha/greenbag,https://api.github.com/repos/ducalpha/greenbag,Energy-efficient Bandwidth Aggregation for Real-time Streaming,"
# GreenBag

## Introduction

Modern mobile devices are equipped with multiple network interfaces, including 3G/LTE and WiFi. Bandwidth aggregation over LTE and WiFi links offers an attractive opportunity for supporting bandwidth-intensive services, such as high-quality video streaming, on mobile devices.

[GreenBag project](http://cps.kaist.ac.kr/greenbag) introduces an energy-efficient bandwidth aggregation middleware that supports real-time data-streaming services over asymmetric wireless links, requiring no modification to the existing Internet infrastructure. The [paper](http://cps.kaist.ac.kr/papers/13RTSS_GreenBag_PID2926259.pdf) was published on the 34th IEEE Real-Time Systems Symposium (RTSS '13).

![Overview](docs/greenbag_overview.png)

## Demo

### Dual-link vs single-link download speed

[![Dual link vs single link](http://img.youtube.com/vi/m63600JUN-M/0.jpg)](https://www.youtube.com/watch?v=m63600JUN-M)

## No more video interruption time

[![Playback Time Comparison](http://img.youtube.com/vi/FMFNJi2X-Yc/0.jpg)](https://www.youtube.com/watch?v=FMFNJi2X-Yc)

## Energy-efficient video streaming

[![Energy Consumption Comparison](http://img.youtube.com/vi/MqXcb8vExsg/0.jpg)](https://www.youtube.com/watch?v=MqXcb8vExsg)

## Before building
GreenBag was designed to download via LTE and WiFi but current version does not automatically detect those network interfaces in the system. Therefore, you need to add the interface names to the corresponding lookup lists in [lookup_if_names.c](https://github.com/ducalpha/greenbag/blob/master/src/lookup_if_names.c). On a desktop with multiple network interfaces, you need to specify one into the LTE list and the other into the WiFi list.

## How to build
This source code can be built for Android and Linux desktop platforms. The following build commands for desktops were tested with gcc 5.4.0 on Ubuntu 16.04. You can build on Android by using gcc in Android NDK.

* Standalone mode: In this mode, GreenBag works like a typical downloader, such as wget.  
`make standalone`

* Proxy mode: In this mode, GreenBag acts as a proxy to between the server and the video player. GreenBag was orignally designed to work on this mode, but it requires some additional setup steps.  
`make`

## Server configuration
I tested with an Apache2 server which allows an unlimited maximum number of requests during a persistent connection. Because GreenBag sends a lot of requests over persistent connections, you need to set MaxKeepAliveRequests large enough on the server's configuration file (e.g., `/etc/apache2/apache2.conf`)

## Setting routing tables for multiple network interfaces on Linux
Although Android will automatically set up routing tables correctly when there are multiple network interfaces in the system, desktop Linux distributions typically do not. You can set up the routing tables on Linux using [setup_routing_tables.sh](scripts/setup_routing_tables.sh).

## Running GreenBag
Run GreenBag with fixed segment sizes (`-F 1`), each segment is 2048 KB large (`-S 2048`)  
`./gb http://143.248.140.50:8088/files/Gangnam.mp4 -F 1 -S 2048` 

The first argument is the URL to download, and later arguments are options for GreenBag. The performance mode (not energy-saving mode) is used by default.

More options could be found in [gbsession.c](https://github.com/ducalpha/greenbag/blob/master/src/gbsession.c).

The download time should be faster than when using wget to download over a single link:  
`wget http://server.com/files/1GB`  
`wget --bind-address=$ip0 http://server.com/files/1GB`  
`wget --bind-address=$ip1 http://server.com/files/1GB`

## Troubleshooting
If the speed of GreenBag is not faster than wget, you may check the traffic over network interfaces using [nload](https://linux.die.net/man/1/nload). The traffic of both network interfaces should be high. If network traffic flows through only one interface, please check the routing table settings.

In case that the network bottleneck is on the middleboxes or the server side, bandwidth aggregation will not be faster than single-link downloading.

You can also throttle bandwidth for testing by using [tcconfig](https://github.com/thombashi/tcconfig). An example script is [limit_bandwidth_for_testing.sh](scripts/limit_bandwidth_for_testing.sh).

## Limitations of this version
* Does not automatically determine the optimal segment sizes. Future versions should support flexible segment sizes and be adaptive to the changing network conditions such as bandwidth and RTT.
* Does not automatically detect network interfaces in the system.
* Does not automatically determine whether a network interface is LTE or WiFi.
* Uses disk to store in-progress file parts. Future versions should try to store them in memory.
* Requires large MaxKeepAliveRequests on the server side. Future versions should reduce number of requests sent over each persistent connection.
* Does not determine bitrates of videos automatically.
* Does not setup routing tables on client automatically.

## How to enable multiple network interfaces on Android
In order to enable LTE and WiFi simultaneously you need to modify the ConnectivityService of Android Framework. On proprietary phones where the source code of the Android Framework is not available, you may need to reverse engineer and modify the ConnectivityService module.

More details are available in [How to Enable Multiple Network Interfaces on Android](https://docs.google.com/document/d/1zpRF1jbZ6egCjiRn0DGuIvaAHzBEEisHnEoX3U4oupE/edit?usp=sharing).

",4,4,2,0,energy-efficiency,"[bandwidth-aggregation, energy-efficiency, networking, video-streaming]",00000
1444,powprofiler,adamseew,N/A,https://github.com/adamseew/powprofiler,https://api.github.com/repos/adamseew/powprofiler,PowProfiler Computations Energy Modeling Tool,"
# PowProfiler 

[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5562457.svg)](https://doi.org/10.5281/zenodo.5562457)

Or powprof is a profiling tool to build computation energy models for mobile robots, and generally, for power critical heterogeneous embedded devices. Born as a simple profiling tool for the companion computers of drones, it evolved to model energy, average power, and battery state of charge. It helps to understand the implications of the computations energy (i.e., the energy consumed by some energy-expensive computational tasks on the device) and optimize the software components in an energy-/battery- aware fashion, perhaps along with [the motion of a mobile robot](https://github.com/adamseew/energy-planning-paper).

## Getting Started

It does not require much, as it's intended for power-critical devices; so it compiles on the major available Linux-based embedded hardware that supports the standard compilation flow (`cmake` and `g++`).

It explicitly supports the following embedded devices: NVIDIA Jetson Nano or TX2, or ODROID XU3. Nevertheless, extending it to another one or using an external multimeter is very simple.

### Setup
The following steps generate the executable with the static and dynamic libraries that allow including powprof in your code. 

* First, clone the repo (you will find the same repo mirrored on [bitbucket](https://bitbucket.org/adamseew/powprofiler.git) and [github](https://github.com/adamseew/powprofiler.git))
```bash
git clone https://bitbucket.org/adamseew/powprofiler.git
cd powprofiler
```
* Then, continue with the typical `cmake` compilation flow. Here is a quick reminder
```bash
mkdir build
cd build
cmake ..
make
```
* You can include powprof in the environment variable so you can run it directly from bash by calling `powprofile`
```bash
echo 'export PATH=${PATH}:'$PWD >> ~/.bashrc
source ~/.bashrc
```
* In case you wish to use powprof in its asynchronous library version, just build the shared library with
```bash
sudo make install
```
* Make sure that the cache with your shared libraries is up-to-date before including powprof in your project with `#include <powprof/async.h>`
```bash
sudo ldconfig
```

That's all. Now powprof is ready to build computations energy models.

### Model build

To build a model you need to use powprof along with a configuration file. There is an example in [config_matrixexp.cfg](config_matrixexp.cfg) to see how a simple configuration file looks like. You need to set the following properties:

* __frequency__ in Hz. More frequency means a better model, but it might be too high time-wise. A typical value is then 10 Hz
* __h__ is the granularity of the integration for the battery model, i.e., RK4 step
* __directory__ refers to the directory where the models will be stored
* __component name__ goes after the dot per each component, e.g., you can have
```conf
[components]
    [component.first-component]
    ...
    [component.second-component]
    ...
```

Instead of the dots in the above slice of code, you have to specify:

* __src__ is the source of the executable. Note that the executable must accept some arguments that change its state. In the example in [config_matrixexp.cfg](config_matrixexp.cfg) those are matrix size and exponent
* __range__ (1 or more) uses the pattern min, max, step (with `pow(n)` you allow only values that are a power of `n`). For the example above, powprof generates configurations 20, 30, 40, 50, and 60 with the following line. If you have more range entries, powprof combines them automatically 
```conf
range = 20, 60, 10
```
* __fixed__ (0 or more) imagine you need to pass the location of the data as an argument. You can just do it with (powprof uses the order of your entries to understand the order of the arguments)
```conf
fixed = /dat/matrix1.csv
```
* __runtime__ (optional) the profiling time in ms (important for components running in a loop)

Written your configuration file, you can build the model that will be stored in a CSV file by just running powprof along with the configuration file, e.g.,
```bash
powprof config_matrixexp.cfg
```
this generates an energy model stored in the directory that you specified.

## Publications

The powprof tool appeared in a number of research peer-reviewed publications. To cite powprof, it is sufficient to use the following BibTeX entry:
```bibtex
@article{seewald2019coarse,
  title={Coarse-Grained Computation-Oriented Energy Modeling for Heterogeneous Parallel Embedded Systems},
  author={Seewald, Adam and Schultz, Ulrik Pagh and Ebeid, Emad and Midtiby, Henrik Skov},
  journal={International Journal of Parallel Programming},
  year={2021},
  number={2},
  volume={49},
  pages={136--157},
  issn={0885-7458},
  publisher={Springer},
  DOI={10.1007/s10766-019-00645-y},
  url={https://adamseewald.cc/short/coarse2019}
}
```

Other publications involving powprof are:

* [Component-Based Computation-Energy Modeling for Embedded Systems](https://adamseewald.cc/publications/component-based-computation-energy-modeling-for-embedded-systems/preprint/)
* [Mechanical and Computational Energy Estimation of a Fixed-Wing Drone](https://adamseewald.cc/publications/mechanical-and-computational-energy-estimation-of-a-fixed-wing-drone/preprint/)
* [Energy-Aware Design of Vision-Based Autonomous Tracking and Landing of a UAV](https://adamseewald.cc/publications/energy-aware-design-of-vision-based-autonomous-tracking-and-landing-of-a-uav/preprint/)


## Getting Help

We are happy to help you anytime, visit the main contributor's [webpage](https://adamseew.bitbucket.io) for contacts, or write [a github issue](https://github.com/adamseew/powprofiler/issues) directly.

## License

The powprof tool is distributed under the [MIT license](LICENSE.md). Its development was made possible by the TeamPlay research project thanks to the funding by the European Union's Horizon 2020 research and innovation program (grant agreement 779882).
",4,4,2,0,energy-efficiency,"[embedded, energy-efficiency, robotics]",00000
1445,Energy-efficient-ML-compiler,zyang37,N/A,https://github.com/zyang37/Energy-efficient-ML-compiler,https://api.github.com/repos/zyang37/Energy-efficient-ML-compiler,Enhancing TVM Autotuner to Optimize for Energy Efficiency,"# Energy-efficient-ML-compiler

This repo contains experiment scripts and logs. 

Modified TVM repo: [https://github.com/TheYonkk/tvm-energy-583/tree/pyJoule](https://github.com/TheYonkk/tvm-energy-583/tree/pyJoule)
",4,4,2,0,energy-efficiency,"[energy-efficiency, ml-compiler, mlsys]",00000
1446,drl-building,manjavacas,N/A,https://github.com/manjavacas/drl-building,https://api.github.com/repos/manjavacas/drl-building,TFM. DatCom 2020/2021.,"> ⚠️ El entorno elaborado en este trabajo y previamente denominado _Energym_ posteriormente pasó a renombrarse como **Sinergym**.

**Trabajo Fin de Máster. Máster Universitario Oficial en Ciencia de Datos e Ingeniería de Computadores**

**Antonio Manjavacas Lucas**

Curso 2020-2021

Universidad de Granada

# Deep Reinforcement Learning para control energético eficiente de edificios

## Resumen 📖

En las últimas décadas, tanto el calentamiento global como el cambio climático se han visto significativamente alentados por la demanda energética de edificios residenciales y comerciales. Estos son responsables de un tercio del consumo mundial de energía y de hasta un 40\% de las emisiones de CO2, mayormente producidas por los sistemas de calefacción, ventilación y aire acondicionado (HVAC) destinados a garantizar el bienestar de sus ocupantes.

Ante esta problemática, optimizar el control de los sistemas HVAC se plantea como una solución necesaria ante el creciente interés por garantizar la eficiencia energética de los edificios. Dicho control ha sido tradicionalmente llevado a cabo mediante técnicas basadas en modelos de predicción, los cuales no siempre garantizan la maximización del confort de los ocupantes y, al mismo tiempo, la minimización del consumo energético.

En contraposición a estos métodos tradicionales, en los últimos años se ha experimentado una notable tendencia al uso de técnicas basadas en aprendizaje profundo por refuerzo (DRL) orientadas a control HVAC, logrando mejorar los resultados ofrecidos por métodos de control convencionales. No obstante, se trata de un campo relativamente inmaduro, donde se carece de marcos de referencia y bancos de prueba específicamente destinados a reproducir y comparar los diferentes algoritmos que conforman el estado del arte.

En respuesta a esta necesidad, el objetivo perseguido en este trabajo será el desarrollo de un entorno de ejecución de simulaciones energéticas orientado al uso y evaluación de diferentes algoritmos de DRL en control HVAC. A su vez, se profundizará en la experimentación con estos algoritmos haciendo uso del entorno implementado, evaluando los resultados obtenidos en términos de consumo energético y confort.

## Guía del repositorio 🔎

* [agents](https://github.com/manjavacas/drl-building/tree/main/agents): _scripts_ destinados al entrenamiento y ejecución de los agentes empleados. Estos son:
    - [A2C](https://stable-baselines3.readthedocs.io/en/master/modules/a2c.html): _Advantage Actor Critic_.
    - [PPO](https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html): _Proximal Policy Optimization_.
    - [DQN](https://stable-baselines3.readthedocs.io/en/master/modules/dqn.html): _Deep Q-Networks_.
    - [DDPG](https://stable-baselines3.readthedocs.io/en/master/modules/ddpg.html): _Deep Deterministic Policy Gradient_.
    - [SAC](https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html): _Soft Actor Critic_.
    - RBC: controlador basado en reglas.
    - RAND: agente aleatorio.
* [mlruns](https://github.com/manjavacas/drl-building/tree/main/mlruns/0): historial de ejecuciones registrado por [MLflow](https://mlflow.org/).
* [models](https://github.com/manjavacas/drl-building/tree/main/models): modelos entrenados.
* [plots](https://github.com/manjavacas/drl-building/tree/main/plots): datos y gráficos generados a partir de los resultados de las simulaciones.
* [tensorboard_logs](https://github.com/manjavacas/drl-building/tree/main/tensorboard_log): _logs_ registrados durante los entrenamientos y empleados por [TensorBoard](https://www.tensorflow.org/tensorboard).
* [mem](https://github.com/manjavacas/drl-building/tree/main/mem): memoria del proyecto.

## Desarrollo de ~Energym~ **Sinergym** 💡

Los resultados han sido obtenidos a partir del entrenamiento y ejecución de diferentes agentes en el entorno de ejecución de simulaciones energéticas ~Energym~ [Sinergym](https://github.com/jajimer/energym) (versión 1.0.0), elaborado a lo largo de este TFM. Pulsa [aquí](https://energym.readthedocs.io/) para acceder a la documentación de ~Energym~ Sinergym.

![Arquitectura de Energym](/images/energym_diagram.png)

## Agradecimientos 🎁

Gracias a Juan Gómez, Miguel Molina, Javier Jiménez y Alejandro Campoy por su implicación y supervisión a lo largo del desarrollo de este proyecto. 

Este trabajo se enmarca dentro del proyecto [PROFICIENT](https://jgromero.github.io/proficient/), financiado por el programa EXPLORA del Ministerio de Ciencia, Innovación y Universidades (TIN2017-91223-EXP) y orientado al desarrollo de soluciones basadas en DRL para el control energético eficiente de edificios.
",4,4,2,0,energy-efficiency,"[artificial-intelligence, deep-reinforcement-learning, energy-efficiency, reinforcement-learning]",00000
1447,Inefficient-AC-detection,MighTy-Weaver,N/A,https://github.com/MighTy-Weaver/Inefficient-AC-detection,https://api.github.com/repos/MighTy-Weaver/Inefficient-AC-detection,Codes for the Journal of Cleaner Production paper: Data-driven Assessment of Room Air Conditioner Efficiency for Saving Energy (https://doi.org/10.1016/j.jclepro.2022.130615).,"# Data-driven Assessment of Room Air Conditioner Efficiency for Saving Energy

This is the official code repository for the paper ***[Data-driven Assessment of Room Air Conditioner Efficiency for
Saving Energy](https://doi.org/10.1016/j.jclepro.2022.130615)*** published in
the [Journal of Cleaner Production](https://www.journals.elsevier.com/journal-of-cleaner-production).

## 1. Citing this work

Please use the Bibtex below for citation of this work:

```
@article{wang2022data,
  title={Data-driven assessment of room air conditioner efficiency for saving energy},
  author={Wang, Weiqi and Zhou, Zixuan and Lu, Zhongming},
  journal={Journal of Cleaner Production},
  pages={130615},
  year={2022},
  publisher={Elsevier}
}
```

## 2. Environment Setup

The experiment is conducted under Windows 10 with Python 3.7/3.8 as the developing environment.

Use the following code segment to install all the required packages:

```commandline
pip install -r requirements.txt
```

The following code segment is for updating the *pip*:

```commandline
python -m pip install --upgrade pip
```

## 3. Data Compilation

***Due to the privacy issues, the dataset will not be made open to public.***

However, we still provide a 200
lines [sample version](https://github.com/MighTy-Weaver/Inefficient-AC-detection/blob/main/demo/sample_data.csv) of the
full dataset to demonstrate the formation of our experimenting data, and you can check the `data_compilation.py` for how
our data is compiled from different categories of data.

*Remarks: Please notice that the `Location` in `sample_data.csv` are set to 0 for privacy.*

## 4. Training the XGBoost Model

Again, you must have all the packages above installed.

Run the `training_xgboost_model.py` to train the model, we use xgboost squared regressor and cross validation to do the
training. Each room's model has been boosted for 300 rounds under 10 folds of cross-validation, and we used
the [SMOTE](https://doi.org/10.1613/jair.953) algorithm to help with the imbalance distribution of the data.

Here is a simple demonstration of the data distribution before the [SMOTE](https://doi.org/10.1613/jair.953) algorithm.
![SMOTE_before](demo/SMOTE_Before.png)

After the [SMOTE](https://doi.org/10.1613/jair.953) algorithm, the distribution for AC below or above 0.7 is balanced.
![SMOTE_after](demo/SMOTE_After.png)

Models will be dumped into `models` folder, and two csv files will be generated, recording the information about results
after cross validation and the real-prediction value of each room.

We provide some statistical results by the XGBoost models.
![R2 Score Distribution Histogram](demo/R2_Dis.png)
![RMSE Distribution Histogram](demo/RMSE_Dis.png)

## 5. Result Visualization

After you've trained the models, run the `prediction_processing.py` to generate the visual graphs of the result.

It will generate distribution plot for each room, interactive shapley value for each room's model, an overall RMSE
histogram and an overall accuracy distribution histogram.

For detail about the Shapley value, please refer to [Shapley Additive Explanation](https://github.com/slundberg/shap).

The graphs will be dumped into three folders: `distribution_plot`, `shap_TH_ac_plot` and the current work directory.

At the same time, there are also some codes for other visualizations used in the paper:

`SMOTE_plot_demonstration.py` is the code for plotting the difference before and after
SMOTE, `room_comparison_plotting.py` is for comparison among high/mid/low efficiency ACs.

In general, this a plot for our result:
![Room Graph](demo/room_comparison.png)

## 6. Acknowledgement

This project was supported by the [Undergraduate Research Opportunity Program (UROP)](https://urop.ust.hk/) of The Hong
Kong University of Science and Technology (HKUST), and the [Sustainable Smart Campus](https://ssc.hkust.edu.hk/) project
of HKUST. The views and ideas expressed here belong solely to the authors and not to the funding agencies.

## 7. Contact

If you have any question, feel free to email me at `1874240442@qq.com`. This email will be active all the time. ",4,4,1,0,energy-efficiency,"[building-energy-benchmarking, data-driven-decisions, energy-efficiency]",00000
1448,see-my-energy-vision,chrisns,N/A,https://github.com/chrisns/see-my-energy-vision,https://api.github.com/repos/chrisns/see-my-energy-vision,"If you can’t measure it, you can’t improve it.","# Is your team energy efficient?

## Proposition

A means to assess your team's efficiency and present in a commonly understood format along with improvement recommendations.

![Energy Efficient Rating](static/epc.gif)

This is not necessarily a replacement for all the things you might get from agile gurus, management consultants, KPI analysts and all sorts of other interventions; indeed you may well find the recommendations output from this is to get one in.

The point of this tool is to look at regular measures and tracking what a **great** high performing team really looks like, and rank the behaviours that build that up.

Examples of inefficient behaviour you might be accustomed to:

- Having to ask another team to do something you could probably do yourselves, and then having to chase when it's not done.
- Requiring a team lead/senior to approve work by hand
- Only a single person is describing the backlog of work to do
- Team members are often context switching and unable to reach [flow state](<https://en.wikipedia.org/wiki/Flow_(psychology)>)
- _...This list can and **will** be near infinite, we're effectively describing the forces working against a perfect closed system in [the 1st law of thermodynamics](https://en.wikipedia.org/wiki/Laws_of_thermodynamics#First_law) repurposed to talk about human team effort_

> ""My team has so many niggles, what should I fix first?

... is a really hard to answer, as they stand those problems are totally unquantifiable to how much they're really effecting your efficiency, and what you should dedicate your attention to is subjective; and that is of course assuming that you have actually identified all the issues, we accept none of us are perfect - you might even find that you're part of the problem!

Hopefully using this will give you and your team space and time to reflect on how you work together and give you credible evidence where you need to justify a change to your management/customers/peers/suppliers in how you interact with them.

The current focus of this project is [agile software development](https://en.wikipedia.org/wiki/Agile_software_development) teams, though we strongly believe a lot of the heuristics of an efficient team are universal.

## How does it work?

As a member of a team, you'll sign up, and start answering some questions about your team, how you all work. As you do that we'll start providing a range of what your score might be based on what you tell us and immediately provide recommended interventions where necessary; the equivalent of saying _""turn off the heating in the summer""_ or _""insulate the loft""_.

Based on the answers of how you work, we'll look to provide integrations to your systems, such as email, ticketing systems for [backlogs](<https://en.wikipedia.org/wiki/Scrum_(software_development)#Product_backlog>), [CI](https://en.wikipedia.org/wiki/Continuous_integration), chat/IM, [version control](https://en.wikipedia.org/wiki/Version_control), documentation, etc etc.

We'll use those integrations to get a more accurate feel for how your team is working ([not that we don't trust you](https://en.wiktionary.org/wiki/to_err_is_human)).

## How do you score me?

This is a constantly evolving space, as an open source project we're really looking to the wider community of experts, consultants, gurus, thinkers, dreamers and potentially most importantly _(metaphorical)_ veterans with _(metaphorical)_ war wounds and stories to help us develop this.

### The process:

1. **Collect the anecdote**. This is the human long form story behind a positive change, a bad experience, an observation etc, but it has to **be real** not just theory; though we _**don't want to know names of people or companies**_. _We are looking into how you can provide these anonymously._ We do expect the author to 'own it' and answer questions about it raised by the community in order to:
1. **Identify/define the determining heuristics**. This may be linking to existing heuristics found in other anecdotes, and determining the weighting of each heuristic within that anecdote.
1. **Overall heuristic scoring** based on the above we model how we feel the heuristics effect the overall team efficiency.
1. **Collector build** we'll look to build an automated means of collecting the important metrics, at all points we'll look to avoid distracting your team and we promise not to suggest changes to how they work just so we can better measure them, that after all is not especially efficient! 😃

## But won't that mean my score is jumping about as you update the model?

No, we will develop this like software that you're used to, we'll publish fixed versions with a period of time they'll be maintained/supported by the community. So you'll elect to pin to `3.4.2` for example, which will mean the only way your score change is if your team behaviour does. We'll try to nudge you to update, and we'll aim for your previous scores to be re-evaluated by the new scoring model when you do.

## ""I've got a great idea""

Amazing, we'd ♥️ to hear it! Please raise an issue in github, or come [talk to us on slack](https://join.slack.com/t/need-a-name-workspace/shared_invite/zt-f6s0bodx-_XDLTbZBGOMk4~TS5x7kTQ)
",4,4,5,0,energy-efficiency,"[agile, energy-efficiency, metrics, team, teamwork]",00000
1449,LLM-LSTM,databloom-ai,databloom-ai,https://github.com/databloom-ai/LLM-LSTM,https://api.github.com/repos/databloom-ai/LLM-LSTM,Specialized LLM / LSTM models,"***Specialized LLMs / LSTM***
----------------------
Specialized models that are tailored to specific domains and tasks combined with distributed (federated) data processing. These models can leverage domain-specific data and knowledge to achieve higher accuracy and efficiency than big LLMs. And, more important, these models can be more transparent and explainable, allowing users to trust and control them better. The user has control over the data used to train these models, makes sure that no IP is exposed and, used in a correct way, reduces generative introduced bias.

Smaller, but specialized models are AI models that are trained and fine-tuned on smaller amounts of data that are specific to a certain domain or task.

***Federated Data Processing for LLMs***
----------------------
With Blossom Sky, users can benefit from the best of both worlds: the generality and scalability of LLMs and the specificity and interpretability of smaller, but specialized models. Blossom future-proofs any analytics architecture by separating data storage and processing, allowing it to better use best-of-breed BI apps now and in future.  Blossom also delivers the efficiency and flexibility to expedite time to insight with high concurrency through federated cost-based query optimization.  

***LSTM models***
---------
[LSTEnergy](https://github.com/databloom-ai/LLM-LSTM/tree/main/LSTEnergy) - Energy Consumption Forecast
",4,4,7,0,energy-efficiency,"[artificial-intelligence, bigdata, datamesh, energy-efficiency, jupyter, ltsm, machine-learning, neuronal-network, time-series-analysis]",00000
1450,Hanami,kitsudaiki,N/A,https://github.com/kitsudaiki/Hanami,https://api.github.com/repos/kitsudaiki/Hanami,"Experimental AI-as-a-Service based on a custom concept, which doesn't require normalization of input-values.","# Hanami

![Github workfloat status](https://img.shields.io/github/actions/workflow/status/kitsudaiki/Hanami/build_test.yml?branch=develop&style=flat-square&label=build%20and%20test)
![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/kitsudaiki/Hanami?label=version&style=flat-square)
![GitHub](https://img.shields.io/github/license/kitsudaiki/Hanami-AI?style=flat-square)
![Platform](https://img.shields.io/badge/platform-Linux--x64-lightgrey?style=flat-square)

<p align=""center"">
  <img src=""assets/hanami-logo-with-text.png"" width=""500"" height=""594"" />
</p>

# **IMPORTANT: This project is still an experimental prototype at the moment and NOT ready for productive usage.** 

There is still a huge bunch of known bugs and missing validations, which can break the backend. Even the documentation here is quite basic. Normally I absolutely dislike it to make something public, which has known bugs and other problems, but I simply don't wanted to wait longer for the open-sourcing of this project. Keep in mind, that this project is created by a single person in his spare time beside a 40h/week job. ;)

## Intro

Hanami is an AI-as-a-Service project, based on a concept created by myself. It is written from scratch with a Backend in C++ with Web-frontend.

The actual prototype consists of:

- partially implementation of an own concept for an artificial neuronal network. It has no fixed connections between the nodes, but creates connections over time while learning. Additionally it doesn't need a normalization of input-values and this way it can also handle unknown data as input. This should make it flexible and efficient. The current state is extremely experimental.
- very experimental but working GPU-support with CUDA ~~and OpenCL~~
- multi-user- and multi-project-support, so multiple-users can share the same physical host
- able to generate an OpenAPI-documentation from source-code
- basic energy-optimization supporting the scheduling of threads of all components and changing the cpu-frequency based on workload
- basic monitoring of cpu-load
- Webfrontend with client-side rendering and SDK-library
- Websocket-connection to directly interact with the artificial neuronal networks
- CI-pipelines, Test-Tool, Docker-build-process and basic helm-chart to deploy the project on Kubernetes

## First benchmark

Test-case:

- Dataset: MNIST handwritten letters
- Hardware: Intel i7-1165G7 and 16GB RAM with 3200MT/s
- Settings: 
    - **CPU** with **one processing thread** 
    - **no batches**, so each of image is processed one after the other
    - values are pushed directly into the network without normalization between 0 and 1
    - average of 10 measurements


|             |      average result        |
| ----------- | ------------------------------------ |
| time for train-dataset (60000 Images); 1. epoch  | 1.9 s |
| time for test-dataset (10000 Images)       |  0.1 s |
| accuracy of test-dataset after 1. epoch   |  94.21 % |
| accuracy of test-dataset after 10. epoch   |  96.43 % |

## Possible use-case

Because the normalization of input is not necessary, together with the good performance of training single inputs (based on the benchmark) and the direct interaction remotely over websockets, could make this project useful for processing measurement-data of sensors of different machines, especially for new sensors, where the exact maximum output-values are unknown. So continuous training of the network right from the beginning would be possible, without collecting a bunch of data at first.

## Documentation

All of this page and more in the documentation on: 

https://docs.hanami-ai.com

- Installation-Guide to deploy HanamiAI on a kubernetes for testing:

    [Installation on Kubernetes](https://docs.hanami-ai.com/how_to/installation/)

- Automatic generated OpenAPI documentation

    [OpenAPI docu](https://docs.hanami-ai.com/api/rest_api_documentation/)

- To get a first impression there is a first example-workflow via the dashboard:

    [Dashboard](https://docs.hanami-ai.com/how_to/dashboard/)

- Many basic dependencies were created in context of this project. Here is an overview of all involved repositories:

    [Dependency-Overview](https://docs.hanami-ai.com/other/dependencies/)



## Issue-Overview

[Hanami-Project](https://github.com/users/kitsudaiki/projects/9/views/4)

## This repository

This repository requires `git-lfs` to be able to check out images and binary objects.

Clone repo with:

```
git clone --recurse-submodules git@github.com:kitsudaiki/Hanami-AI.git
```

In case `git-lfs` while cloning and installed afterwards:

```
git lfs fetch --all
git lfs pull
```

In case the repo was cloned without submodules initially:

```
git submodule init
git submodule update --recursive
```

Mkdocs and plugins:

```
pip3 install mkdocs-material mkdocs-swagger-ui-tag mkdocs-drawio-exporter
```

(to build the documentation `Draw.io` also has to be installed on the system)

## Author

**Tobias Anker**

eMail: tobias.anker@kitsunemimi.moe

## License

The complete project is under [Apache 2 license](https://github.com/kitsudaiki/Hanami/blob/develop/LICENSE).

## Contributing

If you want to contribute things to this project, then I'm really happy about this. Please restrict this for the moment to bug-reports and feature-requests. Use the issue-templates for this. You can also place questions by these issues, if you want some information about parts of the project or if you want to try it out and need some help.
",4,4,1,39,energy-efficiency,"[ai, ai-as-a-service, cpp, dashboard, energy-efficiency, gpu-computing, kubernetes-deployment, multi-tenants, neural-network, openapi-documentation]",00000
1451,master-thesis,Tehnix,N/A,https://github.com/Tehnix/master-thesis,https://api.github.com/repos/Tehnix/master-thesis,"[University] Master thesis ""Exploring the use of purely functional programming languages for offloading of mobile computations""","# Exploring the use of purely functional programming languages for offloading of mobile computations

- [Exploring the use of purely functional programming languages for offloading of mobile computations](#exploring-the-use-of-purely-functional-programming-languages-for-offloading-of-mobile-computations)
  - [Source Code](#source-code)
    - [src/ code](#src-code)
    - [src-reflex/ code](#src-reflex-code)
    - [src-xcode/ code](#src-xcode-code)
    - [src-etlas/ code](#src-etlas-code)
  - [Compiling the Thesis](#compiling-the-thesis)

Note: A much more detailed discussion can be found in the _Justification_ section in the [thesis project description](https://github.com/Tehnix/master-thesis/blob/master/Appendix/Thesis%20Project%20Description.pdf).

This thesis topic is about exploring, as the title implies, the usage of purely functional programming languages for offloading of mobile computations, with the main goal of achieving energy savings. The work will focus on an investigation of tackling some of the commonly found problems in current mobile code offloading approaches, such as a) handling state and b) knowing which parts can are offloadable and which are not (e.q. UI code is not). This will be done by looking at what purely functional programming languages bring to the table, exploring several approaches to solve the domain, along with describing their pros and cons, and finally further developing and implementing one of the approaches to show the feasibility.

The work will be done in collaboration with my supervisors Henrik Lehrmann Christiansen (DTU) and Sung-Ju Lee (KAIST).

As such, the preliminary outline of the work will look like,

- Introduction
- The Case for Offloading
- Related work
- Purely Functional Programming
- Approaches to Offloading
- Offloading Using a Monadic Framework
- Conclusion and Evaluation

Chapter 1 serves to motivate why offloading of computations is a worthwhile pursuit, by examining why one would want to offload in the first place, then goes on to give an overview of common areas in which it can lower energy consumption. Finally, we investigate when and under what exact conditions offloading is beneficial---and conversely---when it is not. Chapter 2 then gives an overview of existing systems, on the application level, that have been developed to facilitate offloading of computations. In chapter 3 the reader is taken on a tour of what it means to be a purely functional programming language, what we mean when we say ""pure"" computation, differences in evaluation model, and finally a primer on Haskell, which serves to familiarize the reader with the syntax of the Haskell language, since this will be the focal point of this thesis. Continuing to chapter 4, a series of different approaches are investigated as to how offloading could be implemented in a purely functional language, with a focus on Haskell so that concrete suggestions can be given. This leads us on to chapter 5, which implements one of the approaches discussed in chapter 4. In chapter 6 we evaluate and discuss the outcome of the approach taken, and conclude on our work.


## Source Code
The source code is structured into several folders.

### src/ code
The `src/` folder contains working code showcasing the different approaches discussed in chapter 4.

- `Unsafe/` contains the code for section 4.2.
- `Rewrite/` contains the ode for section 4.3.
- Section 4.4 on Monadic Framework is divided into three:
  - `MonadTransformers/` showing MTL-style .
  - `FreeFun/` shows `Free`-style.
  - `FreerFun/` shows `Freer`/Extensible Effects-style.
- `Template/` contains the code for section 4.5.
- `Preprocessor/` contains the unfinished code for the dropped section on manipulating the source.

And finally `Playground/` and `ExtensibleOffload/` don't really matter, the former was just a template to copy, and the second was meant to be the implementation for chapter 5, but that now lives in `src-reflex/`.


### src-reflex/ code
The `src-reflex/` folder contains the code for chapter 5, showcasing a proof-of-concept of using `Freer`/Extensible Effects-style on a mobile device. The code uses Nix to build, setting it up via [`reflex-platform`](https://github.com/reflex-frp/reflex-platform). To get set up, go into `src-reflex/reflex-platform/` and run `./try-reflex`. It is recommended to consult the reflex-platform documentation during setup.

`src-reflex/` contains three projects to be combined:

- `common/` contains the code that both the frontend and backend will share, such as types and computations.
- `frontend/` contains the code that goes on the mobile device, by generating it vias GHCJS. You can run `./watch-js.sh` inside `src-reflex/` to get into the GHCJS nix-shell, and then run `./watch-js.sh` **again** while inside the nix-shell to setup compilation on file changes.
- `backend/` contains the code for the server, which is a very simply [servant](https://github.com/haskell-servant/servant) server. You can run `./watch.sh` inside `src-reflex/` to get into the GHC nix-shell, and then run `./watch.sh` **again** while inside the nix-shell to setup compilation on file changes. Finally, `start-server.sh` will start the server.


### src-xcode/ code
The `src-xcode/` folder contains the Xcode project, which constructs a mix of a WebView and some labels that the code can interact with. JavaScript can communicate to the Swift code via GHCJS's JavaScript FFI, and some minor setup in the `ViewController.swift` in Xcode. This is described in the last part of section 5.4.

Additionally it contains another Xcode project, `Offie`, which demonstrates how to compile Haskell on a mobile device. For a more in-depth explanation of this, check out [this blog post](https://codetalk.io/posts/2018-02-07-Mobile-Haskell.html) on Mobile Haskell (iOS).


### src-etlas/ code
The `src-etlas/` folder contains the beginning of an Android project that would have used [Eta-lang](https://eta-lang.org), which is basically Haskell on the JVM. This was explored in parallel with the reflex-dom approach, but was dropped because of time constraints, and limited resources on how to integrate the two (i.e. Eta and Android).


## Compiling the Thesis
The thesis is written using [Pandoc](https://pandoc.org/index.html) Markdown, compiling to LaTeX. The content is contained in `Chapter/`, with the accompanying self-explanatory folders `Appendix/`, `Bibliography/` and `Graphic/`. Finally `Template/` contains the LaTeX templates, for which two of them support pandoc variables, namely `Tempalte/default.tex` and `Tempalte/pandoc-preamble.tex`. It is also worth mentioning that the chapters are pulled from `main.md`, so if you add anything new, it needs to go in there (needed for ordering if they are naturally alphabetical). Furthermore, `metadata.yaml` contains metadata information and settings for the build.

The setup needs a local Tex installation. If you are on macOS you can get a minimal setup going by running `./setup.sh`, which sets up _Pandoc_ with two extensions [_citeproc_](https://github.com/jgm/pandoc-citeproc/blob/master/man/pandoc-citeproc.1.md) and [_crossref_](http://lierdakil.github.io/pandoc-crossref/), [_basictex_](http://www.tug.org/mactex/morepackages.html) containing the LaTeX compilers, and finally a bunch of Tex packages installed using `tlmgr`. If you are on any other OS, inspecting the `setup.sh` file should be enough to get you going.

To compile the thesis, we use a `Makefile`, which means you simply have to run `make all` in the root folder. For convenience just run `./watch.sh`, which compiles the appropriate targets on file changes. I recommend using a PDF viewer that can update to changes, such as [Skim](https://skim-app.sourceforge.io) on macOS.
",3,3,4,0,energy-efficiency,"[cloud-computing, energy-efficiency, haskell, mobile, offloading]",00000
1452,energysim,3mission,N/A,https://github.com/3mission/energysim,https://api.github.com/repos/3mission/energysim,A simulator for the approximation of online advertising energy consumption. ,"# energysim
A simulator for assessing energy consumption distribution of infrastructure and Internet service. The simulator is suitable for any service, a case example is Online Advertising. Simulation is done for Python

## 1. Overview 

params.py provides input parameters for the simualtor. The main domains for parameters include infra_params, traffic_params, and ads_params. energysim.py contains the actual simulator and histogram settings. The simulation picks randomly input parametes for the simulation from the range of uncertainty. The number of possible permutations is billions. The histogram contains 200 bins in the default setup. All input paraters can be changed. 

### 1.1. About energysim

There are no well-established ways to assess the total power consumption of the Internet. Estimating the internet's energy footprint is challenging because the interconnectedness associated with even seemingly simple aspects of power consumption creates a problem. 
This simulator takes infrastructure energy consumption, shares of traffic from different access networks and CDNs, shares of protocols, shares of traffic classes, and finally shares of investigated service as input parameters. Then simulator computes tha energy consumption distribution for the service in question. The main phases in the simulator are: 1) infrastructure energy consumption estimation, 2) estimating traffic shares of access networks and CDNs, 3) estimating protocol shares, 4) estimating traffic class shares in different access networks, 5) estimating shares of online advertising in each traffic class in different access tecnologies, and 6) presenting the distribution of results.

## 2. Install and Use

### 2.1 Install 

to install: 

    pip install git+https://github.com/3mission/energysim.git
    
to import: 
    
    from energysim import energy

to run the simulation and draw the plot:

    #### run the simulation with 10000 rounds
    result = energy(10000)

    #### plot a histogram for the result with 200 bins
    result.hist(bins=200)

to access the data and descriptive stats:

    #### view the dataframe with the results 
    result.df

    #### get the mean value for ads TWh
    result.ads_mean

    #### get the mean value for infrastructure total TWh
    result.total_mean

    #### get the standard deviation for ads TWh
    result.ads_std

    #### get the standard deviation for infrastructure total TWh
    result.total_std

    #### get the median value for ads TWh
    result.ads_median

    #### get the median value for infrastructure total TWh
    result.total_median

    #### get the mode value for ads TWh
    result.ads_mode

    #### get the mode value for infrastructure total TWh
    result.total_mode

    #### get the minimum value for ads TWh
    result.ads_min

    #### get the minimum value for infrastructure total TWh
    result.total_min

    #### get the maximum value for ads TWh
    result.ads_max

    #### get the maximum value for infrastructure total TWh
    result.total_max

## 3. Parameters

### 3.1. Parameter Taxonomy

Parameter | Example Value | Uncertainty | Description
-------|---------|---------|---------
**infra_params**
ran | 140 | 0.2 | Mobile Radio Access Network energy consumption in TWh [1]
ps_core | 146.65 | 0.25 | Packet switched core network energy consumption in TWh [2]
fixed_line_cpe | 162.06 | 0.2 | Fixed Access CPE devices energy consumption in TWh [1]
operator_dc | 29.33 | 0.25 | Operator data center energy consumption in TWh [2]
office_networks | 49.67 | 0.25 | Office network energy consumption in TWh [3]
internet_core | 29.64 | 0.4 | The Internet core network energy consumption in TWh [4]
applications | 385.04 | 0.25 | Service data center energy consumption in TWh [5], [6]
smartphone_dev_millions | 2562 | 0.1 | The number of smartphone devices [7]
smartphone_avg_energy | 3.34 | 0.3 | Average smartphone energy consumption in kWh [8]
pc_dev_millions | 325 | 0.1 | The number of PC devices [9]
pc_avg_energy | 233 | 0.3 | Average PC energy consumption in kWh [10]
laptop_dev_millions | 548 | 0.1 | The number of laptop devices [1]
laptop_avg_energy | 41.8 | 0.3 | Average laptop energy consumption in kWh [10]
tablet_dev_millions | 742 | 0.1 | The number of tablet devices [11]
tablet_avg_energy | 12.9 | 0.3 |  Average tablet energy consumption in kWh [12]
**traffic_params**
fixed_ip | 0.6863 | 0.1 | The share of fixed network IP traffic of total traffic [13]
mobile_ip | 0.075 | 0.1 | The share of mobile network IP traffic of total traffic [13]
cdn_ip | 0.3992 | 0.1 | The share of CDN IP traffic of total traffic [13]
ipv4 | 0.985 | 0.005 | Share of IP version 4 traffic [14], [15]
tcp | 0.8977 | 0.05 | Share of TCP traffic [15]
http | 0.7420 | 0.1 | Share of HTTP [14]
fixed_video | 0.7284 | 0.1 | Share of video traffic class in fixed networks [13]. Triangular distribution used.
fixed_file | 0.1253 | 0.1 | Share of file sharing traffic class in fixed networks [13]. Triangular distribution used.
fixed_web | 0.1290 | 0.1 | Share of web, email, and data traffic class in fixed networks [13]. Triangular distribution used.
fixed_gaming | 0.0174 | 0.1 | Share of gaming traffic class in fixed networks [13]. Triangular distribution used.
mobile_video | 0.6148 |0.1 | Share of video traffic class in mobile networks [13]. Triangular distribution used.
mobile_file | 0.0049 | 0.1 | Share of file sharing traffic class in mobile networks [13]. Triangular distribution used.
mobile_web | 0.3801 | 0.1 | Share of web, email, and data traffic class in mobile networks [13]. Triangular distribution used.
mobile_gaming | 0.0002 | 0.1 | Share of gaming traffic class in mobile networks [13]. Triangular distribution used.
**ads_params**
fixed_video | 0.1 | 0.8 | Share of ads in video traffic class in fixed networks
fixed_of_file | 0.1 | 0.9 | Share of ads in file sharing traffic class in fixed networks
fixed_web | 0.5 | 0.5 | Share of ads in web, email, and data traffic class in fixed networks
fixed_gaming | 0.1 | 0.9 | Share of ads in gaming traffic class in fixed networks
mobile_video | 0.14 | 0.8 | Share of ads in video traffic class in mobile networks
mobile_file | 0.1 | 0.9 | Share of ads in file sharing traffic class in mobile networks
mobile_web | 0.5 | 0.5 | Share of ads in web, email, and data traffic class in mobile networks
mobile_gaming | 0.1 | 0.9 | Share of ads in gaming traffic class in mobile networks
**Usage params**
smartphone_usage | 1 | 0 | Share of relevant usage of smartphone regarding the service being assessed
pc_usage | 1 | 0 | Share of relevant usage of smartphone regarding the service being assessed
laptop_usage | 1 | 0 | Share of relevant usage of smartphone regarding the service being assessed
tablet_usage | 1 | 0 | Share of relevant usage of smartphone regarding the service being assessed

## References

[1] Andrae, A. S., & Edler, T., 2015. On global electricity usage of communication technology: trends to 2030. Challenges, 6(1), 117-157.

[2] Han, C., Harrold, T., Armour, S., Krikidis, I., Videv, S., Grant, P. M., ... & Le, T. A., 2011. Green radio: radio techniques to enable energy-efficient wireless networks. IEEE communications magazine, 49(6).

[3] Lambert, S., Van Heddeghem, W., Vereecken, W., Lannoo, B., Colle, D., & Pickavet, M., 2012. Worldwide electricity consumption of communication networks. Optics express, 20(26), B513-B524.

[4] Taylor, C., & Koomey, J., 2008. Estimating energy use and greenhouse gas emissions of internet advertising. Network.

[5] Koomey, J., 2011 b. Growth in data center electricity use 2005 to 2010. A report by Analytical Press, completed at the request of The New York Times, 9.

[6] Whitehead, B., Andrews, D., Shah, A., & Maidment, G., 2014. Assessing the environmental impact of data centres part 1:
Background, energy use and metrics. Building and Environment, 82, 151-159.

[7] https://www.statista.com/statistics/371889/smartphone-worldwide-installed-base/

[8] https://www.canstarblue.com.au/energy/electricity/surprising-cost-charging-phone/

[9] https://www.statista.com/statistics/541339/worldwide-pc-market-installed-base-by-type/

[10] Van Heddeghem, W., Lambert, S., Lannoo, B., Colle, D., Pickavet, M., & Demeester, P., 2014. Trends in worldwide ICT electricity consumption from 2007 to 2012. Computer Communications, 50, 64-76.

[11] https://www.nakono.com/tekcarta/market-forecasts/tablets-installed-base/tablet-installed-base-by-os-worldwide/

[12] http://www.zdnet.com/article/how-much-does-it-cost-to-charge-an-iphone-for-a-year/

[13] https://www.cisco.com/c/en/us/solutions/collateral/service-provider/visual-networking-index-vni/complete-white-paper-c11-481360.html

[14] Czyz, J., Allman, M., Zhang, J., Iekel-Johnson, S., Osterweil, E., & Bailey, M. (2014, August). Measuring ipv6 adoption. In ACM SIGCOMM Computer Communication Review (Vol. 44, No. 4, pp. 87-98). ACM.

[15] Pujol, E., Richter, P., Chandrasekaran, B., Smaragdakis, G., Feldmann, A., Maggs, B. M., & Ng, K. C., 2014. Back-office web traffic on the internet. In Proceedings of the 2014 Conference on Internet Measurement Conference. pp. 257-270. ACM.
",3,3,1,0,energy-efficiency,"[energy-efficiency, internet, python, research, simulator]",00000
1453,tibber_monitor,GitHub4Eddy,N/A,N/A,https://api.github.com/repos/GitHub4Eddy/tibber_monitor,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16C:1ECC:2A7D84:586573:652240C0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1454,HomeAssistant-CarbonIntensity,BottlecapDave,N/A,https://github.com/BottlecapDave/HomeAssistant-CarbonIntensity,https://api.github.com/repos/BottlecapDave/HomeAssistant-CarbonIntensity,Unofficial Home Assistant integration based on data supplied by carbonintensity.org.uk,"# Home Assistant Carbon Intensity

[![installation_badge](https://img.shields.io/badge/dynamic/json?color=41BDF5&logo=home-assistant&label=integration%20usage&suffix=%20installs&cacheSeconds=15600&url=https://analytics.home-assistant.io/custom_integrations.json&query=$.carbon_intensity.total)](https://github.com/hacs/integration) [![](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86)](https://github.com/sponsors/bottlecapdave)

Custom component to use the data from [carbonintensity.org.uk](https://carbonintensity.org.uk) to make your home more energy efficient.

- [Home Assistant Carbon Intensity](#home-assistant-carbon-intensity)
  - [How to install](#how-to-install)
    - [HACS](#hacs)
    - [Manual](#manual)
  - [How to setup](#how-to-setup)
    - [Your Settings](#your-settings)
    - [Target Rates](#target-rates)
      - [From and To times](#from-and-to-times)
      - [Offset](#offset)
      - [Rolling Target](#rolling-target)
      - [Examples](#examples)
        - [Continuous](#continuous)
        - [Intermittent](#intermittent)
  - [Services](#services)
    - [Service carbon\_intensity.update\_target\_config](#service-carbon_intensityupdate_target_config)
  - [FAQ](#faq)
    - [I'm having issues with the integration](#im-having-issues-with-the-integration)

## How to install

You should take the latest published [release](https://github.com/BottlecapDave/HomeAssistant-CarbonIntensity/releases). The current state of `develop` will be in flux and therefore possibly subject to change.

### HACS

While the integration isn't available in the HACS store yet, you can install it as a [custom repository](https://hacs.xyz/docs/faq/custom_repositories), providing the url `https://github.com/BottlecapDave/HomeAssistant-CarbonIntensity` and category of `integration`. Once installed, don't forget to restart your home assistant instance for the integration to be picked up.

### Manual

To install, place the contents of `custom_components` into the `<config directory>/custom_components` folder of your Home Assistant installation.

## How to setup

Setup is done entirely via the [integration UI](https://my.home-assistant.io/redirect/config_flow_start/?domain=carbon_intensity).

### Your Settings

The first thing you'll be asked to setup when you add the integration is to setup your region. This will be used to work out the carbon intensity in your area.

After completing, you'll get the following sensors:

* `sensor.carbon_intensity_current_rating` - The forecasted intensity rating of the current 30 minute period. All other forecasted intensity ratings are also available as an attribute of this sensor.

### Target Rates

If you go through the [setup](https://my.home-assistant.io/redirect/config_flow_start/?domain=carbon_intensity) process after you've configured your setup, you can set up target rate sensors. These sensors calculate the lowest continuous or intermittent rates **within a 24 hour period** and turn on when these periods are active. These sensors can then be used in automations to turn on/off devices to reduce intensity on the grid and reduce carbon output.

Each sensor will be in the form `binary_sensor.carbon_intensity_target_{{TARGET_RATE_NAME}}`.

#### From and To times

If you're wanting your devices to come on during a certain period, for example while you're at work, you can set the minimum and/or maximum times for your target rate sensor. These are specified in 24 hour clock format and will attempt to find the optimum discovered period during these times.

If not specified, these default from `00:00:00` to `23:59:59`. However you can use this feature to change this evaluation period. 

If for example you want to look at rates overnight you could set your from time to something like `20:00` and your `to` time to something like `05:00`. If you're wanting to ""shift"" the evaluation period, you could set your `from` and `to` to something like `16:00`.

See the examples below for how this might work.

#### Offset

You may want your target rate sensors to turn on a period of time before the optimum discovered period. For example, you may be turning on a robot vacuum cleaner for a 30 minute clean and want it to charge during the optimum period. For this, you'd use the `offset` field and set it to `-00:30:00`, which can be both positive and negative and go up to a maximum of 24 hours. This will shift when the sensor turns on relative to the optimum period. For example, if the optimum period is between `2023-01-18T10:00` and `2023-01-18T11:00` with an offset of `-00:30:00`, the sensor will turn on between `2023-01-18T09:30` and `2023-01-18T10:30`.

#### Rolling Target

Depending on how you're going to use the sensor, you might want the best period to be found throughout the day so it's always applicable. For example, you might be using the sensor to turn on a washing machine which you might want to come on at the best time regardless of when you use the washing machine.

However, you might also only want the target time to occur once a day so once the best time for that day has passed it won't turn on again. For example, you might be using the sensor to turn on something that isn't time critical and could wait till the next day like a charger.

This feature is toggled on by the `Re-evaluate multiple times a day` checkbox.

#### Examples

Lets look at a few examples. Lets say we have the the following (unrealistic) set of intensity values.

| start | end | value |
| ----- | --- | ----- |
| `2023-01-01T00:00` | `2023-01-01T00:30` | 6 |
| `2023-01-01T00:30` | `2023-01-01T05:00` | 12 |
| `2023-01-01T05:00` | `2023-01-01T05:30` | 7 |
| `2023-01-01T05:30` | `2023-01-01T18:00` | 20 |
| `2023-01-01T18:00` | `2023-01-01T23:30` | 34 |
| `2023-01-01T23:30` | `2023-01-02T00:30` | 5 |
| `2023-01-02T00:30` | `2023-01-02T05:00` | 12 |
| `2023-01-02T05:00` | `2023-01-02T05:30` | 7 |
| `2023-01-02T05:30` | `2023-01-02T18:00` | 20 |
| `2023-01-02T18:00` | `2023-01-02T23:00` | 34 |
| `2023-01-02T23:30` | `2023-01-03T00:00` | 6 |

##### Continuous

If we look at a continuous sensor that we want on for 1 hour.

If we set no from/to times, then our 24 hour period being looked at ranges from `00:00:00` to `23:59:59`.

The following table shows what this would be like.

| current date/time  | period                                | `Re-evaluate multiple times a day` | reasoning |
| ------------------ | ------------------------------------- | ---------------------------------- | --------- |
| `2023-01-01T00:00` | `2023-01-01T00:00` - `2023-01-01T01:00` | `false`                            | while 5 is our lowest rate within the current 24 hour period, it doesn't cover our whole 1 hour and is next to a high 34 rate. A rate of 6 is the next available rate with a low following rate. |
| `2023-01-01T01:00` | `2023-01-02T00:00` - `2023-01-02T01:00` | `false`                            | Our lowest period is in the past, so we have to wait until our target period has passed to look at the next evaluation period. |
| `2023-01-01T01:00` | `2023-01-01T04:30` - `2023-01-01T05:30` | `true`                             | The rate of 6 is in the past, so 7 is our next lowest rate. 12 is smaller rate than 20 so we start in the rate period before to fill our desired hour. |
| `2023-01-01T23:30` | None | `true`                             | There is no longer enough time available in the current 24 hour period, so we have to wait until our target period has passed to look at the next evaluation period. |

If we set our from/to times for `05:00` to `19:00`, we then limit the period that we look at. The following table shows what this would be like.

| current date/time  | period                                | `Re-evaluate multiple times a day` | reasoning |
| ------------------ | ------------------------------------- | ---------------------------------- | --------- |
| `2023-01-01T00:00` | `2023-01-01T05:00` - `2023-01-01T06:00` | `false`                            | The rate of 12 is no longer available as it's outside of our `from` time. |
| `2023-01-01T06:30` | `2023-01-02T05:00` - `2023-01-02T06:00` | `false`                            | Our lowest period is in the past, so we have to wait until our target period has passed to look at the next evaluation period. |
| `2023-01-01T06:30` | `2023-01-01T06:30` - `2023-01-01T07:30` | `true`                             | The rate of 7 is in the past, so we must look for the next lowest combined rate |
| `2023-01-01T18:00` | `2023-01-01T18:00` - `2023-01-01T19:00` | `true`                             | The rate of 20 is in the past, so we must look for the next lowest combined rate which is 34 |
| `2023-01-01T18:30` | None | `true`                            | There is no longer enough time available within our restricted time, so we have to wait until our target period has passed to look at the next evaluation period. |

If we set our from/to times to look over two days, from `20:00` to `06:00`, we then limit the period that we look at to overnight. The following table shows what this would be like.

| current date/time  | period                                | `Re-evaluate multiple times a day` | reasoning |
| ------------------ | ------------------------------------- | ---------------------------------- | --------- |
| `2023-01-01T20:00` | `2023-01-01T23:30` - `2023-01-02T01:30` | `false`                            | Our lowest rate of 5 now falls between our overnight time period so is available |
| `2023-01-02T02:00` | `2023-01-01T23:30` - `2023-01-02T01:30` | `false`                            | Our lowest period is in the past, so we have to wait until our target period has passed to look at the next evaluation period. |
| `2023-01-02T02:00` | `2023-01-02T04:30` - `2023-01-02T05:30` | `true`                             | The rate of 5 is in the past, so we must look for the next lowest combined rate, which includes our half hour rate at 7 |
| `2023-01-02T05:30` | None | `true`                             | There is no longer enough time available within our restricted time, so we have to wait until our target period has passed to look at the next evaluation period. |

If we set an offset of `-00:30:00`, then while the times might be the same, the target rate sensor will turn on 30 minutes before the select rate period starts. Any set time restrictions **will not** include the offset.

##### Intermittent

If we look at an intermittent sensor that we want on for 1 hour total (but not necessarily together).

If we set no from/to times, then our 24 hour period being looked at ranges from `00:00:00` to `23:59:59`.

The following table shows what this would be like.

| current date/time  | period                                | `Re-evaluate multiple times a day` | reasoning |
| ------------------ | ------------------------------------- | ---------------------------------- | --------- |
| `2023-01-01T00:00` | `2023-01-01T00:00` - `2023-01-01T00:30`, `2023-01-01T23:30` - `2023-01-02T00:00` | `false`                            | Our sensor will go on for 30 minutes at the lowest intensity, then 30 minutes at the next lowest intensity. |
| `2023-01-01T01:00` | `2023-01-01T00:00` - `2023-01-01T00:30`, `2023-01-01T23:30` - `2023-01-02T00:00` | `false`                            | Our sensor will go on for 30 minutes at the lowest intensity, which will be in the past, then 30 minutes at the next lowest intensity. |
| `2023-01-01T01:00` | `2023-01-01T05:00` - `2023-01-01T05:30`, `2023-01-01T23:30` - `2023-01-02T00:00` | `true`                             | Our sensor will go on for 30 minutes at the second lowest intensity, then 30 minutes at the third lowest intensity. |
| `2023-01-01T23:30` | None | `true`                             | There is no longer enough time available in the current 24 hour period, so we have to wait until our target period has passed to look at the next evaluation period. |

If we set our from/to times for `05:00` to `19:00`, we then limit the period that we look at. The following table shows what this would be like.

| current date/time  | period                                | `Re-evaluate multiple times a day` | reasoning |
| ------------------ | ------------------------------------- | ---------------------------------- | --------- |
| `2023-01-01T00:00` | `2023-01-01T05:00` - `2023-01-01T05:30`, `2023-01-01T05:30` - `2023-01-01T06:00` | `false`                            | Our lowest intensities are outside our target range, so we need to look at the next cheapest. Luckily on our scenario the two lowest intensities are next to each other. |
| `2023-01-01T06:30` | `2023-01-01T05:00` - `2023-01-01T05:30`, `2023-01-01T05:30` - `2023-01-01T06:00` | `false`                            | Both of our lowest intensities in the target range are in the past. |
| `2023-01-01T06:30` | `2023-01-01T06:30` - `2023-01-01T07:00`, `2023-01-01T07:00` - `2023-01-01T07:30` | `true`                             | Both of our lowest intensities in the target range are in the past, so we must look for the next lowest combined rate |
| `2023-01-01T18:30` | None | `true`                            | There is no longer enough time available within our restricted time, so we have to wait until our target period has passed to look at the next evaluation period. |

If we set our from/to times to look over two days, from `20:00` to `06:00`, we then limit the period that we look at to overnight. The following table shows what this would be like.

| current date/time  | period                                | `Re-evaluate multiple times a day` | reasoning |
| ------------------ | ------------------------------------- | ---------------------------------- | --------- |
| `2023-01-01T20:00` | `2023-01-01T23:30` - `2023-01-02T00:30`, `2023-01-02T05:00` - `2023-01-02T05:30` | `false`                            | Our lowest rate of 5 now falls between our overnight time period so is available |
| `2023-01-02T02:00` | `2023-01-01T23:30` - `2023-01-02T00:30`, `2023-01-02T05:00` - `2023-01-02T05:30` | `false`                            | Our lowest period is in the past, but we still have a rate in the future so our sensor will only come on once. |
| `2023-01-02T02:00` | `2023-01-02T02:00` - `2023-01-02T02:30`, `2023-01-02T05:00` - `2023-01-02T05:30` | `true`                             | The rate of 5 is in the past, so we must look for the next lowest combined rate, which includes our half hour rate at 7 |
| `2023-01-02T05:30` | None | `true`                             | There is no longer enough time available within our restricted time, so we have to wait until our target period has passed to look at the next evaluation period. |

If we set an offset of `-00:30:00`, then while the times might be the same, the target rate sensor will turn on 30 minutes before the select rate period starts. Any set time restrictions **will not** include the offset.

## Services

### Service carbon_intensity.update_target_config

Service for updating a given target rate's config. This allows you to change target rates sensors dynamically based on other outside criteria (e.g. you need to adjust the target hours to top up home batteries).

> Please note this is temporary and will not persist between restarts.

| Attribute          | Optional | Description                                                                                                    |
| ------------------ | -------- | ---------------------------------------------------------------------------------------------------------------|
| `target.entity_id` | `no`     | The name of the target sensor whose configuration is to be updated                                             |
| `data.hours`       | `yes`    | The optional number of hours the rate sensor should come on during a 24 hour period. Must be divisible by 0.5. |
| `data.start_time`  | `yes`    | The optional time the evaluation period should start. Must be in the format of `HH:MM`.                        |
| `data.end_time`    | `yes`    | The optional time the evaluation period should end. Must be in the format of `HH:MM`.                          |
| `data.offset`      | `yes`    | The optional offset to apply to the target rate when it starts. Must be in the format `(+/-)HH:MM:SS`          |

This can be used via automations in the following way. Assuming we have the following inputs.

```yaml
input_number:
  carbon_intensity_hours:
    name: Carbon Intensity Target Hours
    min: 0
    max: 24

input_text:
  # From/to would ideally use input_datetime, but we need the time in a different format
  carbon_intensity_from:
    name: Carbon Intensity Target From
    initial: ""00:00""
  carbon_intensity_to:
    name: Carbon Intensity Target To
    initial: ""00:00""
  carbon_intensity_offset:
    name: Carbon Intensity Target Offset
    initial: ""-00:00:00""
```

Then an automation might look like the following

```yaml
automations:
  - alias: Update target rate config
    trigger:
    - platform: state
      entity_id:
      - input_number.carbon_intensity_hours
      - input_text.carbon_intensity_from
      - input_text.carbon_intensity_to
      - input_text.carbon_intensity_offset
    condition: []
    action:
    - service: carbon_intensity.update_target_config
      data:
        hours: >
          ""{{ states('input_number.carbon_intensity_hours') | string }}""
        start_time: >
          {{ states('input_text.carbon_intensity_from') }}
        end_time: >
          {{ states('input_text.carbon_intensity_to') }}
        offset: >
          {{ states('input_text.carbon_intensity_offset') }}
      target:
        entity_id: binary_sensor.carbon_intensity_target_example
```

## FAQ

### I'm having issues with the integration

The first thing to do is increase the log levels for the component. This can be done by setting the following values in your `configuration.yaml` file.

```yaml
logger:
  logs:
    custom_components.carbon_intensity: info
```

If you don't have access to this file, then you should be able to set the log levels using the [available services](https://www.home-assistant.io/integrations/logger/).

Once done, you'll need to reload the integration and then check the ""Full Home Assistant Log"" from the `logs page`. You should then see entries associated with this component.
",3,3,4,0,energy-efficiency,"[carbon-intensity, carbon-intensity-api, carbon-intensity-forecast, energy-efficiency, green, home-assistant, home-automation, smart-home]",00000
1455,arduino-lowpowertest230203,jnsbyr,N/A,https://github.com/jnsbyr/arduino-lowpowertest230203,https://api.github.com/repos/jnsbyr/arduino-lowpowertest230203,Low Power Optimization of the SAM D21 MCU using the Arduino Framework,"# Low Power Stamp Sized Development Boards

### Table of contents

[1. Motivation](#motivation)  
[2. MCUs](#mcus)  
[3. Low Power Strategies](#low-power-stragegies)  
[4. Seed Studio XIAO SAMD21](#seed-studio-xiao-samd21)  
[5. Seed Studio XIAO ESP32C3](#seed-studio-xiao-esp32c3)  
[6. Conclusions](#conclusions)  
[7. Licenses and Credits](#licenses-and-credits)  

## Motivation

After testing a solar powered energy harvesting module I was looking for a suitable microcontroller development board with the following features:

- variable supply voltage between 2 V and 3 V
- standby consumption less than 5 µA
- power on consumption less than 5 mA
- extended standby durations with periodic wakeup periods of at least 20 minutes
- I2C and SPI support
- read Vcc or 1 analog input
- 9 digital I/Os
- stamp sized, not larger than 25x20 mm
- optional 433 MHz RF transmitter

## MCUs

A brief web search resulted in a comparatively short list of candidates (definitely not representative). The following table lists the lowest possible consumption of the MCUs of these candidates and of a few additional popular MCUs. The values are taken from the manufacturer's datasheet, preferably for 3 V Vcc where available:

| MCU                   | Standby [µA]       | max. Wakeup Period | Notes                       | 
| ----------------------| ------------------ | ------------------ | --------------------------- | 
| Atmel ATtiny          |  10.00 (max)       | 8 s (watchdog)     | small flash, limited SPI    | 
| Atmel ATmega328P      |  44.00 (max)       | 8 s (watchdog)     | no stamp sized boards found | 
| Atmel ATmega32U2/4    |  10.00             | 8 s (watchdog)     |                             | 
| Espressif ESP8266     |  20.00             | 71 min (DSW)       |                             | 
| Espressif ESP32S1     |  10.00 (RTC)       | 4 h (RTC)          |                             | 
| Espressif ESP32C3     |   5.00 (RTC)       | 4 h (RTC)          |                             | 
| Feescale Kinetis KL26 |   1.07 (VLLS1 RTC) | 136 y (RTC)        | no stamp sized boards found | 
| Microchip SAM D21/DA1 |   4.06 (STDBY RTC) | 136 y (RTC)        |                             | 
| NORDIC nRF52832       |   1.90 (RTC)       | 24 d (RTC)         |                             | 
| NORDIC nRF52833       |   1.60 (RTC)       | 24 d (RTC)         |                             | 
| NORDIC nRF52840       |   1.50 (RTC)       | 24 d (RTC)         |                             | 
| Raspberry RP2040      | 180.00 (DORMANT)   | RTC alarm          |                             | 
| ST STM8L              |   0.92 (AH RTC)    | 36 h (RTC)         | no stamp sized boards found | 

While some MCUs include a WiFi and/or Bluetooth transmitter, I could not find a mainstream MCU with a sub 1 GHz transmitter. On the other hand there are several boards available that combine one of the MCUs listed with a separate RF chip. 

The table above should have a column for the power on consumption, but here things become difficult. The various manufacturers don't use standardized benchmarks limiting a comparison based on the datasheet values.

The listed MCUs allow changing the clock speed and disabling various features to save power, but this requires a MCU specific implementation. Making use of these MCU specific options and applying them to the use case will minimize the average power consumption. The result will probably differ significantly form the typical values listed in the datasheet.

Excluding all boards with a standby consumption that is higher than targeted and looking at current price and availability I selected the Seed Studio XIAO ESP32C3 and SAMD21 for closer inspection.

## Low Power Strategies

When designing a microcontroller application that should work with a power supply that is sustained by energy harvesting, the average energy consumption must stay significantly below the average energy yield, typically limiting the complexity of the application. To make the most of the energy available, the following strategies come to mind:

- adjusting the CPU speed to the task complexity
- adjusting the application activity to the available energy
- passive waiting
- entering standby as much as possible
- power optimized circuit design

Which of these strategies can be employed depends on the application. The best results can be achieved if all strategies can be combined.

Reducing the clock speed to a frequency suitable for the use case is typically the simplest way to reduce power consumption because many MCUs show a more or less linear correlation between clock speed and consumption.

The other strategies mentioned require a MCU specific implementation because the power saving features of the MCUs and their use differ significantly.

The code of this project provides an example how to use the features of a specific MCU to this end and it will also show that the programming by itself is not enough to minimize the power consumption to an acceptable level. Note that for the sake of easy current measurement active waiting instead of passive waiting is used by calling *delay()*.


## Seed Studio XIAO SAMD21

### Throttling the CPU

Starting with the Seed Studio XIAO SAM D21 and using the Arduino IDE the ""blink"" was running in no time, but then frustration set in because it was not possible to change the clock speed to 8 MHz by adding an entry for *F_CPU* to Arduino's boards.txt - the MCU just kept hanging in startup.

Repeating this test with a Teensy LC took only a few minutes - throttling the clock just worked as expected and even USB kept working. The Teensy LC has a Feescale Kinetis KL26 MCU with the same ARM Cortex-M0+ core as the Microchip SAM D21/DA1 MCU. This confirmed to me that the problem with the XIAO SAMD21 was not due to the MCU but probably due to the SDK. 

Looking through the Arduino SAMD SDK source files the cause could be traced to the initialization of the main oscillator in the reset handler *SystemInit()* in file startup.c (from Seed Studio SAMD SDK 1.8.3). The DFLL48M must be initialized for approximately 48 MHz, regardless of the desired main clock speed, but was using *F_CPU* as parameter. Setting *F_CPU* to 32 MHz still worked, but 8 MHz is definitely out of range. The following modification of startup.c allows the selection of several lower clock frequencies (e.g. 24 MHz and 6 MHz). Only USB will no longer work because it needs a GCLK running at 48 MHz.

```C++
* 4) Enable DFLL48M clock
...
/* The DFLL48M clock is specified for 48 MHz, cf product datasheet chapter 37.13.3 - Digital Frequency Locked Loop (DFLL48M) Characteristics. Configuring other frequencies might work, but is not supported. */
    
#if F_CPU >= 32000000L
  #define F_DFLL F_CPU
  #define GCLK0_DIV -1
#elif F_CPU == 24000000L
  #define F_DFLL 48000000L
  #define GCLK0_DIV 0
#elif F_CPU == 16000000L
  #define F_DFLL 32000000L
  #define GCLK0_DIV 0
#elif F_CPU == 12000000L
  #define F_DFLL 48000000L
  #define GCLK0_DIV 1
#elif F_CPU == 8000000L
  #define F_DFLL 32000000L
  #define GCLK0_DIV 1
#elif F_CPU == 6000000L
  #define F_DFLL 48000000L
  #define GCLK0_DIV 2
#elif F_CPU == 4000000L
  #define F_DFLL 32000000L
  #define GCLK0_DIV 2
#elif F_CPU == 3000000L
  #define F_DFLL 48000000L
  #define GCLK0_DIV 3
#elif F_CPU == 1500000L
  #define F_DFLL 48000000L
  #define GCLK0_DIV 4
#else
  #error supported F_CPU values are 1500000L, 3000000L, 6000000L, 12000000L, 24000000L and 48000000L
#endif

SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
                       SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                       SYSCTRL_DFLLMUL_MUL( (F_DFLL + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference
...
/* ----------------------------------------------------------------------------------------------
 * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at F_CPU.
 */
GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
                   (GCLK0_DIV >= 0? GCLK_GENDIV_DIV(GCLK0_DIV) : 0);  // Divide by 2^(GCLK0_DIV + 1)
...
/* Write Generic Clock Generator 0 configuration */
GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
                    GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                    GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                    GCLK_GENCTRL_GENEN |
                    (GCLK0_DIV >= 0? GCLK_GENCTRL_DIVSEL : 0);
```

An already patched version of [startup.c](arduino/startup.c ""Seed Studio SAMD SDK 1.8.3 startup.c"") is included with the project files.

With this blocker removed I was able to run ""blink"" at 6 MHz, feeding 3.0 V into the 3.3 V pin of the board. USB disconnected, green LED cut off on the cathode side and yellow LED on required 3.17 mA. Turning the yellow LED off let the current drop to 2.09 mA. 

### Standby

Putting the MCU into standby mode left 33 µA. Setting input pullup mode on all pins still left 16 µA, almost 12 µA higher than the value from the datasheet. It tried the EnergySaving class coming with the Seed Studio SAMD SDK to put the MCU into standby mode, but this increased the standby current by another 18 µA, because the library keeps the non volatile memory controller enabled.

Repeating this test with the Teensy LC using the Snooze library the standby current was immediately at 4.3 µA. Another study of the Microchip datasheet and another web search indicated that the high standby current is not due to a misconfiguration of the MCU but may be caused by the board components. Checking the schematic of the XIAO board, a reverse voltage into the voltage regulator U1 comes up as prime candidate. Using a handheld milling cutter I weakened the top edges of the RF shield, opening it with a needle, similar to opening a can. The remaining sides of the RF shield could be removed from the PCB by bending them back and forth a few times. This is what the board looks like without a RF shield:

![Seed Studio XIAO SAMD21 without RF shield](assets/XIAO-SAMD21-open.jpg ""Seed Studio XIAO SAMD21 without RF shield"")

With a needle it was possible to lift pin 3 of U1 from the PCB with very little force. Now the standby current reads 2 µA, even without changing the mode of all pins to input pullup.

### RTC and EIC

Using the Arduino library RTCZero would have been convenient, but only the clock/calendar mode is implemented and XOSC32K is used as clock source. Using OSCULP32K instead should minimize power consumption during standby further at the cost of a little timing precision. Using the RTC counter mode 0 will provide a periodic wakeup from standby. The class RealTimeClock of the project codes wraps the necessary setup tasks.

The standby current with the RTC based on OSCULP32K measured 2 µA - this is less than half the value from the datasheet with RTC based on OSC32K. 

Activating EIC additionally the same way does not change this value. This allows both timed and interrupt driven wakeup from standby without a significant change in power consumption.

### SAMD21 Asynchronous Clocks

As the SAMD21 can be configured to use asynchronous clocks with different frequencies for the CPU and the peripheral functions, almost every data exchange between the CPU and a peripheral must be synchronized, requiring extra code. This becomes apparent if you look at the method *RealTimeClock::enable()* in the project code, where around 40 % of the operations are sync waits. In such an environment the effectiveness of the code execution significantly depends on how much the clock speeds differ and how often peripheral access is used.

The Arduino core initializes all bus clock dividers at the end of *SystemInit()* to 1 to improve performance in this regard. This results in an almost classic MCU behaviour, where CPU and important peripherals use the same clock. At the same time this setting has the highest power consumption. 

There is no ideal solution for the trade-off between sync waits and power consumption, so the clock divider settings should be adjusted to the project requirements.

When throttling the MCU main clock below 12 MHz the NVM read wait states can be set to zero, further reducing the power consumption. This is done by the method *System::tune()* in the project code.

### Power On

The board supply current in bootloader mode with USB connected is 13 mA and 12 mA with USB disconnected and running ""blink"" at 48 MHz. This is a value that many other users report for an unmodified XIAO SAMD21.

Disconnecting USB and running a *while(1)* reduced the supply current to 8.1 mA, but this is still significantly more than the 3.4 mA listed in the SAMD21 datasheet.

To be able to reproduce the datasheet value, the power management settings and the generic clock settings resulting from the SAMD21 bootloader and the Arduino core have to be modified to match the test conditions described in the datasheet chapter 37.7 - ""Power Consumption"".

It is essential to:
- disable clocks of unused modules
- disable unused buses and adjust the bus clock dividers to 4/128/128
- disable unused clock generators
- assign unused clocks to a disabled clock generator

This is done by the method *System::tune()* in the project code. Especially the last aspect is a little curious, because one would expect that disabling a clock would have the same or better effect.

Tests with this configuration at different clock frequencies show the following relation between clock frequency and supply current:

$49 µA/MHz + 670 µA$

While the frequency dependent part is comparatively low, the static part is rather high. This is caused by the combination of XOSC32K and DFLL48M for the main clock.

Almost unsurprisingly the supply current could be decreased from 1 mA at 6 MHz to 610 µA at 8 MHz when using OSC8M instead of XOSC32K and DFLL48M, showing the following relation between clock frequency and supply current, that is significantly better at lower frequencies:

$61 µA/MHz + 170 µA$

More configurations and the measured consumptions are listed at the beginning of the project code.

### Passive Waiting

Peripheral operations often need several clock cycles to complete, e.g. the ADC. Typical solutions use active waiting by testing status values. Power efficiency can be improved by using an event driven approach instead, e.g. using interrupts or the event system of the SAMD21. In the time between the start of the operation and the completed event the MCU can either sleep or perform other operations.

The project code shows how to use timer interrupts as alternative to a delay based solution. The RTC timer interrupt will wakeup the MCU periodically every 2 minutes from standby, turn the LED on and immediately enter IDLE 2 sleep mode, reducing the supply current for the MCU from 0.61 mA at 8 MHz by 50 % to 0.29 mA. After 50 ms the timer counter interrupt will wakeup the MCU again, turn the LED off and put the MCU back into standby with a current consumption of 2 µA. At a 50 % duty cycle the average current would be around 150 µA compared to the 12 mA the MCU requires for a delay based ""blink"" at 48 MHz, reducing the power consumption of the MCU by a factor of 80.

Turning the LED on and off could be handled by the RTC timer alone if the RTC prescaler is set to support millisecond resolution and the I/O pin controller (PORT) is configured to use a generic clock generator that continues to run in standby. This should reduce the average current to a few µA.

### Build-In Sensors

The SAMD21 comes with an that allows reading the supply voltage without external wiring. This is very useful for low power applications, especially if the board has a low pin count like the XIAO. Additionally there is a temperature sensor available. As long as the MCU uptime is short, the MCU temperature will be near the ambient temperature, allowing the sensor to be used as a simple thermometer. Arduino core does not provide access to these internal ADC inputs, requiring a reimplementation and extension of the ADC access (see class *Analog2DigitalConverter*). The datasheet does not list power consumption values for the ADC module. When the ADC module is enabled with an ADC clock of 1 MHz the supply current increases by ~30 µA.

### SAMD21 Low Power Extensions

At the end of the day quite a bit of code needed to be recreated to provide low power options for basic things like ADC, RTC, timers and external interrupts. Compared to the extensions included in the Arduino core for the ESP8266 the Arduino core for the SAMD21 is rather sparse. Modifying the Arduino core would have been an option, but the probability that a merge request will get through is rather small, so I decided to create a standalone API with the following C++ classes:

| Class                   | Extensions                                              | 
| ----------------------- | ------------------------------------------------------- | 
| System                  | Oscillators, Generic Clocks, Power Manager, Sleep Modes | 
| Analog2DigitalConverter | Selectable Gain, Hardware Averaging, Internal Sources   | 
| RealTimeClock           | Counter Mode, Callback                                  | 
| TimerCounter            | Callback                                                | 

Most of the API code is not using the Arduino framework but the CMSIS-Core interface to access the MCU registers directly. Some methods of the API are variations of methods of the Arduino core SDK, the Arduino library RTCZero and the ArduinoLowPowerClass. Using the Arduino implementations directly will not provide the same results in regard to power saving because the Arduino framework is designed for ease of use.

Originally a part of this project, the low power API is now available as a separate [Arduino library](https://github.com/jnsbyr/arduino-samd21lpe). Please [download](https://github.com/jnsbyr/arduino-samd21lpe/archive/refs/heads/main.zip) the library as ZIP and install it via the Arduino IDE (see [tutorial]( https://docs.arduino.cc/software/ide-v1/tutorials/installing-libraries) for details).

## Seed Studio XIAO ESP32C3

pending ...

## Conclusions

Low power optimization of an MCU is not possible without a thorough understanding of the individual MCU features. There is no simple switch to be flipped to just make it work, instead an use case specific implementation should be considered. A solution can be based on

- an existing framework (e.g. the Arduino framework) and a readily available microcontroller board
- MCU register access and an individual PCB

Best results typically require using MCU register access because frameworks are more focused on ease of use and MCU abstraction.

This projects shows that a slightly modified XIAO SAMD21 board combined with a slightly modified Arduino framework and some extra code to support SAMD21 specific power management features can be a good choice for a low power project where the active time is short in comparison to the standby time. With a board supply current of 2 µA in standby and 610 µA at 8 MHz it can be powered by a battery for a year or more, or indefinitely through energy harvesting whenever enough energy has been collected.

## Licenses and Credits

### Documentation and Photos

Copyright (c) 2023 [Jens B.](https://github.com/jnsbyr)

[![License: CC BY-NC-SA 4.0](https://img.shields.io/badge/License-CC%20BY--NC--SA%204.0-lightgrey.svg)](https://creativecommons.org/licenses/by-nc-sa/4.0/)

### Source Code

Copyright (c) 2023 [Jens B.](https://github.com/jnsbyr)

[![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

The source code was edited and build using the [Arduino IDE](https://www.arduino.cc/en/software/), [Arduino CLI](https://github.com/arduino/arduino-cli) and [Microsoft Visual Studio Code](https://code.visualstudio.com).

The source code depends on:

#### Arduino SDK & Seed Studio SDK for SAMD21 and SAMD51

Copyright (C) 2014 [Arduino LLC](https://github.com/arduino/Arduino)

[![License: LGPL v2.1](https://img.shields.io/badge/License-LGPL%202.1%20only-blue.svg)](https://www.gnu.org/licenses/lgpl-2.1)

#### CMSIS Atmel

Copyright (C) 2015 [Atmel Corporation](https://github.com/arduino/ArduinoModule-CMSIS-Atmel)

[![License](https://img.shields.io/badge/License-BSD_2--Clause-orange.svg)](https://opensource.org/licenses/BSD-2-Clause)

Also many thanks to the Open Source community, the bloggers and the forum users that have shared their experience with the SAM D21 MCU.",3,3,1,0,energy-efficiency,"[arduino, energy-efficiency, energy-harvesting, low-power, optimization, samd21, teensylc]",00000
1456,mscs-thesis-project,rjray,N/A,N/A,https://api.github.com/repos/rjray/mscs-thesis-project,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17C:797D:27F80D:535AF0:652240BC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1457,energy,VitorRamos,N/A,https://github.com/VitorRamos/energy,https://api.github.com/repos/VitorRamos/energy,DVFS techniques,"# Energy 

## Table of contents

- [Description](#description)
- [Installation](#install)
- [Monitor script](#monitor)
- [Power Model](#power)
- [Performance Model](#performacne)
- [Energy Model](#energy)
- [Plot data](#plot3d)

<a name=""description""/>

## Description

...

<a name=""install""/>

## Installation

```
virtual env -p python3 venv
source venv/bin/activate
pip install -r requeriments.txt
python setup.py install
```

<a name=""monitor""/>

## Monitor

Example monitor process 
```
from energyOptimal.monitor import monitorProcess
from energyOptimal.cpufreq import cpuFreq
try:
    process= monitorProcess(program_name_= 'example/program.elf', sensor_type_='ipmi')
    args= [['arg1','arg2'],['arg3','arg4'],...]
    thrs= [1]+list(range(2,33,2))

    process.run_dvfs(list_threads= thrs, list_args= args, idle_time= 30,
    verbose=2, save_name='dvfs/{}_complet.pkl'.format(p.program_name))

    # Power and Performance model
    process.run(list_threads= thrs, list_args= args, idle_time= 30,
    verbose=2, save_name='performance/{}_complet.pkl'.format(p.program_name))
except KeyboardInterrupt:
    cpu= cpuFreq()
    cpu.reset()

```

<a name=""power""/>

## Power Model

Example power model
```
from energyOptimal.powerModel import powerModel

pw_model= powerModel()
# Fit power model
pw_model.loadData(filename='power_model/ipmi_2-32_cpuload.pkl',load_sensors=False)
pw_model.fit()
pw_model.save('ipmi_2-32_cpuload.pw')
# Load power model
pw_model.load('ipmi_2-32_cpuload.pw')

error= pw_model.error()
print(""Error, "", error)
print(""Power model constants, "", pw_model.power_model_x)
res= pw_model.estimate(pw_model.frequencies, pw_model.threads)
```

<a name=""performance""/>

## Performance Model

```
from energyOptimal.performanceModel import performanceModel

en_model= performanceModel()
# Fit model
df= en_model.loadData(filename='performance_model/program.pkl', arg_num=idx)
en_model.fit(C_=10e3,gamma_=0.1)
scores= en_model.crossValidate(method='mpe')
print(""CrossValidation "", np.mean(scores)*100, scores)
en_model.saveDataframe('dataframes/program'+l)
en_model.saveSVR('svr/program'+l)

# Load model
df= en_model.loadDataFrame('dataframes/program')
en_model.loadSVR('svr/program')

# Predict
preds= en_model.estimate(df[['freq', 'thr', 'in_cat']].values)

```

<a name=""energy""/>

## Energy Model

```
from energyOptimal.energyModel import energyModel

pw_model= powerModel('data/ipmi_2-32_cpuload.pw')
perf_model= performanceModel('dataframes/program', 'svr/program')
en_model= energyModel(pw_model,perf_model)

print(en_model.minimalEnergy())
```

<a name=""plot3d""/>

## Plot data



### License

The entire suite is licensed under the GPL v3.0.",3,3,3,5,energy-efficiency,"[dvfs, energy-efficiency, supercomputing]",00000
1458,REEDR,PtarmiganConsulting,PtarmiganConsulting,https://github.com/PtarmiganConsulting/REEDR,https://api.github.com/repos/PtarmiganConsulting/REEDR,"REEDR is an open-source tool that is designed to ease the process of building, running, and analyzing residential building energy models in EnergyPlus.","# What is REEDR?
REEDR stands for the **R**esidential **E**nergy **E**fficiency and **D**emand **R**esponse tool. REEDR is an open-source application written in Python that allows you to build, run, and analyze residential EnergyPlus models with relative ease. Some of its key features include:
- ability to run large batches of parametric runs,
- infinite scaling of building envelope and glazing,
- simple inputs for building geometry, infiltration, scheduling, and envelope constructions, and
- automatic aggregation of individual run outputs for easier analysis.

# How to Get REEDR Installed and Running on Your Machine
There are two ways to learn how to install and run REEDR on your machine:
- **Watch how-to videos on YouTube**. There is currently a [Quick Start Guide](https://www.youtube.com/watch?v=5DuCjWeKPXY&t=1s) on YouTube, and there are plans to post more content on how to use REEDR in the future.
- **Keep reading the instructions below**.

To get REEDR running on your machine, you need to install REEDR and a copy of EnergyPlus *v22.2.0*, the version of EnergyPlus with which REEDR is currently compatible. Note that REEDR currently runs only in Windows environments.

## Installing REEDR
To install REEDR, download *REEDR Setup.exe* from the [latest REEDR release](https://github.com/PtarmiganConsulting/REEDR/releases/tag/v1.1.0-beta) and run it on your machine. *REEDR Setup.exe* is a Windows Installer that will ask where you want REEDR installed.

## Installing EnergyPlus v22.2.0
To install EnergyPlus v22.2.0, download a copy from the [EnergyPlus v22.2.0 github page](https://github.com/NREL/EnergyPlus/releases/tag/v22.2.0) and install it onto your computer using its Windows installer. Remember where you install EnergyPlus on your computer, as you will need to tell REEDR where it is located.

## Running REEDR
There are two main files you need to define and run a REEDR project:
- the *Model Input Template*, and
- *REEDR.exe*.

### The Model Input Template
The *Model Input Template* file is where you define your building models. Specifically, building energy model inputs are defined on the *Model Inputs* tab of this workbook. If you just want to run REEDR, there should already be some example building models defined on the *Model Inputs* tab. (Note that you must *always* make sure you save this file before running REEDR, as REEDR is taking inputs from the saved copy of  the *Model Input Template*, not the live, unsaved version.)

### REEDR.exe
Once you have one or more models defined in the *Model Input Template*, you are ready to define your project details and run REEDR.

To do this, double-click *REEDR.exe* or call it from a command window to launch ""a session"" of REEDR. You should see two windows open - one is a Python-driven graphical user interface (GUI) where you will define your inputs, and the other is a command window where REEDR will write status updates during the REEDR run.

If it is your first time running REEDR, you must first link up with EnergyPlus (specifically, *energyplus.exe*) on your machine. If you installed EnergyPlus in its default location, REEDR may already have the correct path entered for you. If you did not, you will have to edit the *energyplus.exe* location either manually or using the *Browse* button provided.

Once you've linked up with EnergyPlus, you are ready to define your Project-level inputs and run REEDR. Projec-level inputs include:
- **_Project Name_**: This is a custom string that defines the name of your current project. A folder of this name will hold all REEDR and EnergyPlus output.
- **_Simulation Run Period_**: This is a drop-down menu used to define the length of your simulation. There are three choices: *Annual*, *Sub-Annual* (in which you will need to define your start and end dates in the boxes provided), and *Test Run*. A test run is a diagnostic run that only simulates a single day, and can be used to detect any input errors before running a large batch of models. 
- **_Output Granularity_**: This drop-down menu defines the time period at which output will be generated. The options are *Annual* (available for Annual run periods only), *Hourly*, and *Timestep*. *Timestep* will output at whatever EnergyPlus timestep you have defined in the ""Model Input Template"".
- **_Output End Uses_**: This drop-down menu defines the subset of energy end uses you wish to output. For *Annual* run periods with *Annual* output, REEDR will automatically generate *All End Uses*, as the amount of data will generally be small. However, for *Hourly* or *Timestep*-level output, file sizes can become very large, so users may wish to select only the end use of interest for the given analysis. 

In addition to the inputs above, there are two radio buttons - one to enable multi-threading, and one to have REEDR ask before overwriting a prior project of the same name.

After you've entered the above information, you can start REEDR by clicking the *Run* button. As REEDR runs, it will output its status and any error messages in the command prompt. REEDR will let you know once a run is completed, and when you can close the current session of REEDR.

## Viewing REEDR Output/Results
In addition to the *Model Input Template* and *REEDR.exe*, the most other common thing you will interact with is the *Projects* folder. The *Projects* folder is where REEDR will store all raw EnergyPlus and processed REEDR output. At the highest level, REEDR creates a folder with the project name provided in the REEDR GUI. Under that, REEDR will create:
- A sub-folder named for each building model with all original EnergyPlus output, and
- A REEDR-generated *Run Report* that aggregates all individual model output and also performs automatic unit conversions, relabeling, and reformatting.

# Credits
REEDR is copyrighted by Ptarmigan Consulting LLC and was developed by [Logan Douglass](https://www.linkedin.com/in/logan-douglass/) and [Christian Douglass](https://www.linkedin.com/in/buildingenergyprofessional/). For all inquiries regarding REEDR, please contact inquiries@ptarmiganconsulting.com.

Significant funding for REEDR was provided by the [Regional Technical Forum (RTF)](https://rtf.nwcouncil.org/). The RTF is a technical advisory committee to the [Northwest Power and Conservation Council](https://www.nwcouncil.org/) established in 1999 to develop standards to verify and evaluate energy efficiency savings.

# License
REEDR is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

REEDR is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with REEDR. If not, see <[https://www.gnu.org/licenses/](https://www.gnu.org/licenses/)>. ",3,3,1,0,energy-efficiency,"[buildingenergymodeling, buildings, energy-efficiency, energyplus, energyplus-models]",00000
1459,charging_ledger_ethereum_smart_contract,nicolasfguillaume,N/A,https://github.com/nicolasfguillaume/charging_ledger_ethereum_smart_contract,https://api.github.com/repos/nicolasfguillaume/charging_ledger_ethereum_smart_contract,"Charging Ledger project - Ethereum smart contract programmed with Solidity, for the AngelHack Paris Hackathon 2018","# Charging Ledger project - Ethereum smart contract

Ethereum smart contract programmed with Solidity, for the AngelHack Paris Hackathon 2018. This project was awarded the AngelHack jury's prize.

![winning team](https://github.com/nicolasfguillaume/charging_ledger_ethereum_smart_contract/blob/master/team-angelhack-prize.jpeg)

Use case: more and more electric cars are being charged between 5-7pm, the peak of energy consumption. In order to incentivize car owners to be flexible with the charging hours, they can agree with the grid operator on a 'flexible charge' for a given time, outside of peak time, and receive a bonus in exchange (tokens) from the grid operator.

In the following smart contract, it is possible to create new users and new charge agreements in the blockchain, and to retrieve these pieces of information from the blockchain as well.

This contract can be tested here: https://remix.ethereum.org

Additional resources I found useful:
- https://learnxinyminutes.com/docs/solidity/
- https://github.com/manojpramesh/solidity-cheatsheet
- https://hackernoon.com/ethereum-smart-contracts-lifecycle-multiple-contracts-message-sender-e9195ceff3ec

For further testing with web3.js framework: http://faucet.ropsten.be:3001/
",3,3,2,0,energy-efficiency,"[blockchain, energy-efficiency, ethereum, smart-contracts, solidity]",00000
1460,sustainability,gendant,gendant,https://github.com/gendant/sustainability,https://api.github.com/repos/gendant/sustainability,Automated sustainability auditing and software energy efficiency improvement,"<h2 style=""text-align: center;"">
<img style=""text-align: center;"" src=""https://raw.githubusercontent.com/auditsdigital/sustainability/master/logo.jpg"">
</h2>
 
# Digital Sustainability Audits

[![Build Status](https://github.com/auditsdigital/sustainability/actions/workflows/build.yaml/badge.svg)](https://github.com/auditsdigital/sustainability/actions/workflows/build.yaml)
[![npm](https://img.shields.io/npm/v/sustainability)](https://www.npmjs.com/package/sustainability)
[![npm download count](https://img.shields.io/npm/dm/sustainability)](https://www.npmjs.com/package/sustainability)
[![Coverage Status](https://coveralls.io/repos/github/auditsdigital/sustainability/badge.svg?branch=master)](https://coveralls.io/github/auditsdigital/sustainability?branch=master)
[![Known Vulnerabilities](https://snyk.io/test/github/auditsdigital/sustainability/badge.svg)](https://snyk.io/test/github/auditsdigital/sustainability)
[![MIT License](https://img.shields.io/npm/l/sustainability.svg)](#license)

> A new methodology for assessing the Internet carbon footprint and sustainability of digital services. Computes the carbon footprint (CF) index, determines the energy source of servers, the usage of HTTP2.0, WebP image format, lazy loading on images, font subsetting, etc.
> Effectively generates a customized sustainability report with a set of helpful comments to reduce the CF.

- [Problematic](#Problematic)
- [Our solution](#Our-solution)
- [How it works](#How-it-works)
- [Diagrams](#Diagrams)
- [Try it now](#Try-it-now)
- [Contributions](#contributions-are-welcomed)
- [License](#License)
- [Links](#Links)

## Problematic

Increasing Internet connectivity in everyday life fosters new, or otherwise more energy-intensive, forms of demand that may counterbalance energy savings [[1](https://doi.org/10.1016/j.erss.2018.01.018)].
As example, the rising of web applications and websites. They provide an engaging user experience with the development of a wide range of functionalities and interactive elements but still, they may have an impact on the environment.


## Our solution

Digital Sustainability Audits (DAS) is our solution for an environmentally sustainable transformation of digital resources.

Some of its key features are:

- Automated
- Lighting fast
- Platform agnostic
- Extensible
- User & developer friendly


## How it works

With the help of several audits or test suits we are able to assess digital sustainability of any service with only one thing: a valid URL.

At this moment, audits are divided into two categories: server and design.

### Server audits

Server aspects which are essential for online sustainability.

<p>
<details><summary>Running with renewable energy</summary><br/>
Is it using an eco-friendly hosting solution powered with renewable energy? It will look it up for you.
</details>
<details><summary>Carbon footprint</summary><br/>
What is its carbon footprint and how does it compare with others? It will look it up for you.
</details>
<details><summary>HTTP/2.0</summary><br/>
Is it really using HTTP/2.0 protocol? It will look it up for you.
</details>
<details><summary>Text compression</summary><br/>
Is it compressing all of its text data? It will look it up for you.
</details>
<details><summary>Bot traffic</summary><br/>
Is it preventing bots from wasting its bandwidth? It will look it up for you.
</details>
<details><summary>Cookie optimisation</summary><br/>
Are its cookies optimised and fairly sized? It will look it up for you.
</details>
<details><summary>Browser caching</summary><br/>
Is it taking fully advantage of browser caching? Is it wasting resources? It will look it up for you.
</details>
<details><summary>URL redirects</summary><br/>
Is it wasting resources with URL redirects? It will look it up for you.
</details>

### Design Audits

Targets the website assets that convert code to user consumable content.

<details><summary>WebP images</summary><br/>
Is it using the lightweight but powerful WebP image format on its images? It will look it up for you.
</details>
<details><summary>WebM videos</summary><br/>
Is it using the WebM video format on its videos? It will look it up for you.
</details>
<details><summary>Lazy loading on media</summary><br/>
Is it lazily loading its media assets so they are only downloaded on demand? It will look it up for you.
</details>
<details><summary>Font subsetting</summary><br/>
Is it subseting its fonts to only contain the necessary chars? It will look it up for you.
</details>
<details><summary>Console logs</summary><br/>
Is it handling the error and warning console logs or simply ignoring them? It will look it up for you.
</details>
<details><summary>Pixel energy efficiency</summary><br/>
Is it considering the energy produced by each pixel for displaying its contents? It will look it up for you.
</details>
<details><summary>Dark mode</summary><br/>
Does it have a dark mode theme to save energy? It will look it up for you.
</details>
<details><summary>Reactive CSS animations</summary><br/>
Is it implementing some logic to stop/display animations on demand? It will look it up for you.
</details>
<details><summary>Inline assets</summary><br/>
Is it inlining big JS and CSS assets and thus preventing the browser from storing those in memory? It will look it up for you.
</details>
</p>

> Are you ready to try it? 
> - Jump right into the [demo part](#Try-it-now) and see it by yourself!

Or stay for getting to know better the architecture with our diagrams.


## Basic architecture

To better know what exactly does `sustainability` in the background for each run, please [refer to here](https://github.com/auditsdigital/sustainability/blob/master/CONTRIBUTION-dev.md).


## Try it now

### User Interface 

Visit the site [https://audits.digital](https://audits.digital), enter a URL and wait for the report to be generated for you. That's it.

<img style=""text-align: center;"" src=""https://raw.githubusercontent.com/auditsdigital/sustainability/master/ui.png"">

<details><summary>NPM - sustainability </summary>

Install puppeteer (if you don't already have it installed):

`npm i puppeteer`

Install sustainability locally:

`npm i sustainability`

Now you can use it on your Node.js application. Take as example the following code:

```js
const { Sustainability } = require(""sustainability"");

const url = ""https://www.example.org"";

(async () => {
  const report = await Sustainability.audit(url);
  console.log(report);
})();
```

</details>
<details><summary>CLI</summary>

`sustainability [opts] url`<br/>
Which produces the following report object:

```js
{
  globalScore: 88,
  meta: {
    id: '4c21fbb0-ba35-11ea-bd32-09a6ce997b13',
    url: 'https://www.example.org',
    timing: [ 1593454566154, 1593454568225 ]
  },
  audits: [
    { category: [Object], score: 75, audits: [Object] },
    { category: [Object], score: 100, audits: [Object] }
  ]
}
```

</details>
<details><summary>Docker</summary>
<br/>

You can pull the latest `trydas/sustainability` docker image from [this repository](https://hub.docker.com/repository/docker/trydas/sustainability)

Note that you will also need to have a local installation of Redis or a running docker image.

### Environment variables

- REDIS_HOST (default to 127.0.0.1)
- REDIS_PORT (default to 6379)
- FRONTEND_URL (for setting up CORS, default to '*', defaults to null when `NODE_ENV=production` is set)
- REDIS_URL (default to unset)

### With docker compose

1. Run docker-compose file in the root docker folder. <br/>

```sh
cd docker/
docker-compose up -d
```

2. Open up a web browser and visit `http://localhost:8081`

3. Enter a url and run audits

</details>

<details><summary>API</summary>

### class: Sustainability

Sustainability module provides a method to run the sustainability audits on a URL.

<p>
<details><summary>Sustainability.audit(URL, settings)</summary><br/>

- `URL` <[string]> A valid and reachable URL to evaluate. **Warning**: You are responsible for providing a valid URL.
- `settings` <[Object]> Set of configurable settings for the audit. May include the following optional fields:
  - `browser` <[Browser]> Your own puppeteer's browser instance. If you set this options, the API won't spawn a browser instance. This may be useful if you want to make use of the `launch.connect(wsEndpoint)` method to remotely run a headless browser and pass it to the API. **Warning**: You will be responsible for handling the browser instance.
  - `launchSettings` <[Object]> passed to [puppeteer.launch]. Refer to [Puppeteer] documentation for more information. Defaults to `{}`.
  - `connectionSettings` <[Object]> Set of configurable connection settings. May include the following fields:
    - `maxNavigationTime`<[number]> Specifies a timeout in milliseconds (ms) for all the tasks. Defaults to 60000ms.
    - `maxScrollInterval` <[number]> Specifies the scrolling interval in milliseconds (ms) in the function that determines lazy loaded images. Defaults to 30ms.
    - `emulatedDevice` <[Object]> Set of emulated device settings. May include the following fields:
      - `userAgent` <[string]> A user-agent string.
      - `viewport` <[Object]> Set of viewport settings. May include the following fields:
        - `width` <[number]>
        - `height` <[number]>
      - `name` <[string]> Optional
      - `location` <[Object]> Set of location settings. May include the following fields:
        - `name` <[string]> The location name.
        - `latitude` <[number]> Latitude between -90 and 90
        - `longitude` <[number]> Longitude between -180 and 180
        - `accuracy`<[number]> Optional non-negative accuracy value
    - `coldRun` <[boolean]> Should initialise a cold run to find any potential URL redirect. Defaults to true.
    - `streams` <[boolean]> Should push individual audits results as they go. Defaults to false.
    </details>
    <details><summary>Sustainability.auditStream</summary><br/>

A readable stream of audits to pipe from. Used in combination with streams option.

For example:

```js
(async () => {
  Sustainability.auditStream.pipe(process.stdout);
  await Sustainability.audit(url, {
    connectionSettings: { streams: true },
  });
})();
```

</details>
</details>


<details><summary>Debugging</summary>

You can enable verbose logging to see the API in action.
This is done by setting the `DEBUG` environmental variable to `sustainability:*.` or with the `-d` option in the CLI.

For example:

```bash
# Linux
DEBUG=sustainability:* node index.js
# Windows Powershell
$env:DEBUG=sustainability:* node index.js
```

</details>

## Contributions are welcomed

This is open-source software. We highly encourage everyone interested to help pushing up this project.\
Core development? Join the team! Make sure you read first the [contributions-dev notes.](https://github.com/auditsdigital/sustainability/blob/master/CONTRIBUTION-dev.md)\
Found and issue, visibility, business aspects, sharing your thoughts? [Open a new issue](https://github.com/auditsdigital/sustainability/issues/new)\
Sponsoring? Help us to keep the project running in [Open Collective](https://opencollective.com/das).

[puppeteer]: https://github.com/GoogleChrome/puppeteer ""Puppeteer""
[puppeteer.launch]: https://github.com/GoogleChrome/puppeteer/blob/v1.5.0/docs/api.md#puppeteerlaunchoptions ""puppeteer.launch""
[page]: https://github.com/GoogleChrome/puppeteer/blob/v1.5.0/docs/api.md#class-page ""Page""
[browser]: https://github.com/puppeteer/puppeteer/blob/v1.5.0/docs/api.md#class-browser ""Browser""

## License

All the code and documents are licensed under MIT.


## Useful links

- [1] https://doi.org/10.1016/j.erss.2018.01.018.
- DAS video https://www.youtube.com/watch?v=3kDEQy2p4NY 


",3,3,0,5,energy-efficiency,"[energy-efficiency, lighthouse, sustainable-software]",00000
1461,agn-approx,etrommer,N/A,https://github.com/etrommer/agn-approx,https://api.github.com/repos/etrommer/agn-approx,"Code for the paper ""Combining Gradients and Probabilities for Heterogeneours Approximation of Neural Networks"" ","<p align=""center"">
<img width=""400"" height=""400"" src=""https://raw.githubusercontent.com/etrommer/agn-approx/main/docs/agnapprox_logo.png"" alt=""AGN Approx Logo"">
</p>

# AGN Approx
Code and experiments for the paper [Combining Gradients and Probabilities for Heterogeneours Approximation of Neural Networks](https://arxiv.org/abs/2208.07265).
`agnapprox` allows for the study of neural networks using [Approximate Multipliers](https://en.wikipedia.org/wiki/Approximate_computing). It's main purpose is to optimize the _assignment_ of different approximate multipliers to the different layers of a Neural Network.
By learning a perturbation term for each layer, agnapprox finds out which layers are more or less resilient to small errors in the computations. This information is then used to choose accurate/inaccurate approximate multipliers for each layer.
The documentation contains two tutorials on agnapprox' functionality and demonstrates how to optimize a neural network supplied by the user.

## Note
*This package relies on the Python package TorchApprox for GPU-accelerated layer implementations. This package is currently not publicly available. It will likely be made available in late 2022/early 2023. If you need early access, please get in touch*

## Documentation
Detailed Documentation can be found under: [https://etrommer.github.io/agn-approx/](https://etrommer.github.io/agn-approx/)

## Installation
This project is not yet hosted on PyPi. You can install it directly from this repository using `pip`:
```bash
$ pip install git+https://github.com/etrommer/agn-approx.git
```
### Code Formatting & Linting (Development only)
To automatically set up [pre-commit](https://pre-commit.com/), run:
```bash
poetry run pre-commit install
```
### Tiny ImageNet 200
Different from CIFAR10 and MNIST which are available through `torchvision`, the Tiny ImageNet dataset needs to be downloaded manually:
```bash
$ cd <your data dir>
$ wget http://cs231n.stanford.edu/tiny-imagenet-200.zip
$ unzip tiny-imagenet-200.zip
```
The validation images are provided in a flat folder with labels contained in a separate text file. This needs to be changed to a folder structure where each folder is a class containing the respective images. There is a script that handles the conversion:
```bash
$ ./src/agnapprox/datamodules/format_tinyimagenet.py --path <your data dir>/tiny-imagenet-200
```

## Usage

- TODO

## Contributing

Interested in contributing? Check out the contributing guidelines. Please note that this project is released with a Code of Conduct. By contributing to this project, you agree to abide by its terms.

## License

`agnapprox` was created by Elias Trommer. It is licensed under the terms of the GNU General Public License v3.0 license.

## Credits
- `agnapprox` was created with [`cookiecutter`](https://cookiecutter.readthedocs.io/en/latest/) and the `py-pkgs-cookiecutter` [template](https://github.com/py-pkgs/py-pkgs-cookiecutter).
- This work was created as part of my Ph.D. research at Infineon Technologies Dresden
",3,3,1,4,energy-efficiency,"[approximate-computing, backpropagation-learning-algorithm, convolutional-neural-networks, energy-efficiency, machine-learning, mlflow, neural-networks, paper-implementations, python, pytorch, pytorch-lightning, science, statistics]",00000
1462,carbonfootprint,renewable-energy-experiments,renewable-energy-experiments,https://github.com/renewable-energy-experiments/carbonfootprint,https://api.github.com/repos/renewable-energy-experiments/carbonfootprint,Does renewable and energy storage integration green the electric grid ?,"# Renewable Energy Reserach in Seattle University for Green Grid

Save copy of  **Google Collab notebooks**

Data Sets for Grids

1. EIA 

2. CA ISO - http://www.caiso.com/todaysoutlook/pages/supply.aspx (Supply trend
Energy in megawatts broken down by resource in 5-minute increments.)

3. ERCOT - http://www.ercot.com/gridinfo/generation 

5. ISO NE - Real-Time Maps and Charts 

Data Sets for LCOE / Price

1. LCOE estimates from Projected Costs of Generating Electricity 2020
 https://www.iea.org/articles/levelised-cost-of-electricity-calculator 
Assumptions 
Discount rate 7% Central case
Carbon price 30.00 USD/ton Default assumption
Heat price 37.06 USD/MWh Default assumption
Coal price 100% Default assumption
Gas price 100% Default assumption

Kaggle Notebook - https://www.kaggle.com/altanai/lcoe-levelized-cost-of-electricity-generation 


[![Does renewable and energy storage integration green the electric grid by altanai](Does_renewable_and_energy_storage_integration_green_the_electric_grid_altanai.png)](https://vimeo.com/674315507)
",3,3,1,0,energy-efficiency,"[carbon-emissions, carbon-footprint, electricity-consumption, energy-data, energy-efficiency, power-generation, renewable-energy]",00000
1463,Predict-Heating-and-Cooling-Load,doguilmak,N/A,https://github.com/doguilmak/Predict-Heating-and-Cooling-Load,https://api.github.com/repos/doguilmak/Predict-Heating-and-Cooling-Load,The aim is to use the eight features to predict each of the two responses (heating and cooling loads) with multi-output architecture.,"<h1 align=center><font size = 5>Model to Predict Heating and Cooling Load</font></h1>

<img  src=""assets/asset_1.png"" alt=""energy"">

<small>Picture Source: <a  href=""https://github.com/doguilmak"">Doğu İlmak</a></small>

<br>

<h2>Data Set Information:</h2>

<p>We perform energy analysis using <i>12</i> different building shapes simulated in <i>Ecotect</i>. The buildings differ with respect to the <i>glazing area</i>, <i>the glazing area distribution</i>, and the <i>orientation</i>, amongst other parameters. We simulate various settings as functions of the <i>afore-mentioned</i> characteristics to obtain <i>768 building shapes</i>. The dataset comprises <i>768</i> samples and <i>8</i> features, aiming to predict <i>two real valued responses</i>. It can also be used as a <i>multi-class classification problem</i> if the response is rounded to the nearest integer. <b>All the informations about data set referred from <a  href='https://archive.ics.uci.edu/ml/datasets/Energy+efficiency'>archive.ics.uci.edu</a>.</b></p>

<br> 

<h2>Keywords</h2>

<ul>
	<li>Neural Networks</li>
	<li>Energy Efficiency</li>
	<li>Regression</li>
	<li>Computer Science</li>
	<li>Deep Learning</li>
</ul>

<br>

<h2>Attribute Information</h2>  

<p>The dataset contains eight attributes (or features, denoted by X1...X8) and two responses (or outcomes, denoted by y1 and y2). <b>The aim is to use the eight features to predict each of the two responses.</b></p>

<ol>
	<li>X1 Relative Compactness</li>
	<li>X2 Surface Area</li>
	<li>X3 Wall Area</li>
	<li>X4 Roof Area</li>
	<li>X5 Overall Height</li>
	<li>X6 Orientation</li>
	<li>X7 Glazing Area</li>
	<li>X8 Glazing Area Distribution</li>
	<li><b>Output variables: </b></li>
	<ul>
	<li><i>y1 Heating Load</i></li>
	<li><i>y2 Cooling Load</i></li>
	</ul>
</ol>

<br>


<h2>Objectives</h2>

<ul>
	<li>Understand the data set & cleanup (data pre-processing).</li>
	<li>Build <i>Multi-output</i> model to predict heating and cooling load. Afterwards, evaluate the model.</li>
</ul>

<br>

<h2>Files</h2>

<ol>
	<li><p>Heating and cooling loan prediction with <i>multi-output model</i>: <a href=""https://github.com/doguilmak/Predict-Heating-and-Cooling-Load/blob/main/energy_efficiency.ipynb"">energy_efficiency.ipynb</a>. You can use the model last parameters with loading <a  href=""https://github.com/doguilmak/Predict-Heating-and-Cooling-Load/blob/main/saved_model/last_model.h5"">last_model.h5</a> or you can use the whole model <a  href=""https://github.com/doguilmak/Predict-Heating-and-Cooling-Load/tree/main/saved_model"">here</a>.</p></li>
	<li><p>You can review model's <i>loss</i> and <i>mean squared error</i> values in each step: <a href=""https://github.com/doguilmak/Predict-Heating-and-Cooling-Load/blob/main/training.csv"">training.csv</a>. 
</ol>

<br>

<h2>Main Graph</h2>

<img  src=""assets/main_graph.png"" alt=""energy"">

<br>

<h2>Relevant Papers</h2> 

<ul>
	<li><b>A. Tsanas, A. Xifara: 'Accurate quantitative estimation of energy performance of residential buildings using statistical machine learning tools'</b>, Energy and Buildings, Vol. 49, pp. 560-567, 2012</li>
</ul>  

<br>

<h2>Citation Request</h2> 

<ul>
	<li><b>A. Tsanas, A. Xifara: 'Accurate quantitative estimation of energy performance of residential buildings using statistical machine learning tools'</b>, Energy and Buildings, Vol. 49, pp. 560-567, 2012</li>  <br>
	<li>For further details on the data analysis methodology: <b>A. Tsanas, 'Accurate telemonitoring of Parkinson's disease symptom severity using nonlinear speech signal processing and statistical machine learning'</b>, D.Phil. thesis, University of Oxford, 2012</li>
</ul>

<br>

<h2>References</h2>

<ol>
	<li><a href=""https://laurencemoroney.com/"">Laurence Moroney</a></li>
	<li><a href=""https://www.tensorflow.org/tensorboard?hl=tr"">TensorFlow Tensorboard</a></li>
</ol>

<br>

<h2>Contact Me</h2>

<p>If you have something to say to me please contact me:</p> 

<ul>
	<li>Twitter: <a  href=""https://twitter.com/Doguilmak"">Doguilmak</a></li>
	<li>Mail address: doguilmak@gmail.com</li>
</ul>
",3,3,1,0,energy-efficiency,"[deep-learning, energy-efficiency, multi-output-networks, neural-networks]",00000
1464,Udacity_Machine_Learning_Projects,mayur29,N/A,https://github.com/mayur29/Udacity_Machine_Learning_Projects,https://api.github.com/repos/mayur29/Udacity_Machine_Learning_Projects,These are all the assignments from Udacity Nanodegree Machine Learning course,"# Udacity_Machine_Learning_Nanodegree
These are all the assignments from Udacity Nanodegree Machine Learning course
",3,3,1,1,energy-efficiency,"[appliance-monitor, boston-housing-price-prediction, capstone-project, customer-segments, dog-breed-classifier, energy-efficiency, energy-monitor, udacity-course, udacity-machine-learning, udacity-machine-learning-nanodegree, udacity-nanodegree]",00000
1465,biggpy,biggproject,N/A,https://github.com/biggproject/biggpy,https://api.github.com/repos/biggproject/biggpy,Python library of the BIGG AI toolbox,"# biggpy
## AI Toolbox
The Building Information aGGregation, harmonisation and analytics (BIGG) platform is a EU-funded project to aims at 
demonstrating the application of big data technologies and data analytics techniques for the complete buildings 
life-cycle of more than 4000 buildings in 6 large-scale pilot test-beds. 
This repository contains the python library AI Toolbox, which will provide all the AI tools necessary to build a 
machine learning pipeline in the context of WP5 and related business cases and use cases.
For the language-agnostic documentation, please refer to: 
https://github.com/biggproject/biggdocs

## Examples
Some examples of usage are available as Jupyter notebooks in the directory ""notebooks"":
https://github.com/biggproject/biggpy/tree/main/ai_toolbox/notebooks

## License
This library depends on other popular open-source libraries in the AI field, from which it will retain the licenses.
This is a semi-exhaustive list of the dependencies and their licenses:

* [scikit-learn](https://github.com/scikit-learn/scikit-learn) [license](https://github.com/scikit-learn/scikit-learn/blob/main/COPYING)
* [pandas](https://github.com/pandas-dev/pandas) [license](https://github.com/pandas-dev/pandas/blob/master/LICENSE)
* [numpy](https://github.com/numpy/numpy) [license](https://github.com/numpy/numpy/blob/main/LICENSE.txt)
* [statsmodels](https://github.com/statsmodels/statsmodels) [license](https://github.com/statsmodels/statsmodels/blob/main/LICENSE.txt)

",2,2,4,1,energy-efficiency,"[analytics, bigg, data-driven, data-science, energy-data, energy-efficiency, european-project, machine-learning, pandas, python, reinforcement-learning, scikit-learn, time-series]",00000
1466,IOT-based-home-automation-System,nikkkkhil,N/A,https://github.com/nikkkkhil/IOT-based-home-automation-System,https://api.github.com/repos/nikkkkhil/IOT-based-home-automation-System,"I designed this system to control the electrical appliances and monitor the room temperature using the mobile application, I used embedded controller board and the home appliances which are physically connected to output ports of this board via relays.Cayenne IOT platform is used to establish wireless communication between the Android phone and embedded devices using MQTT protocol, Mobile application is developed to provide a user-friendly graphical user interface (GUI) for remotely controlling on home appliances and monitoring the values, User will get SMS/email alert if the value reaches set value. Device data captured in real-time enables the execution of triggered events. We can easily keep track of all events.","{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",2,2,1,0,energy-efficiency,"[automation, cayenne, energy-efficiency, iot, mqtt, renewable-energy, smartmeter]",00000
1467,bhl6-smart-power,radziminski,N/A,https://github.com/radziminski/bhl6-smart-power,https://api.github.com/repos/radziminski/bhl6-smart-power,":1st_place_medal: Power optimization system made for Best Hacking League hackathon, which won first place for the best software solution. ","# Smart Power - Dokumentacja

## Zespół: Drineczki _( W. Łazarski, J. Radzimiński, J.Szumski, K. Kamieniarz )_

## 1. Analiza występujących procesów

Wcałymcyklugrzewczymwyróżniamydwagłówneprocesy:ogrzewaniewodyoraz
utrzymanie odpowiedniej temperatury. Są to dwa główne źródła, które generują
zapotrzebowanie na energię elektryczną. Dodatkowo mamy jeszcze pobór energii na
pozostałe urządzenia, jednak przyjmujemy, że jeston stały dla danych godzin operowania.

**Ogrzewanie wody:**
Zbiornik na wodę pozwala na nagromadzenie 150 litrów ciepłej wody.Średnie zużycie
dobowewodywynosi 180 litrów.Wtrakciecałegoprocesuzakładamy,żenaszzbiorniknie
traciciepławody,niepotrzebujemywięcenergiiabyutrzymaćjejtemperaturę.Zakładamy,
że w momencie włączenia nagrzewania nasz zbiornikwypełniony jest wodą.

**Utrzymanie temperatury w domu:**
Konsumpcjaenergiiprzezsystemogrzewaniawgłównejmierzezależnajestodtemperatury
panującej na zewnątrz. Determinuje ona tempo utraty ciepłaz domu oraz pobór mocy
wymagany na podniesienie temperatury o 1 stopień Celsjusza.
Dodatkowowdomu dostępnyjestrekuperator,który pozwalana wyrównywanieśredniej
temperatury między pokojami. System ogrzewania dąży do utrzymania temperatur
zdefiniowanych przez użytkownika.

Mamy dostępne następujące źródła energii elektrycznej:

- ogniwa fotowoltaiczne
- akumulator
- sieć elektryczną

## 2. Wybór i uzasadnienie podejścia

Zacznijmy od zdefiniowania sobie pewnego okresu czasowego T.

Następnie T dzielimy na równe okresy z których każdywynosi np. godzinę

W kolejnym kroku obliczamy wszystkie możliwe kombinacje pracy naszego systemu
zarządzania energią.

Gdzie mito tryb działania systemu

NastępniedlakażdegoodcinkaczasowegowTobliczamykosztwydanejenergiizsieciprzy
uwzględnionychparametrachwyjściowychzpoprzedniegoodcinkaczasowego(ilośćmocy


akumulatora, temperatura pomieszczenia) Dodatkowo wykorzystujemy OpenWeather API
aby prognozować pogodę i zachmurzenie na następnyodcinek czasowy.

Input: <br />
- temperatura pomieszczenia osiągnięta w poprzednimodcinku czasowym <br />
- wartość naładowania akumulatora osiągnięta w poprzednimodcinku czasowym <br />
- przewidywana temperatur dla nowo rozpatrywanego odcinkaczasowego <br />
(OpenWeather API)
- przewidywane zachmurzenia dla nowo rozpatrywanegoodcinka czasowego <br />
(OpenWeather API) <br />
Output:
- nowa temperatura pomieszczenia po odcinku czasowymprzy założeniu trybu _mi_ v
- nowa wartość mocy akumulatora przy założeniu trybu _mi_ <br />
- estymowana wartość kosztów energii dla danej iteracji <br />

Ostatecznie, sumujemy całkowity koszt energii elektrycznejz sieci dla całego ciągu trybów
działania

```
{m1 , m4 , m2 , m1 } → 5
{m2 , m1 , m2 , m4 } → 7
{m4 , m1 , m4 , m2 } → 6
{m1 , m1 , m3 , m3 } → 13
```

Jako tryb pracy systemu w następnym odcinku czasowymwybieramy pierwszy tryb z ciągu,
który zwrócił najmniejszy przewidywany koszt.

## 3. Sposób wykorzystania poszczególnych informacji i danych

Wszystkie dostępne informacje są wykorzystane w celu estymacji energii elektrycznej
którą użytkownik będzie zmuszony pobrać z sieci aby następnie wyliczyć koszty tego
poboru. Podane informacje tworzą nietrywialną funkcję, któranastępnieminimalizujemy
algorytmem opisanym wcześnie.

## 4. Wybór technologii, wymagania systemowe

Jako główną architekturą systemu zastosowaliśmy standardową architekturę webową
- klient-serwer. Klientem jest aplikacja webowa napisana w TypeScript przy użyciu
frameworkuReact.js.SerwerzostałnapisanywPythoniejakoformieRESTAPI,przyużyciu
frameworka Flask. Algorytmy użyte w funkcjach optymalizacyjnych również zostały
napisane w Pythonie jako oddzielne moduły wykorzystywane przez serwer. Całość
komunikacji odbywa się przy użyciu zapytań HTTP.
    Taka architektura pozwala na uruchomienie aplikacji na każdym urządzeniu
obsługującym przeglądarki internetowe. Dodatkowo, większość kalkulacji odbywasię na
oddzielnym serwerze(docelowo umieszczonym w chmurze) przez co mocobliczeniowa
danego urządzenia nie jest istotna. Serwer w chmurze pozwoliłby również na łatwe
przyłączanie kolejnych modułów / urządzeń do systemuw przyszłości.

## 5. Testowalność rozwiązania

Testy naszegosystemu polegałyby nastworzeniuscenariuszysymulacjisystemu i
monitorowaniarozwiązaniapodwzględemestymatykosztówwzględemludzkiegoustalania
trybówpracy.Oczywiścieszeregscenariuszytestowychpozwoliłbynamnamonitorowanie
systemu i jego zachowań w różnych sytuacjach.
Scenariusz to nic innego jak asynchroniczny szereg wywołań różnych zmian
dziejących sięzarównowdomuijegootoczeniu.Dziękilicznym,,mockowym”modułom
symulującymurządzeniadomowe(którestworzyliśmyjakoniezależnemodułyPythonowe),
system możnaprzetestowaćniezależnieodbrakującychwdanymmomencie(fizycznych)
urządzeń czy elementów.


## 6. Zrealizowanie sterowania zarządzaniem energią

Sterowanietrybemdziałania sterownikazarządzającegoenergiązaimplementowane
jest po stronie serwera przy użyciu algorytmu opisanegopowyżej.

## 7. Biblioteka obsługująca sterowalne komponenty

W celu testowania odpowiednich komponentów systemu stworzyliśmy moduł
pythonowydziałającypostronieserwera,któryimitujedziałanieurządzeńwróżnychporach
roku-abydostosowaćtemperatur-orazdnia-abydostosowaćnasłonecznienie,potrzebnew
celu wyliczenia efektywności paneli fotowoltaicznych.

## 8. Konfigurowalność

System jest w pełni konfigurowalny oraz skalowalny,wymaga to tylko i wyłącznie
zaimplementowania i wdrożenia kolejnych implementacji urządzeń. Sama konfiguracja
wartościdziałaniaurządzeń dladanychodcinkówczasowychmożna zostaćustawionana
konfigurację domyślną - sparsowane z napisanego apilub ustawićsztywno na wartość
domyślną.Żadnaztychopcjiniewykluczastworzeniamodułudomanualnegoustawienia
tych parametrów przez użytkownika.

## 9. Niezawodność systemu

System jest niezawodny w tym sensie, że automatycznie dobiera możliwie najlepszy
tryb pracy biorąc pod uwagę przewidywania pogodowe dot.przyszłości. Jednocześnie jeśli
system niekoniecznie dokona prawidłowej estymaty np.poprzezzłą prognozępogody to
ciągle odpowiedni tryb pracy dostarczy odpowiednie zapotrzebowanie energetyczne. Z
punktuwidzeniaużytkownikanicsięniezmieni-domsamwinteligentnysposóbbędziesię
starałdobraćtrybpracysystemuabydostosowaćodpowiedniątemperaturępowietrzaiwody,
minimalizując przy tym koszty energii elektrycznej.


",2,2,2,0,energy-efficiency,"[alogrithms, energy-efficiency, energy-monitor]",00000
1468,Minion,gokulshriyam,N/A,https://github.com/gokulshriyam/Minion,https://api.github.com/repos/gokulshriyam/Minion,Minion - World's Smallest AI Energy Auditor,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1DB:2319:69E246:DB4B1C:65224326.'}",2,2,1,0,energy-efficiency,"[artificial-intelligence, data-analysis, data-science, data-visualization, energy-disaggregation, energy-efficiency, energy-monitor, predictive-analytics]",00000
1469,ease-2020-replication-package,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/ease-2020-replication-package,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16C:1ECC:2A843A:587371:652240C9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1470,Buildings_Energy_Efficiency,jarred13,N/A,N/A,https://api.github.com/repos/jarred13/Buildings_Energy_Efficiency,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C16A:58D0:77B5B7:F6654E:65224327.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1471,X10-Web-Remote-Control-IoT,nicolasfguillaume,N/A,N/A,https://api.github.com/repos/nicolasfguillaume/X10-Web-Remote-Control-IoT,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1CF:1F34:1BAE15C:38E4006:65224327.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1472,ecoJoin,TU-Berlin-DIMA,N/A,N/A,https://api.github.com/repos/TU-Berlin-DIMA/ecoJoin,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D9:58D0:77B6E6:F667A1:65224328.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1473,rladies-clusters,CaitHRobinson,N/A,N/A,https://api.github.com/repos/CaitHRobinson/rladies-clusters,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C167:11F8:2C4C86:5C00A7:652240C7.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1474,annex,IEA-EBC-Annex86,N/A,N/A,https://api.github.com/repos/IEA-EBC-Annex86/annex,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1B1:0C3C:75EAA8:F353A4:65224329.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1475,energy-efficiency-private-rental,BBC-Data-Unit,N/A,N/A,https://api.github.com/repos/BBC-Data-Unit/energy-efficiency-private-rental,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C11A:58D0:77B7ED:F669C1:65224329.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1476,Whitepapers,RightMesh,N/A,N/A,https://api.github.com/repos/RightMesh/Whitepapers,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1E1:46E9:75EC98:F33A37:6522432A.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1477,CG_LPC_Board,climateguard,N/A,N/A,https://api.github.com/repos/climateguard/CG_LPC_Board,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1F5:7AEF:2DDED05:5DCD16C:6522432A.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1478,sproxy,leighgarbs,N/A,N/A,https://api.github.com/repos/leighgarbs/sproxy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C183:1CC6:2A373F1:56A584C:652240CB.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1479,msr-2021-robotics-green-architectural-tactics-replication-package,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/msr-2021-robotics-green-architectural-tactics-replication-package,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C162:5831:2BC3B6B:59AFC79:6522432B.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1480,Energy-Efficient,iamgmujtaba,N/A,N/A,https://api.github.com/repos/iamgmujtaba/Energy-Efficient,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C185:11F8:2C5739:5C16F9:652240D2.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1481,ICWE-2021,stefanhuber,N/A,N/A,https://api.github.com/repos/stefanhuber/ICWE-2021,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C19A:29CE:3308332:68261BE:6522432B.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1482,ESPTherm,andreabak,N/A,N/A,https://api.github.com/repos/andreabak/ESPTherm,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1FD:5934:286ADAC:531BCA1:6522432C.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1483,HeizungsLuefter,mkoegel,N/A,N/A,https://api.github.com/repos/mkoegel/HeizungsLuefter,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C184:05EF:6F144A:E5B4A1:6522432C.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1484,hulc2envolventecte,pachi,N/A,N/A,https://api.github.com/repos/pachi/hulc2envolventecte,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1DA:178A:2CA8A92:5B6DF40:6522432D.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1485,krach-go,krach-protocol,N/A,N/A,https://api.github.com/repos/krach-protocol/krach-go,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C157:3BF5:747D5F:F045B8:6522432D.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1486,file-ingestor,jairamr,N/A,N/A,https://api.github.com/repos/jairamr/file-ingestor,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1C3:5831:2BC3E2F:59B0232:6522432E.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1487,MATLAB-code-for-LEACH-optimization-in-WSN,earthat,N/A,N/A,https://api.github.com/repos/earthat/MATLAB-code-for-LEACH-optimization-in-WSN,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1A1:4179:2DF7316:5E11E23:6522432E.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1488,smart-control-algorithm,philippedeb,N/A,https://github.com/philippedeb/smart-control-algorithm,https://api.github.com/repos/philippedeb/smart-control-algorithm,Simulation environment and concise implementation of proposed smart control algorithm for renewable energy assets.,"# Smart control algorithm
This repository contains a concise implementation of the smart control algorithm proposed in a research paper by Philippe de Bekker. Based on analysing various designed cases, the paper defined the heuristics of a smart control algorithm that matches power supply and demand optimally. The core of improvement of the smart control algorithm is exploiting future knowledge, which can be realized by current state-of-the-art forecasting techniques, to effectively store and trade energy. In addition, a simulation environment is provided.

[![DOI](https://zenodo.org/badge/559328784.svg)](https://zenodo.org/badge/latestdoi/559328784)

## Installation

Use the package manager [pip](https://pip.pypa.io/en/stable/) to run this repository.

```bash
pip install -r requirements.txt
```

## Usage
Create an instance of `OptimizedModel` (i.e. provide data and a `Battery` instance) and call `run()`.


## License
[No License](https://choosealicense.com/no-permission/) (= No Permission)
",1,1,1,0,energy-efficiency,"[algorithmic-trading, energy-efficiency, renewable-energy, smart-grid]",00000
1489,lit-io.github.io,lit-io,N/A,N/A,https://api.github.com/repos/lit-io/lit-io.github.io,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C14F:1D49:2C3E5EA:5AB1272:652240DA.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1490,LowVoltageDNNonFPGA,NeuroFan,N/A,N/A,https://api.github.com/repos/NeuroFan/LowVoltageDNNonFPGA,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C146:6A74:1A3CAB4:360A031:6522432F.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1491,A3-EPC-baseline-identification,biggproject,N/A,N/A,https://api.github.com/repos/biggproject/A3-EPC-baseline-identification,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C15F:784E:768024:F4A77F:65224330.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1492,ParticleFilter_UpdraftEstimator,ifrunistuttgart,N/A,N/A,https://api.github.com/repos/ifrunistuttgart/ParticleFilter_UpdraftEstimator,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1DA:178A:2CA8DD0:5B6E600:65224330.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1493,Novacoding,vildan878,N/A,N/A,https://api.github.com/repos/vildan878/Novacoding,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11E:2772:28CF9A1:53F39F3:652240E1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1494,c4e-chain,chain4energy,N/A,N/A,https://api.github.com/repos/chain4energy/c4e-chain,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C123:418F:2A76F67:56D27C3:65224331.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1495,RecSys_for_energy_efficiency,AlonaZharova,N/A,N/A,https://api.github.com/repos/AlonaZharova/RecSys_for_energy_efficiency,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C149:7B5B:73924D:EE5255:65224331.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1496,ecolookuptool,eco-watch,N/A,N/A,https://api.github.com/repos/eco-watch/ecolookuptool,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1A1:4179:2DF7685:5E12530:65224332.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1497,Engie-Hackathon-2016-Projet-PERLE,nicolasfguillaume,N/A,N/A,https://api.github.com/repos/nicolasfguillaume/Engie-Hackathon-2016-Projet-PERLE,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1AE:607B:798F33:FA6E35:65224332.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1498,maps-LvsS,green-haskell,N/A,N/A,https://api.github.com/repos/green-haskell/maps-LvsS,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1F4:5AB9:2C562E1:5AD3FFD:65224333.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1499,Efficient-Computing-in-a-Safe-Environment,milouk,N/A,N/A,https://api.github.com/repos/milouk/Efficient-Computing-in-a-Safe-Environment,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EE:1CC6:2A39034:56A92C9:652240E9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1500,polito-campus-energy-dashboard-docs,baeda-polito,N/A,N/A,https://api.github.com/repos/baeda-polito/polito-campus-energy-dashboard-docs,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C156:4F4C:72F059:ED33CA:65224333.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1501,RUBICON,HYDesmondLiu,N/A,N/A,https://api.github.com/repos/HYDesmondLiu/RUBICON,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C188:5A27:725196:EC2466:65224334.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1502,degree-days-net,dgabbe,N/A,N/A,https://api.github.com/repos/dgabbe/degree-days-net,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C107:092A:715781:EA4709:65224335.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1503,orcpy,mehran-hmdpr,N/A,N/A,https://api.github.com/repos/mehran-hmdpr/orcpy,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1EE:178A:2CA9291:5B6EFD0:65224335.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1504,energyLedger,open-risk,N/A,N/A,https://api.github.com/repos/open-risk/energyLedger,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C11F:5F41:70182F:E7C26C:65224336.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1505,Linear-Regression-Energy-Efficiency,njoaquinacosta,N/A,N/A,https://api.github.com/repos/njoaquinacosta/Linear-Regression-Energy-Efficiency,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C178:178A:2CA93B6:5B6F224:65224336.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1506,EnergyManagement,MobiliyaTechnologies,N/A,N/A,https://api.github.com/repos/MobiliyaTechnologies/EnergyManagement,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C165:38A4:2BC0D2E:59C84B6:652240F0.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1507,hcem,hawaii-clean-energy-metrics,N/A,N/A,https://api.github.com/repos/hawaii-clean-energy-metrics/hcem,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AD:17C0:293A25:55F390:652240F1.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1508,GREENgrading,spapadopoulos,N/A,N/A,https://api.github.com/repos/spapadopoulos/GREENgrading,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C18A:7AEF:2DDF8E3:5DCEA01:65224337.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1509,BoilerOptimizer,TheFloatingLab,N/A,N/A,https://api.github.com/repos/TheFloatingLab/BoilerOptimizer,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C166:092A:715A16:EA4C57:65224337.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1510,AI-Energy-Mangement-System,AmedBrook,N/A,N/A,https://api.github.com/repos/AmedBrook/AI-Energy-Mangement-System,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1E8:607B:7994AB:FA797F:65224338.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1511,micat,fraunhofer-isi,N/A,N/A,https://api.github.com/repos/fraunhofer-isi/micat,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D9:58D0:77C744:F68981:65224338.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1512,tibber_live,GitHub4Eddy,N/A,N/A,https://api.github.com/repos/GitHub4Eddy/tibber_live,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C178:2EE5:285E894:530D42D:652240E3.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1513,NeighborhoodSim,UCSD-SEELab,N/A,N/A,https://api.github.com/repos/UCSD-SEELab/NeighborhoodSim,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1CB:41B1:718055:EAD902:65224339.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1514,conectric-usb-gateway,Conectric,N/A,N/A,https://api.github.com/repos/Conectric/conectric-usb-gateway,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1A9:3819:1AF93AA:3777B36:6522433B.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1515,sustainablinds,Enprogames,N/A,N/A,https://api.github.com/repos/Enprogames/sustainablinds,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DA:2EE5:285F12F:530E62A:652240ED.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1516,Pulp_MILP-Hybrid-Energy-Optimization,AmedBrook,N/A,N/A,https://api.github.com/repos/AmedBrook/Pulp_MILP-Hybrid-Energy-Optimization,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C19F:3BF5:74894C:F05E8B:6522433B.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1517,chakib-belgaid,chakib-belgaid,N/A,N/A,https://api.github.com/repos/chakib-belgaid/chakib-belgaid,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2DD17C:5EE79F:652240EE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1518,utility_app,anthonyho,N/A,N/A,https://api.github.com/repos/anthonyho/utility_app,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11A:58D0:75AE7D:F234B8:65224133.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1519,Energy-Efficient-Contention-Aware-Application-Scheduling,JishanBaig,N/A,N/A,https://api.github.com/repos/JishanBaig/Energy-Efficient-Contention-Aware-Application-Scheduling,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C118:0C72:72E65A:ED5CAA:6522433C.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1520,ann-energy-efficiency,mereshow,N/A,N/A,https://api.github.com/repos/mereshow/ann-energy-efficiency,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C13F:58D0:77CAF6:F690F9:6522433C.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1521,hack-the-electron-a,antonioalmeida,N/A,N/A,https://api.github.com/repos/antonioalmeida/hack-the-electron-a,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C170:7AEF:2DDFE1B:5DCF4D4:6522433D.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1522,Arduino-controlled_mains_on_off_relay,ecofrugalism,N/A,N/A,https://api.github.com/repos/ecofrugalism/Arduino-controlled_mains_on_off_relay,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C149:7B5B:739DB8:EE69D7:6522433D.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1523,dramEnergyMeasuring,green-haskell,N/A,N/A,https://api.github.com/repos/green-haskell/dramEnergyMeasuring,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1BD:178A:2CA9BAD:5B702A3:6522433E.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1524,smart-pv.github.io,smart-pv,N/A,N/A,https://api.github.com/repos/smart-pv/smart-pv.github.io,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1DC:309A:2E67065:5EACF64:6522433E.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1525,Applied-Measurement-and-Control--Building-Optimization,adielbatson,N/A,N/A,https://api.github.com/repos/adielbatson/Applied-Measurement-and-Control--Building-Optimization,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C198:4678:1ADD714:37517A2:6522433F.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1526,bps-feasibility,retrofit-lab,N/A,N/A,https://api.github.com/repos/retrofit-lab/bps-feasibility,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C126:4179:2DF845A:5E141E4:65224340.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1527,CrefThinkspace,Crefeda,N/A,N/A,https://api.github.com/repos/Crefeda/CrefThinkspace,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C186:4771:2A6FFB:5833DE:652240F9.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1528,SIH-Project-on-Energy-Management-Systsem,aarushi-code,N/A,N/A,https://api.github.com/repos/aarushi-code/SIH-Project-on-Energy-Management-Systsem,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D9:58D0:77CE53:F69838:65224340.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1529,poseidon,matheusvnm,N/A,N/A,https://api.github.com/repos/matheusvnm/poseidon,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C182:1F34:1BAF922:38E715D:65224341.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1530,Wave,soranoalejandro,N/A,N/A,https://api.github.com/repos/soranoalejandro/Wave,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C150:4678:1ADD8FB:3751B91:65224341.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1531,Boiler-Modeling-Neural-Network,joshuaaduarte,N/A,N/A,https://api.github.com/repos/joshuaaduarte/Boiler-Modeling-Neural-Network,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1D2:1E3B:2FDB648:61C8B9A:65224342.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1532,ProvaCalcolatoreEnergia,PaninoCode,N/A,N/A,https://api.github.com/repos/PaninoCode/ProvaCalcolatoreEnergia,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13B:17C0:2943CC:5607C0:652240FC.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1533,utility_analysis,anthonyho,N/A,N/A,https://api.github.com/repos/anthonyho/utility_analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10C:4776:2BD489:5AFFE9:652240F4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1534,Energy-Efficiency-Dataset,73radiodolphins,N/A,N/A,https://api.github.com/repos/73radiodolphins/Energy-Efficiency-Dataset,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C19E:6611:6E799D:E48898:65224342.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1535,Fetch-and-add-y-Spin-Lock-ARMv8,AbelChT,N/A,N/A,https://api.github.com/repos/AbelChT/Fetch-and-add-y-Spin-Lock-ARMv8,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C168:6611:6E7A02:E48956:65224343.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1536,Arezza,ArezzaNet,N/A,N/A,https://api.github.com/repos/ArezzaNet/Arezza,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1C2:3BF5:74900D:F06CBB:65224343.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1537,physalia-saas,TQRG,N/A,N/A,https://api.github.com/repos/TQRG/physalia-saas,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12C:5AB9:2C3574E:5A903E9:65224123.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1538,REPR-README,jsong336,N/A,N/A,https://api.github.com/repos/jsong336/REPR-README,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1F7:7AEF:2DE0471:5DD0206:65224344.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1539,sustainable-games-toolkit,Kreateer,N/A,N/A,https://api.github.com/repos/Kreateer/sustainable-games-toolkit,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C16A:58D0:77D2A3:F6A10C:65224345.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1540,geovation,carboncoop,N/A,N/A,https://api.github.com/repos/carboncoop/geovation,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C117:7B5B:73A57E:EE7A19:65224345.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1541,HVAC-Monitoring,justjoshtings,N/A,N/A,https://api.github.com/repos/justjoshtings/HVAC-Monitoring,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C19C:984A:769DFB:F4A8C2:65224346.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1542,energy-measures-android-apps-benchmark,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/energy-measures-android-apps-benchmark,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E6:7890:2A2C8A:57CCCE:65224102.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1543,precision-x1-curve-editor,mhtvsSFrpHdE,N/A,N/A,https://api.github.com/repos/mhtvsSFrpHdE/precision-x1-curve-editor,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1C3:5831:2BC55A9:59B32BF:65224346.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1544,Enemax,KOSASIH,N/A,N/A,https://api.github.com/repos/KOSASIH/Enemax,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CB:2772:28D2251:53F8D68:65224106.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1545,energy-storage,jmartin87,N/A,N/A,https://api.github.com/repos/jmartin87/energy-storage,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C1AD:36DF:3571492:6CF59F1:65224347.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1546,CPU_Scheduling_Review,PeterHUistyping,N/A,N/A,https://api.github.com/repos/PeterHUistyping/CPU_Scheduling_Review,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C169:41B1:718C22:EAF1AD:65224347.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1547,rlmd,raja-grewal,N/A,N/A,https://api.github.com/repos/raja-grewal/rlmd,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C124:5AB9:2C575E3:5AD6775:65224348.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1548,dmark,retevastum,N/A,N/A,https://api.github.com/repos/retevastum/dmark,N/A,"{'documentation_url': 'https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits', 'message': 'You have exceeded a secondary rate limit. Please wait a few minutes before you try again. If you reach out to GitHub Support for help, please include the request ID C103:6A74:1A3DF58:360CB21:65224348.'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1549,HouseHold_Energy-_consumption_Analytics,SamAlqarzi,N/A,N/A,https://api.github.com/repos/SamAlqarzi/HouseHold_Energy-_consumption_Analytics,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C165:73C7:700B08:E7551B:6522411F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1550,Spaceport,santiHerranz,N/A,N/A,https://api.github.com/repos/santiHerranz/Spaceport,N/A,"
# Spaceport

Imaging future space port infrastructure by @santiherranz

![Space Port concept](<images/spaceport-track.png>)



## INTRODUCTION

* [Easy space](introduction/easy-space.md)

## Space Port

* [Launcher](spaceport/launcher.md)
* [Lander](spaceport/lander.md)

## Configurations

* [Basic](configurations/basic.md)
* [Star](configurations/star.md)
* [Pyramid](configurations/pyramid.md)

",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1551,batterydrainer,S2-group,S2-group,https://github.com/S2-group/batterydrainer,https://api.github.com/repos/S2-group/batterydrainer,,"
# BatteryDrainer

BatteryDrainer is an android app aiming to drain the phone's battery as fast as possible. 

<a href=""https://play.google.com/store/apps/details?id=nl.vu.cs.s2group.batterydrainer""><img src=""https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png"" alt=""Download on Google Play"" height=""75""></a>

***Why?*** With this application we demonstrate the need for energy-efficient software and sustainable software engineering practices in battery-powered devices, like phones or tablets. 

As of 2022, IT systems alone already consume 10% of global electricity and by 2030 it is estimated that, the Internet, data centers, telecommunication, and embedded devices will consume one third of the global energy demand. Renewable energy is only a half solution. To address the root causes we need green IT in order to sustainably reduce the energy need of data centers and cloud services worldwide [1].

[[1]](https://ieeexplore.ieee.org/abstract/document/9585139) R. Verdecchia, P. Lago, C. Ebert and C. de Vries, ""Green IT and Green Software,"" in IEEE Software, vol. 38, no. 6, pp. 7-15, Nov.-Dec. 2021, doi: 10.1109/MS.2021.3102254.

| ![screenshot choices](images/screenshot-choices.jpg) | ![screenshot running](images/screenshot-running.jpg) | ![screenshot splash screen](images/screenshot-splash.jpg) |
| ---------------------------------------------- | -------------------------------------------- | ------------------------------------------- |

## Features :wrench:

Currently BatteryDrainer uses the following hardware features to drain the phone's batter:

* CPU - Threads doing expensive computations (SHA-512 hashes)
* GPU - Using [OpenGL ES 2.0](https://www.khronos.org/opengles/) to draw thousands of small rotating pyramids
* Camera - Using the [CameraX API](https://developer.android.com/training/camerax)
* Hardware sensors - Utilizes all of the device's available sensors (accelerometer, gyroscope, proximity, etc.) using the highest possible sampling rate.
* Network - Repeatedly downloads a large file over the network (WiFi or Cellular network)
* GPS chip - Using [precise location accuracy](https://developer.android.com/training/location/permissions#accuracy)

## How to contribute :rocket:

If you want to contribute, simply clone this repository, prototype your idea or bug fix, and finally create a pull request!

If you would like to implement a future feature, make sure to checkout [ROADMAP.md](ROADMAP.md).

## Contact :raising_hand:

This application has been developed by the [Software and Sustainability (S2) research group](https://s2group.cs.vu.nl/) of the Vrije Universiteit Amsterdam. For any questions regarding this app, you can reach out to us at [greenlab.vu@gmail.com](mailto:greenlab.vu@gmail.com).
",0,0,2,1,energy-efficiency,"[android, energy-efficiency]",00000
1552,Energy-Efficiency-Enhancement,Xer0bit,N/A,N/A,https://api.github.com/repos/Xer0bit/Energy-Efficiency-Enhancement,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:0E7B:1A1BC39:35C722E:65224123.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1553,sleepysb,Winlentia,N/A,https://github.com/Winlentia/sleepysb,https://api.github.com/repos/Winlentia/sleepysb,Project generated for put mac sleep mode while watching something during sleeping,"{'message': 'Not Found', 'documentation_url': 'https://docs.github.com/rest/repos/contents#get-repository-content'}",0,0,1,0,energy-efficiency,"[energy-efficiency, energy-saver, mac-application, macos, macos-development, macos-utilities, macossleep, macsleep, power-management, powermanagement, putmacsleep, sleep-control, sleep-timer, sleepapp, swift, swift-programming, system-sleep]",00000
1554,Arduino-based_12V_battery_charger,ecofrugalism,N/A,https://github.com/ecofrugalism/Arduino-based_12V_battery_charger,https://api.github.com/repos/ecofrugalism/Arduino-based_12V_battery_charger,12V battery charger based on an arduino with LCD panel and keypad,"# Arduino-based_12V_battery_charger
12V battery charger based on an arduino with LCD panel and 3x3 matrix keypad
",0,0,1,0,energy-efficiency,"[arduino, electronics, energy-efficiency]",00000
1555,ESTRELINHA,EduFreit4s,N/A,https://github.com/EduFreit4s/ESTRELINHA,https://api.github.com/repos/EduFreit4s/ESTRELINHA,Estrelinha é um painel solar inteligente com microcontrolador Arduíno. Projeto de conclusão das disciplinas: Algoritmos e lógica de programação e Introdução a engenharia elétrica 2019.1,"

<h1 align=""center"">
    
    Estrelinha - Um rastreador solar com arduino
</h1>

<h1 align=""center"">
  <img src=""https://github.com/EduFreit4s/ESTRELINHA/blob/master/images/estrelinha_1.jpg"" width=60%>
</h1>
  
<p align=""center"">
  <a href=""#introducao"">Introdução</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  <a href=""#objetivos"">Objetivos</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  <a href=""#materiais"">Materiais</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  <a href=""#metodologia"">Metodologia</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  <a href=""#resultados"">Resultados</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  <a href=""#conclusão"">Conclusão</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  <a href=""#referências"">Referências</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  <a href=""#sobre"">Sobre</a>
</p>

### Introdução

>&nbsp;&nbsp;&nbsp;&nbsp; Painéis solares são o jeito mais fácil de obter energia limpa e renovável. Os painéis
fixos são a maneira mais barata para isso. Tipicamente os painéis solares são instalados com a
face voltada para norte ou sul cartográfico (dependendo do hemisfério onde se encontra) e
com uma inclinação abaixo da latitude local. Isso garante que a produção energética anual
seja boa, mas não significa que os painéis estejam gerando tanta energia quanto possível. Isso
acontece devido ao fato que as células que compõe um painel solar só atingem seu pico de
produção quando o ângulo de incidência dos raios solares é perpendicular à superfície desta
célula. E essa é a proposta da nossa máquina.

<p align=""center"">
  <img src=""https://github.com/EduFreit4s/ESTRELINHA/blob/master/images/intro_1.png"" width=60%>
</p>

### Objetivos

>&nbsp;&nbsp;&nbsp;&nbsp; Julho de 2019 foi o mês mais quente da história segundo a organização meteorológica mundial. O último relatório climático da ONU apontou que o planeta já está um grau celsius
mais quente do que antes da revolução industrial. É pouco, mas o suficiente para modificar o clima de forma irreversível. Hodiernamente, precisamos transformar nossa matriz energética em uma escala global. “Essa é a corrida da nossa vida, por nossas vidas”. E se a gente não pensar fora da caixa, a nossa história nesse pálido ponto azul será breve. Foi pensado que o primeiro passo poderia ser dado conseguir maximizar a eficiência da tecnologia atual, não apenas do ponto de vista de consumo, mas também da produção que é a função de um rastreador solar.

<p align=""center"">
  <img src=""https://github.com/EduFreit4s/ESTRELINHA/blob/master/images/objetivo.png"" width=60%>
</p>

### Materiais

> ➔ 2 servos SG90  
➔ Arduino nano  
➔ 4 ldrs 10mm  
➔ 4 resistores de 10㏀  
➔ 1 resistor 220Ω  
➔ 1 cooler  
➔ Mini protoboard  
➔ Jumpers  
➔ Estrutura em madeira  
➔ Parafusos

<p align=""center"">
  <img src="""" width=60%>
</p>

### Metodologia

>&nbsp;&nbsp;&nbsp;&nbsp; Existe diversas formas de seguir o sol. Alguns sistemas se destacam por terem a possibilidade de executar múltiplos movimentos. Com um eixo, é possível acompanhar a estrela ao longo do dia. Esse sistema é o mais adotado atualmente, principalmente em fazendas solares (usinas) onde mais se empregam essa tecnologia.   
&nbsp;&nbsp;&nbsp;&nbsp; Já com dois eixos é possível compensar a inclinação da terra ao longo das estações.
Isso torna o sistema ainda mais produtivo.  
Nosso protótipo conta com dois eixos. Isso significa que ele é capaz de se inclinar para
quatro direções diferentes, além disso, esses movimentos são coordenados por duas maneiras
diferentes:  
&nbsp;&nbsp;&nbsp;&nbsp; No modo fotossensível, os fotossensores posicionados nas extremidades do painel são
responsáveis por informar o microcontrolador a direção da fonte de luz. Cada ldr está em série com resistor de 10k atuando como divisores de tensão. Quando
a intensidade da luz é máxima, a resistência do ldr é desprezível e a assim, a corrente total flui para o pino analógico do arduino. Quando a intensidade da luz cai, a resistência do ldr aumenta proporcionalmente provocando uma queda de tensão que deixa de chegar ao microcontrolador. Internamente, as correntes de cada ldr são interpretadas pelo conversor A/D com 2 10 bits de resolução, em seguida, transformadas em um número que vai de 0 a 1023 para cada ponto. Utilizamos esse número para fazer médias, esquerda, direita, superior, inferior e depois a diferença entre elas. Com essas médias, o arduino determina a posição da luz e diz para qual direção cada servo irá girar.  
&nbsp;&nbsp;&nbsp;&nbsp; No modo cronológico, mapeamos a trajetória do sol no céu em uma escala de graus/minutos. Utilizamos o relógio interno do arduino para contar um intervalo. A cada lapso de tempo, o arduino envia um sinal para servo mover a estrutura em um grau. Uma vez que o movimento do sol é altamente previsível, podemos descartar o uso de sensores externos e conseguir o mesmo efeito gastando menos energia e reduzindo componentes.  

### Resultados

>&nbsp;&nbsp;&nbsp;&nbsp; Primeiramente, nosso projeto tinha como objetivo apenas montar uma máquina inteligente capaz de seguir uma fonte de luz e justificar sua necessidade, mas durante a jornada, pensamos que seria interessante compará-la com uma instalação tradicional, onde o painel se encontra fixo. Devido ao orçamento baixo e alta criatividade, utilizamos um cooler
de computador para aferir a produção de energia de cada sistema. A ideia consiste em contar o número de rotações que o cooler efetuou no final do dia. Mais rotações significa mais energia produzida.    
&nbsp;&nbsp;&nbsp;&nbsp; O cooler conta com um sensor interno conhecido como hall. Esse sensor detecta a variação do campo magnético produzida pela bobina do motor que faz o rotor girar. Um circuito interno percebe essa variação e manda um sinal alto pelo fio azul do cooler, por último, nosso software dentro do arduino evita que um único pulso seja contabilizado múltiplas vezes durante os ciclos de loop.    
&nbsp;&nbsp;&nbsp;&nbsp; A cada minuto, o arduino imprime no serial monitor a quantidade de rotações efetuadas naquele momento. É importante ressaltar que essa aferição não segue critérios exigentes. O ideal seria utilizar sensores de tensão e corrente em cima de uma carga puramente resistiva além de executar diversos ensaios. Entretanto, foi o necessário pela nossa condição financeira e foi válido para a comparação.

<p align=""center"">
  <img src="""" width=60%>
</p>

### Conclusão

>&nbsp;&nbsp;&nbsp;&nbsp; O jeito mais barato de obter energia solar ainda é instalando painéis fixos no telhado. O alto custo de um sistema inteligente e a necessidade de manutenções periódicas inviabiliza seu uso em escala reduzida, entretanto, a vantagem na produção de energia (cerca de 20%) com a mesma quantidade de células é essencial para locais com áreas reduzidas ou usinas solares. Em síntese, observou-se a necessidade do rastreador solar para aumentar o grau de obtenção de energia, como operações eficientes de produção de potência, boas condições de armazenamento e tem a vantagem de não produzir danos ao meio ambiente.

### Referências

> BrownDogGadgets. Rastreador de eixo duplo. Acesso em 15 de junho de 2019. Disponível em: https://www.instructables.com/id/Dual-Axis-Tracker-V20/  
EduFreit4s. Código fonte. Acesso em 7 de agosto de 2019. Disponível em: https://github.com/EduFreit4s/estrelinha/blob/master/estrelinha.ino    
Tinkercad. Simulação. Acesso em 9 de agosto de 2019. Disponível em: https://www.tinkercad.com/things/bVD1aZfUp95-estrelinha    
Multisim. Simulação/Circuito. Acesso em 2 de agosto de 2019.      
Portal solar. Site/consulta. Acesso em 26 de junho de 2019. Disponível em: https://www.portalsolar.com.br/a-melhor-direcao-do-painel-solar-fotovoltaico.html  

### Sobre

-   Autores: Eduardo Freitas, Fernanda Ferreira, Matheus Inocêncio e Victor Ramalho
-   Estudantes do IFPB - Campus João Pessoa
-   Curso: Bacharelado em Engenharia Elétrica
-   Disciplinas: Algoritmos e lógica de programação | Introdução a Engenharia Elétrica 
> Email:
-   [freitas.eduardo@academico.ifpb.edu.br](mailto:freitas.eduardo@academico.ifpb.edu.br)
-   [fernanda.n.f.a@gmail.com](mailto:fernanda.n.f.a@gmail.com)       
-   [matheusino11@gmail.com](mailto:matheusino11@gmail.com) 
-   [VictorRamalho101@gmail.com](mailto:VictorRamalho101@gmail.com)


",0,0,0,0,energy-efficiency,"[arduino-nano, energy-efficiency, solartracker]",00000
1556,rts-cycle-conserving-rm,Akter8,N/A,https://github.com/Akter8/rts-cycle-conserving-rm,https://api.github.com/repos/Akter8/rts-cycle-conserving-rm,Simulates a cycle conserving rate monotonic SVFS+DVFS scheduling algorithm for RTS.,"# Cycle Conserving RM Schedule Simulator

Simulates a cycle conserving rate monotonic SVFS+DVFS scheduling algorithm for RTS.

## Description of Files

* configuration.h - Contains the configurable inputs to the program.
* driver.c - Contains the driver function of the program.
* task.h - Contains the definition and function declaration of the Task ADT.
* task.c - Contains the implementation of the Task ADT functions.
* job.h - Contains the ADT of a task instance.
* job.c - Contains the function implementation of Jobs or task instances.
* freq_and_voltage.h - Contains the struct of the ADT and the function declarations related to frequency and voltage inputs.
* freq_and_voltage.c - Contains the function implementations related to frequency and voltage inputs.
* utility.h - Contains function declarations of utility functions.
* utility.c - Contains the function implementation of utiility functions.
* scheduler.h - Contains the struct definitions and functions definitions required for scheduling the task-set.
* scheduler.c - Contains the implementation of the dynamic scheduler.
* Makefile - Contains the compilation commands of the program.

### Input files

* input_tasks_file.txt - Contains the task inputs.
* input_freq_file.txt - Contains the frequency inputs.

### Output files (Only after running the program)

* output_file.txt - Contains the output of the program.
* output_statistics_file.txt - Contains the output statistics of the program.

## How to compile and run

* Make the required changes in configuration.h
* Make the required changes in the input files.
* Run ""make"" on the terminal (in the directory of the program) to compile the program.
* Run the executable defined in Makefile to run the program.
* Run ""make clean"" to remove the compilation from the working directory.

## Description of the structure of the program

* First the program inputs the required data-- task-set information and freq (and voltage) information (at the same time it checks if the data is valid).
* Then the program sorts all the tasks and freq as required.
* Then the program creates instances of tasks till the required time.
* Then the program finds the static frequency and voltage for the task-set.
* Then the program creates various data-structures related to the scheduler.
* Using the data-structures previously defined, the program simulates the dynamic scheduling of the task-set using the given frequency (and voltage) input, also while dynamically changing the frequency and voltage at decision points of the schedule.
* Then the program outputs the schedule and the various statistics of execution of scheduler.

## Assumptions and limitations

* Frequency-calculation overhead time was given as 0.05 units, but there was nothing about frequency-change overhead time. So we have assumed a frequency-change time as 0.1 units of time (double of frequency-calculation overhead). (See configuration.h)
* The phase, period and deadline parameters of a task can only be integers. This is because integers do not cause a loss of accuracy and integers are much easier to work with in terms of schedulers with non-integer granularities.
* The actual execution time essentially calculated and known before hand in this simulation so as to calculate the next decision point. Otherwise it is not possible to simulate a schedule by only calling the scheduler at decision points.
* In the CC-RM algorithm originally devised by Pillai et al, the allocate_cycles() function is only called when a new job arrives. In this program, both allocate_cycles and select_frequency() are called at every decision point as jobs run from 50%-100% of their wcet and the actual execution time is not known by the allocate_cycles().
* Task-sets with worst-case task utilisation > 1 might or might not be schedulable because psuedo random numbers are being used to find the actual execution time. So the simulation still runs for task-sets with worst-case task utilisation > 1, only that it might not finish scheduling.
* The program contains lots of global variables being used to transfer data between functions. Not a problem at this scale of programming, but would be a problem if and when the program would scale up.

## What can be added

* Sporadic and aperiodic jobs to run along side the periodic jobs.
* Instead of just a DVFS algorithm, a reduced context-switch and/or dynamic procrastination module can be added to make the program more energy efficient.
",0,0,2,0,energy-efficiency,"[cycle-conserving, dvfs, dynamic-voltage-and-frequency, energy-efficiency, rate-monotonic, real-time, scheduling-algorithms, simulator, static-voltage]",00000
1557,SystemStats,divyank00,N/A,https://github.com/divyank00/SystemStats,https://api.github.com/repos/divyank00/SystemStats,A system that measures PC's energy consumption and tracks user activity remotely.,"# Sustainable College Labs: 
- Developed a distributed system of computers along with a desktop application that tracks user’s activity and machine’s power
consumption.
- The Project also involved creating a webpage to monitor and control (sleep / shutdown / logoff) all the PCs of a college from a
single screen.
- All the monitoring is done remotely through a Mobile Application.
",0,0,1,15,energy-efficiency,"[energy-efficiency, realtime]",00000
1558,energyUsageInsights,aadomingos,N/A,N/A,https://api.github.com/repos/aadomingos/energyUsageInsights,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A1:4179:2DD3116:5DC73E9:65224112.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1559,msr-2021-robotics-green-practices-replication-package,S2-group,N/A,N/A,https://api.github.com/repos/S2-group/msr-2021-robotics-green-practices-replication-package,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:6A74:1A3E5C8:360D871:6522434E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1560,energy2,jpatacas,N/A,N/A,https://api.github.com/repos/jpatacas/energy2,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E3:2CBC:786EFE:F83793:6522434F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1561,api-ER-minene,fbustos-o,N/A,https://github.com/fbustos-o/api-ER-minene,https://api.github.com/repos/fbustos-o/api-ER-minene,"Aplicación en Python para consultar la API de Energías Renovables del Ministerio de Energía, Chile. ","# api-ER-minene
Aplicación en Python para consultar la API de Energías Renovables del Ministerio de Energía, Chile. https://api.minenergia.cl/

### Forma de uso
1. Registrarse a la herramienta online de la API deEnergías Renovables del Ministerio de Energía: https://api.minenergia.cl/register/
2. Una vez lista su cuenta, enviar un correo a soporte solitando una API_KEY, la cave que permitirá acceder a través del programa ""API.py""
3. Con su ""API_KEY"" puede ingresarla en el código en la linea 22.

![image](https://user-images.githubusercontent.com/121578605/228037015-58b5ae67-f4bd-4ac9-9524-f70a5508ed78.png)

4. Una vez ingresada la API_KEY puede ejecutar el programa que llamará al archivo JSON de ejemplo, que se puede modificar dentro de la misma API. 
5. Si desea re-emplazar el archivo JSON de ejemplo puede obtener otra estructura a gusto de la misma API: https://api.minenergia.cl/api/ en la sección Editor completo.

![image](https://user-images.githubusercontent.com/121578605/228028030-d24d5cd4-7a82-4bd5-a098-459e86b54e36.png)

## Uso de la API y Extracción de un archivo JSON

Una vez dentro de la API, se pueden seleccionar de manera interactiva el o los puntos a evaluar.

![image](https://user-images.githubusercontent.com/121578605/228037622-2dbe099e-e469-4e43-91d8-11796d355919.png)

También es posible agregar los sitios definidos en un archivo del formato CSV o KMZ, siguiendo las instrucciónes proporcionadas en la pestaña ""Subir Sitios"".

> **HINT: Es importante destacar que no se deben solictar más de 20 puntos simultaneamente, ya que el ancho de banda del servidor podría generar una falla y no entregar una respuesta. Para llamados masivos de más de 20 solicitudes es recomendable contactar al soporte de los Exploradores.**

Luego, se pueden seleccionar las variables a consultar para cada uno de los puntos seleccionados. 

![image](https://user-images.githubusercontent.com/121578605/228038408-a87b1ad4-f4fa-4d52-8367-326aaf3dbe70.png)

> **Mayor información sobre las variables disponibles en la API se encuentran en la última sección del README.md**

Con la información de variables se puede pasar al Paso 4, donde se describe el periodo de tiempo a consultar. Por defecto, se define el periodo como el año 2010 completo, que corresponde al periodo de simulación del modelo WRF. Sin embargo, se puede escoger cualquier periodo dentro del rango 1980 a 2017.

Con el periodo definido, en el paso 5, se puede definir el tipo de operación a relizar a la serie de tiempo (anual, mensual, diaria u horaria) y si desea incluir la estadística de año típico meteorológico (permite estimar los espacios de la serie de tiempo sin información con un año típicio meteorológico). Se puede seleccionar un estadistico a las variables, como: promedio, media, máxima o mínima. 

Con toda esta información se puede psar al ultimo paso donde se selecciona la forma de exportación de los datos. En este punto es donde se puede extraer el llamao en JSON para ser utilizado por el programa ""API.py"". Con este programa se pueden editar directamente parámetros del formato JSON extraído, lo que permite mayor dinámica en la consulta.

### Archivos que se pueden exportar
La API de Energías renovables permite extraer los datos solicitados en diversos formatos: 
1. JSON
2. Excel: .xlsx
3. CSV
4. Archivo de MATLAB

## Uso del visor Data_view.py

Se puede cargar la consulta directamente al Archivo Data_view.py, en la linea 26.
![image](https://user-images.githubusercontent.com/121578605/228936026-759daef7-df92-4a46-a66b-6b45cea6e645.png)

Ejecutando el archivo, si todo es correcto, debería ejecutar Pandas GUI: un panel interactivo para analizar los datos. Se debería ver de la siguiente manera:

![image](https://user-images.githubusercontent.com/121578605/228937258-4997a3b8-48f5-46ab-86ff-2cbc73355f5c.png)

Se puede graficar los datos por cada sitio en el menu superior donde indica ""Grapher"":

![image](https://user-images.githubusercontent.com/121578605/228937706-6c3ff64f-53f8-4a24-bbac-231df39b0fe3.png)

## Variables disponibles en la API
A continuación se muestra una descripción detallada a cada variable disponible en el API.

#### Velocidad de viento
La velocidad de viento (en metros por segundo) simulado por el modelo WRF (Weather Research and Forecasting). Se disponen datos de simulaciones realizadas para 2010 y 2015. Además, es posible acceder a datos reconstruidos para el periodo 1980 a 2017.

#### Potencia de Aerogenerador
Generación (kW) de una turbina eólica calculada a partir del viento simulado por el modelo numérico WRF

#### Dirección del viento
Dirección del viento (grados) simulado por el modelo numérico WRF

#### Temperatura en 2m
Temperatura ambiental (°C) modelada a 2m del suelo para el periodo 1980-2017

#### Humedad relativa
Humedad relativa a partir de la modelación de temperatura.

#### Evaporación
Evaporación de bandeja. Estimada con en método Penman-Montieth y calibrada con observaciones de la evaporación de bandeja de las observaciones nacionales de la DGA

#### Temperatura del suelo
Temperatura del suelo (°C) calculado a partir variables atmosféricas modeladas

#### Densidad del aire
Densidad del aire (kg/m3) simulado por el modelo WRF

#### Presión Atmosférica
Presión Atmosférica (hPa) simulada por el modelo WRF

#### Radiación Global Horizontal (WRF)
Radiación global (W/m2) que incide sobre un plano horizontal fijo, simulada por el modelo WRF

#### Radiación Global Horizontal
Radiación global (W/m2) que incide sobre un plano horizontal fijo, simulada por el modelo CLIRAD

#### Radiación Directa Normal
Radiación Directa Normalizada (W/m2) que incide sobre un plano que siempre está perpendicular al sol, simulada por el modelo CLIRAD

#### Radiación Global
Radiación global (W/m2) simulada por el modelo CLIRAD que incide sobre un plano de características definidas por el usuario

#### Radiación Directa
Radiación directa (W/m2) simulada por el modelo CLIRAD que incide sobre un plano de características definidas por el usuario

#### Radiación Difusa
Radiación difusa (W/m2) simulada por el modelo CLIRAD que incide sobre un plano de características definidas por el usuario

#### Radiación Reflejada del Suelo
Radiación reflejada del suelo (W/m2) simulada por el modelo CLIRAD que incide sobre un plano de características definidas por el usuario

#### Presencia Nubes
Presencia de Nubes (booleano) según imágenes visibles del satélite GOES

#### Presencia de Sombras
Presencia de sombras topográficas (booleano) calculado para cada sitio mediante un modelo de elevación digital del terreno de origen satelital

#### Elevación del sol
Elevación del sol (grados) con respecto al horizonte

#### Azimut del Sol
Azimut del sol (grados) respecto al Norte

#### Potencia Sistema Fotovoltaico
Generación (kW) de un sistema fotovoltaico calculada a partir de la radiación del modelo CLIRAD

#### Altura significativa
Altura significativa del Oleaje (m) corresponde a la media aritmética del tercio de olas más altas de un conjunto de olas, calculado a mediante los modelos numéricos SWAN y WWIII

#### Periodo medio
Periodo medio del Oleaje (s) es la media aritmética de los periodos del oleaje, calculado mediante los modelos numéricos SWAN y WWIII

#### Potencia de oleaje
Potencia del Oleaje (kW/m) es el flujo de energía obtenido de la relación entre Altura Significativa y Periodo Medio del oleaje, calculado mediante los modelos numéricos SWAN y WWIII
",0,0,1,0,energy-efficiency,"[database, energy, energy-efficiency, energy-monitor, renewable-energy]",00000
1562,Erei,KOSASIH,N/A,N/A,https://api.github.com/repos/KOSASIH/Erei,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C0:2319:68201A:D7A161:65224117.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1563,backprop-in-c,Bonifatius94,N/A,N/A,https://api.github.com/repos/Bonifatius94/backprop-in-c,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EA:3BF5:749C6E:F08637:6522434F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1564,slock-dpms,oxzi,N/A,N/A,https://api.github.com/repos/oxzi/slock-dpms,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C155:7B5B:73B284:EE94DB:65224350.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1565,JEPO,mohitkumar14,N/A,N/A,https://api.github.com/repos/mohitkumar14/JEPO,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C140:4F4C:7310CD:ED76C0:65224351.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1566,Energy-Resources,talhatallat,N/A,N/A,https://api.github.com/repos/talhatallat/Energy-Resources,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D7:7AEF:2DBD1FD:5D878E2:6522412F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1567,Scientia,PBplusCo,N/A,N/A,https://api.github.com/repos/PBplusCo/Scientia,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BE:4179:2DF985C:5E16B1D:65224351.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1568,measure-naming-best-practices,retrofit-lab,N/A,N/A,https://api.github.com/repos/retrofit-lab/measure-naming-best-practices,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C172:2319:6A0A3A:DB9DFE:65224352.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1569,oclBenchNetworkMapper,vsee,N/A,N/A,https://api.github.com/repos/vsee/oclBenchNetworkMapper,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AE:607B:79B2BB:FAB77F:65224352.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1570,eeprobe,lcudenne,N/A,N/A,https://api.github.com/repos/lcudenne/eeprobe,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CC:33C6:29FCD67:5647FC2:652240FE.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1571,fountain,fountain23,N/A,N/A,https://api.github.com/repos/fountain23/fountain,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DA:178A:2CAB737:5B73B11:65224353.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1572,innovationForum,glowkeeper,N/A,N/A,https://api.github.com/repos/glowkeeper/innovationForum,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C188:5A27:72710B:EC659E:65224354.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1573,Light-Pollution,Krish2s,N/A,N/A,https://api.github.com/repos/Krish2s/Light-Pollution,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C164:178A:2CAB8B7:5B73E23:65224354.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1574,ERM-Device,SErjKk,N/A,N/A,https://api.github.com/repos/SErjKk/ERM-Device,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F1:5F41:7035E0:E7FFF0:65224355.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1575,energy-measurement-data,sustainable-computing-io,N/A,N/A,https://api.github.com/repos/sustainable-computing-io/energy-measurement-data,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C105:092A:7179FB:EA8E2F:65224355.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1576,Energy-Efficient-Distributed-System,cybandy,N/A,N/A,https://api.github.com/repos/cybandy/Energy-Efficient-Distributed-System,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DD:1F34:1BB12A3:38EA5A6:65224356.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1577,ICWE-2023,stefanhuber,N/A,N/A,https://api.github.com/repos/stefanhuber/ICWE-2023,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C3:5831:2BC66DD:59B560D:65224356.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1578,sun-tracking-pv-system,mustafa-siddiqui,N/A,N/A,https://api.github.com/repos/mustafa-siddiqui/sun-tracking-pv-system,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12D:2E63:2C0F6E:5BBB35:65224357.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1579,Spiking-Neural-Network-Comparison,virgit1,N/A,N/A,https://api.github.com/repos/virgit1/Spiking-Neural-Network-Comparison,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10F:505E:2F1BD7:61A2EE:65224358.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1580,ashrae-1836-rp-text-mining,retrofit-lab,N/A,N/A,https://api.github.com/repos/retrofit-lab/ashrae-1836-rp-text-mining,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C136:4771:2C8D23:5C97EA:65224358.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1581,physalia-webapp,luiscruz,N/A,N/A,https://api.github.com/repos/luiscruz/physalia-webapp,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10B:3493:273F743:50CC405:65224359.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1582,DPSRec,JPMarquesEE,N/A,N/A,https://api.github.com/repos/JPMarquesEE/DPSRec,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C179:0BEC:2C06ED:5BB4D7:65224359.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1583,energy-efficiency-of-homes,BBC-Data-Unit,N/A,N/A,https://api.github.com/repos/BBC-Data-Unit/energy-efficiency-of-homes,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18A:4771:2C8EC3:5C9B55:6522435A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1584,perf-expr-ener,rjray,N/A,N/A,https://api.github.com/repos/rjray/perf-expr-ener,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10C:64D2:711F44:E9820D:6522410F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1585,netsuspend,leighgarbs,N/A,N/A,https://api.github.com/repos/leighgarbs/netsuspend,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C109:8AF9:6F2516:E5C969:6522413B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1586,libnina,gabrielbmoro,N/A,N/A,https://api.github.com/repos/gabrielbmoro/libnina,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11D:336C:2D26B2C:5C903B5:6522435A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1587,o012,green-haskell,N/A,N/A,https://api.github.com/repos/green-haskell/o012,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19A:0BEC:2C084E:5BB7B9:6522435B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1588,jvm-comparaison,chakib-belgaid,N/A,N/A,https://api.github.com/repos/chakib-belgaid/jvm-comparaison,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AF:6611:6CE9A6:E143BD:6522413D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1589,pwa-energy-comparison,stefanhuber,N/A,N/A,https://api.github.com/repos/stefanhuber/pwa-energy-comparison,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C18B:24F2:29C9E80:55CA1EC:6522435C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1590,supernova,jamestiotio,N/A,N/A,https://api.github.com/repos/jamestiotio/supernova,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C123:4776:2DF4A1:5F6A84:6522435C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1591,ecoformulae,ecofrugalism,N/A,N/A,https://api.github.com/repos/ecofrugalism/ecoformulae,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D5:22D5:2F688DE:6114FBA:6522435D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1592,smart-heat,Kiron030,N/A,N/A,https://api.github.com/repos/Kiron030/smart-heat,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CA:17C0:2B23AC:59F3D1:6522435E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1593,Big-Data-for-Energy-Management,Patcharanat,N/A,N/A,https://api.github.com/repos/Patcharanat/Big-Data-for-Energy-Management,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1CB:41B1:6F9B2F:E6E96E:65224145.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1594,phd,prasanjit-,N/A,N/A,https://api.github.com/repos/prasanjit-/phd,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C173:1D49:2C702DC:5B17A21:6522435E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1595,COMP2002-Artificial-Intelligence-Projects,MadeByParker,N/A,N/A,https://api.github.com/repos/MadeByParker/COMP2002-Artificial-Intelligence-Projects,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:505E:2F223B:61B040:6522435F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1596,smartstreetlight,vigneshnin,N/A,N/A,https://api.github.com/repos/vigneshnin/smartstreetlight,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13A:458F:2C6E052:5B1D98E:6522435F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1597,Microclouds-simulation,ismcuacor,N/A,N/A,https://api.github.com/repos/ismcuacor/Microclouds-simulation,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10F:505E:2F2354:61B276:65224360.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1598,Home_Efficiency,andypicke,N/A,N/A,https://api.github.com/repos/andypicke/Home_Efficiency,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15F:1E37:2CA648:5CD6AA:65224360.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1599,aws-on-demand,rvbg,N/A,N/A,https://api.github.com/repos/rvbg/aws-on-demand,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11A:17C0:2B263C:59F94D:65224361.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1600,Smart-Light-Client-Solution,ekaterinadvolkova,N/A,N/A,https://api.github.com/repos/ekaterinadvolkova/Smart-Light-Client-Solution,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AC:3819:1AD80F6:37332A7:6522412B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1601,cse216,DrDareDevel,N/A,N/A,https://api.github.com/repos/DrDareDevel/cse216,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16D:58D0:75B406:F2401D:65224138.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1602,Smocket,Jugendhackt,N/A,N/A,https://api.github.com/repos/Jugendhackt/Smocket,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C16E:3493:273FE7C:50CD321:65224362.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1603,CNPq-CTEnerg,SensorNet-UFAL,N/A,N/A,https://api.github.com/repos/SensorNet-UFAL/CNPq-CTEnerg,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C156:3493:273FF0B:50CD439:65224362.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1604,Formal_Methods_for_System_Verification,FabioDainese,N/A,N/A,https://api.github.com/repos/FabioDainese/Formal_Methods_for_System_Verification,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C181:38A4:2BF0618:5A2A1B6:65224364.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1605,blogpost,abhaykaggarwal,N/A,N/A,https://api.github.com/repos/abhaykaggarwal/blogpost,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C172:2772:28F7DCB:5446EB5:65224364.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1606,WiDS-Kaggle-Competition-2022,HaleyEgan,N/A,N/A,https://api.github.com/repos/HaleyEgan/WiDS-Kaggle-Competition-2022,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C195:6C98:2CE96F:5D6843:65224365.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1607,ashrae-1836-rp-categorization,retrofit-lab,N/A,N/A,https://api.github.com/repos/retrofit-lab/ashrae-1836-rp-categorization,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C162:7890:2C031E:5BA54A:65224366.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1608,Shell-online-career-challenge,Louisli0515,N/A,N/A,https://api.github.com/repos/Louisli0515/Shell-online-career-challenge,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C155:47EA:26CCB32:4FB4ABE:65224366.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1609,decade-of-fuel-poverty,CaitHRobinson,N/A,N/A,https://api.github.com/repos/CaitHRobinson/decade-of-fuel-poverty,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BB:6C98:2CEACE:5D6B30:65224367.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,energy-efficiency,"[N, /, A]",00000
1610,PHES-ODM,Big-Life-Lab,N/A,N/A,https://api.github.com/repos/Big-Life-Lab/PHES-ODM,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E3:840D:2962DCC:5513EF7:65224367.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1611,PooPyLab_Project,toogad,N/A,N/A,https://api.github.com/repos/toogad/PooPyLab_Project,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AE:1CC6:2A5F863:56F8F92:65224368.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1612,QGEP,QGEP,N/A,N/A,https://api.github.com/repos/QGEP/QGEP,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1E8:3B38:2FF588:635B8A:65224369.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1613,qgis-swmm,Oslandia,N/A,N/A,https://api.github.com/repos/Oslandia/qgis-swmm,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FC:5A71:30735E0:631DAE7:65224369.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1614,covid-poops,Metropolitan-Council,N/A,N/A,https://api.github.com/repos/Metropolitan-Council/covid-poops,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D9:47EA:26CCDD4:4FB5049:6522436A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1615,voc-identify,dorbarker,N/A,N/A,https://api.github.com/repos/dorbarker/voc-identify,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DE:3B38:2FF715:635EDF:6522436A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1616,datamodel,QGEP,N/A,N/A,https://api.github.com/repos/QGEP/datamodel,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C17C:797D:2A27FE:57EB9C:6522436B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1617,wsi,barneydobson,N/A,N/A,https://api.github.com/repos/barneydobson/wsi,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10A:6584:2860762:5306ED0:6522436C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1618,shedding,tillahoffmann,N/A,N/A,https://api.github.com/repos/tillahoffmann/shedding,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B9:0BEC:2C153D:5BD2B6:6522436C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1619,docs,QGEP,N/A,N/A,https://api.github.com/repos/QGEP/docs,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1B2:5A86:2BD1456:59E3DDD:6522436D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1620,PA-Oil-and-Gas-Waste-Analysis,foz306,N/A,N/A,https://api.github.com/repos/foz306/PA-Oil-and-Gas-Waste-Analysis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C19C:2EE5:2883225:535948E:6522436D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1621,covid-pulse-cy,KIOS-Research,N/A,N/A,https://api.github.com/repos/KIOS-Research/covid-pulse-cy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A9:8AB4:29D064A:55DC6CA:6522436E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1622,wbequant,julianfaraway,N/A,N/A,https://api.github.com/repos/julianfaraway/wbequant,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C126:1ECC:2CBE7E:5D17D9:6522436F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1623,isybau2qgep,tschuettenberg,N/A,N/A,https://api.github.com/repos/tschuettenberg/isybau2qgep,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D1:1E37:2CB68E:5CF840:6522436F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1624,data-api,3rww,N/A,N/A,https://api.github.com/repos/3rww/data-api,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C194:840D:29635AD:5514F58:65224370.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1625,awesome-water-wastewater,he-yang,N/A,N/A,https://api.github.com/repos/he-yang/awesome-water-wastewater,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1DA:2EE5:28834D0:53599FE:65224370.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1626,flush-it,civicmapper,N/A,N/A,https://api.github.com/repos/civicmapper/flush-it,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C147:6B96:288C18D:5371A0B:65224371.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1627,Wastewater-TraceClerk,ucsd-cmi,N/A,N/A,https://api.github.com/repos/ucsd-cmi/Wastewater-TraceClerk,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A3:47EA:26CD41E:4FB5D6E:65224372.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1628,UASBR,jaganmohan1997,N/A,N/A,https://api.github.com/repos/jaganmohan1997/UASBR,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C187:2772:28F88F8:54485F6:65224372.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1629,Wastewater-ExposureAPI,ucsd-cmi,N/A,N/A,https://api.github.com/repos/ucsd-cmi/Wastewater-ExposureAPI,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A6:505E:2F3417:61D56C:65224373.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1630,TTK4130-Project,sindrehan,N/A,N/A,https://api.github.com/repos/sindrehan/TTK4130-Project,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C163:1E37:2CBC24:5D03BD:65224373.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1631,sewer-atlas-docs,3rww,N/A,N/A,https://api.github.com/repos/3rww/sewer-atlas-docs,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C169:6829:2E751D5:5F24E2A:65224374.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1632,Microeukaryotic-predators-shape-the-wastewater-microbiome,N-Heck-1,N/A,N/A,https://api.github.com/repos/N-Heck-1/Microeukaryotic-predators-shape-the-wastewater-microbiome,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C151:5A86:2BD1C2C:59E4E29:65224374.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1633,TTK4130,Meskedal,N/A,N/A,https://api.github.com/repos/Meskedal/TTK4130,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1D0:24F2:29CB3D4:55CCE74:65224375.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1634,WasteWaterEng,crypticq,N/A,N/A,https://api.github.com/repos/crypticq/WasteWaterEng,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1C4:643D:2A4E6B4:56C4167:65224376.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1635,radx,ZooPhy,N/A,N/A,https://api.github.com/repos/ZooPhy/radx,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C10C:4776:2E0C0A:5F9B45:65224376.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1636,sars-cov-2-wbe,thomasbtf,N/A,N/A,https://api.github.com/repos/thomasbtf/sars-cov-2-wbe,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1A4:6B96:288C7C6:5372715:65224377.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1637,sdg-6-3-1,ONSgeo,N/A,N/A,https://api.github.com/repos/ONSgeo/sdg-6-3-1,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C176:33C6:2A24715:569A016:65224377.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1638,Wastewater-BuildingTrace,ucsd-cmi,N/A,N/A,https://api.github.com/repos/ucsd-cmi/Wastewater-BuildingTrace,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C102:5B68:2C9712:5CE8C5:65224378.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,wastewater,"[N, /, A]",00000
1639,HELICS,GMLC-TDC,N/A,N/A,https://api.github.com/repos/GMLC-TDC/HELICS,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C15F:1E37:2CC1B4:5D0F26:65224379.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1640,RLGC,RLGC-Project,N/A,N/A,https://api.github.com/repos/RLGC-Project/RLGC,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C175:505E:2F3A87:61E257:65224379.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1641,best-of-ps,jinningwang,N/A,N/A,https://api.github.com/repos/jinningwang/best-of-ps,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C13E:24F2:29CB7B9:55CD69C:6522437A.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1642,L2RPN-using-A3C,amar-iastate,N/A,N/A,https://api.github.com/repos/amar-iastate/L2RPN-using-A3C,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FF:4776:2E1024:5FA3D2:6522437B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1643,multi-objective-attack-power-grid,alexfanjn,N/A,N/A,https://api.github.com/repos/alexfanjn/multi-objective-attack-power-grid,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C172:2772:28F902C:5449502:6522437B.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1644,Nordic44-Nordpool,ALSETLab,N/A,N/A,https://api.github.com/repos/ALSETLab/Nordic44-Nordpool,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1EA:500E:2A81628:573D216:6522437C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1645,powersas.m,ANL-CEEESA,N/A,N/A,https://api.github.com/repos/ANL-CEEESA/powersas.m,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C100:336C:2D2892C:5C94228:6522437C.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1646,Stargazer,martynvandijke,N/A,N/A,https://api.github.com/repos/martynvandijke/Stargazer,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C11D:336C:2CEED90:5C1C9CC:65223FE4.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1647,Critical-Infrastructure-Networks,Kostia-Zuev,N/A,N/A,https://api.github.com/repos/Kostia-Zuev/Critical-Infrastructure-Networks,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1FD:797D:2A36E9:580ACB:6522437D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1648,BabelFish,ALSETLab,N/A,N/A,https://api.github.com/repos/ALSETLab/BabelFish,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BE:68AA:2EB9B60:5FAE1F5:6522437D.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1649,Audur,ALSETLab,N/A,N/A,https://api.github.com/repos/ALSETLab/Audur,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1F4:47EA:26CDE62:4FB72E6:6522437E.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1650,ltb2,CURENT2,N/A,N/A,https://api.github.com/repos/CURENT2/ltb2,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C101:0208:2E16D11:5E66AC6:6522437F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1651,agvis,CURENT,N/A,N/A,https://api.github.com/repos/CURENT/agvis,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AE:1CC6:2A60C6F:56FB961:6522437F.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1652,GENCO-Investment-Strategies-by-Simulation-for-Demand-Side-Role-for-Investments-and-Capacity-Adequacy,kathleenwest,N/A,N/A,https://api.github.com/repos/kathleenwest/GENCO-Investment-Strategies-by-Simulation-for-Demand-Side-Role-for-Investments-and-Capacity-Adequacy,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C126:1ECC:2CCD5F:5D36F0:65224380.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1653,Grid-Energy-Management,BYU-PRISM,N/A,N/A,https://api.github.com/repos/BYU-PRISM/Grid-Energy-Management,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C123:4776:2E1587:5FAEF5:65224380.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1654,GenAdequacy.jl,skazemi,N/A,N/A,https://api.github.com/repos/skazemi/GenAdequacy.jl,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C125:6829:2E75CEF:5F2657A:65224381.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1655,power-grid-gans,FlorianDe,N/A,N/A,https://api.github.com/repos/FlorianDe/power-grid-gans,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1BB:6C98:2D03C1:5D9F48:65224382.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1656,CyberControl,RaheelJ,N/A,N/A,https://api.github.com/repos/RaheelJ/CyberControl,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C12D:2E63:2C3658:5C0C56:65224382.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1657,power-grid,mariamartinezbarbeito,N/A,N/A,https://api.github.com/repos/mariamartinezbarbeito/power-grid,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C1AD:17C0:2B3E5B:5A2C04:65224383.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
1658,S2Sim,UCSD-SEELab,N/A,N/A,https://api.github.com/repos/UCSD-SEELab/S2Sim,N/A,"{'message': 'API rate limit exceeded for user ID 119282372. If you reach out to GitHub Support for help, please include the request ID C180:5B68:2CA151:5CFE1E:65224383.', 'documentation_url': 'https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting'}",N/A,N/A,N/A,N/A,power-grids,"[N, /, A]",00000
